
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d400  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0801d538  0801d538  0002d538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801dff0  0801dff0  0002dff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801e0b0  0801e0b0  00030574  2**0
                  CONTENTS
  5 .ARM          00000008  0801e0b0  0801e0b0  0002e0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801e0b8  0801e0b8  00030574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801e0b8  0801e0b8  0002e0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801e0c0  0801e0c0  0002e0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000574  20000000  0801e0c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000022c0  20000574  0801e638  00030574  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002834  0801e638  00032834  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004b703  00000000  00000000  0003059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000adfa  00000000  00000000  0007bca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003b88  00000000  00000000  00086aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003768  00000000  00000000  0008a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a173  00000000  00000000  0008dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045aa9  00000000  00000000  000b7f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6e8c  00000000  00000000  000fd9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d4838  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f930  00000000  00000000  001d4888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000574 	.word	0x20000574
 8000154:	00000000 	.word	0x00000000
 8000158:	0801d520 	.word	0x0801d520

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000578 	.word	0x20000578
 8000174:	0801d520 	.word	0x0801d520

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b974 	b.w	800108c <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4688      	mov	r8, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14d      	bne.n	8000e68 <__udivmoddi4+0xac>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d968      	bls.n	8000ea4 <__udivmoddi4+0xe8>
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	b152      	cbz	r2, 8000dee <__udivmoddi4+0x32>
 8000dd8:	fa01 f302 	lsl.w	r3, r1, r2
 8000ddc:	f1c2 0120 	rsb	r1, r2, #32
 8000de0:	fa20 f101 	lsr.w	r1, r0, r1
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	ea41 0803 	orr.w	r8, r1, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000df2:	0c21      	lsrs	r1, r4, #16
 8000df4:	fbb8 fef5 	udiv	lr, r8, r5
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fb05 831e 	mls	r3, r5, lr, r8
 8000e00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e04:	fb0e f107 	mul.w	r1, lr, r7
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x68>
 8000e0c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e10:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e14:	f080 811e 	bcs.w	8001054 <__udivmoddi4+0x298>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	f240 811b 	bls.w	8001054 <__udivmoddi4+0x298>
 8000e1e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e2c:	fb05 3310 	mls	r3, r5, r0, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb00 f707 	mul.w	r7, r0, r7
 8000e38:	42a7      	cmp	r7, r4
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x96>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e44:	f080 8108 	bcs.w	8001058 <__udivmoddi4+0x29c>
 8000e48:	42a7      	cmp	r7, r4
 8000e4a:	f240 8105 	bls.w	8001058 <__udivmoddi4+0x29c>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	1be4      	subs	r4, r4, r7
 8000e54:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e58:	2100      	movs	r1, #0
 8000e5a:	b11e      	cbz	r6, 8000e64 <__udivmoddi4+0xa8>
 8000e5c:	40d4      	lsrs	r4, r2
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e9c6 4300 	strd	r4, r3, [r6]
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0xc2>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	f000 80ee 	beq.w	800104e <__udivmoddi4+0x292>
 8000e72:	2100      	movs	r1, #0
 8000e74:	e9c6 0500 	strd	r0, r5, [r6]
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	fab3 f183 	clz	r1, r3
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d14a      	bne.n	8000f1c <__udivmoddi4+0x160>
 8000e86:	42ab      	cmp	r3, r5
 8000e88:	d302      	bcc.n	8000e90 <__udivmoddi4+0xd4>
 8000e8a:	4282      	cmp	r2, r0
 8000e8c:	f200 80f9 	bhi.w	8001082 <__udivmoddi4+0x2c6>
 8000e90:	1a84      	subs	r4, r0, r2
 8000e92:	eb65 0303 	sbc.w	r3, r5, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	4698      	mov	r8, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d0e2      	beq.n	8000e64 <__udivmoddi4+0xa8>
 8000e9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ea2:	e7df      	b.n	8000e64 <__udivmoddi4+0xa8>
 8000ea4:	b902      	cbnz	r2, 8000ea8 <__udivmoddi4+0xec>
 8000ea6:	deff      	udf	#255	; 0xff
 8000ea8:	fab2 f282 	clz	r2, r2
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	f040 8091 	bne.w	8000fd4 <__udivmoddi4+0x218>
 8000eb2:	eba1 050c 	sub.w	r5, r1, ip
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ec4:	fb07 5013 	mls	r0, r7, r3, r5
 8000ec8:	0c25      	lsrs	r5, r4, #16
 8000eca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ece:	fb0e f003 	mul.w	r0, lr, r3
 8000ed2:	42a8      	cmp	r0, r5
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x12c>
 8000ed6:	eb1c 0505 	adds.w	r5, ip, r5
 8000eda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x12a>
 8000ee0:	42a8      	cmp	r0, r5
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	1a2d      	subs	r5, r5, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ef0:	fb07 5510 	mls	r5, r7, r0, r5
 8000ef4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x156>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x154>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2ca>
 8000f10:	4628      	mov	r0, r5
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f1a:	e79e      	b.n	8000e5a <__udivmoddi4+0x9e>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f2e:	fa05 f301 	lsl.w	r3, r5, r1
 8000f32:	431c      	orrs	r4, r3
 8000f34:	40fd      	lsrs	r5, r7
 8000f36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f42:	0c20      	lsrs	r0, r4, #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fb09 5518 	mls	r5, r9, r8, r5
 8000f4c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f50:	fb08 f00e 	mul.w	r0, r8, lr
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b8>
 8000f5c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2bc>
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2bc>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4465      	add	r5, ip
 8000f74:	1a2d      	subs	r5, r5, r0
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f7c:	fb09 5510 	mls	r5, r9, r0, r5
 8000f80:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f88:	45ae      	cmp	lr, r5
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1e2>
 8000f8c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2b4>
 8000f96:	45ae      	cmp	lr, r5
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2b4>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4465      	add	r5, ip
 8000f9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fa6:	eba5 050e 	sub.w	r5, r5, lr
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46a6      	mov	lr, r4
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x2a4>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x2a0>
 8000fb4:	b15e      	cbz	r6, 8000fce <__udivmoddi4+0x212>
 8000fb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fba:	eb65 050e 	sbc.w	r5, r5, lr
 8000fbe:	fa05 f707 	lsl.w	r7, r5, r7
 8000fc2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fc6:	40cd      	lsrs	r5, r1
 8000fc8:	431f      	orrs	r7, r3
 8000fca:	e9c6 7500 	strd	r7, r5, [r6]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c2 0320 	rsb	r3, r2, #32
 8000fd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000fdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe0:	fa25 f303 	lsr.w	r3, r5, r3
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	430d      	orrs	r5, r1
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ff4:	fb07 3011 	mls	r0, r7, r1, r3
 8000ff8:	0c2b      	lsrs	r3, r5, #16
 8000ffa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ffe:	fb01 f00e 	mul.w	r0, r1, lr
 8001002:	4298      	cmp	r0, r3
 8001004:	fa04 f402 	lsl.w	r4, r4, r2
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x260>
 800100a:	eb1c 0303 	adds.w	r3, ip, r3
 800100e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b8>
 8001014:	4298      	cmp	r0, r3
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b8>
 8001018:	3902      	subs	r1, #2
 800101a:	4463      	add	r3, ip
 800101c:	1a1b      	subs	r3, r3, r0
 800101e:	b2ad      	uxth	r5, r5
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3310 	mls	r3, r7, r0, r3
 8001028:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800102c:	fb00 f30e 	mul.w	r3, r0, lr
 8001030:	42ab      	cmp	r3, r5
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x28a>
 8001034:	eb1c 0505 	adds.w	r5, ip, r5
 8001038:	f100 38ff 	add.w	r8, r0, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2b0>
 800103e:	42ab      	cmp	r3, r5
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2b0>
 8001042:	3802      	subs	r0, #2
 8001044:	4465      	add	r5, ip
 8001046:	1aed      	subs	r5, r5, r3
 8001048:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0x104>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e707      	b.n	8000e64 <__udivmoddi4+0xa8>
 8001054:	4686      	mov	lr, r0
 8001056:	e6e5      	b.n	8000e24 <__udivmoddi4+0x68>
 8001058:	4618      	mov	r0, r3
 800105a:	e6fa      	b.n	8000e52 <__udivmoddi4+0x96>
 800105c:	454b      	cmp	r3, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f8>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001068:	3801      	subs	r0, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f8>
 800106c:	4640      	mov	r0, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x28a>
 8001070:	4620      	mov	r0, r4
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1e2>
 8001074:	4641      	mov	r1, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x260>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b8>
 800107c:	3b02      	subs	r3, #2
 800107e:	4465      	add	r5, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x12c>
 8001082:	4608      	mov	r0, r1
 8001084:	e709      	b.n	8000e9a <__udivmoddi4+0xde>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x156>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800109e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d6:	4013      	ands	r3, r2
 80010d8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_ADC_Init+0x94>)
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <MX_ADC_Init+0x98>)
 80010ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_ADC_Init+0x94>)
 80010f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010f4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_ADC_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_ADC_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_ADC_Init+0x94>)
 800110a:	2204      	movs	r2, #4
 800110c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_ADC_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_ADC_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_ADC_Init+0x94>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_ADC_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_ADC_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_ADC_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_ADC_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_ADC_Init+0x94>)
 8001144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_ADC_Init+0x94>)
 800114c:	2207      	movs	r2, #7
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_ADC_Init+0x94>)
 8001152:	2207      	movs	r2, #7
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_ADC_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_ADC_Init+0x94>)
 8001166:	f002 fc4f 	bl	8003a08 <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001170:	f000 fdea 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000590 	.word	0x20000590
 800117c:	40012400 	.word	0x40012400

08001180 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_ADC_MspInit+0x24>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d103      	bne.n	800119a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001192:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001196:	f7ff ff7b 	bl	8001090 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012400 	.word	0x40012400

080011a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_ADC_MspDeInit+0x24>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d103      	bne.n	80011c2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f7ff ff7f 	bl	80010c0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012400 	.word	0x40012400

080011d0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <SYS_InitMeasurement+0x14>)
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <SYS_InitMeasurement+0x18>)
 80011d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000590 	.word	0x20000590
 80011e8:	40012400 	.word	0x40012400

080011ec <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <SYS_GetBatteryLevel+0x5c>)
 80011fc:	f000 f82a 	bl	8001254 <ADC_ReadChannels>
 8001200:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	e016      	b.n	800123c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <SYS_GetBatteryLevel+0x60>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001216:	4293      	cmp	r3, r2
 8001218:	d00b      	beq.n	8001232 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <SYS_GetBatteryLevel+0x60>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	e004      	b.n	800123c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <SYS_GetBatteryLevel+0x64>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800123c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	b4002000 	.word	0xb4002000
 800124c:	1fff75aa 	.word	0x1fff75aa
 8001250:	004c08d8 	.word	0x004c08d8

08001254 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800126c:	f7ff ff3a 	bl	80010e4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <ADC_ReadChannels+0x88>)
 8001272:	f003 f9f8 	bl	8004666 <HAL_ADCEx_Calibration_Start>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800127c:	f000 fd64 	bl	8001d48 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <ADC_ReadChannels+0x88>)
 8001294:	f002 ff04 	bl	80040a0 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800129e:	f000 fd53 	bl	8001d48 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <ADC_ReadChannels+0x88>)
 80012a4:	f002 fde0 	bl	8003e68 <HAL_ADC_Start>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80012ae:	f000 fd4b 	bl	8001d48 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80012b2:	f04f 31ff 	mov.w	r1, #4294967295
 80012b6:	4809      	ldr	r0, [pc, #36]	; (80012dc <ADC_ReadChannels+0x88>)
 80012b8:	f002 fe4e 	bl	8003f58 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <ADC_ReadChannels+0x88>)
 80012be:	f002 fe19 	bl	8003ef4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <ADC_ReadChannels+0x88>)
 80012c4:	f002 fedf 	bl	8004086 <HAL_ADC_GetValue>
 80012c8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <ADC_ReadChannels+0x88>)
 80012cc:	f002 fd50 	bl	8003d70 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80012d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000590 	.word	0x20000590

080012e0 <LL_AHB1_GRP1_EnableClock>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001314:	2004      	movs	r0, #4
 8001316:	f7ff ffe3 	bl	80012e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff ffe0 	bl	80012e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2102      	movs	r1, #2
 8001324:	200b      	movs	r0, #11
 8001326:	f003 fb44 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800132a:	200b      	movs	r0, #11
 800132c:	f003 fb5b 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	200c      	movs	r0, #12
 8001336:	f003 fb3c 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800133a:	200c      	movs	r0, #12
 800133c:	f003 fb53 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	200d      	movs	r0, #13
 8001346:	f003 fb34 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800134a:	200d      	movs	r0, #13
 800134c:	f003 fb4b 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	203d      	movs	r0, #61	; 0x3d
 8001356:	f003 fb2c 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800135a:	203d      	movs	r0, #61	; 0x3d
 800135c:	f003 fb43 	bl	80049e6 <HAL_NVIC_EnableIRQ>

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001370:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001374:	d101      	bne.n	800137a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800137a:	2300      	movs	r3, #0
#endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	58004000 	.word	0x58004000

08001388 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80013a0:	4b56      	ldr	r3, [pc, #344]	; (80014fc <FLASH_IF_Write+0x174>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0299      	lsls	r1, r3, #10
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <FLASH_IF_Write+0x178>)
 80013a8:	400b      	ands	r3, r1
 80013aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	0adb      	lsrs	r3, r3, #11
 80013b6:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <FLASH_IF_Write+0x174>)
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	0291      	lsls	r1, r2, #10
 80013ca:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <FLASH_IF_Write+0x178>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d2:	fb01 f202 	mul.w	r2, r1, r2
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	0adb      	lsrs	r3, r3, #11
 80013da:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <FLASH_IF_Write+0x7a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d104      	bne.n	8001402 <FLASH_IF_Write+0x7a>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001402:	f06f 0304 	mvn.w	r3, #4
 8001406:	e074      	b.n	80014f2 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <FLASH_IF_Write+0x17c>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da02      	bge.n	8001416 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001410:	f06f 0303 	mvn.w	r3, #3
 8001414:	e06d      	b.n	80014f2 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	429a      	cmp	r2, r3
 800141c:	d005      	beq.n	800142a <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001424:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e05b      	b.n	80014e8 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f8f8 	bl	800162a <FLASH_IF_IsEmpty>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d037      	beq.n	80014b0 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001446:	f06f 0304 	mvn.w	r3, #4
 800144a:	e052      	b.n	80014f2 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001452:	02db      	lsls	r3, r3, #11
 8001454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001458:	4619      	mov	r1, r3
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f01a fc74 	bl	801bd48 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	6a39      	ldr	r1, [r7, #32]
 800146c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800146e:	b292      	uxth	r2, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f01a fc69 	bl	801bd48 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001476:	2200      	movs	r2, #0
 8001478:	2101      	movs	r1, #1
 800147a:	69f8      	ldr	r0, [r7, #28]
 800147c:	f000 f865 	bl	800154a <FLASH_IF_EraseByPages>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001486:	f06f 0301 	mvn.w	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 800148c:	e030      	b.n	80014f0 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001494:	02db      	lsls	r3, r3, #11
 8001496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f88a 	bl	80015b6 <FLASH_IF_Write_Buffer>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80014a8:	f06f 0302 	mvn.w	r3, #2
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80014ae:	e01f      	b.n	80014f0 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014b8:	f000 f87d 	bl	80015b6 <FLASH_IF_Write_Buffer>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80014c2:	f06f 0302 	mvn.w	r3, #2
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80014c8:	e012      	b.n	80014f0 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	4413      	add	r3, r2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	4413      	add	r3, r2
 80014d8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d99f      	bls.n	8001430 <FLASH_IF_Write+0xa8>
  }

  return status;
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3730      	adds	r7, #48	; 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	1fff75e0 	.word	0x1fff75e0
 8001500:	03fffc00 	.word	0x03fffc00
 8001504:	58004000 	.word	0x58004000

08001508 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001514:	e00b      	b.n	800152e <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001516:	bf00      	nop
 8001518:	f7ff ff24 	bl	8001364 <LL_FLASH_IsActiveFlag_OperationSuspended>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1fa      	bne.n	8001518 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	2001      	movs	r0, #1
 800152a:	f003 fef5 	bl	8005318 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001538:	4299      	cmp	r1, r3
 800153a:	bf08      	it	eq
 800153c:	4290      	cmpeq	r0, r2
 800153e:	d1ea      	bne.n	8001516 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001540:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b08a      	sub	sp, #40	; 0x28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	460b      	mov	r3, r1
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	4618      	mov	r0, r3
 8001570:	f004 f870 	bl	8005654 <HAL_FLASHEx_Erase_IT>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800157a:	e00a      	b.n	8001592 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800157c:	f107 0214 	add.w	r2, r7, #20
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f004 f80c 	bl	80055a4 <HAL_FLASHEx_Erase>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <FLASH_IF_EraseByPages+0x62>
 800159a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d101      	bne.n	80015a6 <FLASH_IF_EraseByPages+0x5c>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e003      	b.n	80015ae <FLASH_IF_EraseByPages+0x64>
 80015a6:	f06f 0301 	mvn.w	r3, #1
 80015aa:	e000      	b.n	80015ae <FLASH_IF_EraseByPages+0x64>
 80015ac:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b08a      	sub	sp, #40	; 0x28
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e020      	b.n	8001612 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	2208      	movs	r2, #8
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	4618      	mov	r0, r3
 80015da:	f01a fbb5 	bl	801bd48 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80015de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	bf08      	it	eq
 80015e8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80015ec:	d005      	beq.n	80015fa <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80015ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff ff88 	bl	8001508 <FLASH_IF_Write64>
 80015f8:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3308      	adds	r3, #8
 80015fe:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3308      	adds	r3, #8
 8001604:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	3301      	adds	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3d9      	bcc.n	80015d0 <FLASH_IF_Write_Buffer+0x1a>
 800161c:	e000      	b.n	8001620 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800161e:	bf00      	nop
    }
  }

  return status;
 8001620:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001622:	4618      	mov	r0, r3
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001634:	e00a      	b.n	800164c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d001      	beq.n	8001646 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001642:	2301      	movs	r3, #1
 8001644:	e039      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3b01      	subs	r3, #1
 800164a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ef      	bne.n	8001636 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	e010      	b.n	8001682 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f103 0208 	add.w	r2, r3, #8
 8001666:	60fa      	str	r2, [r7, #12]
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	bf08      	it	eq
 8001672:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001676:	d001      	beq.n	800167c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001678:	2301      	movs	r3, #1
 800167a:	e01e      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3301      	adds	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3e9      	bcc.n	8001660 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800169a:	e00a      	b.n	80016b2 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2bff      	cmp	r3, #255	; 0xff
 80016a6:	d001      	beq.n	80016ac <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e006      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f1      	bne.n	800169c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80016b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <LL_AHB2_GRP1_EnableClock>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ffdb 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff ffd8 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2004      	movs	r0, #4
 8001716:	f7ff ffd5 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001720:	4829      	ldr	r0, [pc, #164]	; (80017c8 <MX_GPIO_Init+0xd4>)
 8001722:	f004 fa89 	bl	8005c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2120      	movs	r1, #32
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <MX_GPIO_Init+0xd4>)
 800172c:	f004 fa84 	bl	8005c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f240 2131 	movw	r1, #561	; 0x231
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f004 fa7d 	bl	8005c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 800173e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001742:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <MX_GPIO_Init+0xd4>)
 8001756:	f004 f841 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800175a:	2331      	movs	r3, #49	; 0x31
 800175c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f004 f833 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001782:	2301      	movs	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	480f      	ldr	r0, [pc, #60]	; (80017c8 <MX_GPIO_Init+0xd4>)
 800178c:	f004 f826 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001794:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001796:	2311      	movs	r3, #17
 8001798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f004 f817 	bl	80057dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2029      	movs	r0, #41	; 0x29
 80017b4:	f003 f8fd 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b8:	2029      	movs	r0, #41	; 0x29
 80017ba:	f003 f914 	bl	80049e6 <HAL_NVIC_EnableIRQ>

}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	48000400 	.word	0x48000400

080017cc <LL_AHB2_GRP1_EnableClock>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <LL_APB1_GRP1_EnableClock>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800180a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C2_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C2_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_I2C2_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001868:	f004 fa16 	bl	8005c98 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001872:	f000 fa69 	bl	8001d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_I2C2_Init+0x74>)
 800187a:	f004 fefd 	bl	8006678 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001884:	f000 fa60 	bl	8001d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_I2C2_Init+0x74>)
 800188c:	f004 ff3e 	bl	800670c <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 fa57 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200005f4 	.word	0x200005f4
 80018a4:	40005800 	.word	0x40005800
 80018a8:	00707cbb 	.word	0x00707cbb

080018ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b096      	sub	sp, #88	; 0x58
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2238      	movs	r2, #56	; 0x38
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f01b fd35 	bl	801d33c <memset>
  if(i2cHandle->Instance==I2C2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a21      	ldr	r2, [pc, #132]	; (800195c <HAL_I2C_MspInit+0xb0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d13b      	bne.n	8001954 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018e0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4618      	mov	r0, r3
 80018ec:	f006 f9e4 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018f6:	f000 fa27 	bl	8001d48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff ff66 	bl	80017cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	2002      	movs	r0, #2
 8001902:	f7ff ff63 	bl	80017cc <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190c:	2312      	movs	r3, #18
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001910:	2301      	movs	r3, #1
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001914:	2301      	movs	r3, #1
 8001916:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001918:	2304      	movs	r3, #4
 800191a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f003 ff59 	bl	80057dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800192a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001934:	2301      	movs	r3, #1
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001938:	2301      	movs	r3, #1
 800193a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800193c:	2304      	movs	r3, #4
 800193e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <HAL_I2C_MspInit+0xb4>)
 8001948:	f003 ff48 	bl	80057dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800194c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001950:	f7ff ff54 	bl	80017fc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001954:	bf00      	nop
 8001956:	3758      	adds	r7, #88	; 0x58
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40005800 	.word	0x40005800
 8001960:	48000400 	.word	0x48000400

08001964 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001974:	f023 0218 	bic.w	r2, r3, #24
 8001978:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4313      	orrs	r3, r2
 8001980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
	...

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f001 fe49 	bl	800362c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f8c3 	bl	8001b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f7ff fea9 	bl	80016f4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80019a2:	f00a f8b3 	bl	800bb0c <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 80019a6:	f001 fa65 	bl	8002e74 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80019aa:	f7ff ff3f 	bl	800182c <MX_I2C2_Init>
  MX_TIM16_Init();
 80019ae:	f000 febb 	bl	8002728 <MX_TIM16_Init>
  MX_TIM17_Init();
 80019b2:	f000 feed 	bl	8002790 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 80019b6:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <main+0x168>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]


  uint8_t SHT40_cmd = 0xFD;
 80019bc:	23fd      	movs	r3, #253	; 0xfd
 80019be:	72fb      	strb	r3, [r7, #11]
  uint8_t SHT40_dataRX[6];
  uint16_t temp_hword; // teporarly temperature half word
  uint16_t th_hword;   // teporarly humidy half  word


  F1_QueueIni(); // init Function queue
 80019c0:	f000 f9ce 	bl	8001d60 <F1_QueueIni>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80019c4:	2214      	movs	r2, #20
 80019c6:	494d      	ldr	r1, [pc, #308]	; (8001afc <main+0x16c>)
 80019c8:	484d      	ldr	r0, [pc, #308]	; (8001b00 <main+0x170>)
 80019ca:	f009 ffd4 	bl	800b976 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <main+0x174>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <main+0x174>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0204 	bic.w	r2, r2, #4
 80019dc:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f004 f926 	bl	8005c38 <HAL_GPIO_WritePin>
 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
//  HAL_Delay(300);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  HAL_TIM_Base_Start_IT(&htim16);
 80019ec:	4846      	ldr	r0, [pc, #280]	; (8001b08 <main+0x178>)
 80019ee:	f007 fb0d 	bl	800900c <HAL_TIM_Base_Start_IT>


  while (1)
  {

	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80019f2:	f107 020b 	add.w	r2, r7, #11
 80019f6:	2364      	movs	r3, #100	; 0x64
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	2188      	movs	r1, #136	; 0x88
 80019fe:	4843      	ldr	r0, [pc, #268]	; (8001b0c <main+0x17c>)
 8001a00:	f004 f9da 	bl	8005db8 <HAL_I2C_Master_Transmit>

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001a04:	f00a f88a 	bl	800bb1c <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001a08:	f000 f9ee 	bl	8001de8 <F1_pull>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4798      	blx	r3
    MeasurePM_sens();
 8001a10:	f000 f91e 	bl	8001c50 <MeasurePM_sens>



    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001a14:	1d3a      	adds	r2, r7, #4
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	2188      	movs	r1, #136	; 0x88
 8001a1e:	483b      	ldr	r0, [pc, #236]	; (8001b0c <main+0x17c>)
 8001a20:	f004 fabe 	bl	8005fa0 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001a24:	793b      	ldrb	r3, [r7, #4]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	81fb      	strh	r3, [r7, #14]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	7a3b      	ldrb	r3, [r7, #8]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	81bb      	strh	r3, [r7, #12]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f922 	bl	8000c90 <__aeabi_ui2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fcfe 	bl	8000450 <__aeabi_f2d>
 8001a54:	a324      	add	r3, pc, #144	; (adr r3, 8001ae8 <main+0x158>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fd51 	bl	8000500 <__aeabi_dmul>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	a322      	add	r3, pc, #136	; (adr r3, 8001af0 <main+0x160>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fe72 	bl	8000754 <__aeabi_ddiv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <main+0x180>)
 8001a7e:	f7fe fb87 	bl	8000190 <__aeabi_dsub>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe fffb 	bl	8000a84 <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <main+0x184>)
 8001a92:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f8fa 	bl	8000c90 <__aeabi_ui2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcd6 	bl	8000450 <__aeabi_f2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <main+0x188>)
 8001aaa:	f7fe fd29 	bl	8000500 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	a30e      	add	r3, pc, #56	; (adr r3, 8001af0 <main+0x160>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fe4a 	bl	8000754 <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <main+0x18c>)
 8001ace:	f7fe fb5f 	bl	8000190 <__aeabi_dsub>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7fe ffd3 	bl	8000a84 <__aeabi_d2f>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <main+0x190>)
 8001ae2:	6013      	str	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001ae4:	e785      	b.n	80019f2 <main+0x62>
 8001ae6:	bf00      	nop
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	4065e000 	.word	0x4065e000
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40efffe0 	.word	0x40efffe0
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000640 	.word	0x20000640
 8001b00:	20000840 	.word	0x20000840
 8001b04:	20000990 	.word	0x20000990
 8001b08:	20000710 	.word	0x20000710
 8001b0c:	200005f4 	.word	0x200005f4
 8001b10:	40468000 	.word	0x40468000
 8001b14:	2000066c 	.word	0x2000066c
 8001b18:	405f4000 	.word	0x405f4000
 8001b1c:	40180000 	.word	0x40180000
 8001b20:	20000670 	.word	0x20000670

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09a      	sub	sp, #104	; 0x68
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 0320 	add.w	r3, r7, #32
 8001b2e:	2248      	movs	r2, #72	; 0x48
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f01b fc02 	bl	801d33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b4a:	f004 fe2b 	bl	80067a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff ff08 	bl	8001964 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <SystemClock_Config+0xac>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <SystemClock_Config+0xac>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <SystemClock_Config+0xac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b70:	2305      	movs	r3, #5
 8001b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001b74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b7a:	2381      	movs	r3, #129	; 0x81
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f005 f956 	bl	8006e3c <HAL_RCC_OscConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001b96:	f000 f8d7 	bl	8001d48 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b9a:	234f      	movs	r3, #79	; 0x4f
 8001b9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f005 fcdb 	bl	8007574 <HAL_RCC_ClockConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001bc4:	f000 f8c0 	bl	8001d48 <Error_Handler>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3768      	adds	r7, #104	; 0x68
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	58000400 	.word	0x58000400

08001bd4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_UARTEx_RxEventCallback+0x40>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d110      	bne.n	8001c0c <HAL_UARTEx_RxEventCallback+0x38>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_UARTEx_RxEventCallback+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b42      	cmp	r3, #66	; 0x42
 8001bf0:	d109      	bne.n	8001c06 <HAL_UARTEx_RxEventCallback+0x32>
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_UARTEx_RxEventCallback+0x44>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b4d      	cmp	r3, #77	; 0x4d
 8001bf8:	d105      	bne.n	8001c06 <HAL_UARTEx_RxEventCallback+0x32>
		memcpy(mainBuffer,aRXBufferUser,Size);
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4906      	ldr	r1, [pc, #24]	; (8001c18 <HAL_UARTEx_RxEventCallback+0x44>)
 8001c00:	4806      	ldr	r0, [pc, #24]	; (8001c1c <HAL_UARTEx_RxEventCallback+0x48>)
 8001c02:	f01b fb8d 	bl	801d320 <memcpy>


		}
		UART2_SET =1;
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]

	}
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40004400 	.word	0x40004400
 8001c18:	20000640 	.word	0x20000640
 8001c1c:	20000654 	.word	0x20000654
 8001c20:	20000008 	.word	0x20000008

08001c24 <EnablePM_sens>:

void EnablePM_sens(void){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f004 f801 	bl	8005c38 <HAL_GPIO_WritePin>

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <DisablePM_sens>:

void DisablePM_sens(void){
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c48:	f003 fff6 	bl	8005c38 <HAL_GPIO_WritePin>


}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <MeasurePM_sens>:

void MeasurePM_sens(void){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

	if(PM_measure_flag){
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MeasurePM_sens+0x48>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <MeasurePM_sens+0x44>
	       UART2_SET = 0;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MeasurePM_sens+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
	       HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001c62:	2214      	movs	r2, #20
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <MeasurePM_sens+0x50>)
 8001c66:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <MeasurePM_sens+0x54>)
 8001c68:	f009 fe85 	bl	800b976 <HAL_UARTEx_ReceiveToIdle_DMA>
		   __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MeasurePM_sens+0x58>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <MeasurePM_sens+0x58>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0204 	bic.w	r2, r2, #4
 8001c7a:	601a      	str	r2, [r3, #0]
		   PM2_5 = mainBuffer[6]*256+mainBuffer[7];
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MeasurePM_sens+0x5c>)
 8001c7e:	799b      	ldrb	r3, [r3, #6]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MeasurePM_sens+0x5c>)
 8001c88:	79db      	ldrb	r3, [r3, #7]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <MeasurePM_sens+0x60>)
 8001c92:	801a      	strh	r2, [r3, #0]

	      }
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000640 	.word	0x20000640
 8001ca4:	20000840 	.word	0x20000840
 8001ca8:	20000990 	.word	0x20000990
 8001cac:	20000654 	.word	0x20000654
 8001cb0:	20000668 	.word	0x20000668

08001cb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d131      	bne.n	8001d28 <HAL_TIM_PeriodElapsedCallback+0x74>
   {
	  counter++;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ccc:	6013      	str	r3, [r2, #0]
      switch(counter){
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001cd6:	d011      	beq.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x48>
 8001cd8:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001cdc:	dc14      	bgt.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001cde:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8001ce2:	d003      	beq.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x38>
 8001ce4:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001ce8:	d004      	beq.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x40>
 8001cea:	e00d      	b.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x54>
      case 820:
    	  F1_push(EnablePM_sens);
 8001cec:	4812      	ldr	r0, [pc, #72]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cee:	f000 f847 	bl	8001d80 <F1_push>
    	  break;
 8001cf2:	e009      	b.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x54>
      case 840:
    	  PM_measure_flag = 1;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
    	  break;
 8001cfa:	e005      	b.n	8001d08 <HAL_TIM_PeriodElapsedCallback+0x54>
      case 860:
    	  F1_push(DisablePM_sens);
 8001cfc:	4810      	ldr	r0, [pc, #64]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001cfe:	f000 f83f 	bl	8001d80 <F1_push>
    	  PM_measure_flag = 0;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
      }

      counter %= 900;
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d12:	441a      	add	r2, r3
 8001d14:	1251      	asrs	r1, r2, #9
 8001d16:	17da      	asrs	r2, r3, #31
 8001d18:	1a8a      	subs	r2, r1, r2
 8001d1a:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001d1e:	fb01 f202 	mul.w	r2, r1, r2
 8001d22:	1a9a      	subs	r2, r3, r2
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001d26:	601a      	str	r2, [r3, #0]
   }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000710 	.word	0x20000710
 8001d34:	20000674 	.word	0x20000674
 8001d38:	08001c25 	.word	0x08001c25
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	08001c3b 	.word	0x08001c3b
 8001d44:	91a2b3c5 	.word	0x91a2b3c5

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>

08001d52 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  F1_last = 0;
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <F1_QueueIni+0x18>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <F1_QueueIni+0x1c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000678 	.word	0x20000678
 8001d7c:	2000067c 	.word	0x2000067c

08001d80 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <F1_push+0x5c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	425a      	negs	r2, r3
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	f002 020f 	and.w	r2, r2, #15
 8001d98:	bf58      	it	pl
 8001d9a:	4253      	negpl	r3, r2
 8001d9c:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <F1_push+0x60>)
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <F1_push+0x28>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e014      	b.n	8001dd2 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <F1_push+0x5c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	490b      	ldr	r1, [pc, #44]	; (8001ddc <F1_push+0x5c>)
 8001db0:	600a      	str	r2, [r1, #0]
 8001db2:	490c      	ldr	r1, [pc, #48]	; (8001de4 <F1_push+0x64>)
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <F1_push+0x5c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	425a      	negs	r2, r3
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	f002 020f 	and.w	r2, r2, #15
 8001dc8:	bf58      	it	pl
 8001dca:	4253      	negpl	r3, r2
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <F1_push+0x5c>)
 8001dce:	6013      	str	r3, [r2, #0]
  return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000678 	.word	0x20000678
 8001de0:	2000067c 	.word	0x2000067c
 8001de4:	20000680 	.word	0x20000680

08001de8 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <F1_pull+0x4c>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <F1_pull+0x50>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d101      	bne.n	8001dfe <F1_pull+0x16>
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <F1_pull+0x54>)
 8001dfc:	e014      	b.n	8001e28 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <F1_pull+0x50>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <F1_pull+0x50>)
 8001e06:	600a      	str	r2, [r1, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <F1_pull+0x58>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <F1_pull+0x50>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	425a      	negs	r2, r3
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	f002 020f 	and.w	r2, r2, #15
 8001e1e:	bf58      	it	pl
 8001e20:	4253      	negpl	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <F1_pull+0x50>)
 8001e24:	6013      	str	r3, [r2, #0]
  return pullVar;
 8001e26:	687b      	ldr	r3, [r7, #4]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000678 	.word	0x20000678
 8001e38:	2000067c 	.word	0x2000067c
 8001e3c:	08001d53 	.word	0x08001d53
 8001e40:	20000680 	.word	0x20000680

08001e44 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <LL_APB1_GRP1_EnableClock>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	222c      	movs	r2, #44	; 0x2c
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f01b fa4b 	bl	801d33c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001ea8:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <MX_RTC_Init+0xa0>)
 8001eaa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001eae:	221f      	movs	r2, #31
 8001eb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eda:	4815      	ldr	r0, [pc, #84]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001edc:	f006 f806 	bl	8007eec <HAL_RTC_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001ee6:	f7ff ff2f 	bl	8001d48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001eea:	4811      	ldr	r0, [pc, #68]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001eec:	f006 faf4 	bl	80084d8 <HAL_RTCEx_SetSSRU_IT>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001ef6:	f7ff ff27 	bl	8001d48 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f0a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_RTC_Init+0x9c>)
 8001f1a:	f006 f861 	bl	8007fe0 <HAL_RTC_SetAlarm_IT>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001f24:	f7ff ff10 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	3730      	adds	r7, #48	; 0x30
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200006c0 	.word	0x200006c0
 8001f34:	40002800 	.word	0x40002800

08001f38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b090      	sub	sp, #64	; 0x40
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	2238      	movs	r2, #56	; 0x38
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f01b f9f7 	bl	801d33c <memset>
  if(rtcHandle->Instance==RTC)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a16      	ldr	r2, [pc, #88]	; (8001fac <HAL_RTC_MspInit+0x74>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d125      	bne.n	8001fa4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 fea5 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f74:	f7ff fee8 	bl	8001d48 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f78:	f7ff ff64 	bl	8001e44 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f80:	f7ff ff70 	bl	8001e64 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f002 fd12 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f002 fd29 	bl	80049e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	202a      	movs	r0, #42	; 0x2a
 8001f9a:	f002 fd0a 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001f9e:	202a      	movs	r0, #42	; 0x2a
 8001fa0:	f002 fd21 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3740      	adds	r7, #64	; 0x40
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40002800 	.word	0x40002800

08001fb0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	58000400 	.word	0x58000400

08001fc8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001fe4:	f001 fb42 	bl	800366c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001fe8:	f7ff ffe2 	bl	8001fb0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f004 fc6b 	bl	80068c8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001ffa:	f001 fb45 	bl	8003688 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001ffe:	f001 f9b3 	bl	8003368 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800200a:	f001 fb2f 	bl	800366c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800200e:	2101      	movs	r1, #1
 8002010:	2000      	movs	r0, #0
 8002012:	f004 fbd5 	bl	80067c0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}

0800201a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800201e:	f001 fb33 	bl	8003688 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <NMI_Handler+0x4>

08002038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <HardFault_Handler+0x4>

0800203e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <MemManage_Handler+0x4>

08002044 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <BusFault_Handler+0x4>

0800204a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <UsageFault_Handler+0x4>

08002050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002086:	f006 fa63 	bl	8008550 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200006c0 	.word	0x200006c0

08002094 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <DMA1_Channel1_IRQHandler+0x10>)
 800209a:	f002 ff3b 	bl	8004f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200008d0 	.word	0x200008d0

080020a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Channel2_IRQHandler+0x10>)
 80020ae:	f002 ff31 	bl	8004f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000930 	.word	0x20000930

080020bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Channel3_IRQHandler+0x10>)
 80020c2:	f002 ff27 	bl	8004f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000990 	.word	0x20000990

080020d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <TIM16_IRQHandler+0x18>)
 80020d6:	f006 ffe5 	bl	80090a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <TIM16_IRQHandler+0x1c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a02      	ldr	r2, [pc, #8]	; (80020ec <TIM16_IRQHandler+0x1c>)
 80020e2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000710 	.word	0x20000710
 80020ec:	200006f8 	.word	0x200006f8

080020f0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <TIM17_IRQHandler+0x18>)
 80020f6:	f006 ffd5 	bl	80090a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <TIM17_IRQHandler+0x1c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a02      	ldr	r2, [pc, #8]	; (800210c <TIM17_IRQHandler+0x1c>)
 8002102:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000075c 	.word	0x2000075c
 800210c:	200006fc 	.word	0x200006fc

08002110 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <USART1_IRQHandler+0x10>)
 8002116:	f007 fadf 	bl	80096d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200007b0 	.word	0x200007b0

08002124 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <USART2_IRQHandler+0x10>)
 800212a:	f007 fad5 	bl	80096d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000840 	.word	0x20000840

08002138 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800213c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002140:	f003 fd92 	bl	8005c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <RTC_Alarm_IRQHandler+0x10>)
 800214e:	f006 f8af 	bl	80082b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200006c0 	.word	0x200006c0

0800215c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002162:	f006 fd5d 	bl	8008c20 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000700 	.word	0x20000700

08002170 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <DMAMUX1_OVR_IRQHandler+0x10>)
 8002176:	f003 f87d 	bl	8005274 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000930 	.word	0x20000930

08002184 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4313      	orrs	r3, r2
 800219a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a8:	68fb      	ldr	r3, [r7, #12]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_SUBGHZ_Init+0x20>)
 80021ba:	2208      	movs	r2, #8
 80021bc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_SUBGHZ_Init+0x20>)
 80021c0:	f006 fab2 	bl	8008728 <HAL_SUBGHZ_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80021ca:	f7ff fdbd 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000700 	.word	0x20000700

080021d8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7ff ffcf 	bl	8002184 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2032      	movs	r0, #50	; 0x32
 80021ec:	f002 fbe1 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80021f0:	2032      	movs	r0, #50	; 0x32
 80021f2:	f002 fbf8 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <LL_RCC_SetClkAfterWakeFromStop>:
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <LL_FLASH_GetUDN+0x10>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	1fff7580 	.word	0x1fff7580

08002238 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <LL_FLASH_GetDeviceID+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	1fff7584 	.word	0x1fff7584

08002250 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <LL_FLASH_GetSTCompanyID+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0a1b      	lsrs	r3, r3, #8
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	1fff7584 	.word	0x1fff7584

08002268 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff ffc6 	bl	80021fe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002272:	f01a fafb 	bl	801c86c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <SystemApp_Init+0x50>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800227c:	f000 f9a0 	bl	80025c0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002280:	f01a fd84 	bl	801cd8c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002284:	480d      	ldr	r0, [pc, #52]	; (80022bc <SystemApp_Init+0x54>)
 8002286:	f01a fe2f 	bl	801cee8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <SystemApp_Init+0x58>)
 800228c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002290:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002292:	2002      	movs	r0, #2
 8002294:	f01a fe36 	bl	801cf04 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002298:	f7fe ff9a 	bl	80011d0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800229c:	f000 fa1a 	bl	80026d4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80022a0:	f019 fcac 	bl	801bbfc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80022a4:	2101      	movs	r1, #1
 80022a6:	2001      	movs	r0, #1
 80022a8:	f019 fce8 	bl	801bc7c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80022ac:	2101      	movs	r1, #1
 80022ae:	2001      	movs	r0, #1
 80022b0:	f019 fcb4 	bl	801bc1c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000070c 	.word	0x2000070c
 80022bc:	08002489 	.word	0x08002489
 80022c0:	58004000 	.word	0x58004000

080022c4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80022c8:	f019 fd08 	bl	801bcdc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80022da:	f7fe ff87 	bl	80011ec <SYS_GetBatteryLevel>
 80022de:	4603      	mov	r3, r0
 80022e0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80022e2:	88bb      	ldrh	r3, [r7, #4]
 80022e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d902      	bls.n	80022f2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80022ec:	23fe      	movs	r3, #254	; 0xfe
 80022ee:	71fb      	strb	r3, [r7, #7]
 80022f0:	e014      	b.n	800231c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80022f2:	88bb      	ldrh	r3, [r7, #4]
 80022f4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80022f8:	d202      	bcs.n	8002300 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	e00d      	b.n	800231c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002300:	88bb      	ldrh	r3, [r7, #4]
 8002302:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002306:	461a      	mov	r2, r3
 8002308:	4613      	mov	r3, r2
 800230a:	01db      	lsls	r3, r3, #7
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	461a      	mov	r2, r3
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <GetBatteryLevel+0x58>)
 8002314:	fba3 2302 	umull	r2, r3, r3, r2
 8002318:	09db      	lsrs	r3, r3, #7
 800231a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800231c:	79fb      	ldrb	r3, [r7, #7]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	1b4e81b5 	.word	0x1b4e81b5

0800232c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f9a1 	bl	8002680 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fcfd 	bl	8000d40 <__aeabi_f2iz>
 8002346:	4603      	mov	r3, r0
 8002348:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800234a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002356:	b590      	push	{r4, r7, lr}
 8002358:	b087      	sub	sp, #28
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002362:	f7ff ff5f 	bl	8002224 <LL_FLASH_GetUDN>
 8002366:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236e:	d138      	bne.n	80023e2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002370:	f001 f998 	bl	80036a4 <HAL_GetUIDw0>
 8002374:	4604      	mov	r4, r0
 8002376:	f001 f9a9 	bl	80036cc <HAL_GetUIDw2>
 800237a:	4603      	mov	r3, r0
 800237c:	4423      	add	r3, r4
 800237e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002380:	f001 f99a 	bl	80036b8 <HAL_GetUIDw1>
 8002384:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	0e1a      	lsrs	r2, r3, #24
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3307      	adds	r3, #7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	0c1a      	lsrs	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3306      	adds	r3, #6
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	0a1a      	lsrs	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3305      	adds	r3, #5
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0e1a      	lsrs	r2, r3, #24
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3303      	adds	r3, #3
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	0c1a      	lsrs	r2, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3302      	adds	r3, #2
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	0a1a      	lsrs	r2, r3, #8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3301      	adds	r3, #1
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80023e0:	e031      	b.n	8002446 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3307      	adds	r3, #7
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	0a1a      	lsrs	r2, r3, #8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3306      	adds	r3, #6
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	0c1a      	lsrs	r2, r3, #16
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3305      	adds	r3, #5
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	0e1a      	lsrs	r2, r3, #24
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002410:	f7ff ff12 	bl	8002238 <LL_FLASH_GetDeviceID>
 8002414:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3303      	adds	r3, #3
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002420:	f7ff ff16 	bl	8002250 <LL_FLASH_GetSTCompanyID>
 8002424:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3302      	adds	r3, #2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	0a1a      	lsrs	r2, r3, #8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	b2da      	uxtb	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	701a      	strb	r2, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}

0800244e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800244e:	b590      	push	{r4, r7, lr}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002458:	f7ff fee4 	bl	8002224 <LL_FLASH_GetUDN>
 800245c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d10b      	bne.n	800247e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002466:	f001 f91d 	bl	80036a4 <HAL_GetUIDw0>
 800246a:	4604      	mov	r4, r0
 800246c:	f001 f924 	bl	80036b8 <HAL_GetUIDw1>
 8002470:	4603      	mov	r3, r0
 8002472:	405c      	eors	r4, r3
 8002474:	f001 f92a 	bl	80036cc <HAL_GetUIDw2>
 8002478:	4603      	mov	r3, r0
 800247a:	4063      	eors	r3, r4
 800247c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800247e:	687b      	ldr	r3, [r7, #4]

}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	4618      	mov	r0, r3
 8002498:	f019 fd30 	bl	801befc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024a2:	9200      	str	r2, [sp, #0]
 80024a4:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <TimestampNow+0x3c>)
 80024a6:	2110      	movs	r1, #16
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f81d 	bl	80024e8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fd fe62 	bl	8000178 <strlen>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	0801d538 	.word	0x0801d538

080024c8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80024cc:	2101      	movs	r1, #1
 80024ce:	2002      	movs	r0, #2
 80024d0:	f019 fba4 	bl	801bc1c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80024dc:	2100      	movs	r1, #0
 80024de:	2002      	movs	r0, #2
 80024e0:	f019 fb9c 	bl	801bc1c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80024e8:	b40c      	push	{r2, r3}
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f019 fecd 	bl	801c2a0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002510:	b002      	add	sp, #8
 8002512:	4770      	bx	lr

08002514 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_GetTick+0x24>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800253a:	f000 fa47 	bl	80029cc <TIMER_IF_GetTimerValue>
 800253e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002540:	687b      	ldr	r3, [r7, #4]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000070c 	.word	0x2000070c

08002550 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fabd 	bl	8002ada <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <LL_AHB2_GRP1_EnableClock>:
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4313      	orrs	r3, r2
 800257e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800258c:	68fb      	ldr	r3, [r7, #12]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <LL_EXTI_EnableIT_32_63+0x24>)
 80025a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80025a6:	4905      	ldr	r1, [pc, #20]	; (80025bc <LL_EXTI_EnableIT_32_63+0x24>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	58000800 	.word	0x58000800

080025c0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80025c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025ca:	f7ff ffe5 	bl	8002598 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80025ce:	f001 f887 	bl	80036e0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80025d2:	f001 f88b 	bl	80036ec <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80025d6:	f001 f88f 	bl	80036f8 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80025f4:	2001      	movs	r0, #1
 80025f6:	f7ff ffb7 	bl	8002568 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80025fa:	2002      	movs	r0, #2
 80025fc:	f7ff ffb4 	bl	8002568 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002600:	2002      	movs	r0, #2
 8002602:	f7ff ffb1 	bl	8002568 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002606:	2002      	movs	r0, #2
 8002608:	f7ff ffae 	bl	8002568 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800260c:	2301      	movs	r3, #1
 800260e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	4619      	mov	r1, r3
 8002614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002618:	f003 f8e0 	bl	80057dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800261c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002620:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4815      	ldr	r0, [pc, #84]	; (800267c <DBG_Init+0xbc>)
 8002628:	f003 f8d8 	bl	80057dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 800262c:	2308      	movs	r3, #8
 800262e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	4619      	mov	r1, r3
 8002634:	4811      	ldr	r0, [pc, #68]	; (800267c <DBG_Init+0xbc>)
 8002636:	f003 f8d1 	bl	80057dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800263a:	2310      	movs	r3, #16
 800263c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	4619      	mov	r1, r3
 8002642:	480e      	ldr	r0, [pc, #56]	; (800267c <DBG_Init+0xbc>)
 8002644:	f003 f8ca 	bl	80057dc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	2101      	movs	r1, #1
 800264c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002650:	f003 faf2 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265a:	4808      	ldr	r0, [pc, #32]	; (800267c <DBG_Init+0xbc>)
 800265c:	f003 faec 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002660:	2200      	movs	r2, #0
 8002662:	2108      	movs	r1, #8
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <DBG_Init+0xbc>)
 8002666:	f003 fae7 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800266a:	2200      	movs	r2, #0
 800266c:	2110      	movs	r1, #16
 800266e:	4803      	ldr	r0, [pc, #12]	; (800267c <DBG_Init+0xbc>)
 8002670:	f003 fae2 	bl	8005c38 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	48000400 	.word	0x48000400

08002680 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <EnvSensors_Read+0x40>)
 800268a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <EnvSensors_Read+0x44>)
 800268e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <EnvSensors_Read+0x48>)
 8002692:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a08      	ldr	r2, [pc, #32]	; (80026cc <EnvSensors_Read+0x4c>)
 80026aa:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <EnvSensors_Read+0x50>)
 80026b0:	611a      	str	r2, [r3, #16]

  return 0;
 80026b2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	42480000 	.word	0x42480000
 80026c4:	41900000 	.word	0x41900000
 80026c8:	447a0000 	.word	0x447a0000
 80026cc:	003e090d 	.word	0x003e090d
 80026d0:	000503ab 	.word	0x000503ab

080026d4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80026de:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <LL_APB2_GRP1_EnableClock>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4313      	orrs	r3, r2
 800270c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <MX_TIM16_Init+0x60>)
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <MX_TIM16_Init+0x64>)
 8002730:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <MX_TIM16_Init+0x60>)
 8002734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002738:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <MX_TIM16_Init+0x60>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_TIM16_Init+0x60>)
 8002742:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002746:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_TIM16_Init+0x60>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_TIM16_Init+0x60>)
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_TIM16_Init+0x60>)
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800275a:	480b      	ldr	r0, [pc, #44]	; (8002788 <MX_TIM16_Init+0x60>)
 800275c:	f006 fbfe 	bl	8008f5c <HAL_TIM_Base_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002766:	f7ff faef 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800276a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800276e:	f7ff ffc2 	bl	80026f6 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	201c      	movs	r0, #28
 8002778:	f002 f91b 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800277c:	201c      	movs	r0, #28
 800277e:	f002 f932 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000710 	.word	0x20000710
 800278c:	40014400 	.word	0x40014400

08002790 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_TIM17_Init+0x5c>)
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <MX_TIM17_Init+0x60>)
 8002798:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_TIM17_Init+0x5c>)
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_TIM17_Init+0x5c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_TIM17_Init+0x5c>)
 80027a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ac:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_TIM17_Init+0x5c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <MX_TIM17_Init+0x5c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_TIM17_Init+0x5c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80027c0:	480a      	ldr	r0, [pc, #40]	; (80027ec <MX_TIM17_Init+0x5c>)
 80027c2:	f006 fbcb 	bl	8008f5c <HAL_TIM_Base_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80027cc:	f7ff fabc 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80027d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80027d4:	f7ff ff8f 	bl	80026f6 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	201d      	movs	r0, #29
 80027de:	f002 f8e8 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80027e2:	201d      	movs	r0, #29
 80027e4:	f002 f8ff 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2000075c 	.word	0x2000075c
 80027f0:	40014800 	.word	0x40014800

080027f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_TIM_Base_MspInit+0x58>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10c      	bne.n	8002820 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002806:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800280a:	f7ff ff74 	bl	80026f6 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	201c      	movs	r0, #28
 8002814:	f002 f8cd 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002818:	201c      	movs	r0, #28
 800281a:	f002 f8e4 	bl	80049e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800281e:	e010      	b.n	8002842 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_TIM_Base_MspInit+0x5c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10b      	bne.n	8002842 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800282a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800282e:	f7ff ff62 	bl	80026f6 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	201d      	movs	r0, #29
 8002838:	f002 f8bb 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800283c:	201d      	movs	r0, #29
 800283e:	f002 f8d2 	bl	80049e6 <HAL_NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40014400 	.word	0x40014400
 8002850:	40014800 	.word	0x40014800

08002854 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
	...

0800286c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <TIMER_IF_Init+0x5c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <TIMER_IF_Init+0x60>)
 8002886:	f04f 32ff 	mov.w	r2, #4294967295
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800288c:	f7ff fb02 	bl	8001e94 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002890:	f000 f856 	bl	8002940 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <TIMER_IF_Init+0x60>)
 800289a:	f005 fcad 	bl	80081f8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <TIMER_IF_Init+0x60>)
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <TIMER_IF_Init+0x60>)
 80028a8:	f005 fde4 	bl	8008474 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f000 f9d3 	bl	8002c58 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80028b2:	f000 f85f 	bl	8002974 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <TIMER_IF_Init+0x5c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80028bc:	79fb      	ldrb	r3, [r7, #7]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200007a8 	.word	0x200007a8
 80028cc:	200006c0 	.word	0x200006c0

080028d0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08e      	sub	sp, #56	; 0x38
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	222c      	movs	r2, #44	; 0x2c
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f01a fd28 	bl	801d33c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80028ec:	f000 f828 	bl	8002940 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <TIMER_IF_StartTimer+0x68>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	43db      	mvns	r3, r3
 8002902:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002908:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800290c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800290e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	2201      	movs	r2, #1
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	; (800293c <TIMER_IF_StartTimer+0x6c>)
 800291e:	f005 fb5f 	bl	8007fe0 <HAL_RTC_SetAlarm_IT>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002928:	f7ff fa0e 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800292c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002930:	4618      	mov	r0, r3
 8002932:	3738      	adds	r7, #56	; 0x38
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200007ac 	.word	0x200007ac
 800293c:	200006c0 	.word	0x200006c0

08002940 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <TIMER_IF_StopTimer+0x2c>)
 800294c:	2201      	movs	r2, #1
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002954:	4806      	ldr	r0, [pc, #24]	; (8002970 <TIMER_IF_StopTimer+0x30>)
 8002956:	f005 fc4f 	bl	80081f8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <TIMER_IF_StopTimer+0x30>)
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002962:	79fb      	ldrb	r3, [r7, #7]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40002800 	.word	0x40002800
 8002970:	200006c0 	.word	0x200006c0

08002974 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002978:	f000 f98e 	bl	8002c98 <GetTimerTicks>
 800297c:	4603      	mov	r3, r0
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <TIMER_IF_SetTimerContext+0x18>)
 8002980:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002982:	4b02      	ldr	r3, [pc, #8]	; (800298c <TIMER_IF_SetTimerContext+0x18>)
 8002984:	681b      	ldr	r3, [r3, #0]
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200007ac 	.word	0x200007ac

08002990 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <TIMER_IF_GetTimerContext+0x10>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	200007ac 	.word	0x200007ac

080029a4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80029ae:	f000 f973 	bl	8002c98 <GetTimerTicks>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200007ac 	.word	0x200007ac

080029cc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <TIMER_IF_GetTimerValue+0x24>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80029de:	f000 f95b 	bl	8002c98 <GetTimerTicks>
 80029e2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80029e4:	687b      	ldr	r3, [r7, #4]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200007a8 	.word	0x200007a8

080029f4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80029fe:	2303      	movs	r3, #3
 8002a00:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002a02:	687b      	ldr	r3, [r7, #4]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002a0e:	b5b0      	push	{r4, r5, r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a16:	2100      	movs	r1, #0
 8002a18:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	460a      	mov	r2, r1
 8002a20:	4603      	mov	r3, r0
 8002a22:	0d95      	lsrs	r5, r2, #22
 8002a24:	0294      	lsls	r4, r2, #10
 8002a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	4620      	mov	r0, r4
 8002a30:	4629      	mov	r1, r5
 8002a32:	f7fe f9ab 	bl	8000d8c <__aeabi_uldivmod>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bdb0      	pop	{r4, r5, r7, pc}

08002a48 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002a48:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a52:	2100      	movs	r1, #0
 8002a54:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	2000      	movs	r0, #0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f04f 0a00 	mov.w	sl, #0
 8002a66:	f04f 0b00 	mov.w	fp, #0
 8002a6a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a6e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a72:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a76:	4650      	mov	r0, sl
 8002a78:	4659      	mov	r1, fp
 8002a7a:	1b02      	subs	r2, r0, r4
 8002a7c:	eb61 0305 	sbc.w	r3, r1, r5
 8002a80:	f04f 0000 	mov.w	r0, #0
 8002a84:	f04f 0100 	mov.w	r1, #0
 8002a88:	0099      	lsls	r1, r3, #2
 8002a8a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a8e:	0090      	lsls	r0, r2, #2
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	eb12 0804 	adds.w	r8, r2, r4
 8002a98:	eb43 0905 	adc.w	r9, r3, r5
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab0:	4690      	mov	r8, r2
 8002ab2:	4699      	mov	r9, r3
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	0a82      	lsrs	r2, r0, #10
 8002ac2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ac6:	0a8b      	lsrs	r3, r1, #10
 8002ac8:	4613      	mov	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ad8:	4770      	bx	lr

08002ada <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff93 	bl	8002a0e <TIMER_IF_Convert_ms2Tick>
 8002ae8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002aea:	f000 f8d5 	bl	8002c98 <GetTimerTicks>
 8002aee:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002af0:	e000      	b.n	8002af4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002af2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002af4:	f000 f8d0 	bl	8002c98 <GetTimerTicks>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d8f6      	bhi.n	8002af2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b16:	f019 fff7 	bl	801cb08 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002b2a:	f000 f8a5 	bl	8002c78 <TIMER_IF_BkUp_Read_MSBticks>
 8002b2e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f88f 	bl	8002c58 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002b42:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b46:	b08c      	sub	sp, #48	; 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002b50:	f000 f8a2 	bl	8002c98 <GetTimerTicks>
 8002b54:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002b56:	f000 f88f 	bl	8002c78 <TIMER_IF_BkUp_Read_MSBticks>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	60fa      	str	r2, [r7, #12]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	000b      	movs	r3, r1
 8002b70:	2200      	movs	r2, #0
 8002b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b74:	2000      	movs	r0, #0
 8002b76:	460c      	mov	r4, r1
 8002b78:	4605      	mov	r5, r0
 8002b7a:	eb12 0804 	adds.w	r8, r2, r4
 8002b7e:	eb43 0905 	adc.w	r9, r3, r5
 8002b82:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002b86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	0a82      	lsrs	r2, r0, #10
 8002b94:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b98:	0a8b      	lsrs	r3, r1, #10
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002bac:	f04f 0b00 	mov.w	fp, #0
 8002bb0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff46 	bl	8002a48 <TIMER_IF_Convert_Tick2ms>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3730      	adds	r7, #48	; 0x30
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bd0 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002bde:	f005 fcdb 	bl	8008598 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200006c0 	.word	0x200006c0

08002bf0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002bfe:	f005 fccb 	bl	8008598 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200006c0 	.word	0x200006c0

08002c10 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002c1e:	f005 fcd3 	bl	80085c8 <HAL_RTCEx_BKUPRead>
 8002c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002c24:	687b      	ldr	r3, [r7, #4]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200006c0 	.word	0x200006c0

08002c34 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4804      	ldr	r0, [pc, #16]	; (8002c54 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002c42:	f005 fcc1 	bl	80085c8 <HAL_RTCEx_BKUPRead>
 8002c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200006c0 	.word	0x200006c0

08002c58 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	2102      	movs	r1, #2
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002c66:	f005 fc97 	bl	8008598 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200006c0 	.word	0x200006c0

08002c78 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c7e:	2102      	movs	r1, #2
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002c82:	f005 fca1 	bl	80085c8 <HAL_RTCEx_BKUPRead>
 8002c86:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002c88:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200006c0 	.word	0x200006c0

08002c98 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c9e:	480b      	ldr	r0, [pc, #44]	; (8002ccc <GetTimerTicks+0x34>)
 8002ca0:	f7ff fdd8 	bl	8002854 <LL_RTC_TIME_GetSubSecond>
 8002ca4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ca6:	e003      	b.n	8002cb0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <GetTimerTicks+0x34>)
 8002caa:	f7ff fdd3 	bl	8002854 <LL_RTC_TIME_GetSubSecond>
 8002cae:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002cb0:	4806      	ldr	r0, [pc, #24]	; (8002ccc <GetTimerTicks+0x34>)
 8002cb2:	f7ff fdcf 	bl	8002854 <LL_RTC_TIME_GetSubSecond>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d1f4      	bne.n	8002ca8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40002800 	.word	0x40002800

08002cd0 <LL_AHB2_GRP1_EnableClock>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <LL_APB1_GRP1_EnableClock>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <LL_APB1_GRP1_DisableClock>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d46:	4013      	ands	r3, r2
 8002d48:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <LL_APB2_GRP1_EnableClock>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d78:	68fb      	ldr	r3, [r7, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <LL_APB2_GRP1_DisableClock>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_SYSCFG_EnableFastModePlus>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40010000 	.word	0x40010000

08002dcc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dd0:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002dd2:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <MX_USART1_UART_Init+0xa4>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e10:	2240      	movs	r2, #64	; 0x40
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e22:	4812      	ldr	r0, [pc, #72]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e24:	f006 fb20 	bl	8009468 <HAL_UART_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8002e2e:	f7fe ff8b 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e32:	2100      	movs	r1, #0
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e36:	f008 fd22 	bl	800b87e <HAL_UARTEx_SetTxFifoThreshold>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8002e40:	f7fe ff82 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e44:	2100      	movs	r1, #0
 8002e46:	4809      	ldr	r0, [pc, #36]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e48:	f008 fd57 	bl	800b8fa <HAL_UARTEx_SetRxFifoThreshold>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002e52:	f7fe ff79 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_USART1_UART_Init+0xa0>)
 8002e58:	f008 fc9e 	bl	800b798 <HAL_UARTEx_EnableFifoMode>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8002e62:	f7fe ff71 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200007b0 	.word	0x200007b0
 8002e70:	40013800 	.word	0x40013800

08002e74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e7a:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <MX_USART2_UART_Init+0x98>)
 8002e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ea6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002eaa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ebe:	4812      	ldr	r0, [pc, #72]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ec0:	f006 fad2 	bl	8009468 <HAL_UART_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002eca:	f7fe ff3d 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ece:	2100      	movs	r1, #0
 8002ed0:	480d      	ldr	r0, [pc, #52]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ed2:	f008 fcd4 	bl	800b87e <HAL_UARTEx_SetTxFifoThreshold>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002edc:	f7fe ff34 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4809      	ldr	r0, [pc, #36]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ee4:	f008 fd09 	bl	800b8fa <HAL_UARTEx_SetRxFifoThreshold>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002eee:	f7fe ff2b 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ef2:	4805      	ldr	r0, [pc, #20]	; (8002f08 <MX_USART2_UART_Init+0x94>)
 8002ef4:	f008 fc8b 	bl	800b80e <HAL_UARTEx_DisableFifoMode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002efe:	f7fe ff23 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000840 	.word	0x20000840
 8002f0c:	40004400 	.word	0x40004400

08002f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b09a      	sub	sp, #104	; 0x68
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8002f28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	2238      	movs	r2, #56	; 0x38
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f01a f9fc 	bl	801d33c <memset>
  if(uartHandle->Instance==USART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a83      	ldr	r2, [pc, #524]	; (8003158 <HAL_UART_MspInit+0x248>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f040 80a3 	bne.w	8003096 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f54:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002f58:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 feaa 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8002f6a:	f7fe feed 	bl	8001d48 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f72:	f7ff feef 	bl	8002d54 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2002      	movs	r0, #2
 8002f78:	f7ff feaa 	bl	8002cd0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002f7c:	23c0      	movs	r3, #192	; 0xc0
 8002f7e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f84:	2301      	movs	r3, #1
 8002f86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f94:	4619      	mov	r1, r3
 8002f96:	4871      	ldr	r0, [pc, #452]	; (800315c <HAL_UART_MspInit+0x24c>)
 8002f98:	f002 fc20 	bl	80057dc <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002f9c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002fa0:	f7ff ff02 	bl	8002da8 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002fa4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002fa8:	f7ff fefe 	bl	8002da8 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002fac:	4b6c      	ldr	r3, [pc, #432]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fae:	4a6d      	ldr	r2, [pc, #436]	; (8003164 <HAL_UART_MspInit+0x254>)
 8002fb0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002fb2:	4b6b      	ldr	r3, [pc, #428]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fb4:	2212      	movs	r2, #18
 8002fb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fb8:	4b69      	ldr	r3, [pc, #420]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fba:	2210      	movs	r2, #16
 8002fbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fbe:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fc4:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fd0:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fd6:	4b62      	ldr	r3, [pc, #392]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fdc:	4b60      	ldr	r3, [pc, #384]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fe2:	485f      	ldr	r0, [pc, #380]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002fe4:	f001 fd1c 	bl	8004a20 <HAL_DMA_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002fee:	f7fe feab 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a5a      	ldr	r2, [pc, #360]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002ff6:	679a      	str	r2, [r3, #120]	; 0x78
 8002ff8:	4a59      	ldr	r2, [pc, #356]	; (8003160 <HAL_UART_MspInit+0x250>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002ffe:	4b5a      	ldr	r3, [pc, #360]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003000:	4a5a      	ldr	r2, [pc, #360]	; (800316c <HAL_UART_MspInit+0x25c>)
 8003002:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003004:	4b58      	ldr	r3, [pc, #352]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003006:	2211      	movs	r2, #17
 8003008:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800300a:	4b57      	ldr	r3, [pc, #348]	; (8003168 <HAL_UART_MspInit+0x258>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003010:	4b55      	ldr	r3, [pc, #340]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003016:	4b54      	ldr	r3, [pc, #336]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800301c:	4b52      	ldr	r3, [pc, #328]	; (8003168 <HAL_UART_MspInit+0x258>)
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003028:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_UART_MspInit+0x258>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800302e:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003030:	2200      	movs	r2, #0
 8003032:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003034:	484c      	ldr	r0, [pc, #304]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003036:	f001 fcf3 	bl	8004a20 <HAL_DMA_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003040:	f7fe fe82 	bl	8001d48 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003044:	2300      	movs	r3, #0
 8003046:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003048:	2300      	movs	r3, #0
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003058:	2301      	movs	r3, #1
 800305a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 800305c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003060:	4619      	mov	r1, r3
 8003062:	4841      	ldr	r0, [pc, #260]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003064:	f002 f8c6 	bl	80051f4 <HAL_DMAEx_ConfigMuxSync>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800306e:	f7fe fe6b 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a3c      	ldr	r2, [pc, #240]	; (8003168 <HAL_UART_MspInit+0x258>)
 8003076:	67da      	str	r2, [r3, #124]	; 0x7c
 8003078:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <HAL_UART_MspInit+0x258>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2102      	movs	r1, #2
 8003082:	2024      	movs	r0, #36	; 0x24
 8003084:	f001 fc95 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003088:	2024      	movs	r0, #36	; 0x24
 800308a:	f001 fcac 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800308e:	200c      	movs	r0, #12
 8003090:	f001 fca9 	bl	80049e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003094:	e05c      	b.n	8003150 <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a35      	ldr	r2, [pc, #212]	; (8003170 <HAL_UART_MspInit+0x260>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d157      	bne.n	8003150 <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030a0:	2302      	movs	r3, #2
 80030a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030a4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80030a8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030aa:	f107 030c 	add.w	r3, r7, #12
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fe02 	bl	8007cb8 <HAL_RCCEx_PeriphCLKConfig>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 80030ba:	f7fe fe45 	bl	8001d48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80030c2:	f7ff fe1d 	bl	8002d00 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	2001      	movs	r0, #1
 80030c8:	f7ff fe02 	bl	8002cd0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80030cc:	230c      	movs	r3, #12
 80030ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d4:	2301      	movs	r3, #1
 80030d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80030d8:	2301      	movs	r3, #1
 80030da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030dc:	2307      	movs	r3, #7
 80030de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ea:	f002 fb77 	bl	80057dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_UART_MspInit+0x264>)
 80030f0:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_UART_MspInit+0x268>)
 80030f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <HAL_UART_MspInit+0x264>)
 80030f6:	2213      	movs	r2, #19
 80030f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_UART_MspInit+0x264>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_UART_MspInit+0x264>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_UART_MspInit+0x264>)
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_UART_MspInit+0x264>)
 800310e:	2200      	movs	r2, #0
 8003110:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_UART_MspInit+0x264>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_UART_MspInit+0x264>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_UART_MspInit+0x264>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003124:	4813      	ldr	r0, [pc, #76]	; (8003174 <HAL_UART_MspInit+0x264>)
 8003126:	f001 fc7b 	bl	8004a20 <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_UART_MspInit+0x224>
      Error_Handler();
 8003130:	f7fe fe0a 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <HAL_UART_MspInit+0x264>)
 8003138:	67da      	str	r2, [r3, #124]	; 0x7c
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_UART_MspInit+0x264>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	2025      	movs	r0, #37	; 0x25
 8003146:	f001 fc34 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800314a:	2025      	movs	r0, #37	; 0x25
 800314c:	f001 fc4b 	bl	80049e6 <HAL_NVIC_EnableIRQ>
}
 8003150:	bf00      	nop
 8003152:	3768      	adds	r7, #104	; 0x68
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40013800 	.word	0x40013800
 800315c:	48000400 	.word	0x48000400
 8003160:	200008d0 	.word	0x200008d0
 8003164:	40020008 	.word	0x40020008
 8003168:	20000930 	.word	0x20000930
 800316c:	4002001c 	.word	0x4002001c
 8003170:	40004400 	.word	0x40004400
 8003174:	20000990 	.word	0x20000990
 8003178:	40020030 	.word	0x40020030

0800317c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_UART_MspDeInit+0x74>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d115      	bne.n	80031ba <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800318e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003192:	f7ff fdf7 	bl	8002d84 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003196:	21c0      	movs	r1, #192	; 0xc0
 8003198:	4816      	ldr	r0, [pc, #88]	; (80031f4 <HAL_UART_MspDeInit+0x78>)
 800319a:	f002 fc7f 	bl	8005a9c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 fce4 	bl	8004b70 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fcdf 	bl	8004b70 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80031b2:	2024      	movs	r0, #36	; 0x24
 80031b4:	f001 fc25 	bl	8004a02 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80031b8:	e015      	b.n	80031e6 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <HAL_UART_MspDeInit+0x7c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d110      	bne.n	80031e6 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80031c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031c8:	f7ff fdb2 	bl	8002d30 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80031cc:	210c      	movs	r1, #12
 80031ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d2:	f002 fc63 	bl	8005a9c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 fcc8 	bl	8004b70 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80031e0:	2025      	movs	r0, #37	; 0x25
 80031e2:	f001 fc0e 	bl	8004a02 <HAL_NVIC_DisableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40013800 	.word	0x40013800
 80031f4:	48000400 	.word	0x48000400
 80031f8:	40004400 	.word	0x40004400

080031fc <LL_APB2_GRP1_ForceReset>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4313      	orrs	r3, r2
 8003212:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <LL_APB2_GRP1_ReleaseReset>:
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	43db      	mvns	r3, r3
 8003230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003234:	4013      	ands	r3, r2
 8003236:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
	...

08003244 <LL_EXTI_EnableIT_0_31>:
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <LL_EXTI_EnableIT_0_31+0x24>)
 800324e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003252:	4905      	ldr	r1, [pc, #20]	; (8003268 <LL_EXTI_EnableIT_0_31+0x24>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	58000800 	.word	0x58000800

0800326c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <vcom_Init+0x28>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800327a:	f7fe f849 	bl	8001310 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800327e:	f7ff fda5 	bl	8002dcc <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003282:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003286:	f7ff ffdd 	bl	8003244 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800328a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200009f4 	.word	0x200009f4

08003298 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800329c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032a0:	f7ff ffac 	bl	80031fc <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80032a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032a8:	f7ff ffb9 	bl	800321e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80032ac:	4804      	ldr	r0, [pc, #16]	; (80032c0 <vcom_DeInit+0x28>)
 80032ae:	f7ff ff65 	bl	800317c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80032b2:	200f      	movs	r0, #15
 80032b4:	f001 fba5 	bl	8004a02 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80032b8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200007b0 	.word	0x200007b0

080032c4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4804      	ldr	r0, [pc, #16]	; (80032e8 <vcom_Trace_DMA+0x24>)
 80032d8:	f006 f96c 	bl	80095b4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80032dc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200007b0 	.word	0x200007b0

080032ec <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <vcom_ReceiveInit+0x70>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80032fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032fe:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003300:	f107 0308 	add.w	r3, r7, #8
 8003304:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003308:	4815      	ldr	r0, [pc, #84]	; (8003360 <vcom_ReceiveInit+0x74>)
 800330a:	f008 f9b8 	bl	800b67e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800330e:	bf00      	nop
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <vcom_ReceiveInit+0x74>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331e:	d0f7      	beq.n	8003310 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003320:	bf00      	nop
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <vcom_ReceiveInit+0x74>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003330:	d1f7      	bne.n	8003322 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <vcom_ReceiveInit+0x74>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <vcom_ReceiveInit+0x74>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003340:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003342:	4807      	ldr	r0, [pc, #28]	; (8003360 <vcom_ReceiveInit+0x74>)
 8003344:	f008 f9f6 	bl	800b734 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003348:	2201      	movs	r2, #1
 800334a:	4906      	ldr	r1, [pc, #24]	; (8003364 <vcom_ReceiveInit+0x78>)
 800334c:	4804      	ldr	r0, [pc, #16]	; (8003360 <vcom_ReceiveInit+0x74>)
 800334e:	f006 f8db 	bl	8009508 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003352:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	200009f8 	.word	0x200009f8
 8003360:	200007b0 	.word	0x200007b0
 8003364:	200009f0 	.word	0x200009f0

08003368 <vcom_Resume>:

void vcom_Resume(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800336c:	4808      	ldr	r0, [pc, #32]	; (8003390 <vcom_Resume+0x28>)
 800336e:	f006 f87b 	bl	8009468 <HAL_UART_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <vcom_Resume+0x14>
  {
    Error_Handler();
 8003378:	f7fe fce6 	bl	8001d48 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800337c:	4805      	ldr	r0, [pc, #20]	; (8003394 <vcom_Resume+0x2c>)
 800337e:	f001 fb4f 	bl	8004a20 <HAL_DMA_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <vcom_Resume+0x24>
  {
    Error_Handler();
 8003388:	f7fe fcde 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200007b0 	.word	0x200007b0
 8003394:	200008d0 	.word	0x200008d0

08003398 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a05      	ldr	r2, [pc, #20]	; (80033bc <HAL_UART_TxCpltCallback+0x24>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d103      	bne.n	80033b2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_UART_TxCpltCallback+0x28>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2000      	movs	r0, #0
 80033b0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40013800 	.word	0x40013800
 80033c0:	200009f4 	.word	0x200009f4

080033c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <HAL_UART_RxCpltCallback+0x5c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d113      	bne.n	80033fe <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_UART_RxCpltCallback+0x60>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_UART_RxCpltCallback+0x30>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_UART_RxCpltCallback+0x60>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2101      	movs	r1, #1
 80033f0:	480d      	ldr	r0, [pc, #52]	; (8003428 <HAL_UART_RxCpltCallback+0x64>)
 80033f2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80033f4:	2201      	movs	r2, #1
 80033f6:	490c      	ldr	r1, [pc, #48]	; (8003428 <HAL_UART_RxCpltCallback+0x64>)
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f006 f885 	bl	8009508 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <HAL_UART_RxCpltCallback+0x68>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d106      	bne.n	8003416 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_UART_RxCpltCallback+0x6c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2210      	movs	r2, #16
 800340e:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_UART_RxCpltCallback+0x70>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40013800 	.word	0x40013800
 8003424:	200009f8 	.word	0x200009f8
 8003428:	200009f0 	.word	0x200009f0
 800342c:	40004400 	.word	0x40004400
 8003430:	20000840 	.word	0x20000840
 8003434:	20000008 	.word	0x20000008

08003438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003438:	480d      	ldr	r0, [pc, #52]	; (8003470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800343a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800343c:	f7ff f955 	bl	80026ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003440:	480c      	ldr	r0, [pc, #48]	; (8003474 <LoopForever+0x6>)
  ldr r1, =_edata
 8003442:	490d      	ldr	r1, [pc, #52]	; (8003478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003444:	4a0d      	ldr	r2, [pc, #52]	; (800347c <LoopForever+0xe>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003448:	e002      	b.n	8003450 <LoopCopyDataInit>

0800344a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800344a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800344c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800344e:	3304      	adds	r3, #4

08003450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003454:	d3f9      	bcc.n	800344a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003458:	4c0a      	ldr	r4, [pc, #40]	; (8003484 <LoopForever+0x16>)
  movs r3, #0
 800345a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800345c:	e001      	b.n	8003462 <LoopFillZerobss>

0800345e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800345e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003460:	3204      	adds	r2, #4

08003462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003464:	d3fb      	bcc.n	800345e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003466:	f019 ff37 	bl	801d2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800346a:	f7fe fa91 	bl	8001990 <main>

0800346e <LoopForever>:

LoopForever:
    b LoopForever
 800346e:	e7fe      	b.n	800346e <LoopForever>
  ldr   r0, =_estack
 8003470:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003478:	20000574 	.word	0x20000574
  ldr r2, =_sidata
 800347c:	0801e0c4 	.word	0x0801e0c4
  ldr r2, =_sbss
 8003480:	20000574 	.word	0x20000574
  ldr r4, =_ebss
 8003484:	20002834 	.word	0x20002834

08003488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003488:	e7fe      	b.n	8003488 <ADC_IRQHandler>

0800348a <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800349e:	2310      	movs	r3, #16
 80034a0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80034a2:	2301      	movs	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034aa:	2303      	movs	r3, #3
 80034ac:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b6:	f002 f991 	bl	80057dc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80034ba:	2320      	movs	r3, #32
 80034bc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c6:	f002 f989 	bl	80057dc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80034ca:	2200      	movs	r2, #0
 80034cc:	2120      	movs	r1, #32
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d2:	f002 fbb1 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80034d6:	2200      	movs	r2, #0
 80034d8:	2110      	movs	r1, #16
 80034da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034de:	f002 fbab 	bl	8005c38 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d83f      	bhi.n	800357c <BSP_RADIO_ConfigRFSwitch+0x90>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003515 	.word	0x08003515
 8003508:	0800352f 	.word	0x0800352f
 800350c:	08003549 	.word	0x08003549
 8003510:	08003563 	.word	0x08003563
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003514:	2200      	movs	r2, #0
 8003516:	2110      	movs	r1, #16
 8003518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351c:	f002 fb8c 	bl	8005c38 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003520:	2200      	movs	r2, #0
 8003522:	2120      	movs	r1, #32
 8003524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003528:	f002 fb86 	bl	8005c38 <HAL_GPIO_WritePin>
      break;      
 800352c:	e027      	b.n	800357e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800352e:	2201      	movs	r2, #1
 8003530:	2110      	movs	r1, #16
 8003532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003536:	f002 fb7f 	bl	8005c38 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800353a:	2200      	movs	r2, #0
 800353c:	2120      	movs	r1, #32
 800353e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003542:	f002 fb79 	bl	8005c38 <HAL_GPIO_WritePin>
      break;
 8003546:	e01a      	b.n	800357e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003548:	2201      	movs	r2, #1
 800354a:	2110      	movs	r1, #16
 800354c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003550:	f002 fb72 	bl	8005c38 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003554:	2201      	movs	r2, #1
 8003556:	2120      	movs	r1, #32
 8003558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800355c:	f002 fb6c 	bl	8005c38 <HAL_GPIO_WritePin>
      break;
 8003560:	e00d      	b.n	800357e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003562:	2200      	movs	r2, #0
 8003564:	2110      	movs	r1, #16
 8003566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356a:	f002 fb65 	bl	8005c38 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800356e:	2201      	movs	r2, #1
 8003570:	2120      	movs	r1, #32
 8003572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003576:	f002 fb5f 	bl	8005c38 <HAL_GPIO_WritePin>
      break;
 800357a:	e000      	b.n	800357e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800357c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800358c:	2302      	movs	r3, #2
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80035a8:	2301      	movs	r3, #1
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80035c2:	230f      	movs	r3, #15
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e001      	b.n	80035cc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80035c8:	2316      	movs	r3, #22
 80035ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80035cc:	68fb      	ldr	r3, [r7, #12]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a03      	ldr	r2, [pc, #12]	; (80035f0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6053      	str	r3, [r2, #4]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	e0042000 	.word	0xe0042000

080035f4 <LL_DBGMCU_EnableDBGStopMode>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a03      	ldr	r2, [pc, #12]	; (800360c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	6053      	str	r3, [r2, #4]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	e0042000 	.word	0xe0042000

08003610 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a03      	ldr	r2, [pc, #12]	; (8003628 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	6053      	str	r3, [r2, #4]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	e0042000 	.word	0xe0042000

0800362c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003636:	2003      	movs	r0, #3
 8003638:	f001 f9b0 	bl	800499c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800363c:	f004 f95e 	bl	80078fc <HAL_RCC_GetHCLKFreq>
 8003640:	4603      	mov	r3, r0
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_Init+0x3c>)
 8003644:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003646:	200f      	movs	r0, #15
 8003648:	f7fe ff64 	bl	8002514 <HAL_InitTick>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	71fb      	strb	r3, [r7, #7]
 8003656:	e001      	b.n	800365c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003658:	f7fe fce5 	bl	8002026 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800365c:	79fb      	ldrb	r3, [r7, #7]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000004 	.word	0x20000004

0800366c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <HAL_SuspendTick+0x18>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a03      	ldr	r2, [pc, #12]	; (8003684 <HAL_SuspendTick+0x18>)
 8003676:	f023 0302 	bic.w	r3, r3, #2
 800367a:	6013      	str	r3, [r2, #0]
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <HAL_ResumeTick+0x18>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <HAL_ResumeTick+0x18>)
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80036a8:	4b02      	ldr	r3, [pc, #8]	; (80036b4 <HAL_GetUIDw0+0x10>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	1fff7590 	.word	0x1fff7590

080036b8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80036bc:	4b02      	ldr	r3, [pc, #8]	; (80036c8 <HAL_GetUIDw1+0x10>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	1fff7594 	.word	0x1fff7594

080036cc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <HAL_GetUIDw2+0x10>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	1fff7598 	.word	0x1fff7598

080036e0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80036e4:	f7ff ff78 	bl	80035d8 <LL_DBGMCU_EnableDBGSleepMode>
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80036f0:	f7ff ff80 	bl	80035f4 <LL_DBGMCU_EnableDBGStopMode>
}
 80036f4:	bf00      	nop
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80036fc:	f7ff ff88 	bl	8003610 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}

08003704 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2107      	movs	r1, #7
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	401a      	ands	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2107      	movs	r1, #7
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	210f      	movs	r1, #15
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	401a      	ands	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0e9b      	lsrs	r3, r3, #26
 80037f6:	f003 010f 	and.w	r1, r3, #15
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800384c:	43db      	mvns	r3, r3
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	0219      	lsls	r1, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	400b      	ands	r3, r1
 800387e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003882:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003886:	431a      	orrs	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038a6:	f023 0317 	bic.w	r3, r3, #23
 80038aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038cc:	f023 0317 	bic.w	r3, r3, #23
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6093      	str	r3, [r2, #8]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f2:	d101      	bne.n	80038f8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003914:	f023 0317 	bic.w	r3, r3, #23
 8003918:	f043 0201 	orr.w	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800393a:	f023 0317 	bic.w	r3, r3, #23
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr

08003950 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <LL_ADC_IsEnabled+0x18>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <LL_ADC_IsEnabled+0x1a>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	d101      	bne.n	800398c <LL_ADC_IsDisableOngoing+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_ADC_IsDisableOngoing+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039a8:	f023 0317 	bic.w	r3, r3, #23
 80039ac:	f043 0204 	orr.w	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ce:	f023 0317 	bic.w	r3, r3, #23
 80039d2:	f043 0210 	orr.w	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d101      	bne.n	80039fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e19e      	b.n	8003d68 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fd fba1 	bl	8001180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff44 	bl	80038de <LL_ADC_IsInternalRegulatorEnabled>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d115      	bne.n	8003a88 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff18 	bl	8003896 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a66:	4b99      	ldr	r3, [pc, #612]	; (8003ccc <HAL_ADC_Init+0x2c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	4a98      	ldr	r2, [pc, #608]	; (8003cd0 <HAL_ADC_Init+0x2c8>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	3301      	adds	r3, #1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a7a:	e002      	b.n	8003a82 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f9      	bne.n	8003a7c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff26 	bl	80038de <LL_ADC_IsInternalRegulatorEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f043 0210 	orr.w	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	f043 0201 	orr.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff93 	bl	80039e4 <LL_ADC_REG_IsConversionOngoing>
 8003abe:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 8144 	bne.w	8003d56 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 8140 	bne.w	8003d56 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ade:	f043 0202 	orr.w	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff30 	bl	8003950 <LL_ADC_IsEnabled>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 80a7 	bne.w	8003c46 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7e1b      	ldrb	r3, [r3, #24]
 8003b00:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003b02:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7e5b      	ldrb	r3, [r3, #25]
 8003b08:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003b0a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7e9b      	ldrb	r3, [r3, #26]
 8003b10:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003b12:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b18:	2a00      	cmp	r2, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_ADC_Init+0x11a>
 8003b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b20:	e000      	b.n	8003b24 <HAL_ADC_Init+0x11c>
 8003b22:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b24:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b2a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	da04      	bge.n	8003b3e <HAL_ADC_Init+0x136>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b3c:	e001      	b.n	8003b42 <HAL_ADC_Init+0x13a>
 8003b3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003b42:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b4a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b4c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d114      	bne.n	8003b88 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7e9b      	ldrb	r3, [r3, #26]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e00b      	b.n	8003b88 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f043 0201 	orr.w	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003bae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d111      	bne.n	8003bfe <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003be6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003bec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003bf2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_ADC_Init+0x2cc>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	6979      	ldr	r1, [r7, #20]
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003c1a:	d014      	beq.n	8003c46 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c24:	d00f      	beq.n	8003c46 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2e:	d00a      	beq.n	8003c46 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003c30:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <HAL_ADC_Init+0x2d0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c40:	4925      	ldr	r1, [pc, #148]	; (8003cd8 <HAL_ADC_Init+0x2d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2100      	movs	r1, #0
 8003c52:	f7ff fd76 	bl	8003742 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	461a      	mov	r2, r3
 8003c60:	491e      	ldr	r1, [pc, #120]	; (8003cdc <HAL_ADC_Init+0x2d4>)
 8003c62:	f7ff fd6e 	bl	8003742 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f062 020f 	orn	r2, r2, #15
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7e:	e042      	b.n	8003d06 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c88:	d13d      	bne.n	8003d06 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e00c      	b.n	8003caa <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	2b0f      	cmp	r3, #15
 8003ca2:	d006      	beq.n	8003cb2 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b07      	cmp	r3, #7
 8003cae:	d9ef      	bls.n	8003c90 <HAL_ADC_Init+0x288>
 8003cb0:	e000      	b.n	8003cb4 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003cb2:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d112      	bne.n	8003ce0 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f062 020f 	orn	r2, r2, #15
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cca:	e01c      	b.n	8003d06 <HAL_ADC_Init+0x2fe>
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	053e2d63 	.word	0x053e2d63
 8003cd4:	1ffffc02 	.word	0x1ffffc02
 8003cd8:	40012708 	.word	0x40012708
 8003cdc:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	f003 031c 	and.w	r3, r3, #28
 8003cf2:	f06f 020f 	mvn.w	r2, #15
 8003cf6:	fa02 f103 	lsl.w	r1, r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fd36 	bl	800377e <LL_ADC_GetSamplingTimeCommonChannels>
 8003d12:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d10b      	bne.n	8003d34 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d32:	e018      	b.n	8003d66 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	f023 0312 	bic.w	r3, r3, #18
 8003d3c:	f043 0210 	orr.w	r2, r3, #16
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d54:	e007      	b.n	8003d66 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003d66:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06a      	b.n	8003e58 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f043 0202 	orr.w	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fabe 	bl	8004310 <ADC_ConversionStop>
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fb82 	bl	80044a8 <ADC_Disable>
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fd7f 	bl	80038bc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f240 329f 	movw	r2, #927	; 0x39f
 8003dda:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68d9      	ldr	r1, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_ADC_DeInit+0xf0>)
 8003de8:	400b      	ands	r3, r1
 8003dea:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003dfa:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0207 	bic.w	r2, r2, #7
 8003e0a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <HAL_ADC_DeInit+0xf4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a0d      	ldr	r2, [pc, #52]	; (8003e64 <HAL_ADC_DeInit+0xf4>)
 8003e30:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003e34:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd f9b6 	bl	80011a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	833e0200 	.word	0x833e0200
 8003e64:	40012708 	.word	0x40012708

08003e68 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fdb5 	bl	80039e4 <LL_ADC_REG_IsConversionOngoing>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d132      	bne.n	8003ee6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_Start+0x26>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e02e      	b.n	8003eec <HAL_ADC_Start+0x84>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa80 	bl	800439c <ADC_Enable>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11a      	bne.n	8003edc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	221c      	movs	r2, #28
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fd5f 	bl	8003998 <LL_ADC_REG_StartConversion>
 8003eda:	e006      	b.n	8003eea <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003ee4:	e001      	b.n	8003eea <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_ADC_Stop+0x16>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e022      	b.n	8003f50 <HAL_ADC_Stop+0x5c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9fc 	bl	8004310 <ADC_ConversionStop>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d111      	bne.n	8003f46 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fac0 	bl	80044a8 <ADC_Disable>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d102      	bne.n	8003f70 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e010      	b.n	8003f92 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e077      	b.n	800407e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003f8e:	2304      	movs	r3, #4
 8003f90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f92:	f7fe fac9 	bl	8002528 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f98:	e021      	b.n	8003fde <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d01d      	beq.n	8003fde <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003fa2:	f7fe fac1 	bl	8002528 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <HAL_ADC_PollForConversion+0x60>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d112      	bne.n	8003fde <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f043 0204 	orr.w	r2, r3, #4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e04f      	b.n	800407e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0d6      	beq.n	8003f9a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fbd6 	bl	80037ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d031      	beq.n	800406c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7e9b      	ldrb	r3, [r3, #26]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d12d      	bne.n	800406c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b08      	cmp	r3, #8
 800401c:	d126      	bne.n	800406c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fcde 	bl	80039e4 <LL_ADC_REG_IsConversionOngoing>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d112      	bne.n	8004054 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 020c 	bic.w	r2, r2, #12
 800403c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	659a      	str	r2, [r3, #88]	; 0x58
 8004052:	e00b      	b.n	800406c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7e1b      	ldrb	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	220c      	movs	r2, #12
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x28>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e110      	b.n	80042ea <HAL_ADC_ConfigChannel+0x24a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fc85 	bl	80039e4 <LL_ADC_REG_IsConversionOngoing>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f040 80f7 	bne.w	80042d0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	f000 80b1 	beq.w	800424e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f4:	d004      	beq.n	8004100 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040fa:	4a7e      	ldr	r2, [pc, #504]	; (80042f4 <HAL_ADC_ConfigChannel+0x254>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d108      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7ff fb82 	bl	8003814 <LL_ADC_REG_SetSequencerChAdd>
 8004110:	e041      	b.n	8004196 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	210f      	movs	r1, #15
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	401a      	ands	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_ADC_ConfigChannel+0xa0>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	e011      	b.n	8004164 <HAL_ADC_ConfigChannel+0xc4>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e003      	b.n	8004164 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	6849      	ldr	r1, [r1, #4]
 8004168:	f001 011f 	and.w	r1, r1, #31
 800416c:	408b      	lsls	r3, r1
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	429a      	cmp	r2, r3
 8004182:	d808      	bhi.n	8004196 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	f7ff fb1e 	bl	80037d2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7ff fb5b 	bl	800385e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f280 8097 	bge.w	80042e0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b2:	4851      	ldr	r0, [pc, #324]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 80041b4:	f7ff fab8 	bl	8003728 <LL_ADC_GetCommonPathInternalCh>
 80041b8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a4f      	ldr	r2, [pc, #316]	; (80042fc <HAL_ADC_ConfigChannel+0x25c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d120      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11b      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041d4:	4619      	mov	r1, r3
 80041d6:	4848      	ldr	r0, [pc, #288]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 80041d8:	f7ff fa94 	bl	8003704 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041dc:	4b48      	ldr	r3, [pc, #288]	; (8004300 <HAL_ADC_ConfigChannel+0x260>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	4a48      	ldr	r2, [pc, #288]	; (8004304 <HAL_ADC_ConfigChannel+0x264>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	4613      	mov	r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80041f6:	e002      	b.n	80041fe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f9      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004204:	e06c      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <HAL_ADC_ConfigChannel+0x268>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <HAL_ADC_ConfigChannel+0x18a>
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004220:	4619      	mov	r1, r3
 8004222:	4835      	ldr	r0, [pc, #212]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 8004224:	f7ff fa6e 	bl	8003704 <LL_ADC_SetCommonPathInternalCh>
 8004228:	e05a      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a37      	ldr	r2, [pc, #220]	; (800430c <HAL_ADC_ConfigChannel+0x26c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d155      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800423a:	2b00      	cmp	r3, #0
 800423c:	d150      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004244:	4619      	mov	r1, r3
 8004246:	482c      	ldr	r0, [pc, #176]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 8004248:	f7ff fa5c 	bl	8003704 <LL_ADC_SetCommonPathInternalCh>
 800424c:	e048      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004256:	d004      	beq.n	8004262 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <HAL_ADC_ConfigChannel+0x254>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d107      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7ff fae3 	bl	8003838 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da32      	bge.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800427a:	481f      	ldr	r0, [pc, #124]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 800427c:	f7ff fa54 	bl	8003728 <LL_ADC_GetCommonPathInternalCh>
 8004280:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <HAL_ADC_ConfigChannel+0x25c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d107      	bne.n	800429c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004292:	4619      	mov	r1, r3
 8004294:	4818      	ldr	r0, [pc, #96]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 8004296:	f7ff fa35 	bl	8003704 <LL_ADC_SetCommonPathInternalCh>
 800429a:	e021      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_ADC_ConfigChannel+0x268>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d107      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ac:	4619      	mov	r1, r3
 80042ae:	4812      	ldr	r0, [pc, #72]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 80042b0:	f7ff fa28 	bl	8003704 <LL_ADC_SetCommonPathInternalCh>
 80042b4:	e014      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a14      	ldr	r2, [pc, #80]	; (800430c <HAL_ADC_ConfigChannel+0x26c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10f      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042c6:	4619      	mov	r1, r3
 80042c8:	480b      	ldr	r0, [pc, #44]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 80042ca:	f7ff fa1b 	bl	8003704 <LL_ADC_SetCommonPathInternalCh>
 80042ce:	e007      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	f043 0220 	orr.w	r2, r3, #32
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80042e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	80000004 	.word	0x80000004
 80042f8:	40012708 	.word	0x40012708
 80042fc:	b0001000 	.word	0xb0001000
 8004300:	20000004 	.word	0x20000004
 8004304:	053e2d63 	.word	0x053e2d63
 8004308:	b8004000 	.word	0xb8004000
 800430c:	b4002000 	.word	0xb4002000

08004310 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fb61 	bl	80039e4 <LL_ADC_REG_IsConversionOngoing>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d033      	beq.n	8004390 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fb21 	bl	8003974 <LL_ADC_IsDisableOngoing>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fb3e 	bl	80039be <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004342:	f7fe f8f1 	bl	8002528 <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004348:	e01b      	b.n	8004382 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800434a:	f7fe f8ed 	bl	8002528 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d914      	bls.n	8004382 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f043 0210 	orr.w	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e007      	b.n	8004392 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1dc      	bne.n	800434a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff facf 	bl	8003950 <LL_ADC_IsEnabled>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d169      	bne.n	800448c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <ADC_Enable+0xfc>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f043 0210 	orr.w	r2, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	f043 0201 	orr.w	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e055      	b.n	800448e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fa8c 	bl	8003904 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043ec:	482b      	ldr	r0, [pc, #172]	; (800449c <ADC_Enable+0x100>)
 80043ee:	f7ff f99b 	bl	8003728 <LL_ADC_GetCommonPathInternalCh>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00f      	beq.n	800441c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043fc:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <ADC_Enable+0x104>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	4a28      	ldr	r2, [pc, #160]	; (80044a4 <ADC_Enable+0x108>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	3301      	adds	r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800440e:	e002      	b.n	8004416 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	3b01      	subs	r3, #1
 8004414:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f9      	bne.n	8004410 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	7e5b      	ldrb	r3, [r3, #25]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d033      	beq.n	800448c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004424:	f7fe f880 	bl	8002528 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800442a:	e028      	b.n	800447e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fa8d 	bl	8003950 <LL_ADC_IsEnabled>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fa5f 	bl	8003904 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004446:	f7fe f86f 	bl	8002528 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d914      	bls.n	800447e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d00d      	beq.n	800447e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e007      	b.n	800448e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d1cf      	bne.n	800442c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	80000017 	.word	0x80000017
 800449c:	40012708 	.word	0x40012708
 80044a0:	20000004 	.word	0x20000004
 80044a4:	053e2d63 	.word	0x053e2d63

080044a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fa5d 	bl	8003974 <LL_ADC_IsDisableOngoing>
 80044ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fa45 	bl	8003950 <LL_ADC_IsEnabled>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d047      	beq.n	800455c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d144      	bne.n	800455c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0305 	and.w	r3, r3, #5
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10c      	bne.n	80044fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fa20 	bl	800392a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2203      	movs	r2, #3
 80044f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044f2:	f7fe f819 	bl	8002528 <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044f8:	e029      	b.n	800454e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	f043 0210 	orr.w	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	f043 0201 	orr.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e023      	b.n	800455e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004516:	f7fe f807 	bl	8002528 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d914      	bls.n	800454e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1dc      	bne.n	8004516 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <LL_ADC_SetCalibrationFactor>:
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004576:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <LL_ADC_GetCalibrationFactor>:
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800459c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <LL_ADC_Enable>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045ba:	f023 0317 	bic.w	r3, r3, #23
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <LL_ADC_Disable>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045e0:	f023 0317 	bic.w	r3, r3, #23
 80045e4:	f043 0202 	orr.w	r2, r3, #2
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	609a      	str	r2, [r3, #8]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <LL_ADC_IsEnabled>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <LL_ADC_IsEnabled+0x18>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <LL_ADC_IsEnabled+0x1a>
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <LL_ADC_StartCalibration>:
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800462a:	f023 0317 	bic.w	r3, r3, #23
 800462e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	609a      	str	r2, [r3, #8]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <LL_ADC_IsCalibrationOnGoing>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004654:	d101      	bne.n	800465a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr

08004666 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b088      	sub	sp, #32
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_ADCEx_Calibration_Start+0x1e>
 8004680:	2302      	movs	r3, #2
 8004682:	e0b9      	b.n	80047f8 <HAL_ADCEx_Calibration_Start+0x192>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff0b 	bl	80044a8 <ADC_Disable>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ffab 	bl	80045f6 <LL_ADC_IsEnabled>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 809d 	bne.w	80047e2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046b0:	f043 0202 	orr.w	r2, r3, #2
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	f248 0303 	movw	r3, #32771	; 0x8003
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046d4:	f023 0303 	bic.w	r3, r3, #3
 80046d8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	e02e      	b.n	800473e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff98 	bl	800461a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046ea:	e014      	b.n	8004716 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80046f8:	d30d      	bcc.n	8004716 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	f023 0312 	bic.w	r3, r3, #18
 8004702:	f043 0210 	orr.w	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e070      	b.n	80047f8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff90 	bl	8004640 <LL_ADC_IsCalibrationOnGoing>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e2      	bne.n	80046ec <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff2f 	bl	800458e <LL_ADC_GetCalibrationFactor>
 8004730:	4602      	mov	r2, r0
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	4413      	add	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	3301      	adds	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b07      	cmp	r3, #7
 8004742:	d9cd      	bls.n	80046e0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff29 	bl	80045aa <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff ff01 	bl	8004566 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ff31 	bl	80045d0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800476e:	f7fd fedb 	bl	8002528 <HAL_GetTick>
 8004772:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004774:	e01c      	b.n	80047b0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004776:	f7fd fed7 	bl	8002528 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d915      	bls.n	80047b0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff34 	bl	80045f6 <LL_ADC_IsEnabled>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004798:	f043 0210 	orr.w	r2, r3, #16
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	f043 0201 	orr.w	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e023      	b.n	80047f8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff1e 	bl	80045f6 <LL_ADC_IsEnabled>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1da      	bne.n	8004776 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68d9      	ldr	r1, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	659a      	str	r2, [r3, #88]	; 0x58
 80047e0:	e005      	b.n	80047ee <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800481c:	4013      	ands	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800482c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004832:	4a04      	ldr	r2, [pc, #16]	; (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	60d3      	str	r3, [r2, #12]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <__NVIC_GetPriorityGrouping+0x18>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0307 	and.w	r3, r3, #7
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	db0b      	blt.n	800488e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	f003 021f 	and.w	r2, r3, #31
 800487c:	4906      	ldr	r1, [pc, #24]	; (8004898 <__NVIC_EnableIRQ+0x34>)
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2001      	movs	r0, #1
 8004886:	fa00 f202 	lsl.w	r2, r0, r2
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	e000e100 	.word	0xe000e100

0800489c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	db12      	blt.n	80048d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	f003 021f 	and.w	r2, r3, #31
 80048b4:	490a      	ldr	r1, [pc, #40]	; (80048e0 <__NVIC_DisableIRQ+0x44>)
 80048b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2001      	movs	r0, #1
 80048be:	fa00 f202 	lsl.w	r2, r0, r2
 80048c2:	3320      	adds	r3, #32
 80048c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048c8:	f3bf 8f4f 	dsb	sy
}
 80048cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048ce:	f3bf 8f6f 	isb	sy
}
 80048d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e100 	.word	0xe000e100

080048e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	db0a      	blt.n	800490e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	490c      	ldr	r1, [pc, #48]	; (8004930 <__NVIC_SetPriority+0x4c>)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	440b      	add	r3, r1
 8004908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800490c:	e00a      	b.n	8004924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4908      	ldr	r1, [pc, #32]	; (8004934 <__NVIC_SetPriority+0x50>)
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	3b04      	subs	r3, #4
 800491c:	0112      	lsls	r2, r2, #4
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	440b      	add	r3, r1
 8004922:	761a      	strb	r2, [r3, #24]
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e100 	.word	0xe000e100
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	; 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f1c3 0307 	rsb	r3, r3, #7
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf28      	it	cs
 8004956:	2304      	movcs	r3, #4
 8004958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3304      	adds	r3, #4
 800495e:	2b06      	cmp	r3, #6
 8004960:	d902      	bls.n	8004968 <NVIC_EncodePriority+0x30>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3b03      	subs	r3, #3
 8004966:	e000      	b.n	800496a <NVIC_EncodePriority+0x32>
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	401a      	ands	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004980:	f04f 31ff 	mov.w	r1, #4294967295
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	43d9      	mvns	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	4313      	orrs	r3, r2
         );
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ff2b 	bl	8004800 <__NVIC_SetPriorityGrouping>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b086      	sub	sp, #24
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4603      	mov	r3, r0
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049c0:	f7ff ff42 	bl	8004848 <__NVIC_GetPriorityGrouping>
 80049c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7ff ffb4 	bl	8004938 <NVIC_EncodePriority>
 80049d0:	4602      	mov	r2, r0
 80049d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff83 	bl	80048e4 <__NVIC_SetPriority>
}
 80049de:	bf00      	nop
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	4603      	mov	r3, r0
 80049ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff35 	bl	8004864 <__NVIC_EnableIRQ>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ff43 	bl	800489c <__NVIC_DisableIRQ>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e08e      	b.n	8004b50 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_DMA_Init+0x138>)
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d80f      	bhi.n	8004a5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <HAL_DMA_Init+0x13c>)
 8004a46:	4413      	add	r3, r2
 8004a48:	4a45      	ldr	r2, [pc, #276]	; (8004b60 <HAL_DMA_Init+0x140>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	009a      	lsls	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a42      	ldr	r2, [pc, #264]	; (8004b64 <HAL_DMA_Init+0x144>)
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a5c:	e00e      	b.n	8004a7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <HAL_DMA_Init+0x148>)
 8004a66:	4413      	add	r3, r2
 8004a68:	4a3d      	ldr	r2, [pc, #244]	; (8004b60 <HAL_DMA_Init+0x140>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	009a      	lsls	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a3c      	ldr	r2, [pc, #240]	; (8004b6c <HAL_DMA_Init+0x14c>)
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fb24 	bl	800511c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004adc:	d102      	bne.n	8004ae4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004af0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004afa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d010      	beq.n	8004b26 <HAL_DMA_Init+0x106>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d80c      	bhi.n	8004b26 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb4d 	bl	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	e008      	b.n	8004b38 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40020407 	.word	0x40020407
 8004b5c:	bffdfff8 	.word	0xbffdfff8
 8004b60:	cccccccd 	.word	0xcccccccd
 8004b64:	40020000 	.word	0x40020000
 8004b68:	bffdfbf8 	.word	0xbffdfbf8
 8004b6c:	40020400 	.word	0x40020400

08004b70 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e07b      	b.n	8004c7a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	4b3a      	ldr	r3, [pc, #232]	; (8004c84 <HAL_DMA_DeInit+0x114>)
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d80f      	bhi.n	8004bbe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4b38      	ldr	r3, [pc, #224]	; (8004c88 <HAL_DMA_DeInit+0x118>)
 8004ba6:	4413      	add	r3, r2
 8004ba8:	4a38      	ldr	r2, [pc, #224]	; (8004c8c <HAL_DMA_DeInit+0x11c>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	009a      	lsls	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a35      	ldr	r2, [pc, #212]	; (8004c90 <HAL_DMA_DeInit+0x120>)
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
 8004bbc:	e00e      	b.n	8004bdc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <HAL_DMA_DeInit+0x124>)
 8004bc6:	4413      	add	r3, r2
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_DMA_DeInit+0x11c>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	009a      	lsls	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2f      	ldr	r2, [pc, #188]	; (8004c98 <HAL_DMA_DeInit+0x128>)
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	f003 021c 	and.w	r2, r3, #28
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa8f 	bl	800511c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00f      	beq.n	8004c38 <HAL_DMA_DeInit+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d80b      	bhi.n	8004c38 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fac3 	bl	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c36:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40020407 	.word	0x40020407
 8004c88:	bffdfff8 	.word	0xbffdfff8
 8004c8c:	cccccccd 	.word	0xcccccccd
 8004c90:	40020000 	.word	0x40020000
 8004c94:	bffdfbf8 	.word	0xbffdfbf8
 8004c98:	40020400 	.word	0x40020400

08004c9c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_DMA_Start_IT+0x20>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e069      	b.n	8004d90 <HAL_DMA_Start_IT+0xf4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d155      	bne.n	8004d7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f9d3 	bl	80050a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 020e 	orr.w	r2, r2, #14
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e00f      	b.n	8004d34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0204 	bic.w	r2, r2, #4
 8004d22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 020a 	orr.w	r2, r2, #10
 8004d32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e008      	b.n	8004d8e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2280      	movs	r2, #128	; 0x80
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e04f      	b.n	8004e4a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d008      	beq.n	8004dc8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2204      	movs	r2, #4
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e040      	b.n	8004e4a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 020e 	bic.w	r2, r2, #14
 8004dd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	f003 021c 	and.w	r2, r3, #28
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	2101      	movs	r1, #1
 8004e06:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr

08004e54 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d005      	beq.n	8004e78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	e047      	b.n	8004f08 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 020e 	bic.w	r2, r2, #14
 8004e86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	f003 021c 	and.w	r2, r3, #28
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ec4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004edc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ee6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
    }
  }
  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f003 031c 	and.w	r3, r3, #28
 8004f34:	2204      	movs	r2, #4
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d027      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x7c>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d022      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0204 	bic.w	r2, r2, #4
 8004f66:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	f003 021c 	and.w	r2, r3, #28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2104      	movs	r1, #4
 8004f76:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8081 	beq.w	8005088 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004f8e:	e07b      	b.n	8005088 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	f003 031c 	and.w	r3, r3, #28
 8004f98:	2202      	movs	r2, #2
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d03d      	beq.n	8005020 <HAL_DMA_IRQHandler+0x10c>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d038      	beq.n	8005020 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 020a 	bic.w	r2, r2, #10
 8004fca:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b2e      	ldr	r3, [pc, #184]	; (8005094 <HAL_DMA_IRQHandler+0x180>)
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d909      	bls.n	8004ff4 <HAL_DMA_IRQHandler+0xe0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	f003 031c 	and.w	r3, r3, #28
 8004fe8:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_DMA_IRQHandler+0x184>)
 8004fea:	2102      	movs	r1, #2
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	6053      	str	r3, [r2, #4]
 8004ff2:	e008      	b.n	8005006 <HAL_DMA_IRQHandler+0xf2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	f003 031c 	and.w	r3, r3, #28
 8004ffc:	4a27      	ldr	r2, [pc, #156]	; (800509c <HAL_DMA_IRQHandler+0x188>)
 8004ffe:	2102      	movs	r1, #2
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d038      	beq.n	8005088 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800501e:	e033      	b.n	8005088 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	f003 031c 	and.w	r3, r3, #28
 8005028:	2208      	movs	r2, #8
 800502a:	409a      	lsls	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02a      	beq.n	800508a <HAL_DMA_IRQHandler+0x176>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d025      	beq.n	800508a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 020e 	bic.w	r2, r2, #14
 800504c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f003 021c 	and.w	r2, r3, #28
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f202 	lsl.w	r2, r1, r2
 8005060:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005088:	bf00      	nop
 800508a:	bf00      	nop
}
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40020080 	.word	0x40020080
 8005098:	40020400 	.word	0x40020400
 800509c:	40020000 	.word	0x40020000

080050a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f003 021c 	and.w	r2, r3, #28
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	2101      	movs	r1, #1
 80050d8:	fa01 f202 	lsl.w	r2, r1, r2
 80050dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d108      	bne.n	8005100 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050fe:	e007      	b.n	8005110 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr
	...

0800511c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	4b1c      	ldr	r3, [pc, #112]	; (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800512c:	429a      	cmp	r2, r3
 800512e:	d813      	bhi.n	8005158 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	089b      	lsrs	r3, r3, #2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800513c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3b08      	subs	r3, #8
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e011      	b.n	800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005162:	4413      	add	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	3b08      	subs	r3, #8
 8005170:	4a0b      	ldr	r2, [pc, #44]	; (80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	3307      	adds	r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005180:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40020407 	.word	0x40020407
 80051a0:	cccccccd 	.word	0xcccccccd
 80051a4:	4002081c 	.word	0x4002081c
 80051a8:	40020880 	.word	0x40020880

080051ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	461a      	mov	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80051d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2201      	movs	r2, #1
 80051dc:	409a      	lsls	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	1000823f 	.word	0x1000823f
 80051f0:	40020940 	.word	0x40020940

080051f4 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d12b      	bne.n	8005262 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005214:	2302      	movs	r3, #2
 8005216:	e028      	b.n	800526a <HAL_DMAEx_ConfigMuxSync+0x76>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	3b01      	subs	r3, #1
 8005234:	04db      	lsls	r3, r3, #19
 8005236:	431a      	orrs	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	431a      	orrs	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7a1b      	ldrb	r3, [r3, #8]
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	431a      	orrs	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	7a5b      	ldrb	r3, [r3, #9]
 800524a:	025b      	lsls	r3, r3, #9
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e003      	b.n	800526a <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2280      	movs	r2, #128	; 0x80
 8005266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01a      	beq.n	80052c2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800529a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d022      	beq.n	8005310 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01a      	beq.n	8005310 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
      }
    }
  }
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005326:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <HAL_FLASH_Program+0x80>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_FLASH_Program+0x1a>
 800532e:	2302      	movs	r3, #2
 8005330:	e02d      	b.n	800538e <HAL_FLASH_Program+0x76>
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_FLASH_Program+0x80>)
 8005334:	2201      	movs	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005338:	4b17      	ldr	r3, [pc, #92]	; (8005398 <HAL_FLASH_Program+0x80>)
 800533a:	2200      	movs	r2, #0
 800533c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800533e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005342:	f000 f869 	bl	8005418 <FLASH_WaitForLastOperation>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d11a      	bne.n	8005386 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d105      	bne.n	8005362 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f000 f8be 	bl	80054dc <FLASH_Program_DoubleWord>
 8005360:	e004      	b.n	800536c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	4619      	mov	r1, r3
 8005366:	68b8      	ldr	r0, [r7, #8]
 8005368:	f000 f8de 	bl	8005528 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800536c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005370:	f000 f852 	bl	8005418 <FLASH_WaitForLastOperation>
 8005374:	4603      	mov	r3, r0
 8005376:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_FLASH_Program+0x84>)
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	43db      	mvns	r3, r3
 8005380:	4906      	ldr	r1, [pc, #24]	; (800539c <HAL_FLASH_Program+0x84>)
 8005382:	4013      	ands	r3, r2
 8005384:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005386:	4b04      	ldr	r3, [pc, #16]	; (8005398 <HAL_FLASH_Program+0x80>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	200009fc 	.word	0x200009fc
 800539c:	58004000 	.word	0x58004000

080053a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_FLASH_Unlock+0x38>)
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da0b      	bge.n	80053ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_FLASH_Unlock+0x38>)
 80053b4:	4a09      	ldr	r2, [pc, #36]	; (80053dc <HAL_FLASH_Unlock+0x3c>)
 80053b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <HAL_FLASH_Unlock+0x38>)
 80053ba:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <HAL_FLASH_Unlock+0x40>)
 80053bc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_FLASH_Unlock+0x38>)
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da01      	bge.n	80053ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80053ca:	79fb      	ldrb	r3, [r7, #7]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	58004000 	.word	0x58004000
 80053dc:	45670123 	.word	0x45670123
 80053e0:	cdef89ab 	.word	0xcdef89ab

080053e4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_FLASH_Lock+0x30>)
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	4a08      	ldr	r2, [pc, #32]	; (8005414 <HAL_FLASH_Lock+0x30>)
 80053f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <HAL_FLASH_Lock+0x30>)
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	db01      	blt.n	8005406 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005406:	79fb      	ldrb	r3, [r7, #7]
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	58004000 	.word	0x58004000

08005418 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005420:	f7fd f882 	bl	8002528 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005426:	e009      	b.n	800543c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005428:	f7fd f87e 	bl	8002528 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d801      	bhi.n	800543c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e047      	b.n	80054cc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <FLASH_WaitForLastOperation+0xbc>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d0ee      	beq.n	8005428 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800544a:	4b22      	ldr	r3, [pc, #136]	; (80054d4 <FLASH_WaitForLastOperation+0xbc>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800545a:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <FLASH_WaitForLastOperation+0xbc>)
 800545c:	2201      	movs	r2, #1
 800545e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005466:	4013      	ands	r3, r2
 8005468:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <FLASH_WaitForLastOperation+0x6c>
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <FLASH_WaitForLastOperation+0xbc>)
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800547e:	4915      	ldr	r1, [pc, #84]	; (80054d4 <FLASH_WaitForLastOperation+0xbc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	618b      	str	r3, [r1, #24]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <FLASH_WaitForLastOperation+0x80>
 800548e:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <FLASH_WaitForLastOperation+0xbc>)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005496:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800549e:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <FLASH_WaitForLastOperation+0xc0>)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e011      	b.n	80054cc <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80054a8:	f7fd f83e 	bl	8002528 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d801      	bhi.n	80054bc <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e007      	b.n	80054cc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <FLASH_WaitForLastOperation+0xbc>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054c8:	d0ee      	beq.n	80054a8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	58004000 	.word	0x58004000
 80054d8:	200009fc 	.word	0x200009fc

080054dc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80054e8:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <FLASH_Program_DoubleWord+0x48>)
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <FLASH_Program_DoubleWord+0x48>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80054fa:	f3bf 8f6f 	isb	sy
}
 80054fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	000a      	movs	r2, r1
 800550e:	2300      	movs	r3, #0
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	3104      	adds	r1, #4
 8005514:	4613      	mov	r3, r2
 8005516:	600b      	str	r3, [r1, #0]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	58004000 	.word	0x58004000

08005528 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	; 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005532:	2340      	movs	r3, #64	; 0x40
 8005534:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <FLASH_Program_Fast+0x78>)
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <FLASH_Program_Fast+0x78>)
 8005544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005548:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554a:	f3ef 8310 	mrs	r3, PRIMASK
 800554e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005550:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005554:	b672      	cpsid	i
}
 8005556:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	3304      	adds	r3, #4
 8005564:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	3304      	adds	r3, #4
 800556a:	617b      	str	r3, [r7, #20]
    row_index--;
 800556c:	7ffb      	ldrb	r3, [r7, #31]
 800556e:	3b01      	subs	r3, #1
 8005570:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ef      	bne.n	8005558 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005578:	bf00      	nop
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <FLASH_Program_Fast+0x78>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005586:	d0f8      	beq.n	800557a <FLASH_Program_Fast+0x52>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f383 8810 	msr	PRIMASK, r3
}
 8005592:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005594:	bf00      	nop
 8005596:	3724      	adds	r7, #36	; 0x24
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	58004000 	.word	0x58004000

080055a4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055ae:	4b28      	ldr	r3, [pc, #160]	; (8005650 <HAL_FLASHEx_Erase+0xac>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_FLASHEx_Erase+0x16>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e046      	b.n	8005648 <HAL_FLASHEx_Erase+0xa4>
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <HAL_FLASHEx_Erase+0xac>)
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80055c0:	4b23      	ldr	r3, [pc, #140]	; (8005650 <HAL_FLASHEx_Erase+0xac>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055ca:	f7ff ff25 	bl	8005418 <FLASH_WaitForLastOperation>
 80055ce:	4603      	mov	r3, r0
 80055d0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d133      	bne.n	8005640 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d108      	bne.n	80055f2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80055e0:	f000 f880 	bl	80056e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055e8:	f7ff ff16 	bl	8005418 <FLASH_WaitForLastOperation>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
 80055f0:	e024      	b.n	800563c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	e012      	b.n	8005628 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005602:	68b8      	ldr	r0, [r7, #8]
 8005604:	f000 f87e 	bl	8005704 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800560c:	f7ff ff04 	bl	8005418 <FLASH_WaitForLastOperation>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	601a      	str	r2, [r3, #0]
          break;
 8005620:	e00a      	b.n	8005638 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3301      	adds	r3, #1
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4413      	add	r3, r2
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	d3e4      	bcc.n	8005602 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005638:	f000 f8c0 	bl	80057bc <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800563c:	f000 f87a 	bl	8005734 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <HAL_FLASHEx_Erase+0xac>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]

  return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200009fc 	.word	0x200009fc

08005654 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_FLASHEx_Erase_IT+0x14>
 8005664:	2302      	movs	r3, #2
 8005666:	e034      	b.n	80056d2 <HAL_FLASHEx_Erase_IT+0x7e>
 8005668:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800566e:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a18      	ldr	r2, [pc, #96]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 800567a:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800567c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005680:	f7ff feca 	bl	8005418 <FLASH_WaitForLastOperation>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e01c      	b.n	80056d0 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005696:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <HAL_FLASHEx_Erase_IT+0x8c>)
 800569c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80056a0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d105      	bne.n	80056b6 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80056b0:	f000 f818 	bl	80056e4 <FLASH_MassErase>
 80056b4:	e00c      	b.n	80056d0 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	4a08      	ldr	r2, [pc, #32]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 80056bc:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4a06      	ldr	r2, [pc, #24]	; (80056dc <HAL_FLASHEx_Erase_IT+0x88>)
 80056c4:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f81a 	bl	8005704 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200009fc 	.word	0x200009fc
 80056e0:	58004000 	.word	0x58004000

080056e4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <FLASH_MassErase+0x1c>)
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	4a04      	ldr	r2, [pc, #16]	; (8005700 <FLASH_MassErase+0x1c>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	f043 0304 	orr.w	r3, r3, #4
 80056f6:	6153      	str	r3, [r2, #20]
#endif
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	58004000 	.word	0x58004000

08005704 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <FLASH_PageErase+0x2c>)
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4313      	orrs	r3, r2
 800571a:	4a05      	ldr	r2, [pc, #20]	; (8005730 <FLASH_PageErase+0x2c>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005720:	f043 0302 	orr.w	r3, r3, #2
 8005724:	6153      	str	r3, [r2, #20]
#endif
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	58004000 	.word	0x58004000

08005734 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005738:	4b1f      	ldr	r3, [pc, #124]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005740:	2b01      	cmp	r3, #1
 8005742:	d117      	bne.n	8005774 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005744:	4b1c      	ldr	r3, [pc, #112]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800574a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800574e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005750:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005766:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800576e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005772:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005774:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577c:	2b01      	cmp	r3, #1
 800577e:	d117      	bne.n	80057b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800578a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <FLASH_FlushCaches+0x84>)
 8005792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <FLASH_FlushCaches+0x84>)
 800579e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057a4:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <FLASH_FlushCaches+0x84>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a03      	ldr	r2, [pc, #12]	; (80057b8 <FLASH_FlushCaches+0x84>)
 80057aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ae:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	58004000 	.word	0x58004000

080057bc <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <FLASH_AcknowledgePageErase+0x1c>)
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <FLASH_AcknowledgePageErase+0x1c>)
 80057c6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80057ca:	f023 0302 	bic.w	r3, r3, #2
 80057ce:	6153      	str	r3, [r2, #20]
#endif
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	58004000 	.word	0x58004000

080057dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057ea:	e140      	b.n	8005a6e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	2101      	movs	r1, #1
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	4013      	ands	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8132 	beq.w	8005a68 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d005      	beq.n	800581c <HAL_GPIO_Init+0x40>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d130      	bne.n	800587e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	2203      	movs	r2, #3
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4013      	ands	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005852:	2201      	movs	r2, #1
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 0201 	and.w	r2, r3, #1
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b03      	cmp	r3, #3
 8005888:	d017      	beq.n	80058ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	2203      	movs	r2, #3
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d123      	bne.n	800590e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	08da      	lsrs	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3208      	adds	r2, #8
 80058ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	220f      	movs	r2, #15
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43db      	mvns	r3, r3
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4013      	ands	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	08da      	lsrs	r2, r3, #3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3208      	adds	r2, #8
 8005908:	6939      	ldr	r1, [r7, #16]
 800590a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	2203      	movs	r2, #3
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4013      	ands	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 0203 	and.w	r2, r3, #3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 808c 	beq.w	8005a68 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005950:	4a4e      	ldr	r2, [pc, #312]	; (8005a8c <HAL_GPIO_Init+0x2b0>)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	089b      	lsrs	r3, r3, #2
 8005956:	3302      	adds	r3, #2
 8005958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	2207      	movs	r2, #7
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4013      	ands	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800597a:	d00d      	beq.n	8005998 <HAL_GPIO_Init+0x1bc>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a44      	ldr	r2, [pc, #272]	; (8005a90 <HAL_GPIO_Init+0x2b4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <HAL_GPIO_Init+0x1b8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a43      	ldr	r2, [pc, #268]	; (8005a94 <HAL_GPIO_Init+0x2b8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d101      	bne.n	8005990 <HAL_GPIO_Init+0x1b4>
 800598c:	2302      	movs	r3, #2
 800598e:	e004      	b.n	800599a <HAL_GPIO_Init+0x1be>
 8005990:	2307      	movs	r3, #7
 8005992:	e002      	b.n	800599a <HAL_GPIO_Init+0x1be>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <HAL_GPIO_Init+0x1be>
 8005998:	2300      	movs	r3, #0
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	f002 0203 	and.w	r2, r2, #3
 80059a0:	0092      	lsls	r2, r2, #2
 80059a2:	4093      	lsls	r3, r2
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059aa:	4938      	ldr	r1, [pc, #224]	; (8005a8c <HAL_GPIO_Init+0x2b0>)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	3302      	adds	r3, #2
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059b8:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4013      	ands	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059dc:	4a2e      	ldr	r2, [pc, #184]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059e2:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a06:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 8005a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a12:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005a32:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 8005a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a40:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005a60:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <HAL_GPIO_Init+0x2bc>)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f47f aeb7 	bne.w	80057ec <HAL_GPIO_Init+0x10>
  }
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	48000400 	.word	0x48000400
 8005a94:	48000800 	.word	0x48000800
 8005a98:	58000800 	.word	0x58000800

08005a9c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005aaa:	e0af      	b.n	8005c0c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005aac:	2201      	movs	r2, #1
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80a2 	beq.w	8005c06 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005ac2:	4a59      	ldr	r2, [pc, #356]	; (8005c28 <HAL_GPIO_DeInit+0x18c>)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	089b      	lsrs	r3, r3, #2
 8005ac8:	3302      	adds	r3, #2
 8005aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ace:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	2207      	movs	r2, #7
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005aea:	d00d      	beq.n	8005b08 <HAL_GPIO_DeInit+0x6c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a4f      	ldr	r2, [pc, #316]	; (8005c2c <HAL_GPIO_DeInit+0x190>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <HAL_GPIO_DeInit+0x68>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a4e      	ldr	r2, [pc, #312]	; (8005c30 <HAL_GPIO_DeInit+0x194>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d101      	bne.n	8005b00 <HAL_GPIO_DeInit+0x64>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e004      	b.n	8005b0a <HAL_GPIO_DeInit+0x6e>
 8005b00:	2307      	movs	r3, #7
 8005b02:	e002      	b.n	8005b0a <HAL_GPIO_DeInit+0x6e>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <HAL_GPIO_DeInit+0x6e>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	f002 0203 	and.w	r2, r2, #3
 8005b10:	0092      	lsls	r2, r2, #2
 8005b12:	4093      	lsls	r3, r2
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d136      	bne.n	8005b88 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005b1a:	4b46      	ldr	r3, [pc, #280]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	43db      	mvns	r3, r3
 8005b24:	4943      	ldr	r1, [pc, #268]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005b2c:	4b41      	ldr	r3, [pc, #260]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	493f      	ldr	r1, [pc, #252]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005b3e:	4b3d      	ldr	r3, [pc, #244]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	493b      	ldr	r1, [pc, #236]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005b4c:	4b39      	ldr	r3, [pc, #228]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	4937      	ldr	r1, [pc, #220]	; (8005c34 <HAL_GPIO_DeInit+0x198>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	2207      	movs	r2, #7
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005b6a:	4a2f      	ldr	r2, [pc, #188]	; (8005c28 <HAL_GPIO_DeInit+0x18c>)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	3302      	adds	r3, #2
 8005b72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	43da      	mvns	r2, r3
 8005b7a:	482b      	ldr	r0, [pc, #172]	; (8005c28 <HAL_GPIO_DeInit+0x18c>)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	400a      	ands	r2, r1
 8005b82:	3302      	adds	r3, #2
 8005b84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	2103      	movs	r1, #3
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	08da      	lsrs	r2, r3, #3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3208      	adds	r2, #8
 8005ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	220f      	movs	r2, #15
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	08d2      	lsrs	r2, r2, #3
 8005bbc:	4019      	ands	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3208      	adds	r2, #8
 8005bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	2103      	movs	r1, #3
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	2101      	movs	r1, #1
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	fa01 f303 	lsl.w	r3, r1, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	401a      	ands	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	401a      	ands	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f47f af49 	bne.w	8005aac <HAL_GPIO_DeInit+0x10>
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	48000400 	.word	0x48000400
 8005c30:	48000800 	.word	0x48000800
 8005c34:	58000800 	.word	0x58000800

08005c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	807b      	strh	r3, [r7, #2]
 8005c44:	4613      	mov	r3, r2
 8005c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c48:	787b      	ldrb	r3, [r7, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c4e:	887a      	ldrh	r2, [r7, #2]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c54:	e002      	b.n	8005c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c56:	887a      	ldrh	r2, [r7, #2]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr
	...

08005c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d006      	beq.n	8005c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c7e:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f005 fffe 	bl	800bc88 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	58000800 	.word	0x58000800

08005c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e081      	b.n	8005dae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb fdf4 	bl	80018ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ce8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d107      	bne.n	8005d12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d0e:	609a      	str	r2, [r3, #8]
 8005d10:	e006      	b.n	8005d20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d104      	bne.n	8005d32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	817b      	strh	r3, [r7, #10]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f040 80da 	bne.w	8005f8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_I2C_Master_Transmit+0x30>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e0d3      	b.n	8005f90 <HAL_I2C_Master_Transmit+0x1d8>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005df0:	f7fc fb9a 	bl	8002528 <HAL_GetTick>
 8005df4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	2319      	movs	r3, #25
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f9e5 	bl	80061d2 <I2C_WaitOnFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e0be      	b.n	8005f90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2221      	movs	r2, #33	; 0x21
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	893a      	ldrh	r2, [r7, #8]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2bff      	cmp	r3, #255	; 0xff
 8005e42:	d90e      	bls.n	8005e62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	22ff      	movs	r2, #255	; 0xff
 8005e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	8979      	ldrh	r1, [r7, #10]
 8005e52:	4b51      	ldr	r3, [pc, #324]	; (8005f98 <HAL_I2C_Master_Transmit+0x1e0>)
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fbdc 	bl	8006618 <I2C_TransferConfig>
 8005e60:	e06c      	b.n	8005f3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	8979      	ldrh	r1, [r7, #10]
 8005e74:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <HAL_I2C_Master_Transmit+0x1e0>)
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fbcb 	bl	8006618 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e82:	e05b      	b.n	8005f3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	6a39      	ldr	r1, [r7, #32]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f9e2 	bl	8006252 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e07b      	b.n	8005f90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d034      	beq.n	8005f3c <HAL_I2C_Master_Transmit+0x184>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d130      	bne.n	8005f3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f974 	bl	80061d2 <I2C_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e04d      	b.n	8005f90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2bff      	cmp	r3, #255	; 0xff
 8005efc:	d90e      	bls.n	8005f1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	22ff      	movs	r2, #255	; 0xff
 8005f02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	8979      	ldrh	r1, [r7, #10]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fb7f 	bl	8006618 <I2C_TransferConfig>
 8005f1a:	e00f      	b.n	8005f3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8979      	ldrh	r1, [r7, #10]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fb6e 	bl	8006618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d19e      	bne.n	8005e84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	6a39      	ldr	r1, [r7, #32]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f9c1 	bl	80062d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01a      	b.n	8005f90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <HAL_I2C_Master_Transmit+0x1e4>)
 8005f6e:	400b      	ands	r3, r1
 8005f70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e000      	b.n	8005f90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
  }
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	80002000 	.word	0x80002000
 8005f9c:	fe00e800 	.word	0xfe00e800

08005fa0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	461a      	mov	r2, r3
 8005fac:	460b      	mov	r3, r1
 8005fae:	817b      	strh	r3, [r7, #10]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	f040 80db 	bne.w	8006178 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_I2C_Master_Receive+0x30>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e0d4      	b.n	800617a <HAL_I2C_Master_Receive+0x1da>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fd8:	f7fc faa6 	bl	8002528 <HAL_GetTick>
 8005fdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	2319      	movs	r3, #25
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f8f1 	bl	80061d2 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e0bf      	b.n	800617a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2222      	movs	r2, #34	; 0x22
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2210      	movs	r2, #16
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	893a      	ldrh	r2, [r7, #8]
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	2bff      	cmp	r3, #255	; 0xff
 800602a:	d90e      	bls.n	800604a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	22ff      	movs	r2, #255	; 0xff
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006036:	b2da      	uxtb	r2, r3
 8006038:	8979      	ldrh	r1, [r7, #10]
 800603a:	4b52      	ldr	r3, [pc, #328]	; (8006184 <HAL_I2C_Master_Receive+0x1e4>)
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fae8 	bl	8006618 <I2C_TransferConfig>
 8006048:	e06d      	b.n	8006126 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006058:	b2da      	uxtb	r2, r3
 800605a:	8979      	ldrh	r1, [r7, #10]
 800605c:	4b49      	ldr	r3, [pc, #292]	; (8006184 <HAL_I2C_Master_Receive+0x1e4>)
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fad7 	bl	8006618 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800606a:	e05c      	b.n	8006126 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	6a39      	ldr	r1, [r7, #32]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f96b 	bl	800634c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e07c      	b.n	800617a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d034      	beq.n	8006126 <HAL_I2C_Master_Receive+0x186>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d130      	bne.n	8006126 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	2200      	movs	r2, #0
 80060cc:	2180      	movs	r1, #128	; 0x80
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f87f 	bl	80061d2 <I2C_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e04d      	b.n	800617a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2bff      	cmp	r3, #255	; 0xff
 80060e6:	d90e      	bls.n	8006106 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	22ff      	movs	r2, #255	; 0xff
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	8979      	ldrh	r1, [r7, #10]
 80060f6:	2300      	movs	r3, #0
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fa8a 	bl	8006618 <I2C_TransferConfig>
 8006104:	e00f      	b.n	8006126 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006114:	b2da      	uxtb	r2, r3
 8006116:	8979      	ldrh	r1, [r7, #10]
 8006118:	2300      	movs	r3, #0
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fa79 	bl	8006618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d19d      	bne.n	800606c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	6a39      	ldr	r1, [r7, #32]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f8cc 	bl	80062d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e01a      	b.n	800617a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2220      	movs	r2, #32
 800614a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <HAL_I2C_Master_Receive+0x1e8>)
 8006158:	400b      	ands	r3, r1
 800615a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	e000      	b.n	800617a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006178:	2302      	movs	r3, #2
  }
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	80002400 	.word	0x80002400
 8006188:	fe00e800 	.word	0xfe00e800

0800618c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d103      	bne.n	80061aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2200      	movs	r2, #0
 80061a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d007      	beq.n	80061c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	619a      	str	r2, [r3, #24]
  }
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr

080061d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	4613      	mov	r3, r2
 80061e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061e2:	e022      	b.n	800622a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ea:	d01e      	beq.n	800622a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ec:	f7fc f99c 	bl	8002528 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d302      	bcc.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d113      	bne.n	800622a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e00f      	b.n	800624a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699a      	ldr	r2, [r3, #24]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	429a      	cmp	r2, r3
 8006246:	d0cd      	beq.n	80061e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800625e:	e02c      	b.n	80062ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f8eb 	bl	8006440 <I2C_IsErrorOccurred>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e02a      	b.n	80062ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d01e      	beq.n	80062ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627c:	f7fc f954 	bl	8002528 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	429a      	cmp	r2, r3
 800628a:	d302      	bcc.n	8006292 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d113      	bne.n	80062ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e007      	b.n	80062ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d1cb      	bne.n	8006260 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062de:	e028      	b.n	8006332 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f8ab 	bl	8006440 <I2C_IsErrorOccurred>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e026      	b.n	8006342 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f4:	f7fc f918 	bl	8002528 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d302      	bcc.n	800630a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d113      	bne.n	8006332 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e007      	b.n	8006342 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b20      	cmp	r3, #32
 800633e:	d1cf      	bne.n	80062e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006358:	e064      	b.n	8006424 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f86e 	bl	8006440 <I2C_IsErrorOccurred>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e062      	b.n	8006434 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b20      	cmp	r3, #32
 800637a:	d138      	bne.n	80063ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b04      	cmp	r3, #4
 8006388:	d105      	bne.n	8006396 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	e04e      	b.n	8006434 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d107      	bne.n	80063b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2210      	movs	r2, #16
 80063aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2204      	movs	r2, #4
 80063b0:	645a      	str	r2, [r3, #68]	; 0x44
 80063b2:	e002      	b.n	80063ba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2220      	movs	r2, #32
 80063c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b1b      	ldr	r3, [pc, #108]	; (800643c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80063ce:	400b      	ands	r3, r1
 80063d0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e022      	b.n	8006434 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ee:	f7fc f89b 	bl	8002528 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10f      	bne.n	8006424 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e007      	b.n	8006434 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b04      	cmp	r3, #4
 8006430:	d193      	bne.n	800635a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	fe00e800 	.word	0xfe00e800

08006440 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	d075      	beq.n	8006558 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2210      	movs	r2, #16
 8006472:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006474:	e056      	b.n	8006524 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d052      	beq.n	8006524 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fc f853 	bl	8002528 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <I2C_IsErrorOccurred+0x54>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d147      	bne.n	8006524 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800649e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b6:	d12e      	bne.n	8006516 <I2C_IsErrorOccurred+0xd6>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064be:	d02a      	beq.n	8006516 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80064c0:	7cfb      	ldrb	r3, [r7, #19]
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d027      	beq.n	8006516 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064d4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064d6:	f7fc f827 	bl	8002528 <HAL_GetTick>
 80064da:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064dc:	e01b      	b.n	8006516 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064de:	f7fc f823 	bl	8002528 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b19      	cmp	r3, #25
 80064ea:	d914      	bls.n	8006516 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b20      	cmp	r3, #32
 8006522:	d1dc      	bne.n	80064de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b20      	cmp	r3, #32
 8006530:	d003      	beq.n	800653a <I2C_IsErrorOccurred+0xfa>
 8006532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006536:	2b00      	cmp	r3, #0
 8006538:	d09d      	beq.n	8006476 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800653a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2220      	movs	r2, #32
 8006548:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	f043 0304 	orr.w	r3, r3, #4
 8006550:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800657a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	f043 0308 	orr.w	r3, r3, #8
 8006592:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800659c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f043 0302 	orr.w	r3, r3, #2
 80065b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01c      	beq.n	8006608 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff fddc 	bl	800618c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <I2C_IsErrorOccurred+0x1d4>)
 80065e0:	400b      	ands	r3, r1
 80065e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800660c:	4618      	mov	r0, r3
 800660e:	3728      	adds	r7, #40	; 0x28
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	fe00e800 	.word	0xfe00e800

08006618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	817b      	strh	r3, [r7, #10]
 8006626:	4613      	mov	r3, r2
 8006628:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800662a:	897b      	ldrh	r3, [r7, #10]
 800662c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006630:	7a7b      	ldrb	r3, [r7, #9]
 8006632:	041b      	lsls	r3, r3, #16
 8006634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006638:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	4313      	orrs	r3, r2
 8006642:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006646:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	0d5b      	lsrs	r3, r3, #21
 8006652:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <I2C_TransferConfig+0x5c>)
 8006658:	430b      	orrs	r3, r1
 800665a:	43db      	mvns	r3, r3
 800665c:	ea02 0103 	and.w	r1, r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	03ff63ff 	.word	0x03ff63ff

08006678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b20      	cmp	r3, #32
 800668c:	d138      	bne.n	8006700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006698:	2302      	movs	r3, #2
 800669a:	e032      	b.n	8006702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	; 0x24
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6819      	ldr	r1, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b20      	cmp	r3, #32
 8006720:	d139      	bne.n	8006796 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800672c:	2302      	movs	r3, #2
 800672e:	e033      	b.n	8006798 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2224      	movs	r2, #36	; 0x24
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800675e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	e000      	b.n	8006798 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006796:	2302      	movs	r3, #2
  }
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067a8:	4b04      	ldr	r3, [pc, #16]	; (80067bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a03      	ldr	r2, [pc, #12]	; (80067bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80067ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b2:	6013      	str	r3, [r2, #0]
}
 80067b4:	bf00      	nop
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr
 80067bc:	58000400 	.word	0x58000400

080067c0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10c      	bne.n	80067ec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80067d2:	4b13      	ldr	r3, [pc, #76]	; (8006820 <HAL_PWR_EnterSLEEPMode+0x60>)
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067de:	d10d      	bne.n	80067fc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80067e0:	f000 f83c 	bl	800685c <HAL_PWREx_DisableLowPowerRunMode>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d008      	beq.n	80067fc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80067ea:	e015      	b.n	8006818 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <HAL_PWR_EnterSLEEPMode+0x60>)
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80067f8:	f000 f822 	bl	8006840 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <HAL_PWR_EnterSLEEPMode+0x64>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006802:	f023 0304 	bic.w	r3, r3, #4
 8006806:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800680e:	bf30      	wfi
 8006810:	e002      	b.n	8006818 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006812:	bf40      	sev
    __WFE();
 8006814:	bf20      	wfe
    __WFE();
 8006816:	bf20      	wfe
  }
}
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	58000400 	.word	0x58000400
 8006824:	e000ed00 	.word	0xe000ed00

08006828 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <HAL_PWREx_GetVoltageRange+0x14>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr
 800683c:	58000400 	.word	0x58000400

08006840 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a03      	ldr	r2, [pc, #12]	; (8006858 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800684a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800684e:	6013      	str	r3, [r2, #0]
}
 8006850:	bf00      	nop
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr
 8006858:	58000400 	.word	0x58000400

0800685c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006862:	4b16      	ldr	r3, [pc, #88]	; (80068bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a15      	ldr	r2, [pc, #84]	; (80068bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800686c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2232      	movs	r2, #50	; 0x32
 8006874:	fb02 f303 	mul.w	r3, r2, r3
 8006878:	4a12      	ldr	r2, [pc, #72]	; (80068c4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	0c9b      	lsrs	r3, r3, #18
 8006880:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006882:	e002      	b.n	800688a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3b01      	subs	r3, #1
 8006888:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d102      	bne.n	800689e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f2      	bne.n	8006884 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068aa:	d101      	bne.n	80068b0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e000      	b.n	80068b2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bc80      	pop	{r7}
 80068ba:	4770      	bx	lr
 80068bc:	58000400 	.word	0x58000400
 80068c0:	20000004 	.word	0x20000004
 80068c4:	431bde83 	.word	0x431bde83

080068c8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	4a0e      	ldr	r2, [pc, #56]	; (8006914 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80068dc:	f043 0302 	orr.w	r3, r3, #2
 80068e0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80068e2:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80068e8:	f043 0304 	orr.w	r3, r3, #4
 80068ec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80068f4:	bf30      	wfi
 80068f6:	e002      	b.n	80068fe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80068f8:	bf40      	sev
    __WFE();
 80068fa:	bf20      	wfe
    __WFE();
 80068fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	4a05      	ldr	r2, [pc, #20]	; (8006918 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006904:	f023 0304 	bic.w	r3, r3, #4
 8006908:	6113      	str	r3, [r2, #16]
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	58000400 	.word	0x58000400
 8006918:	e000ed00 	.word	0xe000ed00

0800691c <LL_PWR_IsEnabledBkUpAccess>:
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692c:	d101      	bne.n	8006932 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr
 800693c:	58000400 	.word	0x58000400

08006940 <LL_RCC_HSE_EnableTcxo>:
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800694e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006952:	6013      	str	r3, [r2, #0]
}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <LL_RCC_HSE_DisableTcxo>:
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800696e:	6013      	str	r3, [r2, #0]
}
 8006970:	bf00      	nop
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698a:	d101      	bne.n	8006990 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <LL_RCC_HSE_Enable>:
{
 800699a:	b480      	push	{r7}
 800699c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ac:	6013      	str	r3, [r2, #0]
}
 80069ae:	bf00      	nop
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <LL_RCC_HSE_Disable>:
{
 80069b6:	b480      	push	{r7}
 80069b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80069ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c8:	6013      	str	r3, [r2, #0]
}
 80069ca:	bf00      	nop
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <LL_RCC_HSE_IsReady>:
{
 80069d2:	b480      	push	{r7}
 80069d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80069d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e4:	d101      	bne.n	80069ea <LL_RCC_HSE_IsReady+0x18>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <LL_RCC_HSE_IsReady+0x1a>
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <LL_RCC_HSI_Enable>:
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80069f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a06:	6013      	str	r3, [r2, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <LL_RCC_HSI_Disable>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a22:	6013      	str	r3, [r2, #0]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <LL_RCC_HSI_IsReady>:
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3e:	d101      	bne.n	8006a44 <LL_RCC_HSI_IsReady+0x18>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <LL_RCC_HSI_IsReady+0x1a>
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	061b      	lsls	r3, r3, #24
 8006a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	604b      	str	r3, [r1, #4]
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <LL_RCC_LSE_IsReady>:
{
 8006a76:	b480      	push	{r7}
 8006a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d101      	bne.n	8006a8e <LL_RCC_LSE_IsReady+0x18>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <LL_RCC_LSE_IsReady+0x1a>
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr

08006a98 <LL_RCC_LSI_Enable>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ab0:	bf00      	nop
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr

08006ab8 <LL_RCC_LSI_Disable>:
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ad0:	bf00      	nop
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <LL_RCC_LSI_IsReady>:
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d101      	bne.n	8006af0 <LL_RCC_LSI_IsReady+0x18>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <LL_RCC_LSI_IsReady+0x1a>
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <LL_RCC_MSI_Enable>:
{
 8006afa:	b480      	push	{r7}
 8006afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <LL_RCC_MSI_Disable>:
{
 8006b16:	b480      	push	{r7}
 8006b18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	6013      	str	r3, [r2, #0]
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <LL_RCC_MSI_IsReady>:
{
 8006b32:	b480      	push	{r7}
 8006b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d101      	bne.n	8006b48 <LL_RCC_MSI_IsReady+0x16>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <LL_RCC_MSI_IsReady+0x18>
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr

08006b52 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006b52:	b480      	push	{r7}
 8006b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d101      	bne.n	8006b68 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_MSI_GetRange>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	021b      	lsls	r3, r3, #8
 8006bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	604b      	str	r3, [r1, #4]
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <LL_RCC_SetSysClkSource>:
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f023 0203 	bic.w	r2, r3, #3
 8006bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	608b      	str	r3, [r1, #8]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <LL_RCC_GetSysClkSource>:
{
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 030c 	and.w	r3, r3, #12
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <LL_RCC_SetAHBPrescaler>:
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	608b      	str	r3, [r1, #8]
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <LL_RCC_SetAHB3Prescaler>:
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006c3a:	f023 020f 	bic.w	r2, r3, #15
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	091b      	lsrs	r3, r3, #4
 8006c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr

08006c56 <LL_RCC_SetAPB1Prescaler>:
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr

08006c7c <LL_RCC_SetAPB2Prescaler>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	608b      	str	r3, [r1, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <LL_RCC_GetAHBPrescaler>:
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <LL_RCC_GetAHB3Prescaler>:
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <LL_RCC_GetAPB1Prescaler>:
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <LL_RCC_GetAPB2Prescaler>:
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d10:	6013      	str	r3, [r2, #0]
}
 8006d12:	bf00      	nop
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d2c:	6013      	str	r3, [r2, #0]
}
 8006d2e:	bf00      	nop
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006d36:	b480      	push	{r7}
 8006d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d48:	d101      	bne.n	8006d4e <LL_RCC_PLL_IsReady+0x18>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <LL_RCC_PLL_IsReady+0x1a>
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr

08006d86 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006d86:	b480      	push	{r7}
 8006d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0303 	and.w	r3, r3, #3
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006db2:	b480      	push	{r7}
 8006db4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc4:	d101      	bne.n	8006dca <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ddc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de8:	d101      	bne.n	8006dee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e0a:	d101      	bne.n	8006e10 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr

08006e1a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e2c:	d101      	bne.n	8006e32 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e38b      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e4e:	f7ff fece 	bl	8006bee <LL_RCC_GetSysClkSource>
 8006e52:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e54:	f7ff ffa2 	bl	8006d9c <LL_RCC_PLL_GetMainSource>
 8006e58:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 80c9 	beq.w	8006ffa <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_RCC_OscConfig+0x3e>
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	2b0c      	cmp	r3, #12
 8006e72:	d17b      	bne.n	8006f6c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d178      	bne.n	8006f6c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e7a:	f7ff fe5a 	bl	8006b32 <LL_RCC_MSI_IsReady>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_RCC_OscConfig+0x54>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e36a      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_RCC_OscConfig+0x72>
 8006ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eac:	e006      	b.n	8006ebc <HAL_RCC_OscConfig+0x80>
 8006eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eb6:	091b      	lsrs	r3, r3, #4
 8006eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d222      	bcs.n	8006f06 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fd51 	bl	800796c <RCC_SetFlashLatencyFromMSIRange>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e348      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ede:	f043 0308 	orr.w	r3, r3, #8
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff fe4e 	bl	8006ba0 <LL_RCC_MSI_SetCalibTrimming>
 8006f04:	e021      	b.n	8006f4a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f10:	f043 0308 	orr.w	r3, r3, #8
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff fe35 	bl	8006ba0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fd16 	bl	800796c <RCC_SetFlashLatencyFromMSIRange>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e30d      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f4a:	f000 fcd7 	bl	80078fc <HAL_RCC_GetHCLKFreq>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4aa1      	ldr	r2, [pc, #644]	; (80071d8 <HAL_RCC_OscConfig+0x39c>)
 8006f52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f54:	4ba1      	ldr	r3, [pc, #644]	; (80071dc <HAL_RCC_OscConfig+0x3a0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fb fadb 	bl	8002514 <HAL_InitTick>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d047      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006f68:	7cfb      	ldrb	r3, [r7, #19]
 8006f6a:	e2fc      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d02c      	beq.n	8006fce <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f74:	f7ff fdc1 	bl	8006afa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f78:	f7fb fad6 	bl	8002528 <HAL_GetTick>
 8006f7c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f80:	f7fb fad2 	bl	8002528 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e2e9      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006f92:	f7ff fdce 	bl	8006b32 <LL_RCC_MSI_IsReady>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f1      	beq.n	8006f80 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fa6:	f043 0308 	orr.w	r3, r3, #8
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fdea 	bl	8006ba0 <LL_RCC_MSI_SetCalibTrimming>
 8006fcc:	e015      	b.n	8006ffa <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006fce:	f7ff fda2 	bl	8006b16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fd2:	f7fb faa9 	bl	8002528 <HAL_GetTick>
 8006fd6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fda:	f7fb faa5 	bl	8002528 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e2bc      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006fec:	f7ff fda1 	bl	8006b32 <LL_RCC_MSI_IsReady>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f1      	bne.n	8006fda <HAL_RCC_OscConfig+0x19e>
 8006ff6:	e000      	b.n	8006ffa <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ff8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d05f      	beq.n	80070c6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d005      	beq.n	8007018 <HAL_RCC_OscConfig+0x1dc>
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2b0c      	cmp	r3, #12
 8007010:	d10d      	bne.n	800702e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d10a      	bne.n	800702e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007018:	f7ff fcdb 	bl	80069d2 <LL_RCC_HSE_IsReady>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d050      	beq.n	80070c4 <HAL_RCC_OscConfig+0x288>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d14c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e29b      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007040:	4313      	orrs	r3, r2
 8007042:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704c:	d102      	bne.n	8007054 <HAL_RCC_OscConfig+0x218>
 800704e:	f7ff fca4 	bl	800699a <LL_RCC_HSE_Enable>
 8007052:	e00d      	b.n	8007070 <HAL_RCC_OscConfig+0x234>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800705c:	d104      	bne.n	8007068 <HAL_RCC_OscConfig+0x22c>
 800705e:	f7ff fc6f 	bl	8006940 <LL_RCC_HSE_EnableTcxo>
 8007062:	f7ff fc9a 	bl	800699a <LL_RCC_HSE_Enable>
 8007066:	e003      	b.n	8007070 <HAL_RCC_OscConfig+0x234>
 8007068:	f7ff fca5 	bl	80069b6 <LL_RCC_HSE_Disable>
 800706c:	f7ff fc76 	bl	800695c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d012      	beq.n	800709e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007078:	f7fb fa56 	bl	8002528 <HAL_GetTick>
 800707c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007080:	f7fb fa52 	bl	8002528 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b64      	cmp	r3, #100	; 0x64
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e269      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007092:	f7ff fc9e 	bl	80069d2 <LL_RCC_HSE_IsReady>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f1      	beq.n	8007080 <HAL_RCC_OscConfig+0x244>
 800709c:	e013      	b.n	80070c6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709e:	f7fb fa43 	bl	8002528 <HAL_GetTick>
 80070a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80070a4:	e008      	b.n	80070b8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a6:	f7fb fa3f 	bl	8002528 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b64      	cmp	r3, #100	; 0x64
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e256      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80070b8:	f7ff fc8b 	bl	80069d2 <LL_RCC_HSE_IsReady>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f1      	bne.n	80070a6 <HAL_RCC_OscConfig+0x26a>
 80070c2:	e000      	b.n	80070c6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d04b      	beq.n	800716a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_OscConfig+0x2a8>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	2b0c      	cmp	r3, #12
 80070dc:	d113      	bne.n	8007106 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d110      	bne.n	8007106 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e4:	f7ff fca2 	bl	8006a2c <LL_RCC_HSI_IsReady>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_RCC_OscConfig+0x2be>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e235      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fca5 	bl	8006a4e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007104:	e031      	b.n	800716a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d019      	beq.n	8007142 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800710e:	f7ff fc71 	bl	80069f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007112:	f7fb fa09 	bl	8002528 <HAL_GetTick>
 8007116:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800711a:	f7fb fa05 	bl	8002528 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e21c      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800712c:	f7ff fc7e 	bl	8006a2c <LL_RCC_HSI_IsReady>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f1      	beq.n	800711a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fc87 	bl	8006a4e <LL_RCC_HSI_SetCalibTrimming>
 8007140:	e013      	b.n	800716a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007142:	f7ff fc65 	bl	8006a10 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007146:	f7fb f9ef 	bl	8002528 <HAL_GetTick>
 800714a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800714e:	f7fb f9eb 	bl	8002528 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e202      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007160:	f7ff fc64 	bl	8006a2c <LL_RCC_HSI_IsReady>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f1      	bne.n	800714e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d06f      	beq.n	8007256 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d057      	beq.n	800722e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800717e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007186:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0310 	and.w	r3, r3, #16
 8007192:	429a      	cmp	r2, r3
 8007194:	d036      	beq.n	8007204 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d006      	beq.n	80071ae <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e1db      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d018      	beq.n	80071ea <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80071b8:	f7ff fc7e 	bl	8006ab8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071bc:	f7fb f9b4 	bl	8002528 <HAL_GetTick>
 80071c0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80071c2:	e00d      	b.n	80071e0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c4:	f7fb f9b0 	bl	8002528 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b11      	cmp	r3, #17
 80071d0:	d906      	bls.n	80071e0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e1c7      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
 80071d6:	bf00      	nop
 80071d8:	20000004 	.word	0x20000004
 80071dc:	2000000c 	.word	0x2000000c
          while (LL_RCC_LSI_IsReady() != 0U)
 80071e0:	f7ff fc7a 	bl	8006ad8 <LL_RCC_LSI_IsReady>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1ec      	bne.n	80071c4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80071ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071f2:	f023 0210 	bic.w	r2, r3, #16
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007204:	f7ff fc48 	bl	8006a98 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fb f98e 	bl	8002528 <HAL_GetTick>
 800720c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007210:	f7fb f98a 	bl	8002528 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b11      	cmp	r3, #17
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1a1      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007222:	f7ff fc59 	bl	8006ad8 <LL_RCC_LSI_IsReady>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0f1      	beq.n	8007210 <HAL_RCC_OscConfig+0x3d4>
 800722c:	e013      	b.n	8007256 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800722e:	f7ff fc43 	bl	8006ab8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007232:	f7fb f979 	bl	8002528 <HAL_GetTick>
 8007236:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800723a:	f7fb f975 	bl	8002528 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b11      	cmp	r3, #17
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e18c      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800724c:	f7ff fc44 	bl	8006ad8 <LL_RCC_LSI_IsReady>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f1      	bne.n	800723a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80d8 	beq.w	8007414 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007264:	f7ff fb5a 	bl	800691c <LL_PWR_IsEnabledBkUpAccess>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d113      	bne.n	8007296 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800726e:	f7ff fa99 	bl	80067a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007272:	f7fb f959 	bl	8002528 <HAL_GetTick>
 8007276:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727a:	f7fb f955 	bl	8002528 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e16c      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800728c:	f7ff fb46 	bl	800691c <LL_PWR_IsEnabledBkUpAccess>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f1      	beq.n	800727a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d07b      	beq.n	8007396 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	2b85      	cmp	r3, #133	; 0x85
 80072a4:	d003      	beq.n	80072ae <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d109      	bne.n	80072c2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ba:	f043 0304 	orr.w	r3, r3, #4
 80072be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c2:	f7fb f931 	bl	8002528 <HAL_GetTick>
 80072c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80072c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80072dc:	e00a      	b.n	80072f4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072de:	f7fb f923 	bl	8002528 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e138      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80072f4:	f7ff fbbf 	bl	8006a76 <LL_RCC_LSE_IsReady>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0ef      	beq.n	80072de <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b81      	cmp	r3, #129	; 0x81
 8007304:	d003      	beq.n	800730e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b85      	cmp	r3, #133	; 0x85
 800730c:	d121      	bne.n	8007352 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730e:	f7fb f90b 	bl	8002528 <HAL_GetTick>
 8007312:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007328:	e00a      	b.n	8007340 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732a:	f7fb f8fd 	bl	8002528 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	f241 3288 	movw	r2, #5000	; 0x1388
 8007338:	4293      	cmp	r3, r2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e112      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0ec      	beq.n	800732a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007350:	e060      	b.n	8007414 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007352:	f7fb f8e9 	bl	8002528 <HAL_GetTick>
 8007356:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800736c:	e00a      	b.n	8007384 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736e:	f7fb f8db 	bl	8002528 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	f241 3288 	movw	r2, #5000	; 0x1388
 800737c:	4293      	cmp	r3, r2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e0f0      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ec      	bne.n	800736e <HAL_RCC_OscConfig+0x532>
 8007394:	e03e      	b.n	8007414 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007396:	f7fb f8c7 	bl	8002528 <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800739c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073b0:	e00a      	b.n	80073c8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073b2:	f7fb f8b9 	bl	8002528 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e0ce      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ec      	bne.n	80073b2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d8:	f7fb f8a6 	bl	8002528 <HAL_GetTick>
 80073dc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80073f2:	e00a      	b.n	800740a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f4:	f7fb f898 	bl	8002528 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007402:	4293      	cmp	r3, r2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e0ad      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800740a:	f7ff fb34 	bl	8006a76 <LL_RCC_LSE_IsReady>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1ef      	bne.n	80073f4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80a3 	beq.w	8007564 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2b0c      	cmp	r3, #12
 8007422:	d076      	beq.n	8007512 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	2b02      	cmp	r3, #2
 800742a:	d14b      	bne.n	80074c4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800742c:	f7ff fc75 	bl	8006d1a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fb f87a 	bl	8002528 <HAL_GetTick>
 8007434:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007438:	f7fb f876 	bl	8002528 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b0a      	cmp	r3, #10
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e08d      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800744a:	f7ff fc74 	bl	8006d36 <LL_RCC_PLL_IsReady>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1f1      	bne.n	8007438 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	4b45      	ldr	r3, [pc, #276]	; (8007570 <HAL_RCC_OscConfig+0x734>)
 800745c:	4013      	ands	r3, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007466:	4311      	orrs	r1, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800746c:	0212      	lsls	r2, r2, #8
 800746e:	4311      	orrs	r1, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007474:	4311      	orrs	r1, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800747a:	4311      	orrs	r1, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007480:	430a      	orrs	r2, r1
 8007482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007486:	4313      	orrs	r3, r2
 8007488:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800748a:	f7ff fc38 	bl	8006cfe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800748e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800749c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749e:	f7fb f843 	bl	8002528 <HAL_GetTick>
 80074a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a6:	f7fb f83f 	bl	8002528 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b0a      	cmp	r3, #10
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e056      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80074b8:	f7ff fc3d 	bl	8006d36 <LL_RCC_PLL_IsReady>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0f1      	beq.n	80074a6 <HAL_RCC_OscConfig+0x66a>
 80074c2:	e04f      	b.n	8007564 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c4:	f7ff fc29 	bl	8006d1a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80074c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80074d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074e2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80074e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ea:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ec:	f7fb f81c 	bl	8002528 <HAL_GetTick>
 80074f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f4:	f7fb f818 	bl	8002528 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b0a      	cmp	r3, #10
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e02f      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007506:	f7ff fc16 	bl	8006d36 <LL_RCC_PLL_IsReady>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1f1      	bne.n	80074f4 <HAL_RCC_OscConfig+0x6b8>
 8007510:	e028      	b.n	8007564 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e023      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800751e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f003 0203 	and.w	r2, r3, #3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	429a      	cmp	r2, r3
 8007532:	d115      	bne.n	8007560 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	429a      	cmp	r2, r3
 8007540:	d10e      	bne.n	8007560 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	429a      	cmp	r2, r3
 8007550:	d106      	bne.n	8007560 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	429a      	cmp	r2, r3
 800755e:	d001      	beq.n	8007564 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	11c1808c 	.word	0x11c1808c

08007574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e10f      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007588:	4b89      	ldr	r3, [pc, #548]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d91b      	bls.n	80075ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007596:	4b86      	ldr	r3, [pc, #536]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f023 0207 	bic.w	r2, r3, #7
 800759e:	4984      	ldr	r1, [pc, #528]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a6:	f7fa ffbf 	bl	8002528 <HAL_GetTick>
 80075aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80075ae:	f7fa ffbb 	bl	8002528 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e0f3      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c0:	4b7b      	ldr	r3, [pc, #492]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d1ef      	bne.n	80075ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d016      	beq.n	8007608 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fb10 	bl	8006c04 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075e4:	f7fa ffa0 	bl	8002528 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075ec:	f7fa ff9c 	bl	8002528 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e0d4      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075fe:	f7ff fbd8 	bl	8006db2 <LL_RCC_IsActiveFlag_HPRE>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f1      	beq.n	80075ec <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d016      	beq.n	8007642 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fb06 	bl	8006c2a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800761e:	f7fa ff83 	bl	8002528 <HAL_GetTick>
 8007622:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007624:	e008      	b.n	8007638 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007626:	f7fa ff7f 	bl	8002528 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e0b7      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007638:	f7ff fbcc 	bl	8006dd4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f1      	beq.n	8007626 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff faff 	bl	8006c56 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007658:	f7fa ff66 	bl	8002528 <HAL_GetTick>
 800765c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800765e:	e008      	b.n	8007672 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007660:	f7fa ff62 	bl	8002528 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e09a      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007672:	f7ff fbc1 	bl	8006df8 <LL_RCC_IsActiveFlag_PPRE1>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f1      	beq.n	8007660 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d017      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff faf4 	bl	8006c7c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007694:	f7fa ff48 	bl	8002528 <HAL_GetTick>
 8007698:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800769a:	e008      	b.n	80076ae <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800769c:	f7fa ff44 	bl	8002528 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e07c      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80076ae:	f7ff fbb4 	bl	8006e1a <LL_RCC_IsActiveFlag_PPRE2>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f1      	beq.n	800769c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d043      	beq.n	800774c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d106      	bne.n	80076da <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80076cc:	f7ff f981 	bl	80069d2 <LL_RCC_HSE_IsReady>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d11e      	bne.n	8007714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e066      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d106      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80076e2:	f7ff fb28 	bl	8006d36 <LL_RCC_PLL_IsReady>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d113      	bne.n	8007714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e05b      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80076f8:	f7ff fa1b 	bl	8006b32 <LL_RCC_MSI_IsReady>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d108      	bne.n	8007714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e050      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007706:	f7ff f991 	bl	8006a2c <LL_RCC_HSI_IsReady>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e049      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fa55 	bl	8006bc8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800771e:	f7fa ff03 	bl	8002528 <HAL_GetTick>
 8007722:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007724:	e00a      	b.n	800773c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007726:	f7fa feff 	bl	8002528 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	f241 3288 	movw	r2, #5000	; 0x1388
 8007734:	4293      	cmp	r3, r2
 8007736:	d901      	bls.n	800773c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e035      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773c:	f7ff fa57 	bl	8006bee <LL_RCC_GetSysClkSource>
 8007740:	4602      	mov	r2, r0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	429a      	cmp	r2, r3
 800774a:	d1ec      	bne.n	8007726 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800774c:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d21b      	bcs.n	8007792 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 0207 	bic.w	r2, r3, #7
 8007762:	4913      	ldr	r1, [pc, #76]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	4313      	orrs	r3, r2
 8007768:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776a:	f7fa fedd 	bl	8002528 <HAL_GetTick>
 800776e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007770:	e008      	b.n	8007784 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007772:	f7fa fed9 	bl	8002528 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e011      	b.n	80077a8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007784:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <HAL_RCC_ClockConfig+0x23c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d1ef      	bne.n	8007772 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007792:	f000 f8b3 	bl	80078fc <HAL_RCC_GetHCLKFreq>
 8007796:	4603      	mov	r3, r0
 8007798:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <HAL_RCC_ClockConfig+0x240>)
 800779a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <HAL_RCC_ClockConfig+0x244>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fa feb7 	bl	8002514 <HAL_InitTick>
 80077a6:	4603      	mov	r3, r0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	58004000 	.word	0x58004000
 80077b4:	20000004 	.word	0x20000004
 80077b8:	2000000c 	.word	0x2000000c

080077bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ca:	f7ff fa10 	bl	8006bee <LL_RCC_GetSysClkSource>
 80077ce:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d0:	f7ff fae4 	bl	8006d9c <LL_RCC_PLL_GetMainSource>
 80077d4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_RCC_GetSysClockFreq+0x2c>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b0c      	cmp	r3, #12
 80077e0:	d139      	bne.n	8007856 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d136      	bne.n	8007856 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80077e8:	f7ff f9b3 	bl	8006b52 <LL_RCC_MSI_IsEnabledRangeSelect>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d115      	bne.n	800781e <HAL_RCC_GetSysClockFreq+0x62>
 80077f2:	f7ff f9ae 	bl	8006b52 <LL_RCC_MSI_IsEnabledRangeSelect>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d106      	bne.n	800780a <HAL_RCC_GetSysClockFreq+0x4e>
 80077fc:	f7ff f9b9 	bl	8006b72 <LL_RCC_MSI_GetRange>
 8007800:	4603      	mov	r3, r0
 8007802:	0a1b      	lsrs	r3, r3, #8
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	e005      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x5a>
 800780a:	f7ff f9bd 	bl	8006b88 <LL_RCC_MSI_GetRangeAfterStandby>
 800780e:	4603      	mov	r3, r0
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	4a36      	ldr	r2, [pc, #216]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8007818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800781c:	e014      	b.n	8007848 <HAL_RCC_GetSysClockFreq+0x8c>
 800781e:	f7ff f998 	bl	8006b52 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007822:	4603      	mov	r3, r0
 8007824:	2b01      	cmp	r3, #1
 8007826:	d106      	bne.n	8007836 <HAL_RCC_GetSysClockFreq+0x7a>
 8007828:	f7ff f9a3 	bl	8006b72 <LL_RCC_MSI_GetRange>
 800782c:	4603      	mov	r3, r0
 800782e:	091b      	lsrs	r3, r3, #4
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	e005      	b.n	8007842 <HAL_RCC_GetSysClockFreq+0x86>
 8007836:	f7ff f9a7 	bl	8006b88 <LL_RCC_MSI_GetRangeAfterStandby>
 800783a:	4603      	mov	r3, r0
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	4a2b      	ldr	r2, [pc, #172]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8007844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007848:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d115      	bne.n	800787c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007854:	e012      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b04      	cmp	r3, #4
 800785a:	d102      	bne.n	8007862 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800785c:	4b25      	ldr	r3, [pc, #148]	; (80078f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	e00c      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d109      	bne.n	800787c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007868:	f7ff f886 	bl	8006978 <LL_RCC_HSE_IsEnabledDiv2>
 800786c:	4603      	mov	r3, r0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d102      	bne.n	8007878 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007872:	4b20      	ldr	r3, [pc, #128]	; (80078f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	e001      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007878:	4b1f      	ldr	r3, [pc, #124]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800787a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800787c:	f7ff f9b7 	bl	8006bee <LL_RCC_GetSysClkSource>
 8007880:	4603      	mov	r3, r0
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d12f      	bne.n	80078e6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007886:	f7ff fa89 	bl	8006d9c <LL_RCC_PLL_GetMainSource>
 800788a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d003      	beq.n	800789a <HAL_RCC_GetSysClockFreq+0xde>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b03      	cmp	r3, #3
 8007896:	d003      	beq.n	80078a0 <HAL_RCC_GetSysClockFreq+0xe4>
 8007898:	e00d      	b.n	80078b6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800789a:	4b16      	ldr	r3, [pc, #88]	; (80078f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800789c:	60fb      	str	r3, [r7, #12]
        break;
 800789e:	e00d      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80078a0:	f7ff f86a 	bl	8006978 <LL_RCC_HSE_IsEnabledDiv2>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d102      	bne.n	80078b0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80078ac:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80078ae:	e005      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80078b0:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80078b2:	60fb      	str	r3, [r7, #12]
        break;
 80078b4:	e002      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	60fb      	str	r3, [r7, #12]
        break;
 80078ba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80078bc:	f7ff fa4c 	bl	8006d58 <LL_RCC_PLL_GetN>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	fb03 f402 	mul.w	r4, r3, r2
 80078c8:	f7ff fa5d 	bl	8006d86 <LL_RCC_PLL_GetDivider>
 80078cc:	4603      	mov	r3, r0
 80078ce:	091b      	lsrs	r3, r3, #4
 80078d0:	3301      	adds	r3, #1
 80078d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80078d6:	f7ff fa4b 	bl	8006d70 <LL_RCC_PLL_GetR>
 80078da:	4603      	mov	r3, r0
 80078dc:	0f5b      	lsrs	r3, r3, #29
 80078de:	3301      	adds	r3, #1
 80078e0:	fbb4 f3f3 	udiv	r3, r4, r3
 80078e4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80078e6:	697b      	ldr	r3, [r7, #20]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd90      	pop	{r4, r7, pc}
 80078f0:	0801daa4 	.word	0x0801daa4
 80078f4:	00f42400 	.word	0x00f42400
 80078f8:	01e84800 	.word	0x01e84800

080078fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078fc:	b598      	push	{r3, r4, r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007900:	f7ff ff5c 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 8007904:	4604      	mov	r4, r0
 8007906:	f7ff f9cc 	bl	8006ca2 <LL_RCC_GetAHBPrescaler>
 800790a:	4603      	mov	r3, r0
 800790c:	091b      	lsrs	r3, r3, #4
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	4a03      	ldr	r2, [pc, #12]	; (8007920 <HAL_RCC_GetHCLKFreq+0x24>)
 8007914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007918:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd98      	pop	{r3, r4, r7, pc}
 8007920:	0801da44 	.word	0x0801da44

08007924 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007924:	b598      	push	{r3, r4, r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007928:	f7ff ffe8 	bl	80078fc <HAL_RCC_GetHCLKFreq>
 800792c:	4604      	mov	r4, r0
 800792e:	f7ff f9d0 	bl	8006cd2 <LL_RCC_GetAPB1Prescaler>
 8007932:	4603      	mov	r3, r0
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	4a03      	ldr	r2, [pc, #12]	; (8007944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800793c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007940:	4618      	mov	r0, r3
 8007942:	bd98      	pop	{r3, r4, r7, pc}
 8007944:	0801da84 	.word	0x0801da84

08007948 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007948:	b598      	push	{r3, r4, r7, lr}
 800794a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800794c:	f7ff ffd6 	bl	80078fc <HAL_RCC_GetHCLKFreq>
 8007950:	4604      	mov	r4, r0
 8007952:	f7ff f9c9 	bl	8006ce8 <LL_RCC_GetAPB2Prescaler>
 8007956:	4603      	mov	r3, r0
 8007958:	0adb      	lsrs	r3, r3, #11
 800795a:	4a03      	ldr	r2, [pc, #12]	; (8007968 <HAL_RCC_GetPCLK2Freq+0x20>)
 800795c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007960:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd98      	pop	{r3, r4, r7, pc}
 8007968:	0801da84 	.word	0x0801da84

0800796c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	091b      	lsrs	r3, r3, #4
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	4a10      	ldr	r2, [pc, #64]	; (80079c0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007982:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007984:	f7ff f998 	bl	8006cb8 <LL_RCC_GetAHB3Prescaler>
 8007988:	4603      	mov	r3, r0
 800798a:	091b      	lsrs	r3, r3, #4
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	4a0c      	ldr	r2, [pc, #48]	; (80079c4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	fbb2 f3f3 	udiv	r3, r2, r3
 800799c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	0c9c      	lsrs	r4, r3, #18
 80079a8:	f7fe ff3e 	bl	8006828 <HAL_PWREx_GetVoltageRange>
 80079ac:	4603      	mov	r3, r0
 80079ae:	4619      	mov	r1, r3
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 f80b 	bl	80079cc <RCC_SetFlashLatency>
 80079b6:	4603      	mov	r3, r0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd90      	pop	{r4, r7, pc}
 80079c0:	0801daa4 	.word	0x0801daa4
 80079c4:	0801da44 	.word	0x0801da44
 80079c8:	431bde83 	.word	0x431bde83

080079cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08e      	sub	sp, #56	; 0x38
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80079d6:	4a3a      	ldr	r2, [pc, #232]	; (8007ac0 <RCC_SetFlashLatency+0xf4>)
 80079d8:	f107 0320 	add.w	r3, r7, #32
 80079dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079e0:	6018      	str	r0, [r3, #0]
 80079e2:	3304      	adds	r3, #4
 80079e4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80079e6:	4a37      	ldr	r2, [pc, #220]	; (8007ac4 <RCC_SetFlashLatency+0xf8>)
 80079e8:	f107 0318 	add.w	r3, r7, #24
 80079ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079f0:	6018      	str	r0, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80079f6:	4a34      	ldr	r2, [pc, #208]	; (8007ac8 <RCC_SetFlashLatency+0xfc>)
 80079f8:	f107 030c 	add.w	r3, r7, #12
 80079fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80079fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0c:	d11b      	bne.n	8007a46 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a0e:	2300      	movs	r3, #0
 8007a10:	633b      	str	r3, [r7, #48]	; 0x30
 8007a12:	e014      	b.n	8007a3e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	3338      	adds	r3, #56	; 0x38
 8007a1a:	443b      	add	r3, r7
 8007a1c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d807      	bhi.n	8007a38 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	3338      	adds	r3, #56	; 0x38
 8007a2e:	443b      	add	r3, r7
 8007a30:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a36:	e021      	b.n	8007a7c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d9e7      	bls.n	8007a14 <RCC_SetFlashLatency+0x48>
 8007a44:	e01a      	b.n	8007a7c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a46:	2300      	movs	r3, #0
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4a:	e014      	b.n	8007a76 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	3338      	adds	r3, #56	; 0x38
 8007a52:	443b      	add	r3, r7
 8007a54:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d807      	bhi.n	8007a70 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	3338      	adds	r3, #56	; 0x38
 8007a66:	443b      	add	r3, r7
 8007a68:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a6e:	e005      	b.n	8007a7c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	3301      	adds	r3, #1
 8007a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d9e7      	bls.n	8007a4c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a7c:	4b13      	ldr	r3, [pc, #76]	; (8007acc <RCC_SetFlashLatency+0x100>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f023 0207 	bic.w	r2, r3, #7
 8007a84:	4911      	ldr	r1, [pc, #68]	; (8007acc <RCC_SetFlashLatency+0x100>)
 8007a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a8c:	f7fa fd4c 	bl	8002528 <HAL_GetTick>
 8007a90:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a92:	e008      	b.n	8007aa6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a94:	f7fa fd48 	bl	8002528 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d901      	bls.n	8007aa6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e007      	b.n	8007ab6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <RCC_SetFlashLatency+0x100>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d1ef      	bne.n	8007a94 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3738      	adds	r7, #56	; 0x38
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	0801d544 	.word	0x0801d544
 8007ac4:	0801d54c 	.word	0x0801d54c
 8007ac8:	0801d554 	.word	0x0801d554
 8007acc:	58004000 	.word	0x58004000

08007ad0 <LL_RCC_LSE_IsReady>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d101      	bne.n	8007ae8 <LL_RCC_LSE_IsReady+0x18>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <LL_RCC_LSE_IsReady+0x1a>
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <LL_RCC_SetUSARTClockSource>:
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	0c1b      	lsrs	r3, r3, #16
 8007b06:	43db      	mvns	r3, r3
 8007b08:	401a      	ands	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <LL_RCC_SetI2SClockSource>:
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <LL_RCC_SetLPUARTClockSource>:
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <LL_RCC_SetI2CClockSource>:
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	091b      	lsrs	r3, r3, #4
 8007b8a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	401a      	ands	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <LL_RCC_SetLPTIMClockSource>:
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	041b      	lsls	r3, r3, #16
 8007bc4:	43db      	mvns	r3, r3
 8007bc6:	401a      	ands	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bc80      	pop	{r7}
 8007bde:	4770      	bx	lr

08007be0 <LL_RCC_SetRNGClockSource>:
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <LL_RCC_SetADCClockSource>:
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <LL_RCC_SetRTCClockSource>:
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr

08007c5e <LL_RCC_GetRTCClockSource>:
{
 8007c5e:	b480      	push	{r7}
 8007c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr

08007c76 <LL_RCC_ForceBackupDomainReset>:
{
 8007c76:	b480      	push	{r7}
 8007c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c8e:	bf00      	nop
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr

08007c96 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007cae:	bf00      	nop
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr
	...

08007cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007cc8:	2300      	movs	r3, #0
 8007cca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d058      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007cd8:	f7fe fd64 	bl	80067a4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cdc:	f7fa fc24 	bl	8002528 <HAL_GetTick>
 8007ce0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007ce2:	e009      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce4:	f7fa fc20 	bl	8002528 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d902      	bls.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	74fb      	strb	r3, [r7, #19]
        break;
 8007cf6:	e006      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007cf8:	4b7b      	ldr	r3, [pc, #492]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d04:	d1ee      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007d06:	7cfb      	ldrb	r3, [r7, #19]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d13c      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007d0c:	f7ff ffa7 	bl	8007c5e <LL_RCC_GetRTCClockSource>
 8007d10:	4602      	mov	r2, r0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d00f      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d28:	f7ff ffa5 	bl	8007c76 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d2c:	f7ff ffb3 	bl	8007c96 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d014      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7fa fbf0 	bl	8002528 <HAL_GetTick>
 8007d48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d4a:	e00b      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d4c:	f7fa fbec 	bl	8002528 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d902      	bls.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	74fb      	strb	r3, [r7, #19]
            break;
 8007d62:	e004      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d64:	f7ff feb4 	bl	8007ad0 <LL_RCC_LSE_IsReady>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d1ee      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007d6e:	7cfb      	ldrb	r3, [r7, #19]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff ff5b 	bl	8007c34 <LL_RCC_SetRTCClockSource>
 8007d7e:	e004      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d80:	7cfb      	ldrb	r3, [r7, #19]
 8007d82:	74bb      	strb	r3, [r7, #18]
 8007d84:	e001      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d86:	7cfb      	ldrb	r3, [r7, #19]
 8007d88:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d004      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fea9 	bl	8007af2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fe9e 	bl	8007af2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d004      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff fec0 	bl	8007b4c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff fee6 	bl	8007bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fedb 	bl	8007bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d004      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fed0 	bl	8007bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fea9 	bl	8007b76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fe9e 	bl	8007b76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fe93 	bl	8007b76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d011      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fe5e 	bl	8007b22 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e6e:	d107      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fea5 	bl	8007be0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d107      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d011      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fea3 	bl	8007c0a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ecc:	d107      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007edc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007ede:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	58000400 	.word	0x58000400

08007eec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d068      	beq.n	8007fd0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fa f810 	bl	8001f38 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f20:	4b2e      	ldr	r3, [pc, #184]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f22:	22ca      	movs	r2, #202	; 0xca
 8007f24:	625a      	str	r2, [r3, #36]	; 0x24
 8007f26:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f28:	2253      	movs	r2, #83	; 0x53
 8007f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa0f 	bl	8008350 <RTC_EnterInitMode>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d13f      	bne.n	8007fbc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007f3c:	4b27      	ldr	r3, [pc, #156]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f42:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f4a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007f4c:	4b23      	ldr	r3, [pc, #140]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6859      	ldr	r1, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	4319      	orrs	r1, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	491e      	ldr	r1, [pc, #120]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	491a      	ldr	r1, [pc, #104]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007f76:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	430b      	orrs	r3, r1
 8007f88:	4914      	ldr	r1, [pc, #80]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fa12 	bl	80083b8 <RTC_ExitInitMode>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10e      	bne.n	8007fbc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a19      	ldr	r1, [r3, #32]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	4319      	orrs	r1, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	4909      	ldr	r1, [pc, #36]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fbc:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <HAL_RTC_Init+0xf0>)
 8007fbe:	22ff      	movs	r2, #255	; 0xff
 8007fc0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	40002800 	.word	0x40002800

08007fe0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007fe0:	b590      	push	{r4, r7, lr}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_RTC_SetAlarm_IT+0x1e>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e0f3      	b.n	80081e6 <HAL_RTC_SetAlarm_IT+0x206>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800800e:	4b78      	ldr	r3, [pc, #480]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008016:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801e:	d06a      	beq.n	80080f6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d13a      	bne.n	800809c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008026:	4b72      	ldr	r3, [pc, #456]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f9f5 	bl	8008434 <RTC_ByteToBcd2>
 800804a:	4603      	mov	r3, r0
 800804c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f9ee 	bl	8008434 <RTC_ByteToBcd2>
 8008058:	4603      	mov	r3, r0
 800805a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800805c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	789b      	ldrb	r3, [r3, #2]
 8008062:	4618      	mov	r0, r3
 8008064:	f000 f9e6 	bl	8008434 <RTC_ByteToBcd2>
 8008068:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800806a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008074:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f9d8 	bl	8008434 <RTC_ByteToBcd2>
 8008084:	4603      	mov	r3, r0
 8008086:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008088:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008090:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e02c      	b.n	80080f6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80080a4:	d00d      	beq.n	80080c2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080ae:	d008      	beq.n	80080c2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80080b0:	4b4f      	ldr	r3, [pc, #316]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2200      	movs	r2, #0
 80080c0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080ce:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080d4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	78db      	ldrb	r3, [r3, #3]
 80080da:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080dc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080e4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080e6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080ec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080f6:	4b3e      	ldr	r3, [pc, #248]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80080f8:	22ca      	movs	r2, #202	; 0xca
 80080fa:	625a      	str	r2, [r3, #36]	; 0x24
 80080fc:	4b3c      	ldr	r3, [pc, #240]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80080fe:	2253      	movs	r2, #83	; 0x53
 8008100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800810a:	d12c      	bne.n	8008166 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800810c:	4b38      	ldr	r3, [pc, #224]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	4a37      	ldr	r2, [pc, #220]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008116:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008118:	4b35      	ldr	r3, [pc, #212]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800811a:	2201      	movs	r2, #1
 800811c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008124:	d107      	bne.n	8008136 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	4930      	ldr	r1, [pc, #192]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008130:	4313      	orrs	r3, r2
 8008132:	644b      	str	r3, [r1, #68]	; 0x44
 8008134:	e006      	b.n	8008144 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008136:	4a2e      	ldr	r2, [pc, #184]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800813c:	4a2c      	ldr	r2, [pc, #176]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008144:	4a2a      	ldr	r2, [pc, #168]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	f043 0201 	orr.w	r2, r3, #1
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	4a24      	ldr	r2, [pc, #144]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800815e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008162:	6193      	str	r3, [r2, #24]
 8008164:	e02b      	b.n	80081be <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008166:	4b22      	ldr	r3, [pc, #136]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	4a21      	ldr	r2, [pc, #132]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800816c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008170:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008172:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008174:	2202      	movs	r2, #2
 8008176:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817e:	d107      	bne.n	8008190 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	4919      	ldr	r1, [pc, #100]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800818a:	4313      	orrs	r3, r2
 800818c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800818e:	e006      	b.n	800819e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008190:	4a17      	ldr	r2, [pc, #92]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800819e:	4a14      	ldr	r2, [pc, #80]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081aa:	f043 0202 	orr.w	r2, r3, #2
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80081b2:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	4a0e      	ldr	r2, [pc, #56]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80081b8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80081bc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80081be:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80081c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081c4:	4a0b      	ldr	r2, [pc, #44]	; (80081f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80081c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ce:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80081d0:	22ff      	movs	r2, #255	; 0xff
 80081d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd90      	pop	{r4, r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40002800 	.word	0x40002800
 80081f4:	58000800 	.word	0x58000800

080081f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_RTC_DeactivateAlarm+0x18>
 800820c:	2302      	movs	r3, #2
 800820e:	e048      	b.n	80082a2 <HAL_RTC_DeactivateAlarm+0xaa>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008220:	4b22      	ldr	r3, [pc, #136]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008222:	22ca      	movs	r2, #202	; 0xca
 8008224:	625a      	str	r2, [r3, #36]	; 0x24
 8008226:	4b21      	ldr	r3, [pc, #132]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008228:	2253      	movs	r2, #83	; 0x53
 800822a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008232:	d115      	bne.n	8008260 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008234:	4b1d      	ldr	r3, [pc, #116]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	4a1c      	ldr	r2, [pc, #112]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800823a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800823e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008244:	4a19      	ldr	r2, [pc, #100]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800824a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008250:	f023 0201 	bic.w	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008258:	4b14      	ldr	r3, [pc, #80]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800825a:	2201      	movs	r2, #1
 800825c:	65da      	str	r2, [r3, #92]	; 0x5c
 800825e:	e014      	b.n	800828a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008260:	4b12      	ldr	r3, [pc, #72]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	4a11      	ldr	r2, [pc, #68]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008266:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800826a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800826c:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800826e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008270:	4a0e      	ldr	r2, [pc, #56]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008276:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	f023 0202 	bic.w	r2, r3, #2
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008284:	4b09      	ldr	r3, [pc, #36]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8008286:	2202      	movs	r2, #2
 8008288:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800828a:	4b08      	ldr	r3, [pc, #32]	; (80082ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800828c:	22ff      	movs	r2, #255	; 0xff
 800828e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr
 80082ac:	40002800 	.word	0x40002800

080082b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <HAL_RTC_AlarmIRQHandler+0x50>)
 80082ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	4013      	ands	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <HAL_RTC_AlarmIRQHandler+0x50>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7fa fc1a 	bl	8002b0e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <HAL_RTC_AlarmIRQHandler+0x50>)
 80082e6:	2202      	movs	r2, #2
 80082e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f94a 	bl	8008584 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40002800 	.word	0x40002800

08008304 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800830c:	4b0f      	ldr	r3, [pc, #60]	; (800834c <HAL_RTC_WaitForSynchro+0x48>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4a0e      	ldr	r2, [pc, #56]	; (800834c <HAL_RTC_WaitForSynchro+0x48>)
 8008312:	f023 0320 	bic.w	r3, r3, #32
 8008316:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008318:	f7fa f906 	bl	8002528 <HAL_GetTick>
 800831c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800831e:	e009      	b.n	8008334 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008320:	f7fa f902 	bl	8002528 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800832e:	d901      	bls.n	8008334 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e006      	b.n	8008342 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <HAL_RTC_WaitForSynchro+0x48>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0ef      	beq.n	8008320 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40002800 	.word	0x40002800

08008350 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800835c:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <RTC_EnterInitMode+0x64>)
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d120      	bne.n	80083aa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008368:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <RTC_EnterInitMode+0x64>)
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	4a11      	ldr	r2, [pc, #68]	; (80083b4 <RTC_EnterInitMode+0x64>)
 800836e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008372:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008374:	f7fa f8d8 	bl	8002528 <HAL_GetTick>
 8008378:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800837a:	e00d      	b.n	8008398 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800837c:	f7fa f8d4 	bl	8002528 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800838a:	d905      	bls.n	8008398 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2203      	movs	r2, #3
 8008394:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <RTC_EnterInitMode+0x64>)
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <RTC_EnterInitMode+0x5a>
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d1e8      	bne.n	800837c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40002800 	.word	0x40002800

080083b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80083c4:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <RTC_ExitInitMode+0x78>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	4a19      	ldr	r2, [pc, #100]	; (8008430 <RTC_ExitInitMode+0x78>)
 80083ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80083d0:	4b17      	ldr	r3, [pc, #92]	; (8008430 <RTC_ExitInitMode+0x78>)
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10c      	bne.n	80083f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff ff91 	bl	8008304 <HAL_RTC_WaitForSynchro>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01e      	beq.n	8008426 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2203      	movs	r2, #3
 80083ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	e017      	b.n	8008426 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80083f6:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <RTC_ExitInitMode+0x78>)
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	4a0d      	ldr	r2, [pc, #52]	; (8008430 <RTC_ExitInitMode+0x78>)
 80083fc:	f023 0320 	bic.w	r3, r3, #32
 8008400:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff ff7e 	bl	8008304 <HAL_RTC_WaitForSynchro>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2203      	movs	r2, #3
 8008412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <RTC_ExitInitMode+0x78>)
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	4a04      	ldr	r2, [pc, #16]	; (8008430 <RTC_ExitInitMode+0x78>)
 8008420:	f043 0320 	orr.w	r3, r3, #32
 8008424:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40002800 	.word	0x40002800

08008434 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008446:	e005      	b.n	8008454 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	3b0a      	subs	r3, #10
 8008452:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	2b09      	cmp	r3, #9
 8008458:	d8f6      	bhi.n	8008448 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	b2da      	uxtb	r2, r3
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	4313      	orrs	r3, r2
 8008466:	b2db      	uxtb	r3, r3
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr
	...

08008474 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008482:	2b01      	cmp	r3, #1
 8008484:	d101      	bne.n	800848a <HAL_RTCEx_EnableBypassShadow+0x16>
 8008486:	2302      	movs	r3, #2
 8008488:	e01f      	b.n	80084ca <HAL_RTCEx_EnableBypassShadow+0x56>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2202      	movs	r2, #2
 8008496:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800849a:	4b0e      	ldr	r3, [pc, #56]	; (80084d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800849c:	22ca      	movs	r2, #202	; 0xca
 800849e:	625a      	str	r2, [r3, #36]	; 0x24
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084a2:	2253      	movs	r2, #83	; 0x53
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084ac:	f043 0320 	orr.w	r3, r3, #32
 80084b0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr
 80084d4:	40002800 	.word	0x40002800

080084d8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <HAL_RTCEx_SetSSRU_IT+0x16>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e027      	b.n	800853e <HAL_RTCEx_SetSSRU_IT+0x66>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2202      	movs	r2, #2
 80084fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084fe:	4b12      	ldr	r3, [pc, #72]	; (8008548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008500:	22ca      	movs	r2, #202	; 0xca
 8008502:	625a      	str	r2, [r3, #36]	; 0x24
 8008504:	4b10      	ldr	r3, [pc, #64]	; (8008548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008506:	2253      	movs	r2, #83	; 0x53
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	4a0e      	ldr	r2, [pc, #56]	; (8008548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008514:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800851c:	4a0b      	ldr	r2, [pc, #44]	; (800854c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800851e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008522:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008526:	4b08      	ldr	r3, [pc, #32]	; (8008548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008528:	22ff      	movs	r2, #255	; 0xff
 800852a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr
 8008548:	40002800 	.word	0x40002800
 800854c:	58000800 	.word	0x58000800

08008550 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800855a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008564:	4b06      	ldr	r3, [pc, #24]	; (8008580 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008566:	2240      	movs	r2, #64	; 0x40
 8008568:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7fa fad9 	bl	8002b22 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40002800 	.word	0x40002800

08008584 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr
	...

08008598 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80085a4:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80085a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	4413      	add	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	601a      	str	r2, [r3, #0]
}
 80085b8:	bf00      	nop
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bc80      	pop	{r7}
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	4000b100 	.word	0x4000b100

080085c8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80085d2:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <HAL_RTCEx_BKUPRead+0x28>)
 80085d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	4000b100 	.word	0x4000b100

080085f4 <LL_PWR_SetRadioBusyTrigger>:
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80085fc:	4b06      	ldr	r3, [pc, #24]	; (8008618 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008604:	4904      	ldr	r1, [pc, #16]	; (8008618 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4313      	orrs	r3, r2
 800860a:	608b      	str	r3, [r1, #8]
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	58000400 	.word	0x58000400

0800861c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008626:	4a04      	ldr	r2, [pc, #16]	; (8008638 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800862c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008630:	bf00      	nop
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr
 8008638:	58000400 	.word	0x58000400

0800863c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	4a04      	ldr	r2, [pc, #16]	; (8008658 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800864c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008650:	bf00      	nop
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr
 8008658:	58000400 	.word	0x58000400

0800865c <LL_PWR_ClearFlag_RFBUSY>:
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008660:	4b03      	ldr	r3, [pc, #12]	; (8008670 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008666:	619a      	str	r2, [r3, #24]
}
 8008668:	bf00      	nop
 800866a:	46bd      	mov	sp, r7
 800866c:	bc80      	pop	{r7}
 800866e:	4770      	bx	lr
 8008670:	58000400 	.word	0x58000400

08008674 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008678:	4b06      	ldr	r3, [pc, #24]	; (8008694 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b02      	cmp	r3, #2
 8008682:	d101      	bne.n	8008688 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	58000400 	.word	0x58000400

08008698 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800869c:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d101      	bne.n	80086ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80086a8:	2301      	movs	r3, #1
 80086aa:	e000      	b.n	80086ae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	58000400 	.word	0x58000400

080086bc <LL_RCC_RF_DisableReset>:
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80086c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <LL_RCC_IsRFUnderReset>:
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80086e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f0:	d101      	bne.n	80086f6 <LL_RCC_IsRFUnderReset+0x1a>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <LL_RCC_IsRFUnderReset+0x1c>
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <LL_EXTI_EnableIT_32_63>:
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <LL_EXTI_EnableIT_32_63+0x24>)
 800870a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800870e:	4905      	ldr	r1, [pc, #20]	; (8008724 <LL_EXTI_EnableIT_32_63+0x24>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	58000800 	.word	0x58000800

08008728 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d103      	bne.n	800873e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	73fb      	strb	r3, [r7, #15]
    return status;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	e04b      	b.n	80087d6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	799b      	ldrb	r3, [r3, #6]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7f9 fd40 	bl	80021d8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800875e:	f7ff ffad 	bl	80086bc <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008762:	4b1f      	ldr	r3, [pc, #124]	; (80087e0 <HAL_SUBGHZ_Init+0xb8>)
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	4613      	mov	r3, r2
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	0cdb      	lsrs	r3, r3, #19
 8008770:	2264      	movs	r2, #100	; 0x64
 8008772:	fb02 f303 	mul.w	r3, r2, r3
 8008776:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d105      	bne.n	800878a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	609a      	str	r2, [r3, #8]
      break;
 8008788:	e007      	b.n	800879a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3b01      	subs	r3, #1
 800878e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008790:	f7ff ffa4 	bl	80086dc <LL_RCC_IsRFUnderReset>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1ee      	bne.n	8008778 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800879a:	f7ff ff3f 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800879e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80087a2:	f7ff ffad 	bl	8008700 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80087a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80087aa:	f7ff ff23 	bl	80085f4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80087ae:	f7ff ff55 	bl	800865c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 faad 	bl	8008d1c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	719a      	strb	r2, [r3, #6]

  return status;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000004 	.word	0x20000004

080087e4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	461a      	mov	r2, r3
 80087f0:	460b      	mov	r3, r1
 80087f2:	817b      	strh	r3, [r7, #10]
 80087f4:	4613      	mov	r3, r2
 80087f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	799b      	ldrb	r3, [r3, #6]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d14a      	bne.n	8008898 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	795b      	ldrb	r3, [r3, #5]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800880a:	2302      	movs	r3, #2
 800880c:	e045      	b.n	800889a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2202      	movs	r2, #2
 8008818:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fb4c 	bl	8008eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008820:	f7ff ff0c 	bl	800863c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008824:	210d      	movs	r1, #13
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fa98 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800882c:	897b      	ldrh	r3, [r7, #10]
 800882e:	0a1b      	lsrs	r3, r3, #8
 8008830:	b29b      	uxth	r3, r3
 8008832:	b2db      	uxtb	r3, r3
 8008834:	4619      	mov	r1, r3
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fa90 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800883c:	897b      	ldrh	r3, [r7, #10]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	4619      	mov	r1, r3
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fa8a 	bl	8008d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008848:	2300      	movs	r3, #0
 800884a:	82bb      	strh	r3, [r7, #20]
 800884c:	e00a      	b.n	8008864 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800884e:	8abb      	ldrh	r3, [r7, #20]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fa7f 	bl	8008d5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800885e:	8abb      	ldrh	r3, [r7, #20]
 8008860:	3301      	adds	r3, #1
 8008862:	82bb      	strh	r3, [r7, #20]
 8008864:	8aba      	ldrh	r2, [r7, #20]
 8008866:	893b      	ldrh	r3, [r7, #8]
 8008868:	429a      	cmp	r2, r3
 800886a:	d3f0      	bcc.n	800884e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800886c:	f7ff fed6 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fb45 	bl	8008f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	75fb      	strb	r3, [r7, #23]
 8008882:	e001      	b.n	8008888 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	715a      	strb	r2, [r3, #5]

    return status;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	e000      	b.n	800889a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008898:	2302      	movs	r3, #2
  }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b088      	sub	sp, #32
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	461a      	mov	r2, r3
 80088ae:	460b      	mov	r3, r1
 80088b0:	817b      	strh	r3, [r7, #10]
 80088b2:	4613      	mov	r3, r2
 80088b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	799b      	ldrb	r3, [r3, #6]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d14a      	bne.n	800895a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	795b      	ldrb	r3, [r3, #5]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d101      	bne.n	80088d0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e045      	b.n	800895c <HAL_SUBGHZ_ReadRegisters+0xba>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 faee 	bl	8008eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80088dc:	f7ff feae 	bl	800863c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80088e0:	211d      	movs	r1, #29
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fa3a 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80088e8:	897b      	ldrh	r3, [r7, #10]
 80088ea:	0a1b      	lsrs	r3, r3, #8
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	4619      	mov	r1, r3
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 fa32 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80088f8:	897b      	ldrh	r3, [r7, #10]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fa2c 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008904:	2100      	movs	r1, #0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fa28 	bl	8008d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800890c:	2300      	movs	r3, #0
 800890e:	82fb      	strh	r3, [r7, #22]
 8008910:	e009      	b.n	8008926 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008912:	69b9      	ldr	r1, [r7, #24]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 fa77 	bl	8008e08 <SUBGHZSPI_Receive>
      pData++;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	3301      	adds	r3, #1
 800891e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008920:	8afb      	ldrh	r3, [r7, #22]
 8008922:	3301      	adds	r3, #1
 8008924:	82fb      	strh	r3, [r7, #22]
 8008926:	8afa      	ldrh	r2, [r7, #22]
 8008928:	893b      	ldrh	r3, [r7, #8]
 800892a:	429a      	cmp	r2, r3
 800892c:	d3f1      	bcc.n	8008912 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800892e:	f7ff fe75 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fae4 	bl	8008f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	77fb      	strb	r3, [r7, #31]
 8008944:	e001      	b.n	800894a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	715a      	strb	r2, [r3, #5]

    return status;
 8008956:	7ffb      	ldrb	r3, [r7, #31]
 8008958:	e000      	b.n	800895c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800895a:	2302      	movs	r3, #2
  }
}
 800895c:	4618      	mov	r0, r3
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	461a      	mov	r2, r3
 8008970:	460b      	mov	r3, r1
 8008972:	72fb      	strb	r3, [r7, #11]
 8008974:	4613      	mov	r3, r2
 8008976:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	799b      	ldrb	r3, [r3, #6]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b01      	cmp	r3, #1
 8008980:	d14a      	bne.n	8008a18 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	795b      	ldrb	r3, [r3, #5]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800898a:	2302      	movs	r3, #2
 800898c:	e045      	b.n	8008a1a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 fa8f 	bl	8008eb8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	2b84      	cmp	r3, #132	; 0x84
 800899e:	d002      	beq.n	80089a6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	2b94      	cmp	r3, #148	; 0x94
 80089a4:	d103      	bne.n	80089ae <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	711a      	strb	r2, [r3, #4]
 80089ac:	e002      	b.n	80089b4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089b4:	f7ff fe42 	bl	800863c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	4619      	mov	r1, r3
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f9cd 	bl	8008d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089c2:	2300      	movs	r3, #0
 80089c4:	82bb      	strh	r3, [r7, #20]
 80089c6:	e00a      	b.n	80089de <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80089c8:	8abb      	ldrh	r3, [r7, #20]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	4619      	mov	r1, r3
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 f9c2 	bl	8008d5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80089d8:	8abb      	ldrh	r3, [r7, #20]
 80089da:	3301      	adds	r3, #1
 80089dc:	82bb      	strh	r3, [r7, #20]
 80089de:	8aba      	ldrh	r2, [r7, #20]
 80089e0:	893b      	ldrh	r3, [r7, #8]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d3f0      	bcc.n	80089c8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089e6:	f7ff fe19 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	2b84      	cmp	r3, #132	; 0x84
 80089ee:	d002      	beq.n	80089f6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fa85 	bl	8008f00 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	75fb      	strb	r3, [r7, #23]
 8008a02:	e001      	b.n	8008a08 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	715a      	strb	r2, [r3, #5]

    return status;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	e000      	b.n	8008a1a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008a18:	2302      	movs	r3, #2
  }
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b088      	sub	sp, #32
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	460b      	mov	r3, r1
 8008a30:	72fb      	strb	r3, [r7, #11]
 8008a32:	4613      	mov	r3, r2
 8008a34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	799b      	ldrb	r3, [r3, #6]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d13d      	bne.n	8008ac0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	795b      	ldrb	r3, [r3, #5]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e038      	b.n	8008ac2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fa2e 	bl	8008eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a5c:	f7ff fdee 	bl	800863c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	4619      	mov	r1, r3
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f979 	bl	8008d5c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f975 	bl	8008d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a72:	2300      	movs	r3, #0
 8008a74:	82fb      	strh	r3, [r7, #22]
 8008a76:	e009      	b.n	8008a8c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008a78:	69b9      	ldr	r1, [r7, #24]
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 f9c4 	bl	8008e08 <SUBGHZSPI_Receive>
      pData++;
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	3301      	adds	r3, #1
 8008a84:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008a86:	8afb      	ldrh	r3, [r7, #22]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	82fb      	strh	r3, [r7, #22]
 8008a8c:	8afa      	ldrh	r2, [r7, #22]
 8008a8e:	893b      	ldrh	r3, [r7, #8]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d3f1      	bcc.n	8008a78 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a94:	f7ff fdc2 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fa31 	bl	8008f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	77fb      	strb	r3, [r7, #31]
 8008aaa:	e001      	b.n	8008ab0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	715a      	strb	r2, [r3, #5]

    return status;
 8008abc:	7ffb      	ldrb	r3, [r7, #31]
 8008abe:	e000      	b.n	8008ac2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008ac0:	2302      	movs	r3, #2
  }
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	72fb      	strb	r3, [r7, #11]
 8008ada:	4613      	mov	r3, r2
 8008adc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	799b      	ldrb	r3, [r3, #6]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d13e      	bne.n	8008b66 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	795b      	ldrb	r3, [r3, #5]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e039      	b.n	8008b68 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 f9dc 	bl	8008eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b00:	f7ff fd9c 	bl	800863c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008b04:	210e      	movs	r1, #14
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f928 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008b0c:	7afb      	ldrb	r3, [r7, #11]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f923 	bl	8008d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b16:	2300      	movs	r3, #0
 8008b18:	82bb      	strh	r3, [r7, #20]
 8008b1a:	e00a      	b.n	8008b32 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008b1c:	8abb      	ldrh	r3, [r7, #20]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	4413      	add	r3, r2
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	4619      	mov	r1, r3
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f918 	bl	8008d5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008b2c:	8abb      	ldrh	r3, [r7, #20]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	82bb      	strh	r3, [r7, #20]
 8008b32:	8aba      	ldrh	r2, [r7, #20]
 8008b34:	893b      	ldrh	r3, [r7, #8]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d3f0      	bcc.n	8008b1c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b3a:	f7ff fd6f 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 f9de 	bl	8008f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e001      	b.n	8008b56 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	715a      	strb	r2, [r3, #5]

    return status;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	e000      	b.n	8008b68 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008b66:	2302      	movs	r3, #2
  }
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	72fb      	strb	r3, [r7, #11]
 8008b80:	4613      	mov	r3, r2
 8008b82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	799b      	ldrb	r3, [r3, #6]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d141      	bne.n	8008c16 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	795b      	ldrb	r3, [r3, #5]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e03c      	b.n	8008c18 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f987 	bl	8008eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008baa:	f7ff fd47 	bl	800863c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008bae:	211e      	movs	r1, #30
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f8d3 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f8ce 	bl	8008d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 f8ca 	bl	8008d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	82fb      	strh	r3, [r7, #22]
 8008bcc:	e009      	b.n	8008be2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008bce:	69b9      	ldr	r1, [r7, #24]
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f919 	bl	8008e08 <SUBGHZSPI_Receive>
      pData++;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008bdc:	8afb      	ldrh	r3, [r7, #22]
 8008bde:	3301      	adds	r3, #1
 8008be0:	82fb      	strh	r3, [r7, #22]
 8008be2:	8afa      	ldrh	r2, [r7, #22]
 8008be4:	893b      	ldrh	r3, [r7, #8]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3f1      	bcc.n	8008bce <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008bea:	f7ff fd17 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 f986 	bl	8008f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	77fb      	strb	r3, [r7, #31]
 8008c00:	e001      	b.n	8008c06 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	715a      	strb	r2, [r3, #5]

    return status;
 8008c12:	7ffb      	ldrb	r3, [r7, #31]
 8008c14:	e000      	b.n	8008c18 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008c16:	2302      	movs	r3, #2
  }
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3720      	adds	r7, #32
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008c28:	2300      	movs	r3, #0
 8008c2a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008c2c:	f107 020c 	add.w	r2, r7, #12
 8008c30:	2302      	movs	r3, #2
 8008c32:	2112      	movs	r1, #18
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff fef4 	bl	8008a22 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008c3a:	7b3b      	ldrb	r3, [r7, #12]
 8008c3c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008c3e:	89fb      	ldrh	r3, [r7, #14]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	b21a      	sxth	r2, r3
 8008c44:	7b7b      	ldrb	r3, [r7, #13]
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b21b      	sxth	r3, r3
 8008c4c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008c4e:	89fb      	ldrh	r3, [r7, #14]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f012 fe03 	bl	801b864 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008c5e:	89fb      	ldrh	r3, [r7, #14]
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f012 fe08 	bl	801b880 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	089b      	lsrs	r3, r3, #2
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f012 fe57 	bl	801b930 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008c82:	89fb      	ldrh	r3, [r7, #14]
 8008c84:	08db      	lsrs	r3, r3, #3
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f012 fe5c 	bl	801b94c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008c94:	89fb      	ldrh	r3, [r7, #14]
 8008c96:	091b      	lsrs	r3, r3, #4
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f012 fe61 	bl	801b968 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008ca6:	89fb      	ldrh	r3, [r7, #14]
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f012 fe2e 	bl	801b914 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008cb8:	89fb      	ldrh	r3, [r7, #14]
 8008cba:	099b      	lsrs	r3, r3, #6
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f012 fde9 	bl	801b89c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008cca:	89fb      	ldrh	r3, [r7, #14]
 8008ccc:	09db      	lsrs	r3, r3, #7
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00e      	beq.n	8008cf4 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008cd6:	89fb      	ldrh	r3, [r7, #14]
 8008cd8:	0a1b      	lsrs	r3, r3, #8
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f012 fde7 	bl	801b8b8 <HAL_SUBGHZ_CADStatusCallback>
 8008cea:	e003      	b.n	8008cf4 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008cec:	2100      	movs	r1, #0
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f012 fde2 	bl	801b8b8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008cf4:	89fb      	ldrh	r3, [r7, #14]
 8008cf6:	0a5b      	lsrs	r3, r3, #9
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f012 fdf7 	bl	801b8f4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8008d06:	f107 020c 	add.w	r2, r7, #12
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	2102      	movs	r1, #2
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fe28 	bl	8008964 <HAL_SUBGHZ_ExecSetCmd>
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <SUBGHZSPI_Init+0x3c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <SUBGHZSPI_Init+0x3c>)
 8008d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008d30:	4a09      	ldr	r2, [pc, #36]	; (8008d58 <SUBGHZSPI_Init+0x3c>)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008d38:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <SUBGHZSPI_Init+0x3c>)
 8008d3c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008d40:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <SUBGHZSPI_Init+0x3c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a04      	ldr	r2, [pc, #16]	; (8008d58 <SUBGHZSPI_Init+0x3c>)
 8008d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d4c:	6013      	str	r3, [r2, #0]
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr
 8008d58:	58010000 	.word	0x58010000

08008d5c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008d6c:	4b23      	ldr	r3, [pc, #140]	; (8008dfc <SUBGHZSPI_Transmit+0xa0>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	4613      	mov	r3, r2
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	0cdb      	lsrs	r3, r3, #19
 8008d7a:	2264      	movs	r2, #100	; 0x64
 8008d7c:	fb02 f303 	mul.w	r3, r2, r3
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d105      	bne.n	8008d94 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	609a      	str	r2, [r3, #8]
      break;
 8008d92:	e008      	b.n	8008da6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008d9a:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <SUBGHZSPI_Transmit+0xa4>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d1ed      	bne.n	8008d82 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008da6:	4b17      	ldr	r3, [pc, #92]	; (8008e04 <SUBGHZSPI_Transmit+0xa8>)
 8008da8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008db0:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <SUBGHZSPI_Transmit+0xa0>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	0cdb      	lsrs	r3, r3, #19
 8008dbe:	2264      	movs	r2, #100	; 0x64
 8008dc0:	fb02 f303 	mul.w	r3, r2, r3
 8008dc4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d105      	bne.n	8008dd8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	609a      	str	r2, [r3, #8]
      break;
 8008dd6:	e008      	b.n	8008dea <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008dde:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <SUBGHZSPI_Transmit+0xa4>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d1ed      	bne.n	8008dc6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <SUBGHZSPI_Transmit+0xa4>)
 8008dec:	68db      	ldr	r3, [r3, #12]

  return status;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	371c      	adds	r7, #28
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000004 	.word	0x20000004
 8008e00:	58010000 	.word	0x58010000
 8008e04:	5801000c 	.word	0x5801000c

08008e08 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e16:	4b25      	ldr	r3, [pc, #148]	; (8008eac <SUBGHZSPI_Receive+0xa4>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	1a9b      	subs	r3, r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	0cdb      	lsrs	r3, r3, #19
 8008e24:	2264      	movs	r2, #100	; 0x64
 8008e26:	fb02 f303 	mul.w	r3, r2, r3
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d105      	bne.n	8008e3e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	609a      	str	r2, [r3, #8]
      break;
 8008e3c:	e008      	b.n	8008e50 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008e44:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <SUBGHZSPI_Receive+0xa8>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d1ed      	bne.n	8008e2c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008e50:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <SUBGHZSPI_Receive+0xac>)
 8008e52:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	22ff      	movs	r2, #255	; 0xff
 8008e58:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e5a:	4b14      	ldr	r3, [pc, #80]	; (8008eac <SUBGHZSPI_Receive+0xa4>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	0cdb      	lsrs	r3, r3, #19
 8008e68:	2264      	movs	r2, #100	; 0x64
 8008e6a:	fb02 f303 	mul.w	r3, r2, r3
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	609a      	str	r2, [r3, #8]
      break;
 8008e80:	e008      	b.n	8008e94 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <SUBGHZSPI_Receive+0xa8>)
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d1ed      	bne.n	8008e70 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008e94:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <SUBGHZSPI_Receive+0xa8>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	701a      	strb	r2, [r3, #0]

  return status;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bc80      	pop	{r7}
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000004 	.word	0x20000004
 8008eb0:	58010000 	.word	0x58010000
 8008eb4:	5801000c 	.word	0x5801000c

08008eb8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	791b      	ldrb	r3, [r3, #4]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d111      	bne.n	8008eec <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <SUBGHZ_CheckDeviceReady+0x44>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	4413      	add	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008ed8:	f7ff fbb0 	bl	800863c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1f9      	bne.n	8008edc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008ee8:	f7ff fb98 	bl	800861c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f807 	bl	8008f00 <SUBGHZ_WaitOnBusy>
 8008ef2:	4603      	mov	r3, r0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000004 	.word	0x20000004

08008f00 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008f0c:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <SUBGHZ_WaitOnBusy+0x58>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	4613      	mov	r3, r2
 8008f12:	005b      	lsls	r3, r3, #1
 8008f14:	4413      	add	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	0d1b      	lsrs	r3, r3, #20
 8008f1a:	2264      	movs	r2, #100	; 0x64
 8008f1c:	fb02 f303 	mul.w	r3, r2, r3
 8008f20:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008f22:	f7ff fbb9 	bl	8008698 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008f26:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	609a      	str	r2, [r3, #8]
      break;
 8008f38:	e009      	b.n	8008f4e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008f40:	f7ff fb98 	bl	8008674 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008f44:	4602      	mov	r2, r0
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d0e9      	beq.n	8008f22 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20000004 	.word	0x20000004

08008f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e049      	b.n	8009002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7f9 fc36 	bl	80027f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f000 f9c6 	bl	800932c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b01      	cmp	r3, #1
 800901e:	d001      	beq.n	8009024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e036      	b.n	8009092 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a16      	ldr	r2, [pc, #88]	; (800909c <HAL_TIM_Base_Start_IT+0x90>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d004      	beq.n	8009050 <HAL_TIM_Base_Start_IT+0x44>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d115      	bne.n	800907c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	4b12      	ldr	r3, [pc, #72]	; (80090a0 <HAL_TIM_Base_Start_IT+0x94>)
 8009058:	4013      	ands	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b06      	cmp	r3, #6
 8009060:	d015      	beq.n	800908e <HAL_TIM_Base_Start_IT+0x82>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009068:	d011      	beq.n	800908e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0201 	orr.w	r2, r2, #1
 8009078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	e008      	b.n	800908e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e000      	b.n	8009090 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr
 800909c:	40012c00 	.word	0x40012c00
 80090a0:	00010007 	.word	0x00010007

080090a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d122      	bne.n	8009100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d11b      	bne.n	8009100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0202 	mvn.w	r2, #2
 80090d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f904 	bl	80092f4 <HAL_TIM_IC_CaptureCallback>
 80090ec:	e005      	b.n	80090fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f8f7 	bl	80092e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f906 	bl	8009306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b04      	cmp	r3, #4
 800910c:	d122      	bne.n	8009154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b04      	cmp	r3, #4
 800911a:	d11b      	bne.n	8009154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f06f 0204 	mvn.w	r2, #4
 8009124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2202      	movs	r2, #2
 800912a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8da 	bl	80092f4 <HAL_TIM_IC_CaptureCallback>
 8009140:	e005      	b.n	800914e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8cd 	bl	80092e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f8dc 	bl	8009306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b08      	cmp	r3, #8
 8009160:	d122      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f003 0308 	and.w	r3, r3, #8
 800916c:	2b08      	cmp	r3, #8
 800916e:	d11b      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f06f 0208 	mvn.w	r2, #8
 8009178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2204      	movs	r2, #4
 800917e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f8b0 	bl	80092f4 <HAL_TIM_IC_CaptureCallback>
 8009194:	e005      	b.n	80091a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f8a3 	bl	80092e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f8b2 	bl	8009306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b10      	cmp	r3, #16
 80091b4:	d122      	bne.n	80091fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b10      	cmp	r3, #16
 80091c2:	d11b      	bne.n	80091fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f06f 0210 	mvn.w	r2, #16
 80091cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2208      	movs	r2, #8
 80091d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f886 	bl	80092f4 <HAL_TIM_IC_CaptureCallback>
 80091e8:	e005      	b.n	80091f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f879 	bl	80092e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f888 	bl	8009306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b01      	cmp	r3, #1
 8009208:	d10e      	bne.n	8009228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b01      	cmp	r3, #1
 8009216:	d107      	bne.n	8009228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0201 	mvn.w	r2, #1
 8009220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7f8 fd46 	bl	8001cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009232:	2b80      	cmp	r3, #128	; 0x80
 8009234:	d10e      	bne.n	8009254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009240:	2b80      	cmp	r3, #128	; 0x80
 8009242:	d107      	bne.n	8009254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800924c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f8d7 	bl	8009402 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009262:	d10e      	bne.n	8009282 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926e:	2b80      	cmp	r3, #128	; 0x80
 8009270:	d107      	bne.n	8009282 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800927a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f8c9 	bl	8009414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928c:	2b40      	cmp	r3, #64	; 0x40
 800928e:	d10e      	bne.n	80092ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929a:	2b40      	cmp	r3, #64	; 0x40
 800929c:	d107      	bne.n	80092ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f835 	bl	8009318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d10e      	bne.n	80092da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b20      	cmp	r3, #32
 80092c8:	d107      	bne.n	80092da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f06f 0220 	mvn.w	r2, #32
 80092d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f88b 	bl	80093f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr

080092f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr

08009306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr

08009318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	bc80      	pop	{r7}
 8009328:	4770      	bx	lr
	...

0800932c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a29      	ldr	r2, [pc, #164]	; (80093e4 <TIM_Base_SetConfig+0xb8>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_Base_SetConfig+0x20>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934a:	d108      	bne.n	800935e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a20      	ldr	r2, [pc, #128]	; (80093e4 <TIM_Base_SetConfig+0xb8>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00b      	beq.n	800937e <TIM_Base_SetConfig+0x52>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936c:	d007      	beq.n	800937e <TIM_Base_SetConfig+0x52>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a1d      	ldr	r2, [pc, #116]	; (80093e8 <TIM_Base_SetConfig+0xbc>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d003      	beq.n	800937e <TIM_Base_SetConfig+0x52>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a1c      	ldr	r2, [pc, #112]	; (80093ec <TIM_Base_SetConfig+0xc0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d108      	bne.n	8009390 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	4313      	orrs	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a0b      	ldr	r2, [pc, #44]	; (80093e4 <TIM_Base_SetConfig+0xb8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d007      	beq.n	80093cc <TIM_Base_SetConfig+0xa0>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a0a      	ldr	r2, [pc, #40]	; (80093e8 <TIM_Base_SetConfig+0xbc>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d003      	beq.n	80093cc <TIM_Base_SetConfig+0xa0>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a09      	ldr	r2, [pc, #36]	; (80093ec <TIM_Base_SetConfig+0xc0>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d103      	bne.n	80093d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	691a      	ldr	r2, [r3, #16]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	615a      	str	r2, [r3, #20]
}
 80093da:	bf00      	nop
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr
 80093e4:	40012c00 	.word	0x40012c00
 80093e8:	40014400 	.word	0x40014400
 80093ec:	40014800 	.word	0x40014800

080093f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr

08009402 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	bc80      	pop	{r7}
 8009412:	4770      	bx	lr

08009414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	bc80      	pop	{r7}
 8009424:	4770      	bx	lr

08009426 <LL_RCC_GetUSARTClockSource>:
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800942e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	401a      	ands	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	041b      	lsls	r3, r3, #16
 800943e:	4313      	orrs	r3, r2
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr

0800944a <LL_RCC_GetLPUARTClockSource>:
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009456:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4013      	ands	r3, r2
}
 800945e:	4618      	mov	r0, r3
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	bc80      	pop	{r7}
 8009466:	4770      	bx	lr

08009468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e042      	b.n	8009500 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009480:	2b00      	cmp	r3, #0
 8009482:	d106      	bne.n	8009492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7f9 fd3f 	bl	8002f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2224      	movs	r2, #36	; 0x24
 8009496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0201 	bic.w	r2, r2, #1
 80094a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fc48 	bl	8009d40 <UART_SetConfig>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e022      	b.n	8009500 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 feb0 	bl	800a228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 0201 	orr.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 ff36 	bl	800a36a <UART_CheckIdleState>
 80094fe:	4603      	mov	r3, r0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951c:	2b20      	cmp	r3, #32
 800951e:	d142      	bne.n	80095a6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <HAL_UART_Receive_IT+0x24>
 8009526:	88fb      	ldrh	r3, [r7, #6]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e03b      	b.n	80095a8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <HAL_UART_Receive_IT+0x36>
 800953a:	2302      	movs	r3, #2
 800953c:	e034      	b.n	80095a8 <HAL_UART_Receive_IT+0xa0>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a17      	ldr	r2, [pc, #92]	; (80095b0 <HAL_UART_Receive_IT+0xa8>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d01f      	beq.n	8009596 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d018      	beq.n	8009596 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	613b      	str	r3, [r7, #16]
   return(result);
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	623b      	str	r3, [r7, #32]
 8009584:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	69f9      	ldr	r1, [r7, #28]
 8009588:	6a3a      	ldr	r2, [r7, #32]
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e6      	bne.n	8009564 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	461a      	mov	r2, r3
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fff7 	bl	800a590 <UART_Start_Receive_IT>
 80095a2:	4603      	mov	r3, r0
 80095a4:	e000      	b.n	80095a8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80095a6:	2302      	movs	r3, #2
  }
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3728      	adds	r7, #40	; 0x28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	40008000 	.word	0x40008000

080095b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08a      	sub	sp, #40	; 0x28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	4613      	mov	r3, r2
 80095c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c8:	2b20      	cmp	r3, #32
 80095ca:	d17a      	bne.n	80096c2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_UART_Transmit_DMA+0x24>
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e073      	b.n	80096c4 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_UART_Transmit_DMA+0x36>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e06c      	b.n	80096c4 <HAL_UART_Transmit_DMA+0x110>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2221      	movs	r2, #33	; 0x21
 8009614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800961c:	2b00      	cmp	r3, #0
 800961e:	d02c      	beq.n	800967a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009624:	4a29      	ldr	r2, [pc, #164]	; (80096cc <HAL_UART_Transmit_DMA+0x118>)
 8009626:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800962c:	4a28      	ldr	r2, [pc, #160]	; (80096d0 <HAL_UART_Transmit_DMA+0x11c>)
 800962e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009634:	4a27      	ldr	r2, [pc, #156]	; (80096d4 <HAL_UART_Transmit_DMA+0x120>)
 8009636:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800963c:	2200      	movs	r2, #0
 800963e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009648:	4619      	mov	r1, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3328      	adds	r3, #40	; 0x28
 8009650:	461a      	mov	r2, r3
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	f7fb fb22 	bl	8004c9c <HAL_DMA_Start_IT>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00d      	beq.n	800967a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2210      	movs	r2, #16
 8009662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2220      	movs	r2, #32
 8009672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e024      	b.n	80096c4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2240      	movs	r2, #64	; 0x40
 8009680:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3308      	adds	r3, #8
 8009690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	e853 3f00 	ldrex	r3, [r3]
 8009698:	613b      	str	r3, [r7, #16]
   return(result);
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096aa:	623a      	str	r2, [r7, #32]
 80096ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	69f9      	ldr	r1, [r7, #28]
 80096b0:	6a3a      	ldr	r2, [r7, #32]
 80096b2:	e841 2300 	strex	r3, r2, [r1]
 80096b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e5      	bne.n	800968a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	e000      	b.n	80096c4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80096c2:	2302      	movs	r3, #2
  }
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3728      	adds	r7, #40	; 0x28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	0800aa7b 	.word	0x0800aa7b
 80096d0:	0800ab15 	.word	0x0800ab15
 80096d4:	0800ac8f 	.word	0x0800ac8f

080096d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b0ba      	sub	sp, #232	; 0xe8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009702:	f640 030f 	movw	r3, #2063	; 0x80f
 8009706:	4013      	ands	r3, r2
 8009708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800970c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009710:	2b00      	cmp	r3, #0
 8009712:	d11b      	bne.n	800974c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d015      	beq.n	800974c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800972c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 82d6 	beq.w	8009cee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
      }
      return;
 800974a:	e2d0      	b.n	8009cee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800974c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 811f 	beq.w	8009994 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009756:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800975a:	4b8b      	ldr	r3, [pc, #556]	; (8009988 <HAL_UART_IRQHandler+0x2b0>)
 800975c:	4013      	ands	r3, r2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009766:	4b89      	ldr	r3, [pc, #548]	; (800998c <HAL_UART_IRQHandler+0x2b4>)
 8009768:	4013      	ands	r3, r2
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 8112 	beq.w	8009994 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	d011      	beq.n	80097a0 <HAL_UART_IRQHandler+0xc8>
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2201      	movs	r2, #1
 800978e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009796:	f043 0201 	orr.w	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d011      	beq.n	80097d0 <HAL_UART_IRQHandler+0xf8>
 80097ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00b      	beq.n	80097d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2202      	movs	r2, #2
 80097be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097c6:	f043 0204 	orr.w	r2, r3, #4
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d4:	f003 0304 	and.w	r3, r3, #4
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d011      	beq.n	8009800 <HAL_UART_IRQHandler+0x128>
 80097dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2204      	movs	r2, #4
 80097ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f6:	f043 0202 	orr.w	r2, r3, #2
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009804:	f003 0308 	and.w	r3, r3, #8
 8009808:	2b00      	cmp	r3, #0
 800980a:	d017      	beq.n	800983c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800981c:	4b5a      	ldr	r3, [pc, #360]	; (8009988 <HAL_UART_IRQHandler+0x2b0>)
 800981e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2208      	movs	r2, #8
 800982a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009832:	f043 0208 	orr.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800983c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009844:	2b00      	cmp	r3, #0
 8009846:	d012      	beq.n	800986e <HAL_UART_IRQHandler+0x196>
 8009848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800984c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00c      	beq.n	800986e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800985c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 823c 	beq.w	8009cf2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800987a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d013      	beq.n	80098ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	d105      	bne.n	800989e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b40      	cmp	r3, #64	; 0x40
 80098c4:	d005      	beq.n	80098d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d04f      	beq.n	8009972 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 f86c 	bl	800a9b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e2:	2b40      	cmp	r3, #64	; 0x40
 80098e4:	d141      	bne.n	800996a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3308      	adds	r3, #8
 80098ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3308      	adds	r3, #8
 800990e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009912:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800991e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800992a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1d9      	bne.n	80098e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009936:	2b00      	cmp	r3, #0
 8009938:	d013      	beq.n	8009962 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800993e:	4a14      	ldr	r2, [pc, #80]	; (8009990 <HAL_UART_IRQHandler+0x2b8>)
 8009940:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009946:	4618      	mov	r0, r3
 8009948:	f7fb fa84 	bl	8004e54 <HAL_DMA_Abort_IT>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d017      	beq.n	8009982 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009960:	e00f      	b.n	8009982 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f9e2 	bl	8009d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009968:	e00b      	b.n	8009982 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f9de 	bl	8009d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009970:	e007      	b.n	8009982 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f9da 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009980:	e1b7      	b.n	8009cf2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009982:	bf00      	nop
    return;
 8009984:	e1b5      	b.n	8009cf2 <HAL_UART_IRQHandler+0x61a>
 8009986:	bf00      	nop
 8009988:	10000001 	.word	0x10000001
 800998c:	04000120 	.word	0x04000120
 8009990:	0800ad0f 	.word	0x0800ad0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009998:	2b01      	cmp	r3, #1
 800999a:	f040 814a 	bne.w	8009c32 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800999e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8143 	beq.w	8009c32 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80099ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b0:	f003 0310 	and.w	r3, r3, #16
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 813c 	beq.w	8009c32 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2210      	movs	r2, #16
 80099c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	f040 80b5 	bne.w	8009b3c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80099de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 8187 	beq.w	8009cf6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099f2:	429a      	cmp	r2, r3
 80099f4:	f080 817f 	bcs.w	8009cf6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f040 8086 	bne.w	8009b20 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1da      	bne.n	8009a14 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3308      	adds	r3, #8
 8009a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e1      	bne.n	8009a5e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e3      	bne.n	8009a9a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009af0:	f023 0310 	bic.w	r3, r3, #16
 8009af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e4      	bne.n	8009ae0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fb f93c 	bl	8004d98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7f8 f84d 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009b3a:	e0dc      	b.n	8009cf6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80ce 	beq.w	8009cfa <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8009b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80c9 	beq.w	8009cfa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b70:	e853 3f00 	ldrex	r3, [r3]
 8009b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e4      	bne.n	8009b68 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	623b      	str	r3, [r7, #32]
   return(result);
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bb4:	f023 0301 	bic.w	r3, r3, #1
 8009bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bc6:	633a      	str	r2, [r7, #48]	; 0x30
 8009bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bce:	e841 2300 	strex	r3, r2, [r1]
 8009bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1e1      	bne.n	8009b9e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f023 0310 	bic.w	r3, r3, #16
 8009c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c10:	61fb      	str	r3, [r7, #28]
 8009c12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	69b9      	ldr	r1, [r7, #24]
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e4      	bne.n	8009bee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7f7 ffd2 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009c30:	e063      	b.n	8009cfa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00e      	beq.n	8009c5c <HAL_UART_IRQHandler+0x584>
 8009c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d008      	beq.n	8009c5c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 fcf7 	bl	800b648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c5a:	e051      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d014      	beq.n	8009c92 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d105      	bne.n	8009c80 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d008      	beq.n	8009c92 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d03a      	beq.n	8009cfe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	4798      	blx	r3
    }
    return;
 8009c90:	e035      	b.n	8009cfe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x5da>
 8009c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f001 f845 	bl	800ad3a <UART_EndTransmit_IT>
    return;
 8009cb0:	e026      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <HAL_UART_IRQHandler+0x5fa>
 8009cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 fcce 	bl	800b66c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cd0:	e016      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d010      	beq.n	8009d00 <HAL_UART_IRQHandler+0x628>
 8009cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	da0c      	bge.n	8009d00 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 fcb7 	bl	800b65a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cec:	e008      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
      return;
 8009cee:	bf00      	nop
 8009cf0:	e006      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
    return;
 8009cf2:	bf00      	nop
 8009cf4:	e004      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
      return;
 8009cf6:	bf00      	nop
 8009cf8:	e002      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
      return;
 8009cfa:	bf00      	nop
 8009cfc:	e000      	b.n	8009d00 <HAL_UART_IRQHandler+0x628>
    return;
 8009cfe:	bf00      	nop
  }
}
 8009d00:	37e8      	adds	r7, #232	; 0xe8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop

08009d08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr

08009d1a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bc80      	pop	{r7}
 8009d3c:	4770      	bx	lr
	...

08009d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d44:	b08c      	sub	sp, #48	; 0x30
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b94      	ldr	r3, [pc, #592]	; (8009fc0 <UART_SetConfig+0x280>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a89      	ldr	r2, [pc, #548]	; (8009fc4 <UART_SetConfig+0x284>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d004      	beq.n	8009dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da8:	4313      	orrs	r3, r2
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009db6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	6812      	ldr	r2, [r2, #0]
 8009dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	f023 010f 	bic.w	r1, r3, #15
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a7a      	ldr	r2, [pc, #488]	; (8009fc8 <UART_SetConfig+0x288>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d127      	bne.n	8009e34 <UART_SetConfig+0xf4>
 8009de4:	2003      	movs	r0, #3
 8009de6:	f7ff fb1e 	bl	8009426 <LL_RCC_GetUSARTClockSource>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d81b      	bhi.n	8009e2c <UART_SetConfig+0xec>
 8009df4:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <UART_SetConfig+0xbc>)
 8009df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfa:	bf00      	nop
 8009dfc:	08009e0d 	.word	0x08009e0d
 8009e00:	08009e1d 	.word	0x08009e1d
 8009e04:	08009e15 	.word	0x08009e15
 8009e08:	08009e25 	.word	0x08009e25
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e12:	e080      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009e14:	2302      	movs	r3, #2
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e1a:	e07c      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e22:	e078      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e2a:	e074      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e32:	e070      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a64      	ldr	r2, [pc, #400]	; (8009fcc <UART_SetConfig+0x28c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d138      	bne.n	8009eb0 <UART_SetConfig+0x170>
 8009e3e:	200c      	movs	r0, #12
 8009e40:	f7ff faf1 	bl	8009426 <LL_RCC_GetUSARTClockSource>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8009e4a:	2b0c      	cmp	r3, #12
 8009e4c:	d82c      	bhi.n	8009ea8 <UART_SetConfig+0x168>
 8009e4e:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <UART_SetConfig+0x114>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e89 	.word	0x08009e89
 8009e58:	08009ea9 	.word	0x08009ea9
 8009e5c:	08009ea9 	.word	0x08009ea9
 8009e60:	08009ea9 	.word	0x08009ea9
 8009e64:	08009e99 	.word	0x08009e99
 8009e68:	08009ea9 	.word	0x08009ea9
 8009e6c:	08009ea9 	.word	0x08009ea9
 8009e70:	08009ea9 	.word	0x08009ea9
 8009e74:	08009e91 	.word	0x08009e91
 8009e78:	08009ea9 	.word	0x08009ea9
 8009e7c:	08009ea9 	.word	0x08009ea9
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009ea1 	.word	0x08009ea1
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e8e:	e042      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009e90:	2302      	movs	r3, #2
 8009e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e96:	e03e      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009e98:	2304      	movs	r3, #4
 8009e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9e:	e03a      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ea6:	e036      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eae:	e032      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a43      	ldr	r2, [pc, #268]	; (8009fc4 <UART_SetConfig+0x284>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d12a      	bne.n	8009f10 <UART_SetConfig+0x1d0>
 8009eba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009ebe:	f7ff fac4 	bl	800944a <LL_RCC_GetLPUARTClockSource>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ec8:	d01a      	beq.n	8009f00 <UART_SetConfig+0x1c0>
 8009eca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ece:	d81b      	bhi.n	8009f08 <UART_SetConfig+0x1c8>
 8009ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ed4:	d00c      	beq.n	8009ef0 <UART_SetConfig+0x1b0>
 8009ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eda:	d815      	bhi.n	8009f08 <UART_SetConfig+0x1c8>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d003      	beq.n	8009ee8 <UART_SetConfig+0x1a8>
 8009ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ee4:	d008      	beq.n	8009ef8 <UART_SetConfig+0x1b8>
 8009ee6:	e00f      	b.n	8009f08 <UART_SetConfig+0x1c8>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eee:	e012      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ef6:	e00e      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009efe:	e00a      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009f00:	2308      	movs	r3, #8
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f06:	e006      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009f08:	2310      	movs	r3, #16
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f0e:	e002      	b.n	8009f16 <UART_SetConfig+0x1d6>
 8009f10:	2310      	movs	r3, #16
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a2a      	ldr	r2, [pc, #168]	; (8009fc4 <UART_SetConfig+0x284>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f040 80a4 	bne.w	800a06a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f26:	2b08      	cmp	r3, #8
 8009f28:	d823      	bhi.n	8009f72 <UART_SetConfig+0x232>
 8009f2a:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <UART_SetConfig+0x1f0>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f55 	.word	0x08009f55
 8009f34:	08009f73 	.word	0x08009f73
 8009f38:	08009f5d 	.word	0x08009f5d
 8009f3c:	08009f73 	.word	0x08009f73
 8009f40:	08009f63 	.word	0x08009f63
 8009f44:	08009f73 	.word	0x08009f73
 8009f48:	08009f73 	.word	0x08009f73
 8009f4c:	08009f73 	.word	0x08009f73
 8009f50:	08009f6b 	.word	0x08009f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f54:	f7fd fce6 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
 8009f58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f5a:	e010      	b.n	8009f7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f5c:	4b1c      	ldr	r3, [pc, #112]	; (8009fd0 <UART_SetConfig+0x290>)
 8009f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f60:	e00d      	b.n	8009f7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f62:	f7fd fc2b 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 8009f66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f68:	e009      	b.n	8009f7e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f70:	e005      	b.n	8009f7e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8137 	beq.w	800a1f4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	4a12      	ldr	r2, [pc, #72]	; (8009fd4 <UART_SetConfig+0x294>)
 8009f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d305      	bcc.n	8009fb6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fb0:	69ba      	ldr	r2, [r7, #24]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d910      	bls.n	8009fd8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009fbc:	e11a      	b.n	800a1f4 <UART_SetConfig+0x4b4>
 8009fbe:	bf00      	nop
 8009fc0:	cfff69f3 	.word	0xcfff69f3
 8009fc4:	40008000 	.word	0x40008000
 8009fc8:	40013800 	.word	0x40013800
 8009fcc:	40004400 	.word	0x40004400
 8009fd0:	00f42400 	.word	0x00f42400
 8009fd4:	0801db34 	.word	0x0801db34
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	2200      	movs	r2, #0
 8009fdc:	60bb      	str	r3, [r7, #8]
 8009fde:	60fa      	str	r2, [r7, #12]
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	4a8e      	ldr	r2, [pc, #568]	; (800a220 <UART_SetConfig+0x4e0>)
 8009fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2200      	movs	r2, #0
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ffa:	f7f6 fec7 	bl	8000d8c <__aeabi_uldivmod>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4610      	mov	r0, r2
 800a004:	4619      	mov	r1, r3
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	020b      	lsls	r3, r1, #8
 800a010:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a014:	0202      	lsls	r2, r0, #8
 800a016:	6979      	ldr	r1, [r7, #20]
 800a018:	6849      	ldr	r1, [r1, #4]
 800a01a:	0849      	lsrs	r1, r1, #1
 800a01c:	2000      	movs	r0, #0
 800a01e:	460c      	mov	r4, r1
 800a020:	4605      	mov	r5, r0
 800a022:	eb12 0804 	adds.w	r8, r2, r4
 800a026:	eb43 0905 	adc.w	r9, r3, r5
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	469a      	mov	sl, r3
 800a032:	4693      	mov	fp, r2
 800a034:	4652      	mov	r2, sl
 800a036:	465b      	mov	r3, fp
 800a038:	4640      	mov	r0, r8
 800a03a:	4649      	mov	r1, r9
 800a03c:	f7f6 fea6 	bl	8000d8c <__aeabi_uldivmod>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4613      	mov	r3, r2
 800a046:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a04e:	d308      	bcc.n	800a062 <UART_SetConfig+0x322>
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a056:	d204      	bcs.n	800a062 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6a3a      	ldr	r2, [r7, #32]
 800a05e:	60da      	str	r2, [r3, #12]
 800a060:	e0c8      	b.n	800a1f4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a068:	e0c4      	b.n	800a1f4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a072:	d168      	bne.n	800a146 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d828      	bhi.n	800a0ce <UART_SetConfig+0x38e>
 800a07c:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <UART_SetConfig+0x344>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a0a9 	.word	0x0800a0a9
 800a088:	0800a0b1 	.word	0x0800a0b1
 800a08c:	0800a0b9 	.word	0x0800a0b9
 800a090:	0800a0cf 	.word	0x0800a0cf
 800a094:	0800a0bf 	.word	0x0800a0bf
 800a098:	0800a0cf 	.word	0x0800a0cf
 800a09c:	0800a0cf 	.word	0x0800a0cf
 800a0a0:	0800a0cf 	.word	0x0800a0cf
 800a0a4:	0800a0c7 	.word	0x0800a0c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a8:	f7fd fc3c 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
 800a0ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0ae:	e014      	b.n	800a0da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0b0:	f7fd fc4a 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
 800a0b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0b6:	e010      	b.n	800a0da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0b8:	4b5a      	ldr	r3, [pc, #360]	; (800a224 <UART_SetConfig+0x4e4>)
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0bc:	e00d      	b.n	800a0da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0be:	f7fd fb7d 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 800a0c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0c4:	e009      	b.n	800a0da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0cc:	e005      	b.n	800a0da <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 8089 	beq.w	800a1f4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	4a4e      	ldr	r2, [pc, #312]	; (800a220 <UART_SetConfig+0x4e0>)
 800a0e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0f4:	005a      	lsls	r2, r3, #1
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	085b      	lsrs	r3, r3, #1
 800a0fc:	441a      	add	r2, r3
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	fbb2 f3f3 	udiv	r3, r2, r3
 800a106:	b29b      	uxth	r3, r3
 800a108:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	2b0f      	cmp	r3, #15
 800a10e:	d916      	bls.n	800a13e <UART_SetConfig+0x3fe>
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a116:	d212      	bcs.n	800a13e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	f023 030f 	bic.w	r3, r3, #15
 800a120:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	085b      	lsrs	r3, r3, #1
 800a126:	b29b      	uxth	r3, r3
 800a128:	f003 0307 	and.w	r3, r3, #7
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	8bfb      	ldrh	r3, [r7, #30]
 800a130:	4313      	orrs	r3, r2
 800a132:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	8bfa      	ldrh	r2, [r7, #30]
 800a13a:	60da      	str	r2, [r3, #12]
 800a13c:	e05a      	b.n	800a1f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a144:	e056      	b.n	800a1f4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a146:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a14a:	2b08      	cmp	r3, #8
 800a14c:	d827      	bhi.n	800a19e <UART_SetConfig+0x45e>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <UART_SetConfig+0x414>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a181 	.word	0x0800a181
 800a15c:	0800a189 	.word	0x0800a189
 800a160:	0800a19f 	.word	0x0800a19f
 800a164:	0800a18f 	.word	0x0800a18f
 800a168:	0800a19f 	.word	0x0800a19f
 800a16c:	0800a19f 	.word	0x0800a19f
 800a170:	0800a19f 	.word	0x0800a19f
 800a174:	0800a197 	.word	0x0800a197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a178:	f7fd fbd4 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
 800a17c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a17e:	e014      	b.n	800a1aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a180:	f7fd fbe2 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
 800a184:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a186:	e010      	b.n	800a1aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a188:	4b26      	ldr	r3, [pc, #152]	; (800a224 <UART_SetConfig+0x4e4>)
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a18c:	e00d      	b.n	800a1aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a18e:	f7fd fb15 	bl	80077bc <HAL_RCC_GetSysClockFreq>
 800a192:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a194:	e009      	b.n	800a1aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a19c:	e005      	b.n	800a1aa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a1a8:	bf00      	nop
    }

    if (pclk != 0U)
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d021      	beq.n	800a1f4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	4a1a      	ldr	r2, [pc, #104]	; (800a220 <UART_SetConfig+0x4e0>)
 800a1b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	441a      	add	r2, r3
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	2b0f      	cmp	r3, #15
 800a1da:	d908      	bls.n	800a1ee <UART_SetConfig+0x4ae>
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e2:	d204      	bcs.n	800a1ee <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6a3a      	ldr	r2, [r7, #32]
 800a1ea:	60da      	str	r2, [r3, #12]
 800a1ec:	e002      	b.n	800a1f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2200      	movs	r2, #0
 800a208:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2200      	movs	r2, #0
 800a20e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a210:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a214:	4618      	mov	r0, r3
 800a216:	3730      	adds	r7, #48	; 0x30
 800a218:	46bd      	mov	sp, r7
 800a21a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a21e:	bf00      	nop
 800a220:	0801db34 	.word	0x0801db34
 800a224:	00f42400 	.word	0x00f42400

0800a228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00a      	beq.n	800a252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	430a      	orrs	r2, r1
 800a272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00a      	beq.n	800a296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2bc:	f003 0310 	and.w	r3, r3, #16
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00a      	beq.n	800a2da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2de:	f003 0320 	and.w	r3, r3, #32
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00a      	beq.n	800a2fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01a      	beq.n	800a33e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a326:	d10a      	bne.n	800a33e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	430a      	orrs	r2, r1
 800a35e:	605a      	str	r2, [r3, #4]
  }
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr

0800a36a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b086      	sub	sp, #24
 800a36e:	af02      	add	r7, sp, #8
 800a370:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a37a:	f7f8 f8d5 	bl	8002528 <HAL_GetTick>
 800a37e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0308 	and.w	r3, r3, #8
 800a38a:	2b08      	cmp	r3, #8
 800a38c:	d10e      	bne.n	800a3ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a38e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f82f 	bl	800a400 <UART_WaitOnFlagUntilTimeout>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e025      	b.n	800a3f8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b04      	cmp	r3, #4
 800a3b8:	d10e      	bne.n	800a3d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f819 	bl	800a400 <UART_WaitOnFlagUntilTimeout>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e00f      	b.n	800a3f8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b09c      	sub	sp, #112	; 0x70
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	4613      	mov	r3, r2
 800a40e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a410:	e0a9      	b.n	800a566 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a418:	f000 80a5 	beq.w	800a566 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41c:	f7f8 f884 	bl	8002528 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a428:	429a      	cmp	r2, r3
 800a42a:	d302      	bcc.n	800a432 <UART_WaitOnFlagUntilTimeout+0x32>
 800a42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d140      	bne.n	800a4b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a446:	667b      	str	r3, [r7, #100]	; 0x64
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a450:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a452:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a456:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a45e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e6      	bne.n	800a432 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3308      	adds	r3, #8
 800a46a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46e:	e853 3f00 	ldrex	r3, [r3]
 800a472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	663b      	str	r3, [r7, #96]	; 0x60
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3308      	adds	r3, #8
 800a482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a484:	64ba      	str	r2, [r7, #72]	; 0x48
 800a486:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a488:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a48a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e5      	bne.n	800a464 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2220      	movs	r2, #32
 800a49c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e069      	b.n	800a588 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d051      	beq.n	800a566 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d0:	d149      	bne.n	800a566 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	e853 3f00 	ldrex	r3, [r3]
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a4fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e6      	bne.n	800a4dc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3308      	adds	r3, #8
 800a514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	e853 3f00 	ldrex	r3, [r3]
 800a51c:	613b      	str	r3, [r7, #16]
   return(result);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f023 0301 	bic.w	r3, r3, #1
 800a524:	66bb      	str	r3, [r7, #104]	; 0x68
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a52e:	623a      	str	r2, [r7, #32]
 800a530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	69f9      	ldr	r1, [r7, #28]
 800a534:	6a3a      	ldr	r2, [r7, #32]
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e5      	bne.n	800a50e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2220      	movs	r2, #32
 800a546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2220      	movs	r2, #32
 800a54e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2220      	movs	r2, #32
 800a556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e010      	b.n	800a588 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69da      	ldr	r2, [r3, #28]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4013      	ands	r3, r2
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	bf0c      	ite	eq
 800a576:	2301      	moveq	r3, #1
 800a578:	2300      	movne	r3, #0
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	461a      	mov	r2, r3
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	429a      	cmp	r2, r3
 800a582:	f43f af46 	beq.w	800a412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3770      	adds	r7, #112	; 0x70
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a590:	b480      	push	{r7}
 800a592:	b0a3      	sub	sp, #140	; 0x8c
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4613      	mov	r3, r2
 800a59c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	88fa      	ldrh	r2, [r7, #6]
 800a5a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	88fa      	ldrh	r2, [r7, #6]
 800a5b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c2:	d10e      	bne.n	800a5e2 <UART_Start_Receive_IT+0x52>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d105      	bne.n	800a5d8 <UART_Start_Receive_IT+0x48>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a5d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5d6:	e02d      	b.n	800a634 <UART_Start_Receive_IT+0xa4>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	22ff      	movs	r2, #255	; 0xff
 800a5dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5e0:	e028      	b.n	800a634 <UART_Start_Receive_IT+0xa4>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10d      	bne.n	800a606 <UART_Start_Receive_IT+0x76>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d104      	bne.n	800a5fc <UART_Start_Receive_IT+0x6c>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5fa:	e01b      	b.n	800a634 <UART_Start_Receive_IT+0xa4>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	227f      	movs	r2, #127	; 0x7f
 800a600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a604:	e016      	b.n	800a634 <UART_Start_Receive_IT+0xa4>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a60e:	d10d      	bne.n	800a62c <UART_Start_Receive_IT+0x9c>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d104      	bne.n	800a622 <UART_Start_Receive_IT+0x92>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	227f      	movs	r2, #127	; 0x7f
 800a61c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a620:	e008      	b.n	800a634 <UART_Start_Receive_IT+0xa4>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	223f      	movs	r2, #63	; 0x3f
 800a626:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a62a:	e003      	b.n	800a634 <UART_Start_Receive_IT+0xa4>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2222      	movs	r2, #34	; 0x22
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3308      	adds	r3, #8
 800a64a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a64e:	e853 3f00 	ldrex	r3, [r3]
 800a652:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a656:	f043 0301 	orr.w	r3, r3, #1
 800a65a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3308      	adds	r3, #8
 800a664:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a668:	673a      	str	r2, [r7, #112]	; 0x70
 800a66a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a66e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e3      	bne.n	800a644 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a684:	d153      	bne.n	800a72e <UART_Start_Receive_IT+0x19e>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a68c:	88fa      	ldrh	r2, [r7, #6]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d34d      	bcc.n	800a72e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a69a:	d107      	bne.n	800a6ac <UART_Start_Receive_IT+0x11c>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d103      	bne.n	800a6ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4a4a      	ldr	r2, [pc, #296]	; (800a7d0 <UART_Start_Receive_IT+0x240>)
 800a6a8:	671a      	str	r2, [r3, #112]	; 0x70
 800a6aa:	e002      	b.n	800a6b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	4a49      	ldr	r2, [pc, #292]	; (800a7d4 <UART_Start_Receive_IT+0x244>)
 800a6b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d01a      	beq.n	800a6f8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6ec:	e841 2300 	strex	r3, r2, [r1]
 800a6f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e4      	bne.n	800a6c2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a70e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3308      	adds	r3, #8
 800a716:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a718:	64ba      	str	r2, [r7, #72]	; 0x48
 800a71a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a71e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e5      	bne.n	800a6f8 <UART_Start_Receive_IT+0x168>
 800a72c:	e04a      	b.n	800a7c4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a736:	d107      	bne.n	800a748 <UART_Start_Receive_IT+0x1b8>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d103      	bne.n	800a748 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a25      	ldr	r2, [pc, #148]	; (800a7d8 <UART_Start_Receive_IT+0x248>)
 800a744:	671a      	str	r2, [r3, #112]	; 0x70
 800a746:	e002      	b.n	800a74e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4a24      	ldr	r2, [pc, #144]	; (800a7dc <UART_Start_Receive_IT+0x24c>)
 800a74c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d019      	beq.n	800a792 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a772:	677b      	str	r3, [r7, #116]	; 0x74
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a77c:	637b      	str	r3, [r7, #52]	; 0x34
 800a77e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_Start_Receive_IT+0x1ce>
 800a790:	e018      	b.n	800a7c4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f043 0320 	orr.w	r3, r3, #32
 800a7a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7b0:	623b      	str	r3, [r7, #32]
 800a7b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	69f9      	ldr	r1, [r7, #28]
 800a7b6:	6a3a      	ldr	r2, [r7, #32]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e6      	bne.n	800a792 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	378c      	adds	r7, #140	; 0x8c
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bc80      	pop	{r7}
 800a7ce:	4770      	bx	lr
 800a7d0:	0800b349 	.word	0x0800b349
 800a7d4:	0800b051 	.word	0x0800b051
 800a7d8:	0800aef1 	.word	0x0800aef1
 800a7dc:	0800ad91 	.word	0x0800ad91

0800a7e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b096      	sub	sp, #88	; 0x58
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	88fa      	ldrh	r2, [r7, #6]
 800a7f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2222      	movs	r2, #34	; 0x22
 800a808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d02c      	beq.n	800a86e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a818:	4a42      	ldr	r2, [pc, #264]	; (800a924 <UART_Start_Receive_DMA+0x144>)
 800a81a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a820:	4a41      	ldr	r2, [pc, #260]	; (800a928 <UART_Start_Receive_DMA+0x148>)
 800a822:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a828:	4a40      	ldr	r2, [pc, #256]	; (800a92c <UART_Start_Receive_DMA+0x14c>)
 800a82a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a830:	2200      	movs	r2, #0
 800a832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3324      	adds	r3, #36	; 0x24
 800a83e:	4619      	mov	r1, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a844:	461a      	mov	r2, r3
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	f7fa fa28 	bl	8004c9c <HAL_DMA_Start_IT>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00d      	beq.n	800a86e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2210      	movs	r2, #16
 800a856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2220      	movs	r2, #32
 800a866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e055      	b.n	800a91a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d018      	beq.n	800a8b0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a886:	e853 3f00 	ldrex	r3, [r3]
 800a88a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a892:	657b      	str	r3, [r7, #84]	; 0x54
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	461a      	mov	r2, r3
 800a89a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a89c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a89e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8a4:	e841 2300 	strex	r3, r2, [r1]
 800a8a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e6      	bne.n	800a87e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	e853 3f00 	ldrex	r3, [r3]
 800a8be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	f043 0301 	orr.w	r3, r3, #1
 800a8c6:	653b      	str	r3, [r7, #80]	; 0x50
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3308      	adds	r3, #8
 800a8ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8d0:	637a      	str	r2, [r7, #52]	; 0x34
 800a8d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8d8:	e841 2300 	strex	r3, r2, [r1]
 800a8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e5      	bne.n	800a8b0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3308      	adds	r3, #8
 800a902:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a904:	623a      	str	r2, [r7, #32]
 800a906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	69f9      	ldr	r1, [r7, #28]
 800a90a:	6a3a      	ldr	r2, [r7, #32]
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	61bb      	str	r3, [r7, #24]
   return(result);
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e5      	bne.n	800a8e4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3758      	adds	r7, #88	; 0x58
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	0800ab31 	.word	0x0800ab31
 800a928:	0800ac57 	.word	0x0800ac57
 800a92c:	0800ac8f 	.word	0x0800ac8f

0800a930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a930:	b480      	push	{r7}
 800a932:	b08f      	sub	sp, #60	; 0x3c
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	61fb      	str	r3, [r7, #28]
   return(result);
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a94c:	637b      	str	r3, [r7, #52]	; 0x34
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a956:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a958:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a95c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a95e:	e841 2300 	strex	r3, r2, [r1]
 800a962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1e6      	bne.n	800a938 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3308      	adds	r3, #8
 800a970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	e853 3f00 	ldrex	r3, [r3]
 800a978:	60bb      	str	r3, [r7, #8]
   return(result);
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a980:	633b      	str	r3, [r7, #48]	; 0x30
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3308      	adds	r3, #8
 800a988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a98a:	61ba      	str	r2, [r7, #24]
 800a98c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98e:	6979      	ldr	r1, [r7, #20]
 800a990:	69ba      	ldr	r2, [r7, #24]
 800a992:	e841 2300 	strex	r3, r2, [r1]
 800a996:	613b      	str	r3, [r7, #16]
   return(result);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e5      	bne.n	800a96a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2220      	movs	r2, #32
 800a9a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a9a6:	bf00      	nop
 800a9a8:	373c      	adds	r7, #60	; 0x3c
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bc80      	pop	{r7}
 800a9ae:	4770      	bx	lr

0800a9b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b095      	sub	sp, #84	; 0x54
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a9d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e6      	bne.n	800a9b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa00:	f023 0301 	bic.w	r3, r3, #1
 800aa04:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa16:	e841 2300 	strex	r3, r2, [r1]
 800aa1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1e3      	bne.n	800a9ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d118      	bne.n	800aa5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	e853 3f00 	ldrex	r3, [r3]
 800aa36:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f023 0310 	bic.w	r3, r3, #16
 800aa3e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
 800aa46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4c:	6979      	ldr	r1, [r7, #20]
 800aa4e:	69ba      	ldr	r2, [r7, #24]
 800aa50:	e841 2300 	strex	r3, r2, [r1]
 800aa54:	613b      	str	r3, [r7, #16]
   return(result);
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e6      	bne.n	800aa2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aa70:	bf00      	nop
 800aa72:	3754      	adds	r7, #84	; 0x54
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bc80      	pop	{r7}
 800aa78:	4770      	bx	lr

0800aa7a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b090      	sub	sp, #64	; 0x40
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0320 	and.w	r3, r3, #32
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d137      	bne.n	800ab06 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aa96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	623b      	str	r3, [r7, #32]
   return(result);
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aab4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aabe:	633a      	str	r2, [r7, #48]	; 0x30
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	60fb      	str	r3, [r7, #12]
   return(result);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae6:	637b      	str	r3, [r7, #52]	; 0x34
 800aae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf0:	61fb      	str	r3, [r7, #28]
 800aaf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	69b9      	ldr	r1, [r7, #24]
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	e841 2300 	strex	r3, r2, [r1]
 800aafc:	617b      	str	r3, [r7, #20]
   return(result);
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1e6      	bne.n	800aad2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab04:	e002      	b.n	800ab0c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ab06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab08:	f7f8 fc46 	bl	8003398 <HAL_UART_TxCpltCallback>
}
 800ab0c:	bf00      	nop
 800ab0e:	3740      	adds	r7, #64	; 0x40
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7ff f8f0 	bl	8009d08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b09c      	sub	sp, #112	; 0x70
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d171      	bne.n	800ac30 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ab4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab68:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab72:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab7a:	e841 2300 	strex	r3, r2, [r1]
 800ab7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e6      	bne.n	800ab54 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3308      	adds	r3, #8
 800ab8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	e853 3f00 	ldrex	r3, [r3]
 800ab94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	f023 0301 	bic.w	r3, r3, #1
 800ab9c:	667b      	str	r3, [r7, #100]	; 0x64
 800ab9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3308      	adds	r3, #8
 800aba4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aba6:	647a      	str	r2, [r7, #68]	; 0x44
 800aba8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abae:	e841 2300 	strex	r3, r2, [r1]
 800abb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1e5      	bne.n	800ab86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3308      	adds	r3, #8
 800abc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	e853 3f00 	ldrex	r3, [r3]
 800abc8:	623b      	str	r3, [r7, #32]
   return(result);
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abd0:	663b      	str	r3, [r7, #96]	; 0x60
 800abd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3308      	adds	r3, #8
 800abd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abda:	633a      	str	r2, [r7, #48]	; 0x30
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e5      	bne.n	800abba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf0:	2220      	movs	r2, #32
 800abf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d118      	bne.n	800ac30 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0310 	bic.w	r3, r3, #16
 800ac12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	69b9      	ldr	r1, [r7, #24]
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e6      	bne.n	800abfe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d107      	bne.n	800ac48 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac42:	f7f6 ffc7 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac46:	e002      	b.n	800ac4e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ac48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac4a:	f7f8 fbbb 	bl	80033c4 <HAL_UART_RxCpltCallback>
}
 800ac4e:	bf00      	nop
 800ac50:	3770      	adds	r7, #112	; 0x70
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d109      	bne.n	800ac80 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	4619      	mov	r1, r3
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7f6 ffab 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac7e:	e002      	b.n	800ac86 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7ff f84a 	bl	8009d1a <HAL_UART_RxHalfCpltCallback>
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b086      	sub	sp, #24
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aca2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb6:	2b80      	cmp	r3, #128	; 0x80
 800acb8:	d109      	bne.n	800acce <UART_DMAError+0x40>
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b21      	cmp	r3, #33	; 0x21
 800acbe:	d106      	bne.n	800acce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800acc8:	6978      	ldr	r0, [r7, #20]
 800acca:	f7ff fe31 	bl	800a930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd8:	2b40      	cmp	r3, #64	; 0x40
 800acda:	d109      	bne.n	800acf0 <UART_DMAError+0x62>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b22      	cmp	r3, #34	; 0x22
 800ace0:	d106      	bne.n	800acf0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800acea:	6978      	ldr	r0, [r7, #20]
 800acec:	f7ff fe60 	bl	800a9b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acf6:	f043 0210 	orr.w	r2, r3, #16
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad00:	6978      	ldr	r0, [r7, #20]
 800ad02:	f7ff f813 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad06:	bf00      	nop
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7fe fffd 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b088      	sub	sp, #32
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad56:	61fb      	str	r3, [r7, #28]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	61bb      	str	r3, [r7, #24]
 800ad62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6979      	ldr	r1, [r7, #20]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e6      	bne.n	800ad42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2220      	movs	r2, #32
 800ad78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7f8 fb08 	bl	8003398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad88:	bf00      	nop
 800ad8a:	3720      	adds	r7, #32
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b096      	sub	sp, #88	; 0x58
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada8:	2b22      	cmp	r3, #34	; 0x22
 800adaa:	f040 8095 	bne.w	800aed8 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800adb8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800adbc:	b2d9      	uxtb	r1, r3
 800adbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc8:	400a      	ands	r2, r1
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adde:	b29b      	uxth	r3, r3
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d178      	bne.n	800aee8 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae0a:	653b      	str	r3, [r7, #80]	; 0x50
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae14:	647b      	str	r3, [r7, #68]	; 0x44
 800ae16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae1c:	e841 2300 	strex	r3, r2, [r1]
 800ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e6      	bne.n	800adf6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	623b      	str	r3, [r7, #32]
   return(result);
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	f023 0301 	bic.w	r3, r3, #1
 800ae3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3308      	adds	r3, #8
 800ae46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae48:	633a      	str	r2, [r7, #48]	; 0x30
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e5      	bne.n	800ae28 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d12e      	bne.n	800aed0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f023 0310 	bic.w	r3, r3, #16
 800ae8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae96:	61fb      	str	r3, [r7, #28]
 800ae98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	69b9      	ldr	r1, [r7, #24]
 800ae9c:	69fa      	ldr	r2, [r7, #28]
 800ae9e:	e841 2300 	strex	r3, r2, [r1]
 800aea2:	617b      	str	r3, [r7, #20]
   return(result);
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e6      	bne.n	800ae78 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b10      	cmp	r3, #16
 800aeb6:	d103      	bne.n	800aec0 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2210      	movs	r2, #16
 800aebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7f6 fe83 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aece:	e00b      	b.n	800aee8 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7f8 fa77 	bl	80033c4 <HAL_UART_RxCpltCallback>
}
 800aed6:	e007      	b.n	800aee8 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	699a      	ldr	r2, [r3, #24]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f042 0208 	orr.w	r2, r2, #8
 800aee6:	619a      	str	r2, [r3, #24]
}
 800aee8:	bf00      	nop
 800aeea:	3758      	adds	r7, #88	; 0x58
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b096      	sub	sp, #88	; 0x58
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aefe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af08:	2b22      	cmp	r3, #34	; 0x22
 800af0a:	f040 8095 	bne.w	800b038 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800af1e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800af22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800af26:	4013      	ands	r3, r2
 800af28:	b29a      	uxth	r2, r3
 800af2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af32:	1c9a      	adds	r2, r3, #2
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af3e:	b29b      	uxth	r3, r3
 800af40:	3b01      	subs	r3, #1
 800af42:	b29a      	uxth	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af50:	b29b      	uxth	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d178      	bne.n	800b048 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5e:	e853 3f00 	ldrex	r3, [r3]
 800af62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	461a      	mov	r2, r3
 800af72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af74:	643b      	str	r3, [r7, #64]	; 0x40
 800af76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af7c:	e841 2300 	strex	r3, r2, [r1]
 800af80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1e6      	bne.n	800af56 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3308      	adds	r3, #8
 800af8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	e853 3f00 	ldrex	r3, [r3]
 800af96:	61fb      	str	r3, [r7, #28]
   return(result);
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	f023 0301 	bic.w	r3, r3, #1
 800af9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3308      	adds	r3, #8
 800afa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afb0:	e841 2300 	strex	r3, r2, [r1]
 800afb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e5      	bne.n	800af88 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d12e      	bne.n	800b030 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	60bb      	str	r3, [r7, #8]
   return(result);
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f023 0310 	bic.w	r3, r3, #16
 800afec:	647b      	str	r3, [r7, #68]	; 0x44
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aff6:	61bb      	str	r3, [r7, #24]
 800aff8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6979      	ldr	r1, [r7, #20]
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	613b      	str	r3, [r7, #16]
   return(result);
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e6      	bne.n	800afd8 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	69db      	ldr	r3, [r3, #28]
 800b010:	f003 0310 	and.w	r3, r3, #16
 800b014:	2b10      	cmp	r3, #16
 800b016:	d103      	bne.n	800b020 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2210      	movs	r2, #16
 800b01e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7f6 fdd3 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b02e:	e00b      	b.n	800b048 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7f8 f9c7 	bl	80033c4 <HAL_UART_RxCpltCallback>
}
 800b036:	e007      	b.n	800b048 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	699a      	ldr	r2, [r3, #24]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f042 0208 	orr.w	r2, r2, #8
 800b046:	619a      	str	r2, [r3, #24]
}
 800b048:	bf00      	nop
 800b04a:	3758      	adds	r7, #88	; 0x58
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b0a6      	sub	sp, #152	; 0x98
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b05e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b086:	2b22      	cmp	r3, #34	; 0x22
 800b088:	f040 814f 	bne.w	800b32a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b092:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b096:	e0f6      	b.n	800b286 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0a2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b0a6:	b2d9      	uxtb	r1, r3
 800b0a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b2:	400a      	ands	r2, r1
 800b0b4:	b2d2      	uxtb	r2, r2
 800b0b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b0de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d053      	beq.n	800b192 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d011      	beq.n	800b11a <UART_RxISR_8BIT_FIFOEN+0xca>
 800b0f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00b      	beq.n	800b11a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2201      	movs	r2, #1
 800b108:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b110:	f043 0201 	orr.w	r2, r3, #1
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b11a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b11e:	f003 0302 	and.w	r3, r3, #2
 800b122:	2b00      	cmp	r3, #0
 800b124:	d011      	beq.n	800b14a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00b      	beq.n	800b14a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2202      	movs	r2, #2
 800b138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b140:	f043 0204 	orr.w	r2, r3, #4
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b14a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b00      	cmp	r3, #0
 800b154:	d011      	beq.n	800b17a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00b      	beq.n	800b17a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2204      	movs	r2, #4
 800b168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b170:	f043 0202 	orr.w	r2, r3, #2
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b180:	2b00      	cmp	r3, #0
 800b182:	d006      	beq.n	800b192 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7fe fdd1 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b198:	b29b      	uxth	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d173      	bne.n	800b286 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b1ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1c2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b1c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1c8:	e841 2300 	strex	r3, r2, [r1]
 800b1cc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b1ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1e4      	bne.n	800b19e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3308      	adds	r3, #8
 800b1da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1ea:	f023 0301 	bic.w	r3, r3, #1
 800b1ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b1f8:	657a      	str	r2, [r7, #84]	; 0x54
 800b1fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b200:	e841 2300 	strex	r3, r2, [r1]
 800b204:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e3      	bne.n	800b1d4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2220      	movs	r2, #32
 800b210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d12e      	bne.n	800b280 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b230:	e853 3f00 	ldrex	r3, [r3]
 800b234:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	f023 0310 	bic.w	r3, r3, #16
 800b23c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	461a      	mov	r2, r3
 800b244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b246:	643b      	str	r3, [r7, #64]	; 0x40
 800b248:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b24c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b24e:	e841 2300 	strex	r3, r2, [r1]
 800b252:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1e6      	bne.n	800b228 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	f003 0310 	and.w	r3, r3, #16
 800b264:	2b10      	cmp	r3, #16
 800b266:	d103      	bne.n	800b270 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2210      	movs	r2, #16
 800b26e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7f6 fcab 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
 800b27e:	e002      	b.n	800b286 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7f8 f89f 	bl	80033c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b286:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d006      	beq.n	800b29c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b28e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	f47f aefe 	bne.w	800b098 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b2a6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d045      	beq.n	800b33a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d23e      	bcs.n	800b33a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	e853 3f00 	ldrex	r3, [r3]
 800b2ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3308      	adds	r3, #8
 800b2da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b2dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e4:	e841 2300 	strex	r3, r2, [r1]
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1e5      	bne.n	800b2bc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a14      	ldr	r2, [pc, #80]	; (800b344 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800b2f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	60bb      	str	r3, [r7, #8]
   return(result);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f043 0320 	orr.w	r3, r3, #32
 800b30a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b314:	61bb      	str	r3, [r7, #24]
 800b316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6979      	ldr	r1, [r7, #20]
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	613b      	str	r3, [r7, #16]
   return(result);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e6      	bne.n	800b2f6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b328:	e007      	b.n	800b33a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	699a      	ldr	r2, [r3, #24]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f042 0208 	orr.w	r2, r2, #8
 800b338:	619a      	str	r2, [r3, #24]
}
 800b33a:	bf00      	nop
 800b33c:	3798      	adds	r7, #152	; 0x98
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	0800ad91 	.word	0x0800ad91

0800b348 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b0a8      	sub	sp, #160	; 0xa0
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b356:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37e:	2b22      	cmp	r3, #34	; 0x22
 800b380:	f040 8153 	bne.w	800b62a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b38a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b38e:	e0fa      	b.n	800b586 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b3a2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b3a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b8:	1c9a      	adds	r2, r3, #2
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3de:	f003 0307 	and.w	r3, r3, #7
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d053      	beq.n	800b48e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d011      	beq.n	800b416 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b3f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00b      	beq.n	800b416 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2201      	movs	r2, #1
 800b404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40c:	f043 0201 	orr.w	r2, r3, #1
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b41a:	f003 0302 	and.w	r3, r3, #2
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d011      	beq.n	800b446 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00b      	beq.n	800b446 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2202      	movs	r2, #2
 800b434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b43c:	f043 0204 	orr.w	r2, r3, #4
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b446:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b44a:	f003 0304 	and.w	r3, r3, #4
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d011      	beq.n	800b476 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00b      	beq.n	800b476 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2204      	movs	r2, #4
 800b464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b46c:	f043 0202 	orr.w	r2, r3, #2
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d006      	beq.n	800b48e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7fe fc53 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b494:	b29b      	uxth	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d175      	bne.n	800b586 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4be:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4c4:	e841 2300 	strex	r3, r2, [r1]
 800b4c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e4      	bne.n	800b49a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4da:	e853 3f00 	ldrex	r3, [r3]
 800b4de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4e6:	f023 0301 	bic.w	r3, r3, #1
 800b4ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b4fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b500:	e841 2300 	strex	r3, r2, [r1]
 800b504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e1      	bne.n	800b4d0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2220      	movs	r2, #32
 800b510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d12e      	bne.n	800b580 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	e853 3f00 	ldrex	r3, [r3]
 800b534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b538:	f023 0310 	bic.w	r3, r3, #16
 800b53c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b546:	647b      	str	r3, [r7, #68]	; 0x44
 800b548:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b54c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e6      	bne.n	800b528 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	f003 0310 	and.w	r3, r3, #16
 800b564:	2b10      	cmp	r3, #16
 800b566:	d103      	bne.n	800b570 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2210      	movs	r2, #16
 800b56e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7f6 fb2b 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
 800b57e:	e002      	b.n	800b586 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7f7 ff1f 	bl	80033c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b586:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d006      	beq.n	800b59c <UART_RxISR_16BIT_FIFOEN+0x254>
 800b58e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b592:	f003 0320 	and.w	r3, r3, #32
 800b596:	2b00      	cmp	r3, #0
 800b598:	f47f aefa 	bne.w	800b390 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b5a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d045      	beq.n	800b63a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5b4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d23e      	bcs.n	800b63a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	e853 3f00 	ldrex	r3, [r3]
 800b5ca:	623b      	str	r3, [r7, #32]
   return(result);
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5d2:	677b      	str	r3, [r7, #116]	; 0x74
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3308      	adds	r3, #8
 800b5da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b5dc:	633a      	str	r2, [r7, #48]	; 0x30
 800b5de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e5      	bne.n	800b5bc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a14      	ldr	r2, [pc, #80]	; (800b644 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800b5f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	e853 3f00 	ldrex	r3, [r3]
 800b602:	60fb      	str	r3, [r7, #12]
   return(result);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f043 0320 	orr.w	r3, r3, #32
 800b60a:	673b      	str	r3, [r7, #112]	; 0x70
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	461a      	mov	r2, r3
 800b612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b614:	61fb      	str	r3, [r7, #28]
 800b616:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b618:	69b9      	ldr	r1, [r7, #24]
 800b61a:	69fa      	ldr	r2, [r7, #28]
 800b61c:	e841 2300 	strex	r3, r2, [r1]
 800b620:	617b      	str	r3, [r7, #20]
   return(result);
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1e6      	bne.n	800b5f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b628:	e007      	b.n	800b63a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	699a      	ldr	r2, [r3, #24]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f042 0208 	orr.w	r2, r2, #8
 800b638:	619a      	str	r2, [r3, #24]
}
 800b63a:	bf00      	nop
 800b63c:	37a0      	adds	r7, #160	; 0xa0
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	0800aef1 	.word	0x0800aef1

0800b648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	bc80      	pop	{r7}
 800b658:	4770      	bx	lr

0800b65a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b662:	bf00      	nop
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	bc80      	pop	{r7}
 800b66a:	4770      	bx	lr

0800b66c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr

0800b67e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b088      	sub	sp, #32
 800b682:	af02      	add	r7, sp, #8
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	1d3b      	adds	r3, r7, #4
 800b688:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b696:	2b01      	cmp	r3, #1
 800b698:	d101      	bne.n	800b69e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b69a:	2302      	movs	r3, #2
 800b69c:	e046      	b.n	800b72c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2224      	movs	r2, #36	; 0x24
 800b6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 0201 	bic.w	r2, r2, #1
 800b6bc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d105      	bne.n	800b6e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b6d8:	1d3b      	adds	r3, r7, #4
 800b6da:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 f9a5 	bl	800ba2e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f042 0201 	orr.w	r2, r2, #1
 800b6f2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6f4:	f7f6 ff18 	bl	8002528 <HAL_GetTick>
 800b6f8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	2200      	movs	r2, #0
 800b704:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f7fe fe79 	bl	800a400 <UART_WaitOnFlagUntilTimeout>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	75fb      	strb	r3, [r7, #23]
 800b718:	e003      	b.n	800b722 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2220      	movs	r2, #32
 800b71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3718      	adds	r7, #24
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b734:	b480      	push	{r7}
 800b736:	b089      	sub	sp, #36	; 0x24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b742:	2b01      	cmp	r3, #1
 800b744:	d101      	bne.n	800b74a <HAL_UARTEx_EnableStopMode+0x16>
 800b746:	2302      	movs	r3, #2
 800b748:	e021      	b.n	800b78e <HAL_UARTEx_EnableStopMode+0x5a>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f043 0302 	orr.w	r3, r3, #2
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	61bb      	str	r3, [r7, #24]
 800b772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	6979      	ldr	r1, [r7, #20]
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	613b      	str	r3, [r7, #16]
   return(result);
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e6      	bne.n	800b752 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3724      	adds	r7, #36	; 0x24
 800b792:	46bd      	mov	sp, r7
 800b794:	bc80      	pop	{r7}
 800b796:	4770      	bx	lr

0800b798 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d101      	bne.n	800b7ae <HAL_UARTEx_EnableFifoMode+0x16>
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	e02b      	b.n	800b806 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2224      	movs	r2, #36	; 0x24
 800b7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f022 0201 	bic.w	r2, r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b7e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f940 	bl	800ba74 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b80e:	b480      	push	{r7}
 800b810:	b085      	sub	sp, #20
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d101      	bne.n	800b824 <HAL_UARTEx_DisableFifoMode+0x16>
 800b820:	2302      	movs	r3, #2
 800b822:	e027      	b.n	800b874 <HAL_UARTEx_DisableFifoMode+0x66>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2224      	movs	r2, #36	; 0x24
 800b830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f022 0201 	bic.w	r2, r2, #1
 800b84a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b852:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2220      	movs	r2, #32
 800b866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	bc80      	pop	{r7}
 800b87c:	4770      	bx	lr

0800b87e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d101      	bne.n	800b896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b892:	2302      	movs	r3, #2
 800b894:	e02d      	b.n	800b8f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2224      	movs	r2, #36	; 0x24
 800b8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f022 0201 	bic.w	r2, r2, #1
 800b8bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f8ce 	bl	800ba74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2220      	movs	r2, #32
 800b8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d101      	bne.n	800b912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b90e:	2302      	movs	r3, #2
 800b910:	e02d      	b.n	800b96e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2224      	movs	r2, #36	; 0x24
 800b91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 0201 	bic.w	r2, r2, #1
 800b938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f890 	bl	800ba74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2220      	movs	r2, #32
 800b960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b08c      	sub	sp, #48	; 0x30
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	4613      	mov	r3, r2
 800b982:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b98a:	2b20      	cmp	r3, #32
 800b98c:	d14a      	bne.n	800ba24 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b994:	88fb      	ldrh	r3, [r7, #6]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e043      	b.n	800ba26 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d101      	bne.n	800b9ac <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	e03c      	b.n	800ba26 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b9ba:	88fb      	ldrh	r3, [r7, #6]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	68b9      	ldr	r1, [r7, #8]
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f7fe ff0d 	bl	800a7e0 <UART_Start_Receive_DMA>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b9cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d124      	bne.n	800ba1e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d11d      	bne.n	800ba18 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2210      	movs	r2, #16
 800b9e2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	e853 3f00 	ldrex	r3, [r3]
 800b9f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f043 0310 	orr.w	r3, r3, #16
 800b9f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
 800ba04:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba06:	6a39      	ldr	r1, [r7, #32]
 800ba08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0a:	e841 2300 	strex	r3, r2, [r1]
 800ba0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1e6      	bne.n	800b9e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800ba16:	e002      	b.n	800ba1e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ba1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba22:	e000      	b.n	800ba26 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ba24:	2302      	movs	r3, #2
  }
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3730      	adds	r7, #48	; 0x30
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	60f8      	str	r0, [r7, #12]
 800ba36:	1d3b      	adds	r3, r7, #4
 800ba38:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f023 0210 	bic.w	r2, r3, #16
 800ba46:	893b      	ldrh	r3, [r7, #8]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800ba5c:	7abb      	ldrb	r3, [r7, #10]
 800ba5e:	061a      	lsls	r2, r3, #24
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	430a      	orrs	r2, r1
 800ba66:	605a      	str	r2, [r3, #4]
}
 800ba68:	bf00      	nop
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc80      	pop	{r7}
 800ba70:	4770      	bx	lr
	...

0800ba74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d108      	bne.n	800ba96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba94:	e031      	b.n	800bafa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba96:	2308      	movs	r3, #8
 800ba98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba9a:	2308      	movs	r3, #8
 800ba9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	0e5b      	lsrs	r3, r3, #25
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	f003 0307 	and.w	r3, r3, #7
 800baac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	0f5b      	lsrs	r3, r3, #29
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	f003 0307 	and.w	r3, r3, #7
 800babc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800babe:	7bbb      	ldrb	r3, [r7, #14]
 800bac0:	7b3a      	ldrb	r2, [r7, #12]
 800bac2:	4910      	ldr	r1, [pc, #64]	; (800bb04 <UARTEx_SetNbDataToProcess+0x90>)
 800bac4:	5c8a      	ldrb	r2, [r1, r2]
 800bac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800baca:	7b3a      	ldrb	r2, [r7, #12]
 800bacc:	490e      	ldr	r1, [pc, #56]	; (800bb08 <UARTEx_SetNbDataToProcess+0x94>)
 800bace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bad0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	7b7a      	ldrb	r2, [r7, #13]
 800bae0:	4908      	ldr	r1, [pc, #32]	; (800bb04 <UARTEx_SetNbDataToProcess+0x90>)
 800bae2:	5c8a      	ldrb	r2, [r1, r2]
 800bae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bae8:	7b7a      	ldrb	r2, [r7, #13]
 800baea:	4907      	ldr	r1, [pc, #28]	; (800bb08 <UARTEx_SetNbDataToProcess+0x94>)
 800baec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baee:	fb93 f3f2 	sdiv	r3, r3, r2
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bafa:	bf00      	nop
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bc80      	pop	{r7}
 800bb02:	4770      	bx	lr
 800bb04:	0801db4c 	.word	0x0801db4c
 800bb08:	0801db54 	.word	0x0801db54

0800bb0c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800bb10:	f7f6 fbaa 	bl	8002268 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800bb14:	f000 f820 	bl	800bb58 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800bb18:	bf00      	nop
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	f010 fd12 	bl	801c54c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800bb28:	bf00      	nop
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bb30:	f3bf 8f4f 	dsb	sy
}
 800bb34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bb36:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <__NVIC_SystemReset+0x24>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bb3e:	4904      	ldr	r1, [pc, #16]	; (800bb50 <__NVIC_SystemReset+0x24>)
 800bb40:	4b04      	ldr	r3, [pc, #16]	; (800bb54 <__NVIC_SystemReset+0x28>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb46:	f3bf 8f4f 	dsb	sy
}
 800bb4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bb4c:	bf00      	nop
 800bb4e:	e7fd      	b.n	800bb4c <__NVIC_SystemReset+0x20>
 800bb50:	e000ed00 	.word	0xe000ed00
 800bb54:	05fa0004 	.word	0x05fa0004

0800bb58 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	607b      	str	r3, [r7, #4]
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800bb62:	1d3b      	adds	r3, r7, #4
 800bb64:	4619      	mov	r1, r3
 800bb66:	2000      	movs	r0, #0
 800bb68:	f002 ff52 	bl	800ea10 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800bb6c:	1d3b      	adds	r3, r7, #4
 800bb6e:	4619      	mov	r1, r3
 800bb70:	2001      	movs	r0, #1
 800bb72:	f002 ff4d 	bl	800ea10 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800bb76:	2300      	movs	r3, #0
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	4b2f      	ldr	r3, [pc, #188]	; (800bc38 <LoRaWAN_Init+0xe0>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bb82:	482e      	ldr	r0, [pc, #184]	; (800bc3c <LoRaWAN_Init+0xe4>)
 800bb84:	f010 fe82 	bl	801c88c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800bb88:	2300      	movs	r3, #0
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	4b2c      	ldr	r3, [pc, #176]	; (800bc40 <LoRaWAN_Init+0xe8>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bb94:	482b      	ldr	r0, [pc, #172]	; (800bc44 <LoRaWAN_Init+0xec>)
 800bb96:	f010 fe79 	bl	801c88c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	4b2a      	ldr	r3, [pc, #168]	; (800bc48 <LoRaWAN_Init+0xf0>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bba6:	4829      	ldr	r0, [pc, #164]	; (800bc4c <LoRaWAN_Init+0xf4>)
 800bba8:	f010 fe70 	bl	801c88c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800bbac:	2300      	movs	r3, #0
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	4b27      	ldr	r3, [pc, #156]	; (800bc50 <LoRaWAN_Init+0xf8>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800bbb8:	4826      	ldr	r0, [pc, #152]	; (800bc54 <LoRaWAN_Init+0xfc>)
 800bbba:	f010 fe67 	bl	801c88c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800bbbe:	4a26      	ldr	r2, [pc, #152]	; (800bc58 <LoRaWAN_Init+0x100>)
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f010 fdbe 	bl	801c744 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800bbc8:	4a24      	ldr	r2, [pc, #144]	; (800bc5c <LoRaWAN_Init+0x104>)
 800bbca:	2100      	movs	r1, #0
 800bbcc:	2002      	movs	r0, #2
 800bbce:	f010 fdb9 	bl	801c744 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800bbd2:	4a23      	ldr	r2, [pc, #140]	; (800bc60 <LoRaWAN_Init+0x108>)
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	2004      	movs	r0, #4
 800bbd8:	f010 fdb4 	bl	801c744 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800bbdc:	4a21      	ldr	r2, [pc, #132]	; (800bc64 <LoRaWAN_Init+0x10c>)
 800bbde:	2100      	movs	r1, #0
 800bbe0:	2008      	movs	r0, #8
 800bbe2:	f010 fdaf 	bl	801c744 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800bbe6:	f000 fb3d 	bl	800c264 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800bbea:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800bbee:	481e      	ldr	r0, [pc, #120]	; (800bc68 <LoRaWAN_Init+0x110>)
 800bbf0:	f001 fff2 	bl	800dbd8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800bbf4:	481d      	ldr	r0, [pc, #116]	; (800bc6c <LoRaWAN_Init+0x114>)
 800bbf6:	f002 f84d 	bl	800dc94 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800bbfa:	4814      	ldr	r0, [pc, #80]	; (800bc4c <LoRaWAN_Init+0xf4>)
 800bbfc:	f010 fe7c 	bl	801c8f8 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800bc00:	4b1b      	ldr	r3, [pc, #108]	; (800bc70 <LoRaWAN_Init+0x118>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	4a1b      	ldr	r2, [pc, #108]	; (800bc74 <LoRaWAN_Init+0x11c>)
 800bc06:	7812      	ldrb	r2, [r2, #0]
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f002 f9bc 	bl	800df88 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800bc10:	4b19      	ldr	r3, [pc, #100]	; (800bc78 <LoRaWAN_Init+0x120>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10b      	bne.n	800bc30 <LoRaWAN_Init+0xd8>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800bc18:	4b18      	ldr	r3, [pc, #96]	; (800bc7c <LoRaWAN_Init+0x124>)
 800bc1a:	6819      	ldr	r1, [r3, #0]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <LoRaWAN_Init+0x128>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	4817      	ldr	r0, [pc, #92]	; (800bc84 <LoRaWAN_Init+0x12c>)
 800bc26:	f010 fe31 	bl	801c88c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800bc2a:	4816      	ldr	r0, [pc, #88]	; (800bc84 <LoRaWAN_Init+0x12c>)
 800bc2c:	f010 fe64 	bl	801c8f8 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	0800bfa1 	.word	0x0800bfa1
 800bc3c:	20000b3c 	.word	0x20000b3c
 800bc40:	0800bfb3 	.word	0x0800bfb3
 800bc44:	20000b54 	.word	0x20000b54
 800bc48:	0800bfc5 	.word	0x0800bfc5
 800bc4c:	20000b6c 	.word	0x20000b6c
 800bc50:	0800c189 	.word	0x0800c189
 800bc54:	20000a30 	.word	0x20000a30
 800bc58:	0800df1d 	.word	0x0800df1d
 800bc5c:	0800bd89 	.word	0x0800bd89
 800bc60:	0800c1ad 	.word	0x0800c1ad
 800bc64:	0800c13d 	.word	0x0800c13d
 800bc68:	20000014 	.word	0x20000014
 800bc6c:	20000060 	.word	0x20000060
 800bc70:	20000010 	.word	0x20000010
 800bc74:	20000011 	.word	0x20000011
 800bc78:	20000a14 	.word	0x20000a14
 800bc7c:	20000074 	.word	0x20000074
 800bc80:	0800bf7d 	.word	0x0800bf7d
 800bc84:	20000a18 	.word	0x20000a18

0800bc88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800bc92:	88fb      	ldrh	r3, [r7, #6]
 800bc94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc98:	d104      	bne.n	800bca4 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	2002      	movs	r0, #2
 800bc9e:	f010 fd73 	bl	801c788 <UTIL_SEQ_SetTask>
      }
      break;
 800bca2:	e000      	b.n	800bca6 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800bca4:	bf00      	nop
  }
}
 800bca6:	bf00      	nop
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d057      	beq.n	800bd74 <OnRxData+0xc4>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800bcc4:	482d      	ldr	r0, [pc, #180]	; (800bd7c <OnRxData+0xcc>)
 800bcc6:	f010 fe17 	bl	801c8f8 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d04b      	beq.n	800bd6a <OnRxData+0xba>
    {
      if (appData != NULL)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d048      	beq.n	800bd6a <OnRxData+0xba>
      {
        RxPort = appData->Port;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d041      	beq.n	800bd6a <OnRxData+0xba>
        {
    switch (appData->Port)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d021      	beq.n	800bd32 <OnRxData+0x82>
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d13d      	bne.n	800bd6e <OnRxData+0xbe>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d117      	bne.n	800bd2a <OnRxData+0x7a>
        {
          switch (appData->Buffer[0])
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d00e      	beq.n	800bd22 <OnRxData+0x72>
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	dc12      	bgt.n	800bd2e <OnRxData+0x7e>
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <OnRxData+0x62>
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d004      	beq.n	800bd1a <OnRxData+0x6a>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800bd10:	e00d      	b.n	800bd2e <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_A);
 800bd12:	2000      	movs	r0, #0
 800bd14:	f002 fac4 	bl	800e2a0 <LmHandlerRequestClass>
              break;
 800bd18:	e00a      	b.n	800bd30 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_B);
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	f002 fac0 	bl	800e2a0 <LmHandlerRequestClass>
              break;
 800bd20:	e006      	b.n	800bd30 <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_C);
 800bd22:	2002      	movs	r0, #2
 800bd24:	f002 fabc 	bl	800e2a0 <LmHandlerRequestClass>
              break;
 800bd28:	e002      	b.n	800bd30 <OnRxData+0x80>
          }
        }
 800bd2a:	bf00      	nop
 800bd2c:	e022      	b.n	800bd74 <OnRxData+0xc4>
              break;
 800bd2e:	bf00      	nop
        break;
 800bd30:	e020      	b.n	800bd74 <OnRxData+0xc4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d11b      	bne.n	800bd72 <OnRxData+0xc2>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	4b0e      	ldr	r3, [pc, #56]	; (800bd80 <OnRxData+0xd0>)
 800bd48:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800bd4a:	4b0d      	ldr	r3, [pc, #52]	; (800bd80 <OnRxData+0xd0>)
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d105      	bne.n	800bd5e <OnRxData+0xae>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800bd52:	2201      	movs	r2, #1
 800bd54:	2120      	movs	r1, #32
 800bd56:	480b      	ldr	r0, [pc, #44]	; (800bd84 <OnRxData+0xd4>)
 800bd58:	f7f9 ff6e 	bl	8005c38 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800bd5c:	e009      	b.n	800bd72 <OnRxData+0xc2>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2120      	movs	r1, #32
 800bd62:	4808      	ldr	r0, [pc, #32]	; (800bd84 <OnRxData+0xd4>)
 800bd64:	f7f9 ff68 	bl	8005c38 <HAL_GPIO_WritePin>
        break;
 800bd68:	e003      	b.n	800bd72 <OnRxData+0xc2>

      default:

        break;
    }
  }
 800bd6a:	bf00      	nop
 800bd6c:	e002      	b.n	800bd74 <OnRxData+0xc4>
        break;
 800bd6e:	bf00      	nop
 800bd70:	e000      	b.n	800bd74 <OnRxData+0xc4>
        break;
 800bd72:	bf00      	nop
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800bd74:	bf00      	nop
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20000b54 	.word	0x20000b54
 800bd80:	20000b3a 	.word	0x20000b3a
 800bd84:	48000400 	.word	0x48000400

0800bd88 <SendTxData>:

static void SendTxData(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08a      	sub	sp, #40	; 0x28
 800bd8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bd8e:	23ff      	movs	r3, #255	; 0xff
 800bd90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800bd94:	f7f6 fa9c 	bl	80022d0 <GetBatteryLevel>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));

  AppData.Port = LORAWAN_USER_APP_PORT;
 800bdaa:	4b69      	ldr	r3, [pc, #420]	; (800bf50 <SendTxData+0x1c8>)
 800bdac:	2202      	movs	r2, #2
 800bdae:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800bdb0:	4b68      	ldr	r3, [pc, #416]	; (800bf54 <SendTxData+0x1cc>)
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	4a68      	ldr	r2, [pc, #416]	; (800bf58 <SendTxData+0x1d0>)
 800bdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdba:	095b      	lsrs	r3, r3, #5
 800bdbc:	b298      	uxth	r0, r3
 800bdbe:	4b64      	ldr	r3, [pc, #400]	; (800bf50 <SendTxData+0x1c8>)
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	1c59      	adds	r1, r3, #1
 800bdc6:	61f9      	str	r1, [r7, #28]
 800bdc8:	4413      	add	r3, r2
 800bdca:	b2c2      	uxtb	r2, r0
 800bdcc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800bdce:	4b61      	ldr	r3, [pc, #388]	; (800bf54 <SendTxData+0x1cc>)
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	4a61      	ldr	r2, [pc, #388]	; (800bf58 <SendTxData+0x1d0>)
 800bdd4:	fba2 1203 	umull	r1, r2, r2, r3
 800bdd8:	0952      	lsrs	r2, r2, #5
 800bdda:	2164      	movs	r1, #100	; 0x64
 800bddc:	fb01 f202 	mul.w	r2, r1, r2
 800bde0:	1a9b      	subs	r3, r3, r2
 800bde2:	b298      	uxth	r0, r3
 800bde4:	4b5a      	ldr	r3, [pc, #360]	; (800bf50 <SendTxData+0x1c8>)
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	1c59      	adds	r1, r3, #1
 800bdec:	61f9      	str	r1, [r7, #28]
 800bdee:	4413      	add	r3, r2
 800bdf0:	b2c2      	uxtb	r2, r0
 800bdf2:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800bdf4:	4b59      	ldr	r3, [pc, #356]	; (800bf5c <SendTxData+0x1d4>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7f4 fb29 	bl	8000450 <__aeabi_f2d>
 800bdfe:	f04f 0200 	mov.w	r2, #0
 800be02:	4b57      	ldr	r3, [pc, #348]	; (800bf60 <SendTxData+0x1d8>)
 800be04:	f7f4 fb7c 	bl	8000500 <__aeabi_dmul>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4610      	mov	r0, r2
 800be0e:	4619      	mov	r1, r3
 800be10:	f7f4 fe10 	bl	8000a34 <__aeabi_d2iz>
 800be14:	4603      	mov	r3, r0
 800be16:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800be18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be1c:	4a4e      	ldr	r2, [pc, #312]	; (800bf58 <SendTxData+0x1d0>)
 800be1e:	fb82 1203 	smull	r1, r2, r2, r3
 800be22:	1152      	asrs	r2, r2, #5
 800be24:	17db      	asrs	r3, r3, #31
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	b218      	sxth	r0, r3
 800be2a:	4b49      	ldr	r3, [pc, #292]	; (800bf50 <SendTxData+0x1c8>)
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	1c59      	adds	r1, r3, #1
 800be32:	61f9      	str	r1, [r7, #28]
 800be34:	4413      	add	r3, r2
 800be36:	b2c2      	uxtb	r2, r0
 800be38:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800be3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be3e:	4a46      	ldr	r2, [pc, #280]	; (800bf58 <SendTxData+0x1d0>)
 800be40:	fb82 1203 	smull	r1, r2, r2, r3
 800be44:	1151      	asrs	r1, r2, #5
 800be46:	17da      	asrs	r2, r3, #31
 800be48:	1a8a      	subs	r2, r1, r2
 800be4a:	2164      	movs	r1, #100	; 0x64
 800be4c:	fb01 f202 	mul.w	r2, r1, r2
 800be50:	1a9b      	subs	r3, r3, r2
 800be52:	b218      	sxth	r0, r3
 800be54:	4b3e      	ldr	r3, [pc, #248]	; (800bf50 <SendTxData+0x1c8>)
 800be56:	685a      	ldr	r2, [r3, #4]
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	1c59      	adds	r1, r3, #1
 800be5c:	61f9      	str	r1, [r7, #28]
 800be5e:	4413      	add	r3, r2
 800be60:	b2c2      	uxtb	r2, r0
 800be62:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800be64:	4b3f      	ldr	r3, [pc, #252]	; (800bf64 <SendTxData+0x1dc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f4 faf1 	bl	8000450 <__aeabi_f2d>
 800be6e:	f04f 0200 	mov.w	r2, #0
 800be72:	4b3b      	ldr	r3, [pc, #236]	; (800bf60 <SendTxData+0x1d8>)
 800be74:	f7f4 fb44 	bl	8000500 <__aeabi_dmul>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4610      	mov	r0, r2
 800be7e:	4619      	mov	r1, r3
 800be80:	f7f4 fdd8 	bl	8000a34 <__aeabi_d2iz>
 800be84:	4603      	mov	r3, r0
 800be86:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800be88:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be8c:	4a32      	ldr	r2, [pc, #200]	; (800bf58 <SendTxData+0x1d0>)
 800be8e:	fb82 1203 	smull	r1, r2, r2, r3
 800be92:	1152      	asrs	r2, r2, #5
 800be94:	17db      	asrs	r3, r3, #31
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	b218      	sxth	r0, r3
 800be9a:	4b2d      	ldr	r3, [pc, #180]	; (800bf50 <SendTxData+0x1c8>)
 800be9c:	685a      	ldr	r2, [r3, #4]
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	1c59      	adds	r1, r3, #1
 800bea2:	61f9      	str	r1, [r7, #28]
 800bea4:	4413      	add	r3, r2
 800bea6:	b2c2      	uxtb	r2, r0
 800bea8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800beaa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800beae:	4a2a      	ldr	r2, [pc, #168]	; (800bf58 <SendTxData+0x1d0>)
 800beb0:	fb82 1203 	smull	r1, r2, r2, r3
 800beb4:	1151      	asrs	r1, r2, #5
 800beb6:	17da      	asrs	r2, r3, #31
 800beb8:	1a8a      	subs	r2, r1, r2
 800beba:	2164      	movs	r1, #100	; 0x64
 800bebc:	fb01 f202 	mul.w	r2, r1, r2
 800bec0:	1a9b      	subs	r3, r3, r2
 800bec2:	b218      	sxth	r0, r3
 800bec4:	4b22      	ldr	r3, [pc, #136]	; (800bf50 <SendTxData+0x1c8>)
 800bec6:	685a      	ldr	r2, [r3, #4]
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	1c59      	adds	r1, r3, #1
 800becc:	61f9      	str	r1, [r7, #28]
 800bece:	4413      	add	r3, r2
 800bed0:	b2c2      	uxtb	r2, r0
 800bed2:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <SendTxData+0x1c8>)
 800beda:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800bedc:	4b22      	ldr	r3, [pc, #136]	; (800bf68 <SendTxData+0x1e0>)
 800bede:	7a5b      	ldrb	r3, [r3, #9]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d007      	beq.n	800bef4 <SendTxData+0x16c>
 800bee4:	f002 f8d2 	bl	800e08c <LmHandlerJoinStatus>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b01      	cmp	r3, #1
 800beec:	d102      	bne.n	800bef4 <SendTxData+0x16c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800beee:	481e      	ldr	r0, [pc, #120]	; (800bf68 <SendTxData+0x1e0>)
 800bef0:	f010 fd70 	bl	801c9d4 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800bef4:	4b1d      	ldr	r3, [pc, #116]	; (800bf6c <SendTxData+0x1e4>)
 800bef6:	78db      	ldrb	r3, [r3, #3]
 800bef8:	2200      	movs	r2, #0
 800befa:	4619      	mov	r1, r3
 800befc:	4814      	ldr	r0, [pc, #80]	; (800bf50 <SendTxData+0x1c8>)
 800befe:	f002 f8e1 	bl	800e0c4 <LmHandlerSend>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800bf08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d007      	beq.n	800bf20 <SendTxData+0x198>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800bf10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bf14:	f113 0f06 	cmn.w	r3, #6
 800bf18:	d102      	bne.n	800bf20 <SendTxData+0x198>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800bf1a:	f002 f82b 	bl	800df74 <LmHandlerGetDutyCycleWaitTime>
 800bf1e:	6278      	str	r0, [r7, #36]	; 0x24
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  }

  if (EventType == TX_ON_TIMER)
 800bf20:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <SendTxData+0x1e8>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10f      	bne.n	800bf48 <SendTxData+0x1c0>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800bf28:	4812      	ldr	r0, [pc, #72]	; (800bf74 <SendTxData+0x1ec>)
 800bf2a:	f010 fd53 	bl	801c9d4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800bf2e:	4b12      	ldr	r3, [pc, #72]	; (800bf78 <SendTxData+0x1f0>)
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	4293      	cmp	r3, r2
 800bf36:	bf38      	it	cc
 800bf38:	4613      	movcc	r3, r2
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	480d      	ldr	r0, [pc, #52]	; (800bf74 <SendTxData+0x1ec>)
 800bf3e:	f010 fdb9 	bl	801cab4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800bf42:	480c      	ldr	r0, [pc, #48]	; (800bf74 <SendTxData+0x1ec>)
 800bf44:	f010 fcd8 	bl	801c8f8 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800bf48:	bf00      	nop
 800bf4a:	3728      	adds	r7, #40	; 0x28
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000078 	.word	0x20000078
 800bf54:	20000668 	.word	0x20000668
 800bf58:	51eb851f 	.word	0x51eb851f
 800bf5c:	2000066c 	.word	0x2000066c
 800bf60:	40590000 	.word	0x40590000
 800bf64:	20000670 	.word	0x20000670
 800bf68:	20000b6c 	.word	0x20000b6c
 800bf6c:	20000060 	.word	0x20000060
 800bf70:	20000a14 	.word	0x20000a14
 800bf74:	20000a18 	.word	0x20000a18
 800bf78:	20000074 	.word	0x20000074

0800bf7c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bf84:	2100      	movs	r1, #0
 800bf86:	2002      	movs	r0, #2
 800bf88:	f010 fbfe 	bl	801c788 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800bf8c:	4803      	ldr	r0, [pc, #12]	; (800bf9c <OnTxTimerEvent+0x20>)
 800bf8e:	f010 fcb3 	bl	801c8f8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800bf92:	bf00      	nop
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20000a18 	.word	0x20000a18

0800bfa0 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bc80      	pop	{r7}
 800bfb0:	4770      	bx	lr

0800bfb2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800bfba:	bf00      	nop
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bc80      	pop	{r7}
 800bfc2:	4770      	bx	lr

0800bfc4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bc80      	pop	{r7}
 800bfd4:	4770      	bx	lr
	...

0800bfd8 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d006      	beq.n	800bff4 <OnTxData+0x1c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <OnTxData+0x1c>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800bfee:	4803      	ldr	r0, [pc, #12]	; (800bffc <OnTxData+0x24>)
 800bff0:	f010 fc82 	bl	801c8f8 <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	20000b3c 	.word	0x20000b3c

0800c000 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d012      	beq.n	800c034 <OnJoinRequest+0x34>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d103      	bne.n	800c020 <OnJoinRequest+0x20>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800c018:	4808      	ldr	r0, [pc, #32]	; (800c03c <OnJoinRequest+0x3c>)
 800c01a:	f010 fcdb 	bl	801c9d4 <UTIL_TIMER_Stop>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c01e:	e009      	b.n	800c034 <OnJoinRequest+0x34>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	799b      	ldrb	r3, [r3, #6]
 800c024:	2b02      	cmp	r3, #2
 800c026:	d105      	bne.n	800c034 <OnJoinRequest+0x34>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c028:	4b05      	ldr	r3, [pc, #20]	; (800c040 <OnJoinRequest+0x40>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	2101      	movs	r1, #1
 800c02e:	4618      	mov	r0, r3
 800c030:	f001 ffaa 	bl	800df88 <LmHandlerJoin>
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20000b6c 	.word	0x20000b6c
 800c040:	20000010 	.word	0x20000010

0800c044 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <OnBeaconStatusChange+0x1a>
  {
    switch (params->State)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b02      	cmp	r3, #2
 800c058:	d003      	beq.n	800c062 <OnBeaconStatusChange+0x1e>
 800c05a:	2b03      	cmp	r3, #3
        break;
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
        break;
 800c05c:	e002      	b.n	800c064 <OnBeaconStatusChange+0x20>
      }
    }
  }
 800c05e:	bf00      	nop
 800c060:	e000      	b.n	800c064 <OnBeaconStatusChange+0x20>
        break;
 800c062:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	bc80      	pop	{r7}
 800c06c:	4770      	bx	lr

0800c06e <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c06e:	b480      	push	{r7}
 800c070:	b083      	sub	sp, #12
 800c072:	af00      	add	r7, sp, #0
 800c074:	4603      	mov	r3, r0
 800c076:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bc80      	pop	{r7}
 800c080:	4770      	bx	lr

0800c082 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c086:	2100      	movs	r1, #0
 800c088:	2001      	movs	r0, #1
 800c08a:	f010 fb7d 	bl	801c788 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c08e:	bf00      	nop
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c09c:	4a0d      	ldr	r2, [pc, #52]	; (800c0d4 <OnTxPeriodicityChanged+0x40>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c0a2:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <OnTxPeriodicityChanged+0x40>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d103      	bne.n	800c0b2 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c0aa:	4b0a      	ldr	r3, [pc, #40]	; (800c0d4 <OnTxPeriodicityChanged+0x40>)
 800c0ac:	f242 7210 	movw	r2, #10000	; 0x2710
 800c0b0:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c0b2:	4809      	ldr	r0, [pc, #36]	; (800c0d8 <OnTxPeriodicityChanged+0x44>)
 800c0b4:	f010 fc8e 	bl	801c9d4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c0b8:	4b06      	ldr	r3, [pc, #24]	; (800c0d4 <OnTxPeriodicityChanged+0x40>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4806      	ldr	r0, [pc, #24]	; (800c0d8 <OnTxPeriodicityChanged+0x44>)
 800c0c0:	f010 fcf8 	bl	801cab4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c0c4:	4804      	ldr	r0, [pc, #16]	; (800c0d8 <OnTxPeriodicityChanged+0x44>)
 800c0c6:	f010 fc17 	bl	801c8f8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000074 	.word	0x20000074
 800c0d8:	20000a18 	.word	0x20000a18

0800c0dc <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c0e6:	4a04      	ldr	r2, [pc, #16]	; (800c0f8 <OnTxFrameCtrlChanged+0x1c>)
 800c0e8:	79fb      	ldrb	r3, [r7, #7]
 800c0ea:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bc80      	pop	{r7}
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	20000060 	.word	0x20000060

0800c0fc <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c106:	4a04      	ldr	r2, [pc, #16]	; (800c118 <OnPingSlotPeriodicityChanged+0x1c>)
 800c108:	79fb      	ldrb	r3, [r7, #7]
 800c10a:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	bc80      	pop	{r7}
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	20000060 	.word	0x20000060

0800c11c <OnSystemReset>:

static void OnSystemReset(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c120:	f002 fca7 	bl	800ea72 <LmHandlerHalt>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d106      	bne.n	800c138 <OnSystemReset+0x1c>
 800c12a:	f001 ffaf 	bl	800e08c <LmHandlerJoinStatus>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b01      	cmp	r3, #1
 800c132:	d101      	bne.n	800c138 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c134:	f7ff fcfa 	bl	800bb2c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c138:	bf00      	nop
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <StopJoin>:

static void StopJoin(void)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c140:	480d      	ldr	r0, [pc, #52]	; (800c178 <StopJoin+0x3c>)
 800c142:	f010 fc47 	bl	801c9d4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c146:	f002 fc87 	bl	800ea58 <LmHandlerStop>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10e      	bne.n	800c16e <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800c150:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <StopJoin+0x40>)
 800c152:	2201      	movs	r2, #1
 800c154:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c156:	480a      	ldr	r0, [pc, #40]	; (800c180 <StopJoin+0x44>)
 800c158:	f001 fd9c 	bl	800dc94 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c15c:	4b07      	ldr	r3, [pc, #28]	; (800c17c <StopJoin+0x40>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2101      	movs	r1, #1
 800c162:	4618      	mov	r0, r3
 800c164:	f001 ff10 	bl	800df88 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c168:	4803      	ldr	r0, [pc, #12]	; (800c178 <StopJoin+0x3c>)
 800c16a:	f010 fbc5 	bl	801c8f8 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c16e:	4805      	ldr	r0, [pc, #20]	; (800c184 <StopJoin+0x48>)
 800c170:	f010 fbc2 	bl	801c8f8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c174:	bf00      	nop
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20000a18 	.word	0x20000a18
 800c17c:	20000010 	.word	0x20000010
 800c180:	20000060 	.word	0x20000060
 800c184:	20000a30 	.word	0x20000a30

0800c188 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c190:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <OnStopJoinTimerEvent+0x20>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d103      	bne.n	800c1a0 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c198:	2100      	movs	r1, #0
 800c19a:	2008      	movs	r0, #8
 800c19c:	f010 faf4 	bl	801c788 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000010 	.word	0x20000010

0800c1ac <StoreContext>:

static void StoreContext(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c1b2:	23ff      	movs	r3, #255	; 0xff
 800c1b4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c1b6:	f002 fc69 	bl	800ea8c <LmHandlerNvmDataStore>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c1be:	bf00      	nop
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bc80      	pop	{r7}
 800c1d8:	4770      	bx	lr
	...

0800c1dc <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800c1e6:	f7f9 f8db 	bl	80053a0 <HAL_FLASH_Unlock>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d11c      	bne.n	800c22a <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800c1f0:	4b10      	ldr	r3, [pc, #64]	; (800c234 <OnStoreContextRequest+0x58>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	029a      	lsls	r2, r3, #10
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <OnStoreContextRequest+0x5c>)
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800c1fe:	fbb2 f1f3 	udiv	r1, r2, r3
 800c202:	fb01 f303 	mul.w	r3, r1, r3
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	0adb      	lsrs	r3, r3, #11
 800c20a:	2200      	movs	r2, #0
 800c20c:	2101      	movs	r1, #1
 800c20e:	4618      	mov	r0, r3
 800c210:	f7f5 f99b 	bl	800154a <FLASH_IF_EraseByPages>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d105      	bne.n	800c226 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800c21a:	2300      	movs	r3, #0
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	4806      	ldr	r0, [pc, #24]	; (800c23c <OnStoreContextRequest+0x60>)
 800c222:	f7f5 f8b1 	bl	8001388 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800c226:	f7f9 f8dd 	bl	80053e4 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c22a:	bf00      	nop
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	1fff75e0 	.word	0x1fff75e0
 800c238:	03fffc00 	.word	0x03fffc00
 800c23c:	0803f000 	.word	0x0803f000

0800c240 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	461a      	mov	r2, r3
 800c250:	4903      	ldr	r1, [pc, #12]	; (800c260 <OnRestoreContextRequest+0x20>)
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f00f fd78 	bl	801bd48 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	0803f000 	.word	0x0803f000

0800c264 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800c268:	4b15      	ldr	r3, [pc, #84]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c26e:	4b14      	ldr	r3, [pc, #80]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c270:	2200      	movs	r2, #0
 800c272:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c274:	4b12      	ldr	r3, [pc, #72]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c276:	2200      	movs	r2, #0
 800c278:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c27a:	4b11      	ldr	r3, [pc, #68]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f043 0320 	orr.w	r3, r3, #32
 800c288:	4a0d      	ldr	r2, [pc, #52]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c28a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c28c:	4b0c      	ldr	r3, [pc, #48]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10c      	bne.n	800c2ae <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <LoraInfo_Init+0x60>)
 800c296:	2200      	movs	r2, #0
 800c298:	2100      	movs	r1, #0
 800c29a:	2000      	movs	r0, #0
 800c29c:	f010 fda4 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c2a0:	bf00      	nop
 800c2a2:	f010 fd8f 	bl	801cdc4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d1fa      	bne.n	800c2a2 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c2ac:	e7fe      	b.n	800c2ac <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c2ae:	4b04      	ldr	r3, [pc, #16]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800c2b4:	4b02      	ldr	r3, [pc, #8]	; (800c2c0 <LoraInfo_Init+0x5c>)
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c2ba:	bf00      	nop
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20000b84 	.word	0x20000b84
 800c2c4:	0801d560 	.word	0x0801d560

0800c2c8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <LoraInfo_GetPtr+0x10>)
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bc80      	pop	{r7}
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	20000b84 	.word	0x20000b84

0800c2dc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c2e0:	f7f7 f8d3 	bl	800348a <BSP_RADIO_Init>
 800c2e4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7f7 f8f8 	bl	80034ec <BSP_RADIO_ConfigRFSwitch>
 800c2fc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c30a:	f7f7 f93d 	bl	8003588 <BSP_RADIO_GetTxConfig>
 800c30e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c310:	4618      	mov	r0, r3
 800c312:	bd80      	pop	{r7, pc}

0800c314 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c318:	f7f7 f93d 	bl	8003596 <BSP_RADIO_IsTCXO>
 800c31c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c31e:	4618      	mov	r0, r3
 800c320:	bd80      	pop	{r7, pc}

0800c322 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c326:	f7f7 f93d 	bl	80035a4 <BSP_RADIO_IsDCDC>
 800c32a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c33a:	79fb      	ldrb	r3, [r7, #7]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7f7 f938 	bl	80035b2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800c342:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	33f1      	adds	r3, #241	; 0xf1
 800c358:	2210      	movs	r2, #16
 800c35a:	2100      	movs	r1, #0
 800c35c:	4618      	mov	r0, r3
 800c35e:	f00c fa29 	bl	80187b4 <memset1>
    ctx->M_n = 0;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	22f0      	movs	r2, #240	; 0xf0
 800c36e:	2100      	movs	r1, #0
 800c370:	4618      	mov	r0, r3
 800c372:	f00c fa1f 	bl	80187b4 <memset1>
}
 800c376:	bf00      	nop
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	461a      	mov	r2, r3
 800c38c:	2110      	movs	r1, #16
 800c38e:	6838      	ldr	r0, [r7, #0]
 800c390:	f000 fe5c 	bl	800d04c <lorawan_aes_set_key>
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08c      	sub	sp, #48	; 0x30
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 80a1 	beq.w	800c4f6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3ba:	f1c3 0310 	rsb	r3, r3, #16
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	bf28      	it	cs
 800c3c4:	4613      	movcs	r3, r2
 800c3c6:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f203 1201 	addw	r2, r3, #257	; 0x101
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3d4:	4413      	add	r3, r2
 800c3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3d8:	b292      	uxth	r2, r2
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f00c f9ae 	bl	801873e <memcpy1>
        ctx->M_n += mlen;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ea:	441a      	add	r2, r3
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3f8:	2b0f      	cmp	r3, #15
 800c3fa:	f240 808d 	bls.w	800c518 <AES_CMAC_Update+0x17c>
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	429a      	cmp	r2, r3
 800c404:	f000 8088 	beq.w	800c518 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c408:	2300      	movs	r3, #0
 800c40a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c40c:	e015      	b.n	800c43a <AES_CMAC_Update+0x9e>
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	4413      	add	r3, r2
 800c414:	33f1      	adds	r3, #241	; 0xf1
 800c416:	781a      	ldrb	r2, [r3, #0]
 800c418:	68f9      	ldr	r1, [r7, #12]
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	440b      	add	r3, r1
 800c41e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	4053      	eors	r3, r2
 800c426:	b2d9      	uxtb	r1, r3
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	4413      	add	r3, r2
 800c42e:	33f1      	adds	r3, #241	; 0xf1
 800c430:	460a      	mov	r2, r1
 800c432:	701a      	strb	r2, [r3, #0]
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	3301      	adds	r3, #1
 800c438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	2b0f      	cmp	r3, #15
 800c43e:	dde6      	ble.n	800c40e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c446:	f107 0314 	add.w	r3, r7, #20
 800c44a:	2210      	movs	r2, #16
 800c44c:	4618      	mov	r0, r3
 800c44e:	f00c f976 	bl	801873e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	f107 0114 	add.w	r1, r7, #20
 800c458:	f107 0314 	add.w	r3, r7, #20
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fed3 	bl	800d208 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	33f1      	adds	r3, #241	; 0xf1
 800c466:	f107 0114 	add.w	r1, r7, #20
 800c46a:	2210      	movs	r2, #16
 800c46c:	4618      	mov	r0, r3
 800c46e:	f00c f966 	bl	801873e <memcpy1>

        data += mlen;
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	4413      	add	r3, r2
 800c478:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c482:	e038      	b.n	800c4f6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c484:	2300      	movs	r3, #0
 800c486:	62bb      	str	r3, [r7, #40]	; 0x28
 800c488:	e013      	b.n	800c4b2 <AES_CMAC_Update+0x116>
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	4413      	add	r3, r2
 800c490:	33f1      	adds	r3, #241	; 0xf1
 800c492:	781a      	ldrb	r2, [r3, #0]
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	440b      	add	r3, r1
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	4053      	eors	r3, r2
 800c49e:	b2d9      	uxtb	r1, r3
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a4:	4413      	add	r3, r2
 800c4a6:	33f1      	adds	r3, #241	; 0xf1
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	701a      	strb	r2, [r3, #0]
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b4:	2b0f      	cmp	r3, #15
 800c4b6:	dde8      	ble.n	800c48a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c4be:	f107 0314 	add.w	r3, r7, #20
 800c4c2:	2210      	movs	r2, #16
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f00c f93a 	bl	801873e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	f107 0114 	add.w	r1, r7, #20
 800c4d0:	f107 0314 	add.w	r3, r7, #20
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 fe97 	bl	800d208 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	33f1      	adds	r3, #241	; 0xf1
 800c4de:	f107 0114 	add.w	r1, r7, #20
 800c4e2:	2210      	movs	r2, #16
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f00c f92a 	bl	801873e <memcpy1>

        data += 16;
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	3310      	adds	r3, #16
 800c4ee:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3b10      	subs	r3, #16
 800c4f4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b10      	cmp	r3, #16
 800c4fa:	d8c3      	bhi.n	800c484 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	b292      	uxth	r2, r2
 800c506:	68b9      	ldr	r1, [r7, #8]
 800c508:	4618      	mov	r0, r3
 800c50a:	f00c f918 	bl	801873e <memcpy1>
    ctx->M_n = len;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c516:	e000      	b.n	800c51a <AES_CMAC_Update+0x17e>
            return;
 800c518:	bf00      	nop
}
 800c51a:	3730      	adds	r7, #48	; 0x30
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b092      	sub	sp, #72	; 0x48
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c52a:	f107 031c 	add.w	r3, r7, #28
 800c52e:	2210      	movs	r2, #16
 800c530:	2100      	movs	r1, #0
 800c532:	4618      	mov	r0, r3
 800c534:	f00c f93e 	bl	80187b4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	f107 011c 	add.w	r1, r7, #28
 800c53e:	f107 031c 	add.w	r3, r7, #28
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fe60 	bl	800d208 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c548:	7f3b      	ldrb	r3, [r7, #28]
 800c54a:	b25b      	sxtb	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	da30      	bge.n	800c5b2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c550:	2300      	movs	r3, #0
 800c552:	647b      	str	r3, [r7, #68]	; 0x44
 800c554:	e01b      	b.n	800c58e <AES_CMAC_Final+0x6e>
 800c556:	f107 021c 	add.w	r2, r7, #28
 800c55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	b25a      	sxtb	r2, r3
 800c564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c566:	3301      	adds	r3, #1
 800c568:	3348      	adds	r3, #72	; 0x48
 800c56a:	443b      	add	r3, r7
 800c56c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c570:	09db      	lsrs	r3, r3, #7
 800c572:	b2db      	uxtb	r3, r3
 800c574:	b25b      	sxtb	r3, r3
 800c576:	4313      	orrs	r3, r2
 800c578:	b25b      	sxtb	r3, r3
 800c57a:	b2d9      	uxtb	r1, r3
 800c57c:	f107 021c 	add.w	r2, r7, #28
 800c580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c582:	4413      	add	r3, r2
 800c584:	460a      	mov	r2, r1
 800c586:	701a      	strb	r2, [r3, #0]
 800c588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c58a:	3301      	adds	r3, #1
 800c58c:	647b      	str	r3, [r7, #68]	; 0x44
 800c58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c590:	2b0e      	cmp	r3, #14
 800c592:	dde0      	ble.n	800c556 <AES_CMAC_Final+0x36>
 800c594:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800c5a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5a4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c5a8:	43db      	mvns	r3, r3
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c5b0:	e027      	b.n	800c602 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	643b      	str	r3, [r7, #64]	; 0x40
 800c5b6:	e01b      	b.n	800c5f0 <AES_CMAC_Final+0xd0>
 800c5b8:	f107 021c 	add.w	r2, r7, #28
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5be:	4413      	add	r3, r2
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	005b      	lsls	r3, r3, #1
 800c5c4:	b25a      	sxtb	r2, r3
 800c5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	3348      	adds	r3, #72	; 0x48
 800c5cc:	443b      	add	r3, r7
 800c5ce:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c5d2:	09db      	lsrs	r3, r3, #7
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	b25b      	sxtb	r3, r3
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	b25b      	sxtb	r3, r3
 800c5dc:	b2d9      	uxtb	r1, r3
 800c5de:	f107 021c 	add.w	r2, r7, #28
 800c5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e4:	4413      	add	r3, r2
 800c5e6:	460a      	mov	r2, r1
 800c5e8:	701a      	strb	r2, [r3, #0]
 800c5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	643b      	str	r3, [r7, #64]	; 0x40
 800c5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f2:	2b0e      	cmp	r3, #14
 800c5f4:	dde0      	ble.n	800c5b8 <AES_CMAC_Final+0x98>
 800c5f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c608:	2b10      	cmp	r3, #16
 800c60a:	d11d      	bne.n	800c648 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c610:	e016      	b.n	800c640 <AES_CMAC_Final+0x120>
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c616:	4413      	add	r3, r2
 800c618:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c61c:	781a      	ldrb	r2, [r3, #0]
 800c61e:	f107 011c 	add.w	r1, r7, #28
 800c622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c624:	440b      	add	r3, r1
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	4053      	eors	r3, r2
 800c62a:	b2d9      	uxtb	r1, r3
 800c62c:	683a      	ldr	r2, [r7, #0]
 800c62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c630:	4413      	add	r3, r2
 800c632:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c636:	460a      	mov	r2, r1
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63c:	3301      	adds	r3, #1
 800c63e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c642:	2b0f      	cmp	r3, #15
 800c644:	dde5      	ble.n	800c612 <AES_CMAC_Final+0xf2>
 800c646:	e096      	b.n	800c776 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c648:	7f3b      	ldrb	r3, [r7, #28]
 800c64a:	b25b      	sxtb	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	da30      	bge.n	800c6b2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c650:	2300      	movs	r3, #0
 800c652:	63bb      	str	r3, [r7, #56]	; 0x38
 800c654:	e01b      	b.n	800c68e <AES_CMAC_Final+0x16e>
 800c656:	f107 021c 	add.w	r2, r7, #28
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	4413      	add	r3, r2
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	b25a      	sxtb	r2, r3
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	3301      	adds	r3, #1
 800c668:	3348      	adds	r3, #72	; 0x48
 800c66a:	443b      	add	r3, r7
 800c66c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c670:	09db      	lsrs	r3, r3, #7
 800c672:	b2db      	uxtb	r3, r3
 800c674:	b25b      	sxtb	r3, r3
 800c676:	4313      	orrs	r3, r2
 800c678:	b25b      	sxtb	r3, r3
 800c67a:	b2d9      	uxtb	r1, r3
 800c67c:	f107 021c 	add.w	r2, r7, #28
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	4413      	add	r3, r2
 800c684:	460a      	mov	r2, r1
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	3301      	adds	r3, #1
 800c68c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	2b0e      	cmp	r3, #14
 800c692:	dde0      	ble.n	800c656 <AES_CMAC_Final+0x136>
 800c694:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800c6a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6a4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c6a8:	43db      	mvns	r3, r3
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6b0:	e027      	b.n	800c702 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c6b6:	e01b      	b.n	800c6f0 <AES_CMAC_Final+0x1d0>
 800c6b8:	f107 021c 	add.w	r2, r7, #28
 800c6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6be:	4413      	add	r3, r2
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	005b      	lsls	r3, r3, #1
 800c6c4:	b25a      	sxtb	r2, r3
 800c6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	3348      	adds	r3, #72	; 0x48
 800c6cc:	443b      	add	r3, r7
 800c6ce:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c6d2:	09db      	lsrs	r3, r3, #7
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	b25b      	sxtb	r3, r3
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	b25b      	sxtb	r3, r3
 800c6dc:	b2d9      	uxtb	r1, r3
 800c6de:	f107 021c 	add.w	r2, r7, #28
 800c6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e4:	4413      	add	r3, r2
 800c6e6:	460a      	mov	r2, r1
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f2:	2b0e      	cmp	r3, #14
 800c6f4:	dde0      	ble.n	800c6b8 <AES_CMAC_Final+0x198>
 800c6f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	4413      	add	r3, r2
 800c70c:	2280      	movs	r2, #128	; 0x80
 800c70e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c712:	e007      	b.n	800c724 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	4413      	add	r3, r2
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c738:	2b0f      	cmp	r3, #15
 800c73a:	d9eb      	bls.n	800c714 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c73c:	2300      	movs	r3, #0
 800c73e:	633b      	str	r3, [r7, #48]	; 0x30
 800c740:	e016      	b.n	800c770 <AES_CMAC_Final+0x250>
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	4413      	add	r3, r2
 800c748:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c74c:	781a      	ldrb	r2, [r3, #0]
 800c74e:	f107 011c 	add.w	r1, r7, #28
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	440b      	add	r3, r1
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	4053      	eors	r3, r2
 800c75a:	b2d9      	uxtb	r1, r3
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	4413      	add	r3, r2
 800c762:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c766:	460a      	mov	r2, r1
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	3301      	adds	r3, #1
 800c76e:	633b      	str	r3, [r7, #48]	; 0x30
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	2b0f      	cmp	r3, #15
 800c774:	dde5      	ble.n	800c742 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c776:	2300      	movs	r3, #0
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c77a:	e015      	b.n	800c7a8 <AES_CMAC_Final+0x288>
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c780:	4413      	add	r3, r2
 800c782:	33f1      	adds	r3, #241	; 0xf1
 800c784:	781a      	ldrb	r2, [r3, #0]
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78a:	440b      	add	r3, r1
 800c78c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	4053      	eors	r3, r2
 800c794:	b2d9      	uxtb	r1, r3
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	4413      	add	r3, r2
 800c79c:	33f1      	adds	r3, #241	; 0xf1
 800c79e:	460a      	mov	r2, r1
 800c7a0:	701a      	strb	r2, [r3, #0]
 800c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	2b0f      	cmp	r3, #15
 800c7ac:	dde6      	ble.n	800c77c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c7b4:	f107 030c 	add.w	r3, r7, #12
 800c7b8:	2210      	movs	r2, #16
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f00b ffbf 	bl	801873e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	f107 030c 	add.w	r3, r7, #12
 800c7c6:	6879      	ldr	r1, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 fd1d 	bl	800d208 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c7ce:	f107 031c 	add.w	r3, r7, #28
 800c7d2:	2210      	movs	r2, #16
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f00b ffec 	bl	80187b4 <memset1>
}
 800c7dc:	bf00      	nop
 800c7de:	3748      	adds	r7, #72	; 0x48
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	781a      	ldrb	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	7852      	ldrb	r2, [r2, #1]
 800c7fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3302      	adds	r3, #2
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	7892      	ldrb	r2, [r2, #2]
 800c808:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3303      	adds	r3, #3
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	78d2      	ldrb	r2, [r2, #3]
 800c812:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3304      	adds	r3, #4
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	7912      	ldrb	r2, [r2, #4]
 800c81c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3305      	adds	r3, #5
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	7952      	ldrb	r2, [r2, #5]
 800c826:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3306      	adds	r3, #6
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	7992      	ldrb	r2, [r2, #6]
 800c830:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3307      	adds	r3, #7
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	79d2      	ldrb	r2, [r2, #7]
 800c83a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	3308      	adds	r3, #8
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	7a12      	ldrb	r2, [r2, #8]
 800c844:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	3309      	adds	r3, #9
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	7a52      	ldrb	r2, [r2, #9]
 800c84e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	330a      	adds	r3, #10
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	7a92      	ldrb	r2, [r2, #10]
 800c858:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	330b      	adds	r3, #11
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	7ad2      	ldrb	r2, [r2, #11]
 800c862:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	330c      	adds	r3, #12
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	7b12      	ldrb	r2, [r2, #12]
 800c86c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	330d      	adds	r3, #13
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	7b52      	ldrb	r2, [r2, #13]
 800c876:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	330e      	adds	r3, #14
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	7b92      	ldrb	r2, [r2, #14]
 800c880:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	330f      	adds	r3, #15
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	7bd2      	ldrb	r2, [r2, #15]
 800c88a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	bc80      	pop	{r7}
 800c894:	4770      	bx	lr

0800c896 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c896:	b480      	push	{r7}
 800c898:	b085      	sub	sp, #20
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	60f8      	str	r0, [r7, #12]
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c8a4:	e007      	b.n	800c8b6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	1c53      	adds	r3, r2, #1
 800c8aa:	60bb      	str	r3, [r7, #8]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	1c59      	adds	r1, r3, #1
 800c8b0:	60f9      	str	r1, [r7, #12]
 800c8b2:	7812      	ldrb	r2, [r2, #0]
 800c8b4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c8b6:	79fb      	ldrb	r3, [r7, #7]
 800c8b8:	1e5a      	subs	r2, r3, #1
 800c8ba:	71fa      	strb	r2, [r7, #7]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f2      	bne.n	800c8a6 <copy_block_nn+0x10>
}
 800c8c0:	bf00      	nop
 800c8c2:	bf00      	nop
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bc80      	pop	{r7}
 800c8ca:	4770      	bx	lr

0800c8cc <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	781a      	ldrb	r2, [r3, #0]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	4053      	eors	r3, r2
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	7819      	ldrb	r1, [r3, #0]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	781a      	ldrb	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	404a      	eors	r2, r1
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	3302      	adds	r3, #2
 800c900:	7819      	ldrb	r1, [r3, #0]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	3302      	adds	r3, #2
 800c906:	781a      	ldrb	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3302      	adds	r3, #2
 800c90c:	404a      	eors	r2, r1
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	3303      	adds	r3, #3
 800c916:	7819      	ldrb	r1, [r3, #0]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	3303      	adds	r3, #3
 800c91c:	781a      	ldrb	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3303      	adds	r3, #3
 800c922:	404a      	eors	r2, r1
 800c924:	b2d2      	uxtb	r2, r2
 800c926:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3304      	adds	r3, #4
 800c92c:	7819      	ldrb	r1, [r3, #0]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	3304      	adds	r3, #4
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3304      	adds	r3, #4
 800c938:	404a      	eors	r2, r1
 800c93a:	b2d2      	uxtb	r2, r2
 800c93c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	3305      	adds	r3, #5
 800c942:	7819      	ldrb	r1, [r3, #0]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	3305      	adds	r3, #5
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3305      	adds	r3, #5
 800c94e:	404a      	eors	r2, r1
 800c950:	b2d2      	uxtb	r2, r2
 800c952:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3306      	adds	r3, #6
 800c958:	7819      	ldrb	r1, [r3, #0]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	3306      	adds	r3, #6
 800c95e:	781a      	ldrb	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	3306      	adds	r3, #6
 800c964:	404a      	eors	r2, r1
 800c966:	b2d2      	uxtb	r2, r2
 800c968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3307      	adds	r3, #7
 800c96e:	7819      	ldrb	r1, [r3, #0]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	3307      	adds	r3, #7
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3307      	adds	r3, #7
 800c97a:	404a      	eors	r2, r1
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3308      	adds	r3, #8
 800c984:	7819      	ldrb	r1, [r3, #0]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	3308      	adds	r3, #8
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3308      	adds	r3, #8
 800c990:	404a      	eors	r2, r1
 800c992:	b2d2      	uxtb	r2, r2
 800c994:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3309      	adds	r3, #9
 800c99a:	7819      	ldrb	r1, [r3, #0]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	3309      	adds	r3, #9
 800c9a0:	781a      	ldrb	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3309      	adds	r3, #9
 800c9a6:	404a      	eors	r2, r1
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	330a      	adds	r3, #10
 800c9b0:	7819      	ldrb	r1, [r3, #0]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	330a      	adds	r3, #10
 800c9b6:	781a      	ldrb	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	330a      	adds	r3, #10
 800c9bc:	404a      	eors	r2, r1
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	330b      	adds	r3, #11
 800c9c6:	7819      	ldrb	r1, [r3, #0]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	330b      	adds	r3, #11
 800c9cc:	781a      	ldrb	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	330b      	adds	r3, #11
 800c9d2:	404a      	eors	r2, r1
 800c9d4:	b2d2      	uxtb	r2, r2
 800c9d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	330c      	adds	r3, #12
 800c9dc:	7819      	ldrb	r1, [r3, #0]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	330c      	adds	r3, #12
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	330c      	adds	r3, #12
 800c9e8:	404a      	eors	r2, r1
 800c9ea:	b2d2      	uxtb	r2, r2
 800c9ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	330d      	adds	r3, #13
 800c9f2:	7819      	ldrb	r1, [r3, #0]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	330d      	adds	r3, #13
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	330d      	adds	r3, #13
 800c9fe:	404a      	eors	r2, r1
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	330e      	adds	r3, #14
 800ca08:	7819      	ldrb	r1, [r3, #0]
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	330e      	adds	r3, #14
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	330e      	adds	r3, #14
 800ca14:	404a      	eors	r2, r1
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	330f      	adds	r3, #15
 800ca1e:	7819      	ldrb	r1, [r3, #0]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	330f      	adds	r3, #15
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	330f      	adds	r3, #15
 800ca2a:	404a      	eors	r2, r1
 800ca2c:	b2d2      	uxtb	r2, r2
 800ca2e:	701a      	strb	r2, [r3, #0]
#endif
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bc80      	pop	{r7}
 800ca38:	4770      	bx	lr

0800ca3a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b085      	sub	sp, #20
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	781a      	ldrb	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	4053      	eors	r3, r2
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	7819      	ldrb	r1, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	781a      	ldrb	r2, [r3, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3301      	adds	r3, #1
 800ca66:	404a      	eors	r2, r1
 800ca68:	b2d2      	uxtb	r2, r2
 800ca6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	3302      	adds	r3, #2
 800ca70:	7819      	ldrb	r1, [r3, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	3302      	adds	r3, #2
 800ca76:	781a      	ldrb	r2, [r3, #0]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3302      	adds	r3, #2
 800ca7c:	404a      	eors	r2, r1
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	3303      	adds	r3, #3
 800ca86:	7819      	ldrb	r1, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	3303      	adds	r3, #3
 800ca8c:	781a      	ldrb	r2, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3303      	adds	r3, #3
 800ca92:	404a      	eors	r2, r1
 800ca94:	b2d2      	uxtb	r2, r2
 800ca96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	7819      	ldrb	r1, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3304      	adds	r3, #4
 800caa2:	781a      	ldrb	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	3304      	adds	r3, #4
 800caa8:	404a      	eors	r2, r1
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	3305      	adds	r3, #5
 800cab2:	7819      	ldrb	r1, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3305      	adds	r3, #5
 800cab8:	781a      	ldrb	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	3305      	adds	r3, #5
 800cabe:	404a      	eors	r2, r1
 800cac0:	b2d2      	uxtb	r2, r2
 800cac2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	3306      	adds	r3, #6
 800cac8:	7819      	ldrb	r1, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3306      	adds	r3, #6
 800cace:	781a      	ldrb	r2, [r3, #0]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3306      	adds	r3, #6
 800cad4:	404a      	eors	r2, r1
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	3307      	adds	r3, #7
 800cade:	7819      	ldrb	r1, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	3307      	adds	r3, #7
 800cae4:	781a      	ldrb	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3307      	adds	r3, #7
 800caea:	404a      	eors	r2, r1
 800caec:	b2d2      	uxtb	r2, r2
 800caee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	3308      	adds	r3, #8
 800caf4:	7819      	ldrb	r1, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3308      	adds	r3, #8
 800cafa:	781a      	ldrb	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	3308      	adds	r3, #8
 800cb00:	404a      	eors	r2, r1
 800cb02:	b2d2      	uxtb	r2, r2
 800cb04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	3309      	adds	r3, #9
 800cb0a:	7819      	ldrb	r1, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3309      	adds	r3, #9
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3309      	adds	r3, #9
 800cb16:	404a      	eors	r2, r1
 800cb18:	b2d2      	uxtb	r2, r2
 800cb1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	330a      	adds	r3, #10
 800cb20:	7819      	ldrb	r1, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	330a      	adds	r3, #10
 800cb26:	781a      	ldrb	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	330a      	adds	r3, #10
 800cb2c:	404a      	eors	r2, r1
 800cb2e:	b2d2      	uxtb	r2, r2
 800cb30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	330b      	adds	r3, #11
 800cb36:	7819      	ldrb	r1, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	330b      	adds	r3, #11
 800cb3c:	781a      	ldrb	r2, [r3, #0]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	330b      	adds	r3, #11
 800cb42:	404a      	eors	r2, r1
 800cb44:	b2d2      	uxtb	r2, r2
 800cb46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	330c      	adds	r3, #12
 800cb4c:	7819      	ldrb	r1, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	330c      	adds	r3, #12
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	330c      	adds	r3, #12
 800cb58:	404a      	eors	r2, r1
 800cb5a:	b2d2      	uxtb	r2, r2
 800cb5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	330d      	adds	r3, #13
 800cb62:	7819      	ldrb	r1, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	330d      	adds	r3, #13
 800cb68:	781a      	ldrb	r2, [r3, #0]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	330d      	adds	r3, #13
 800cb6e:	404a      	eors	r2, r1
 800cb70:	b2d2      	uxtb	r2, r2
 800cb72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	330e      	adds	r3, #14
 800cb78:	7819      	ldrb	r1, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	330e      	adds	r3, #14
 800cb7e:	781a      	ldrb	r2, [r3, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	330e      	adds	r3, #14
 800cb84:	404a      	eors	r2, r1
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	330f      	adds	r3, #15
 800cb8e:	7819      	ldrb	r1, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	330f      	adds	r3, #15
 800cb94:	781a      	ldrb	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	330f      	adds	r3, #15
 800cb9a:	404a      	eors	r2, r1
 800cb9c:	b2d2      	uxtb	r2, r2
 800cb9e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cba0:	bf00      	nop
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bc80      	pop	{r7}
 800cba8:	4770      	bx	lr

0800cbaa <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b082      	sub	sp, #8
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800cbb4:	6839      	ldr	r1, [r7, #0]
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7ff fe88 	bl	800c8cc <xor_block>
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4b48      	ldr	r3, [pc, #288]	; (800ccf4 <shift_sub_rows+0x130>)
 800cbd4:	5c9a      	ldrb	r2, [r3, r2]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3304      	adds	r3, #4
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	4a43      	ldr	r2, [pc, #268]	; (800ccf4 <shift_sub_rows+0x130>)
 800cbe8:	5c52      	ldrb	r2, [r2, r1]
 800cbea:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3308      	adds	r3, #8
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	4a3e      	ldr	r2, [pc, #248]	; (800ccf4 <shift_sub_rows+0x130>)
 800cbfa:	5c52      	ldrb	r2, [r2, r1]
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	330c      	adds	r3, #12
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	4619      	mov	r1, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	330c      	adds	r3, #12
 800cc0a:	4a3a      	ldr	r2, [pc, #232]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc0c:	5c52      	ldrb	r2, [r2, r1]
 800cc0e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	785b      	ldrb	r3, [r3, #1]
 800cc14:	73fb      	strb	r3, [r7, #15]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3305      	adds	r3, #5
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	3301      	adds	r3, #1
 800cc22:	4a34      	ldr	r2, [pc, #208]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc24:	5c52      	ldrb	r2, [r2, r1]
 800cc26:	701a      	strb	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	3309      	adds	r3, #9
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	3305      	adds	r3, #5
 800cc34:	4a2f      	ldr	r2, [pc, #188]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc36:	5c52      	ldrb	r2, [r2, r1]
 800cc38:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	330d      	adds	r3, #13
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	4619      	mov	r1, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3309      	adds	r3, #9
 800cc46:	4a2b      	ldr	r2, [pc, #172]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc48:	5c52      	ldrb	r2, [r2, r1]
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	7bfa      	ldrb	r2, [r7, #15]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	330d      	adds	r3, #13
 800cc52:	4928      	ldr	r1, [pc, #160]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc54:	5c8a      	ldrb	r2, [r1, r2]
 800cc56:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	789b      	ldrb	r3, [r3, #2]
 800cc5c:	73fb      	strb	r3, [r7, #15]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	330a      	adds	r3, #10
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	4619      	mov	r1, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3302      	adds	r3, #2
 800cc6a:	4a22      	ldr	r2, [pc, #136]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc6c:	5c52      	ldrb	r2, [r2, r1]
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	7bfa      	ldrb	r2, [r7, #15]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	330a      	adds	r3, #10
 800cc76:	491f      	ldr	r1, [pc, #124]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc78:	5c8a      	ldrb	r2, [r1, r2]
 800cc7a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	799b      	ldrb	r3, [r3, #6]
 800cc80:	73fb      	strb	r3, [r7, #15]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	330e      	adds	r3, #14
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	3306      	adds	r3, #6
 800cc8e:	4a19      	ldr	r2, [pc, #100]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc90:	5c52      	ldrb	r2, [r2, r1]
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	7bfa      	ldrb	r2, [r7, #15]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	330e      	adds	r3, #14
 800cc9a:	4916      	ldr	r1, [pc, #88]	; (800ccf4 <shift_sub_rows+0x130>)
 800cc9c:	5c8a      	ldrb	r2, [r1, r2]
 800cc9e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	7bdb      	ldrb	r3, [r3, #15]
 800cca4:	73fb      	strb	r3, [r7, #15]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	330b      	adds	r3, #11
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	4619      	mov	r1, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	330f      	adds	r3, #15
 800ccb2:	4a10      	ldr	r2, [pc, #64]	; (800ccf4 <shift_sub_rows+0x130>)
 800ccb4:	5c52      	ldrb	r2, [r2, r1]
 800ccb6:	701a      	strb	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3307      	adds	r3, #7
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	330b      	adds	r3, #11
 800ccc4:	4a0b      	ldr	r2, [pc, #44]	; (800ccf4 <shift_sub_rows+0x130>)
 800ccc6:	5c52      	ldrb	r2, [r2, r1]
 800ccc8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3303      	adds	r3, #3
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3307      	adds	r3, #7
 800ccd6:	4a07      	ldr	r2, [pc, #28]	; (800ccf4 <shift_sub_rows+0x130>)
 800ccd8:	5c52      	ldrb	r2, [r2, r1]
 800ccda:	701a      	strb	r2, [r3, #0]
 800ccdc:	7bfa      	ldrb	r2, [r7, #15]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3303      	adds	r3, #3
 800cce2:	4904      	ldr	r1, [pc, #16]	; (800ccf4 <shift_sub_rows+0x130>)
 800cce4:	5c8a      	ldrb	r2, [r1, r2]
 800cce6:	701a      	strb	r2, [r3, #0]
}
 800cce8:	bf00      	nop
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bc80      	pop	{r7}
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	0801db5c 	.word	0x0801db5c

0800ccf8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b086      	sub	sp, #24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cd00:	f107 0308 	add.w	r3, r7, #8
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fd6c 	bl	800c7e4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800cd0c:	7a3b      	ldrb	r3, [r7, #8]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	4b9a      	ldr	r3, [pc, #616]	; (800cf7c <mix_sub_columns+0x284>)
 800cd12:	5c9a      	ldrb	r2, [r3, r2]
 800cd14:	7b7b      	ldrb	r3, [r7, #13]
 800cd16:	4619      	mov	r1, r3
 800cd18:	4b99      	ldr	r3, [pc, #612]	; (800cf80 <mix_sub_columns+0x288>)
 800cd1a:	5c5b      	ldrb	r3, [r3, r1]
 800cd1c:	4053      	eors	r3, r2
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	7cbb      	ldrb	r3, [r7, #18]
 800cd22:	4619      	mov	r1, r3
 800cd24:	4b97      	ldr	r3, [pc, #604]	; (800cf84 <mix_sub_columns+0x28c>)
 800cd26:	5c5b      	ldrb	r3, [r3, r1]
 800cd28:	4053      	eors	r3, r2
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	7dfb      	ldrb	r3, [r7, #23]
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4b94      	ldr	r3, [pc, #592]	; (800cf84 <mix_sub_columns+0x28c>)
 800cd32:	5c5b      	ldrb	r3, [r3, r1]
 800cd34:	4053      	eors	r3, r2
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cd3c:	7a3b      	ldrb	r3, [r7, #8]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	4b90      	ldr	r3, [pc, #576]	; (800cf84 <mix_sub_columns+0x28c>)
 800cd42:	5c9a      	ldrb	r2, [r3, r2]
 800cd44:	7b7b      	ldrb	r3, [r7, #13]
 800cd46:	4619      	mov	r1, r3
 800cd48:	4b8c      	ldr	r3, [pc, #560]	; (800cf7c <mix_sub_columns+0x284>)
 800cd4a:	5c5b      	ldrb	r3, [r3, r1]
 800cd4c:	4053      	eors	r3, r2
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	7cbb      	ldrb	r3, [r7, #18]
 800cd52:	4619      	mov	r1, r3
 800cd54:	4b8a      	ldr	r3, [pc, #552]	; (800cf80 <mix_sub_columns+0x288>)
 800cd56:	5c5b      	ldrb	r3, [r3, r1]
 800cd58:	4053      	eors	r3, r2
 800cd5a:	b2d9      	uxtb	r1, r3
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4b88      	ldr	r3, [pc, #544]	; (800cf84 <mix_sub_columns+0x28c>)
 800cd62:	5c9a      	ldrb	r2, [r3, r2]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3301      	adds	r3, #1
 800cd68:	404a      	eors	r2, r1
 800cd6a:	b2d2      	uxtb	r2, r2
 800cd6c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cd6e:	7a3b      	ldrb	r3, [r7, #8]
 800cd70:	461a      	mov	r2, r3
 800cd72:	4b84      	ldr	r3, [pc, #528]	; (800cf84 <mix_sub_columns+0x28c>)
 800cd74:	5c9a      	ldrb	r2, [r3, r2]
 800cd76:	7b7b      	ldrb	r3, [r7, #13]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4b82      	ldr	r3, [pc, #520]	; (800cf84 <mix_sub_columns+0x28c>)
 800cd7c:	5c5b      	ldrb	r3, [r3, r1]
 800cd7e:	4053      	eors	r3, r2
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	7cbb      	ldrb	r3, [r7, #18]
 800cd84:	4619      	mov	r1, r3
 800cd86:	4b7d      	ldr	r3, [pc, #500]	; (800cf7c <mix_sub_columns+0x284>)
 800cd88:	5c5b      	ldrb	r3, [r3, r1]
 800cd8a:	4053      	eors	r3, r2
 800cd8c:	b2d9      	uxtb	r1, r3
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	461a      	mov	r2, r3
 800cd92:	4b7b      	ldr	r3, [pc, #492]	; (800cf80 <mix_sub_columns+0x288>)
 800cd94:	5c9a      	ldrb	r2, [r3, r2]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3302      	adds	r3, #2
 800cd9a:	404a      	eors	r2, r1
 800cd9c:	b2d2      	uxtb	r2, r2
 800cd9e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cda0:	7a3b      	ldrb	r3, [r7, #8]
 800cda2:	461a      	mov	r2, r3
 800cda4:	4b76      	ldr	r3, [pc, #472]	; (800cf80 <mix_sub_columns+0x288>)
 800cda6:	5c9a      	ldrb	r2, [r3, r2]
 800cda8:	7b7b      	ldrb	r3, [r7, #13]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4b75      	ldr	r3, [pc, #468]	; (800cf84 <mix_sub_columns+0x28c>)
 800cdae:	5c5b      	ldrb	r3, [r3, r1]
 800cdb0:	4053      	eors	r3, r2
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	7cbb      	ldrb	r3, [r7, #18]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4b72      	ldr	r3, [pc, #456]	; (800cf84 <mix_sub_columns+0x28c>)
 800cdba:	5c5b      	ldrb	r3, [r3, r1]
 800cdbc:	4053      	eors	r3, r2
 800cdbe:	b2d9      	uxtb	r1, r3
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4b6d      	ldr	r3, [pc, #436]	; (800cf7c <mix_sub_columns+0x284>)
 800cdc6:	5c9a      	ldrb	r2, [r3, r2]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	3303      	adds	r3, #3
 800cdcc:	404a      	eors	r2, r1
 800cdce:	b2d2      	uxtb	r2, r2
 800cdd0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cdd2:	7b3b      	ldrb	r3, [r7, #12]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	4b69      	ldr	r3, [pc, #420]	; (800cf7c <mix_sub_columns+0x284>)
 800cdd8:	5c9a      	ldrb	r2, [r3, r2]
 800cdda:	7c7b      	ldrb	r3, [r7, #17]
 800cddc:	4619      	mov	r1, r3
 800cdde:	4b68      	ldr	r3, [pc, #416]	; (800cf80 <mix_sub_columns+0x288>)
 800cde0:	5c5b      	ldrb	r3, [r3, r1]
 800cde2:	4053      	eors	r3, r2
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	7dbb      	ldrb	r3, [r7, #22]
 800cde8:	4619      	mov	r1, r3
 800cdea:	4b66      	ldr	r3, [pc, #408]	; (800cf84 <mix_sub_columns+0x28c>)
 800cdec:	5c5b      	ldrb	r3, [r3, r1]
 800cdee:	4053      	eors	r3, r2
 800cdf0:	b2d9      	uxtb	r1, r3
 800cdf2:	7afb      	ldrb	r3, [r7, #11]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	4b63      	ldr	r3, [pc, #396]	; (800cf84 <mix_sub_columns+0x28c>)
 800cdf8:	5c9a      	ldrb	r2, [r3, r2]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	404a      	eors	r2, r1
 800ce00:	b2d2      	uxtb	r2, r2
 800ce02:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ce04:	7b3b      	ldrb	r3, [r7, #12]
 800ce06:	461a      	mov	r2, r3
 800ce08:	4b5e      	ldr	r3, [pc, #376]	; (800cf84 <mix_sub_columns+0x28c>)
 800ce0a:	5c9a      	ldrb	r2, [r3, r2]
 800ce0c:	7c7b      	ldrb	r3, [r7, #17]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	4b5a      	ldr	r3, [pc, #360]	; (800cf7c <mix_sub_columns+0x284>)
 800ce12:	5c5b      	ldrb	r3, [r3, r1]
 800ce14:	4053      	eors	r3, r2
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	7dbb      	ldrb	r3, [r7, #22]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4b58      	ldr	r3, [pc, #352]	; (800cf80 <mix_sub_columns+0x288>)
 800ce1e:	5c5b      	ldrb	r3, [r3, r1]
 800ce20:	4053      	eors	r3, r2
 800ce22:	b2d9      	uxtb	r1, r3
 800ce24:	7afb      	ldrb	r3, [r7, #11]
 800ce26:	461a      	mov	r2, r3
 800ce28:	4b56      	ldr	r3, [pc, #344]	; (800cf84 <mix_sub_columns+0x28c>)
 800ce2a:	5c9a      	ldrb	r2, [r3, r2]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3305      	adds	r3, #5
 800ce30:	404a      	eors	r2, r1
 800ce32:	b2d2      	uxtb	r2, r2
 800ce34:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ce36:	7b3b      	ldrb	r3, [r7, #12]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	4b52      	ldr	r3, [pc, #328]	; (800cf84 <mix_sub_columns+0x28c>)
 800ce3c:	5c9a      	ldrb	r2, [r3, r2]
 800ce3e:	7c7b      	ldrb	r3, [r7, #17]
 800ce40:	4619      	mov	r1, r3
 800ce42:	4b50      	ldr	r3, [pc, #320]	; (800cf84 <mix_sub_columns+0x28c>)
 800ce44:	5c5b      	ldrb	r3, [r3, r1]
 800ce46:	4053      	eors	r3, r2
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	7dbb      	ldrb	r3, [r7, #22]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4b4b      	ldr	r3, [pc, #300]	; (800cf7c <mix_sub_columns+0x284>)
 800ce50:	5c5b      	ldrb	r3, [r3, r1]
 800ce52:	4053      	eors	r3, r2
 800ce54:	b2d9      	uxtb	r1, r3
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	461a      	mov	r2, r3
 800ce5a:	4b49      	ldr	r3, [pc, #292]	; (800cf80 <mix_sub_columns+0x288>)
 800ce5c:	5c9a      	ldrb	r2, [r3, r2]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3306      	adds	r3, #6
 800ce62:	404a      	eors	r2, r1
 800ce64:	b2d2      	uxtb	r2, r2
 800ce66:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ce68:	7b3b      	ldrb	r3, [r7, #12]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	4b44      	ldr	r3, [pc, #272]	; (800cf80 <mix_sub_columns+0x288>)
 800ce6e:	5c9a      	ldrb	r2, [r3, r2]
 800ce70:	7c7b      	ldrb	r3, [r7, #17]
 800ce72:	4619      	mov	r1, r3
 800ce74:	4b43      	ldr	r3, [pc, #268]	; (800cf84 <mix_sub_columns+0x28c>)
 800ce76:	5c5b      	ldrb	r3, [r3, r1]
 800ce78:	4053      	eors	r3, r2
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	7dbb      	ldrb	r3, [r7, #22]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	4b40      	ldr	r3, [pc, #256]	; (800cf84 <mix_sub_columns+0x28c>)
 800ce82:	5c5b      	ldrb	r3, [r3, r1]
 800ce84:	4053      	eors	r3, r2
 800ce86:	b2d9      	uxtb	r1, r3
 800ce88:	7afb      	ldrb	r3, [r7, #11]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	4b3b      	ldr	r3, [pc, #236]	; (800cf7c <mix_sub_columns+0x284>)
 800ce8e:	5c9a      	ldrb	r2, [r3, r2]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3307      	adds	r3, #7
 800ce94:	404a      	eors	r2, r1
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ce9a:	7c3b      	ldrb	r3, [r7, #16]
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	4b37      	ldr	r3, [pc, #220]	; (800cf7c <mix_sub_columns+0x284>)
 800cea0:	5c9a      	ldrb	r2, [r3, r2]
 800cea2:	7d7b      	ldrb	r3, [r7, #21]
 800cea4:	4619      	mov	r1, r3
 800cea6:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <mix_sub_columns+0x288>)
 800cea8:	5c5b      	ldrb	r3, [r3, r1]
 800ceaa:	4053      	eors	r3, r2
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	7abb      	ldrb	r3, [r7, #10]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4b34      	ldr	r3, [pc, #208]	; (800cf84 <mix_sub_columns+0x28c>)
 800ceb4:	5c5b      	ldrb	r3, [r3, r1]
 800ceb6:	4053      	eors	r3, r2
 800ceb8:	b2d9      	uxtb	r1, r3
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
 800cebc:	461a      	mov	r2, r3
 800cebe:	4b31      	ldr	r3, [pc, #196]	; (800cf84 <mix_sub_columns+0x28c>)
 800cec0:	5c9a      	ldrb	r2, [r3, r2]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	3308      	adds	r3, #8
 800cec6:	404a      	eors	r2, r1
 800cec8:	b2d2      	uxtb	r2, r2
 800ceca:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800cecc:	7c3b      	ldrb	r3, [r7, #16]
 800cece:	461a      	mov	r2, r3
 800ced0:	4b2c      	ldr	r3, [pc, #176]	; (800cf84 <mix_sub_columns+0x28c>)
 800ced2:	5c9a      	ldrb	r2, [r3, r2]
 800ced4:	7d7b      	ldrb	r3, [r7, #21]
 800ced6:	4619      	mov	r1, r3
 800ced8:	4b28      	ldr	r3, [pc, #160]	; (800cf7c <mix_sub_columns+0x284>)
 800ceda:	5c5b      	ldrb	r3, [r3, r1]
 800cedc:	4053      	eors	r3, r2
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	7abb      	ldrb	r3, [r7, #10]
 800cee2:	4619      	mov	r1, r3
 800cee4:	4b26      	ldr	r3, [pc, #152]	; (800cf80 <mix_sub_columns+0x288>)
 800cee6:	5c5b      	ldrb	r3, [r3, r1]
 800cee8:	4053      	eors	r3, r2
 800ceea:	b2d9      	uxtb	r1, r3
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	461a      	mov	r2, r3
 800cef0:	4b24      	ldr	r3, [pc, #144]	; (800cf84 <mix_sub_columns+0x28c>)
 800cef2:	5c9a      	ldrb	r2, [r3, r2]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3309      	adds	r3, #9
 800cef8:	404a      	eors	r2, r1
 800cefa:	b2d2      	uxtb	r2, r2
 800cefc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cefe:	7c3b      	ldrb	r3, [r7, #16]
 800cf00:	461a      	mov	r2, r3
 800cf02:	4b20      	ldr	r3, [pc, #128]	; (800cf84 <mix_sub_columns+0x28c>)
 800cf04:	5c9a      	ldrb	r2, [r3, r2]
 800cf06:	7d7b      	ldrb	r3, [r7, #21]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <mix_sub_columns+0x28c>)
 800cf0c:	5c5b      	ldrb	r3, [r3, r1]
 800cf0e:	4053      	eors	r3, r2
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	7abb      	ldrb	r3, [r7, #10]
 800cf14:	4619      	mov	r1, r3
 800cf16:	4b19      	ldr	r3, [pc, #100]	; (800cf7c <mix_sub_columns+0x284>)
 800cf18:	5c5b      	ldrb	r3, [r3, r1]
 800cf1a:	4053      	eors	r3, r2
 800cf1c:	b2d9      	uxtb	r1, r3
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	461a      	mov	r2, r3
 800cf22:	4b17      	ldr	r3, [pc, #92]	; (800cf80 <mix_sub_columns+0x288>)
 800cf24:	5c9a      	ldrb	r2, [r3, r2]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	330a      	adds	r3, #10
 800cf2a:	404a      	eors	r2, r1
 800cf2c:	b2d2      	uxtb	r2, r2
 800cf2e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cf30:	7c3b      	ldrb	r3, [r7, #16]
 800cf32:	461a      	mov	r2, r3
 800cf34:	4b12      	ldr	r3, [pc, #72]	; (800cf80 <mix_sub_columns+0x288>)
 800cf36:	5c9a      	ldrb	r2, [r3, r2]
 800cf38:	7d7b      	ldrb	r3, [r7, #21]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4b11      	ldr	r3, [pc, #68]	; (800cf84 <mix_sub_columns+0x28c>)
 800cf3e:	5c5b      	ldrb	r3, [r3, r1]
 800cf40:	4053      	eors	r3, r2
 800cf42:	b2da      	uxtb	r2, r3
 800cf44:	7abb      	ldrb	r3, [r7, #10]
 800cf46:	4619      	mov	r1, r3
 800cf48:	4b0e      	ldr	r3, [pc, #56]	; (800cf84 <mix_sub_columns+0x28c>)
 800cf4a:	5c5b      	ldrb	r3, [r3, r1]
 800cf4c:	4053      	eors	r3, r2
 800cf4e:	b2d9      	uxtb	r1, r3
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
 800cf52:	461a      	mov	r2, r3
 800cf54:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <mix_sub_columns+0x284>)
 800cf56:	5c9a      	ldrb	r2, [r3, r2]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	330b      	adds	r3, #11
 800cf5c:	404a      	eors	r2, r1
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cf62:	7d3b      	ldrb	r3, [r7, #20]
 800cf64:	461a      	mov	r2, r3
 800cf66:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <mix_sub_columns+0x284>)
 800cf68:	5c9a      	ldrb	r2, [r3, r2]
 800cf6a:	7a7b      	ldrb	r3, [r7, #9]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	4b04      	ldr	r3, [pc, #16]	; (800cf80 <mix_sub_columns+0x288>)
 800cf70:	5c5b      	ldrb	r3, [r3, r1]
 800cf72:	4053      	eors	r3, r2
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	4619      	mov	r1, r3
 800cf7a:	e005      	b.n	800cf88 <mix_sub_columns+0x290>
 800cf7c:	0801dc5c 	.word	0x0801dc5c
 800cf80:	0801dd5c 	.word	0x0801dd5c
 800cf84:	0801db5c 	.word	0x0801db5c
 800cf88:	4b2d      	ldr	r3, [pc, #180]	; (800d040 <mix_sub_columns+0x348>)
 800cf8a:	5c5b      	ldrb	r3, [r3, r1]
 800cf8c:	4053      	eors	r3, r2
 800cf8e:	b2d9      	uxtb	r1, r3
 800cf90:	7cfb      	ldrb	r3, [r7, #19]
 800cf92:	461a      	mov	r2, r3
 800cf94:	4b2a      	ldr	r3, [pc, #168]	; (800d040 <mix_sub_columns+0x348>)
 800cf96:	5c9a      	ldrb	r2, [r3, r2]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	330c      	adds	r3, #12
 800cf9c:	404a      	eors	r2, r1
 800cf9e:	b2d2      	uxtb	r2, r2
 800cfa0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cfa2:	7d3b      	ldrb	r3, [r7, #20]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	4b26      	ldr	r3, [pc, #152]	; (800d040 <mix_sub_columns+0x348>)
 800cfa8:	5c9a      	ldrb	r2, [r3, r2]
 800cfaa:	7a7b      	ldrb	r3, [r7, #9]
 800cfac:	4619      	mov	r1, r3
 800cfae:	4b25      	ldr	r3, [pc, #148]	; (800d044 <mix_sub_columns+0x34c>)
 800cfb0:	5c5b      	ldrb	r3, [r3, r1]
 800cfb2:	4053      	eors	r3, r2
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4b23      	ldr	r3, [pc, #140]	; (800d048 <mix_sub_columns+0x350>)
 800cfbc:	5c5b      	ldrb	r3, [r3, r1]
 800cfbe:	4053      	eors	r3, r2
 800cfc0:	b2d9      	uxtb	r1, r3
 800cfc2:	7cfb      	ldrb	r3, [r7, #19]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4b1e      	ldr	r3, [pc, #120]	; (800d040 <mix_sub_columns+0x348>)
 800cfc8:	5c9a      	ldrb	r2, [r3, r2]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	330d      	adds	r3, #13
 800cfce:	404a      	eors	r2, r1
 800cfd0:	b2d2      	uxtb	r2, r2
 800cfd2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cfd4:	7d3b      	ldrb	r3, [r7, #20]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4b19      	ldr	r3, [pc, #100]	; (800d040 <mix_sub_columns+0x348>)
 800cfda:	5c9a      	ldrb	r2, [r3, r2]
 800cfdc:	7a7b      	ldrb	r3, [r7, #9]
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4b17      	ldr	r3, [pc, #92]	; (800d040 <mix_sub_columns+0x348>)
 800cfe2:	5c5b      	ldrb	r3, [r3, r1]
 800cfe4:	4053      	eors	r3, r2
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	7bbb      	ldrb	r3, [r7, #14]
 800cfea:	4619      	mov	r1, r3
 800cfec:	4b15      	ldr	r3, [pc, #84]	; (800d044 <mix_sub_columns+0x34c>)
 800cfee:	5c5b      	ldrb	r3, [r3, r1]
 800cff0:	4053      	eors	r3, r2
 800cff2:	b2d9      	uxtb	r1, r3
 800cff4:	7cfb      	ldrb	r3, [r7, #19]
 800cff6:	461a      	mov	r2, r3
 800cff8:	4b13      	ldr	r3, [pc, #76]	; (800d048 <mix_sub_columns+0x350>)
 800cffa:	5c9a      	ldrb	r2, [r3, r2]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	330e      	adds	r3, #14
 800d000:	404a      	eors	r2, r1
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d006:	7d3b      	ldrb	r3, [r7, #20]
 800d008:	461a      	mov	r2, r3
 800d00a:	4b0f      	ldr	r3, [pc, #60]	; (800d048 <mix_sub_columns+0x350>)
 800d00c:	5c9a      	ldrb	r2, [r3, r2]
 800d00e:	7a7b      	ldrb	r3, [r7, #9]
 800d010:	4619      	mov	r1, r3
 800d012:	4b0b      	ldr	r3, [pc, #44]	; (800d040 <mix_sub_columns+0x348>)
 800d014:	5c5b      	ldrb	r3, [r3, r1]
 800d016:	4053      	eors	r3, r2
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
 800d01c:	4619      	mov	r1, r3
 800d01e:	4b08      	ldr	r3, [pc, #32]	; (800d040 <mix_sub_columns+0x348>)
 800d020:	5c5b      	ldrb	r3, [r3, r1]
 800d022:	4053      	eors	r3, r2
 800d024:	b2d9      	uxtb	r1, r3
 800d026:	7cfb      	ldrb	r3, [r7, #19]
 800d028:	461a      	mov	r2, r3
 800d02a:	4b06      	ldr	r3, [pc, #24]	; (800d044 <mix_sub_columns+0x34c>)
 800d02c:	5c9a      	ldrb	r2, [r3, r2]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	330f      	adds	r3, #15
 800d032:	404a      	eors	r2, r1
 800d034:	b2d2      	uxtb	r2, r2
 800d036:	701a      	strb	r2, [r3, #0]
  }
 800d038:	bf00      	nop
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	0801db5c 	.word	0x0801db5c
 800d044:	0801dc5c 	.word	0x0801dc5c
 800d048:	0801dd5c 	.word	0x0801dd5c

0800d04c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	460b      	mov	r3, r1
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d05a:	7afb      	ldrb	r3, [r7, #11]
 800d05c:	3b10      	subs	r3, #16
 800d05e:	2b10      	cmp	r3, #16
 800d060:	bf8c      	ite	hi
 800d062:	2201      	movhi	r2, #1
 800d064:	2200      	movls	r2, #0
 800d066:	b2d2      	uxtb	r2, r2
 800d068:	2a00      	cmp	r2, #0
 800d06a:	d10d      	bne.n	800d088 <lorawan_aes_set_key+0x3c>
 800d06c:	2201      	movs	r2, #1
 800d06e:	fa02 f303 	lsl.w	r3, r2, r3
 800d072:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bf14      	ite	ne
 800d07e:	2301      	movne	r3, #1
 800d080:	2300      	moveq	r3, #0
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d105      	bne.n	800d094 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800d090:	23ff      	movs	r3, #255	; 0xff
 800d092:	e0b2      	b.n	800d1fa <lorawan_aes_set_key+0x1ae>
        break;
 800d094:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7afa      	ldrb	r2, [r7, #11]
 800d09a:	68f9      	ldr	r1, [r7, #12]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fbfa 	bl	800c896 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d0a2:	7afb      	ldrb	r3, [r7, #11]
 800d0a4:	331c      	adds	r3, #28
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d0ac:	7c7b      	ldrb	r3, [r7, #17]
 800d0ae:	091b      	lsrs	r3, r3, #4
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	b2da      	uxtb	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d0bc:	7afb      	ldrb	r3, [r7, #11]
 800d0be:	75fb      	strb	r3, [r7, #23]
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	75bb      	strb	r3, [r7, #22]
 800d0c4:	e093      	b.n	800d1ee <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
 800d0c8:	3b04      	subs	r3, #4
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	5cd3      	ldrb	r3, [r2, r3]
 800d0ce:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	3b03      	subs	r3, #3
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	5cd3      	ldrb	r3, [r2, r3]
 800d0d8:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	3b02      	subs	r3, #2
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	5cd3      	ldrb	r3, [r2, r3]
 800d0e2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d0e4:	7dfb      	ldrb	r3, [r7, #23]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	5cd3      	ldrb	r3, [r2, r3]
 800d0ec:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	7afa      	ldrb	r2, [r7, #11]
 800d0f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0f6:	fb01 f202 	mul.w	r2, r1, r2
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d127      	bne.n	800d152 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800d102:	7d7b      	ldrb	r3, [r7, #21]
 800d104:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d106:	7d3b      	ldrb	r3, [r7, #20]
 800d108:	4a3e      	ldr	r2, [pc, #248]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d10a:	5cd2      	ldrb	r2, [r2, r3]
 800d10c:	7dbb      	ldrb	r3, [r7, #22]
 800d10e:	4053      	eors	r3, r2
 800d110:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d112:	7cfb      	ldrb	r3, [r7, #19]
 800d114:	4a3b      	ldr	r2, [pc, #236]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d116:	5cd3      	ldrb	r3, [r2, r3]
 800d118:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d11a:	7cbb      	ldrb	r3, [r7, #18]
 800d11c:	4a39      	ldr	r2, [pc, #228]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d11e:	5cd3      	ldrb	r3, [r2, r3]
 800d120:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d122:	7c3b      	ldrb	r3, [r7, #16]
 800d124:	4a37      	ldr	r2, [pc, #220]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d126:	5cd3      	ldrb	r3, [r2, r3]
 800d128:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d12a:	7dbb      	ldrb	r3, [r7, #22]
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	b25a      	sxtb	r2, r3
 800d130:	7dbb      	ldrb	r3, [r7, #22]
 800d132:	09db      	lsrs	r3, r3, #7
 800d134:	b2db      	uxtb	r3, r3
 800d136:	4619      	mov	r1, r3
 800d138:	0049      	lsls	r1, r1, #1
 800d13a:	440b      	add	r3, r1
 800d13c:	4619      	mov	r1, r3
 800d13e:	00c8      	lsls	r0, r1, #3
 800d140:	4619      	mov	r1, r3
 800d142:	4603      	mov	r3, r0
 800d144:	440b      	add	r3, r1
 800d146:	b2db      	uxtb	r3, r3
 800d148:	b25b      	sxtb	r3, r3
 800d14a:	4053      	eors	r3, r2
 800d14c:	b25b      	sxtb	r3, r3
 800d14e:	75bb      	strb	r3, [r7, #22]
 800d150:	e01c      	b.n	800d18c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d152:	7afb      	ldrb	r3, [r7, #11]
 800d154:	2b18      	cmp	r3, #24
 800d156:	d919      	bls.n	800d18c <lorawan_aes_set_key+0x140>
 800d158:	7dfb      	ldrb	r3, [r7, #23]
 800d15a:	7afa      	ldrb	r2, [r7, #11]
 800d15c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d160:	fb01 f202 	mul.w	r2, r1, r2
 800d164:	1a9b      	subs	r3, r3, r2
 800d166:	b2db      	uxtb	r3, r3
 800d168:	2b10      	cmp	r3, #16
 800d16a:	d10f      	bne.n	800d18c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800d16c:	7d7b      	ldrb	r3, [r7, #21]
 800d16e:	4a25      	ldr	r2, [pc, #148]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d170:	5cd3      	ldrb	r3, [r2, r3]
 800d172:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d174:	7d3b      	ldrb	r3, [r7, #20]
 800d176:	4a23      	ldr	r2, [pc, #140]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d178:	5cd3      	ldrb	r3, [r2, r3]
 800d17a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d17c:	7cfb      	ldrb	r3, [r7, #19]
 800d17e:	4a21      	ldr	r2, [pc, #132]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d180:	5cd3      	ldrb	r3, [r2, r3]
 800d182:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d184:	7cbb      	ldrb	r3, [r7, #18]
 800d186:	4a1f      	ldr	r2, [pc, #124]	; (800d204 <lorawan_aes_set_key+0x1b8>)
 800d188:	5cd3      	ldrb	r3, [r2, r3]
 800d18a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d18c:	7dfa      	ldrb	r2, [r7, #23]
 800d18e:	7afb      	ldrb	r3, [r7, #11]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d194:	7c3b      	ldrb	r3, [r7, #16]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	5cd1      	ldrb	r1, [r2, r3]
 800d19a:	7dfb      	ldrb	r3, [r7, #23]
 800d19c:	7d7a      	ldrb	r2, [r7, #21]
 800d19e:	404a      	eors	r2, r1
 800d1a0:	b2d1      	uxtb	r1, r2
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d1a6:	7c3b      	ldrb	r3, [r7, #16]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	5cd1      	ldrb	r1, [r2, r3]
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	7d3a      	ldrb	r2, [r7, #20]
 800d1b4:	404a      	eors	r2, r1
 800d1b6:	b2d1      	uxtb	r1, r2
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d1bc:	7c3b      	ldrb	r3, [r7, #16]
 800d1be:	3302      	adds	r3, #2
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	5cd1      	ldrb	r1, [r2, r3]
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	3302      	adds	r3, #2
 800d1c8:	7cfa      	ldrb	r2, [r7, #19]
 800d1ca:	404a      	eors	r2, r1
 800d1cc:	b2d1      	uxtb	r1, r2
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d1d2:	7c3b      	ldrb	r3, [r7, #16]
 800d1d4:	3303      	adds	r3, #3
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	5cd1      	ldrb	r1, [r2, r3]
 800d1da:	7dfb      	ldrb	r3, [r7, #23]
 800d1dc:	3303      	adds	r3, #3
 800d1de:	7cba      	ldrb	r2, [r7, #18]
 800d1e0:	404a      	eors	r2, r1
 800d1e2:	b2d1      	uxtb	r1, r2
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	75fb      	strb	r3, [r7, #23]
 800d1ee:	7dfa      	ldrb	r2, [r7, #23]
 800d1f0:	7c7b      	ldrb	r3, [r7, #17]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	f4ff af67 	bcc.w	800d0c6 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	0801db5c 	.word	0x0801db5c

0800d208 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08a      	sub	sp, #40	; 0x28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d038      	beq.n	800d290 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	f107 0314 	add.w	r3, r7, #20
 800d224:	68f9      	ldr	r1, [r7, #12]
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff fc07 	bl	800ca3a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d22c:	2301      	movs	r3, #1
 800d22e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d232:	e014      	b.n	800d25e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d234:	f107 0314 	add.w	r3, r7, #20
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff fd5d 	bl	800ccf8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d244:	0112      	lsls	r2, r2, #4
 800d246:	441a      	add	r2, r3
 800d248:	f107 0314 	add.w	r3, r7, #20
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff fcab 	bl	800cbaa <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d258:	3301      	adds	r3, #1
 800d25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d264:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d268:	429a      	cmp	r2, r3
 800d26a:	d3e3      	bcc.n	800d234 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d26c:	f107 0314 	add.w	r3, r7, #20
 800d270:	4618      	mov	r0, r3
 800d272:	f7ff fca7 	bl	800cbc4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d27c:	0112      	lsls	r2, r2, #4
 800d27e:	441a      	add	r2, r3
 800d280:	f107 0314 	add.w	r3, r7, #20
 800d284:	4619      	mov	r1, r3
 800d286:	68b8      	ldr	r0, [r7, #8]
 800d288:	f7ff fbd7 	bl	800ca3a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	e000      	b.n	800d292 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d290:	23ff      	movs	r3, #255	; 0xff
}
 800d292:	4618      	mov	r0, r3
 800d294:	3728      	adds	r7, #40	; 0x28
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
	...

0800d29c <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800d29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29e:	b09d      	sub	sp, #116	; 0x74
 800d2a0:	af10      	add	r7, sp, #64	; 0x40
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d2a8:	2306      	movs	r3, #6
 800d2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800d2ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d2b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 f9a7 	bl	800d60c <SecureElementGetKeyByID>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800d2c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f040 80b0 	bne.w	800d42e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800d2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d106      	bne.n	800d2e4 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800d2d6:	4b58      	ldr	r3, [pc, #352]	; (800d438 <PrintKey+0x19c>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2100      	movs	r1, #0
 800d2dc:	2002      	movs	r0, #2
 800d2de:	f00f fd83 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d2e2:	e056      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800d2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d106      	bne.n	800d2fa <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800d2ec:	4b53      	ldr	r3, [pc, #332]	; (800d43c <PrintKey+0x1a0>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	2002      	movs	r0, #2
 800d2f4:	f00f fd78 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d2f8:	e04b      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800d2fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d106      	bne.n	800d310 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800d302:	4b4f      	ldr	r3, [pc, #316]	; (800d440 <PrintKey+0x1a4>)
 800d304:	2200      	movs	r2, #0
 800d306:	2100      	movs	r1, #0
 800d308:	2002      	movs	r0, #2
 800d30a:	f00f fd6d 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d30e:	e040      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800d310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d314:	2b02      	cmp	r3, #2
 800d316:	d106      	bne.n	800d326 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800d318:	4b4a      	ldr	r3, [pc, #296]	; (800d444 <PrintKey+0x1a8>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	2100      	movs	r1, #0
 800d31e:	2002      	movs	r0, #2
 800d320:	f00f fd62 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d324:	e035      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800d326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d32a:	2b04      	cmp	r3, #4
 800d32c:	d106      	bne.n	800d33c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800d32e:	4b46      	ldr	r3, [pc, #280]	; (800d448 <PrintKey+0x1ac>)
 800d330:	2200      	movs	r2, #0
 800d332:	2100      	movs	r1, #0
 800d334:	2002      	movs	r0, #2
 800d336:	f00f fd57 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d33a:	e02a      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d340:	2b7f      	cmp	r3, #127	; 0x7f
 800d342:	d106      	bne.n	800d352 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800d344:	4b41      	ldr	r3, [pc, #260]	; (800d44c <PrintKey+0x1b0>)
 800d346:	2200      	movs	r2, #0
 800d348:	2100      	movs	r1, #0
 800d34a:	2002      	movs	r0, #2
 800d34c:	f00f fd4c 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d350:	e01f      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800d352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d356:	2b80      	cmp	r3, #128	; 0x80
 800d358:	d106      	bne.n	800d368 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800d35a:	4b3d      	ldr	r3, [pc, #244]	; (800d450 <PrintKey+0x1b4>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	2100      	movs	r1, #0
 800d360:	2002      	movs	r0, #2
 800d362:	f00f fd41 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d366:	e014      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800d368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d36c:	2b81      	cmp	r3, #129	; 0x81
 800d36e:	d106      	bne.n	800d37e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800d370:	4b38      	ldr	r3, [pc, #224]	; (800d454 <PrintKey+0x1b8>)
 800d372:	2200      	movs	r2, #0
 800d374:	2100      	movs	r1, #0
 800d376:	2002      	movs	r0, #2
 800d378:	f00f fd36 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 800d37c:	e009      	b.n	800d392 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800d37e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d382:	2b82      	cmp	r3, #130	; 0x82
 800d384:	d105      	bne.n	800d392 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800d386:	4b34      	ldr	r3, [pc, #208]	; (800d458 <PrintKey+0x1bc>)
 800d388:	2200      	movs	r2, #0
 800d38a:	2100      	movs	r1, #0
 800d38c:	2002      	movs	r0, #2
 800d38e:	f00f fd2b 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d394:	785b      	ldrb	r3, [r3, #1]
 800d396:	4618      	mov	r0, r3
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	789b      	ldrb	r3, [r3, #2]
 800d39c:	461c      	mov	r4, r3
 800d39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a0:	78db      	ldrb	r3, [r3, #3]
 800d3a2:	461d      	mov	r5, r3
 800d3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a6:	791b      	ldrb	r3, [r3, #4]
 800d3a8:	461e      	mov	r6, r3
 800d3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ac:	795b      	ldrb	r3, [r3, #5]
 800d3ae:	623b      	str	r3, [r7, #32]
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	799b      	ldrb	r3, [r3, #6]
 800d3b4:	61fb      	str	r3, [r7, #28]
 800d3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b8:	79db      	ldrb	r3, [r3, #7]
 800d3ba:	61bb      	str	r3, [r7, #24]
 800d3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3be:	7a1b      	ldrb	r3, [r3, #8]
 800d3c0:	617b      	str	r3, [r7, #20]
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	7a5b      	ldrb	r3, [r3, #9]
 800d3c6:	613b      	str	r3, [r7, #16]
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	7a9b      	ldrb	r3, [r3, #10]
 800d3cc:	60fb      	str	r3, [r7, #12]
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	7adb      	ldrb	r3, [r3, #11]
 800d3d2:	60bb      	str	r3, [r7, #8]
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	7b1b      	ldrb	r3, [r3, #12]
 800d3d8:	607b      	str	r3, [r7, #4]
 800d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3dc:	7b5b      	ldrb	r3, [r3, #13]
 800d3de:	603b      	str	r3, [r7, #0]
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	7b9b      	ldrb	r3, [r3, #14]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e8:	7bdb      	ldrb	r3, [r3, #15]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	7c1b      	ldrb	r3, [r3, #16]
 800d3f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3f2:	920e      	str	r2, [sp, #56]	; 0x38
 800d3f4:	910d      	str	r1, [sp, #52]	; 0x34
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	920c      	str	r2, [sp, #48]	; 0x30
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	920b      	str	r2, [sp, #44]	; 0x2c
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	920a      	str	r2, [sp, #40]	; 0x28
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	9209      	str	r2, [sp, #36]	; 0x24
 800d406:	693a      	ldr	r2, [r7, #16]
 800d408:	9208      	str	r2, [sp, #32]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	9207      	str	r2, [sp, #28]
 800d40e:	69ba      	ldr	r2, [r7, #24]
 800d410:	9206      	str	r2, [sp, #24]
 800d412:	69fa      	ldr	r2, [r7, #28]
 800d414:	9205      	str	r2, [sp, #20]
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	9603      	str	r6, [sp, #12]
 800d41c:	9502      	str	r5, [sp, #8]
 800d41e:	9401      	str	r4, [sp, #4]
 800d420:	9000      	str	r0, [sp, #0]
 800d422:	4b0e      	ldr	r3, [pc, #56]	; (800d45c <PrintKey+0x1c0>)
 800d424:	2200      	movs	r2, #0
 800d426:	2100      	movs	r1, #0
 800d428:	2002      	movs	r0, #2
 800d42a:	f00f fcdd 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800d42e:	bf00      	nop
 800d430:	3734      	adds	r7, #52	; 0x34
 800d432:	46bd      	mov	sp, r7
 800d434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d436:	bf00      	nop
 800d438:	0801d5b0 	.word	0x0801d5b0
 800d43c:	0801d5c8 	.word	0x0801d5c8
 800d440:	0801d5e0 	.word	0x0801d5e0
 800d444:	0801d5f8 	.word	0x0801d5f8
 800d448:	0801d610 	.word	0x0801d610
 800d44c:	0801d628 	.word	0x0801d628
 800d450:	0801d640 	.word	0x0801d640
 800d454:	0801d658 	.word	0x0801d658
 800d458:	0801d670 	.word	0x0801d670
 800d45c:	0801d688 	.word	0x0801d688

0800d460 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	6039      	str	r1, [r7, #0]
 800d46a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]
 800d470:	e01a      	b.n	800d4a8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d472:	4b12      	ldr	r3, [pc, #72]	; (800d4bc <GetKeyByID+0x5c>)
 800d474:	6819      	ldr	r1, [r3, #0]
 800d476:	7bfa      	ldrb	r2, [r7, #15]
 800d478:	4613      	mov	r3, r2
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	4413      	add	r3, r2
 800d47e:	440b      	add	r3, r1
 800d480:	3310      	adds	r3, #16
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	79fa      	ldrb	r2, [r7, #7]
 800d486:	429a      	cmp	r2, r3
 800d488:	d10b      	bne.n	800d4a2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d48a:	4b0c      	ldr	r3, [pc, #48]	; (800d4bc <GetKeyByID+0x5c>)
 800d48c:	6819      	ldr	r1, [r3, #0]
 800d48e:	7bfa      	ldrb	r2, [r7, #15]
 800d490:	4613      	mov	r3, r2
 800d492:	011b      	lsls	r3, r3, #4
 800d494:	4413      	add	r3, r2
 800d496:	3310      	adds	r3, #16
 800d498:	18ca      	adds	r2, r1, r3
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e006      	b.n	800d4b0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	73fb      	strb	r3, [r7, #15]
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
 800d4aa:	2b09      	cmp	r3, #9
 800d4ac:	d9e1      	bls.n	800d472 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d4ae:	2303      	movs	r3, #3
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bc80      	pop	{r7}
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	20000b94 	.word	0x20000b94

0800d4c0 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b0d1      	sub	sp, #324	; 0x144
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800d4ca:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800d4ce:	6020      	str	r0, [r4, #0]
 800d4d0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800d4d4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800d4d8:	6001      	str	r1, [r0, #0]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d4e0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d4e4:	801a      	strh	r2, [r3, #0]
 800d4e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d4ea:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800d4ee:	460a      	mov	r2, r1
 800d4f0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d4f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d4f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d003      	beq.n	800d508 <ComputeCmac+0x48>
 800d500:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d508:	2302      	movs	r3, #2
 800d50a:	e05c      	b.n	800d5c6 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d50c:	f107 0314 	add.w	r3, r7, #20
 800d510:	4618      	mov	r0, r3
 800d512:	f7fe ff1b 	bl	800c34c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d516:	f107 0210 	add.w	r2, r7, #16
 800d51a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d51e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	4611      	mov	r1, r2
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff ff9a 	bl	800d460 <GetKeyByID>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d532:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d536:	2b00      	cmp	r3, #0
 800d538:	d143      	bne.n	800d5c2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d53a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d53e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	f107 0314 	add.w	r3, r7, #20
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fe ff16 	bl	800c37e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d552:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d556:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d009      	beq.n	800d574 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800d560:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d564:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d568:	f107 0014 	add.w	r0, r7, #20
 800d56c:	2210      	movs	r2, #16
 800d56e:	6819      	ldr	r1, [r3, #0]
 800d570:	f7fe ff14 	bl	800c39c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d574:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d578:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d57c:	881a      	ldrh	r2, [r3, #0]
 800d57e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d582:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d586:	f107 0014 	add.w	r0, r7, #20
 800d58a:	6819      	ldr	r1, [r3, #0]
 800d58c:	f7fe ff06 	bl	800c39c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d590:	f107 0214 	add.w	r2, r7, #20
 800d594:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d598:	4611      	mov	r1, r2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe ffc0 	bl	800c520 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d5a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800d5a4:	061a      	lsls	r2, r3, #24
 800d5a6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800d5aa:	041b      	lsls	r3, r3, #16
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800d5b2:	021b      	lsls	r3, r3, #8
 800d5b4:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800d5b6:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d5c0:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d5c2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd90      	pop	{r4, r7, pc}

0800d5d0 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d101      	bne.n	800d5e4 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	e00a      	b.n	800d5fa <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800d5e4:	4a07      	ldr	r2, [pc, #28]	; (800d604 <SecureElementInit+0x34>)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800d5ea:	4b06      	ldr	r3, [pc, #24]	; (800d604 <SecureElementInit+0x34>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	22c0      	movs	r2, #192	; 0xc0
 800d5f0:	4905      	ldr	r1, [pc, #20]	; (800d608 <SecureElementInit+0x38>)
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f00b f8a3 	bl	801873e <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20000b94 	.word	0x20000b94
 800d608:	0801dff0 	.word	0x0801dff0

0800d60c <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	6039      	str	r1, [r7, #0]
 800d616:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]
 800d61c:	e01a      	b.n	800d654 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <SecureElementGetKeyByID+0x5c>)
 800d620:	6819      	ldr	r1, [r3, #0]
 800d622:	7bfa      	ldrb	r2, [r7, #15]
 800d624:	4613      	mov	r3, r2
 800d626:	011b      	lsls	r3, r3, #4
 800d628:	4413      	add	r3, r2
 800d62a:	440b      	add	r3, r1
 800d62c:	3310      	adds	r3, #16
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	79fa      	ldrb	r2, [r7, #7]
 800d632:	429a      	cmp	r2, r3
 800d634:	d10b      	bne.n	800d64e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800d636:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <SecureElementGetKeyByID+0x5c>)
 800d638:	6819      	ldr	r1, [r3, #0]
 800d63a:	7bfa      	ldrb	r2, [r7, #15]
 800d63c:	4613      	mov	r3, r2
 800d63e:	011b      	lsls	r3, r3, #4
 800d640:	4413      	add	r3, r2
 800d642:	3310      	adds	r3, #16
 800d644:	18ca      	adds	r2, r1, r3
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d64a:	2300      	movs	r3, #0
 800d64c:	e006      	b.n	800d65c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
 800d650:	3301      	adds	r3, #1
 800d652:	73fb      	strb	r3, [r7, #15]
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	2b09      	cmp	r3, #9
 800d658:	d9e1      	bls.n	800d61e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d65a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	bc80      	pop	{r7}
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	20000b94 	.word	0x20000b94

0800d66c <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d66e:	b08b      	sub	sp, #44	; 0x2c
 800d670:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d672:	4b3f      	ldr	r3, [pc, #252]	; (800d770 <SecureElementPrintKeys+0x104>)
 800d674:	2200      	movs	r2, #0
 800d676:	2100      	movs	r1, #0
 800d678:	2002      	movs	r0, #2
 800d67a:	f00f fbb5 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800d67e:	2000      	movs	r0, #0
 800d680:	f7ff fe0c 	bl	800d29c <PrintKey>
    PrintKey(NWK_KEY);
 800d684:	2001      	movs	r0, #1
 800d686:	f7ff fe09 	bl	800d29c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d68a:	4b3a      	ldr	r3, [pc, #232]	; (800d774 <SecureElementPrintKeys+0x108>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	2100      	movs	r1, #0
 800d690:	2002      	movs	r0, #2
 800d692:	f00f fba9 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800d696:	2003      	movs	r0, #3
 800d698:	f7ff fe00 	bl	800d29c <PrintKey>
    PrintKey(NWK_S_KEY);
 800d69c:	2002      	movs	r0, #2
 800d69e:	f7ff fdfd 	bl	800d29c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800d6a2:	4b35      	ldr	r3, [pc, #212]	; (800d778 <SecureElementPrintKeys+0x10c>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	2002      	movs	r0, #2
 800d6aa:	f00f fb9d 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d6ae:	4b33      	ldr	r3, [pc, #204]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	4b31      	ldr	r3, [pc, #196]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	785b      	ldrb	r3, [r3, #1]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	4b2f      	ldr	r3, [pc, #188]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	789b      	ldrb	r3, [r3, #2]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	4b2d      	ldr	r3, [pc, #180]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	78db      	ldrb	r3, [r3, #3]
 800d6cc:	461c      	mov	r4, r3
 800d6ce:	4b2b      	ldr	r3, [pc, #172]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	791b      	ldrb	r3, [r3, #4]
 800d6d4:	461d      	mov	r5, r3
 800d6d6:	4b29      	ldr	r3, [pc, #164]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	795b      	ldrb	r3, [r3, #5]
 800d6dc:	461e      	mov	r6, r3
 800d6de:	4b27      	ldr	r3, [pc, #156]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	799b      	ldrb	r3, [r3, #6]
 800d6e4:	607b      	str	r3, [r7, #4]
 800d6e6:	4b25      	ldr	r3, [pc, #148]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	79db      	ldrb	r3, [r3, #7]
 800d6ec:	9307      	str	r3, [sp, #28]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	9306      	str	r3, [sp, #24]
 800d6f2:	9605      	str	r6, [sp, #20]
 800d6f4:	9504      	str	r5, [sp, #16]
 800d6f6:	9403      	str	r4, [sp, #12]
 800d6f8:	9002      	str	r0, [sp, #8]
 800d6fa:	9101      	str	r1, [sp, #4]
 800d6fc:	9200      	str	r2, [sp, #0]
 800d6fe:	4b20      	ldr	r3, [pc, #128]	; (800d780 <SecureElementPrintKeys+0x114>)
 800d700:	2200      	movs	r2, #0
 800d702:	2100      	movs	r1, #0
 800d704:	2002      	movs	r0, #2
 800d706:	f00f fb6f 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d70a:	4b1c      	ldr	r3, [pc, #112]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	7a1b      	ldrb	r3, [r3, #8]
 800d710:	461a      	mov	r2, r3
 800d712:	4b1a      	ldr	r3, [pc, #104]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	7a5b      	ldrb	r3, [r3, #9]
 800d718:	4619      	mov	r1, r3
 800d71a:	4b18      	ldr	r3, [pc, #96]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	7a9b      	ldrb	r3, [r3, #10]
 800d720:	4618      	mov	r0, r3
 800d722:	4b16      	ldr	r3, [pc, #88]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	7adb      	ldrb	r3, [r3, #11]
 800d728:	461c      	mov	r4, r3
 800d72a:	4b14      	ldr	r3, [pc, #80]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	7b1b      	ldrb	r3, [r3, #12]
 800d730:	461d      	mov	r5, r3
 800d732:	4b12      	ldr	r3, [pc, #72]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	7b5b      	ldrb	r3, [r3, #13]
 800d738:	461e      	mov	r6, r3
 800d73a:	4b10      	ldr	r3, [pc, #64]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	7b9b      	ldrb	r3, [r3, #14]
 800d740:	607b      	str	r3, [r7, #4]
 800d742:	4b0e      	ldr	r3, [pc, #56]	; (800d77c <SecureElementPrintKeys+0x110>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	7bdb      	ldrb	r3, [r3, #15]
 800d748:	9307      	str	r3, [sp, #28]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	9306      	str	r3, [sp, #24]
 800d74e:	9605      	str	r6, [sp, #20]
 800d750:	9504      	str	r5, [sp, #16]
 800d752:	9403      	str	r4, [sp, #12]
 800d754:	9002      	str	r0, [sp, #8]
 800d756:	9101      	str	r1, [sp, #4]
 800d758:	9200      	str	r2, [sp, #0]
 800d75a:	4b0a      	ldr	r3, [pc, #40]	; (800d784 <SecureElementPrintKeys+0x118>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	2100      	movs	r1, #0
 800d760:	2002      	movs	r0, #2
 800d762:	f00f fb41 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	370c      	adds	r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d770:	0801d6dc 	.word	0x0801d6dc
 800d774:	0801d6f4 	.word	0x0801d6f4
 800d778:	0801d70c 	.word	0x0801d70c
 800d77c:	20000b94 	.word	0x20000b94
 800d780:	0801d724 	.word	0x0801d724
 800d784:	0801d764 	.word	0x0801d764

0800d788 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800d78c:	2004      	movs	r0, #4
 800d78e:	f7ff fd85 	bl	800d29c <PrintKey>
    PrintKey(MC_KE_KEY);
 800d792:	207f      	movs	r0, #127	; 0x7f
 800d794:	f7ff fd82 	bl	800d29c <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800d798:	2002      	movs	r0, #2
 800d79a:	f7ff fd7f 	bl	800d29c <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800d79e:	2003      	movs	r0, #3
 800d7a0:	f7ff fd7c 	bl	800d29c <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	bd80      	pop	{r7, pc}
	...

0800d7ac <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	6039      	str	r1, [r7, #0]
 800d7b6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e04c      	b.n	800d85c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	77fb      	strb	r3, [r7, #31]
 800d7c6:	e045      	b.n	800d854 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d7c8:	4b26      	ldr	r3, [pc, #152]	; (800d864 <SecureElementSetKey+0xb8>)
 800d7ca:	6819      	ldr	r1, [r3, #0]
 800d7cc:	7ffa      	ldrb	r2, [r7, #31]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	4413      	add	r3, r2
 800d7d4:	440b      	add	r3, r1
 800d7d6:	3310      	adds	r3, #16
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	79fa      	ldrb	r2, [r7, #7]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d136      	bne.n	800d84e <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	2b80      	cmp	r3, #128	; 0x80
 800d7e4:	d123      	bne.n	800d82e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800d7e6:	2306      	movs	r3, #6
 800d7e8:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	f107 0310 	add.w	r3, r7, #16
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	605a      	str	r2, [r3, #4]
 800d7f8:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d7fa:	f107 030c 	add.w	r3, r7, #12
 800d7fe:	227f      	movs	r2, #127	; 0x7f
 800d800:	2110      	movs	r1, #16
 800d802:	6838      	ldr	r0, [r7, #0]
 800d804:	f000 f87d 	bl	800d902 <SecureElementAesEncrypt>
 800d808:	4603      	mov	r3, r0
 800d80a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d80c:	4b15      	ldr	r3, [pc, #84]	; (800d864 <SecureElementSetKey+0xb8>)
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	7ffa      	ldrb	r2, [r7, #31]
 800d812:	4613      	mov	r3, r2
 800d814:	011b      	lsls	r3, r3, #4
 800d816:	4413      	add	r3, r2
 800d818:	3310      	adds	r3, #16
 800d81a:	440b      	add	r3, r1
 800d81c:	3301      	adds	r3, #1
 800d81e:	f107 010c 	add.w	r1, r7, #12
 800d822:	2210      	movs	r2, #16
 800d824:	4618      	mov	r0, r3
 800d826:	f00a ff8a 	bl	801873e <memcpy1>
                return retval;
 800d82a:	7fbb      	ldrb	r3, [r7, #30]
 800d82c:	e016      	b.n	800d85c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d82e:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <SecureElementSetKey+0xb8>)
 800d830:	6819      	ldr	r1, [r3, #0]
 800d832:	7ffa      	ldrb	r2, [r7, #31]
 800d834:	4613      	mov	r3, r2
 800d836:	011b      	lsls	r3, r3, #4
 800d838:	4413      	add	r3, r2
 800d83a:	3310      	adds	r3, #16
 800d83c:	440b      	add	r3, r1
 800d83e:	3301      	adds	r3, #1
 800d840:	2210      	movs	r2, #16
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	f00a ff7a 	bl	801873e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e006      	b.n	800d85c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d84e:	7ffb      	ldrb	r3, [r7, #31]
 800d850:	3301      	adds	r3, #1
 800d852:	77fb      	strb	r3, [r7, #31]
 800d854:	7ffb      	ldrb	r3, [r7, #31]
 800d856:	2b09      	cmp	r3, #9
 800d858:	d9b6      	bls.n	800d7c8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d85a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3720      	adds	r7, #32
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	20000b94 	.word	0x20000b94

0800d868 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af02      	add	r7, sp, #8
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	4611      	mov	r1, r2
 800d874:	461a      	mov	r2, r3
 800d876:	460b      	mov	r3, r1
 800d878:	80fb      	strh	r3, [r7, #6]
 800d87a:	4613      	mov	r3, r2
 800d87c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d87e:	797b      	ldrb	r3, [r7, #5]
 800d880:	2b7e      	cmp	r3, #126	; 0x7e
 800d882:	d901      	bls.n	800d888 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d884:	2303      	movs	r3, #3
 800d886:	e009      	b.n	800d89c <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d888:	7979      	ldrb	r1, [r7, #5]
 800d88a:	88fa      	ldrh	r2, [r7, #6]
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	460b      	mov	r3, r1
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff fe13 	bl	800d4c0 <ComputeCmac>
 800d89a:	4603      	mov	r3, r0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	607a      	str	r2, [r7, #4]
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	817b      	strh	r3, [r7, #10]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d8be:	2302      	movs	r3, #2
 800d8c0:	e01b      	b.n	800d8fa <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d8c2:	2306      	movs	r3, #6
 800d8c4:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d8ca:	7a79      	ldrb	r1, [r7, #9]
 800d8cc:	897a      	ldrh	r2, [r7, #10]
 800d8ce:	f107 0310 	add.w	r3, r7, #16
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	68f9      	ldr	r1, [r7, #12]
 800d8d8:	2000      	movs	r0, #0
 800d8da:	f7ff fdf1 	bl	800d4c0 <ComputeCmac>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d8e2:	7dfb      	ldrb	r3, [r7, #23]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ea:	e006      	b.n	800d8fa <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d001      	beq.n	800d8f8 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b0c2      	sub	sp, #264	; 0x108
 800d906:	af00      	add	r7, sp, #0
 800d908:	60f8      	str	r0, [r7, #12]
 800d90a:	4608      	mov	r0, r1
 800d90c:	4611      	mov	r1, r2
 800d90e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d912:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	4603      	mov	r3, r0
 800d91a:	817b      	strh	r3, [r7, #10]
 800d91c:	460b      	mov	r3, r1
 800d91e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d006      	beq.n	800d934 <SecureElementAesEncrypt+0x32>
 800d926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d92a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d934:	2302      	movs	r3, #2
 800d936:	e046      	b.n	800d9c6 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d938:	897b      	ldrh	r3, [r7, #10]
 800d93a:	f003 030f 	and.w	r3, r3, #15
 800d93e:	b29b      	uxth	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d001      	beq.n	800d948 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d944:	2305      	movs	r3, #5
 800d946:	e03e      	b.n	800d9c6 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d948:	f107 0314 	add.w	r3, r7, #20
 800d94c:	22f0      	movs	r2, #240	; 0xf0
 800d94e:	2100      	movs	r1, #0
 800d950:	4618      	mov	r0, r3
 800d952:	f00a ff2f 	bl	80187b4 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d956:	f107 0210 	add.w	r2, r7, #16
 800d95a:	7a7b      	ldrb	r3, [r7, #9]
 800d95c:	4611      	mov	r1, r2
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff fd7e 	bl	800d460 <GetKeyByID>
 800d964:	4603      	mov	r3, r0
 800d966:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d96a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d127      	bne.n	800d9c2 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	3301      	adds	r3, #1
 800d976:	f107 0214 	add.w	r2, r7, #20
 800d97a:	2110      	movs	r1, #16
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7ff fb65 	bl	800d04c <lorawan_aes_set_key>

        uint8_t block = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d988:	e018      	b.n	800d9bc <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d98a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	18d0      	adds	r0, r2, r3
 800d992:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d996:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d99a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d99e:	6812      	ldr	r2, [r2, #0]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	f107 0214 	add.w	r2, r7, #20
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	f7ff fc2e 	bl	800d208 <lorawan_aes_encrypt>
            block = block + 16;
 800d9ac:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d9b0:	3310      	adds	r3, #16
 800d9b2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d9b6:	897b      	ldrh	r3, [r7, #10]
 800d9b8:	3b10      	subs	r3, #16
 800d9ba:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d9bc:	897b      	ldrh	r3, [r7, #10]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1e3      	bne.n	800d98a <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d9c2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	460b      	mov	r3, r1
 800d9da:	70fb      	strb	r3, [r7, #3]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d101      	bne.n	800d9ea <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	e02e      	b.n	800da48 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d9ea:	2306      	movs	r3, #6
 800d9ec:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d9ee:	78bb      	ldrb	r3, [r7, #2]
 800d9f0:	2b7f      	cmp	r3, #127	; 0x7f
 800d9f2:	d104      	bne.n	800d9fe <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d9f4:	78fb      	ldrb	r3, [r7, #3]
 800d9f6:	2b04      	cmp	r3, #4
 800d9f8:	d001      	beq.n	800d9fe <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	e024      	b.n	800da48 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d9fe:	2300      	movs	r3, #0
 800da00:	60fb      	str	r3, [r7, #12]
 800da02:	f107 0310 	add.w	r3, r7, #16
 800da06:	2200      	movs	r2, #0
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	605a      	str	r2, [r3, #4]
 800da0c:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800da0e:	f107 030c 	add.w	r3, r7, #12
 800da12:	78fa      	ldrb	r2, [r7, #3]
 800da14:	2110      	movs	r1, #16
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff ff73 	bl	800d902 <SecureElementAesEncrypt>
 800da1c:	4603      	mov	r3, r0
 800da1e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800da20:	7ffb      	ldrb	r3, [r7, #31]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800da26:	7ffb      	ldrb	r3, [r7, #31]
 800da28:	e00e      	b.n	800da48 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800da2a:	f107 020c 	add.w	r2, r7, #12
 800da2e:	78bb      	ldrb	r3, [r7, #2]
 800da30:	4611      	mov	r1, r2
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff feba 	bl	800d7ac <SecureElementSetKey>
 800da38:	4603      	mov	r3, r0
 800da3a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800da3c:	7ffb      	ldrb	r3, [r7, #31]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d001      	beq.n	800da46 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800da42:	7ffb      	ldrb	r3, [r7, #31]
 800da44:	e000      	b.n	800da48 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800da46:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3720      	adds	r7, #32
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60b9      	str	r1, [r7, #8]
 800da58:	607b      	str	r3, [r7, #4]
 800da5a:	4603      	mov	r3, r0
 800da5c:	73fb      	strb	r3, [r7, #15]
 800da5e:	4613      	mov	r3, r2
 800da60:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d005      	beq.n	800da74 <SecureElementProcessJoinAccept+0x24>
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <SecureElementProcessJoinAccept+0x24>
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800da74:	2302      	movs	r3, #2
 800da76:	e064      	b.n	800db42 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800da78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da7c:	2b21      	cmp	r3, #33	; 0x21
 800da7e:	d901      	bls.n	800da84 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800da80:	2305      	movs	r3, #5
 800da82:	e05e      	b.n	800db42 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800da84:	2301      	movs	r3, #1
 800da86:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800da88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	461a      	mov	r2, r3
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da94:	f00a fe53 	bl	801873e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	1c58      	adds	r0, r3, #1
 800da9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	3b01      	subs	r3, #1
 800daa4:	b299      	uxth	r1, r3
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	3301      	adds	r3, #1
 800daaa:	7dfa      	ldrb	r2, [r7, #23]
 800daac:	f7ff ff29 	bl	800d902 <SecureElementAesEncrypt>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800dab6:	2307      	movs	r3, #7
 800dab8:	e043      	b.n	800db42 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	330b      	adds	r3, #11
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	09db      	lsrs	r3, r3, #7
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac6:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800dacc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dad0:	3b04      	subs	r3, #4
 800dad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dad4:	4413      	add	r3, r2
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800dada:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dade:	3b03      	subs	r3, #3
 800dae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae2:	4413      	add	r3, r2
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	021b      	lsls	r3, r3, #8
 800dae8:	693a      	ldr	r2, [r7, #16]
 800daea:	4313      	orrs	r3, r2
 800daec:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800daee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800daf2:	3b02      	subs	r3, #2
 800daf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf6:	4413      	add	r3, r2
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	041b      	lsls	r3, r3, #16
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	4313      	orrs	r3, r2
 800db00:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800db02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db06:	3b01      	subs	r3, #1
 800db08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0a:	4413      	add	r3, r2
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	061b      	lsls	r3, r3, #24
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	4313      	orrs	r3, r2
 800db14:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800db16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10e      	bne.n	800db3c <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800db1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db22:	b29b      	uxth	r3, r3
 800db24:	3b04      	subs	r3, #4
 800db26:	b299      	uxth	r1, r3
 800db28:	2301      	movs	r3, #1
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db2e:	f7ff feb9 	bl	800d8a4 <SecureElementVerifyAesCmac>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d003      	beq.n	800db40 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800db38:	2301      	movs	r3, #1
 800db3a:	e002      	b.n	800db42 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800db3c:	2304      	movs	r3, #4
 800db3e:	e000      	b.n	800db42 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3718      	adds	r7, #24
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db5a:	2302      	movs	r3, #2
 800db5c:	e007      	b.n	800db6e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800db5e:	4b06      	ldr	r3, [pc, #24]	; (800db78 <SecureElementSetDevEui+0x2c>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2208      	movs	r2, #8
 800db64:	6879      	ldr	r1, [r7, #4]
 800db66:	4618      	mov	r0, r3
 800db68:	f00a fde9 	bl	801873e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20000b94 	.word	0x20000b94

0800db7c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800db7c:	b480      	push	{r7}
 800db7e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800db80:	4b02      	ldr	r3, [pc, #8]	; (800db8c <SecureElementGetDevEui+0x10>)
 800db82:	681b      	ldr	r3, [r3, #0]
}
 800db84:	4618      	mov	r0, r3
 800db86:	46bd      	mov	sp, r7
 800db88:	bc80      	pop	{r7}
 800db8a:	4770      	bx	lr
 800db8c:	20000b94 	.word	0x20000b94

0800db90 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db9e:	2302      	movs	r3, #2
 800dba0:	e008      	b.n	800dbb4 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800dba2:	4b06      	ldr	r3, [pc, #24]	; (800dbbc <SecureElementSetJoinEui+0x2c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	3308      	adds	r3, #8
 800dba8:	2208      	movs	r2, #8
 800dbaa:	6879      	ldr	r1, [r7, #4]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f00a fdc6 	bl	801873e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	20000b94 	.word	0x20000b94

0800dbc0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800dbc4:	4b03      	ldr	r3, [pc, #12]	; (800dbd4 <SecureElementGetJoinEui+0x14>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3308      	adds	r3, #8
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bc80      	pop	{r7}
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	20000b94 	.word	0x20000b94

0800dbd8 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800dbe2:	4a23      	ldr	r2, [pc, #140]	; (800dc70 <LmHandlerInit+0x98>)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dbe8:	4b22      	ldr	r3, [pc, #136]	; (800dc74 <LmHandlerInit+0x9c>)
 800dbea:	4a23      	ldr	r2, [pc, #140]	; (800dc78 <LmHandlerInit+0xa0>)
 800dbec:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dbee:	4b21      	ldr	r3, [pc, #132]	; (800dc74 <LmHandlerInit+0x9c>)
 800dbf0:	4a22      	ldr	r2, [pc, #136]	; (800dc7c <LmHandlerInit+0xa4>)
 800dbf2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dbf4:	4b1f      	ldr	r3, [pc, #124]	; (800dc74 <LmHandlerInit+0x9c>)
 800dbf6:	4a22      	ldr	r2, [pc, #136]	; (800dc80 <LmHandlerInit+0xa8>)
 800dbf8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dbfa:	4b1e      	ldr	r3, [pc, #120]	; (800dc74 <LmHandlerInit+0x9c>)
 800dbfc:	4a21      	ldr	r2, [pc, #132]	; (800dc84 <LmHandlerInit+0xac>)
 800dbfe:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800dc00:	4b1b      	ldr	r3, [pc, #108]	; (800dc70 <LmHandlerInit+0x98>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a20      	ldr	r2, [pc, #128]	; (800dc88 <LmHandlerInit+0xb0>)
 800dc08:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800dc0a:	4b19      	ldr	r3, [pc, #100]	; (800dc70 <LmHandlerInit+0x98>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	4a1d      	ldr	r2, [pc, #116]	; (800dc88 <LmHandlerInit+0xb0>)
 800dc12:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800dc14:	4b16      	ldr	r3, [pc, #88]	; (800dc70 <LmHandlerInit+0x98>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	4a1b      	ldr	r2, [pc, #108]	; (800dc88 <LmHandlerInit+0xb0>)
 800dc1c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800dc1e:	4b1a      	ldr	r3, [pc, #104]	; (800dc88 <LmHandlerInit+0xb0>)
 800dc20:	4a1a      	ldr	r2, [pc, #104]	; (800dc8c <LmHandlerInit+0xb4>)
 800dc22:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800dc24:	4b12      	ldr	r3, [pc, #72]	; (800dc70 <LmHandlerInit+0x98>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	699b      	ldr	r3, [r3, #24]
 800dc2a:	4a17      	ldr	r2, [pc, #92]	; (800dc88 <LmHandlerInit+0xb0>)
 800dc2c:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800dc2e:	4a18      	ldr	r2, [pc, #96]	; (800dc90 <LmHandlerInit+0xb8>)
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800dc34:	4b0e      	ldr	r3, [pc, #56]	; (800dc70 <LmHandlerInit+0x98>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc3a:	4a15      	ldr	r2, [pc, #84]	; (800dc90 <LmHandlerInit+0xb8>)
 800dc3c:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800dc3e:	4b0c      	ldr	r3, [pc, #48]	; (800dc70 <LmHandlerInit+0x98>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc44:	4a12      	ldr	r2, [pc, #72]	; (800dc90 <LmHandlerInit+0xb8>)
 800dc46:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800dc48:	4b09      	ldr	r3, [pc, #36]	; (800dc70 <LmHandlerInit+0x98>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc4e:	4a10      	ldr	r2, [pc, #64]	; (800dc90 <LmHandlerInit+0xb8>)
 800dc50:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800dc52:	490f      	ldr	r1, [pc, #60]	; (800dc90 <LmHandlerInit+0xb8>)
 800dc54:	2000      	movs	r0, #0
 800dc56:	f000 fd87 	bl	800e768 <LmHandlerPackageRegister>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc60:	f04f 33ff 	mov.w	r3, #4294967295
 800dc64:	e000      	b.n	800dc68 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20000bd0 	.word	0x20000bd0
 800dc74:	20000bd4 	.word	0x20000bd4
 800dc78:	0800e475 	.word	0x0800e475
 800dc7c:	0800e4dd 	.word	0x0800e4dd
 800dc80:	0800e5a9 	.word	0x0800e5a9
 800dc84:	0800e6c1 	.word	0x0800e6c1
 800dc88:	20000be4 	.word	0x20000be4
 800dc8c:	0800eb3d 	.word	0x0800eb3d
 800dc90:	20000b98 	.word	0x20000b98

0800dc94 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b094      	sub	sp, #80	; 0x50
 800dc98:	af04      	add	r7, sp, #16
 800dc9a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800dc9c:	2214      	movs	r2, #20
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	4890      	ldr	r0, [pc, #576]	; (800dee4 <LmHandlerConfigure+0x250>)
 800dca2:	f00e f851 	bl	801bd48 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800dca6:	4b90      	ldr	r3, [pc, #576]	; (800dee8 <LmHandlerConfigure+0x254>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800dcac:	f7fe fb0c 	bl	800c2c8 <LoraInfo_GetPtr>
 800dcb0:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800dcb2:	4b8c      	ldr	r3, [pc, #560]	; (800dee4 <LmHandlerConfigure+0x250>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	2301      	movs	r3, #1
 800dcba:	4093      	lsls	r3, r2
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d106      	bne.n	800dcd6 <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800dcc8:	4b88      	ldr	r3, [pc, #544]	; (800deec <LmHandlerConfigure+0x258>)
 800dcca:	2201      	movs	r2, #1
 800dccc:	2100      	movs	r1, #0
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f00f f88a 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800dcd4:	e7fe      	b.n	800dcd4 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800dcd6:	4b83      	ldr	r3, [pc, #524]	; (800dee4 <LmHandlerConfigure+0x250>)
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	4984      	ldr	r1, [pc, #528]	; (800def0 <LmHandlerConfigure+0x25c>)
 800dcde:	4885      	ldr	r0, [pc, #532]	; (800def4 <LmHandlerConfigure+0x260>)
 800dce0:	f004 fe70 	bl	80129c4 <LoRaMacInitialization>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800dcea:	f04f 33ff 	mov.w	r3, #4294967295
 800dcee:	e0f5      	b.n	800dedc <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800dcf0:	2327      	movs	r3, #39	; 0x27
 800dcf2:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dcf4:	f107 0318 	add.w	r3, r7, #24
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f005 fbb3 	bl	8013464 <LoRaMacMibSetRequestConfirm>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d103      	bne.n	800dd0c <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800dd04:	4b7c      	ldr	r3, [pc, #496]	; (800def8 <LmHandlerConfigure+0x264>)
 800dd06:	2201      	movs	r2, #1
 800dd08:	701a      	strb	r2, [r3, #0]
 800dd0a:	e02a      	b.n	800dd62 <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800dd0c:	2328      	movs	r3, #40	; 0x28
 800dd0e:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800dd10:	4b7a      	ldr	r3, [pc, #488]	; (800defc <LmHandlerConfigure+0x268>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00c      	beq.n	800dd34 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dd1a:	f107 0318 	add.w	r3, r7, #24
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f005 f9fa 	bl	8013118 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800dd24:	4b75      	ldr	r3, [pc, #468]	; (800defc <LmHandlerConfigure+0x268>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	69fa      	ldr	r2, [r7, #28]
 800dd2c:	f240 517c 	movw	r1, #1404	; 0x57c
 800dd30:	4610      	mov	r0, r2
 800dd32:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800dd34:	2327      	movs	r3, #39	; 0x27
 800dd36:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dd38:	f107 0318 	add.w	r3, r7, #24
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f005 fb91 	bl	8013464 <LoRaMacMibSetRequestConfirm>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10c      	bne.n	800dd62 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dd4c:	f107 0318 	add.w	r3, r7, #24
 800dd50:	4618      	mov	r0, r3
 800dd52:	f005 f9e1 	bl	8013118 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800dd56:	7f3b      	ldrb	r3, [r7, #28]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800dd5c:	4b66      	ldr	r3, [pc, #408]	; (800def8 <LmHandlerConfigure+0x264>)
 800dd5e:	2201      	movs	r2, #1
 800dd60:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800dd62:	4b65      	ldr	r3, [pc, #404]	; (800def8 <LmHandlerConfigure+0x264>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d02a      	beq.n	800ddc0 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800dd6a:	4b64      	ldr	r3, [pc, #400]	; (800defc <LmHandlerConfigure+0x268>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	69db      	ldr	r3, [r3, #28]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d004      	beq.n	800dd7e <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800dd74:	4b61      	ldr	r3, [pc, #388]	; (800defc <LmHandlerConfigure+0x268>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	69db      	ldr	r3, [r3, #28]
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800dd7e:	2306      	movs	r3, #6
 800dd80:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dd82:	f107 0318 	add.w	r3, r7, #24
 800dd86:	4618      	mov	r0, r3
 800dd88:	f005 f9c6 	bl	8013118 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	4a5c      	ldr	r2, [pc, #368]	; (800df00 <LmHandlerConfigure+0x26c>)
 800dd90:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800dd92:	2327      	movs	r3, #39	; 0x27
 800dd94:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dd96:	f107 0318 	add.w	r3, r7, #24
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f005 f9bc 	bl	8013118 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dda6:	4b4f      	ldr	r3, [pc, #316]	; (800dee4 <LmHandlerConfigure+0x250>)
 800dda8:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800ddb0:	4b4c      	ldr	r3, [pc, #304]	; (800dee4 <LmHandlerConfigure+0x250>)
 800ddb2:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800ddba:	4b4a      	ldr	r3, [pc, #296]	; (800dee4 <LmHandlerConfigure+0x250>)
 800ddbc:	709a      	strb	r2, [r3, #2]
 800ddbe:	e019      	b.n	800ddf4 <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800ddc0:	2305      	movs	r3, #5
 800ddc2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ddc8:	f107 0318 	add.w	r3, r7, #24
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f005 fb49 	bl	8013464 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800ddd2:	4b4a      	ldr	r3, [pc, #296]	; (800defc <LmHandlerConfigure+0x268>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	4798      	blx	r3
 800ddda:	4603      	mov	r3, r0
 800dddc:	4a48      	ldr	r2, [pc, #288]	; (800df00 <LmHandlerConfigure+0x26c>)
 800ddde:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800dde0:	2306      	movs	r3, #6
 800dde2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800dde4:	4b46      	ldr	r3, [pc, #280]	; (800df00 <LmHandlerConfigure+0x26c>)
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ddea:	f107 0318 	add.w	r3, r7, #24
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f005 fb38 	bl	8013464 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ddf8:	f107 0318 	add.w	r3, r7, #24
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f005 f98b 	bl	8013118 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	2208      	movs	r2, #8
 800de06:	4619      	mov	r1, r3
 800de08:	483d      	ldr	r0, [pc, #244]	; (800df00 <LmHandlerConfigure+0x26c>)
 800de0a:	f00a fc98 	bl	801873e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800de0e:	2303      	movs	r3, #3
 800de10:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800de12:	f107 0318 	add.w	r3, r7, #24
 800de16:	4618      	mov	r0, r3
 800de18:	f005 f97e 	bl	8013118 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	2208      	movs	r2, #8
 800de20:	4619      	mov	r1, r3
 800de22:	4838      	ldr	r0, [pc, #224]	; (800df04 <LmHandlerConfigure+0x270>)
 800de24:	f00a fc8b 	bl	801873e <memcpy1>

    SecureElementPrintKeys();
 800de28:	f7ff fc20 	bl	800d66c <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800de2c:	4b36      	ldr	r3, [pc, #216]	; (800df08 <LmHandlerConfigure+0x274>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	461a      	mov	r2, r3
 800de32:	4b36      	ldr	r3, [pc, #216]	; (800df0c <LmHandlerConfigure+0x278>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	4619      	mov	r1, r3
 800de38:	4b35      	ldr	r3, [pc, #212]	; (800df10 <LmHandlerConfigure+0x27c>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	4b35      	ldr	r3, [pc, #212]	; (800df14 <LmHandlerConfigure+0x280>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	9303      	str	r3, [sp, #12]
 800de44:	9002      	str	r0, [sp, #8]
 800de46:	9101      	str	r1, [sp, #4]
 800de48:	9200      	str	r2, [sp, #0]
 800de4a:	4b33      	ldr	r3, [pc, #204]	; (800df18 <LmHandlerConfigure+0x284>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	2100      	movs	r1, #0
 800de50:	2002      	movs	r0, #2
 800de52:	f00e ffc9 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800de56:	230f      	movs	r3, #15
 800de58:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800de5a:	2301      	movs	r3, #1
 800de5c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800de5e:	f107 0318 	add.w	r3, r7, #24
 800de62:	4618      	mov	r0, r3
 800de64:	f005 fafe 	bl	8013464 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800de68:	2310      	movs	r3, #16
 800de6a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800de6c:	2300      	movs	r3, #0
 800de6e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800de70:	f107 0318 	add.w	r3, r7, #24
 800de74:	4618      	mov	r0, r3
 800de76:	f005 faf5 	bl	8013464 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800de7a:	2304      	movs	r3, #4
 800de7c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800de7e:	4b19      	ldr	r3, [pc, #100]	; (800dee4 <LmHandlerConfigure+0x250>)
 800de80:	789b      	ldrb	r3, [r3, #2]
 800de82:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800de84:	f107 0318 	add.w	r3, r7, #24
 800de88:	4618      	mov	r0, r3
 800de8a:	f005 faeb 	bl	8013464 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800de8e:	2338      	movs	r3, #56	; 0x38
 800de90:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800de92:	4b14      	ldr	r3, [pc, #80]	; (800dee4 <LmHandlerConfigure+0x250>)
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800de98:	f107 0318 	add.w	r3, r7, #24
 800de9c:	4618      	mov	r0, r3
 800de9e:	f005 fae1 	bl	8013464 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800dea2:	230f      	movs	r3, #15
 800dea4:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800dea6:	4b0f      	ldr	r3, [pc, #60]	; (800dee4 <LmHandlerConfigure+0x250>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	f107 0210 	add.w	r2, r7, #16
 800deae:	4611      	mov	r1, r2
 800deb0:	4618      	mov	r0, r3
 800deb2:	f008 f997 	bl	80161e4 <RegionGetPhyParam>
 800deb6:	4603      	mov	r3, r0
 800deb8:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	bf14      	ite	ne
 800dec0:	2301      	movne	r3, #1
 800dec2:	2300      	moveq	r3, #0
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	4b07      	ldr	r3, [pc, #28]	; (800dee4 <LmHandlerConfigure+0x250>)
 800dec8:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800deca:	2014      	movs	r0, #20
 800decc:	f000 faba 	bl	800e444 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800ded0:	4b04      	ldr	r3, [pc, #16]	; (800dee4 <LmHandlerConfigure+0x250>)
 800ded2:	799b      	ldrb	r3, [r3, #6]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f006 f8f3 	bl	80140c0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3740      	adds	r7, #64	; 0x40
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	20000bbc 	.word	0x20000bbc
 800dee8:	20000bfc 	.word	0x20000bfc
 800deec:	0801d7a4 	.word	0x0801d7a4
 800def0:	20000be4 	.word	0x20000be4
 800def4:	20000bd4 	.word	0x20000bd4
 800def8:	20000cf2 	.word	0x20000cf2
 800defc:	20000bd0 	.word	0x20000bd0
 800df00:	20000080 	.word	0x20000080
 800df04:	20000088 	.word	0x20000088
 800df08:	20000097 	.word	0x20000097
 800df0c:	20000096 	.word	0x20000096
 800df10:	20000095 	.word	0x20000095
 800df14:	20000094 	.word	0x20000094
 800df18:	0801d7f0 	.word	0x0801d7f0

0800df1c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800df22:	f002 fd2d 	bl	8010980 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800df26:	f000 fd3f 	bl	800e9a8 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800df2a:	f000 fd13 	bl	800e954 <LmHandlerPackageIsTxPending>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d117      	bne.n	800df64 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800df34:	4b0d      	ldr	r3, [pc, #52]	; (800df6c <LmHandlerProcess+0x50>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d014      	beq.n	800df66 <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800df3c:	2300      	movs	r3, #0
 800df3e:	703b      	strb	r3, [r7, #0]
 800df40:	2300      	movs	r3, #0
 800df42:	707b      	strb	r3, [r7, #1]
 800df44:	2300      	movs	r3, #0
 800df46:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800df48:	4b09      	ldr	r3, [pc, #36]	; (800df70 <LmHandlerProcess+0x54>)
 800df4a:	78d9      	ldrb	r1, [r3, #3]
 800df4c:	463b      	mov	r3, r7
 800df4e:	2200      	movs	r2, #0
 800df50:	4618      	mov	r0, r3
 800df52:	f000 f8b7 	bl	800e0c4 <LmHandlerSend>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d104      	bne.n	800df66 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800df5c:	4b03      	ldr	r3, [pc, #12]	; (800df6c <LmHandlerProcess+0x50>)
 800df5e:	2200      	movs	r2, #0
 800df60:	701a      	strb	r2, [r3, #0]
 800df62:	e000      	b.n	800df66 <LmHandlerProcess+0x4a>
        return;
 800df64:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20000bfc 	.word	0x20000bfc
 800df70:	20000bbc 	.word	0x20000bbc

0800df74 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800df74:	b480      	push	{r7}
 800df76:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800df78:	4b02      	ldr	r3, [pc, #8]	; (800df84 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800df7a:	681b      	ldr	r3, [r3, #0]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	46bd      	mov	sp, r7
 800df80:	bc80      	pop	{r7}
 800df82:	4770      	bx	lr
 800df84:	20000bf8 	.word	0x20000bf8

0800df88 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b090      	sub	sp, #64	; 0x40
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	4603      	mov	r3, r0
 800df90:	460a      	mov	r2, r1
 800df92:	71fb      	strb	r3, [r7, #7]
 800df94:	4613      	mov	r3, r2
 800df96:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800df98:	2301      	movs	r3, #1
 800df9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800df9e:	4b36      	ldr	r3, [pc, #216]	; (800e078 <LmHandlerJoin+0xf0>)
 800dfa0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	2b02      	cmp	r3, #2
 800dfae:	d10b      	bne.n	800dfc8 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800dfb6:	4b31      	ldr	r3, [pc, #196]	; (800e07c <LmHandlerJoin+0xf4>)
 800dfb8:	2202      	movs	r2, #2
 800dfba:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800dfbc:	4a2f      	ldr	r2, [pc, #188]	; (800e07c <LmHandlerJoin+0xf4>)
 800dfbe:	79bb      	ldrb	r3, [r7, #6]
 800dfc0:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800dfc2:	f004 ffb7 	bl	8012f34 <LoRaMacStart>
 800dfc6:	e041      	b.n	800e04c <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800dfce:	4b2b      	ldr	r3, [pc, #172]	; (800e07c <LmHandlerJoin+0xf4>)
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800dfd4:	4b28      	ldr	r3, [pc, #160]	; (800e078 <LmHandlerJoin+0xf0>)
 800dfd6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800dfda:	4b28      	ldr	r3, [pc, #160]	; (800e07c <LmHandlerJoin+0xf4>)
 800dfdc:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dfde:	4b27      	ldr	r3, [pc, #156]	; (800e07c <LmHandlerJoin+0xf4>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800dfe4:	4a25      	ldr	r2, [pc, #148]	; (800e07c <LmHandlerJoin+0xf4>)
 800dfe6:	79bb      	ldrb	r3, [r7, #6]
 800dfe8:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800dfea:	4b25      	ldr	r3, [pc, #148]	; (800e080 <LmHandlerJoin+0xf8>)
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	f083 0301 	eor.w	r3, r3, #1
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d01e      	beq.n	800e036 <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800dff8:	231f      	movs	r3, #31
 800dffa:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800dffc:	4b1e      	ldr	r3, [pc, #120]	; (800e078 <LmHandlerJoin+0xf0>)
 800dffe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e002:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e004:	f107 0308 	add.w	r3, r7, #8
 800e008:	4618      	mov	r0, r3
 800e00a:	f005 fa2b 	bl	8013464 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e00e:	2320      	movs	r3, #32
 800e010:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e012:	4b19      	ldr	r3, [pc, #100]	; (800e078 <LmHandlerJoin+0xf0>)
 800e014:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e018:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e01a:	f107 0308 	add.w	r3, r7, #8
 800e01e:	4618      	mov	r0, r3
 800e020:	f005 fa20 	bl	8013464 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e024:	2329      	movs	r3, #41	; 0x29
 800e026:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e028:	4b16      	ldr	r3, [pc, #88]	; (800e084 <LmHandlerJoin+0xfc>)
 800e02a:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800e02c:	f107 0308 	add.w	r3, r7, #8
 800e030:	4618      	mov	r0, r3
 800e032:	f005 fa17 	bl	8013464 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800e036:	f004 ff7d 	bl	8012f34 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e03a:	2301      	movs	r3, #1
 800e03c:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e03e:	2301      	movs	r3, #1
 800e040:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e042:	f107 0308 	add.w	r3, r7, #8
 800e046:	4618      	mov	r0, r3
 800e048:	f005 fa0c 	bl	8013464 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800e04c:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <LmHandlerJoin+0xf8>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	f083 0301 	eor.w	r3, r3, #1
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	d102      	bne.n	800e060 <LmHandlerJoin+0xd8>
 800e05a:	79bb      	ldrb	r3, [r7, #6]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d004      	beq.n	800e06a <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800e060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e064:	4618      	mov	r0, r3
 800e066:	f005 fd6d 	bl	8013b44 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e06c:	4a06      	ldr	r2, [pc, #24]	; (800e088 <LmHandlerJoin+0x100>)
 800e06e:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800e070:	bf00      	nop
 800e072:	3740      	adds	r7, #64	; 0x40
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	20000bbc 	.word	0x20000bbc
 800e07c:	20000098 	.word	0x20000098
 800e080:	20000cf2 	.word	0x20000cf2
 800e084:	01000400 	.word	0x01000400
 800e088:	20000bf8 	.word	0x20000bf8

0800e08c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08a      	sub	sp, #40	; 0x28
 800e090:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e092:	2301      	movs	r3, #1
 800e094:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e096:	463b      	mov	r3, r7
 800e098:	4618      	mov	r0, r3
 800e09a:	f005 f83d 	bl	8013118 <LoRaMacMibGetRequestConfirm>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800e0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d106      	bne.n	800e0ba <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e0ac:	793b      	ldrb	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d101      	bne.n	800e0b6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	e002      	b.n	800e0bc <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e000      	b.n	800e0bc <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e0ba:	2300      	movs	r3, #0
    }
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3728      	adds	r7, #40	; 0x28
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b08a      	sub	sp, #40	; 0x28
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	70fb      	strb	r3, [r7, #3]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e0d4:	23ff      	movs	r3, #255	; 0xff
 800e0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800e0da:	f002 f9b1 	bl	8010440 <LoRaMacIsBusy>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e0e4:	f06f 0301 	mvn.w	r3, #1
 800e0e8:	e0a3      	b.n	800e232 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e0ea:	f7ff ffcf 	bl	800e08c <LmHandlerJoinStatus>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d00a      	beq.n	800e10a <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e0f4:	4b51      	ldr	r3, [pc, #324]	; (800e23c <LmHandlerSend+0x178>)
 800e0f6:	799b      	ldrb	r3, [r3, #6]
 800e0f8:	4a50      	ldr	r2, [pc, #320]	; (800e23c <LmHandlerSend+0x178>)
 800e0fa:	79d2      	ldrb	r2, [r2, #7]
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7ff ff42 	bl	800df88 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e104:	f06f 0302 	mvn.w	r3, #2
 800e108:	e093      	b.n	800e232 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e10a:	4a4d      	ldr	r2, [pc, #308]	; (800e240 <LmHandlerSend+0x17c>)
 800e10c:	78fb      	ldrb	r3, [r7, #3]
 800e10e:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e110:	78fb      	ldrb	r3, [r7, #3]
 800e112:	2b00      	cmp	r3, #0
 800e114:	bf14      	ite	ne
 800e116:	2301      	movne	r3, #1
 800e118:	2300      	moveq	r3, #0
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e11e:	4b49      	ldr	r3, [pc, #292]	; (800e244 <LmHandlerSend+0x180>)
 800e120:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e124:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	785b      	ldrb	r3, [r3, #1]
 800e12a:	f107 020c 	add.w	r2, r7, #12
 800e12e:	4611      	mov	r1, r2
 800e130:	4618      	mov	r0, r3
 800e132:	f004 ff61 	bl	8012ff8 <LoRaMacQueryTxPossible>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d009      	beq.n	800e150 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e13c:	2300      	movs	r3, #0
 800e13e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e140:	2300      	movs	r3, #0
 800e142:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e144:	2300      	movs	r3, #0
 800e146:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e148:	23f9      	movs	r3, #249	; 0xf9
 800e14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e14e:	e009      	b.n	800e164 <LmHandlerSend+0xa0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	785b      	ldrb	r3, [r3, #1]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e164:	4b36      	ldr	r3, [pc, #216]	; (800e240 <LmHandlerSend+0x17c>)
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	3310      	adds	r3, #16
 800e16a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e16e:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e172:	4b34      	ldr	r3, [pc, #208]	; (800e244 <LmHandlerSend+0x180>)
 800e174:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e178:	4b31      	ldr	r3, [pc, #196]	; (800e240 <LmHandlerSend+0x17c>)
 800e17a:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e17c:	78ba      	ldrb	r2, [r7, #2]
 800e17e:	f107 0310 	add.w	r3, r7, #16
 800e182:	4611      	mov	r1, r2
 800e184:	4618      	mov	r0, r3
 800e186:	f005 fe63 	bl	8013e50 <LoRaMacMcpsRequest>
 800e18a:	4603      	mov	r3, r0
 800e18c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e190:	6a3b      	ldr	r3, [r7, #32]
 800e192:	4a2d      	ldr	r2, [pc, #180]	; (800e248 <LmHandlerSend+0x184>)
 800e194:	6013      	str	r3, [r2, #0]

    switch (status)
 800e196:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e19a:	2b11      	cmp	r3, #17
 800e19c:	d842      	bhi.n	800e224 <LmHandlerSend+0x160>
 800e19e:	a201      	add	r2, pc, #4	; (adr r2, 800e1a4 <LmHandlerSend+0xe0>)
 800e1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a4:	0800e1ed 	.word	0x0800e1ed
 800e1a8:	0800e205 	.word	0x0800e205
 800e1ac:	0800e225 	.word	0x0800e225
 800e1b0:	0800e225 	.word	0x0800e225
 800e1b4:	0800e225 	.word	0x0800e225
 800e1b8:	0800e225 	.word	0x0800e225
 800e1bc:	0800e225 	.word	0x0800e225
 800e1c0:	0800e20d 	.word	0x0800e20d
 800e1c4:	0800e225 	.word	0x0800e225
 800e1c8:	0800e225 	.word	0x0800e225
 800e1cc:	0800e225 	.word	0x0800e225
 800e1d0:	0800e21d 	.word	0x0800e21d
 800e1d4:	0800e225 	.word	0x0800e225
 800e1d8:	0800e225 	.word	0x0800e225
 800e1dc:	0800e205 	.word	0x0800e205
 800e1e0:	0800e205 	.word	0x0800e205
 800e1e4:	0800e205 	.word	0x0800e205
 800e1e8:	0800e215 	.word	0x0800e215
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800e1ec:	4b17      	ldr	r3, [pc, #92]	; (800e24c <LmHandlerSend+0x188>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800e1f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1f6:	f113 0f07 	cmn.w	r3, #7
 800e1fa:	d017      	beq.n	800e22c <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800e202:	e013      	b.n	800e22c <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e204:	23fe      	movs	r3, #254	; 0xfe
 800e206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e20a:	e010      	b.n	800e22e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e20c:	23fd      	movs	r3, #253	; 0xfd
 800e20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e212:	e00c      	b.n	800e22e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e214:	23fb      	movs	r3, #251	; 0xfb
 800e216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e21a:	e008      	b.n	800e22e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e21c:	23fa      	movs	r3, #250	; 0xfa
 800e21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e222:	e004      	b.n	800e22e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e224:	23ff      	movs	r3, #255	; 0xff
 800e226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e22a:	e000      	b.n	800e22e <LmHandlerSend+0x16a>
            break;
 800e22c:	bf00      	nop
    }

    return lmhStatus;
 800e22e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e232:	4618      	mov	r0, r3
 800e234:	3728      	adds	r7, #40	; 0x28
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	20000098 	.word	0x20000098
 800e240:	200000a0 	.word	0x200000a0
 800e244:	20000bbc 	.word	0x20000bbc
 800e248:	20000bf8 	.word	0x20000bf8
 800e24c:	20000bfc 	.word	0x20000bfc

0800e250 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b086      	sub	sp, #24
 800e254:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e256:	2309      	movs	r3, #9
 800e258:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e25a:	463b      	mov	r3, r7
 800e25c:	4618      	mov	r0, r3
 800e25e:	f005 fc71 	bl	8013b44 <LoRaMacMlmeRequest>
 800e262:	4603      	mov	r3, r0
 800e264:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	4a06      	ldr	r2, [pc, #24]	; (800e284 <LmHandlerDeviceTimeReq+0x34>)
 800e26a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e26c:	7dfb      	ldrb	r3, [r7, #23]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d101      	bne.n	800e276 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e272:	2300      	movs	r3, #0
 800e274:	e001      	b.n	800e27a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e276:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	20000bf8 	.word	0x20000bf8

0800e288 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e292:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e296:	4618      	mov	r0, r3
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bc80      	pop	{r7}
 800e29e:	4770      	bx	lr

0800e2a0 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08c      	sub	sp, #48	; 0x30
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800e2b0:	f002 f8c6 	bl	8010440 <LoRaMacIsBusy>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e2ba:	f06f 0301 	mvn.w	r3, #1
 800e2be:	e073      	b.n	800e3a8 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e2c0:	f7ff fee4 	bl	800e08c <LmHandlerJoinStatus>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d002      	beq.n	800e2d0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e2ca:	f06f 0302 	mvn.w	r3, #2
 800e2ce:	e06b      	b.n	800e3a8 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e2d4:	f107 0308 	add.w	r3, r7, #8
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f004 ff1d 	bl	8013118 <LoRaMacMibGetRequestConfirm>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e8:	e05e      	b.n	800e3a8 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800e2ea:	7b3b      	ldrb	r3, [r7, #12]
 800e2ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800e2f0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d04d      	beq.n	800e396 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800e2fa:	79fb      	ldrb	r3, [r7, #7]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d028      	beq.n	800e352 <LmHandlerRequestClass+0xb2>
 800e300:	2b02      	cmp	r3, #2
 800e302:	dc4a      	bgt.n	800e39a <LmHandlerRequestClass+0xfa>
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <LmHandlerRequestClass+0x6e>
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d01e      	beq.n	800e34a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800e30c:	e045      	b.n	800e39a <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800e30e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e312:	2b00      	cmp	r3, #0
 800e314:	d043      	beq.n	800e39e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e31a:	f107 0308 	add.w	r3, r7, #8
 800e31e:	4618      	mov	r0, r3
 800e320:	f005 f8a0 	bl	8013464 <LoRaMacMibSetRequestConfirm>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10b      	bne.n	800e342 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e32a:	4b21      	ldr	r3, [pc, #132]	; (800e3b0 <LmHandlerRequestClass+0x110>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e330:	2b00      	cmp	r3, #0
 800e332:	d034      	beq.n	800e39e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e334:	4b1e      	ldr	r3, [pc, #120]	; (800e3b0 <LmHandlerRequestClass+0x110>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e33a:	79fa      	ldrb	r2, [r7, #7]
 800e33c:	4610      	mov	r0, r2
 800e33e:	4798      	blx	r3
            break;
 800e340:	e02d      	b.n	800e39e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e342:	23ff      	movs	r3, #255	; 0xff
 800e344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e348:	e029      	b.n	800e39e <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800e34a:	23ff      	movs	r3, #255	; 0xff
 800e34c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e350:	e028      	b.n	800e3a4 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800e352:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e35a:	23ff      	movs	r3, #255	; 0xff
 800e35c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e360:	e01f      	b.n	800e3a2 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e366:	f107 0308 	add.w	r3, r7, #8
 800e36a:	4618      	mov	r0, r3
 800e36c:	f005 f87a 	bl	8013464 <LoRaMacMibSetRequestConfirm>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10b      	bne.n	800e38e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e376:	4b0e      	ldr	r3, [pc, #56]	; (800e3b0 <LmHandlerRequestClass+0x110>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d010      	beq.n	800e3a2 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e380:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <LmHandlerRequestClass+0x110>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e386:	79fa      	ldrb	r2, [r7, #7]
 800e388:	4610      	mov	r0, r2
 800e38a:	4798      	blx	r3
            break;
 800e38c:	e009      	b.n	800e3a2 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e38e:	23ff      	movs	r3, #255	; 0xff
 800e390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e394:	e005      	b.n	800e3a2 <LmHandlerRequestClass+0x102>
        }
    }
 800e396:	bf00      	nop
 800e398:	e004      	b.n	800e3a4 <LmHandlerRequestClass+0x104>
            break;
 800e39a:	bf00      	nop
 800e39c:	e002      	b.n	800e3a4 <LmHandlerRequestClass+0x104>
            break;
 800e39e:	bf00      	nop
 800e3a0:	e000      	b.n	800e3a4 <LmHandlerRequestClass+0x104>
            break;
 800e3a2:	bf00      	nop
    return errorStatus;
 800e3a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3730      	adds	r7, #48	; 0x30
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20000bd0 	.word	0x20000bd0

0800e3b4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08c      	sub	sp, #48	; 0x30
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d102      	bne.n	800e3c8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c6:	e010      	b.n	800e3ea <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800e3cc:	f107 030c 	add.w	r3, r7, #12
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f004 fea1 	bl	8013118 <LoRaMacMibGetRequestConfirm>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e0:	e003      	b.n	800e3ea <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e3e2:	7c3a      	ldrb	r2, [r7, #16]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3730      	adds	r7, #48	; 0x30
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08c      	sub	sp, #48	; 0x30
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d102      	bne.n	800e408 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e402:	f04f 33ff 	mov.w	r3, #4294967295
 800e406:	e016      	b.n	800e436 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e408:	2320      	movs	r3, #32
 800e40a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800e40c:	f107 030c 	add.w	r3, r7, #12
 800e410:	4618      	mov	r0, r3
 800e412:	f004 fe81 	bl	8013118 <LoRaMacMibGetRequestConfirm>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d002      	beq.n	800e422 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e41c:	f04f 33ff 	mov.w	r3, #4294967295
 800e420:	e009      	b.n	800e436 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e422:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f993 2000 	ldrsb.w	r2, [r3]
 800e430:	4b03      	ldr	r3, [pc, #12]	; (800e440 <LmHandlerGetTxDatarate+0x4c>)
 800e432:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3730      	adds	r7, #48	; 0x30
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	20000bbc 	.word	0x20000bbc

0800e444 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08c      	sub	sp, #48	; 0x30
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e44c:	2323      	movs	r3, #35	; 0x23
 800e44e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e454:	f107 030c 	add.w	r3, r7, #12
 800e458:	4618      	mov	r0, r3
 800e45a:	f005 f803 	bl	8013464 <LoRaMacMibSetRequestConfirm>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e464:	f04f 33ff 	mov.w	r3, #4294967295
 800e468:	e000      	b.n	800e46c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3730      	adds	r7, #48	; 0x30
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e47c:	4b15      	ldr	r3, [pc, #84]	; (800e4d4 <McpsConfirm+0x60>)
 800e47e:	2201      	movs	r2, #1
 800e480:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	785a      	ldrb	r2, [r3, #1]
 800e486:	4b13      	ldr	r3, [pc, #76]	; (800e4d4 <McpsConfirm+0x60>)
 800e488:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	789b      	ldrb	r3, [r3, #2]
 800e48e:	b25a      	sxtb	r2, r3
 800e490:	4b10      	ldr	r3, [pc, #64]	; (800e4d4 <McpsConfirm+0x60>)
 800e492:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	4a0e      	ldr	r2, [pc, #56]	; (800e4d4 <McpsConfirm+0x60>)
 800e49a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e4a2:	4b0c      	ldr	r3, [pc, #48]	; (800e4d4 <McpsConfirm+0x60>)
 800e4a4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <McpsConfirm+0x60>)
 800e4ae:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	791b      	ldrb	r3, [r3, #4]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	4b07      	ldr	r3, [pc, #28]	; (800e4d4 <McpsConfirm+0x60>)
 800e4b8:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800e4ba:	4b07      	ldr	r3, [pc, #28]	; (800e4d8 <McpsConfirm+0x64>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c0:	4804      	ldr	r0, [pc, #16]	; (800e4d4 <McpsConfirm+0x60>)
 800e4c2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	2000      	movs	r0, #0
 800e4c8:	f000 f9c6 	bl	800e858 <LmHandlerPackagesNotify>
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	200000a0 	.word	0x200000a0
 800e4d8:	20000bd0 	.word	0x20000bd0

0800e4dc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800e4ea:	4b2c      	ldr	r3, [pc, #176]	; (800e59c <McpsIndication+0xc0>)
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	785a      	ldrb	r2, [r3, #1]
 800e4f4:	4b29      	ldr	r3, [pc, #164]	; (800e59c <McpsIndication+0xc0>)
 800e4f6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e4f8:	4b28      	ldr	r3, [pc, #160]	; (800e59c <McpsIndication+0xc0>)
 800e4fa:	785b      	ldrb	r3, [r3, #1]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d149      	bne.n	800e594 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	791b      	ldrb	r3, [r3, #4]
 800e504:	b25a      	sxtb	r2, r3
 800e506:	4b25      	ldr	r3, [pc, #148]	; (800e59c <McpsIndication+0xc0>)
 800e508:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e510:	b25a      	sxtb	r2, r3
 800e512:	4b22      	ldr	r3, [pc, #136]	; (800e59c <McpsIndication+0xc0>)
 800e514:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e51c:	4b1f      	ldr	r3, [pc, #124]	; (800e59c <McpsIndication+0xc0>)
 800e51e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	78da      	ldrb	r2, [r3, #3]
 800e524:	4b1d      	ldr	r3, [pc, #116]	; (800e59c <McpsIndication+0xc0>)
 800e526:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	4a1b      	ldr	r2, [pc, #108]	; (800e59c <McpsIndication+0xc0>)
 800e52e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	78db      	ldrb	r3, [r3, #3]
 800e534:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7b1b      	ldrb	r3, [r3, #12]
 800e53a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e542:	4b17      	ldr	r3, [pc, #92]	; (800e5a0 <McpsIndication+0xc4>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e548:	f107 0210 	add.w	r2, r7, #16
 800e54c:	4913      	ldr	r1, [pc, #76]	; (800e59c <McpsIndication+0xc0>)
 800e54e:	4610      	mov	r0, r2
 800e550:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800e552:	4b13      	ldr	r3, [pc, #76]	; (800e5a0 <McpsIndication+0xc4>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d007      	beq.n	800e56c <McpsIndication+0x90>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7e1b      	ldrb	r3, [r3, #24]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d003      	beq.n	800e56c <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e564:	4b0e      	ldr	r3, [pc, #56]	; (800e5a0 <McpsIndication+0xc4>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56a:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	2001      	movs	r0, #1
 800e570:	f000 f972 	bl	800e858 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e574:	f107 030f 	add.w	r3, r7, #15
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff ff1b 	bl	800e3b4 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	795b      	ldrb	r3, [r3, #5]
 800e582:	2b01      	cmp	r3, #1
 800e584:	d107      	bne.n	800e596 <McpsIndication+0xba>
 800e586:	7bfb      	ldrb	r3, [r7, #15]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d104      	bne.n	800e596 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800e58c:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <McpsIndication+0xc8>)
 800e58e:	2201      	movs	r2, #1
 800e590:	701a      	strb	r2, [r3, #0]
 800e592:	e000      	b.n	800e596 <McpsIndication+0xba>
        return;
 800e594:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	200000bc 	.word	0x200000bc
 800e5a0:	20000bd0 	.word	0x20000bd0
 800e5a4:	20000bfc 	.word	0x20000bfc

0800e5a8 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b08c      	sub	sp, #48	; 0x30
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e5b0:	4b3c      	ldr	r3, [pc, #240]	; (800e6a4 <MlmeConfirm+0xfc>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	785a      	ldrb	r2, [r3, #1]
 800e5ba:	4b3a      	ldr	r3, [pc, #232]	; (800e6a4 <MlmeConfirm+0xfc>)
 800e5bc:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800e5be:	4b3a      	ldr	r3, [pc, #232]	; (800e6a8 <MlmeConfirm+0x100>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c4:	4837      	ldr	r0, [pc, #220]	; (800e6a4 <MlmeConfirm+0xfc>)
 800e5c6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e5c8:	6879      	ldr	r1, [r7, #4]
 800e5ca:	2002      	movs	r0, #2
 800e5cc:	f000 f944 	bl	800e858 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	2b0b      	cmp	r3, #11
 800e5d8:	d85c      	bhi.n	800e694 <MlmeConfirm+0xec>
 800e5da:	a201      	add	r2, pc, #4	; (adr r2, 800e5e0 <MlmeConfirm+0x38>)
 800e5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e0:	0800e611 	.word	0x0800e611
 800e5e4:	0800e695 	.word	0x0800e695
 800e5e8:	0800e695 	.word	0x0800e695
 800e5ec:	0800e663 	.word	0x0800e663
 800e5f0:	0800e695 	.word	0x0800e695
 800e5f4:	0800e695 	.word	0x0800e695
 800e5f8:	0800e695 	.word	0x0800e695
 800e5fc:	0800e695 	.word	0x0800e695
 800e600:	0800e695 	.word	0x0800e695
 800e604:	0800e695 	.word	0x0800e695
 800e608:	0800e67b 	.word	0x0800e67b
 800e60c:	0800e695 	.word	0x0800e695
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800e610:	2306      	movs	r3, #6
 800e612:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e614:	f107 030c 	add.w	r3, r7, #12
 800e618:	4618      	mov	r0, r3
 800e61a:	f004 fd7d 	bl	8013118 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	4a22      	ldr	r2, [pc, #136]	; (800e6ac <MlmeConfirm+0x104>)
 800e622:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e624:	4822      	ldr	r0, [pc, #136]	; (800e6b0 <MlmeConfirm+0x108>)
 800e626:	f7ff fee5 	bl	800e3f4 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	785b      	ldrb	r3, [r3, #1]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d108      	bne.n	800e644 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e632:	4b20      	ldr	r3, [pc, #128]	; (800e6b4 <MlmeConfirm+0x10c>)
 800e634:	2200      	movs	r2, #0
 800e636:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e638:	4b1f      	ldr	r3, [pc, #124]	; (800e6b8 <MlmeConfirm+0x110>)
 800e63a:	785b      	ldrb	r3, [r3, #1]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff fe2f 	bl	800e2a0 <LmHandlerRequestClass>
 800e642:	e002      	b.n	800e64a <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e644:	4b1b      	ldr	r3, [pc, #108]	; (800e6b4 <MlmeConfirm+0x10c>)
 800e646:	22ff      	movs	r2, #255	; 0xff
 800e648:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e64a:	4b17      	ldr	r3, [pc, #92]	; (800e6a8 <MlmeConfirm+0x100>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e650:	4818      	ldr	r0, [pc, #96]	; (800e6b4 <MlmeConfirm+0x10c>)
 800e652:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	785b      	ldrb	r3, [r3, #1]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d11d      	bne.n	800e698 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800e65c:	f7ff f894 	bl	800d788 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800e660:	e01a      	b.n	800e698 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800e662:	4b16      	ldr	r3, [pc, #88]	; (800e6bc <MlmeConfirm+0x114>)
 800e664:	2201      	movs	r2, #1
 800e666:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	7a1a      	ldrb	r2, [r3, #8]
 800e66c:	4b13      	ldr	r3, [pc, #76]	; (800e6bc <MlmeConfirm+0x114>)
 800e66e:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7a5a      	ldrb	r2, [r3, #9]
 800e674:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <MlmeConfirm+0x114>)
 800e676:	74da      	strb	r2, [r3, #19]
        }
        break;
 800e678:	e00f      	b.n	800e69a <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	785b      	ldrb	r3, [r3, #1]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d105      	bne.n	800e68e <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e682:	4b0d      	ldr	r3, [pc, #52]	; (800e6b8 <MlmeConfirm+0x110>)
 800e684:	7b1b      	ldrb	r3, [r3, #12]
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff fdfe 	bl	800e288 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800e68c:	e005      	b.n	800e69a <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800e68e:	f7ff fddf 	bl	800e250 <LmHandlerDeviceTimeReq>
        break;
 800e692:	e002      	b.n	800e69a <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e694:	bf00      	nop
 800e696:	e000      	b.n	800e69a <MlmeConfirm+0xf2>
        break;
 800e698:	bf00      	nop
    }
}
 800e69a:	bf00      	nop
 800e69c:	3730      	adds	r7, #48	; 0x30
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200000a0 	.word	0x200000a0
 800e6a8:	20000bd0 	.word	0x20000bd0
 800e6ac:	20000080 	.word	0x20000080
 800e6b0:	2000009c 	.word	0x2000009c
 800e6b4:	20000098 	.word	0x20000098
 800e6b8:	20000bbc 	.word	0x20000bbc
 800e6bc:	200000bc 	.word	0x200000bc

0800e6c0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e6ca:	4b24      	ldr	r3, [pc, #144]	; (800e75c <MlmeIndication+0x9c>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	785a      	ldrb	r2, [r3, #1]
 800e6d4:	4b21      	ldr	r3, [pc, #132]	; (800e75c <MlmeIndication+0x9c>)
 800e6d6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	789b      	ldrb	r3, [r3, #2]
 800e6dc:	b25a      	sxtb	r2, r3
 800e6de:	4b1f      	ldr	r3, [pc, #124]	; (800e75c <MlmeIndication+0x9c>)
 800e6e0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6e8:	b25a      	sxtb	r2, r3
 800e6ea:	4b1c      	ldr	r3, [pc, #112]	; (800e75c <MlmeIndication+0x9c>)
 800e6ec:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e6f4:	4b19      	ldr	r3, [pc, #100]	; (800e75c <MlmeIndication+0x9c>)
 800e6f6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	78da      	ldrb	r2, [r3, #3]
 800e6fc:	4b17      	ldr	r3, [pc, #92]	; (800e75c <MlmeIndication+0x9c>)
 800e6fe:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	4a15      	ldr	r2, [pc, #84]	; (800e75c <MlmeIndication+0x9c>)
 800e706:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	2b0a      	cmp	r3, #10
 800e70e:	d009      	beq.n	800e724 <MlmeIndication+0x64>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	2b0e      	cmp	r3, #14
 800e716:	d005      	beq.n	800e724 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e718:	4b11      	ldr	r3, [pc, #68]	; (800e760 <MlmeIndication+0xa0>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71e:	490f      	ldr	r1, [pc, #60]	; (800e75c <MlmeIndication+0x9c>)
 800e720:	2000      	movs	r0, #0
 800e722:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	2003      	movs	r0, #3
 800e728:	f000 f896 	bl	800e858 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2b0e      	cmp	r3, #14
 800e732:	d00a      	beq.n	800e74a <MlmeIndication+0x8a>
 800e734:	2b0e      	cmp	r3, #14
 800e736:	dc0a      	bgt.n	800e74e <MlmeIndication+0x8e>
 800e738:	2b06      	cmp	r3, #6
 800e73a:	d002      	beq.n	800e742 <MlmeIndication+0x82>
 800e73c:	2b0a      	cmp	r3, #10
 800e73e:	d008      	beq.n	800e752 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e740:	e005      	b.n	800e74e <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800e742:	4b08      	ldr	r3, [pc, #32]	; (800e764 <MlmeIndication+0xa4>)
 800e744:	2201      	movs	r2, #1
 800e746:	701a      	strb	r2, [r3, #0]
        break;
 800e748:	e004      	b.n	800e754 <MlmeIndication+0x94>
        break;
 800e74a:	bf00      	nop
 800e74c:	e002      	b.n	800e754 <MlmeIndication+0x94>
        break;
 800e74e:	bf00      	nop
 800e750:	e000      	b.n	800e754 <MlmeIndication+0x94>
        break;
 800e752:	bf00      	nop
    }
}
 800e754:	bf00      	nop
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	200000bc 	.word	0x200000bc
 800e760:	20000bd0 	.word	0x20000bd0
 800e764:	20000bfc 	.word	0x20000bfc

0800e768 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	6039      	str	r1, [r7, #0]
 800e772:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e774:	2300      	movs	r3, #0
 800e776:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d103      	bne.n	800e786 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800e77e:	f000 fa03 	bl	800eb88 <LmhpCompliancePackageFactory>
 800e782:	60f8      	str	r0, [r7, #12]
            break;
 800e784:	e000      	b.n	800e788 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800e786:	bf00      	nop
        }
    }
    if( package != NULL )
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d035      	beq.n	800e7fa <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800e78e:	79fb      	ldrb	r3, [r7, #7]
 800e790:	491d      	ldr	r1, [pc, #116]	; (800e808 <LmHandlerPackageRegister+0xa0>)
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e798:	79fb      	ldrb	r3, [r7, #7]
 800e79a:	4a1b      	ldr	r2, [pc, #108]	; (800e808 <LmHandlerPackageRegister+0xa0>)
 800e79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7a0:	4a1a      	ldr	r2, [pc, #104]	; (800e80c <LmHandlerPackageRegister+0xa4>)
 800e7a2:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e7a4:	4b1a      	ldr	r3, [pc, #104]	; (800e810 <LmHandlerPackageRegister+0xa8>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	79fb      	ldrb	r3, [r7, #7]
 800e7aa:	4917      	ldr	r1, [pc, #92]	; (800e808 <LmHandlerPackageRegister+0xa0>)
 800e7ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e7b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e7b2:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e7b4:	4b16      	ldr	r3, [pc, #88]	; (800e810 <LmHandlerPackageRegister+0xa8>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	4913      	ldr	r1, [pc, #76]	; (800e808 <LmHandlerPackageRegister+0xa0>)
 800e7bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e7c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e7c2:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e7c4:	79fb      	ldrb	r3, [r7, #7]
 800e7c6:	4a10      	ldr	r2, [pc, #64]	; (800e808 <LmHandlerPackageRegister+0xa0>)
 800e7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7cc:	4a11      	ldr	r2, [pc, #68]	; (800e814 <LmHandlerPackageRegister+0xac>)
 800e7ce:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e7d0:	4b0f      	ldr	r3, [pc, #60]	; (800e810 <LmHandlerPackageRegister+0xa8>)
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	79fb      	ldrb	r3, [r7, #7]
 800e7d6:	490c      	ldr	r1, [pc, #48]	; (800e808 <LmHandlerPackageRegister+0xa0>)
 800e7d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e7dc:	6992      	ldr	r2, [r2, #24]
 800e7de:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e7e0:	79fb      	ldrb	r3, [r7, #7]
 800e7e2:	4a09      	ldr	r2, [pc, #36]	; (800e808 <LmHandlerPackageRegister+0xa0>)
 800e7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	4a0b      	ldr	r2, [pc, #44]	; (800e818 <LmHandlerPackageRegister+0xb0>)
 800e7ec:	6851      	ldr	r1, [r2, #4]
 800e7ee:	4a0a      	ldr	r2, [pc, #40]	; (800e818 <LmHandlerPackageRegister+0xb0>)
 800e7f0:	7852      	ldrb	r2, [r2, #1]
 800e7f2:	6838      	ldr	r0, [r7, #0]
 800e7f4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e001      	b.n	800e7fe <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e7fa:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20000ba8 	.word	0x20000ba8
 800e80c:	0800df89 	.word	0x0800df89
 800e810:	20000bd0 	.word	0x20000bd0
 800e814:	0800e251 	.word	0x0800e251
 800e818:	200000d0 	.word	0x200000d0

0800e81c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	4603      	mov	r3, r0
 800e824:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e826:	79fb      	ldrb	r3, [r7, #7]
 800e828:	2b04      	cmp	r3, #4
 800e82a:	d80e      	bhi.n	800e84a <LmHandlerPackageIsInitialized+0x2e>
 800e82c:	79fb      	ldrb	r3, [r7, #7]
 800e82e:	4a09      	ldr	r2, [pc, #36]	; (800e854 <LmHandlerPackageIsInitialized+0x38>)
 800e830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d007      	beq.n	800e84a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e83a:	79fb      	ldrb	r3, [r7, #7]
 800e83c:	4a05      	ldr	r2, [pc, #20]	; (800e854 <LmHandlerPackageIsInitialized+0x38>)
 800e83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	4798      	blx	r3
 800e846:	4603      	mov	r3, r0
 800e848:	e000      	b.n	800e84c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e84a:	2300      	movs	r3, #0
    }
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	20000ba8 	.word	0x20000ba8

0800e858 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	4603      	mov	r3, r0
 800e860:	6039      	str	r1, [r7, #0]
 800e862:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e864:	2300      	movs	r3, #0
 800e866:	73fb      	strb	r3, [r7, #15]
 800e868:	e069      	b.n	800e93e <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800e86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e86e:	4a38      	ldr	r2, [pc, #224]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d051      	beq.n	800e91c <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	2b03      	cmp	r3, #3
 800e87c:	d850      	bhi.n	800e920 <LmHandlerPackagesNotify+0xc8>
 800e87e:	a201      	add	r2, pc, #4	; (adr r2, 800e884 <LmHandlerPackagesNotify+0x2c>)
 800e880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e884:	0800e895 	.word	0x0800e895
 800e888:	0800e8b7 	.word	0x0800e8b7
 800e88c:	0800e8d9 	.word	0x0800e8d9
 800e890:	0800e8fb 	.word	0x0800e8fb
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e898:	4a2d      	ldr	r2, [pc, #180]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e89e:	699b      	ldr	r3, [r3, #24]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d03f      	beq.n	800e924 <LmHandlerPackagesNotify+0xcc>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800e8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a8:	4a29      	ldr	r2, [pc, #164]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ae:	699b      	ldr	r3, [r3, #24]
 800e8b0:	6838      	ldr	r0, [r7, #0]
 800e8b2:	4798      	blx	r3
                    }
                    break;
 800e8b4:	e036      	b.n	800e924 <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ba:	4a25      	ldr	r2, [pc, #148]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8c0:	69db      	ldr	r3, [r3, #28]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d030      	beq.n	800e928 <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ca:	4a21      	ldr	r2, [pc, #132]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8d0:	69db      	ldr	r3, [r3, #28]
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	4798      	blx	r3
                    }
                    break;
 800e8d6:	e027      	b.n	800e928 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8dc:	4a1c      	ldr	r2, [pc, #112]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e8de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8e2:	6a1b      	ldr	r3, [r3, #32]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d021      	beq.n	800e92c <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ec:	4a18      	ldr	r2, [pc, #96]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8f2:	6a1b      	ldr	r3, [r3, #32]
 800e8f4:	6838      	ldr	r0, [r7, #0]
 800e8f6:	4798      	blx	r3
                    }
                    break;
 800e8f8:	e018      	b.n	800e92c <LmHandlerPackagesNotify+0xd4>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8fe:	4a14      	ldr	r2, [pc, #80]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e906:	2b00      	cmp	r3, #0
 800e908:	d012      	beq.n	800e930 <LmHandlerPackagesNotify+0xd8>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e90e:	4a10      	ldr	r2, [pc, #64]	; (800e950 <LmHandlerPackagesNotify+0xf8>)
 800e910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e916:	6838      	ldr	r0, [r7, #0]
 800e918:	4798      	blx	r3
                    }
                    break;
 800e91a:	e009      	b.n	800e930 <LmHandlerPackagesNotify+0xd8>
                default:
                {
                    break;
                }
            }
        }
 800e91c:	bf00      	nop
 800e91e:	e008      	b.n	800e932 <LmHandlerPackagesNotify+0xda>
                    break;
 800e920:	bf00      	nop
 800e922:	e006      	b.n	800e932 <LmHandlerPackagesNotify+0xda>
                    break;
 800e924:	bf00      	nop
 800e926:	e004      	b.n	800e932 <LmHandlerPackagesNotify+0xda>
                    break;
 800e928:	bf00      	nop
 800e92a:	e002      	b.n	800e932 <LmHandlerPackagesNotify+0xda>
                    break;
 800e92c:	bf00      	nop
 800e92e:	e000      	b.n	800e932 <LmHandlerPackagesNotify+0xda>
                    break;
 800e930:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e936:	b2db      	uxtb	r3, r3
 800e938:	3301      	adds	r3, #1
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	73fb      	strb	r3, [r7, #15]
 800e93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e942:	2b04      	cmp	r3, #4
 800e944:	dd91      	ble.n	800e86a <LmHandlerPackagesNotify+0x12>
    }
}
 800e946:	bf00      	nop
 800e948:	bf00      	nop
 800e94a:	3710      	adds	r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	20000ba8 	.word	0x20000ba8

0800e954 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e95a:	2300      	movs	r3, #0
 800e95c:	71fb      	strb	r3, [r7, #7]
 800e95e:	e018      	b.n	800e992 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800e960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e964:	4a0f      	ldr	r2, [pc, #60]	; (800e9a4 <LmHandlerPackageIsTxPending+0x50>)
 800e966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00b      	beq.n	800e986 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e96e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e972:	4a0c      	ldr	r2, [pc, #48]	; (800e9a4 <LmHandlerPackageIsTxPending+0x50>)
 800e974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	4798      	blx	r3
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d001      	beq.n	800e986 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e982:	2301      	movs	r3, #1
 800e984:	e00a      	b.n	800e99c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	3301      	adds	r3, #1
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	71fb      	strb	r3, [r7, #7]
 800e992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e996:	2b04      	cmp	r3, #4
 800e998:	dde2      	ble.n	800e960 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20000ba8 	.word	0x20000ba8

0800e9a8 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	71fb      	strb	r3, [r7, #7]
 800e9b2:	e022      	b.n	800e9fa <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e9b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9b8:	4a14      	ldr	r2, [pc, #80]	; (800ea0c <LmHandlerPackagesProcess+0x64>)
 800e9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d015      	beq.n	800e9ee <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e9c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9c6:	4a11      	ldr	r2, [pc, #68]	; (800ea0c <LmHandlerPackagesProcess+0x64>)
 800e9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9cc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00d      	beq.n	800e9ee <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e9d2:	79fb      	ldrb	r3, [r7, #7]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff ff21 	bl	800e81c <LmHandlerPackageIsInitialized>
 800e9da:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d006      	beq.n	800e9ee <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e9e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9e4:	4a09      	ldr	r2, [pc, #36]	; (800ea0c <LmHandlerPackagesProcess+0x64>)
 800e9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e9ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	71fb      	strb	r3, [r7, #7]
 800e9fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9fe:	2b04      	cmp	r3, #4
 800ea00:	ddd8      	ble.n	800e9b4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ea02:	bf00      	nop
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	20000ba8 	.word	0x20000ba8

0800ea10 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	6039      	str	r1, [r7, #0]
 800ea1a:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d102      	bne.n	800ea28 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea22:	f04f 33ff 	mov.w	r3, #4294967295
 800ea26:	e00e      	b.n	800ea46 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d002      	beq.n	800ea34 <LmHandlerGetVersion+0x24>
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d004      	beq.n	800ea3c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800ea32:	e007      	b.n	800ea44 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	4a06      	ldr	r2, [pc, #24]	; (800ea50 <LmHandlerGetVersion+0x40>)
 800ea38:	601a      	str	r2, [r3, #0]
            break;
 800ea3a:	e003      	b.n	800ea44 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	4a05      	ldr	r2, [pc, #20]	; (800ea54 <LmHandlerGetVersion+0x44>)
 800ea40:	601a      	str	r2, [r3, #0]
            break;
 800ea42:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bc80      	pop	{r7}
 800ea4e:	4770      	bx	lr
 800ea50:	01000400 	.word	0x01000400
 800ea54:	02010001 	.word	0x02010001

0800ea58 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800ea5c:	f005 fb4e 	bl	80140fc <LoRaMacDeInitialization>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d101      	bne.n	800ea6a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea66:	2300      	movs	r3, #0
 800ea68:	e001      	b.n	800ea6e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea6a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800ea76:	f004 fa87 	bl	8012f88 <LoRaMacHalt>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d101      	bne.n	800ea84 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea80:	2300      	movs	r3, #0
 800ea82:	e001      	b.n	800ea88 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea84:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b08e      	sub	sp, #56	; 0x38
 800ea90:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ea92:	2300      	movs	r3, #0
 800ea94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800ea9c:	f7ff ffe9 	bl	800ea72 <LmHandlerHalt>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800eaa6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d12f      	bne.n	800eb0e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800eaae:	f000 f84f 	bl	800eb50 <NvmDataMgmtStoreBegin>
 800eab2:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	f113 0f02 	cmn.w	r3, #2
 800eaba:	d103      	bne.n	800eac4 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800eabc:	23f8      	movs	r3, #248	; 0xf8
 800eabe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eac2:	e01c      	b.n	800eafe <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d104      	bne.n	800ead4 <LmHandlerNvmDataStore+0x48>
 800eaca:	4b1b      	ldr	r3, [pc, #108]	; (800eb38 <LmHandlerNvmDataStore+0xac>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	695b      	ldr	r3, [r3, #20]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d103      	bne.n	800eadc <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ead4:	23ff      	movs	r3, #255	; 0xff
 800ead6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eada:	e010      	b.n	800eafe <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800eadc:	2327      	movs	r3, #39	; 0x27
 800eade:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800eae0:	1d3b      	adds	r3, r7, #4
 800eae2:	4618      	mov	r0, r3
 800eae4:	f004 fb18 	bl	8013118 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800eaec:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800eaf0:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800eaf2:	4b11      	ldr	r3, [pc, #68]	; (800eb38 <LmHandlerNvmDataStore+0xac>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	695b      	ldr	r3, [r3, #20]
 800eaf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eafa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eafc:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800eafe:	f000 f82f 	bl	800eb60 <NvmDataMgmtStoreEnd>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d002      	beq.n	800eb0e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eb08:	23ff      	movs	r3, #255	; 0xff
 800eb0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800eb0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d109      	bne.n	800eb2a <LmHandlerNvmDataStore+0x9e>
 800eb16:	4b08      	ldr	r3, [pc, #32]	; (800eb38 <LmHandlerNvmDataStore+0xac>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	69db      	ldr	r3, [r3, #28]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d004      	beq.n	800eb2a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800eb20:	4b05      	ldr	r3, [pc, #20]	; (800eb38 <LmHandlerNvmDataStore+0xac>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	69db      	ldr	r3, [r3, #28]
 800eb26:	2001      	movs	r0, #1
 800eb28:	4798      	blx	r3
    }

    return lmhStatus;
 800eb2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3738      	adds	r7, #56	; 0x38
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	20000bd0 	.word	0x20000bd0

0800eb3c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800eb46:	bf00      	nop
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bc80      	pop	{r7}
 800eb4e:	4770      	bx	lr

0800eb50 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800eb50:	b480      	push	{r7}
 800eb52:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800eb54:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bc80      	pop	{r7}
 800eb5e:	4770      	bx	lr

0800eb60 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800eb60:	b480      	push	{r7}
 800eb62:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800eb64:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bc80      	pop	{r7}
 800eb6e:	4770      	bx	lr

0800eb70 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800eb74:	2220      	movs	r2, #32
 800eb76:	2100      	movs	r1, #0
 800eb78:	4802      	ldr	r0, [pc, #8]	; (800eb84 <ClassBStatusReset+0x14>)
 800eb7a:	f009 fe1b 	bl	80187b4 <memset1>
}
 800eb7e:	bf00      	nop
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20000d08 	.word	0x20000d08

0800eb88 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800eb88:	b480      	push	{r7}
 800eb8a:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800eb8c:	4b02      	ldr	r3, [pc, #8]	; (800eb98 <LmhpCompliancePackageFactory+0x10>)
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bc80      	pop	{r7}
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	200000d8 	.word	0x200000d8

0800eb9c <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af02      	add	r7, sp, #8
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	4613      	mov	r3, r2
 800eba8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d018      	beq.n	800ebe2 <LmhpComplianceInit+0x46>
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d015      	beq.n	800ebe2 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800ebb6:	4a19      	ldr	r2, [pc, #100]	; (800ec1c <LmhpComplianceInit+0x80>)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800ebbc:	4a18      	ldr	r2, [pc, #96]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ebc2:	4a17      	ldr	r2, [pc, #92]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ebc4:	79fb      	ldrb	r3, [r7, #7]
 800ebc6:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800ebc8:	4b15      	ldr	r3, [pc, #84]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ebca:	2201      	movs	r2, #1
 800ebcc:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800ebce:	2300      	movs	r3, #0
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	4b14      	ldr	r3, [pc, #80]	; (800ec24 <LmhpComplianceInit+0x88>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f04f 31ff 	mov.w	r1, #4294967295
 800ebda:	4813      	ldr	r0, [pc, #76]	; (800ec28 <LmhpComplianceInit+0x8c>)
 800ebdc:	f00d fe56 	bl	801c88c <UTIL_TIMER_Create>
 800ebe0:	e005      	b.n	800ebee <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800ebe2:	4b0e      	ldr	r3, [pc, #56]	; (800ec1c <LmhpComplianceInit+0x80>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800ebe8:	4b0d      	ldr	r3, [pc, #52]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800ebee:	4b0c      	ldr	r3, [pc, #48]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800ebf4:	f7ff ffbc 	bl	800eb70 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800ebf8:	4b09      	ldr	r3, [pc, #36]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800ebfe:	4b08      	ldr	r3, [pc, #32]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800ec04:	4b06      	ldr	r3, [pc, #24]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800ec0c:	4b04      	ldr	r3, [pc, #16]	; (800ec20 <LmhpComplianceInit+0x84>)
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800ec14:	bf00      	nop
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	20000d2c 	.word	0x20000d2c
 800ec20:	20000cf4 	.word	0x20000cf4
 800ec24:	0800f511 	.word	0x0800f511
 800ec28:	20000d30 	.word	0x20000d30

0800ec2c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800ec30:	4b02      	ldr	r3, [pc, #8]	; (800ec3c <LmhpComplianceIsInitialized+0x10>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bc80      	pop	{r7}
 800ec3a:	4770      	bx	lr
 800ec3c:	20000cf4 	.word	0x20000cf4

0800ec40 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800ec40:	b480      	push	{r7}
 800ec42:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800ec44:	4b02      	ldr	r3, [pc, #8]	; (800ec50 <LmhpComplianceIsTxPending+0x10>)
 800ec46:	785b      	ldrb	r3, [r3, #1]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bc80      	pop	{r7}
 800ec4e:	4770      	bx	lr
 800ec50:	20000cf4 	.word	0x20000cf4

0800ec54 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ec54:	b590      	push	{r4, r7, lr}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ec5a:	4b33      	ldr	r3, [pc, #204]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ec5c:	785b      	ldrb	r3, [r3, #1]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d03f      	beq.n	800ece2 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ec62:	f00d ffd1 	bl	801cc08 <UTIL_TIMER_GetCurrentTime>
 800ec66:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ec68:	4b2f      	ldr	r3, [pc, #188]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ec6a:	685c      	ldr	r4, [r3, #4]
 800ec6c:	f7ff f982 	bl	800df74 <LmHandlerGetDutyCycleWaitTime>
 800ec70:	4603      	mov	r3, r0
 800ec72:	4423      	add	r3, r4
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d942      	bls.n	800ed00 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ec7a:	4b2b      	ldr	r3, [pc, #172]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ec7c:	7a9b      	ldrb	r3, [r3, #10]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d03e      	beq.n	800ed00 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800ec82:	23e0      	movs	r3, #224	; 0xe0
 800ec84:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ec86:	4b28      	ldr	r3, [pc, #160]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ec88:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800ec8a:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ec8c:	4b26      	ldr	r3, [pc, #152]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ec8e:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800ec90:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ec92:	23ff      	movs	r3, #255	; 0xff
 800ec94:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ec96:	4b24      	ldr	r3, [pc, #144]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ec98:	7a19      	ldrb	r1, [r3, #8]
 800ec9a:	463b      	mov	r3, r7
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff fa10 	bl	800e0c4 <LmHandlerSend>
 800eca4:	4603      	mov	r3, r0
 800eca6:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800eca8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ecac:	f113 0f02 	cmn.w	r3, #2
 800ecb0:	d004      	beq.n	800ecbc <LmhpComplianceProcess+0x68>
 800ecb2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ecb6:	f113 0f06 	cmn.w	r3, #6
 800ecba:	d108      	bne.n	800ecce <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800ecbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ecc0:	481a      	ldr	r0, [pc, #104]	; (800ed2c <LmhpComplianceProcess+0xd8>)
 800ecc2:	f00d fef7 	bl	801cab4 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800ecc6:	4819      	ldr	r0, [pc, #100]	; (800ed2c <LmhpComplianceProcess+0xd8>)
 800ecc8:	f00d fe16 	bl	801c8f8 <UTIL_TIMER_Start>
 800eccc:	e005      	b.n	800ecda <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800ecce:	4b16      	ldr	r3, [pc, #88]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800ecd4:	4b14      	ldr	r3, [pc, #80]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800ecda:	4a13      	ldr	r2, [pc, #76]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6053      	str	r3, [r2, #4]
 800ece0:	e00e      	b.n	800ed00 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800ece2:	4b11      	ldr	r3, [pc, #68]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ece4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d009      	beq.n	800ed00 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800ecec:	4b0e      	ldr	r3, [pc, #56]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800ecf4:	4b0c      	ldr	r3, [pc, #48]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ecf6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7ff fad0 	bl	800e2a0 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800ed00:	4b09      	ldr	r3, [pc, #36]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ed02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800ed0a:	4b07      	ldr	r3, [pc, #28]	; (800ed28 <LmhpComplianceProcess+0xd4>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800ed12:	4b07      	ldr	r3, [pc, #28]	; (800ed30 <LmhpComplianceProcess+0xdc>)
 800ed14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d002      	beq.n	800ed20 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800ed1a:	4b05      	ldr	r3, [pc, #20]	; (800ed30 <LmhpComplianceProcess+0xdc>)
 800ed1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed1e:	4798      	blx	r3
        }
    }
}
 800ed20:	bf00      	nop
 800ed22:	3714      	adds	r7, #20
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd90      	pop	{r4, r7, pc}
 800ed28:	20000cf4 	.word	0x20000cf4
 800ed2c:	20000d30 	.word	0x20000d30
 800ed30:	200000d8 	.word	0x200000d8

0800ed34 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800ed34:	b5b0      	push	{r4, r5, r7, lr}
 800ed36:	b0a4      	sub	sp, #144	; 0x90
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800ed42:	4bce      	ldr	r3, [pc, #824]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	f083 0301 	eor.w	r3, r3, #1
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f040 83b5 	bne.w	800f4bc <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	78db      	ldrb	r3, [r3, #3]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d103      	bne.n	800ed62 <LmhpComplianceOnMcpsIndication+0x2e>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	7b9b      	ldrb	r3, [r3, #14]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d005      	beq.n	800ed6e <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800ed62:	4bc6      	ldr	r3, [pc, #792]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800ed64:	8a1b      	ldrh	r3, [r3, #16]
 800ed66:	3301      	adds	r3, #1
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	4bc4      	ldr	r3, [pc, #784]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800ed6c:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	7b5b      	ldrb	r3, [r3, #13]
 800ed72:	f083 0301 	eor.w	r3, r3, #1
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f040 83a1 	bne.w	800f4c0 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	78db      	ldrb	r3, [r3, #3]
 800ed82:	2be0      	cmp	r3, #224	; 0xe0
 800ed84:	f040 839e 	bne.w	800f4c4 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800ed88:	4bbc      	ldr	r3, [pc, #752]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	689a      	ldr	r2, [r3, #8]
 800ed92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ed96:	1c59      	adds	r1, r3, #1
 800ed98:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ed9c:	4413      	add	r3, r2
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	2b7f      	cmp	r3, #127	; 0x7f
 800eda2:	f200 836e 	bhi.w	800f482 <LmhpComplianceOnMcpsIndication+0x74e>
 800eda6:	a201      	add	r2, pc, #4	; (adr r2, 800edac <LmhpComplianceOnMcpsIndication+0x78>)
 800eda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edac:	0800efad 	.word	0x0800efad
 800edb0:	0800eff1 	.word	0x0800eff1
 800edb4:	0800effb 	.word	0x0800effb
 800edb8:	0800f007 	.word	0x0800f007
 800edbc:	0800f029 	.word	0x0800f029
 800edc0:	0800f057 	.word	0x0800f057
 800edc4:	0800f085 	.word	0x0800f085
 800edc8:	0800f0e3 	.word	0x0800f0e3
 800edcc:	0800f13b 	.word	0x0800f13b
 800edd0:	0800f1a7 	.word	0x0800f1a7
 800edd4:	0800f1f7 	.word	0x0800f1f7
 800edd8:	0800f483 	.word	0x0800f483
 800eddc:	0800f483 	.word	0x0800f483
 800ede0:	0800f483 	.word	0x0800f483
 800ede4:	0800f483 	.word	0x0800f483
 800ede8:	0800f483 	.word	0x0800f483
 800edec:	0800f483 	.word	0x0800f483
 800edf0:	0800f483 	.word	0x0800f483
 800edf4:	0800f483 	.word	0x0800f483
 800edf8:	0800f483 	.word	0x0800f483
 800edfc:	0800f483 	.word	0x0800f483
 800ee00:	0800f483 	.word	0x0800f483
 800ee04:	0800f483 	.word	0x0800f483
 800ee08:	0800f483 	.word	0x0800f483
 800ee0c:	0800f483 	.word	0x0800f483
 800ee10:	0800f483 	.word	0x0800f483
 800ee14:	0800f483 	.word	0x0800f483
 800ee18:	0800f483 	.word	0x0800f483
 800ee1c:	0800f483 	.word	0x0800f483
 800ee20:	0800f483 	.word	0x0800f483
 800ee24:	0800f483 	.word	0x0800f483
 800ee28:	0800f483 	.word	0x0800f483
 800ee2c:	0800f1ff 	.word	0x0800f1ff
 800ee30:	0800f211 	.word	0x0800f211
 800ee34:	0800f219 	.word	0x0800f219
 800ee38:	0800f483 	.word	0x0800f483
 800ee3c:	0800f483 	.word	0x0800f483
 800ee40:	0800f483 	.word	0x0800f483
 800ee44:	0800f483 	.word	0x0800f483
 800ee48:	0800f483 	.word	0x0800f483
 800ee4c:	0800f483 	.word	0x0800f483
 800ee50:	0800f483 	.word	0x0800f483
 800ee54:	0800f483 	.word	0x0800f483
 800ee58:	0800f483 	.word	0x0800f483
 800ee5c:	0800f483 	.word	0x0800f483
 800ee60:	0800f483 	.word	0x0800f483
 800ee64:	0800f483 	.word	0x0800f483
 800ee68:	0800f483 	.word	0x0800f483
 800ee6c:	0800f483 	.word	0x0800f483
 800ee70:	0800f483 	.word	0x0800f483
 800ee74:	0800f483 	.word	0x0800f483
 800ee78:	0800f483 	.word	0x0800f483
 800ee7c:	0800f483 	.word	0x0800f483
 800ee80:	0800f483 	.word	0x0800f483
 800ee84:	0800f483 	.word	0x0800f483
 800ee88:	0800f483 	.word	0x0800f483
 800ee8c:	0800f483 	.word	0x0800f483
 800ee90:	0800f483 	.word	0x0800f483
 800ee94:	0800f483 	.word	0x0800f483
 800ee98:	0800f483 	.word	0x0800f483
 800ee9c:	0800f483 	.word	0x0800f483
 800eea0:	0800f483 	.word	0x0800f483
 800eea4:	0800f483 	.word	0x0800f483
 800eea8:	0800f483 	.word	0x0800f483
 800eeac:	0800f483 	.word	0x0800f483
 800eeb0:	0800f483 	.word	0x0800f483
 800eeb4:	0800f483 	.word	0x0800f483
 800eeb8:	0800f483 	.word	0x0800f483
 800eebc:	0800f483 	.word	0x0800f483
 800eec0:	0800f483 	.word	0x0800f483
 800eec4:	0800f483 	.word	0x0800f483
 800eec8:	0800f483 	.word	0x0800f483
 800eecc:	0800f483 	.word	0x0800f483
 800eed0:	0800f483 	.word	0x0800f483
 800eed4:	0800f483 	.word	0x0800f483
 800eed8:	0800f483 	.word	0x0800f483
 800eedc:	0800f483 	.word	0x0800f483
 800eee0:	0800f483 	.word	0x0800f483
 800eee4:	0800f483 	.word	0x0800f483
 800eee8:	0800f483 	.word	0x0800f483
 800eeec:	0800f483 	.word	0x0800f483
 800eef0:	0800f483 	.word	0x0800f483
 800eef4:	0800f483 	.word	0x0800f483
 800eef8:	0800f483 	.word	0x0800f483
 800eefc:	0800f483 	.word	0x0800f483
 800ef00:	0800f483 	.word	0x0800f483
 800ef04:	0800f483 	.word	0x0800f483
 800ef08:	0800f483 	.word	0x0800f483
 800ef0c:	0800f483 	.word	0x0800f483
 800ef10:	0800f483 	.word	0x0800f483
 800ef14:	0800f483 	.word	0x0800f483
 800ef18:	0800f483 	.word	0x0800f483
 800ef1c:	0800f483 	.word	0x0800f483
 800ef20:	0800f483 	.word	0x0800f483
 800ef24:	0800f483 	.word	0x0800f483
 800ef28:	0800f483 	.word	0x0800f483
 800ef2c:	0800f483 	.word	0x0800f483
 800ef30:	0800f483 	.word	0x0800f483
 800ef34:	0800f483 	.word	0x0800f483
 800ef38:	0800f483 	.word	0x0800f483
 800ef3c:	0800f483 	.word	0x0800f483
 800ef40:	0800f483 	.word	0x0800f483
 800ef44:	0800f483 	.word	0x0800f483
 800ef48:	0800f483 	.word	0x0800f483
 800ef4c:	0800f483 	.word	0x0800f483
 800ef50:	0800f483 	.word	0x0800f483
 800ef54:	0800f483 	.word	0x0800f483
 800ef58:	0800f483 	.word	0x0800f483
 800ef5c:	0800f483 	.word	0x0800f483
 800ef60:	0800f483 	.word	0x0800f483
 800ef64:	0800f483 	.word	0x0800f483
 800ef68:	0800f483 	.word	0x0800f483
 800ef6c:	0800f483 	.word	0x0800f483
 800ef70:	0800f483 	.word	0x0800f483
 800ef74:	0800f483 	.word	0x0800f483
 800ef78:	0800f483 	.word	0x0800f483
 800ef7c:	0800f483 	.word	0x0800f483
 800ef80:	0800f483 	.word	0x0800f483
 800ef84:	0800f483 	.word	0x0800f483
 800ef88:	0800f483 	.word	0x0800f483
 800ef8c:	0800f483 	.word	0x0800f483
 800ef90:	0800f483 	.word	0x0800f483
 800ef94:	0800f483 	.word	0x0800f483
 800ef98:	0800f483 	.word	0x0800f483
 800ef9c:	0800f483 	.word	0x0800f483
 800efa0:	0800f24b 	.word	0x0800f24b
 800efa4:	0800f2fb 	.word	0x0800f2fb
 800efa8:	0800f32d 	.word	0x0800f32d
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800efac:	4b33      	ldr	r3, [pc, #204]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efae:	68da      	ldr	r2, [r3, #12]
 800efb0:	4b32      	ldr	r3, [pc, #200]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efb2:	7a9b      	ldrb	r3, [r3, #10]
 800efb4:	1c59      	adds	r1, r3, #1
 800efb6:	b2c8      	uxtb	r0, r1
 800efb8:	4930      	ldr	r1, [pc, #192]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efba:	7288      	strb	r0, [r1, #10]
 800efbc:	4413      	add	r3, r2
 800efbe:	2200      	movs	r2, #0
 800efc0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800efc2:	4b2e      	ldr	r3, [pc, #184]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efc4:	68da      	ldr	r2, [r3, #12]
 800efc6:	4b2d      	ldr	r3, [pc, #180]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efc8:	7a9b      	ldrb	r3, [r3, #10]
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	b2c8      	uxtb	r0, r1
 800efce:	492b      	ldr	r1, [pc, #172]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efd0:	7288      	strb	r0, [r1, #10]
 800efd2:	4413      	add	r3, r2
 800efd4:	2206      	movs	r2, #6
 800efd6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800efd8:	4b28      	ldr	r3, [pc, #160]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efda:	68da      	ldr	r2, [r3, #12]
 800efdc:	4b27      	ldr	r3, [pc, #156]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efde:	7a9b      	ldrb	r3, [r3, #10]
 800efe0:	1c59      	adds	r1, r3, #1
 800efe2:	b2c8      	uxtb	r0, r1
 800efe4:	4925      	ldr	r1, [pc, #148]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800efe6:	7288      	strb	r0, [r1, #10]
 800efe8:	4413      	add	r3, r2
 800efea:	2201      	movs	r2, #1
 800efec:	701a      	strb	r2, [r3, #0]
        break;
 800efee:	e251      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800eff0:	4b22      	ldr	r3, [pc, #136]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800eff8:	e24c      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800effa:	4b21      	ldr	r3, [pc, #132]	; (800f080 <LmhpComplianceOnMcpsIndication+0x34c>)
 800effc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effe:	2101      	movs	r1, #1
 800f000:	2002      	movs	r0, #2
 800f002:	4798      	blx	r3
        break;
 800f004:	e246      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	689a      	ldr	r2, [r3, #8]
 800f00a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f00e:	1c59      	adds	r1, r3, #1
 800f010:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f014:	4413      	add	r3, r2
 800f016:	781a      	ldrb	r2, [r3, #0]
 800f018:	4b18      	ldr	r3, [pc, #96]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800f01a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800f01e:	4b17      	ldr	r3, [pc, #92]	; (800f07c <LmhpComplianceOnMcpsIndication+0x348>)
 800f020:	2201      	movs	r2, #1
 800f022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800f026:	e235      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800f028:	2304      	movs	r3, #4
 800f02a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	689a      	ldr	r2, [r3, #8]
 800f030:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f034:	1c59      	adds	r1, r3, #1
 800f036:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f03a:	4413      	add	r3, r2
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	bf14      	ite	ne
 800f042:	2301      	movne	r3, #1
 800f044:	2300      	moveq	r3, #0
 800f046:	b2db      	uxtb	r3, r3
 800f048:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800f04a:	f107 030c 	add.w	r3, r7, #12
 800f04e:	4618      	mov	r0, r3
 800f050:	f004 fa08 	bl	8013464 <LoRaMacMibSetRequestConfirm>
        break;
 800f054:	e21e      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	689a      	ldr	r2, [r3, #8]
 800f05a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f05e:	1c59      	adds	r1, r3, #1
 800f060:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f064:	4413      	add	r3, r2
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	bf14      	ite	ne
 800f06c:	2301      	movne	r3, #1
 800f06e:	2300      	moveq	r3, #0
 800f070:	b2db      	uxtb	r3, r3
 800f072:	4618      	mov	r0, r3
 800f074:	f005 f824 	bl	80140c0 <LoRaMacTestSetDutyCycleOn>
        break;
 800f078:	e20c      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
 800f07a:	bf00      	nop
 800f07c:	20000cf4 	.word	0x20000cf4
 800f080:	200000d8 	.word	0x200000d8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f084:	4ba5      	ldr	r3, [pc, #660]	; (800f31c <LmhpComplianceOnMcpsIndication+0x5e8>)
 800f086:	f107 040c 	add.w	r4, r7, #12
 800f08a:	461d      	mov	r5, r3
 800f08c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f08e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f0a4:	1c59      	adds	r1, r3, #1
 800f0a6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f0aa:	4413      	add	r3, r2
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f0b2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800f0b6:	2b0a      	cmp	r3, #10
 800f0b8:	f200 81e5 	bhi.w	800f486 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f0bc:	4b98      	ldr	r3, [pc, #608]	; (800f320 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 81df 	beq.w	800f486 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f0c8:	4b95      	ldr	r3, [pc, #596]	; (800f320 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	685a      	ldr	r2, [r3, #4]
 800f0ce:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	3390      	adds	r3, #144	; 0x90
 800f0d6:	443b      	add	r3, r7
 800f0d8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	4790      	blx	r2
            }
        }
        break;
 800f0e0:	e1d1      	b.n	800f486 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	689a      	ldr	r2, [r3, #8]
 800f0e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f0ea:	1c59      	adds	r1, r3, #1
 800f0ec:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f0f0:	4413      	add	r3, r2
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f0f8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d004      	beq.n	800f10a <LmhpComplianceOnMcpsIndication+0x3d6>
 800f100:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f104:	2b02      	cmp	r3, #2
 800f106:	f040 81c0 	bne.w	800f48a <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f10a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f10e:	2b01      	cmp	r3, #1
 800f110:	bf14      	ite	ne
 800f112:	2301      	movne	r3, #1
 800f114:	2300      	moveq	r3, #0
 800f116:	b2db      	uxtb	r3, r3
 800f118:	461a      	mov	r2, r3
 800f11a:	4b82      	ldr	r3, [pc, #520]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f11c:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f11e:	4b80      	ldr	r3, [pc, #512]	; (800f320 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 81b0 	beq.w	800f48a <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f12a:	4b7d      	ldr	r3, [pc, #500]	; (800f320 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	4a7c      	ldr	r2, [pc, #496]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f132:	7a12      	ldrb	r2, [r2, #8]
 800f134:	4610      	mov	r0, r2
 800f136:	4798      	blx	r3
            }
        }
        break;
 800f138:	e1a7      	b.n	800f48a <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f13a:	4b7a      	ldr	r3, [pc, #488]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f13c:	68da      	ldr	r2, [r3, #12]
 800f13e:	4b79      	ldr	r3, [pc, #484]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f140:	7a9b      	ldrb	r3, [r3, #10]
 800f142:	1c59      	adds	r1, r3, #1
 800f144:	b2c8      	uxtb	r0, r1
 800f146:	4977      	ldr	r1, [pc, #476]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f148:	7288      	strb	r0, [r1, #10]
 800f14a:	4413      	add	r3, r2
 800f14c:	2208      	movs	r2, #8
 800f14e:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f150:	2301      	movs	r3, #1
 800f152:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800f156:	e019      	b.n	800f18c <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	689a      	ldr	r2, [r3, #8]
 800f15c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f160:	1c59      	adds	r1, r3, #1
 800f162:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f166:	4413      	add	r3, r2
 800f168:	781a      	ldrb	r2, [r3, #0]
 800f16a:	4b6e      	ldr	r3, [pc, #440]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f16c:	68d9      	ldr	r1, [r3, #12]
 800f16e:	4b6d      	ldr	r3, [pc, #436]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f170:	7a9b      	ldrb	r3, [r3, #10]
 800f172:	1c58      	adds	r0, r3, #1
 800f174:	b2c4      	uxtb	r4, r0
 800f176:	486b      	ldr	r0, [pc, #428]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f178:	7284      	strb	r4, [r0, #10]
 800f17a:	440b      	add	r3, r1
 800f17c:	3201      	adds	r2, #1
 800f17e:	b2d2      	uxtb	r2, r2
 800f180:	701a      	strb	r2, [r3, #0]
             i++ )
 800f182:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f186:	3301      	adds	r3, #1
 800f188:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f18c:	4b65      	ldr	r3, [pc, #404]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f18e:	7a5a      	ldrb	r2, [r3, #9]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	7b1b      	ldrb	r3, [r3, #12]
 800f194:	4293      	cmp	r3, r2
 800f196:	bf28      	it	cs
 800f198:	4613      	movcs	r3, r2
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d3d9      	bcc.n	800f158 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800f1a4:	e176      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f1a6:	4b5f      	ldr	r3, [pc, #380]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1a8:	68da      	ldr	r2, [r3, #12]
 800f1aa:	4b5e      	ldr	r3, [pc, #376]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1ac:	7a9b      	ldrb	r3, [r3, #10]
 800f1ae:	1c59      	adds	r1, r3, #1
 800f1b0:	b2c8      	uxtb	r0, r1
 800f1b2:	495c      	ldr	r1, [pc, #368]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1b4:	7288      	strb	r0, [r1, #10]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	2209      	movs	r2, #9
 800f1ba:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f1bc:	4b59      	ldr	r3, [pc, #356]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1be:	8a18      	ldrh	r0, [r3, #16]
 800f1c0:	4b58      	ldr	r3, [pc, #352]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1c2:	68da      	ldr	r2, [r3, #12]
 800f1c4:	4b57      	ldr	r3, [pc, #348]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1c6:	7a9b      	ldrb	r3, [r3, #10]
 800f1c8:	1c59      	adds	r1, r3, #1
 800f1ca:	b2cc      	uxtb	r4, r1
 800f1cc:	4955      	ldr	r1, [pc, #340]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1ce:	728c      	strb	r4, [r1, #10]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	b2c2      	uxtb	r2, r0
 800f1d4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800f1d6:	4b53      	ldr	r3, [pc, #332]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1d8:	8a1b      	ldrh	r3, [r3, #16]
 800f1da:	0a1b      	lsrs	r3, r3, #8
 800f1dc:	b298      	uxth	r0, r3
 800f1de:	4b51      	ldr	r3, [pc, #324]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1e0:	68da      	ldr	r2, [r3, #12]
 800f1e2:	4b50      	ldr	r3, [pc, #320]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1e4:	7a9b      	ldrb	r3, [r3, #10]
 800f1e6:	1c59      	adds	r1, r3, #1
 800f1e8:	b2cc      	uxtb	r4, r1
 800f1ea:	494e      	ldr	r1, [pc, #312]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1ec:	728c      	strb	r4, [r1, #10]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b2c2      	uxtb	r2, r0
 800f1f2:	701a      	strb	r2, [r3, #0]
        break;
 800f1f4:	e14e      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800f1f6:	4b4b      	ldr	r3, [pc, #300]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	821a      	strh	r2, [r3, #16]
        break;
 800f1fc:	e14a      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800f1fe:	2304      	movs	r3, #4
 800f200:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800f204:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f208:	4618      	mov	r0, r3
 800f20a:	f004 fc9b 	bl	8013b44 <LoRaMacMlmeRequest>
        break;
 800f20e:	e141      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800f210:	4b45      	ldr	r3, [pc, #276]	; (800f328 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f214:	4798      	blx	r3
        break;
 800f216:	e13d      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	689a      	ldr	r2, [r3, #8]
 800f21c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f220:	1c59      	adds	r1, r3, #1
 800f222:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f226:	4413      	add	r3, r2
 800f228:	781a      	ldrb	r2, [r3, #0]
 800f22a:	4b3e      	ldr	r3, [pc, #248]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f22c:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800f22e:	4b3c      	ldr	r3, [pc, #240]	; (800f320 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	f000 812a 	beq.w	800f48e <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800f23a:	4b39      	ldr	r3, [pc, #228]	; (800f320 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	4a38      	ldr	r2, [pc, #224]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f242:	7d52      	ldrb	r2, [r2, #21]
 800f244:	4610      	mov	r0, r2
 800f246:	4798      	blx	r3
        }
        break;
 800f248:	e121      	b.n	800f48e <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	7b1b      	ldrb	r3, [r3, #12]
 800f24e:	2b07      	cmp	r3, #7
 800f250:	f040 811f 	bne.w	800f492 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800f254:	2305      	movs	r3, #5
 800f256:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	689a      	ldr	r2, [r3, #8]
 800f25e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f262:	4413      	add	r3, r2
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	b21a      	sxth	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6899      	ldr	r1, [r3, #8]
 800f26c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f270:	3301      	adds	r3, #1
 800f272:	440b      	add	r3, r1
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	021b      	lsls	r3, r3, #8
 800f278:	b21b      	sxth	r3, r3
 800f27a:	4313      	orrs	r3, r2
 800f27c:	b21b      	sxth	r3, r3
 800f27e:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800f280:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cmdIndex += 2;
 800f284:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f288:	3302      	adds	r3, #2
 800f28a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	689a      	ldr	r2, [r3, #8]
 800f292:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f296:	4413      	add	r3, r2
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	4619      	mov	r1, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	689a      	ldr	r2, [r3, #8]
 800f2a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	4413      	add	r3, r2
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	021b      	lsls	r3, r3, #8
 800f2ac:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6899      	ldr	r1, [r3, #8]
 800f2b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f2b8:	3302      	adds	r3, #2
 800f2ba:	440b      	add	r3, r1
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f2c4:	2364      	movs	r3, #100	; 0x64
 800f2c6:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800f2ca:	64bb      	str	r3, [r7, #72]	; 0x48
                100;
            cmdIndex += 3;
 800f2cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f2d0:	3303      	adds	r3, #3
 800f2d2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f2de:	1c59      	adds	r1, r3, #1
 800f2e0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f2e4:	4413      	add	r3, r2
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	b25b      	sxtb	r3, r3
 800f2ea:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800f2ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f004 fc26 	bl	8013b44 <LoRaMacMlmeRequest>
        }
        break;
 800f2f8:	e0cb      	b.n	800f492 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800f2fa:	2339      	movs	r3, #57	; 0x39
 800f2fc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        mibReq.Param.IsCertPortOn = false;
 800f300:	2300      	movs	r3, #0
 800f302:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f306:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f30a:	4618      	mov	r0, r3
 800f30c:	f004 f8aa 	bl	8013464 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800f310:	4b04      	ldr	r3, [pc, #16]	; (800f324 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f312:	2201      	movs	r2, #1
 800f314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800f318:	e0bc      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
 800f31a:	bf00      	nop
 800f31c:	0801d81c 	.word	0x0801d81c
 800f320:	20000d2c 	.word	0x20000d2c
 800f324:	20000cf4 	.word	0x20000cf4
 800f328:	200000d8 	.word	0x200000d8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800f32c:	232a      	movs	r3, #42	; 0x2a
 800f32e:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800f330:	f107 030c 	add.w	r3, r7, #12
 800f334:	4618      	mov	r0, r3
 800f336:	f003 feef 	bl	8013118 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	63bb      	str	r3, [r7, #56]	; 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800f342:	4b62      	ldr	r3, [pc, #392]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f344:	68da      	ldr	r2, [r3, #12]
 800f346:	4b61      	ldr	r3, [pc, #388]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f348:	7a9b      	ldrb	r3, [r3, #10]
 800f34a:	1c59      	adds	r1, r3, #1
 800f34c:	b2c8      	uxtb	r0, r1
 800f34e:	495f      	ldr	r1, [pc, #380]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f350:	7288      	strb	r0, [r1, #10]
 800f352:	4413      	add	r3, r2
 800f354:	227f      	movs	r2, #127	; 0x7f
 800f356:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800f358:	4b5d      	ldr	r3, [pc, #372]	; (800f4d0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	4b5b      	ldr	r3, [pc, #364]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f35e:	68d9      	ldr	r1, [r3, #12]
 800f360:	4b5a      	ldr	r3, [pc, #360]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f362:	7a9b      	ldrb	r3, [r3, #10]
 800f364:	1c58      	adds	r0, r3, #1
 800f366:	b2c4      	uxtb	r4, r0
 800f368:	4858      	ldr	r0, [pc, #352]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f36a:	7284      	strb	r4, [r0, #10]
 800f36c:	440b      	add	r3, r1
 800f36e:	78d2      	ldrb	r2, [r2, #3]
 800f370:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800f372:	4b57      	ldr	r3, [pc, #348]	; (800f4d0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	4b55      	ldr	r3, [pc, #340]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f378:	68d9      	ldr	r1, [r3, #12]
 800f37a:	4b54      	ldr	r3, [pc, #336]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f37c:	7a9b      	ldrb	r3, [r3, #10]
 800f37e:	1c58      	adds	r0, r3, #1
 800f380:	b2c4      	uxtb	r4, r0
 800f382:	4852      	ldr	r0, [pc, #328]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f384:	7284      	strb	r4, [r0, #10]
 800f386:	440b      	add	r3, r1
 800f388:	7892      	ldrb	r2, [r2, #2]
 800f38a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800f38c:	4b50      	ldr	r3, [pc, #320]	; (800f4d0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	4b4e      	ldr	r3, [pc, #312]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f392:	68d9      	ldr	r1, [r3, #12]
 800f394:	4b4d      	ldr	r3, [pc, #308]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f396:	7a9b      	ldrb	r3, [r3, #10]
 800f398:	1c58      	adds	r0, r3, #1
 800f39a:	b2c4      	uxtb	r4, r0
 800f39c:	484b      	ldr	r0, [pc, #300]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f39e:	7284      	strb	r4, [r0, #10]
 800f3a0:	440b      	add	r3, r1
 800f3a2:	7852      	ldrb	r2, [r2, #1]
 800f3a4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800f3a6:	4b4a      	ldr	r3, [pc, #296]	; (800f4d0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	4b48      	ldr	r3, [pc, #288]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3ac:	68d9      	ldr	r1, [r3, #12]
 800f3ae:	4b47      	ldr	r3, [pc, #284]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3b0:	7a9b      	ldrb	r3, [r3, #10]
 800f3b2:	1c58      	adds	r0, r3, #1
 800f3b4:	b2c4      	uxtb	r4, r0
 800f3b6:	4845      	ldr	r0, [pc, #276]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3b8:	7284      	strb	r4, [r0, #10]
 800f3ba:	440b      	add	r3, r1
 800f3bc:	7812      	ldrb	r2, [r2, #0]
 800f3be:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800f3c0:	4b42      	ldr	r3, [pc, #264]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3c2:	68da      	ldr	r2, [r3, #12]
 800f3c4:	4b41      	ldr	r3, [pc, #260]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3c6:	7a9b      	ldrb	r3, [r3, #10]
 800f3c8:	1c59      	adds	r1, r3, #1
 800f3ca:	b2c8      	uxtb	r0, r1
 800f3cc:	493f      	ldr	r1, [pc, #252]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3ce:	7288      	strb	r0, [r1, #10]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f3d6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800f3d8:	4b3c      	ldr	r3, [pc, #240]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3da:	68da      	ldr	r2, [r3, #12]
 800f3dc:	4b3b      	ldr	r3, [pc, #236]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3de:	7a9b      	ldrb	r3, [r3, #10]
 800f3e0:	1c59      	adds	r1, r3, #1
 800f3e2:	b2c8      	uxtb	r0, r1
 800f3e4:	4939      	ldr	r1, [pc, #228]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3e6:	7288      	strb	r0, [r1, #10]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800f3ee:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800f3f0:	4b36      	ldr	r3, [pc, #216]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3f2:	68da      	ldr	r2, [r3, #12]
 800f3f4:	4b35      	ldr	r3, [pc, #212]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3f6:	7a9b      	ldrb	r3, [r3, #10]
 800f3f8:	1c59      	adds	r1, r3, #1
 800f3fa:	b2c8      	uxtb	r0, r1
 800f3fc:	4933      	ldr	r1, [pc, #204]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f3fe:	7288      	strb	r0, [r1, #10]
 800f400:	4413      	add	r3, r2
 800f402:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800f406:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800f408:	4b30      	ldr	r3, [pc, #192]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f40a:	68da      	ldr	r2, [r3, #12]
 800f40c:	4b2f      	ldr	r3, [pc, #188]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f40e:	7a9b      	ldrb	r3, [r3, #10]
 800f410:	1c59      	adds	r1, r3, #1
 800f412:	b2c8      	uxtb	r0, r1
 800f414:	492d      	ldr	r1, [pc, #180]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f416:	7288      	strb	r0, [r1, #10]
 800f418:	4413      	add	r3, r2
 800f41a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800f41e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800f420:	4b2a      	ldr	r3, [pc, #168]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f422:	68da      	ldr	r2, [r3, #12]
 800f424:	4b29      	ldr	r3, [pc, #164]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f426:	7a9b      	ldrb	r3, [r3, #10]
 800f428:	1c59      	adds	r1, r3, #1
 800f42a:	b2c8      	uxtb	r0, r1
 800f42c:	4927      	ldr	r1, [pc, #156]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f42e:	7288      	strb	r0, [r1, #10]
 800f430:	4413      	add	r3, r2
 800f432:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f436:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800f438:	4b24      	ldr	r3, [pc, #144]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f43a:	68da      	ldr	r2, [r3, #12]
 800f43c:	4b23      	ldr	r3, [pc, #140]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f43e:	7a9b      	ldrb	r3, [r3, #10]
 800f440:	1c59      	adds	r1, r3, #1
 800f442:	b2c8      	uxtb	r0, r1
 800f444:	4921      	ldr	r1, [pc, #132]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f446:	7288      	strb	r0, [r1, #10]
 800f448:	4413      	add	r3, r2
 800f44a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800f44e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800f450:	4b1e      	ldr	r3, [pc, #120]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f452:	68da      	ldr	r2, [r3, #12]
 800f454:	4b1d      	ldr	r3, [pc, #116]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f456:	7a9b      	ldrb	r3, [r3, #10]
 800f458:	1c59      	adds	r1, r3, #1
 800f45a:	b2c8      	uxtb	r0, r1
 800f45c:	491b      	ldr	r1, [pc, #108]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f45e:	7288      	strb	r0, [r1, #10]
 800f460:	4413      	add	r3, r2
 800f462:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800f466:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800f468:	4b18      	ldr	r3, [pc, #96]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f46a:	68da      	ldr	r2, [r3, #12]
 800f46c:	4b17      	ldr	r3, [pc, #92]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f46e:	7a9b      	ldrb	r3, [r3, #10]
 800f470:	1c59      	adds	r1, r3, #1
 800f472:	b2c8      	uxtb	r0, r1
 800f474:	4915      	ldr	r1, [pc, #84]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f476:	7288      	strb	r0, [r1, #10]
 800f478:	4413      	add	r3, r2
 800f47a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f47e:	701a      	strb	r2, [r3, #0]
        break;
 800f480:	e008      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800f482:	bf00      	nop
 800f484:	e006      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800f486:	bf00      	nop
 800f488:	e004      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800f48a:	bf00      	nop
 800f48c:	e002      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800f48e:	bf00      	nop
 800f490:	e000      	b.n	800f494 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800f492:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800f494:	4b0d      	ldr	r3, [pc, #52]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f496:	7a9b      	ldrb	r3, [r3, #10]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d008      	beq.n	800f4ae <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800f49c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f4a0:	480c      	ldr	r0, [pc, #48]	; (800f4d4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800f4a2:	f00d fb07 	bl	801cab4 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800f4a6:	480b      	ldr	r0, [pc, #44]	; (800f4d4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800f4a8:	f00d fa26 	bl	801c8f8 <UTIL_TIMER_Start>
 800f4ac:	e00b      	b.n	800f4c6 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800f4ae:	4809      	ldr	r0, [pc, #36]	; (800f4d4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800f4b0:	f00d fa90 	bl	801c9d4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800f4b4:	4b05      	ldr	r3, [pc, #20]	; (800f4cc <LmhpComplianceOnMcpsIndication+0x798>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	705a      	strb	r2, [r3, #1]
 800f4ba:	e004      	b.n	800f4c6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800f4bc:	bf00      	nop
 800f4be:	e002      	b.n	800f4c6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800f4c0:	bf00      	nop
 800f4c2:	e000      	b.n	800f4c6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800f4c4:	bf00      	nop
    }
}
 800f4c6:	3790      	adds	r7, #144	; 0x90
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bdb0      	pop	{r4, r5, r7, pc}
 800f4cc:	20000cf4 	.word	0x20000cf4
 800f4d0:	20000d2c 	.word	0x20000d2c
 800f4d4:	20000d30 	.word	0x20000d30

0800f4d8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800f4e0:	bf00      	nop
    }
}
 800f4e2:	bf00      	nop
 800f4e4:	370c      	adds	r7, #12
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bc80      	pop	{r7}
 800f4ea:	4770      	bx	lr

0800f4ec <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f4f4:	4b05      	ldr	r3, [pc, #20]	; (800f50c <LmhpComplianceOnMlmeIndication+0x20>)
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	f083 0301 	eor.w	r3, r3, #1
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
    {
        return;
 800f500:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	bc80      	pop	{r7}
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	20000cf4 	.word	0x20000cf4

0800f510 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800f518:	4b04      	ldr	r3, [pc, #16]	; (800f52c <OnProcessTimer+0x1c>)
 800f51a:	2201      	movs	r2, #1
 800f51c:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800f51e:	4b04      	ldr	r3, [pc, #16]	; (800f530 <OnProcessTimer+0x20>)
 800f520:	695b      	ldr	r3, [r3, #20]
 800f522:	4798      	blx	r3
}
 800f524:	bf00      	nop
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	20000cf4 	.word	0x20000cf4
 800f530:	200000d8 	.word	0x200000d8

0800f534 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800f534:	b590      	push	{r4, r7, lr}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f53a:	f00d fb65 	bl	801cc08 <UTIL_TIMER_GetCurrentTime>
 800f53e:	4603      	mov	r3, r0
 800f540:	4a16      	ldr	r2, [pc, #88]	; (800f59c <OnRadioTxDone+0x68>)
 800f542:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f544:	4c16      	ldr	r4, [pc, #88]	; (800f5a0 <OnRadioTxDone+0x6c>)
 800f546:	463b      	mov	r3, r7
 800f548:	4618      	mov	r0, r3
 800f54a:	f00c fcd7 	bl	801befc <SysTimeGet>
 800f54e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800f552:	463a      	mov	r2, r7
 800f554:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f558:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f55c:	4a11      	ldr	r2, [pc, #68]	; (800f5a4 <OnRadioTxDone+0x70>)
 800f55e:	7813      	ldrb	r3, [r2, #0]
 800f560:	f043 0320 	orr.w	r3, r3, #32
 800f564:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f566:	4b0e      	ldr	r3, [pc, #56]	; (800f5a0 <OnRadioTxDone+0x6c>)
 800f568:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00a      	beq.n	800f586 <OnRadioTxDone+0x52>
 800f570:	4b0b      	ldr	r3, [pc, #44]	; (800f5a0 <OnRadioTxDone+0x6c>)
 800f572:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d004      	beq.n	800f586 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f57c:	4b08      	ldr	r3, [pc, #32]	; (800f5a0 <OnRadioTxDone+0x6c>)
 800f57e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f586:	4b08      	ldr	r3, [pc, #32]	; (800f5a8 <OnRadioTxDone+0x74>)
 800f588:	2201      	movs	r2, #1
 800f58a:	2100      	movs	r1, #0
 800f58c:	2002      	movs	r0, #2
 800f58e:	f00d fc2b 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f592:	bf00      	nop
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	bd90      	pop	{r4, r7, pc}
 800f59a:	bf00      	nop
 800f59c:	20001df4 	.word	0x20001df4
 800f5a0:	20000d48 	.word	0x20000d48
 800f5a4:	20001df0 	.word	0x20001df0
 800f5a8:	0801d848 	.word	0x0801d848

0800f5ac <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	4608      	mov	r0, r1
 800f5b6:	4611      	mov	r1, r2
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	817b      	strh	r3, [r7, #10]
 800f5be:	460b      	mov	r3, r1
 800f5c0:	813b      	strh	r3, [r7, #8]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f5c6:	f00d fb1f 	bl	801cc08 <UTIL_TIMER_GetCurrentTime>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	4a18      	ldr	r2, [pc, #96]	; (800f630 <OnRadioRxDone+0x84>)
 800f5ce:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f5d0:	4a17      	ldr	r2, [pc, #92]	; (800f630 <OnRadioRxDone+0x84>)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f5d6:	4a16      	ldr	r2, [pc, #88]	; (800f630 <OnRadioRxDone+0x84>)
 800f5d8:	897b      	ldrh	r3, [r7, #10]
 800f5da:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f5dc:	4a14      	ldr	r2, [pc, #80]	; (800f630 <OnRadioRxDone+0x84>)
 800f5de:	893b      	ldrh	r3, [r7, #8]
 800f5e0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f5e2:	4a13      	ldr	r2, [pc, #76]	; (800f630 <OnRadioRxDone+0x84>)
 800f5e4:	79fb      	ldrb	r3, [r7, #7]
 800f5e6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f5e8:	4a12      	ldr	r2, [pc, #72]	; (800f634 <OnRadioRxDone+0x88>)
 800f5ea:	7813      	ldrb	r3, [r2, #0]
 800f5ec:	f043 0310 	orr.w	r3, r3, #16
 800f5f0:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f5f2:	4a10      	ldr	r2, [pc, #64]	; (800f634 <OnRadioRxDone+0x88>)
 800f5f4:	7813      	ldrb	r3, [r2, #0]
 800f5f6:	f043 0301 	orr.w	r3, r3, #1
 800f5fa:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f5fc:	4b0e      	ldr	r3, [pc, #56]	; (800f638 <OnRadioRxDone+0x8c>)
 800f5fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00a      	beq.n	800f61c <OnRadioRxDone+0x70>
 800f606:	4b0c      	ldr	r3, [pc, #48]	; (800f638 <OnRadioRxDone+0x8c>)
 800f608:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d004      	beq.n	800f61c <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f612:	4b09      	ldr	r3, [pc, #36]	; (800f638 <OnRadioRxDone+0x8c>)
 800f614:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f618:	691b      	ldr	r3, [r3, #16]
 800f61a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f61c:	4b07      	ldr	r3, [pc, #28]	; (800f63c <OnRadioRxDone+0x90>)
 800f61e:	2201      	movs	r2, #1
 800f620:	2100      	movs	r1, #0
 800f622:	2002      	movs	r0, #2
 800f624:	f00d fbe0 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f628:	bf00      	nop
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	20001df8 	.word	0x20001df8
 800f634:	20001df0 	.word	0x20001df0
 800f638:	20000d48 	.word	0x20000d48
 800f63c:	0801d858 	.word	0x0801d858

0800f640 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f644:	4a0e      	ldr	r2, [pc, #56]	; (800f680 <OnRadioTxTimeout+0x40>)
 800f646:	7813      	ldrb	r3, [r2, #0]
 800f648:	f043 0308 	orr.w	r3, r3, #8
 800f64c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f64e:	4b0d      	ldr	r3, [pc, #52]	; (800f684 <OnRadioTxTimeout+0x44>)
 800f650:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00a      	beq.n	800f66e <OnRadioTxTimeout+0x2e>
 800f658:	4b0a      	ldr	r3, [pc, #40]	; (800f684 <OnRadioTxTimeout+0x44>)
 800f65a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f65e:	691b      	ldr	r3, [r3, #16]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d004      	beq.n	800f66e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f664:	4b07      	ldr	r3, [pc, #28]	; (800f684 <OnRadioTxTimeout+0x44>)
 800f666:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f66a:	691b      	ldr	r3, [r3, #16]
 800f66c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f66e:	4b06      	ldr	r3, [pc, #24]	; (800f688 <OnRadioTxTimeout+0x48>)
 800f670:	2201      	movs	r2, #1
 800f672:	2100      	movs	r1, #0
 800f674:	2002      	movs	r0, #2
 800f676:	f00d fbb7 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f67a:	bf00      	nop
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	20001df0 	.word	0x20001df0
 800f684:	20000d48 	.word	0x20000d48
 800f688:	0801d868 	.word	0x0801d868

0800f68c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f690:	4a0b      	ldr	r2, [pc, #44]	; (800f6c0 <OnRadioRxError+0x34>)
 800f692:	7813      	ldrb	r3, [r2, #0]
 800f694:	f043 0304 	orr.w	r3, r3, #4
 800f698:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f69a:	4b0a      	ldr	r3, [pc, #40]	; (800f6c4 <OnRadioRxError+0x38>)
 800f69c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00a      	beq.n	800f6ba <OnRadioRxError+0x2e>
 800f6a4:	4b07      	ldr	r3, [pc, #28]	; (800f6c4 <OnRadioRxError+0x38>)
 800f6a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f6b0:	4b04      	ldr	r3, [pc, #16]	; (800f6c4 <OnRadioRxError+0x38>)
 800f6b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6b6:	691b      	ldr	r3, [r3, #16]
 800f6b8:	4798      	blx	r3
    }
}
 800f6ba:	bf00      	nop
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	20001df0 	.word	0x20001df0
 800f6c4:	20000d48 	.word	0x20000d48

0800f6c8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f6cc:	4a0e      	ldr	r2, [pc, #56]	; (800f708 <OnRadioRxTimeout+0x40>)
 800f6ce:	7813      	ldrb	r3, [r2, #0]
 800f6d0:	f043 0302 	orr.w	r3, r3, #2
 800f6d4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f6d6:	4b0d      	ldr	r3, [pc, #52]	; (800f70c <OnRadioRxTimeout+0x44>)
 800f6d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00a      	beq.n	800f6f6 <OnRadioRxTimeout+0x2e>
 800f6e0:	4b0a      	ldr	r3, [pc, #40]	; (800f70c <OnRadioRxTimeout+0x44>)
 800f6e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6e6:	691b      	ldr	r3, [r3, #16]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d004      	beq.n	800f6f6 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f6ec:	4b07      	ldr	r3, [pc, #28]	; (800f70c <OnRadioRxTimeout+0x44>)
 800f6ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6f2:	691b      	ldr	r3, [r3, #16]
 800f6f4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f6f6:	4b06      	ldr	r3, [pc, #24]	; (800f710 <OnRadioRxTimeout+0x48>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	2002      	movs	r0, #2
 800f6fe:	f00d fb73 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f702:	bf00      	nop
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	20001df0 	.word	0x20001df0
 800f70c:	20000d48 	.word	0x20000d48
 800f710:	0801d878 	.word	0x0801d878

0800f714 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f714:	b480      	push	{r7}
 800f716:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f718:	4b08      	ldr	r3, [pc, #32]	; (800f73c <UpdateRxSlotIdleState+0x28>)
 800f71a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f71e:	2b02      	cmp	r3, #2
 800f720:	d004      	beq.n	800f72c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f722:	4b07      	ldr	r3, [pc, #28]	; (800f740 <UpdateRxSlotIdleState+0x2c>)
 800f724:	2206      	movs	r2, #6
 800f726:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f72a:	e003      	b.n	800f734 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f72c:	4b04      	ldr	r3, [pc, #16]	; (800f740 <UpdateRxSlotIdleState+0x2c>)
 800f72e:	2202      	movs	r2, #2
 800f730:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
}
 800f734:	bf00      	nop
 800f736:	46bd      	mov	sp, r7
 800f738:	bc80      	pop	{r7}
 800f73a:	4770      	bx	lr
 800f73c:	20001268 	.word	0x20001268
 800f740:	20000d48 	.word	0x20000d48

0800f744 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08e      	sub	sp, #56	; 0x38
 800f748:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f74a:	4b3e      	ldr	r3, [pc, #248]	; (800f844 <ProcessRadioTxDone+0x100>)
 800f74c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f750:	2b02      	cmp	r3, #2
 800f752:	d002      	beq.n	800f75a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f754:	4b3c      	ldr	r3, [pc, #240]	; (800f848 <ProcessRadioTxDone+0x104>)
 800f756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f758:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f75a:	4b3c      	ldr	r3, [pc, #240]	; (800f84c <ProcessRadioTxDone+0x108>)
 800f75c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800f760:	4619      	mov	r1, r3
 800f762:	483b      	ldr	r0, [pc, #236]	; (800f850 <ProcessRadioTxDone+0x10c>)
 800f764:	f00d f9a6 	bl	801cab4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f768:	4839      	ldr	r0, [pc, #228]	; (800f850 <ProcessRadioTxDone+0x10c>)
 800f76a:	f00d f8c5 	bl	801c8f8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f76e:	4b37      	ldr	r3, [pc, #220]	; (800f84c <ProcessRadioTxDone+0x108>)
 800f770:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f774:	4619      	mov	r1, r3
 800f776:	4837      	ldr	r0, [pc, #220]	; (800f854 <ProcessRadioTxDone+0x110>)
 800f778:	f00d f99c 	bl	801cab4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f77c:	4835      	ldr	r0, [pc, #212]	; (800f854 <ProcessRadioTxDone+0x110>)
 800f77e:	f00d f8bb 	bl	801c8f8 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800f782:	4b32      	ldr	r3, [pc, #200]	; (800f84c <ProcessRadioTxDone+0x108>)
 800f784:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d01a      	beq.n	800f7c2 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f78c:	2315      	movs	r3, #21
 800f78e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f792:	4b2c      	ldr	r3, [pc, #176]	; (800f844 <ProcessRadioTxDone+0x100>)
 800f794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f798:	f107 0220 	add.w	r2, r7, #32
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f006 fd20 	bl	80161e4 <RegionGetPhyParam>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f7a8:	4b28      	ldr	r3, [pc, #160]	; (800f84c <ProcessRadioTxDone+0x108>)
 800f7aa:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	4828      	ldr	r0, [pc, #160]	; (800f858 <ProcessRadioTxDone+0x114>)
 800f7b6:	f00d f97d 	bl	801cab4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f7ba:	4827      	ldr	r0, [pc, #156]	; (800f858 <ProcessRadioTxDone+0x114>)
 800f7bc:	f00d f89c 	bl	801c8f8 <UTIL_TIMER_Start>
 800f7c0:	e003      	b.n	800f7ca <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f7c2:	4b22      	ldr	r3, [pc, #136]	; (800f84c <ProcessRadioTxDone+0x108>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f7ca:	4b24      	ldr	r3, [pc, #144]	; (800f85c <ProcessRadioTxDone+0x118>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4a1d      	ldr	r2, [pc, #116]	; (800f844 <ProcessRadioTxDone+0x100>)
 800f7d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f7d2:	4b1e      	ldr	r3, [pc, #120]	; (800f84c <ProcessRadioTxDone+0x108>)
 800f7d4:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800f7d8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f7da:	4b20      	ldr	r3, [pc, #128]	; (800f85c <ProcessRadioTxDone+0x118>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f7e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f00c fbc1 	bl	801bf6c <SysTimeGetMcuTime>
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	4b15      	ldr	r3, [pc, #84]	; (800f844 <ProcessRadioTxDone+0x100>)
 800f7ee:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800f7f2:	9200      	str	r2, [sp, #0]
 800f7f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f7f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f7fc:	ca06      	ldmia	r2, {r1, r2}
 800f7fe:	f00c fb16 	bl	801be2e <SysTimeSub>
 800f802:	f107 0314 	add.w	r3, r7, #20
 800f806:	463a      	mov	r2, r7
 800f808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f80c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f810:	4b0e      	ldr	r3, [pc, #56]	; (800f84c <ProcessRadioTxDone+0x108>)
 800f812:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800f816:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f818:	2301      	movs	r3, #1
 800f81a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f81c:	4b09      	ldr	r3, [pc, #36]	; (800f844 <ProcessRadioTxDone+0x100>)
 800f81e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800f826:	2300      	movs	r3, #0
 800f828:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f82a:	4b06      	ldr	r3, [pc, #24]	; (800f844 <ProcessRadioTxDone+0x100>)
 800f82c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f830:	f107 0208 	add.w	r2, r7, #8
 800f834:	4611      	mov	r1, r2
 800f836:	4618      	mov	r0, r3
 800f838:	f006 fcec 	bl	8016214 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f83c:	bf00      	nop
 800f83e:	3730      	adds	r7, #48	; 0x30
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	20001268 	.word	0x20001268
 800f848:	0801dea4 	.word	0x0801dea4
 800f84c:	20000d48 	.word	0x20000d48
 800f850:	200010c8 	.word	0x200010c8
 800f854:	200010e0 	.word	0x200010e0
 800f858:	2000114c 	.word	0x2000114c
 800f85c:	20001df4 	.word	0x20001df4

0800f860 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f864:	4b10      	ldr	r3, [pc, #64]	; (800f8a8 <PrepareRxDoneAbort+0x48>)
 800f866:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f86e:	4a0e      	ldr	r2, [pc, #56]	; (800f8a8 <PrepareRxDoneAbort+0x48>)
 800f870:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800f874:	4b0c      	ldr	r3, [pc, #48]	; (800f8a8 <PrepareRxDoneAbort+0x48>)
 800f876:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f87e:	2000      	movs	r0, #0
 800f880:	f001 f99c 	bl	8010bbc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f884:	4a08      	ldr	r2, [pc, #32]	; (800f8a8 <PrepareRxDoneAbort+0x48>)
 800f886:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f88a:	f043 0302 	orr.w	r3, r3, #2
 800f88e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f892:	4a05      	ldr	r2, [pc, #20]	; (800f8a8 <PrepareRxDoneAbort+0x48>)
 800f894:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f898:	f043 0320 	orr.w	r3, r3, #32
 800f89c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

    UpdateRxSlotIdleState( );
 800f8a0:	f7ff ff38 	bl	800f714 <UpdateRxSlotIdleState>
}
 800f8a4:	bf00      	nop
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	20000d48 	.word	0x20000d48

0800f8ac <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f8ac:	b590      	push	{r4, r7, lr}
 800f8ae:	b0a7      	sub	sp, #156	; 0x9c
 800f8b0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f8b2:	2312      	movs	r3, #18
 800f8b4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f8b8:	4bbd      	ldr	r3, [pc, #756]	; (800fbb0 <ProcessRadioRxDone+0x304>)
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint16_t size = RxDoneParams.Size;
 800f8c0:	4bbb      	ldr	r3, [pc, #748]	; (800fbb0 <ProcessRadioRxDone+0x304>)
 800f8c2:	891b      	ldrh	r3, [r3, #8]
 800f8c4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800f8c8:	4bb9      	ldr	r3, [pc, #740]	; (800fbb0 <ProcessRadioRxDone+0x304>)
 800f8ca:	895b      	ldrh	r3, [r3, #10]
 800f8cc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    int8_t snr = RxDoneParams.Snr;
 800f8d0:	4bb7      	ldr	r3, [pc, #732]	; (800fbb0 <ProcessRadioRxDone+0x304>)
 800f8d2:	7b1b      	ldrb	r3, [r3, #12]
 800f8d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    uint8_t pktHeaderLen = 0;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    uint32_t downLinkCounter = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f8e2:	4bb4      	ldr	r3, [pc, #720]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800f8e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f8e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t multicast = 0;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f8f8:	4aaf      	ldr	r2, [pc, #700]	; (800fbb8 <ProcessRadioRxDone+0x30c>)
 800f8fa:	7813      	ldrb	r3, [r2, #0]
 800f8fc:	f36f 0300 	bfc	r3, #0, #1
 800f900:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f902:	4bae      	ldr	r3, [pc, #696]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800f90a:	4aac      	ldr	r2, [pc, #688]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f90c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800f910:	f8a2 3490 	strh.w	r3, [r2, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800f914:	4aa9      	ldr	r2, [pc, #676]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f916:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f91a:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f91e:	4ba7      	ldr	r3, [pc, #668]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f920:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800f924:	4ba5      	ldr	r3, [pc, #660]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f926:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800f92a:	4ba4      	ldr	r3, [pc, #656]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800f932:	4ba2      	ldr	r3, [pc, #648]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f934:	2200      	movs	r2, #0
 800f936:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800f93a:	4ba0      	ldr	r3, [pc, #640]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800f942:	4b9e      	ldr	r3, [pc, #632]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f944:	2200      	movs	r2, #0
 800f946:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800f94a:	4b9c      	ldr	r3, [pc, #624]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f94c:	2200      	movs	r2, #0
 800f94e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800f952:	4b9a      	ldr	r3, [pc, #616]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f954:	2200      	movs	r2, #0
 800f956:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800f95a:	4b98      	ldr	r3, [pc, #608]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f962:	4b96      	ldr	r3, [pc, #600]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f964:	2200      	movs	r2, #0
 800f966:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f96a:	4b94      	ldr	r3, [pc, #592]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800f972:	4b92      	ldr	r3, [pc, #584]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f974:	2200      	movs	r2, #0
 800f976:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f97a:	4b90      	ldr	r3, [pc, #576]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f982:	4b8e      	ldr	r3, [pc, #568]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f984:	2200      	movs	r2, #0
 800f986:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f98a:	4b8d      	ldr	r3, [pc, #564]	; (800fbc0 <ProcessRadioRxDone+0x314>)
 800f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98e:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f990:	4b8a      	ldr	r3, [pc, #552]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f992:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f996:	2b00      	cmp	r3, #0
 800f998:	d102      	bne.n	800f9a0 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f99a:	488a      	ldr	r0, [pc, #552]	; (800fbc4 <ProcessRadioRxDone+0x318>)
 800f99c:	f00d f81a 	bl	801c9d4 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f9a0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800f9aa:	f004 fccf 	bl	801434c <LoRaMacClassBRxBeacon>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d00b      	beq.n	800f9cc <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f9b4:	4a81      	ldr	r2, [pc, #516]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f9b6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800f9ba:	f8a2 3482 	strh.w	r3, [r2, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f9be:	4a7f      	ldr	r2, [pc, #508]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f9c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9c4:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
        return;
 800f9c8:	f000 bc22 	b.w	8010210 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f9cc:	4b79      	ldr	r3, [pc, #484]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800f9ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d11e      	bne.n	800fa14 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f9d6:	f004 fccc 	bl	8014372 <LoRaMacClassBIsPingExpected>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00a      	beq.n	800f9f6 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	f004 fc7d 	bl	80142e0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	f004 fc9e 	bl	8014328 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f9ec:	4b73      	ldr	r3, [pc, #460]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800f9ee:	2204      	movs	r2, #4
 800f9f0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800f9f4:	e00e      	b.n	800fa14 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f9f6:	f004 fcc3 	bl	8014380 <LoRaMacClassBIsMulticastExpected>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d009      	beq.n	800fa14 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa00:	2000      	movs	r0, #0
 800fa02:	f004 fc77 	bl	80142f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fa06:	2000      	movs	r0, #0
 800fa08:	f004 fc97 	bl	801433a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fa0c:	4b6b      	ldr	r3, [pc, #428]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800fa0e:	2205      	movs	r2, #5
 800fa10:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fa14:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
 800fa1e:	461a      	mov	r2, r3
 800fa20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa24:	4413      	add	r3, r2
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

    switch( macHdr.Bits.MType )
 800fa2c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fa30:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	3b01      	subs	r3, #1
 800fa38:	2b06      	cmp	r3, #6
 800fa3a:	f200 83bd 	bhi.w	80101b8 <ProcessRadioRxDone+0x90c>
 800fa3e:	a201      	add	r2, pc, #4	; (adr r2, 800fa44 <ProcessRadioRxDone+0x198>)
 800fa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa44:	0800fa61 	.word	0x0800fa61
 800fa48:	080101b9 	.word	0x080101b9
 800fa4c:	0800fbf5 	.word	0x0800fbf5
 800fa50:	080101b9 	.word	0x080101b9
 800fa54:	0800fbed 	.word	0x0800fbed
 800fa58:	080101b9 	.word	0x080101b9
 800fa5c:	0801014b 	.word	0x0801014b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fa60:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fa64:	2b10      	cmp	r3, #16
 800fa66:	d806      	bhi.n	800fa76 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa68:	4b54      	ldr	r3, [pc, #336]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800fa70:	f7ff fef6 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fa74:	e3cc      	b.n	8010210 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800fa76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa7a:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800fa7c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fa84:	4b4b      	ldr	r3, [pc, #300]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fa86:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d006      	beq.n	800fa9c <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa8e:	4b4b      	ldr	r3, [pc, #300]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800fa90:	2201      	movs	r2, #1
 800fa92:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800fa96:	f7ff fee3 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fa9a:	e3b9      	b.n	8010210 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800fa9c:	f7fe f890 	bl	800dbc0 <SecureElementGetJoinEui>
 800faa0:	4601      	mov	r1, r0
 800faa2:	f107 030c 	add.w	r3, r7, #12
 800faa6:	461a      	mov	r2, r3
 800faa8:	20ff      	movs	r0, #255	; 0xff
 800faaa:	f005 fe1f 	bl	80156ec <LoRaMacCryptoHandleJoinAccept>
 800faae:	4603      	mov	r3, r0
 800fab0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800fab4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f040 8085 	bne.w	800fbc8 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fabe:	7d7b      	ldrb	r3, [r7, #21]
 800fac0:	461a      	mov	r2, r3
 800fac2:	4b3c      	ldr	r3, [pc, #240]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fac4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fac8:	4b3a      	ldr	r3, [pc, #232]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800faca:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800face:	7dbb      	ldrb	r3, [r7, #22]
 800fad0:	021b      	lsls	r3, r3, #8
 800fad2:	4313      	orrs	r3, r2
 800fad4:	4a37      	ldr	r2, [pc, #220]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fad6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fada:	4b36      	ldr	r3, [pc, #216]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fadc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800fae0:	7dfb      	ldrb	r3, [r7, #23]
 800fae2:	041b      	lsls	r3, r3, #16
 800fae4:	4313      	orrs	r3, r2
 800fae6:	4a33      	ldr	r2, [pc, #204]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fae8:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800faec:	69bb      	ldr	r3, [r7, #24]
 800faee:	4a31      	ldr	r2, [pc, #196]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800faf0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800faf4:	7f3b      	ldrb	r3, [r7, #28]
 800faf6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	461a      	mov	r2, r3
 800fafe:	4b2d      	ldr	r3, [pc, #180]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb04:	7f3b      	ldrb	r3, [r7, #28]
 800fb06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	4b29      	ldr	r3, [pc, #164]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb14:	7f3b      	ldrb	r3, [r7, #28]
 800fb16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	4b25      	ldr	r3, [pc, #148]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fb24:	7f7b      	ldrb	r3, [r7, #29]
 800fb26:	461a      	mov	r2, r3
 800fb28:	4b22      	ldr	r3, [pc, #136]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb2a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fb2c:	4b21      	ldr	r3, [pc, #132]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d102      	bne.n	800fb3a <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fb34:	4b1f      	ldr	r3, [pc, #124]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb36:	2201      	movs	r2, #1
 800fb38:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fb3a:	4b1e      	ldr	r3, [pc, #120]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb42:	fb02 f303 	mul.w	r3, r2, r3
 800fb46:	4a1b      	ldr	r2, [pc, #108]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb48:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fb4a:	4b1a      	ldr	r3, [pc, #104]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb4e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800fb52:	4a18      	ldr	r2, [pc, #96]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb54:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fb56:	4b17      	ldr	r3, [pc, #92]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fb5e:	f107 030c 	add.w	r3, r7, #12
 800fb62:	3312      	adds	r3, #18
 800fb64:	677b      	str	r3, [r7, #116]	; 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fb66:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	3b11      	subs	r3, #17
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800fb74:	4b11      	ldr	r3, [pc, #68]	; (800fbbc <ProcessRadioRxDone+0x310>)
 800fb76:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800fb7a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fb7e:	4b0d      	ldr	r3, [pc, #52]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb84:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f006 fb7c 	bl	8016288 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fb90:	4b08      	ldr	r3, [pc, #32]	; (800fbb4 <ProcessRadioRxDone+0x308>)
 800fb92:	2202      	movs	r2, #2
 800fb94:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fb98:	2001      	movs	r0, #1
 800fb9a:	f005 f8cf 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d01b      	beq.n	800fbdc <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800fba4:	2101      	movs	r1, #1
 800fba6:	2000      	movs	r0, #0
 800fba8:	f005 f83c 	bl	8014c24 <LoRaMacConfirmQueueSetStatus>
 800fbac:	e016      	b.n	800fbdc <ProcessRadioRxDone+0x330>
 800fbae:	bf00      	nop
 800fbb0:	20001df8 	.word	0x20001df8
 800fbb4:	20001268 	.word	0x20001268
 800fbb8:	20001df0 	.word	0x20001df0
 800fbbc:	20000d48 	.word	0x20000d48
 800fbc0:	0801dea4 	.word	0x0801dea4
 800fbc4:	200010e0 	.word	0x200010e0
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fbc8:	2001      	movs	r0, #1
 800fbca:	f005 f8b7 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d003      	beq.n	800fbdc <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	2007      	movs	r0, #7
 800fbd8:	f005 f824 	bl	8014c24 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800fbdc:	4ab9      	ldr	r2, [pc, #740]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fbde:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fbe2:	f043 0308 	orr.w	r3, r3, #8
 800fbe6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800fbea:	e2ec      	b.n	80101c6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fbec:	4bb5      	ldr	r3, [pc, #724]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fbf4:	4bb4      	ldr	r3, [pc, #720]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fbf6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800fbfa:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fbfe:	4bb1      	ldr	r3, [pc, #708]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fc00:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800fc04:	b25b      	sxtb	r3, r3
 800fc06:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fc0a:	230d      	movs	r3, #13
 800fc0c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fc10:	4bad      	ldr	r3, [pc, #692]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fc12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d002      	beq.n	800fc20 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fc1a:	230e      	movs	r3, #14
 800fc1c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc20:	4ba9      	ldr	r3, [pc, #676]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fc22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc26:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f006 fad9 	bl	80161e4 <RegionGetPhyParam>
 800fc32:	4603      	mov	r3, r0
 800fc34:	667b      	str	r3, [r7, #100]	; 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fc36:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fc3a:	3b0d      	subs	r3, #13
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	b21b      	sxth	r3, r3
 800fc40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc44:	b21a      	sxth	r2, r3
 800fc46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc48:	b21b      	sxth	r3, r3
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	dc03      	bgt.n	800fc56 <ProcessRadioRxDone+0x3aa>
 800fc4e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fc52:	2b0b      	cmp	r3, #11
 800fc54:	d806      	bhi.n	800fc64 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc56:	4b9b      	ldr	r3, [pc, #620]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800fc5e:	f7ff fdff 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fc62:	e2d5      	b.n	8010210 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800fc64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc68:	637b      	str	r3, [r7, #52]	; 0x34
            macMsgData.BufSize = size;
 800fc6a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fc74:	4b95      	ldr	r3, [pc, #596]	; (800fecc <ProcessRadioRxDone+0x620>)
 800fc76:	65bb      	str	r3, [r7, #88]	; 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fc78:	23ff      	movs	r3, #255	; 0xff
 800fc7a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fc7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fc82:	4618      	mov	r0, r3
 800fc84:	f006 f831 	bl	8015cea <LoRaMacParserData>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d006      	beq.n	800fc9c <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc8e:	4b8d      	ldr	r3, [pc, #564]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fc90:	2201      	movs	r2, #1
 800fc92:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800fc96:	f7ff fde3 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fc9a:	e2b9      	b.n	8010210 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc9c:	4b8a      	ldr	r3, [pc, #552]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fc9e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d132      	bne.n	800fd0c <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800fca6:	f004 fb64 	bl	8014372 <LoRaMacClassBIsPingExpected>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d014      	beq.n	800fcda <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	f004 fb15 	bl	80142e0 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	f004 fb36 	bl	8014328 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fcbc:	4b81      	ldr	r3, [pc, #516]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fcbe:	2204      	movs	r2, #4
 800fcc0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fcc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcc6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fcca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	f004 fbd6 	bl	8014484 <LoRaMacClassBSetFPendingBit>
 800fcd8:	e018      	b.n	800fd0c <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fcda:	f004 fb51 	bl	8014380 <LoRaMacClassBIsMulticastExpected>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d013      	beq.n	800fd0c <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fce4:	2000      	movs	r0, #0
 800fce6:	f004 fb05 	bl	80142f4 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fcea:	2000      	movs	r0, #0
 800fcec:	f004 fb25 	bl	801433a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fcf0:	4b74      	ldr	r3, [pc, #464]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fcf2:	2205      	movs	r2, #5
 800fcf4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fcf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcfa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fcfe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	4619      	mov	r1, r3
 800fd06:	4610      	mov	r0, r2
 800fd08:	f004 fbbc 	bl	8014484 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd0e:	4a6d      	ldr	r2, [pc, #436]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fd10:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fd14:	1dba      	adds	r2, r7, #6
 800fd16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f002 fd13 	bl	8012748 <DetermineFrameType>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d006      	beq.n	800fd36 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd28:	4b66      	ldr	r3, [pc, #408]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800fd30:	f7ff fd96 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fd34:	e26c      	b.n	8010210 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fd36:	2300      	movs	r3, #0
 800fd38:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            downLinkCounter = 0;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd40:	2300      	movs	r3, #0
 800fd42:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800fd46:	e049      	b.n	800fddc <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd48:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800fd4c:	4a5e      	ldr	r2, [pc, #376]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fd4e:	212c      	movs	r1, #44	; 0x2c
 800fd50:	fb01 f303 	mul.w	r3, r1, r3
 800fd54:	4413      	add	r3, r2
 800fd56:	33dc      	adds	r3, #220	; 0xdc
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d138      	bne.n	800fdd2 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fd60:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800fd64:	4a58      	ldr	r2, [pc, #352]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fd66:	212c      	movs	r1, #44	; 0x2c
 800fd68:	fb01 f303 	mul.w	r3, r1, r3
 800fd6c:	4413      	add	r3, r2
 800fd6e:	33da      	adds	r3, #218	; 0xda
 800fd70:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d02d      	beq.n	800fdd2 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800fd76:	2301      	movs	r3, #1
 800fd78:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800fd7c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800fd80:	4a51      	ldr	r2, [pc, #324]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fd82:	212c      	movs	r1, #44	; 0x2c
 800fd84:	fb01 f303 	mul.w	r3, r1, r3
 800fd88:	4413      	add	r3, r2
 800fd8a:	33db      	adds	r3, #219	; 0xdb
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fd92:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800fd96:	4a4c      	ldr	r2, [pc, #304]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fd98:	212c      	movs	r1, #44	; 0x2c
 800fd9a:	fb01 f303 	mul.w	r3, r1, r3
 800fd9e:	4413      	add	r3, r2
 800fda0:	33f8      	adds	r3, #248	; 0xf8
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800fda8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800fdac:	4a46      	ldr	r2, [pc, #280]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fdae:	212c      	movs	r1, #44	; 0x2c
 800fdb0:	fb01 f303 	mul.w	r3, r1, r3
 800fdb4:	4413      	add	r3, r2
 800fdb6:	33dc      	adds	r3, #220	; 0xdc
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fdbe:	4b42      	ldr	r3, [pc, #264]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fdc0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	d10e      	bne.n	800fde6 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fdc8:	4b3e      	ldr	r3, [pc, #248]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fdca:	2203      	movs	r2, #3
 800fdcc:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    }
                    break;
 800fdd0:	e009      	b.n	800fde6 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fdd2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800fddc:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d0b1      	beq.n	800fd48 <ProcessRadioRxDone+0x49c>
 800fde4:	e000      	b.n	800fde8 <ProcessRadioRxDone+0x53c>
                    break;
 800fde6:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fde8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d117      	bne.n	800fe20 <ProcessRadioRxDone+0x574>
 800fdf0:	79bb      	ldrb	r3, [r7, #6]
 800fdf2:	2b03      	cmp	r3, #3
 800fdf4:	d10d      	bne.n	800fe12 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fdf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fdfa:	f003 0320 	and.w	r3, r3, #32
 800fdfe:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d106      	bne.n	800fe12 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800fe04:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fe08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe0c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d006      	beq.n	800fe20 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe12:	4b2c      	ldr	r3, [pc, #176]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fe14:	2201      	movs	r2, #1
 800fe16:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800fe1a:	f7ff fd21 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fe1e:	e1f7      	b.n	8010210 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800fe20:	79b9      	ldrb	r1, [r7, #6]
 800fe22:	4c29      	ldr	r4, [pc, #164]	; (800fec8 <ProcessRadioRxDone+0x61c>)
 800fe24:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fe28:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800fe2c:	f107 0308 	add.w	r3, r7, #8
 800fe30:	9301      	str	r3, [sp, #4]
 800fe32:	1dfb      	adds	r3, r7, #7
 800fe34:	9300      	str	r3, [sp, #0]
 800fe36:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800fe3a:	f000 fee7 	bl	8010c0c <GetFCntDown>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fe44:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d017      	beq.n	800fe7c <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fe4c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800fe50:	2b07      	cmp	r3, #7
 800fe52:	d104      	bne.n	800fe5e <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fe54:	4b1b      	ldr	r3, [pc, #108]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fe56:	2208      	movs	r2, #8
 800fe58:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800fe5c:	e003      	b.n	800fe66 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe5e:	4b19      	ldr	r3, [pc, #100]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fe60:	2201      	movs	r2, #1
 800fe62:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	4a16      	ldr	r2, [pc, #88]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fe6a:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	4a14      	ldr	r2, [pc, #80]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800fe72:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800fe76:	f7ff fcf3 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fe7a:	e1c9      	b.n	8010210 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800fe7c:	79fa      	ldrb	r2, [r7, #7]
 800fe7e:	68b9      	ldr	r1, [r7, #8]
 800fe80:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800fe84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fe88:	9300      	str	r3, [sp, #0]
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fe90:	f005 fd78 	bl	8015984 <LoRaMacCryptoUnsecureMessage>
 800fe94:	4603      	mov	r3, r0
 800fe96:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fe9a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d016      	beq.n	800fed0 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fea2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800fea6:	2b02      	cmp	r3, #2
 800fea8:	d104      	bne.n	800feb4 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800feaa:	4b06      	ldr	r3, [pc, #24]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800feac:	220a      	movs	r2, #10
 800feae:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800feb2:	e003      	b.n	800febc <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800feb4:	4b03      	ldr	r3, [pc, #12]	; (800fec4 <ProcessRadioRxDone+0x618>)
 800feb6:	220b      	movs	r2, #11
 800feb8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                PrepareRxDoneAbort( );
 800febc:	f7ff fcd0 	bl	800f860 <PrepareRxDoneAbort>
                return;
 800fec0:	e1a6      	b.n	8010210 <ProcessRadioRxDone+0x964>
 800fec2:	bf00      	nop
 800fec4:	20000d48 	.word	0x20000d48
 800fec8:	20001268 	.word	0x20001268
 800fecc:	20000f80 	.word	0x20000f80
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fed0:	4bb5      	ldr	r3, [pc, #724]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800fed8:	4ab3      	ldr	r2, [pc, #716]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800feda:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800fede:	f882 3426 	strb.w	r3, [r2, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800fee2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fee6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800feea:	b2db      	uxtb	r3, r3
 800feec:	461a      	mov	r2, r3
 800feee:	4bae      	ldr	r3, [pc, #696]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800fef0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800fef4:	4bac      	ldr	r3, [pc, #688]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800fef6:	2200      	movs	r2, #0
 800fef8:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800fefc:	4baa      	ldr	r3, [pc, #680]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	4aa8      	ldr	r2, [pc, #672]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff08:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	4aa6      	ldr	r2, [pc, #664]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff10:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ff18:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff1c:	b2db      	uxtb	r3, r3
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	bf14      	ite	ne
 800ff22:	2301      	movne	r3, #1
 800ff24:	2300      	moveq	r3, #0
 800ff26:	b2da      	uxtb	r2, r3
 800ff28:	4b9f      	ldr	r3, [pc, #636]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff2a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ff2e:	4b9e      	ldr	r3, [pc, #632]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff30:	2200      	movs	r2, #0
 800ff32:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ff3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	bf14      	ite	ne
 800ff44:	2301      	movne	r3, #1
 800ff46:	2300      	moveq	r3, #0
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	4b97      	ldr	r3, [pc, #604]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff4c:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff50:	4b95      	ldr	r3, [pc, #596]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff52:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d004      	beq.n	800ff64 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ff5a:	4b93      	ldr	r3, [pc, #588]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff5c:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d106      	bne.n	800ff72 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ff64:	4b91      	ldr	r3, [pc, #580]	; (80101ac <ProcessRadioRxDone+0x900>)
 800ff66:	2200      	movs	r2, #0
 800ff68:	629a      	str	r2, [r3, #40]	; 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800ff6a:	4b90      	ldr	r3, [pc, #576]	; (80101ac <ProcessRadioRxDone+0x900>)
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ff72:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d104      	bne.n	800ff84 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ff7a:	4b8b      	ldr	r3, [pc, #556]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ff7c:	2202      	movs	r2, #2
 800ff7e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800ff82:	e034      	b.n	800ffee <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ff84:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800ff88:	f023 031f 	bic.w	r3, r3, #31
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	2ba0      	cmp	r3, #160	; 0xa0
 800ff90:	d125      	bne.n	800ffde <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ff92:	4b86      	ldr	r3, [pc, #536]	; (80101ac <ProcessRadioRxDone+0x900>)
 800ff94:	2201      	movs	r2, #1
 800ff96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ff9a:	4b84      	ldr	r3, [pc, #528]	; (80101ac <ProcessRadioRxDone+0x900>)
 800ff9c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d102      	bne.n	800ffaa <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ffa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffa6:	4a81      	ldr	r2, [pc, #516]	; (80101ac <ProcessRadioRxDone+0x900>)
 800ffa8:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ffaa:	4b7f      	ldr	r3, [pc, #508]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffb2:	4b7d      	ldr	r3, [pc, #500]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ffb4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d018      	beq.n	800ffee <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ffbc:	4b7a      	ldr	r3, [pc, #488]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ffbe:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d013      	beq.n	800ffee <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ffc6:	4b79      	ldr	r3, [pc, #484]	; (80101ac <ProcessRadioRxDone+0x900>)
 800ffc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffcc:	4a76      	ldr	r2, [pc, #472]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ffce:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ffd2:	4b77      	ldr	r3, [pc, #476]	; (80101b0 <ProcessRadioRxDone+0x904>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a74      	ldr	r2, [pc, #464]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ffd8:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 800ffdc:	e007      	b.n	800ffee <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ffde:	4b73      	ldr	r3, [pc, #460]	; (80101ac <ProcessRadioRxDone+0x900>)
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ffe6:	4b70      	ldr	r3, [pc, #448]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ffee:	4b6e      	ldr	r3, [pc, #440]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800fff0:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800fff4:	4a6c      	ldr	r2, [pc, #432]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 800fff6:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 800fffa:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800fffe:	4618      	mov	r0, r3
 8010000:	f001 ff88 	bl	8011f14 <RemoveMacCommands>

            switch( fType )
 8010004:	79bb      	ldrb	r3, [r7, #6]
 8010006:	2b03      	cmp	r3, #3
 8010008:	d873      	bhi.n	80100f2 <ProcessRadioRxDone+0x846>
 801000a:	a201      	add	r2, pc, #4	; (adr r2, 8010010 <ProcessRadioRxDone+0x764>)
 801000c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010010:	08010021 	.word	0x08010021
 8010014:	08010071 	.word	0x08010071
 8010018:	080100a7 	.word	0x080100a7
 801001c:	080100cd 	.word	0x080100cd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010020:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010024:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010028:	b2db      	uxtb	r3, r3
 801002a:	461c      	mov	r4, r3
 801002c:	4b5e      	ldr	r3, [pc, #376]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 801002e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8010032:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 8010036:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801003a:	f102 0010 	add.w	r0, r2, #16
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	460b      	mov	r3, r1
 8010042:	4622      	mov	r2, r4
 8010044:	2100      	movs	r1, #0
 8010046:	f000 ff45 	bl	8010ed4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801004a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801004e:	4b56      	ldr	r3, [pc, #344]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010050:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010056:	4a54      	ldr	r2, [pc, #336]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010058:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801005c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8010060:	4b51      	ldr	r3, [pc, #324]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010062:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8010066:	4b50      	ldr	r3, [pc, #320]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010068:	2201      	movs	r2, #1
 801006a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 801006e:	e047      	b.n	8010100 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010070:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010074:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010078:	b2db      	uxtb	r3, r3
 801007a:	461c      	mov	r4, r3
 801007c:	4b4a      	ldr	r3, [pc, #296]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 801007e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8010082:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 8010086:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801008a:	f102 0010 	add.w	r0, r2, #16
 801008e:	9300      	str	r3, [sp, #0]
 8010090:	460b      	mov	r3, r1
 8010092:	4622      	mov	r2, r4
 8010094:	2100      	movs	r1, #0
 8010096:	f000 ff1d 	bl	8010ed4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801009a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801009e:	4b42      	ldr	r3, [pc, #264]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100a0:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 80100a4:	e02c      	b.n	8010100 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80100a6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80100a8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80100ac:	4b3e      	ldr	r3, [pc, #248]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100ae:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80100b2:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	460b      	mov	r3, r1
 80100ba:	2100      	movs	r1, #0
 80100bc:	f000 ff0a 	bl	8010ed4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80100c0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80100c4:	4b38      	ldr	r3, [pc, #224]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100c6:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 80100ca:	e019      	b.n	8010100 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80100cc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80100d0:	4b35      	ldr	r3, [pc, #212]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100d2:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80100d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100d8:	4a33      	ldr	r2, [pc, #204]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100da:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80100de:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80100e2:	4b31      	ldr	r3, [pc, #196]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100e4:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 80100e8:	4b2f      	ldr	r3, [pc, #188]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100ea:	2201      	movs	r2, #1
 80100ec:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 80100f0:	e006      	b.n	8010100 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80100f2:	4b2d      	ldr	r3, [pc, #180]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 80100f4:	2201      	movs	r2, #1
 80100f6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 80100fa:	f7ff fbb1 	bl	800f860 <PrepareRxDoneAbort>
                    break;
 80100fe:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8010100:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8010104:	2be0      	cmp	r3, #224	; 0xe0
 8010106:	d118      	bne.n	801013a <ProcessRadioRxDone+0x88e>
 8010108:	4b28      	ldr	r3, [pc, #160]	; (80101ac <ProcessRadioRxDone+0x900>)
 801010a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 801010e:	f083 0301 	eor.w	r3, r3, #1
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b00      	cmp	r3, #0
 8010116:	d010      	beq.n	801013a <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010118:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801011c:	4b22      	ldr	r3, [pc, #136]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 801011e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 8010122:	4b21      	ldr	r3, [pc, #132]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010124:	2200      	movs	r2, #0
 8010126:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 801012a:	4b1f      	ldr	r3, [pc, #124]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 801012c:	2200      	movs	r2, #0
 801012e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 8010132:	4b1d      	ldr	r3, [pc, #116]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010134:	2200      	movs	r2, #0
 8010136:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801013a:	4a1b      	ldr	r2, [pc, #108]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 801013c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010140:	f043 0302 	orr.w	r3, r3, #2
 8010144:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

            break;
 8010148:	e03d      	b.n	80101c6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801014a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 801014e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010152:	18d1      	adds	r1, r2, r3
 8010154:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8010158:	b29b      	uxth	r3, r3
 801015a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801015e:	1ad3      	subs	r3, r2, r3
 8010160:	b29b      	uxth	r3, r3
 8010162:	461a      	mov	r2, r3
 8010164:	4813      	ldr	r0, [pc, #76]	; (80101b4 <ProcessRadioRxDone+0x908>)
 8010166:	f008 faea 	bl	801873e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801016a:	4b0f      	ldr	r3, [pc, #60]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 801016c:	2203      	movs	r2, #3
 801016e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010172:	4b0d      	ldr	r3, [pc, #52]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010174:	2200      	movs	r2, #0
 8010176:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801017a:	4b0b      	ldr	r3, [pc, #44]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 801017c:	4a0d      	ldr	r2, [pc, #52]	; (80101b4 <ProcessRadioRxDone+0x908>)
 801017e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010182:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010186:	b2da      	uxtb	r2, r3
 8010188:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	b2da      	uxtb	r2, r3
 8010190:	4b05      	ldr	r3, [pc, #20]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010192:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010196:	4a04      	ldr	r2, [pc, #16]	; (80101a8 <ProcessRadioRxDone+0x8fc>)
 8010198:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801019c:	f043 0302 	orr.w	r3, r3, #2
 80101a0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 80101a4:	e00f      	b.n	80101c6 <ProcessRadioRxDone+0x91a>
 80101a6:	bf00      	nop
 80101a8:	20000d48 	.word	0x20000d48
 80101ac:	20001268 	.word	0x20001268
 80101b0:	20001df8 	.word	0x20001df8
 80101b4:	20000f80 	.word	0x20000f80
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80101b8:	4b17      	ldr	r3, [pc, #92]	; (8010218 <ProcessRadioRxDone+0x96c>)
 80101ba:	2201      	movs	r2, #1
 80101bc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 80101c0:	f7ff fb4e 	bl	800f860 <PrepareRxDoneAbort>
            break;
 80101c4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80101c6:	4b14      	ldr	r3, [pc, #80]	; (8010218 <ProcessRadioRxDone+0x96c>)
 80101c8:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d004      	beq.n	80101da <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80101d0:	4b11      	ldr	r3, [pc, #68]	; (8010218 <ProcessRadioRxDone+0x96c>)
 80101d2:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d10c      	bne.n	80101f4 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 80101da:	4b0f      	ldr	r3, [pc, #60]	; (8010218 <ProcessRadioRxDone+0x96c>)
 80101dc:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d007      	beq.n	80101f4 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 80101e4:	4b0c      	ldr	r3, [pc, #48]	; (8010218 <ProcessRadioRxDone+0x96c>)
 80101e6:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 80101ee:	2000      	movs	r0, #0
 80101f0:	f000 fce4 	bl	8010bbc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80101f4:	4b08      	ldr	r3, [pc, #32]	; (8010218 <ProcessRadioRxDone+0x96c>)
 80101f6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80101fa:	2b02      	cmp	r3, #2
 80101fc:	d006      	beq.n	801020c <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80101fe:	4a06      	ldr	r2, [pc, #24]	; (8010218 <ProcessRadioRxDone+0x96c>)
 8010200:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010204:	f043 0320 	orr.w	r3, r3, #32
 8010208:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801020c:	f7ff fa82 	bl	800f714 <UpdateRxSlotIdleState>
}
 8010210:	3794      	adds	r7, #148	; 0x94
 8010212:	46bd      	mov	sp, r7
 8010214:	bd90      	pop	{r4, r7, pc}
 8010216:	bf00      	nop
 8010218:	20000d48 	.word	0x20000d48

0801021c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010220:	4b11      	ldr	r3, [pc, #68]	; (8010268 <ProcessRadioTxTimeout+0x4c>)
 8010222:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010226:	2b02      	cmp	r3, #2
 8010228:	d002      	beq.n	8010230 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801022a:	4b10      	ldr	r3, [pc, #64]	; (801026c <ProcessRadioTxTimeout+0x50>)
 801022c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801022e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010230:	f7ff fa70 	bl	800f714 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010234:	4b0e      	ldr	r3, [pc, #56]	; (8010270 <ProcessRadioTxTimeout+0x54>)
 8010236:	2202      	movs	r2, #2
 8010238:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 801023c:	2002      	movs	r0, #2
 801023e:	f004 fd49 	bl	8014cd4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8010242:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <ProcessRadioTxTimeout+0x54>)
 8010244:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8010248:	2b00      	cmp	r3, #0
 801024a:	d003      	beq.n	8010254 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 801024c:	4b08      	ldr	r3, [pc, #32]	; (8010270 <ProcessRadioTxTimeout+0x54>)
 801024e:	2201      	movs	r2, #1
 8010250:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010254:	4a06      	ldr	r2, [pc, #24]	; (8010270 <ProcessRadioTxTimeout+0x54>)
 8010256:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801025a:	f043 0320 	orr.w	r3, r3, #32
 801025e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 8010262:	bf00      	nop
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	20001268 	.word	0x20001268
 801026c:	0801dea4 	.word	0x0801dea4
 8010270:	20000d48 	.word	0x20000d48

08010274 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	4603      	mov	r3, r0
 801027c:	460a      	mov	r2, r1
 801027e:	71fb      	strb	r3, [r7, #7]
 8010280:	4613      	mov	r3, r2
 8010282:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8010284:	2300      	movs	r3, #0
 8010286:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010288:	4b3d      	ldr	r3, [pc, #244]	; (8010380 <HandleRadioRxErrorTimeout+0x10c>)
 801028a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801028e:	2b02      	cmp	r3, #2
 8010290:	d002      	beq.n	8010298 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8010292:	4b3c      	ldr	r3, [pc, #240]	; (8010384 <HandleRadioRxErrorTimeout+0x110>)
 8010294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010296:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010298:	f004 f864 	bl	8014364 <LoRaMacClassBIsBeaconExpected>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d007      	beq.n	80102b2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80102a2:	2002      	movs	r0, #2
 80102a4:	f004 f812 	bl	80142cc <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80102a8:	2000      	movs	r0, #0
 80102aa:	f004 f834 	bl	8014316 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80102ae:	2301      	movs	r3, #1
 80102b0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80102b2:	4b33      	ldr	r3, [pc, #204]	; (8010380 <HandleRadioRxErrorTimeout+0x10c>)
 80102b4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d119      	bne.n	80102f0 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80102bc:	f004 f859 	bl	8014372 <LoRaMacClassBIsPingExpected>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d007      	beq.n	80102d6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80102c6:	2000      	movs	r0, #0
 80102c8:	f004 f80a 	bl	80142e0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80102cc:	2000      	movs	r0, #0
 80102ce:	f004 f82b 	bl	8014328 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80102d2:	2301      	movs	r3, #1
 80102d4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80102d6:	f004 f853 	bl	8014380 <LoRaMacClassBIsMulticastExpected>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d007      	beq.n	80102f0 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80102e0:	2000      	movs	r0, #0
 80102e2:	f004 f807 	bl	80142f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80102e6:	2000      	movs	r0, #0
 80102e8:	f004 f827 	bl	801433a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80102ec:	2301      	movs	r3, #1
 80102ee:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80102f0:	7bfb      	ldrb	r3, [r7, #15]
 80102f2:	f083 0301 	eor.w	r3, r3, #1
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d03b      	beq.n	8010374 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80102fc:	4b22      	ldr	r3, [pc, #136]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 80102fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010302:	2b00      	cmp	r3, #0
 8010304:	d122      	bne.n	801034c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010306:	4b20      	ldr	r3, [pc, #128]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 8010308:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 801030c:	2b00      	cmp	r3, #0
 801030e:	d003      	beq.n	8010318 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010310:	4a1d      	ldr	r2, [pc, #116]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 8010312:	79fb      	ldrb	r3, [r7, #7]
 8010314:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010318:	79fb      	ldrb	r3, [r7, #7]
 801031a:	4618      	mov	r0, r3
 801031c:	f004 fcda 	bl	8014cd4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010320:	4b17      	ldr	r3, [pc, #92]	; (8010380 <HandleRadioRxErrorTimeout+0x10c>)
 8010322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010324:	4618      	mov	r0, r3
 8010326:	f00c fc81 	bl	801cc2c <UTIL_TIMER_GetElapsedTime>
 801032a:	4602      	mov	r2, r0
 801032c:	4b16      	ldr	r3, [pc, #88]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 801032e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8010332:	429a      	cmp	r2, r3
 8010334:	d31e      	bcc.n	8010374 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010336:	4815      	ldr	r0, [pc, #84]	; (801038c <HandleRadioRxErrorTimeout+0x118>)
 8010338:	f00c fb4c 	bl	801c9d4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801033c:	4a12      	ldr	r2, [pc, #72]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 801033e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010342:	f043 0320 	orr.w	r3, r3, #32
 8010346:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 801034a:	e013      	b.n	8010374 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 801034c:	4b0e      	ldr	r3, [pc, #56]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 801034e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8010352:	2b00      	cmp	r3, #0
 8010354:	d003      	beq.n	801035e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010356:	4a0c      	ldr	r2, [pc, #48]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 8010358:	79bb      	ldrb	r3, [r7, #6]
 801035a:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801035e:	79bb      	ldrb	r3, [r7, #6]
 8010360:	4618      	mov	r0, r3
 8010362:	f004 fcb7 	bl	8014cd4 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8010366:	4a08      	ldr	r2, [pc, #32]	; (8010388 <HandleRadioRxErrorTimeout+0x114>)
 8010368:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801036c:	f043 0320 	orr.w	r3, r3, #32
 8010370:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8010374:	f7ff f9ce 	bl	800f714 <UpdateRxSlotIdleState>
}
 8010378:	bf00      	nop
 801037a:	3710      	adds	r7, #16
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	20001268 	.word	0x20001268
 8010384:	0801dea4 	.word	0x0801dea4
 8010388:	20000d48 	.word	0x20000d48
 801038c:	200010e0 	.word	0x200010e0

08010390 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8010394:	2106      	movs	r1, #6
 8010396:	2005      	movs	r0, #5
 8010398:	f7ff ff6c 	bl	8010274 <HandleRadioRxErrorTimeout>
}
 801039c:	bf00      	nop
 801039e:	bd80      	pop	{r7, pc}

080103a0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80103a4:	2104      	movs	r1, #4
 80103a6:	2003      	movs	r0, #3
 80103a8:	f7ff ff64 	bl	8010274 <HandleRadioRxErrorTimeout>
}
 80103ac:	bf00      	nop
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103b6:	f3ef 8310 	mrs	r3, PRIMASK
 80103ba:	607b      	str	r3, [r7, #4]
  return(result);
 80103bc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80103be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80103c0:	b672      	cpsid	i
}
 80103c2:	bf00      	nop
    events = LoRaMacRadioEvents;
 80103c4:	4b1d      	ldr	r3, [pc, #116]	; (801043c <LoRaMacHandleIrqEvents+0x8c>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80103ca:	4b1c      	ldr	r3, [pc, #112]	; (801043c <LoRaMacHandleIrqEvents+0x8c>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	f383 8810 	msr	PRIMASK, r3
}
 80103da:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d027      	beq.n	8010432 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80103e2:	783b      	ldrb	r3, [r7, #0]
 80103e4:	f003 0320 	and.w	r3, r3, #32
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80103ee:	f7ff f9a9 	bl	800f744 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80103f2:	783b      	ldrb	r3, [r7, #0]
 80103f4:	f003 0310 	and.w	r3, r3, #16
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80103fe:	f7ff fa55 	bl	800f8ac <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8010402:	783b      	ldrb	r3, [r7, #0]
 8010404:	f003 0308 	and.w	r3, r3, #8
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 801040e:	f7ff ff05 	bl	801021c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8010412:	783b      	ldrb	r3, [r7, #0]
 8010414:	f003 0304 	and.w	r3, r3, #4
 8010418:	b2db      	uxtb	r3, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	d001      	beq.n	8010422 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 801041e:	f7ff ffb7 	bl	8010390 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010422:	783b      	ldrb	r3, [r7, #0]
 8010424:	f003 0302 	and.w	r3, r3, #2
 8010428:	b2db      	uxtb	r3, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	d001      	beq.n	8010432 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801042e:	f7ff ffb7 	bl	80103a0 <ProcessRadioRxTimeout>
        }
    }
}
 8010432:	bf00      	nop
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	20001df0 	.word	0x20001df0

08010440 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010440:	b480      	push	{r7}
 8010442:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8010444:	4b0c      	ldr	r3, [pc, #48]	; (8010478 <LoRaMacIsBusy+0x38>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	f003 0301 	and.w	r3, r3, #1
 801044c:	b2db      	uxtb	r3, r3
 801044e:	2b00      	cmp	r3, #0
 8010450:	d001      	beq.n	8010456 <LoRaMacIsBusy+0x16>
    {
        return true;
 8010452:	2301      	movs	r3, #1
 8010454:	e00c      	b.n	8010470 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010456:	4b09      	ldr	r3, [pc, #36]	; (801047c <LoRaMacIsBusy+0x3c>)
 8010458:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801045c:	2b00      	cmp	r3, #0
 801045e:	d106      	bne.n	801046e <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8010460:	4b06      	ldr	r3, [pc, #24]	; (801047c <LoRaMacIsBusy+0x3c>)
 8010462:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010466:	2b01      	cmp	r3, #1
 8010468:	d101      	bne.n	801046e <LoRaMacIsBusy+0x2e>
    {
        return false;
 801046a:	2300      	movs	r3, #0
 801046c:	e000      	b.n	8010470 <LoRaMacIsBusy+0x30>
    }
    return true;
 801046e:	2301      	movs	r3, #1
}
 8010470:	4618      	mov	r0, r3
 8010472:	46bd      	mov	sp, r7
 8010474:	bc80      	pop	{r7}
 8010476:	4770      	bx	lr
 8010478:	20001df0 	.word	0x20001df0
 801047c:	20000d48 	.word	0x20000d48

08010480 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010480:	b480      	push	{r7}
 8010482:	b083      	sub	sp, #12
 8010484:	af00      	add	r7, sp, #0
 8010486:	4603      	mov	r3, r0
 8010488:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801048a:	4a04      	ldr	r2, [pc, #16]	; (801049c <LoRaMacEnableRequests+0x1c>)
 801048c:	79fb      	ldrb	r3, [r7, #7]
 801048e:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
}
 8010492:	bf00      	nop
 8010494:	370c      	adds	r7, #12
 8010496:	46bd      	mov	sp, r7
 8010498:	bc80      	pop	{r7}
 801049a:	4770      	bx	lr
 801049c:	20000d48 	.word	0x20000d48

080104a0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80104a6:	4b2c      	ldr	r3, [pc, #176]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 80104a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80104ac:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80104ae:	4b2a      	ldr	r3, [pc, #168]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 80104b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d14a      	bne.n	801054e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80104b8:	4b27      	ldr	r3, [pc, #156]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 80104ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80104be:	f003 0301 	and.w	r3, r3, #1
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d006      	beq.n	80104d6 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80104c8:	4a23      	ldr	r2, [pc, #140]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 80104ca:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80104ce:	f36f 0300 	bfc	r3, #0, #1
 80104d2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80104d6:	4b20      	ldr	r3, [pc, #128]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 80104d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80104dc:	f003 0304 	and.w	r3, r3, #4
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d006      	beq.n	80104f4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80104e6:	4a1c      	ldr	r2, [pc, #112]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 80104e8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80104ec:	f36f 0382 	bfc	r3, #2, #1
 80104f0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80104f4:	2001      	movs	r0, #1
 80104f6:	f7ff ffc3 	bl	8010480 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80104fa:	793b      	ldrb	r3, [r7, #4]
 80104fc:	f003 0301 	and.w	r3, r3, #1
 8010500:	b2db      	uxtb	r3, r3
 8010502:	2b00      	cmp	r3, #0
 8010504:	d005      	beq.n	8010512 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010506:	4b14      	ldr	r3, [pc, #80]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 8010508:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4813      	ldr	r0, [pc, #76]	; (801055c <LoRaMacHandleRequestEvents+0xbc>)
 8010510:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010512:	793b      	ldrb	r3, [r7, #4]
 8010514:	f003 0304 	and.w	r3, r3, #4
 8010518:	b2db      	uxtb	r3, r3
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00e      	beq.n	801053c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801051e:	4810      	ldr	r0, [pc, #64]	; (8010560 <LoRaMacHandleRequestEvents+0xc0>)
 8010520:	f004 fc26 	bl	8014d70 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010524:	f004 fc70 	bl	8014e08 <LoRaMacConfirmQueueGetCnt>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d006      	beq.n	801053c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801052e:	4a0a      	ldr	r2, [pc, #40]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 8010530:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010534:	f043 0304 	orr.w	r3, r3, #4
 8010538:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 801053c:	f003 ff3e 	bl	80143bc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010540:	4a05      	ldr	r2, [pc, #20]	; (8010558 <LoRaMacHandleRequestEvents+0xb8>)
 8010542:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010546:	f36f 1345 	bfc	r3, #5, #1
 801054a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
}
 801054e:	bf00      	nop
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	20000d48 	.word	0x20000d48
 801055c:	2000118c 	.word	0x2000118c
 8010560:	200011a0 	.word	0x200011a0

08010564 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801056a:	4b07      	ldr	r3, [pc, #28]	; (8010588 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 801056c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010570:	2b00      	cmp	r3, #0
 8010572:	d105      	bne.n	8010580 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8010574:	2300      	movs	r3, #0
 8010576:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010578:	1dfb      	adds	r3, r7, #7
 801057a:	4618      	mov	r0, r3
 801057c:	f004 f9de 	bl	801493c <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	20000d48 	.word	0x20000d48

0801058c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010590:	4b16      	ldr	r3, [pc, #88]	; (80105ec <LoRaMacHandleIndicationEvents+0x60>)
 8010592:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010596:	f003 0308 	and.w	r3, r3, #8
 801059a:	b2db      	uxtb	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00d      	beq.n	80105bc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80105a0:	4a12      	ldr	r2, [pc, #72]	; (80105ec <LoRaMacHandleIndicationEvents+0x60>)
 80105a2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80105a6:	f36f 03c3 	bfc	r3, #3, #1
 80105aa:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80105ae:	4b0f      	ldr	r3, [pc, #60]	; (80105ec <LoRaMacHandleIndicationEvents+0x60>)
 80105b0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	490e      	ldr	r1, [pc, #56]	; (80105f0 <LoRaMacHandleIndicationEvents+0x64>)
 80105b8:	480e      	ldr	r0, [pc, #56]	; (80105f4 <LoRaMacHandleIndicationEvents+0x68>)
 80105ba:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80105bc:	4b0b      	ldr	r3, [pc, #44]	; (80105ec <LoRaMacHandleIndicationEvents+0x60>)
 80105be:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80105c2:	f003 0302 	and.w	r3, r3, #2
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00d      	beq.n	80105e8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80105cc:	4a07      	ldr	r2, [pc, #28]	; (80105ec <LoRaMacHandleIndicationEvents+0x60>)
 80105ce:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80105d2:	f36f 0341 	bfc	r3, #1, #1
 80105d6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80105da:	4b04      	ldr	r3, [pc, #16]	; (80105ec <LoRaMacHandleIndicationEvents+0x60>)
 80105dc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	4903      	ldr	r1, [pc, #12]	; (80105f0 <LoRaMacHandleIndicationEvents+0x64>)
 80105e4:	4804      	ldr	r0, [pc, #16]	; (80105f8 <LoRaMacHandleIndicationEvents+0x6c>)
 80105e6:	4798      	blx	r3
    }
}
 80105e8:	bf00      	nop
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	20000d48 	.word	0x20000d48
 80105f0:	200011d8 	.word	0x200011d8
 80105f4:	200011b4 	.word	0x200011b4
 80105f8:	2000116c 	.word	0x2000116c

080105fc <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010602:	4b2a      	ldr	r3, [pc, #168]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 8010604:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010608:	f003 0301 	and.w	r3, r3, #1
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	d048      	beq.n	80106a4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010612:	2300      	movs	r3, #0
 8010614:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010616:	2300      	movs	r3, #0
 8010618:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801061a:	4b24      	ldr	r3, [pc, #144]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 801061c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8010620:	2b00      	cmp	r3, #0
 8010622:	d004      	beq.n	801062e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010624:	4b21      	ldr	r3, [pc, #132]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 8010626:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801062a:	2b03      	cmp	r3, #3
 801062c:	d104      	bne.n	8010638 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801062e:	f002 f8ed 	bl	801280c <CheckRetransUnconfirmedUplink>
 8010632:	4603      	mov	r3, r0
 8010634:	71fb      	strb	r3, [r7, #7]
 8010636:	e010      	b.n	801065a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010638:	4b1c      	ldr	r3, [pc, #112]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 801063a:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 801063e:	2b01      	cmp	r3, #1
 8010640:	d10b      	bne.n	801065a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8010642:	4b1a      	ldr	r3, [pc, #104]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 8010644:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 8010648:	2b00      	cmp	r3, #0
 801064a:	d004      	beq.n	8010656 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 801064c:	f002 f90a 	bl	8012864 <CheckRetransConfirmedUplink>
 8010650:	4603      	mov	r3, r0
 8010652:	71fb      	strb	r3, [r7, #7]
 8010654:	e001      	b.n	801065a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8010656:	2301      	movs	r3, #1
 8010658:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801065a:	79fb      	ldrb	r3, [r7, #7]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00d      	beq.n	801067c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010660:	4813      	ldr	r0, [pc, #76]	; (80106b0 <LoRaMacHandleMcpsRequest+0xb4>)
 8010662:	f00c f9b7 	bl	801c9d4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010666:	4b11      	ldr	r3, [pc, #68]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 8010668:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801066c:	f023 0320 	bic.w	r3, r3, #32
 8010670:	4a0e      	ldr	r2, [pc, #56]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 8010672:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8010676:	f002 f92f 	bl	80128d8 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801067a:	e013      	b.n	80106a4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 801067c:	79bb      	ldrb	r3, [r7, #6]
 801067e:	f083 0301 	eor.w	r3, r3, #1
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00d      	beq.n	80106a4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010688:	4a08      	ldr	r2, [pc, #32]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 801068a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801068e:	f36f 1345 	bfc	r3, #5, #1
 8010692:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 8010696:	4b05      	ldr	r3, [pc, #20]	; (80106ac <LoRaMacHandleMcpsRequest+0xb0>)
 8010698:	2200      	movs	r2, #0
 801069a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 801069e:	2000      	movs	r0, #0
 80106a0:	f000 f9c8 	bl	8010a34 <OnTxDelayedTimerEvent>
}
 80106a4:	bf00      	nop
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	20000d48 	.word	0x20000d48
 80106b0:	200010b0 	.word	0x200010b0

080106b4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80106b8:	4b18      	ldr	r3, [pc, #96]	; (801071c <LoRaMacHandleMlmeRequest+0x68>)
 80106ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80106be:	f003 0304 	and.w	r3, r3, #4
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d026      	beq.n	8010716 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80106c8:	2001      	movs	r0, #1
 80106ca:	f004 fb37 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d012      	beq.n	80106fa <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80106d4:	2001      	movs	r0, #1
 80106d6:	f004 fad3 	bl	8014c80 <LoRaMacConfirmQueueGetStatus>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d103      	bne.n	80106e8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80106e0:	4b0e      	ldr	r3, [pc, #56]	; (801071c <LoRaMacHandleMlmeRequest+0x68>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80106e8:	4b0c      	ldr	r3, [pc, #48]	; (801071c <LoRaMacHandleMlmeRequest+0x68>)
 80106ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106ee:	f023 0302 	bic.w	r3, r3, #2
 80106f2:	4a0a      	ldr	r2, [pc, #40]	; (801071c <LoRaMacHandleMlmeRequest+0x68>)
 80106f4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 80106f8:	e00d      	b.n	8010716 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 80106fa:	2005      	movs	r0, #5
 80106fc:	f004 fb1e 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d007      	beq.n	8010716 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010706:	4b05      	ldr	r3, [pc, #20]	; (801071c <LoRaMacHandleMlmeRequest+0x68>)
 8010708:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801070c:	f023 0302 	bic.w	r3, r3, #2
 8010710:	4a02      	ldr	r2, [pc, #8]	; (801071c <LoRaMacHandleMlmeRequest+0x68>)
 8010712:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8010716:	bf00      	nop
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	20000d48 	.word	0x20000d48

08010720 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010724:	200b      	movs	r0, #11
 8010726:	f004 fb09 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d019      	beq.n	8010764 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010730:	4b0e      	ldr	r3, [pc, #56]	; (801076c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010732:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010736:	f003 0301 	and.w	r3, r3, #1
 801073a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801073c:	2b00      	cmp	r3, #0
 801073e:	d111      	bne.n	8010764 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010742:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010746:	f003 0304 	and.w	r3, r3, #4
 801074a:	b2db      	uxtb	r3, r3
 801074c:	2b00      	cmp	r3, #0
 801074e:	d009      	beq.n	8010764 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010750:	4b06      	ldr	r3, [pc, #24]	; (801076c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010752:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010756:	f023 0302 	bic.w	r3, r3, #2
 801075a:	4a04      	ldr	r2, [pc, #16]	; (801076c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801075c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8010760:	2301      	movs	r3, #1
 8010762:	e000      	b.n	8010766 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	20000d48 	.word	0x20000d48

08010770 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	4603      	mov	r3, r0
 8010778:	71fb      	strb	r3, [r7, #7]
 801077a:	460b      	mov	r3, r1
 801077c:	71bb      	strb	r3, [r7, #6]
 801077e:	4613      	mov	r3, r2
 8010780:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8010782:	79fb      	ldrb	r3, [r7, #7]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d00a      	beq.n	801079e <CheckForMinimumAbpDatarate+0x2e>
 8010788:	79bb      	ldrb	r3, [r7, #6]
 801078a:	2b01      	cmp	r3, #1
 801078c:	d107      	bne.n	801079e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 801078e:	797b      	ldrb	r3, [r7, #5]
 8010790:	f083 0301 	eor.w	r3, r3, #1
 8010794:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 801079a:	2301      	movs	r3, #1
 801079c:	e000      	b.n	80107a0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bc80      	pop	{r7}
 80107a8:	4770      	bx	lr
	...

080107ac <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80107ac:	b480      	push	{r7}
 80107ae:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80107b0:	4b0d      	ldr	r3, [pc, #52]	; (80107e8 <LoRaMacCheckForRxAbort+0x3c>)
 80107b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00f      	beq.n	80107de <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80107be:	4b0a      	ldr	r3, [pc, #40]	; (80107e8 <LoRaMacCheckForRxAbort+0x3c>)
 80107c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107c8:	4a07      	ldr	r2, [pc, #28]	; (80107e8 <LoRaMacCheckForRxAbort+0x3c>)
 80107ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80107ce:	4b06      	ldr	r3, [pc, #24]	; (80107e8 <LoRaMacCheckForRxAbort+0x3c>)
 80107d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107d4:	f023 0302 	bic.w	r3, r3, #2
 80107d8:	4a03      	ldr	r2, [pc, #12]	; (80107e8 <LoRaMacCheckForRxAbort+0x3c>)
 80107da:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80107de:	bf00      	nop
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bc80      	pop	{r7}
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	20000d48 	.word	0x20000d48

080107ec <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80107f4:	2300      	movs	r3, #0
 80107f6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80107fc:	4b50      	ldr	r3, [pc, #320]	; (8010940 <LoRaMacHandleNvm+0x154>)
 80107fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010802:	2b00      	cmp	r3, #0
 8010804:	f040 8098 	bne.w	8010938 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2124      	movs	r1, #36	; 0x24
 801080c:	4618      	mov	r0, r3
 801080e:	f007 ffeb 	bl	80187e8 <Crc32>
 8010812:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	429a      	cmp	r2, r3
 801081c:	d006      	beq.n	801082c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010824:	89fb      	ldrh	r3, [r7, #14]
 8010826:	f043 0301 	orr.w	r3, r3, #1
 801082a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	3328      	adds	r3, #40	; 0x28
 8010830:	2114      	movs	r1, #20
 8010832:	4618      	mov	r0, r3
 8010834:	f007 ffd8 	bl	80187e8 <Crc32>
 8010838:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801083e:	68ba      	ldr	r2, [r7, #8]
 8010840:	429a      	cmp	r2, r3
 8010842:	d006      	beq.n	8010852 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	68ba      	ldr	r2, [r7, #8]
 8010848:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801084a:	89fb      	ldrh	r3, [r7, #14]
 801084c:	f043 0302 	orr.w	r3, r3, #2
 8010850:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	3340      	adds	r3, #64	; 0x40
 8010856:	21e0      	movs	r1, #224	; 0xe0
 8010858:	4618      	mov	r0, r3
 801085a:	f007 ffc5 	bl	80187e8 <Crc32>
 801085e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	429a      	cmp	r2, r3
 801086a:	d007      	beq.n	801087c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8010874:	89fb      	ldrh	r3, [r7, #14]
 8010876:	f043 0304 	orr.w	r3, r3, #4
 801087a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8010882:	21bc      	movs	r1, #188	; 0xbc
 8010884:	4618      	mov	r0, r3
 8010886:	f007 ffaf 	bl	80187e8 <Crc32>
 801088a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	429a      	cmp	r2, r3
 8010896:	d007      	beq.n	80108a8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	68ba      	ldr	r2, [r7, #8]
 801089c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80108a0:	89fb      	ldrh	r3, [r7, #14]
 80108a2:	f043 0308 	orr.w	r3, r3, #8
 80108a6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80108ae:	2100      	movs	r1, #0
 80108b0:	4618      	mov	r0, r3
 80108b2:	f007 ff99 	bl	80187e8 <Crc32>
 80108b6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d007      	beq.n	80108d4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80108cc:	89fb      	ldrh	r3, [r7, #14]
 80108ce:	f043 0310 	orr.w	r3, r3, #16
 80108d2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80108da:	f44f 715e 	mov.w	r1, #888	; 0x378
 80108de:	4618      	mov	r0, r3
 80108e0:	f007 ff82 	bl	80187e8 <Crc32>
 80108e4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 3560 	ldr.w	r3, [r3, #1376]	; 0x560
 80108ec:	68ba      	ldr	r2, [r7, #8]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d007      	beq.n	8010902 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80108fa:	89fb      	ldrh	r3, [r7, #14]
 80108fc:	f043 0320 	orr.w	r3, r3, #32
 8010900:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8010908:	2114      	movs	r1, #20
 801090a:	4618      	mov	r0, r3
 801090c:	f007 ff6c 	bl	80187e8 <Crc32>
 8010910:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	429a      	cmp	r2, r3
 801091c:	d007      	beq.n	801092e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010926:	89fb      	ldrh	r3, [r7, #14]
 8010928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801092c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 801092e:	89fb      	ldrh	r3, [r7, #14]
 8010930:	4618      	mov	r0, r3
 8010932:	f002 f80d 	bl	8012950 <CallNvmDataChangeCallback>
 8010936:	e000      	b.n	801093a <LoRaMacHandleNvm+0x14e>
        return;
 8010938:	bf00      	nop
}
 801093a:	3710      	adds	r7, #16
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	20000d48 	.word	0x20000d48

08010944 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00d      	beq.n	8010970 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8010954:	6838      	ldr	r0, [r7, #0]
 8010956:	f00c f969 	bl	801cc2c <UTIL_TIMER_GetElapsedTime>
 801095a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	429a      	cmp	r2, r3
 8010962:	d905      	bls.n	8010970 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8010964:	4b05      	ldr	r3, [pc, #20]	; (801097c <LoRaMacHandleResponseTimeout+0x38>)
 8010966:	2200      	movs	r2, #0
 8010968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 801096c:	2301      	movs	r3, #1
 801096e:	e000      	b.n	8010972 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8010970:	2300      	movs	r3, #0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	20001268 	.word	0x20001268

08010980 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010986:	2300      	movs	r3, #0
 8010988:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 801098a:	f7ff fd11 	bl	80103b0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 801098e:	f003 fd84 	bl	801449a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010992:	4b26      	ldr	r3, [pc, #152]	; (8010a2c <LoRaMacProcess+0xac>)
 8010994:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010998:	f003 0320 	and.w	r3, r3, #32
 801099c:	b2db      	uxtb	r3, r3
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d025      	beq.n	80109ee <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80109a2:	2000      	movs	r0, #0
 80109a4:	f7ff fd6c 	bl	8010480 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80109a8:	f7ff ff00 	bl	80107ac <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80109ac:	f001 ffee 	bl	801298c <IsRequestPending>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d006      	beq.n	80109c4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80109b6:	f7ff feb3 	bl	8010720 <LoRaMacCheckForBeaconAcquisition>
 80109ba:	4603      	mov	r3, r0
 80109bc:	461a      	mov	r2, r3
 80109be:	79fb      	ldrb	r3, [r7, #7]
 80109c0:	4313      	orrs	r3, r2
 80109c2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 80109c4:	79fb      	ldrb	r3, [r7, #7]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d103      	bne.n	80109d2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 80109ca:	f7ff fe73 	bl	80106b4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80109ce:	f7ff fe15 	bl	80105fc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80109d2:	f7ff fd65 	bl	80104a0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80109d6:	f7ff fdc5 	bl	8010564 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80109da:	2001      	movs	r0, #1
 80109dc:	f7ff fd50 	bl	8010480 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80109e0:	4a12      	ldr	r2, [pc, #72]	; (8010a2c <LoRaMacProcess+0xac>)
 80109e2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80109e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ea:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
    LoRaMacHandleIndicationEvents( );
 80109ee:	f7ff fdcd 	bl	801058c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80109f2:	4b0e      	ldr	r3, [pc, #56]	; (8010a2c <LoRaMacProcess+0xac>)
 80109f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d101      	bne.n	8010a00 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 80109fc:	f001 fbe0 	bl	80121c0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010a00:	4b0a      	ldr	r3, [pc, #40]	; (8010a2c <LoRaMacProcess+0xac>)
 8010a02:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d009      	beq.n	8010a24 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010a10:	4a06      	ldr	r2, [pc, #24]	; (8010a2c <LoRaMacProcess+0xac>)
 8010a12:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8010a16:	f36f 1386 	bfc	r3, #6, #1
 8010a1a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 8010a1e:	4804      	ldr	r0, [pc, #16]	; (8010a30 <LoRaMacProcess+0xb0>)
 8010a20:	f7ff fee4 	bl	80107ec <LoRaMacHandleNvm>
    }
}
 8010a24:	bf00      	nop
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	20000d48 	.word	0x20000d48
 8010a30:	20001268 	.word	0x20001268

08010a34 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010a3c:	481e      	ldr	r0, [pc, #120]	; (8010ab8 <OnTxDelayedTimerEvent+0x84>)
 8010a3e:	f00b ffc9 	bl	801c9d4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010a42:	4b1e      	ldr	r3, [pc, #120]	; (8010abc <OnTxDelayedTimerEvent+0x88>)
 8010a44:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a48:	f023 0320 	bic.w	r3, r3, #32
 8010a4c:	4a1b      	ldr	r2, [pc, #108]	; (8010abc <OnTxDelayedTimerEvent+0x88>)
 8010a4e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010a52:	4b1b      	ldr	r3, [pc, #108]	; (8010ac0 <OnTxDelayedTimerEvent+0x8c>)
 8010a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a58:	4a18      	ldr	r2, [pc, #96]	; (8010abc <OnTxDelayedTimerEvent+0x88>)
 8010a5a:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 8010a5e:	4611      	mov	r1, r2
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7ff ff6f 	bl	8010944 <LoRaMacHandleResponseTimeout>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d11e      	bne.n	8010aaa <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	f001 f92d 	bl	8011ccc <ScheduleTx>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d01a      	beq.n	8010aae <OnTxDelayedTimerEvent+0x7a>
 8010a78:	2b0b      	cmp	r3, #11
 8010a7a:	d018      	beq.n	8010aae <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a7c:	4b10      	ldr	r3, [pc, #64]	; (8010ac0 <OnTxDelayedTimerEvent+0x8c>)
 8010a7e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	4b0d      	ldr	r3, [pc, #52]	; (8010abc <OnTxDelayedTimerEvent+0x88>)
 8010a86:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010a8a:	4b0c      	ldr	r3, [pc, #48]	; (8010abc <OnTxDelayedTimerEvent+0x88>)
 8010a8c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8010a90:	4b0a      	ldr	r3, [pc, #40]	; (8010abc <OnTxDelayedTimerEvent+0x88>)
 8010a92:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010a96:	4b09      	ldr	r3, [pc, #36]	; (8010abc <OnTxDelayedTimerEvent+0x88>)
 8010a98:	2209      	movs	r2, #9
 8010a9a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010a9e:	2009      	movs	r0, #9
 8010aa0:	f004 f918 	bl	8014cd4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010aa4:	f001 ff18 	bl	80128d8 <StopRetransmission>
            break;
 8010aa8:	e002      	b.n	8010ab0 <OnTxDelayedTimerEvent+0x7c>
        return;
 8010aaa:	bf00      	nop
 8010aac:	e000      	b.n	8010ab0 <OnTxDelayedTimerEvent+0x7c>
            break;
 8010aae:	bf00      	nop
        }
    }
}
 8010ab0:	3708      	adds	r7, #8
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	200010b0 	.word	0x200010b0
 8010abc:	20000d48 	.word	0x20000d48
 8010ac0:	20001268 	.word	0x20001268

08010ac4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010acc:	4b17      	ldr	r3, [pc, #92]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010ace:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010ad2:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010ad4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010ad8:	4b15      	ldr	r3, [pc, #84]	; (8010b30 <OnRxWindow1TimerEvent+0x6c>)
 8010ada:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010ade:	b25a      	sxtb	r2, r3
 8010ae0:	4b12      	ldr	r3, [pc, #72]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010ae2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ae6:	4b12      	ldr	r3, [pc, #72]	; (8010b30 <OnRxWindow1TimerEvent+0x6c>)
 8010ae8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010aec:	4b0f      	ldr	r3, [pc, #60]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010aee:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010af2:	4b0f      	ldr	r3, [pc, #60]	; (8010b30 <OnRxWindow1TimerEvent+0x6c>)
 8010af4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010af8:	4b0c      	ldr	r3, [pc, #48]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010afa:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010afe:	4b0b      	ldr	r3, [pc, #44]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010b06:	4b09      	ldr	r3, [pc, #36]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b0e:	4b08      	ldr	r3, [pc, #32]	; (8010b30 <OnRxWindow1TimerEvent+0x6c>)
 8010b10:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8010b14:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <OnRxWindow1TimerEvent+0x68>)
 8010b16:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010b1a:	4906      	ldr	r1, [pc, #24]	; (8010b34 <OnRxWindow1TimerEvent+0x70>)
 8010b1c:	4806      	ldr	r0, [pc, #24]	; (8010b38 <OnRxWindow1TimerEvent+0x74>)
 8010b1e:	f001 fb1b 	bl	8012158 <RxWindowSetup>
}
 8010b22:	bf00      	nop
 8010b24:	3708      	adds	r7, #8
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	20000d48 	.word	0x20000d48
 8010b30:	20001268 	.word	0x20001268
 8010b34:	20001100 	.word	0x20001100
 8010b38:	200010c8 	.word	0x200010c8

08010b3c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010b44:	4b19      	ldr	r3, [pc, #100]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b46:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d029      	beq.n	8010ba2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010b4e:	4b17      	ldr	r3, [pc, #92]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b50:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010b54:	4b15      	ldr	r3, [pc, #84]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b56:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010b5a:	4b15      	ldr	r3, [pc, #84]	; (8010bb0 <OnRxWindow2TimerEvent+0x74>)
 8010b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b5e:	4a13      	ldr	r2, [pc, #76]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b60:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010b64:	4b12      	ldr	r3, [pc, #72]	; (8010bb0 <OnRxWindow2TimerEvent+0x74>)
 8010b66:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010b6a:	4b10      	ldr	r3, [pc, #64]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b6c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010b70:	4b0f      	ldr	r3, [pc, #60]	; (8010bb0 <OnRxWindow2TimerEvent+0x74>)
 8010b72:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010b76:	4b0d      	ldr	r3, [pc, #52]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b78:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010b7c:	4b0b      	ldr	r3, [pc, #44]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010b84:	4b09      	ldr	r3, [pc, #36]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b86:	2201      	movs	r2, #1
 8010b88:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b8c:	4b08      	ldr	r3, [pc, #32]	; (8010bb0 <OnRxWindow2TimerEvent+0x74>)
 8010b8e:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8010b92:	4b06      	ldr	r3, [pc, #24]	; (8010bac <OnRxWindow2TimerEvent+0x70>)
 8010b94:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010b98:	4906      	ldr	r1, [pc, #24]	; (8010bb4 <OnRxWindow2TimerEvent+0x78>)
 8010b9a:	4807      	ldr	r0, [pc, #28]	; (8010bb8 <OnRxWindow2TimerEvent+0x7c>)
 8010b9c:	f001 fadc 	bl	8012158 <RxWindowSetup>
 8010ba0:	e000      	b.n	8010ba4 <OnRxWindow2TimerEvent+0x68>
        return;
 8010ba2:	bf00      	nop
}
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	20000d48 	.word	0x20000d48
 8010bb0:	20001268 	.word	0x20001268
 8010bb4:	20001118 	.word	0x20001118
 8010bb8:	200010e0 	.word	0x200010e0

08010bbc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010bc4:	480f      	ldr	r0, [pc, #60]	; (8010c04 <OnRetransmitTimeoutTimerEvent+0x48>)
 8010bc6:	f00b ff05 	bl	801c9d4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010bca:	4b0f      	ldr	r3, [pc, #60]	; (8010c08 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010bcc:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d003      	beq.n	8010bdc <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010bd4:	4b0c      	ldr	r3, [pc, #48]	; (8010c08 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010bdc:	4b0a      	ldr	r3, [pc, #40]	; (8010c08 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010bde:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00a      	beq.n	8010bfc <OnRetransmitTimeoutTimerEvent+0x40>
 8010be6:	4b08      	ldr	r3, [pc, #32]	; (8010c08 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010be8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d004      	beq.n	8010bfc <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010bf2:	4b05      	ldr	r3, [pc, #20]	; (8010c08 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010bf4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010bf8:	691b      	ldr	r3, [r3, #16]
 8010bfa:	4798      	blx	r3
    }
}
 8010bfc:	bf00      	nop
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	2000114c 	.word	0x2000114c
 8010c08:	20000d48 	.word	0x20000d48

08010c0c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60ba      	str	r2, [r7, #8]
 8010c14:	607b      	str	r3, [r7, #4]
 8010c16:	4603      	mov	r3, r0
 8010c18:	73fb      	strb	r3, [r7, #15]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d005      	beq.n	8010c30 <GetFCntDown+0x24>
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d002      	beq.n	8010c30 <GetFCntDown+0x24>
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d101      	bne.n	8010c34 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c30:	2309      	movs	r3, #9
 8010c32:	e028      	b.n	8010c86 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d016      	beq.n	8010c68 <GetFCntDown+0x5c>
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d118      	bne.n	8010c70 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010c3e:	79bb      	ldrb	r3, [r7, #6]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d10d      	bne.n	8010c60 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010c44:	7bbb      	ldrb	r3, [r7, #14]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d002      	beq.n	8010c50 <GetFCntDown+0x44>
 8010c4a:	7bbb      	ldrb	r3, [r7, #14]
 8010c4c:	2b03      	cmp	r3, #3
 8010c4e:	d103      	bne.n	8010c58 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010c50:	69bb      	ldr	r3, [r7, #24]
 8010c52:	2202      	movs	r2, #2
 8010c54:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010c56:	e00d      	b.n	8010c74 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	701a      	strb	r2, [r3, #0]
            break;
 8010c5e:	e009      	b.n	8010c74 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	2203      	movs	r2, #3
 8010c64:	701a      	strb	r2, [r3, #0]
            break;
 8010c66:	e005      	b.n	8010c74 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	2204      	movs	r2, #4
 8010c6c:	701a      	strb	r2, [r3, #0]
            break;
 8010c6e:	e001      	b.n	8010c74 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010c70:	2305      	movs	r3, #5
 8010c72:	e008      	b.n	8010c86 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	7818      	ldrb	r0, [r3, #0]
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	89db      	ldrh	r3, [r3, #14]
 8010c7c:	69fa      	ldr	r2, [r7, #28]
 8010c7e:	4619      	mov	r1, r3
 8010c80:	f004 fc52 	bl	8015528 <LoRaMacCryptoGetFCntDown>
 8010c84:	4603      	mov	r3, r0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
	...

08010c90 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010c90:	b5b0      	push	{r4, r5, r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	4603      	mov	r3, r0
 8010c98:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010c9e:	4b62      	ldr	r3, [pc, #392]	; (8010e28 <SwitchClass+0x198>)
 8010ca0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010ca4:	2b02      	cmp	r3, #2
 8010ca6:	f000 80a7 	beq.w	8010df8 <SwitchClass+0x168>
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	f300 80b6 	bgt.w	8010e1c <SwitchClass+0x18c>
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d003      	beq.n	8010cbc <SwitchClass+0x2c>
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	f000 8091 	beq.w	8010ddc <SwitchClass+0x14c>
 8010cba:	e0af      	b.n	8010e1c <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010cbc:	79fb      	ldrb	r3, [r7, #7]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d107      	bne.n	8010cd2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010cc2:	4b59      	ldr	r3, [pc, #356]	; (8010e28 <SwitchClass+0x198>)
 8010cc4:	4a58      	ldr	r2, [pc, #352]	; (8010e28 <SwitchClass+0x198>)
 8010cc6:	336c      	adds	r3, #108	; 0x6c
 8010cc8:	3264      	adds	r2, #100	; 0x64
 8010cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cce:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d10c      	bne.n	8010cf2 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010cd8:	79fb      	ldrb	r3, [r7, #7]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f003 fb74 	bl	80143c8 <LoRaMacClassBSwitchClass>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d103      	bne.n	8010cf2 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010cea:	4a4f      	ldr	r2, [pc, #316]	; (8010e28 <SwitchClass+0x198>)
 8010cec:	79fb      	ldrb	r3, [r7, #7]
 8010cee:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 8010cf2:	79fb      	ldrb	r3, [r7, #7]
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	f040 808c 	bne.w	8010e12 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010cfa:	4a4b      	ldr	r2, [pc, #300]	; (8010e28 <SwitchClass+0x198>)
 8010cfc:	79fb      	ldrb	r3, [r7, #7]
 8010cfe:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010d02:	4a4a      	ldr	r2, [pc, #296]	; (8010e2c <SwitchClass+0x19c>)
 8010d04:	4b49      	ldr	r3, [pc, #292]	; (8010e2c <SwitchClass+0x19c>)
 8010d06:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010d0a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8010d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010d16:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d1a:	4b44      	ldr	r3, [pc, #272]	; (8010e2c <SwitchClass+0x19c>)
 8010d1c:	2202      	movs	r2, #2
 8010d1e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010d22:	2300      	movs	r3, #0
 8010d24:	73bb      	strb	r3, [r7, #14]
 8010d26:	e049      	b.n	8010dbc <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d2c:	4a3e      	ldr	r2, [pc, #248]	; (8010e28 <SwitchClass+0x198>)
 8010d2e:	212c      	movs	r1, #44	; 0x2c
 8010d30:	fb01 f303 	mul.w	r3, r1, r3
 8010d34:	4413      	add	r3, r2
 8010d36:	33da      	adds	r3, #218	; 0xda
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d038      	beq.n	8010db0 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d42:	4a39      	ldr	r2, [pc, #228]	; (8010e28 <SwitchClass+0x198>)
 8010d44:	212c      	movs	r1, #44	; 0x2c
 8010d46:	fb01 f303 	mul.w	r3, r1, r3
 8010d4a:	4413      	add	r3, r2
 8010d4c:	33f0      	adds	r3, #240	; 0xf0
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4a35      	ldr	r2, [pc, #212]	; (8010e28 <SwitchClass+0x198>)
 8010d52:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d58:	4a33      	ldr	r2, [pc, #204]	; (8010e28 <SwitchClass+0x198>)
 8010d5a:	212c      	movs	r1, #44	; 0x2c
 8010d5c:	fb01 f303 	mul.w	r3, r1, r3
 8010d60:	4413      	add	r3, r2
 8010d62:	33f4      	adds	r3, #244	; 0xf4
 8010d64:	f993 3000 	ldrsb.w	r3, [r3]
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	4b2f      	ldr	r3, [pc, #188]	; (8010e28 <SwitchClass+0x198>)
 8010d6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010d70:	4b2e      	ldr	r3, [pc, #184]	; (8010e2c <SwitchClass+0x19c>)
 8010d72:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010d76:	4b2d      	ldr	r3, [pc, #180]	; (8010e2c <SwitchClass+0x19c>)
 8010d78:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010d7c:	4b2a      	ldr	r3, [pc, #168]	; (8010e28 <SwitchClass+0x198>)
 8010d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d80:	4a2a      	ldr	r2, [pc, #168]	; (8010e2c <SwitchClass+0x19c>)
 8010d82:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010d86:	4b28      	ldr	r3, [pc, #160]	; (8010e28 <SwitchClass+0x198>)
 8010d88:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010d8c:	4b27      	ldr	r3, [pc, #156]	; (8010e2c <SwitchClass+0x19c>)
 8010d8e:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010d92:	4b25      	ldr	r3, [pc, #148]	; (8010e28 <SwitchClass+0x198>)
 8010d94:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010d98:	4b24      	ldr	r3, [pc, #144]	; (8010e2c <SwitchClass+0x19c>)
 8010d9a:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010d9e:	4b23      	ldr	r3, [pc, #140]	; (8010e2c <SwitchClass+0x19c>)
 8010da0:	2203      	movs	r2, #3
 8010da2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010da6:	4b21      	ldr	r3, [pc, #132]	; (8010e2c <SwitchClass+0x19c>)
 8010da8:	2201      	movs	r2, #1
 8010daa:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8010dae:	e009      	b.n	8010dc4 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	3301      	adds	r3, #1
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	73bb      	strb	r3, [r7, #14]
 8010dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	ddb1      	ble.n	8010d28 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010dc4:	4b19      	ldr	r3, [pc, #100]	; (8010e2c <SwitchClass+0x19c>)
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010dcc:	4b18      	ldr	r3, [pc, #96]	; (8010e30 <SwitchClass+0x1a0>)
 8010dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010dd2:	f001 f9f5 	bl	80121c0 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010dda:	e01a      	b.n	8010e12 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010ddc:	79fb      	ldrb	r3, [r7, #7]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f003 faf2 	bl	80143c8 <LoRaMacClassBSwitchClass>
 8010de4:	4603      	mov	r3, r0
 8010de6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010de8:	7bfb      	ldrb	r3, [r7, #15]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d113      	bne.n	8010e16 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010dee:	4a0e      	ldr	r2, [pc, #56]	; (8010e28 <SwitchClass+0x198>)
 8010df0:	79fb      	ldrb	r3, [r7, #7]
 8010df2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8010df6:	e00e      	b.n	8010e16 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010df8:	79fb      	ldrb	r3, [r7, #7]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d10d      	bne.n	8010e1a <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010dfe:	4a0a      	ldr	r2, [pc, #40]	; (8010e28 <SwitchClass+0x198>)
 8010e00:	79fb      	ldrb	r3, [r7, #7]
 8010e02:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010e06:	4b0a      	ldr	r3, [pc, #40]	; (8010e30 <SwitchClass+0x1a0>)
 8010e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e0a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010e10:	e003      	b.n	8010e1a <SwitchClass+0x18a>
            break;
 8010e12:	bf00      	nop
 8010e14:	e002      	b.n	8010e1c <SwitchClass+0x18c>
            break;
 8010e16:	bf00      	nop
 8010e18:	e000      	b.n	8010e1c <SwitchClass+0x18c>
            break;
 8010e1a:	bf00      	nop
        }
    }

    return status;
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bdb0      	pop	{r4, r5, r7, pc}
 8010e26:	bf00      	nop
 8010e28:	20001268 	.word	0x20001268
 8010e2c:	20000d48 	.word	0x20000d48
 8010e30:	0801dea4 	.word	0x0801dea4

08010e34 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e3e:	4b10      	ldr	r3, [pc, #64]	; (8010e80 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010e40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010e44:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010e46:	79fb      	ldrb	r3, [r7, #7]
 8010e48:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010e4a:	230d      	movs	r3, #13
 8010e4c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010e4e:	4b0c      	ldr	r3, [pc, #48]	; (8010e80 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010e50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d001      	beq.n	8010e5c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010e58:	230e      	movs	r3, #14
 8010e5a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e5c:	4b08      	ldr	r3, [pc, #32]	; (8010e80 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e62:	f107 0210 	add.w	r2, r7, #16
 8010e66:	4611      	mov	r1, r2
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f005 f9bb 	bl	80161e4 <RegionGetPhyParam>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	b2db      	uxtb	r3, r3
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3718      	adds	r7, #24
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	20001268 	.word	0x20001268

08010e84 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	71fb      	strb	r3, [r7, #7]
 8010e8e:	460b      	mov	r3, r1
 8010e90:	71bb      	strb	r3, [r7, #6]
 8010e92:	4613      	mov	r3, r2
 8010e94:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010e9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7ff ffc6 	bl	8010e34 <GetMaxAppPayloadWithoutFOptsLength>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010eac:	79fb      	ldrb	r3, [r7, #7]
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	797b      	ldrb	r3, [r7, #5]
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	4413      	add	r3, r2
 8010eb6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010eb8:	89ba      	ldrh	r2, [r7, #12]
 8010eba:	89fb      	ldrh	r3, [r7, #14]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d804      	bhi.n	8010eca <ValidatePayloadLength+0x46>
 8010ec0:	89bb      	ldrh	r3, [r7, #12]
 8010ec2:	2bff      	cmp	r3, #255	; 0xff
 8010ec4:	d801      	bhi.n	8010eca <ValidatePayloadLength+0x46>
    {
        return true;
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e000      	b.n	8010ecc <ValidatePayloadLength+0x48>
    }
    return false;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010ed4:	b590      	push	{r4, r7, lr}
 8010ed6:	b0a5      	sub	sp, #148	; 0x94
 8010ed8:	af02      	add	r7, sp, #8
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	4608      	mov	r0, r1
 8010ede:	4611      	mov	r1, r2
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	70fb      	strb	r3, [r7, #3]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	70bb      	strb	r3, [r7, #2]
 8010eea:	4613      	mov	r3, r2
 8010eec:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010efa:	2300      	movs	r3, #0
 8010efc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010f00:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f000 84ab 	beq.w	8011860 <ProcessMacCommands+0x98c>
 8010f0a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	f040 84ac 	bne.w	801186c <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010f14:	f000 bca4 	b.w	8011860 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010f18:	78fb      	ldrb	r3, [r7, #3]
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f003 fd33 	bl	801498c <LoRaMacCommandsGetCmdSize>
 8010f26:	4603      	mov	r3, r0
 8010f28:	461a      	mov	r2, r3
 8010f2a:	78fb      	ldrb	r3, [r7, #3]
 8010f2c:	441a      	add	r2, r3
 8010f2e:	78bb      	ldrb	r3, [r7, #2]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	f300 849d 	bgt.w	8011870 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010f36:	78fb      	ldrb	r3, [r7, #3]
 8010f38:	1c5a      	adds	r2, r3, #1
 8010f3a:	70fa      	strb	r2, [r7, #3]
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4413      	add	r3, r2
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	3b02      	subs	r3, #2
 8010f46:	2b11      	cmp	r3, #17
 8010f48:	f200 8494 	bhi.w	8011874 <ProcessMacCommands+0x9a0>
 8010f4c:	a201      	add	r2, pc, #4	; (adr r2, 8010f54 <ProcessMacCommands+0x80>)
 8010f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f52:	bf00      	nop
 8010f54:	08010f9d 	.word	0x08010f9d
 8010f58:	08010fdf 	.word	0x08010fdf
 8010f5c:	0801115b 	.word	0x0801115b
 8010f60:	08011199 	.word	0x08011199
 8010f64:	08011291 	.word	0x08011291
 8010f68:	080112e1 	.word	0x080112e1
 8010f6c:	0801139d 	.word	0x0801139d
 8010f70:	080113f3 	.word	0x080113f3
 8010f74:	080114d7 	.word	0x080114d7
 8010f78:	08011875 	.word	0x08011875
 8010f7c:	08011875 	.word	0x08011875
 8010f80:	08011581 	.word	0x08011581
 8010f84:	08011875 	.word	0x08011875
 8010f88:	08011875 	.word	0x08011875
 8010f8c:	080116a1 	.word	0x080116a1
 8010f90:	080116d5 	.word	0x080116d5
 8010f94:	08011765 	.word	0x08011765
 8010f98:	080117db 	.word	0x080117db
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010f9c:	2004      	movs	r0, #4
 8010f9e:	f003 fecd 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 845b 	beq.w	8011860 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010faa:	2104      	movs	r1, #4
 8010fac:	2000      	movs	r0, #0
 8010fae:	f003 fe39 	bl	8014c24 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010fb2:	78fb      	ldrb	r3, [r7, #3]
 8010fb4:	1c5a      	adds	r2, r3, #1
 8010fb6:	70fa      	strb	r2, [r7, #3]
 8010fb8:	461a      	mov	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	781a      	ldrb	r2, [r3, #0]
 8010fc0:	4bb0      	ldr	r3, [pc, #704]	; (8011284 <ProcessMacCommands+0x3b0>)
 8010fc2:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010fc6:	78fb      	ldrb	r3, [r7, #3]
 8010fc8:	1c5a      	adds	r2, r3, #1
 8010fca:	70fa      	strb	r2, [r7, #3]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	781a      	ldrb	r2, [r3, #0]
 8010fd4:	4bab      	ldr	r3, [pc, #684]	; (8011284 <ProcessMacCommands+0x3b0>)
 8010fd6:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                }
                break;
 8010fda:	f000 bc41 	b.w	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8010fea:	2300      	movs	r3, #0
 8010fec:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 8010ff6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010ffa:	f083 0301 	eor.w	r3, r3, #1
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	2b00      	cmp	r3, #0
 8011002:	f000 80a5 	beq.w	8011150 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8011006:	2301      	movs	r3, #1
 8011008:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 801100c:	78fb      	ldrb	r3, [r7, #3]
 801100e:	3b01      	subs	r3, #1
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	4413      	add	r3, r2
 8011014:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011016:	4b9c      	ldr	r3, [pc, #624]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011018:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801101c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011020:	4b99      	ldr	r3, [pc, #612]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011022:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011026:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801102a:	4b97      	ldr	r3, [pc, #604]	; (8011288 <ProcessMacCommands+0x3b4>)
 801102c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011030:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011034:	4b94      	ldr	r3, [pc, #592]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011036:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801103a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801103e:	4b92      	ldr	r3, [pc, #584]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011040:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011044:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8011048:	4b8f      	ldr	r3, [pc, #572]	; (8011288 <ProcessMacCommands+0x3b4>)
 801104a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801104e:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011050:	4b8d      	ldr	r3, [pc, #564]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011052:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011056:	2b00      	cmp	r3, #0
 8011058:	d008      	beq.n	801106c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801105a:	78ba      	ldrb	r2, [r7, #2]
 801105c:	78fb      	ldrb	r3, [r7, #3]
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	b2db      	uxtb	r3, r3
 8011062:	3301      	adds	r3, #1
 8011064:	b2db      	uxtb	r3, r3
 8011066:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 801106a:	e002      	b.n	8011072 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 801106c:	2305      	movs	r3, #5
 801106e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8011072:	4b85      	ldr	r3, [pc, #532]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011074:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011078:	f107 0456 	add.w	r4, r7, #86	; 0x56
 801107c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8011080:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011088:	9301      	str	r3, [sp, #4]
 801108a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	4623      	mov	r3, r4
 8011092:	f005 f964 	bl	801635e <RegionLinkAdrReq>
 8011096:	4603      	mov	r3, r0
 8011098:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 801109c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80110a0:	f003 0307 	and.w	r3, r3, #7
 80110a4:	2b07      	cmp	r3, #7
 80110a6:	d119      	bne.n	80110dc <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80110a8:	4b77      	ldr	r3, [pc, #476]	; (8011288 <ProcessMacCommands+0x3b4>)
 80110aa:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80110ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80110b2:	429a      	cmp	r2, r3
 80110b4:	da03      	bge.n	80110be <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80110b6:	4b74      	ldr	r3, [pc, #464]	; (8011288 <ProcessMacCommands+0x3b4>)
 80110b8:	2201      	movs	r2, #1
 80110ba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80110be:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80110c2:	4b71      	ldr	r3, [pc, #452]	; (8011288 <ProcessMacCommands+0x3b4>)
 80110c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80110c8:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80110cc:	4b6e      	ldr	r3, [pc, #440]	; (8011288 <ProcessMacCommands+0x3b4>)
 80110ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80110d2:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80110d6:	4b6c      	ldr	r3, [pc, #432]	; (8011288 <ProcessMacCommands+0x3b4>)
 80110d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80110dc:	2300      	movs	r3, #0
 80110de:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80110e2:	e00b      	b.n	80110fc <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80110e4:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80110e8:	2201      	movs	r2, #1
 80110ea:	4619      	mov	r1, r3
 80110ec:	2003      	movs	r0, #3
 80110ee:	f003 fafd 	bl	80146ec <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80110f2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80110f6:	3301      	adds	r3, #1
 80110f8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80110fc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8011100:	4a62      	ldr	r2, [pc, #392]	; (801128c <ProcessMacCommands+0x3b8>)
 8011102:	fba2 2303 	umull	r2, r3, r2, r3
 8011106:	089b      	lsrs	r3, r3, #2
 8011108:	b2db      	uxtb	r3, r3
 801110a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 801110e:	429a      	cmp	r2, r3
 8011110:	d3e8      	bcc.n	80110e4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8011112:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8011116:	78fb      	ldrb	r3, [r7, #3]
 8011118:	4413      	add	r3, r2
 801111a:	b2db      	uxtb	r3, r3
 801111c:	3b01      	subs	r3, #1
 801111e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8011120:	78fa      	ldrb	r2, [r7, #3]
 8011122:	78bb      	ldrb	r3, [r7, #2]
 8011124:	429a      	cmp	r2, r3
 8011126:	d20a      	bcs.n	801113e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8011128:	78fb      	ldrb	r3, [r7, #3]
 801112a:	1c5a      	adds	r2, r3, #1
 801112c:	70fa      	strb	r2, [r7, #3]
 801112e:	461a      	mov	r2, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	4413      	add	r3, r2
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	2b03      	cmp	r3, #3
 8011138:	f43f af68 	beq.w	801100c <ProcessMacCommands+0x138>
 801113c:	e000      	b.n	8011140 <ProcessMacCommands+0x26c>
                            break;
 801113e:	bf00      	nop

                    if( macIndex < commandsSize )
 8011140:	78fa      	ldrb	r2, [r7, #3]
 8011142:	78bb      	ldrb	r3, [r7, #2]
 8011144:	429a      	cmp	r2, r3
 8011146:	d206      	bcs.n	8011156 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8011148:	78fb      	ldrb	r3, [r7, #3]
 801114a:	3b01      	subs	r3, #1
 801114c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801114e:	e002      	b.n	8011156 <ProcessMacCommands+0x282>
                    macIndex += 4;
 8011150:	78fb      	ldrb	r3, [r7, #3]
 8011152:	3304      	adds	r3, #4
 8011154:	70fb      	strb	r3, [r7, #3]
                break;
 8011156:	bf00      	nop
 8011158:	e382      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801115a:	78fb      	ldrb	r3, [r7, #3]
 801115c:	1c5a      	adds	r2, r3, #1
 801115e:	70fa      	strb	r2, [r7, #3]
 8011160:	461a      	mov	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4413      	add	r3, r2
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	f003 030f 	and.w	r3, r3, #15
 801116c:	b2da      	uxtb	r2, r3
 801116e:	4b46      	ldr	r3, [pc, #280]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011170:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8011174:	4b44      	ldr	r3, [pc, #272]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011176:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 801117a:	461a      	mov	r2, r3
 801117c:	2301      	movs	r3, #1
 801117e:	4093      	lsls	r3, r2
 8011180:	b29a      	uxth	r2, r3
 8011182:	4b41      	ldr	r3, [pc, #260]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011184:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801118c:	2200      	movs	r2, #0
 801118e:	4619      	mov	r1, r3
 8011190:	2004      	movs	r0, #4
 8011192:	f003 faab 	bl	80146ec <LoRaMacCommandsAddCmd>
                break;
 8011196:	e363      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011198:	2307      	movs	r3, #7
 801119a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801119e:	78fb      	ldrb	r3, [r7, #3]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	4413      	add	r3, r2
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	091b      	lsrs	r3, r3, #4
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	b25b      	sxtb	r3, r3
 80111ac:	f003 0307 	and.w	r3, r3, #7
 80111b0:	b25b      	sxtb	r3, r3
 80111b2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80111b6:	78fb      	ldrb	r3, [r7, #3]
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	4413      	add	r3, r2
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	b25b      	sxtb	r3, r3
 80111c0:	f003 030f 	and.w	r3, r3, #15
 80111c4:	b25b      	sxtb	r3, r3
 80111c6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80111ca:	78fb      	ldrb	r3, [r7, #3]
 80111cc:	3301      	adds	r3, #1
 80111ce:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80111d0:	78fb      	ldrb	r3, [r7, #3]
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	70fa      	strb	r2, [r7, #3]
 80111d6:	461a      	mov	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4413      	add	r3, r2
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80111e0:	78fb      	ldrb	r3, [r7, #3]
 80111e2:	1c5a      	adds	r2, r3, #1
 80111e4:	70fa      	strb	r2, [r7, #3]
 80111e6:	461a      	mov	r2, r3
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4413      	add	r3, r2
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	021a      	lsls	r2, r3, #8
 80111f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f2:	4313      	orrs	r3, r2
 80111f4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80111f6:	78fb      	ldrb	r3, [r7, #3]
 80111f8:	1c5a      	adds	r2, r3, #1
 80111fa:	70fa      	strb	r2, [r7, #3]
 80111fc:	461a      	mov	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	4413      	add	r3, r2
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	041a      	lsls	r2, r3, #16
 8011206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011208:	4313      	orrs	r3, r2
 801120a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 801120c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801120e:	2264      	movs	r2, #100	; 0x64
 8011210:	fb02 f303 	mul.w	r3, r2, r3
 8011214:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8011216:	4b1c      	ldr	r3, [pc, #112]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801121c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011220:	4611      	mov	r1, r2
 8011222:	4618      	mov	r0, r3
 8011224:	f005 f8b5 	bl	8016392 <RegionRxParamSetupReq>
 8011228:	4603      	mov	r3, r0
 801122a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801122e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011232:	f003 0307 	and.w	r3, r3, #7
 8011236:	2b07      	cmp	r3, #7
 8011238:	d117      	bne.n	801126a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801123a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801123e:	b2da      	uxtb	r2, r3
 8011240:	4b11      	ldr	r3, [pc, #68]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011242:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8011246:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801124a:	b2da      	uxtb	r2, r3
 801124c:	4b0e      	ldr	r3, [pc, #56]	; (8011288 <ProcessMacCommands+0x3b4>)
 801124e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8011252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011254:	4a0c      	ldr	r2, [pc, #48]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011256:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8011258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125a:	4a0b      	ldr	r2, [pc, #44]	; (8011288 <ProcessMacCommands+0x3b4>)
 801125c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801125e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8011262:	b2da      	uxtb	r2, r3
 8011264:	4b08      	ldr	r3, [pc, #32]	; (8011288 <ProcessMacCommands+0x3b4>)
 8011266:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 801126a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801126e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8011272:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011276:	2201      	movs	r2, #1
 8011278:	4619      	mov	r1, r3
 801127a:	2005      	movs	r0, #5
 801127c:	f003 fa36 	bl	80146ec <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8011280:	bf00      	nop
 8011282:	e2ed      	b.n	8011860 <ProcessMacCommands+0x98c>
 8011284:	20000d48 	.word	0x20000d48
 8011288:	20001268 	.word	0x20001268
 801128c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8011290:	23ff      	movs	r3, #255	; 0xff
 8011292:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011296:	4bb7      	ldr	r3, [pc, #732]	; (8011574 <ProcessMacCommands+0x6a0>)
 8011298:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00d      	beq.n	80112bc <ProcessMacCommands+0x3e8>
 80112a0:	4bb4      	ldr	r3, [pc, #720]	; (8011574 <ProcessMacCommands+0x6a0>)
 80112a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d007      	beq.n	80112bc <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80112ac:	4bb1      	ldr	r3, [pc, #708]	; (8011574 <ProcessMacCommands+0x6a0>)
 80112ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	4798      	blx	r3
 80112b6:	4603      	mov	r3, r0
 80112b8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80112bc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80112c0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80112c4:	787b      	ldrb	r3, [r7, #1]
 80112c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80112d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80112d4:	2202      	movs	r2, #2
 80112d6:	4619      	mov	r1, r3
 80112d8:	2006      	movs	r0, #6
 80112da:	f003 fa07 	bl	80146ec <LoRaMacCommandsAddCmd>
                break;
 80112de:	e2bf      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80112e0:	2303      	movs	r3, #3
 80112e2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80112e6:	78fb      	ldrb	r3, [r7, #3]
 80112e8:	1c5a      	adds	r2, r3, #1
 80112ea:	70fa      	strb	r2, [r7, #3]
 80112ec:	461a      	mov	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4413      	add	r3, r2
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	b25b      	sxtb	r3, r3
 80112f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80112fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80112fe:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011300:	78fb      	ldrb	r3, [r7, #3]
 8011302:	1c5a      	adds	r2, r3, #1
 8011304:	70fa      	strb	r2, [r7, #3]
 8011306:	461a      	mov	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	4413      	add	r3, r2
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011310:	78fb      	ldrb	r3, [r7, #3]
 8011312:	1c5a      	adds	r2, r3, #1
 8011314:	70fa      	strb	r2, [r7, #3]
 8011316:	461a      	mov	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4413      	add	r3, r2
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	021a      	lsls	r2, r3, #8
 8011320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011322:	4313      	orrs	r3, r2
 8011324:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011326:	78fb      	ldrb	r3, [r7, #3]
 8011328:	1c5a      	adds	r2, r3, #1
 801132a:	70fa      	strb	r2, [r7, #3]
 801132c:	461a      	mov	r2, r3
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4413      	add	r3, r2
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	041a      	lsls	r2, r3, #16
 8011336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011338:	4313      	orrs	r3, r2
 801133a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 801133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133e:	2264      	movs	r2, #100	; 0x64
 8011340:	fb02 f303 	mul.w	r3, r2, r3
 8011344:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8011346:	2300      	movs	r3, #0
 8011348:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801134a:	78fb      	ldrb	r3, [r7, #3]
 801134c:	1c5a      	adds	r2, r3, #1
 801134e:	70fa      	strb	r2, [r7, #3]
 8011350:	461a      	mov	r2, r3
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	4413      	add	r3, r2
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	b25b      	sxtb	r3, r3
 801135a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801135e:	4b86      	ldr	r3, [pc, #536]	; (8011578 <ProcessMacCommands+0x6a4>)
 8011360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011364:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011368:	4611      	mov	r1, r2
 801136a:	4618      	mov	r0, r3
 801136c:	f005 f824 	bl	80163b8 <RegionNewChannelReq>
 8011370:	4603      	mov	r3, r0
 8011372:	b2db      	uxtb	r3, r3
 8011374:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8011378:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801137c:	b25b      	sxtb	r3, r3
 801137e:	2b00      	cmp	r3, #0
 8011380:	db0a      	blt.n	8011398 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8011382:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011386:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801138a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801138e:	2201      	movs	r2, #1
 8011390:	4619      	mov	r1, r3
 8011392:	2007      	movs	r0, #7
 8011394:	f003 f9aa 	bl	80146ec <LoRaMacCommandsAddCmd>
                }
                break;
 8011398:	bf00      	nop
 801139a:	e261      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801139c:	78fb      	ldrb	r3, [r7, #3]
 801139e:	1c5a      	adds	r2, r3, #1
 80113a0:	70fa      	strb	r2, [r7, #3]
 80113a2:	461a      	mov	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4413      	add	r3, r2
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f003 030f 	and.w	r3, r3, #15
 80113ae:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80113b2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d104      	bne.n	80113c4 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 80113ba:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80113be:	3301      	adds	r3, #1
 80113c0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80113c4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80113c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80113cc:	fb02 f303 	mul.w	r3, r2, r3
 80113d0:	461a      	mov	r2, r3
 80113d2:	4b69      	ldr	r3, [pc, #420]	; (8011578 <ProcessMacCommands+0x6a4>)
 80113d4:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80113d6:	4b68      	ldr	r3, [pc, #416]	; (8011578 <ProcessMacCommands+0x6a4>)
 80113d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80113de:	4a66      	ldr	r2, [pc, #408]	; (8011578 <ProcessMacCommands+0x6a4>)
 80113e0:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80113e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80113e6:	2200      	movs	r2, #0
 80113e8:	4619      	mov	r1, r3
 80113ea:	2008      	movs	r0, #8
 80113ec:	f003 f97e 	bl	80146ec <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80113f0:	e236      	b.n	8011860 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80113f2:	78fb      	ldrb	r3, [r7, #3]
 80113f4:	1c5a      	adds	r2, r3, #1
 80113f6:	70fa      	strb	r2, [r7, #3]
 80113f8:	461a      	mov	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	4413      	add	r3, r2
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011404:	2300      	movs	r3, #0
 8011406:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801140a:	2300      	movs	r3, #0
 801140c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011410:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011414:	f003 0320 	and.w	r3, r3, #32
 8011418:	2b00      	cmp	r3, #0
 801141a:	d002      	beq.n	8011422 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801141c:	2301      	movs	r3, #1
 801141e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011422:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011426:	f003 0310 	and.w	r3, r3, #16
 801142a:	2b00      	cmp	r3, #0
 801142c:	d002      	beq.n	8011434 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801142e:	2301      	movs	r3, #1
 8011430:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011434:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011438:	f003 030f 	and.w	r3, r3, #15
 801143c:	b2db      	uxtb	r3, r3
 801143e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8011442:	4b4d      	ldr	r3, [pc, #308]	; (8011578 <ProcessMacCommands+0x6a4>)
 8011444:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011448:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801144c:	4611      	mov	r1, r2
 801144e:	4618      	mov	r0, r3
 8011450:	f004 ffc5 	bl	80163de <RegionTxParamSetupReq>
 8011454:	4603      	mov	r3, r0
 8011456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801145a:	d03a      	beq.n	80114d2 <ProcessMacCommands+0x5fe>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 801145c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8011460:	4b45      	ldr	r3, [pc, #276]	; (8011578 <ProcessMacCommands+0x6a4>)
 8011462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011466:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801146a:	4b43      	ldr	r3, [pc, #268]	; (8011578 <ProcessMacCommands+0x6a4>)
 801146c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011470:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011474:	461a      	mov	r2, r3
 8011476:	4b41      	ldr	r3, [pc, #260]	; (801157c <ProcessMacCommands+0x6a8>)
 8011478:	5c9b      	ldrb	r3, [r3, r2]
 801147a:	4618      	mov	r0, r3
 801147c:	f7ef fc08 	bl	8000c90 <__aeabi_ui2f>
 8011480:	4603      	mov	r3, r0
 8011482:	4a3d      	ldr	r2, [pc, #244]	; (8011578 <ProcessMacCommands+0x6a4>)
 8011484:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011486:	2302      	movs	r3, #2
 8011488:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801148c:	4b3a      	ldr	r3, [pc, #232]	; (8011578 <ProcessMacCommands+0x6a4>)
 801148e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011492:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011496:	4b38      	ldr	r3, [pc, #224]	; (8011578 <ProcessMacCommands+0x6a4>)
 8011498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801149c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f004 fe9e 	bl	80161e4 <RegionGetPhyParam>
 80114a8:	4603      	mov	r3, r0
 80114aa:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80114ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ae:	b25a      	sxtb	r2, r3
 80114b0:	4b31      	ldr	r3, [pc, #196]	; (8011578 <ProcessMacCommands+0x6a4>)
 80114b2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80114b6:	4293      	cmp	r3, r2
 80114b8:	bfb8      	it	lt
 80114ba:	4613      	movlt	r3, r2
 80114bc:	b25a      	sxtb	r2, r3
 80114be:	4b2e      	ldr	r3, [pc, #184]	; (8011578 <ProcessMacCommands+0x6a4>)
 80114c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80114c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80114c8:	2200      	movs	r2, #0
 80114ca:	4619      	mov	r1, r3
 80114cc:	2009      	movs	r0, #9
 80114ce:	f003 f90d 	bl	80146ec <LoRaMacCommandsAddCmd>
                }
                break;
 80114d2:	bf00      	nop
 80114d4:	e1c4      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80114d6:	2303      	movs	r3, #3
 80114d8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80114dc:	78fb      	ldrb	r3, [r7, #3]
 80114de:	1c5a      	adds	r2, r3, #1
 80114e0:	70fa      	strb	r2, [r7, #3]
 80114e2:	461a      	mov	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4413      	add	r3, r2
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80114ee:	78fb      	ldrb	r3, [r7, #3]
 80114f0:	1c5a      	adds	r2, r3, #1
 80114f2:	70fa      	strb	r2, [r7, #3]
 80114f4:	461a      	mov	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4413      	add	r3, r2
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80114fe:	78fb      	ldrb	r3, [r7, #3]
 8011500:	1c5a      	adds	r2, r3, #1
 8011502:	70fa      	strb	r2, [r7, #3]
 8011504:	461a      	mov	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4413      	add	r3, r2
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	021a      	lsls	r2, r3, #8
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	4313      	orrs	r3, r2
 8011512:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011514:	78fb      	ldrb	r3, [r7, #3]
 8011516:	1c5a      	adds	r2, r3, #1
 8011518:	70fa      	strb	r2, [r7, #3]
 801151a:	461a      	mov	r2, r3
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	4413      	add	r3, r2
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	041a      	lsls	r2, r3, #16
 8011524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011526:	4313      	orrs	r3, r2
 8011528:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 801152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152c:	2264      	movs	r2, #100	; 0x64
 801152e:	fb02 f303 	mul.w	r3, r2, r3
 8011532:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8011534:	4b10      	ldr	r3, [pc, #64]	; (8011578 <ProcessMacCommands+0x6a4>)
 8011536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801153a:	f107 0220 	add.w	r2, r7, #32
 801153e:	4611      	mov	r1, r2
 8011540:	4618      	mov	r0, r3
 8011542:	f004 ff5f 	bl	8016404 <RegionDlChannelReq>
 8011546:	4603      	mov	r3, r0
 8011548:	b2db      	uxtb	r3, r3
 801154a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801154e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011552:	b25b      	sxtb	r3, r3
 8011554:	2b00      	cmp	r3, #0
 8011556:	db0a      	blt.n	801156e <ProcessMacCommands+0x69a>
                {
                    macCmdPayload[0] = status;
 8011558:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801155c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011560:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011564:	2201      	movs	r2, #1
 8011566:	4619      	mov	r1, r3
 8011568:	200a      	movs	r0, #10
 801156a:	f003 f8bf 	bl	80146ec <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 801156e:	bf00      	nop
 8011570:	e176      	b.n	8011860 <ProcessMacCommands+0x98c>
 8011572:	bf00      	nop
 8011574:	20000d48 	.word	0x20000d48
 8011578:	20001268 	.word	0x20001268
 801157c:	0801de5c 	.word	0x0801de5c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011580:	2009      	movs	r0, #9
 8011582:	f003 fbdb 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 8011586:	4603      	mov	r3, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	f000 8084 	beq.w	8011696 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801158e:	2109      	movs	r1, #9
 8011590:	2000      	movs	r0, #0
 8011592:	f003 fb47 	bl	8014c24 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8011596:	f107 0318 	add.w	r3, r7, #24
 801159a:	2200      	movs	r2, #0
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80115a0:	f107 0310 	add.w	r3, r7, #16
 80115a4:	2200      	movs	r2, #0
 80115a6:	601a      	str	r2, [r3, #0]
 80115a8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80115aa:	f107 0308 	add.w	r3, r7, #8
 80115ae:	2200      	movs	r2, #0
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80115b4:	78fb      	ldrb	r3, [r7, #3]
 80115b6:	1c5a      	adds	r2, r3, #1
 80115b8:	70fa      	strb	r2, [r7, #3]
 80115ba:	461a      	mov	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4413      	add	r3, r2
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80115c4:	78fb      	ldrb	r3, [r7, #3]
 80115c6:	1c5a      	adds	r2, r3, #1
 80115c8:	70fa      	strb	r2, [r7, #3]
 80115ca:	461a      	mov	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4413      	add	r3, r2
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	021a      	lsls	r2, r3, #8
 80115d4:	69bb      	ldr	r3, [r7, #24]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80115da:	78fb      	ldrb	r3, [r7, #3]
 80115dc:	1c5a      	adds	r2, r3, #1
 80115de:	70fa      	strb	r2, [r7, #3]
 80115e0:	461a      	mov	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4413      	add	r3, r2
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	041a      	lsls	r2, r3, #16
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	4313      	orrs	r3, r2
 80115ee:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80115f0:	78fb      	ldrb	r3, [r7, #3]
 80115f2:	1c5a      	adds	r2, r3, #1
 80115f4:	70fa      	strb	r2, [r7, #3]
 80115f6:	461a      	mov	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	4413      	add	r3, r2
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	061a      	lsls	r2, r3, #24
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	4313      	orrs	r3, r2
 8011604:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011606:	78fb      	ldrb	r3, [r7, #3]
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	70fa      	strb	r2, [r7, #3]
 801160c:	461a      	mov	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4413      	add	r3, r2
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	b21b      	sxth	r3, r3
 8011616:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011618:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801161c:	461a      	mov	r2, r3
 801161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011622:	fb02 f303 	mul.w	r3, r2, r3
 8011626:	121b      	asrs	r3, r3, #8
 8011628:	b21b      	sxth	r3, r3
 801162a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801162c:	f107 0310 	add.w	r3, r7, #16
 8011630:	f107 0218 	add.w	r2, r7, #24
 8011634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011638:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801163c:	693a      	ldr	r2, [r7, #16]
 801163e:	4b8f      	ldr	r3, [pc, #572]	; (801187c <ProcessMacCommands+0x9a8>)
 8011640:	4413      	add	r3, r2
 8011642:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011644:	f107 0308 	add.w	r3, r7, #8
 8011648:	4618      	mov	r0, r3
 801164a:	f00a fc57 	bl	801befc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801164e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011652:	4b8b      	ldr	r3, [pc, #556]	; (8011880 <ProcessMacCommands+0x9ac>)
 8011654:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8011658:	9200      	str	r2, [sp, #0]
 801165a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 801165e:	f107 0210 	add.w	r2, r7, #16
 8011662:	ca06      	ldmia	r2, {r1, r2}
 8011664:	f00a fbe3 	bl	801be2e <SysTimeSub>
 8011668:	f107 0010 	add.w	r0, r7, #16
 801166c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011672:	f107 0208 	add.w	r2, r7, #8
 8011676:	ca06      	ldmia	r2, {r1, r2}
 8011678:	f00a fba0 	bl	801bdbc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 801167c:	f107 0310 	add.w	r3, r7, #16
 8011680:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011684:	f00a fc0c 	bl	801bea0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011688:	f002 fedc 	bl	8014444 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801168c:	4b7c      	ldr	r3, [pc, #496]	; (8011880 <ProcessMacCommands+0x9ac>)
 801168e:	2201      	movs	r2, #1
 8011690:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8011694:	e0e4      	b.n	8011860 <ProcessMacCommands+0x98c>
                }
                else
                {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011696:	4b7a      	ldr	r3, [pc, #488]	; (8011880 <ProcessMacCommands+0x9ac>)
 8011698:	2200      	movs	r2, #0
 801169a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */
                }
                break;
 801169e:	e0df      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80116a0:	200c      	movs	r0, #12
 80116a2:	f003 fb4b 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f000 80d9 	beq.w	8011860 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80116ae:	210c      	movs	r1, #12
 80116b0:	2000      	movs	r0, #0
 80116b2:	f003 fab7 	bl	8014c24 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80116b6:	4b72      	ldr	r3, [pc, #456]	; (8011880 <ProcessMacCommands+0x9ac>)
 80116b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80116bc:	2b04      	cmp	r3, #4
 80116be:	f000 80cf 	beq.w	8011860 <ProcessMacCommands+0x98c>
 80116c2:	4b6f      	ldr	r3, [pc, #444]	; (8011880 <ProcessMacCommands+0x9ac>)
 80116c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80116c8:	2b05      	cmp	r3, #5
 80116ca:	f000 80c9 	beq.w	8011860 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80116ce:	f002 fe9a 	bl	8014406 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80116d2:	e0c5      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80116d4:	2303      	movs	r3, #3
 80116d6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80116da:	2300      	movs	r3, #0
 80116dc:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80116de:	78fb      	ldrb	r3, [r7, #3]
 80116e0:	1c5a      	adds	r2, r3, #1
 80116e2:	70fa      	strb	r2, [r7, #3]
 80116e4:	461a      	mov	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4413      	add	r3, r2
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80116ee:	78fb      	ldrb	r3, [r7, #3]
 80116f0:	1c5a      	adds	r2, r3, #1
 80116f2:	70fa      	strb	r2, [r7, #3]
 80116f4:	461a      	mov	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	4413      	add	r3, r2
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	021b      	lsls	r3, r3, #8
 80116fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011700:	4313      	orrs	r3, r2
 8011702:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011704:	78fb      	ldrb	r3, [r7, #3]
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	70fa      	strb	r2, [r7, #3]
 801170a:	461a      	mov	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4413      	add	r3, r2
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	041b      	lsls	r3, r3, #16
 8011714:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011716:	4313      	orrs	r3, r2
 8011718:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801171a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801171c:	2264      	movs	r2, #100	; 0x64
 801171e:	fb02 f303 	mul.w	r3, r2, r3
 8011722:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011724:	78fb      	ldrb	r3, [r7, #3]
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	70fa      	strb	r2, [r7, #3]
 801172a:	461a      	mov	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	4413      	add	r3, r2
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	f003 030f 	and.w	r3, r3, #15
 8011736:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801173a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801173e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011740:	4618      	mov	r0, r3
 8011742:	f002 fe66 	bl	8014412 <LoRaMacClassBPingSlotChannelReq>
 8011746:	4603      	mov	r3, r0
 8011748:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 801174c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8011750:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8011754:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011758:	2201      	movs	r2, #1
 801175a:	4619      	mov	r1, r3
 801175c:	2011      	movs	r0, #17
 801175e:	f002 ffc5 	bl	80146ec <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8011762:	e07d      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011764:	200d      	movs	r0, #13
 8011766:	f003 fae9 	bl	8014d3c <LoRaMacConfirmQueueIsCmdActive>
 801176a:	4603      	mov	r3, r0
 801176c:	2b00      	cmp	r3, #0
 801176e:	d077      	beq.n	8011860 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011770:	210d      	movs	r1, #13
 8011772:	2000      	movs	r0, #0
 8011774:	f003 fa56 	bl	8014c24 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011778:	2300      	movs	r3, #0
 801177a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011784:	78fb      	ldrb	r3, [r7, #3]
 8011786:	1c5a      	adds	r2, r3, #1
 8011788:	70fa      	strb	r2, [r7, #3]
 801178a:	461a      	mov	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	4413      	add	r3, r2
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011796:	78fb      	ldrb	r3, [r7, #3]
 8011798:	1c5a      	adds	r2, r3, #1
 801179a:	70fa      	strb	r2, [r7, #3]
 801179c:	461a      	mov	r2, r3
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	4413      	add	r3, r2
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	021b      	lsls	r3, r3, #8
 80117a6:	b21a      	sxth	r2, r3
 80117a8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80117ac:	4313      	orrs	r3, r2
 80117ae:	b21b      	sxth	r3, r3
 80117b0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80117b4:	78fb      	ldrb	r3, [r7, #3]
 80117b6:	1c5a      	adds	r2, r3, #1
 80117b8:	70fa      	strb	r2, [r7, #3]
 80117ba:	461a      	mov	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4413      	add	r3, r2
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80117c6:	4b2f      	ldr	r3, [pc, #188]	; (8011884 <ProcessMacCommands+0x9b0>)
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80117ce:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80117d2:	4618      	mov	r0, r3
 80117d4:	f002 fe29 	bl	801442a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80117d8:	e042      	b.n	8011860 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80117da:	2300      	movs	r3, #0
 80117dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80117e0:	78fb      	ldrb	r3, [r7, #3]
 80117e2:	1c5a      	adds	r2, r3, #1
 80117e4:	70fa      	strb	r2, [r7, #3]
 80117e6:	461a      	mov	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4413      	add	r3, r2
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80117f2:	78fb      	ldrb	r3, [r7, #3]
 80117f4:	1c5a      	adds	r2, r3, #1
 80117f6:	70fa      	strb	r2, [r7, #3]
 80117f8:	461a      	mov	r2, r3
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4413      	add	r3, r2
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	021b      	lsls	r3, r3, #8
 8011802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011806:	4313      	orrs	r3, r2
 8011808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801180c:	78fb      	ldrb	r3, [r7, #3]
 801180e:	1c5a      	adds	r2, r3, #1
 8011810:	70fa      	strb	r2, [r7, #3]
 8011812:	461a      	mov	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4413      	add	r3, r2
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	041b      	lsls	r3, r3, #16
 801181c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011820:	4313      	orrs	r3, r2
 8011822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8011826:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801182a:	2264      	movs	r2, #100	; 0x64
 801182c:	fb02 f303 	mul.w	r3, r2, r3
 8011830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011834:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011838:	f002 fe0a 	bl	8014450 <LoRaMacClassBBeaconFreqReq>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d003      	beq.n	801184a <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8011842:	2301      	movs	r3, #1
 8011844:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8011848:	e002      	b.n	8011850 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801184a:	2300      	movs	r3, #0
 801184c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011850:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011854:	2201      	movs	r2, #1
 8011856:	4619      	mov	r1, r3
 8011858:	2013      	movs	r0, #19
 801185a:	f002 ff47 	bl	80146ec <LoRaMacCommandsAddCmd>
                }
                break;
 801185e:	bf00      	nop
    while( macIndex < commandsSize )
 8011860:	78fa      	ldrb	r2, [r7, #3]
 8011862:	78bb      	ldrb	r3, [r7, #2]
 8011864:	429a      	cmp	r2, r3
 8011866:	f4ff ab57 	bcc.w	8010f18 <ProcessMacCommands+0x44>
 801186a:	e004      	b.n	8011876 <ProcessMacCommands+0x9a2>
        return;
 801186c:	bf00      	nop
 801186e:	e002      	b.n	8011876 <ProcessMacCommands+0x9a2>
            return;
 8011870:	bf00      	nop
 8011872:	e000      	b.n	8011876 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011874:	bf00      	nop
        }
    }
}
 8011876:	378c      	adds	r7, #140	; 0x8c
 8011878:	46bd      	mov	sp, r7
 801187a:	bd90      	pop	{r4, r7, pc}
 801187c:	12d53d80 	.word	0x12d53d80
 8011880:	20000d48 	.word	0x20000d48
 8011884:	20001df8 	.word	0x20001df8

08011888 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b08e      	sub	sp, #56	; 0x38
 801188c:	af02      	add	r7, sp, #8
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	607a      	str	r2, [r7, #4]
 8011892:	461a      	mov	r2, r3
 8011894:	460b      	mov	r3, r1
 8011896:	72fb      	strb	r3, [r7, #11]
 8011898:	4613      	mov	r3, r2
 801189a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801189c:	2303      	movs	r3, #3
 801189e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80118a2:	4b66      	ldr	r3, [pc, #408]	; (8011a3c <Send+0x1b4>)
 80118a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80118a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80118ac:	4b63      	ldr	r3, [pc, #396]	; (8011a3c <Send+0x1b4>)
 80118ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80118b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80118b6:	4b61      	ldr	r3, [pc, #388]	; (8011a3c <Send+0x1b4>)
 80118b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ba:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80118bc:	4b5f      	ldr	r3, [pc, #380]	; (8011a3c <Send+0x1b4>)
 80118be:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d101      	bne.n	80118ca <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80118c6:	2307      	movs	r3, #7
 80118c8:	e0b4      	b.n	8011a34 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80118ca:	4b5c      	ldr	r3, [pc, #368]	; (8011a3c <Send+0x1b4>)
 80118cc:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d102      	bne.n	80118da <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80118d4:	4b59      	ldr	r3, [pc, #356]	; (8011a3c <Send+0x1b4>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80118da:	2300      	movs	r3, #0
 80118dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80118e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80118e4:	f36f 0303 	bfc	r3, #0, #4
 80118e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80118ec:	4b53      	ldr	r3, [pc, #332]	; (8011a3c <Send+0x1b4>)
 80118ee:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80118f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80118f6:	f362 13c7 	bfi	r3, r2, #7, #1
 80118fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80118fe:	4b4f      	ldr	r3, [pc, #316]	; (8011a3c <Send+0x1b4>)
 8011900:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011904:	2b01      	cmp	r3, #1
 8011906:	d106      	bne.n	8011916 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011908:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801190c:	f043 0310 	orr.w	r3, r3, #16
 8011910:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8011914:	e005      	b.n	8011922 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011916:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801191a:	f36f 1304 	bfc	r3, #4, #1
 801191e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011922:	4b46      	ldr	r3, [pc, #280]	; (8011a3c <Send+0x1b4>)
 8011924:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011928:	2b00      	cmp	r3, #0
 801192a:	d005      	beq.n	8011938 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 801192c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011930:	f043 0320 	orr.w	r3, r3, #32
 8011934:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 8011938:	2301      	movs	r3, #1
 801193a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801193c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011940:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011944:	b2db      	uxtb	r3, r3
 8011946:	2b00      	cmp	r3, #0
 8011948:	bf14      	ite	ne
 801194a:	2301      	movne	r3, #1
 801194c:	2300      	moveq	r3, #0
 801194e:	b2db      	uxtb	r3, r3
 8011950:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011952:	4b3a      	ldr	r3, [pc, #232]	; (8011a3c <Send+0x1b4>)
 8011954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011956:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011958:	4b39      	ldr	r3, [pc, #228]	; (8011a40 <Send+0x1b8>)
 801195a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 801195e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011960:	4b37      	ldr	r3, [pc, #220]	; (8011a40 <Send+0x1b8>)
 8011962:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8011966:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011968:	4b34      	ldr	r3, [pc, #208]	; (8011a3c <Send+0x1b4>)
 801196a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801196e:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011972:	4b32      	ldr	r3, [pc, #200]	; (8011a3c <Send+0x1b4>)
 8011974:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011978:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801197c:	4b2f      	ldr	r3, [pc, #188]	; (8011a3c <Send+0x1b4>)
 801197e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011982:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011986:	4b2d      	ldr	r3, [pc, #180]	; (8011a3c <Send+0x1b4>)
 8011988:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801198c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011990:	4b2a      	ldr	r3, [pc, #168]	; (8011a3c <Send+0x1b4>)
 8011992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801199a:	f107 0014 	add.w	r0, r7, #20
 801199e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	4b27      	ldr	r3, [pc, #156]	; (8011a44 <Send+0x1bc>)
 80119a6:	4a28      	ldr	r2, [pc, #160]	; (8011a48 <Send+0x1c0>)
 80119a8:	4928      	ldr	r1, [pc, #160]	; (8011a4c <Send+0x1c4>)
 80119aa:	f002 fbcb 	bl	8014144 <LoRaMacAdrCalcNext>
 80119ae:	4603      	mov	r3, r0
 80119b0:	461a      	mov	r2, r3
 80119b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80119b6:	f362 1386 	bfi	r3, r2, #6, #1
 80119ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80119be:	7afa      	ldrb	r2, [r7, #11]
 80119c0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80119c4:	893b      	ldrh	r3, [r7, #8]
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	68f8      	ldr	r0, [r7, #12]
 80119cc:	f000 fc42 	bl	8012254 <PrepareFrame>
 80119d0:	4603      	mov	r3, r0
 80119d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80119d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d003      	beq.n	80119e6 <Send+0x15e>
 80119de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119e2:	2b0a      	cmp	r3, #10
 80119e4:	d107      	bne.n	80119f6 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80119e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80119ea:	4618      	mov	r0, r3
 80119ec:	f000 f96e 	bl	8011ccc <ScheduleTx>
 80119f0:	4603      	mov	r3, r0
 80119f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80119f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00a      	beq.n	8011a14 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80119fe:	4a0f      	ldr	r2, [pc, #60]	; (8011a3c <Send+0x1b4>)
 8011a00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011a04:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011a08:	4a0c      	ldr	r2, [pc, #48]	; (8011a3c <Send+0x1b4>)
 8011a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a0e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8011a12:	e00d      	b.n	8011a30 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011a14:	4b09      	ldr	r3, [pc, #36]	; (8011a3c <Send+0x1b4>)
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1e:	4a07      	ldr	r2, [pc, #28]	; (8011a3c <Send+0x1b4>)
 8011a20:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011a22:	f002 fedb 	bl	80147dc <LoRaMacCommandsRemoveNoneStickyCmds>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d001      	beq.n	8011a30 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a2c:	2313      	movs	r3, #19
 8011a2e:	e001      	b.n	8011a34 <Send+0x1ac>
        }
    }
    return status;
 8011a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3730      	adds	r7, #48	; 0x30
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	20001268 	.word	0x20001268
 8011a40:	20000d48 	.word	0x20000d48
 8011a44:	200012c8 	.word	0x200012c8
 8011a48:	200012a0 	.word	0x200012a0
 8011a4c:	200012a1 	.word	0x200012a1

08011a50 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	4603      	mov	r3, r0
 8011a58:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011a62:	2301      	movs	r3, #1
 8011a64:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011a66:	79fb      	ldrb	r3, [r7, #7]
 8011a68:	2bff      	cmp	r3, #255	; 0xff
 8011a6a:	d129      	bne.n	8011ac0 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	f7ff f90f 	bl	8010c90 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011a72:	4b1a      	ldr	r3, [pc, #104]	; (8011adc <SendReJoinReq+0x8c>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011a7a:	4b18      	ldr	r3, [pc, #96]	; (8011adc <SendReJoinReq+0x8c>)
 8011a7c:	4a18      	ldr	r2, [pc, #96]	; (8011ae0 <SendReJoinReq+0x90>)
 8011a7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011a82:	4b16      	ldr	r3, [pc, #88]	; (8011adc <SendReJoinReq+0x8c>)
 8011a84:	22ff      	movs	r2, #255	; 0xff
 8011a86:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011a8a:	7b3b      	ldrb	r3, [r7, #12]
 8011a8c:	f36f 1347 	bfc	r3, #5, #3
 8011a90:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011a92:	7b3a      	ldrb	r2, [r7, #12]
 8011a94:	4b11      	ldr	r3, [pc, #68]	; (8011adc <SendReJoinReq+0x8c>)
 8011a96:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011a9a:	f7fc f891 	bl	800dbc0 <SecureElementGetJoinEui>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2208      	movs	r2, #8
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	480f      	ldr	r0, [pc, #60]	; (8011ae4 <SendReJoinReq+0x94>)
 8011aa6:	f006 fe4a 	bl	801873e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011aaa:	f7fc f867 	bl	800db7c <SecureElementGetDevEui>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2208      	movs	r2, #8
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	480c      	ldr	r0, [pc, #48]	; (8011ae8 <SendReJoinReq+0x98>)
 8011ab6:	f006 fe42 	bl	801873e <memcpy1>

            allowDelayedTx = false;
 8011aba:	2300      	movs	r3, #0
 8011abc:	73fb      	strb	r3, [r7, #15]

            break;
 8011abe:	e002      	b.n	8011ac6 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ac0:	2302      	movs	r3, #2
 8011ac2:	73bb      	strb	r3, [r7, #14]
            break;
 8011ac4:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 f8ff 	bl	8011ccc <ScheduleTx>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	73bb      	strb	r3, [r7, #14]
    return status;
 8011ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	20000d48 	.word	0x20000d48
 8011ae0:	20000d4a 	.word	0x20000d4a
 8011ae4:	20000e56 	.word	0x20000e56
 8011ae8:	20000e5e 	.word	0x20000e5e

08011aec <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011af0:	f002 fc38 	bl	8014364 <LoRaMacClassBIsBeaconExpected>
 8011af4:	4603      	mov	r3, r0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d001      	beq.n	8011afe <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011afa:	230e      	movs	r3, #14
 8011afc:	e013      	b.n	8011b26 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011afe:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <CheckForClassBCollision+0x40>)
 8011b00:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d10d      	bne.n	8011b24 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011b08:	f002 fc33 	bl	8014372 <LoRaMacClassBIsPingExpected>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d001      	beq.n	8011b16 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b12:	230f      	movs	r3, #15
 8011b14:	e007      	b.n	8011b26 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011b16:	f002 fc33 	bl	8014380 <LoRaMacClassBIsMulticastExpected>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d001      	beq.n	8011b24 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b20:	230f      	movs	r3, #15
 8011b22:	e000      	b.n	8011b26 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011b24:	2300      	movs	r3, #0
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	20001268 	.word	0x20001268

08011b30 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011b30:	b590      	push	{r4, r7, lr}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b36:	4b2d      	ldr	r3, [pc, #180]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b38:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011b3c:	4b2b      	ldr	r3, [pc, #172]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b3e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011b42:	4b2a      	ldr	r3, [pc, #168]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b44:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8011b48:	4b28      	ldr	r3, [pc, #160]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b4a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011b4e:	4b27      	ldr	r3, [pc, #156]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011b54:	b25b      	sxtb	r3, r3
 8011b56:	f004 fc9a 	bl	801648e <RegionApplyDrOffset>
 8011b5a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b5c:	b259      	sxtb	r1, r3
 8011b5e:	4b23      	ldr	r3, [pc, #140]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b60:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011b64:	4b21      	ldr	r3, [pc, #132]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b68:	4821      	ldr	r0, [pc, #132]	; (8011bf0 <ComputeRxWindowParameters+0xc0>)
 8011b6a:	9000      	str	r0, [sp, #0]
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f004 fbb0 	bl	80162d2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b72:	4b1e      	ldr	r3, [pc, #120]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b74:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011b78:	4b1c      	ldr	r3, [pc, #112]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b7a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b7e:	b259      	sxtb	r1, r3
 8011b80:	4b1a      	ldr	r3, [pc, #104]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b82:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011b86:	4b19      	ldr	r3, [pc, #100]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b8a:	4c1a      	ldr	r4, [pc, #104]	; (8011bf4 <ComputeRxWindowParameters+0xc4>)
 8011b8c:	9400      	str	r4, [sp, #0]
 8011b8e:	f004 fba0 	bl	80162d2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011b92:	4b16      	ldr	r3, [pc, #88]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b96:	4a18      	ldr	r2, [pc, #96]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011b98:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011b9c:	4413      	add	r3, r2
 8011b9e:	4a16      	ldr	r2, [pc, #88]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011ba0:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011ba4:	4b11      	ldr	r3, [pc, #68]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ba8:	4a13      	ldr	r2, [pc, #76]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011baa:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8011bae:	4413      	add	r3, r2
 8011bb0:	4a11      	ldr	r2, [pc, #68]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011bb2:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011bb6:	4b0d      	ldr	r3, [pc, #52]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011bb8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d111      	bne.n	8011be4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011bc0:	4b0a      	ldr	r3, [pc, #40]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bc4:	4a0c      	ldr	r2, [pc, #48]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011bc6:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011bca:	4413      	add	r3, r2
 8011bcc:	4a0a      	ldr	r2, [pc, #40]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011bce:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011bd2:	4b06      	ldr	r3, [pc, #24]	; (8011bec <ComputeRxWindowParameters+0xbc>)
 8011bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bd6:	4a08      	ldr	r2, [pc, #32]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011bd8:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8011bdc:	4413      	add	r3, r2
 8011bde:	4a06      	ldr	r2, [pc, #24]	; (8011bf8 <ComputeRxWindowParameters+0xc8>)
 8011be0:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011be4:	bf00      	nop
 8011be6:	3704      	adds	r7, #4
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd90      	pop	{r4, r7, pc}
 8011bec:	20001268 	.word	0x20001268
 8011bf0:	20001100 	.word	0x20001100
 8011bf4:	20001118 	.word	0x20001118
 8011bf8:	20000d48 	.word	0x20000d48

08011bfc <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011c02:	2300      	movs	r3, #0
 8011c04:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011c06:	4b13      	ldr	r3, [pc, #76]	; (8011c54 <VerifyTxFrame+0x58>)
 8011c08:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d01b      	beq.n	8011c48 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011c10:	1d3b      	adds	r3, r7, #4
 8011c12:	4618      	mov	r0, r3
 8011c14:	f002 fe28 	bl	8014868 <LoRaMacCommandsGetSizeSerializedCmds>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d001      	beq.n	8011c22 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c1e:	2313      	movs	r3, #19
 8011c20:	e013      	b.n	8011c4a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011c22:	4b0d      	ldr	r3, [pc, #52]	; (8011c58 <VerifyTxFrame+0x5c>)
 8011c24:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011c28:	4a0a      	ldr	r2, [pc, #40]	; (8011c54 <VerifyTxFrame+0x58>)
 8011c2a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	b2d2      	uxtb	r2, r2
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7ff f926 	bl	8010e84 <ValidatePayloadLength>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	f083 0301 	eor.w	r3, r3, #1
 8011c3e:	b2db      	uxtb	r3, r3
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011c44:	2308      	movs	r3, #8
 8011c46:	e000      	b.n	8011c4a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	20001268 	.word	0x20001268
 8011c58:	20000d48 	.word	0x20000d48

08011c5c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011c62:	4b18      	ldr	r3, [pc, #96]	; (8011cc4 <SerializeTxFrame+0x68>)
 8011c64:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d002      	beq.n	8011c72 <SerializeTxFrame+0x16>
 8011c6c:	2b04      	cmp	r3, #4
 8011c6e:	d011      	beq.n	8011c94 <SerializeTxFrame+0x38>
 8011c70:	e021      	b.n	8011cb6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011c72:	4815      	ldr	r0, [pc, #84]	; (8011cc8 <SerializeTxFrame+0x6c>)
 8011c74:	f004 f92d 	bl	8015ed2 <LoRaMacSerializerJoinRequest>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011c7c:	79fb      	ldrb	r3, [r7, #7]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d001      	beq.n	8011c86 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c82:	2311      	movs	r3, #17
 8011c84:	e01a      	b.n	8011cbc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011c86:	4b0f      	ldr	r3, [pc, #60]	; (8011cc4 <SerializeTxFrame+0x68>)
 8011c88:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	; (8011cc4 <SerializeTxFrame+0x68>)
 8011c90:	801a      	strh	r2, [r3, #0]
            break;
 8011c92:	e012      	b.n	8011cba <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011c94:	480c      	ldr	r0, [pc, #48]	; (8011cc8 <SerializeTxFrame+0x6c>)
 8011c96:	f004 f99e 	bl	8015fd6 <LoRaMacSerializerData>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011c9e:	79fb      	ldrb	r3, [r7, #7]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d001      	beq.n	8011ca8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ca4:	2311      	movs	r3, #17
 8011ca6:	e009      	b.n	8011cbc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011ca8:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <SerializeTxFrame+0x68>)
 8011caa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	4b04      	ldr	r3, [pc, #16]	; (8011cc4 <SerializeTxFrame+0x68>)
 8011cb2:	801a      	strh	r2, [r3, #0]
            break;
 8011cb4:	e001      	b.n	8011cba <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011cb6:	2303      	movs	r3, #3
 8011cb8:	e000      	b.n	8011cbc <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	20000d48 	.word	0x20000d48
 8011cc8:	20000e50 	.word	0x20000e50

08011ccc <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b090      	sub	sp, #64	; 0x40
 8011cd0:	af02      	add	r7, sp, #8
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cd6:	2303      	movs	r3, #3
 8011cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011cdc:	f7ff ff06 	bl	8011aec <CheckForClassBCollision>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011ce6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d002      	beq.n	8011cf4 <ScheduleTx+0x28>
    {
        return status;
 8011cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cf2:	e08f      	b.n	8011e14 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011cf4:	f000 f8f4 	bl	8011ee0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011cf8:	f7ff ffb0 	bl	8011c5c <SerializeTxFrame>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d002      	beq.n	8011d10 <ScheduleTx+0x44>
    {
        return status;
 8011d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d0e:	e081      	b.n	8011e14 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011d10:	4b42      	ldr	r3, [pc, #264]	; (8011e1c <ScheduleTx+0x150>)
 8011d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d14:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d16:	4b41      	ldr	r3, [pc, #260]	; (8011e1c <ScheduleTx+0x150>)
 8011d18:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011d1c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011d1e:	4b3f      	ldr	r3, [pc, #252]	; (8011e1c <ScheduleTx+0x150>)
 8011d20:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8011d24:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f00a f91e 	bl	801bf6c <SysTimeGetMcuTime>
 8011d30:	4638      	mov	r0, r7
 8011d32:	4b3a      	ldr	r3, [pc, #232]	; (8011e1c <ScheduleTx+0x150>)
 8011d34:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8011d38:	9200      	str	r2, [sp, #0]
 8011d3a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8011d3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011d42:	ca06      	ldmia	r2, {r1, r2}
 8011d44:	f00a f873 	bl	801be2e <SysTimeSub>
 8011d48:	f107 0320 	add.w	r3, r7, #32
 8011d4c:	463a      	mov	r2, r7
 8011d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d52:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011d56:	4b31      	ldr	r3, [pc, #196]	; (8011e1c <ScheduleTx+0x150>)
 8011d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d5a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8011d62:	2301      	movs	r3, #1
 8011d64:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011d66:	4b2e      	ldr	r3, [pc, #184]	; (8011e20 <ScheduleTx+0x154>)
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011d6c:	4b2b      	ldr	r3, [pc, #172]	; (8011e1c <ScheduleTx+0x150>)
 8011d6e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d104      	bne.n	8011d80 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011d76:	2301      	movs	r3, #1
 8011d78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011d80:	4b26      	ldr	r3, [pc, #152]	; (8011e1c <ScheduleTx+0x150>)
 8011d82:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011d86:	f107 0114 	add.w	r1, r7, #20
 8011d8a:	4b26      	ldr	r3, [pc, #152]	; (8011e24 <ScheduleTx+0x158>)
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	4b26      	ldr	r3, [pc, #152]	; (8011e28 <ScheduleTx+0x15c>)
 8011d90:	4a26      	ldr	r2, [pc, #152]	; (8011e2c <ScheduleTx+0x160>)
 8011d92:	f004 fb64 	bl	801645e <RegionNextChannel>
 8011d96:	4603      	mov	r3, r0
 8011d98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d022      	beq.n	8011dea <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011da4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011da8:	2b0b      	cmp	r3, #11
 8011daa:	d11b      	bne.n	8011de4 <ScheduleTx+0x118>
 8011dac:	7bfb      	ldrb	r3, [r7, #15]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d018      	beq.n	8011de4 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011db2:	4b1b      	ldr	r3, [pc, #108]	; (8011e20 <ScheduleTx+0x154>)
 8011db4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d011      	beq.n	8011de0 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011dbc:	4b18      	ldr	r3, [pc, #96]	; (8011e20 <ScheduleTx+0x154>)
 8011dbe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dc2:	f043 0320 	orr.w	r3, r3, #32
 8011dc6:	4a16      	ldr	r2, [pc, #88]	; (8011e20 <ScheduleTx+0x154>)
 8011dc8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011dcc:	4b14      	ldr	r3, [pc, #80]	; (8011e20 <ScheduleTx+0x154>)
 8011dce:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	4816      	ldr	r0, [pc, #88]	; (8011e30 <ScheduleTx+0x164>)
 8011dd6:	f00a fe6d 	bl	801cab4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011dda:	4815      	ldr	r0, [pc, #84]	; (8011e30 <ScheduleTx+0x164>)
 8011ddc:	f00a fd8c 	bl	801c8f8 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011de0:	2300      	movs	r3, #0
 8011de2:	e017      	b.n	8011e14 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011de4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011de8:	e014      	b.n	8011e14 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011dea:	f7ff fea1 	bl	8011b30 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011dee:	f7ff ff05 	bl	8011bfc <VerifyTxFrame>
 8011df2:	4603      	mov	r3, r0
 8011df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d002      	beq.n	8011e06 <ScheduleTx+0x13a>
    {
        return status;
 8011e00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e04:	e006      	b.n	8011e14 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011e06:	4b06      	ldr	r3, [pc, #24]	; (8011e20 <ScheduleTx+0x154>)
 8011e08:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f000 fb3d 	bl	801248c <SendFrameOnChannel>
 8011e12:	4603      	mov	r3, r0
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3738      	adds	r7, #56	; 0x38
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	20001268 	.word	0x20001268
 8011e20:	20000d48 	.word	0x20000d48
 8011e24:	20001298 	.word	0x20001298
 8011e28:	200011e0 	.word	0x200011e0
 8011e2c:	20001167 	.word	0x20001167
 8011e30:	200010b0 	.word	0x200010b0

08011e34 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b084      	sub	sp, #16
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	460a      	mov	r2, r1
 8011e3e:	71fb      	strb	r3, [r7, #7]
 8011e40:	4613      	mov	r3, r2
 8011e42:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011e44:	2312      	movs	r3, #18
 8011e46:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011e4c:	4b22      	ldr	r3, [pc, #136]	; (8011ed8 <SecureFrame+0xa4>)
 8011e4e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d002      	beq.n	8011e5c <SecureFrame+0x28>
 8011e56:	2b04      	cmp	r3, #4
 8011e58:	d011      	beq.n	8011e7e <SecureFrame+0x4a>
 8011e5a:	e036      	b.n	8011eca <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011e5c:	481f      	ldr	r0, [pc, #124]	; (8011edc <SecureFrame+0xa8>)
 8011e5e:	f003 fc07 	bl	8015670 <LoRaMacCryptoPrepareJoinRequest>
 8011e62:	4603      	mov	r3, r0
 8011e64:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011e66:	7bfb      	ldrb	r3, [r7, #15]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e6c:	2311      	movs	r3, #17
 8011e6e:	e02f      	b.n	8011ed0 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011e70:	4b19      	ldr	r3, [pc, #100]	; (8011ed8 <SecureFrame+0xa4>)
 8011e72:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	4b17      	ldr	r3, [pc, #92]	; (8011ed8 <SecureFrame+0xa4>)
 8011e7a:	801a      	strh	r2, [r3, #0]
            break;
 8011e7c:	e027      	b.n	8011ece <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011e7e:	f107 0308 	add.w	r3, r7, #8
 8011e82:	4618      	mov	r0, r3
 8011e84:	f003 fb38 	bl	80154f8 <LoRaMacCryptoGetFCntUp>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d001      	beq.n	8011e92 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011e8e:	2312      	movs	r3, #18
 8011e90:	e01e      	b.n	8011ed0 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8011e92:	4b11      	ldr	r3, [pc, #68]	; (8011ed8 <SecureFrame+0xa4>)
 8011e94:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d002      	beq.n	8011ea2 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011ea2:	68b8      	ldr	r0, [r7, #8]
 8011ea4:	79ba      	ldrb	r2, [r7, #6]
 8011ea6:	79f9      	ldrb	r1, [r7, #7]
 8011ea8:	4b0c      	ldr	r3, [pc, #48]	; (8011edc <SecureFrame+0xa8>)
 8011eaa:	f003 fcf3 	bl	8015894 <LoRaMacCryptoSecureMessage>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d001      	beq.n	8011ebc <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eb8:	2311      	movs	r3, #17
 8011eba:	e009      	b.n	8011ed0 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011ebc:	4b06      	ldr	r3, [pc, #24]	; (8011ed8 <SecureFrame+0xa4>)
 8011ebe:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011ec2:	b29a      	uxth	r2, r3
 8011ec4:	4b04      	ldr	r3, [pc, #16]	; (8011ed8 <SecureFrame+0xa4>)
 8011ec6:	801a      	strh	r2, [r3, #0]
            break;
 8011ec8:	e001      	b.n	8011ece <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011eca:	2303      	movs	r3, #3
 8011ecc:	e000      	b.n	8011ed0 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	20000d48 	.word	0x20000d48
 8011edc:	20000e50 	.word	0x20000e50

08011ee0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011ee4:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <CalculateBackOff+0x2c>)
 8011ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d10a      	bne.n	8011f02 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <CalculateBackOff+0x2c>)
 8011eee:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	4a06      	ldr	r2, [pc, #24]	; (8011f10 <CalculateBackOff+0x30>)
 8011ef6:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
 8011efa:	fb02 f303 	mul.w	r3, r2, r3
 8011efe:	4a03      	ldr	r2, [pc, #12]	; (8011f0c <CalculateBackOff+0x2c>)
 8011f00:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8011f02:	bf00      	nop
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bc80      	pop	{r7}
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop
 8011f0c:	20001268 	.word	0x20001268
 8011f10:	20000d48 	.word	0x20000d48

08011f14 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	7139      	strb	r1, [r7, #4]
 8011f1e:	71fb      	strb	r3, [r7, #7]
 8011f20:	4613      	mov	r3, r2
 8011f22:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d002      	beq.n	8011f30 <RemoveMacCommands+0x1c>
 8011f2a:	79fb      	ldrb	r3, [r7, #7]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d10d      	bne.n	8011f4c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011f30:	79bb      	ldrb	r3, [r7, #6]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d108      	bne.n	8011f48 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011f36:	793b      	ldrb	r3, [r7, #4]
 8011f38:	f003 0320 	and.w	r3, r3, #32
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d004      	beq.n	8011f4c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f42:	f002 fc6f 	bl	8014824 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011f46:	e001      	b.n	8011f4c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f48:	f002 fc6c 	bl	8014824 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011f54:	b5b0      	push	{r4, r5, r7, lr}
 8011f56:	b090      	sub	sp, #64	; 0x40
 8011f58:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011f5a:	4b70      	ldr	r3, [pc, #448]	; (801211c <ResetMacParameters+0x1c8>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011f62:	4b6e      	ldr	r3, [pc, #440]	; (801211c <ResetMacParameters+0x1c8>)
 8011f64:	2200      	movs	r2, #0
 8011f66:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011f68:	4b6d      	ldr	r3, [pc, #436]	; (8012120 <ResetMacParameters+0x1cc>)
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8011f70:	4b6b      	ldr	r3, [pc, #428]	; (8012120 <ResetMacParameters+0x1cc>)
 8011f72:	2200      	movs	r2, #0
 8011f74:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8011f78:	4b69      	ldr	r3, [pc, #420]	; (8012120 <ResetMacParameters+0x1cc>)
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011f80:	4b66      	ldr	r3, [pc, #408]	; (801211c <ResetMacParameters+0x1c8>)
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011f88:	4b64      	ldr	r3, [pc, #400]	; (801211c <ResetMacParameters+0x1c8>)
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011f90:	4b62      	ldr	r3, [pc, #392]	; (801211c <ResetMacParameters+0x1c8>)
 8011f92:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011f96:	4b61      	ldr	r3, [pc, #388]	; (801211c <ResetMacParameters+0x1c8>)
 8011f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011f9c:	4b5f      	ldr	r3, [pc, #380]	; (801211c <ResetMacParameters+0x1c8>)
 8011f9e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8011fa2:	4b5e      	ldr	r3, [pc, #376]	; (801211c <ResetMacParameters+0x1c8>)
 8011fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011fa8:	4b5c      	ldr	r3, [pc, #368]	; (801211c <ResetMacParameters+0x1c8>)
 8011faa:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8011fae:	4b5b      	ldr	r3, [pc, #364]	; (801211c <ResetMacParameters+0x1c8>)
 8011fb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011fb4:	4b59      	ldr	r3, [pc, #356]	; (801211c <ResetMacParameters+0x1c8>)
 8011fb6:	4a59      	ldr	r2, [pc, #356]	; (801211c <ResetMacParameters+0x1c8>)
 8011fb8:	3364      	adds	r3, #100	; 0x64
 8011fba:	32a8      	adds	r2, #168	; 0xa8
 8011fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fc0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011fc4:	4b55      	ldr	r3, [pc, #340]	; (801211c <ResetMacParameters+0x1c8>)
 8011fc6:	4a55      	ldr	r2, [pc, #340]	; (801211c <ResetMacParameters+0x1c8>)
 8011fc8:	336c      	adds	r3, #108	; 0x6c
 8011fca:	32b0      	adds	r2, #176	; 0xb0
 8011fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fd0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011fd4:	4b51      	ldr	r3, [pc, #324]	; (801211c <ResetMacParameters+0x1c8>)
 8011fd6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011fda:	4b50      	ldr	r3, [pc, #320]	; (801211c <ResetMacParameters+0x1c8>)
 8011fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011fe0:	4b4e      	ldr	r3, [pc, #312]	; (801211c <ResetMacParameters+0x1c8>)
 8011fe2:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8011fe6:	4b4d      	ldr	r3, [pc, #308]	; (801211c <ResetMacParameters+0x1c8>)
 8011fe8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011fec:	4b4b      	ldr	r3, [pc, #300]	; (801211c <ResetMacParameters+0x1c8>)
 8011fee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011ff2:	4a4a      	ldr	r2, [pc, #296]	; (801211c <ResetMacParameters+0x1c8>)
 8011ff4:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011ff6:	4b49      	ldr	r3, [pc, #292]	; (801211c <ResetMacParameters+0x1c8>)
 8011ff8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011ffc:	4a47      	ldr	r2, [pc, #284]	; (801211c <ResetMacParameters+0x1c8>)
 8011ffe:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8012000:	4b47      	ldr	r3, [pc, #284]	; (8012120 <ResetMacParameters+0x1cc>)
 8012002:	2200      	movs	r2, #0
 8012004:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8012008:	4b44      	ldr	r3, [pc, #272]	; (801211c <ResetMacParameters+0x1c8>)
 801200a:	2200      	movs	r2, #0
 801200c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012010:	4b42      	ldr	r3, [pc, #264]	; (801211c <ResetMacParameters+0x1c8>)
 8012012:	2200      	movs	r2, #0
 8012014:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8012018:	4b40      	ldr	r3, [pc, #256]	; (801211c <ResetMacParameters+0x1c8>)
 801201a:	2200      	movs	r2, #0
 801201c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012020:	2301      	movs	r3, #1
 8012022:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012024:	4b3f      	ldr	r3, [pc, #252]	; (8012124 <ResetMacParameters+0x1d0>)
 8012026:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012028:	4b3f      	ldr	r3, [pc, #252]	; (8012128 <ResetMacParameters+0x1d4>)
 801202a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 801202c:	4b3f      	ldr	r3, [pc, #252]	; (801212c <ResetMacParameters+0x1d8>)
 801202e:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012030:	4b3a      	ldr	r3, [pc, #232]	; (801211c <ResetMacParameters+0x1c8>)
 8012032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012036:	1d3a      	adds	r2, r7, #4
 8012038:	4611      	mov	r1, r2
 801203a:	4618      	mov	r0, r3
 801203c:	f004 f8fb 	bl	8016236 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012040:	4b37      	ldr	r3, [pc, #220]	; (8012120 <ResetMacParameters+0x1cc>)
 8012042:	2200      	movs	r2, #0
 8012044:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012048:	4b35      	ldr	r3, [pc, #212]	; (8012120 <ResetMacParameters+0x1cc>)
 801204a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 801204e:	4b34      	ldr	r3, [pc, #208]	; (8012120 <ResetMacParameters+0x1cc>)
 8012050:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012054:	4b31      	ldr	r3, [pc, #196]	; (801211c <ResetMacParameters+0x1c8>)
 8012056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012058:	4a31      	ldr	r2, [pc, #196]	; (8012120 <ResetMacParameters+0x1cc>)
 801205a:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801205e:	4b2f      	ldr	r3, [pc, #188]	; (801211c <ResetMacParameters+0x1c8>)
 8012060:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012064:	4b2e      	ldr	r3, [pc, #184]	; (8012120 <ResetMacParameters+0x1cc>)
 8012066:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801206a:	4b2c      	ldr	r3, [pc, #176]	; (801211c <ResetMacParameters+0x1c8>)
 801206c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012070:	4b2b      	ldr	r3, [pc, #172]	; (8012120 <ResetMacParameters+0x1cc>)
 8012072:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012076:	4b2a      	ldr	r3, [pc, #168]	; (8012120 <ResetMacParameters+0x1cc>)
 8012078:	2200      	movs	r2, #0
 801207a:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801207e:	4b28      	ldr	r3, [pc, #160]	; (8012120 <ResetMacParameters+0x1cc>)
 8012080:	2201      	movs	r2, #1
 8012082:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012086:	4b25      	ldr	r3, [pc, #148]	; (801211c <ResetMacParameters+0x1c8>)
 8012088:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 801208c:	4b24      	ldr	r3, [pc, #144]	; (8012120 <ResetMacParameters+0x1cc>)
 801208e:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012092:	4a23      	ldr	r2, [pc, #140]	; (8012120 <ResetMacParameters+0x1cc>)
 8012094:	4b22      	ldr	r3, [pc, #136]	; (8012120 <ResetMacParameters+0x1cc>)
 8012096:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 801209a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80120a6:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80120aa:	4b1d      	ldr	r3, [pc, #116]	; (8012120 <ResetMacParameters+0x1cc>)
 80120ac:	2201      	movs	r2, #1
 80120ae:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80120b2:	4b1b      	ldr	r3, [pc, #108]	; (8012120 <ResetMacParameters+0x1cc>)
 80120b4:	2202      	movs	r2, #2
 80120b6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80120be:	2300      	movs	r3, #0
 80120c0:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80120c2:	4b17      	ldr	r3, [pc, #92]	; (8012120 <ResetMacParameters+0x1cc>)
 80120c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d009      	beq.n	80120e0 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80120cc:	4b14      	ldr	r3, [pc, #80]	; (8012120 <ResetMacParameters+0x1cc>)
 80120ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80120d6:	4b12      	ldr	r3, [pc, #72]	; (8012120 <ResetMacParameters+0x1cc>)
 80120d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80120dc:	691b      	ldr	r3, [r3, #16]
 80120de:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80120e0:	4b13      	ldr	r3, [pc, #76]	; (8012130 <ResetMacParameters+0x1dc>)
 80120e2:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80120e4:	4b13      	ldr	r3, [pc, #76]	; (8012134 <ResetMacParameters+0x1e0>)
 80120e6:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80120e8:	4b13      	ldr	r3, [pc, #76]	; (8012138 <ResetMacParameters+0x1e4>)
 80120ea:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80120ec:	4b13      	ldr	r3, [pc, #76]	; (801213c <ResetMacParameters+0x1e8>)
 80120ee:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80120f0:	4b13      	ldr	r3, [pc, #76]	; (8012140 <ResetMacParameters+0x1ec>)
 80120f2:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80120f4:	4b13      	ldr	r3, [pc, #76]	; (8012144 <ResetMacParameters+0x1f0>)
 80120f6:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80120f8:	4b13      	ldr	r3, [pc, #76]	; (8012148 <ResetMacParameters+0x1f4>)
 80120fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80120fc:	4b13      	ldr	r3, [pc, #76]	; (801214c <ResetMacParameters+0x1f8>)
 80120fe:	633b      	str	r3, [r7, #48]	; 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8012100:	4b13      	ldr	r3, [pc, #76]	; (8012150 <ResetMacParameters+0x1fc>)
 8012102:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8012104:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8012108:	f107 0314 	add.w	r3, r7, #20
 801210c:	4a11      	ldr	r2, [pc, #68]	; (8012154 <ResetMacParameters+0x200>)
 801210e:	4618      	mov	r0, r3
 8012110:	f002 f8d1 	bl	80142b6 <LoRaMacClassBInit>
}
 8012114:	bf00      	nop
 8012116:	3740      	adds	r7, #64	; 0x40
 8012118:	46bd      	mov	sp, r7
 801211a:	bdb0      	pop	{r4, r5, r7, pc}
 801211c:	20001268 	.word	0x20001268
 8012120:	20000d48 	.word	0x20000d48
 8012124:	2000144c 	.word	0x2000144c
 8012128:	20001450 	.word	0x20001450
 801212c:	20001d60 	.word	0x20001d60
 8012130:	200011b4 	.word	0x200011b4
 8012134:	2000116c 	.word	0x2000116c
 8012138:	200011a0 	.word	0x200011a0
 801213c:	200011dd 	.word	0x200011dd
 8012140:	2000133c 	.word	0x2000133c
 8012144:	200012a8 	.word	0x200012a8
 8012148:	200012ac 	.word	0x200012ac
 801214c:	20001340 	.word	0x20001340
 8012150:	20001384 	.word	0x20001384
 8012154:	200017cc 	.word	0x200017cc

08012158 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f00a fc36 	bl	801c9d4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012168:	4b11      	ldr	r3, [pc, #68]	; (80121b0 <RxWindowSetup+0x58>)
 801216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801216c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801216e:	4b11      	ldr	r3, [pc, #68]	; (80121b4 <RxWindowSetup+0x5c>)
 8012170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012174:	4a10      	ldr	r2, [pc, #64]	; (80121b8 <RxWindowSetup+0x60>)
 8012176:	6839      	ldr	r1, [r7, #0]
 8012178:	4618      	mov	r0, r3
 801217a:	f004 f8c4 	bl	8016306 <RegionRxConfig>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d010      	beq.n	80121a6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012184:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <RxWindowSetup+0x64>)
 8012186:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 801218a:	4b0c      	ldr	r3, [pc, #48]	; (80121bc <RxWindowSetup+0x64>)
 801218c:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012190:	4b07      	ldr	r3, [pc, #28]	; (80121b0 <RxWindowSetup+0x58>)
 8012192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012194:	4a07      	ldr	r2, [pc, #28]	; (80121b4 <RxWindowSetup+0x5c>)
 8012196:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8012198:	4610      	mov	r0, r2
 801219a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	7cda      	ldrb	r2, [r3, #19]
 80121a0:	4b06      	ldr	r3, [pc, #24]	; (80121bc <RxWindowSetup+0x64>)
 80121a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80121a6:	bf00      	nop
 80121a8:	3708      	adds	r7, #8
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	0801dea4 	.word	0x0801dea4
 80121b4:	20001268 	.word	0x20001268
 80121b8:	20001170 	.word	0x20001170
 80121bc:	20000d48 	.word	0x20000d48

080121c0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80121c0:	b590      	push	{r4, r7, lr}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80121c6:	4b1e      	ldr	r3, [pc, #120]	; (8012240 <OpenContinuousRxCWindow+0x80>)
 80121c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80121cc:	4b1c      	ldr	r3, [pc, #112]	; (8012240 <OpenContinuousRxCWindow+0x80>)
 80121ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80121d2:	b259      	sxtb	r1, r3
 80121d4:	4b1a      	ldr	r3, [pc, #104]	; (8012240 <OpenContinuousRxCWindow+0x80>)
 80121d6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80121da:	4b19      	ldr	r3, [pc, #100]	; (8012240 <OpenContinuousRxCWindow+0x80>)
 80121dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121de:	4c19      	ldr	r4, [pc, #100]	; (8012244 <OpenContinuousRxCWindow+0x84>)
 80121e0:	9400      	str	r4, [sp, #0]
 80121e2:	f004 f876 	bl	80162d2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80121e6:	4b18      	ldr	r3, [pc, #96]	; (8012248 <OpenContinuousRxCWindow+0x88>)
 80121e8:	2202      	movs	r2, #2
 80121ea:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80121ee:	4b14      	ldr	r3, [pc, #80]	; (8012240 <OpenContinuousRxCWindow+0x80>)
 80121f0:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80121f4:	4b14      	ldr	r3, [pc, #80]	; (8012248 <OpenContinuousRxCWindow+0x88>)
 80121f6:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80121fa:	4b13      	ldr	r3, [pc, #76]	; (8012248 <OpenContinuousRxCWindow+0x88>)
 80121fc:	2201      	movs	r2, #1
 80121fe:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012202:	4b0f      	ldr	r3, [pc, #60]	; (8012240 <OpenContinuousRxCWindow+0x80>)
 8012204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012208:	4a10      	ldr	r2, [pc, #64]	; (801224c <OpenContinuousRxCWindow+0x8c>)
 801220a:	490e      	ldr	r1, [pc, #56]	; (8012244 <OpenContinuousRxCWindow+0x84>)
 801220c:	4618      	mov	r0, r3
 801220e:	f004 f87a 	bl	8016306 <RegionRxConfig>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00f      	beq.n	8012238 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012218:	4b0b      	ldr	r3, [pc, #44]	; (8012248 <OpenContinuousRxCWindow+0x88>)
 801221a:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 801221e:	4b0a      	ldr	r3, [pc, #40]	; (8012248 <OpenContinuousRxCWindow+0x88>)
 8012220:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8012224:	4b0a      	ldr	r3, [pc, #40]	; (8012250 <OpenContinuousRxCWindow+0x90>)
 8012226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012228:	2000      	movs	r0, #0
 801222a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801222c:	4b06      	ldr	r3, [pc, #24]	; (8012248 <OpenContinuousRxCWindow+0x88>)
 801222e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8012232:	4b05      	ldr	r3, [pc, #20]	; (8012248 <OpenContinuousRxCWindow+0x88>)
 8012234:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8012238:	bf00      	nop
 801223a:	3704      	adds	r7, #4
 801223c:	46bd      	mov	sp, r7
 801223e:	bd90      	pop	{r4, r7, pc}
 8012240:	20001268 	.word	0x20001268
 8012244:	20001130 	.word	0x20001130
 8012248:	20000d48 	.word	0x20000d48
 801224c:	20001170 	.word	0x20001170
 8012250:	0801dea4 	.word	0x0801dea4

08012254 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b088      	sub	sp, #32
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	603b      	str	r3, [r7, #0]
 8012260:	4613      	mov	r3, r2
 8012262:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012264:	4b82      	ldr	r3, [pc, #520]	; (8012470 <PrepareFrame+0x21c>)
 8012266:	2200      	movs	r2, #0
 8012268:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801226a:	4b81      	ldr	r3, [pc, #516]	; (8012470 <PrepareFrame+0x21c>)
 801226c:	2200      	movs	r2, #0
 801226e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012276:	2300      	movs	r3, #0
 8012278:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012284:	2300      	movs	r3, #0
 8012286:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012288:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801228a:	461a      	mov	r2, r3
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	4879      	ldr	r0, [pc, #484]	; (8012474 <PrepareFrame+0x220>)
 8012290:	f006 fa55 	bl	801873e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012294:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012296:	b2da      	uxtb	r2, r3
 8012298:	4b75      	ldr	r3, [pc, #468]	; (8012470 <PrepareFrame+0x21c>)
 801229a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	781a      	ldrb	r2, [r3, #0]
 80122a2:	4b73      	ldr	r3, [pc, #460]	; (8012470 <PrepareFrame+0x21c>)
 80122a4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80122ae:	b2db      	uxtb	r3, r3
 80122b0:	2b07      	cmp	r3, #7
 80122b2:	f000 80b9 	beq.w	8012428 <PrepareFrame+0x1d4>
 80122b6:	2b07      	cmp	r3, #7
 80122b8:	f300 80d0 	bgt.w	801245c <PrepareFrame+0x208>
 80122bc:	2b02      	cmp	r3, #2
 80122be:	d006      	beq.n	80122ce <PrepareFrame+0x7a>
 80122c0:	2b04      	cmp	r3, #4
 80122c2:	f040 80cb 	bne.w	801245c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80122c6:	4b6a      	ldr	r3, [pc, #424]	; (8012470 <PrepareFrame+0x21c>)
 80122c8:	2201      	movs	r2, #1
 80122ca:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80122ce:	4b68      	ldr	r3, [pc, #416]	; (8012470 <PrepareFrame+0x21c>)
 80122d0:	2204      	movs	r2, #4
 80122d2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80122d6:	4b66      	ldr	r3, [pc, #408]	; (8012470 <PrepareFrame+0x21c>)
 80122d8:	4a67      	ldr	r2, [pc, #412]	; (8012478 <PrepareFrame+0x224>)
 80122da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80122de:	4b64      	ldr	r3, [pc, #400]	; (8012470 <PrepareFrame+0x21c>)
 80122e0:	22ff      	movs	r2, #255	; 0xff
 80122e2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	781a      	ldrb	r2, [r3, #0]
 80122ea:	4b61      	ldr	r3, [pc, #388]	; (8012470 <PrepareFrame+0x21c>)
 80122ec:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80122f0:	4a5f      	ldr	r2, [pc, #380]	; (8012470 <PrepareFrame+0x21c>)
 80122f2:	79fb      	ldrb	r3, [r7, #7]
 80122f4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80122f8:	4b60      	ldr	r3, [pc, #384]	; (801247c <PrepareFrame+0x228>)
 80122fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80122fe:	4a5c      	ldr	r2, [pc, #368]	; (8012470 <PrepareFrame+0x21c>)
 8012300:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	781a      	ldrb	r2, [r3, #0]
 8012308:	4b59      	ldr	r3, [pc, #356]	; (8012470 <PrepareFrame+0x21c>)
 801230a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801230e:	4b58      	ldr	r3, [pc, #352]	; (8012470 <PrepareFrame+0x21c>)
 8012310:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8012314:	4b56      	ldr	r3, [pc, #344]	; (8012470 <PrepareFrame+0x21c>)
 8012316:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801231a:	4b55      	ldr	r3, [pc, #340]	; (8012470 <PrepareFrame+0x21c>)
 801231c:	4a55      	ldr	r2, [pc, #340]	; (8012474 <PrepareFrame+0x220>)
 801231e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012322:	f107 0318 	add.w	r3, r7, #24
 8012326:	4618      	mov	r0, r3
 8012328:	f003 f8e6 	bl	80154f8 <LoRaMacCryptoGetFCntUp>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d001      	beq.n	8012336 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012332:	2312      	movs	r3, #18
 8012334:	e098      	b.n	8012468 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	b29a      	uxth	r2, r3
 801233a:	4b4d      	ldr	r3, [pc, #308]	; (8012470 <PrepareFrame+0x21c>)
 801233c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8012340:	4b4b      	ldr	r3, [pc, #300]	; (8012470 <PrepareFrame+0x21c>)
 8012342:	2200      	movs	r2, #0
 8012344:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012348:	4b49      	ldr	r3, [pc, #292]	; (8012470 <PrepareFrame+0x21c>)
 801234a:	2200      	movs	r2, #0
 801234c:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	4a47      	ldr	r2, [pc, #284]	; (8012470 <PrepareFrame+0x21c>)
 8012354:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012358:	f107 0314 	add.w	r3, r7, #20
 801235c:	4618      	mov	r0, r3
 801235e:	f002 fa83 	bl	8014868 <LoRaMacCommandsGetSizeSerializedCmds>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d001      	beq.n	801236c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012368:	2313      	movs	r3, #19
 801236a:	e07d      	b.n	8012468 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d076      	beq.n	8012460 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8012372:	4b42      	ldr	r3, [pc, #264]	; (801247c <PrepareFrame+0x228>)
 8012374:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012378:	4618      	mov	r0, r3
 801237a:	f7fe fd5b 	bl	8010e34 <GetMaxAppPayloadWithoutFOptsLength>
 801237e:	4603      	mov	r3, r0
 8012380:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012382:	4b3b      	ldr	r3, [pc, #236]	; (8012470 <PrepareFrame+0x21c>)
 8012384:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012388:	2b00      	cmp	r3, #0
 801238a:	d01d      	beq.n	80123c8 <PrepareFrame+0x174>
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	2b0f      	cmp	r3, #15
 8012390:	d81a      	bhi.n	80123c8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012392:	f107 0314 	add.w	r3, r7, #20
 8012396:	4a3a      	ldr	r2, [pc, #232]	; (8012480 <PrepareFrame+0x22c>)
 8012398:	4619      	mov	r1, r3
 801239a:	200f      	movs	r0, #15
 801239c:	f002 fa7a 	bl	8014894 <LoRaMacCommandsSerializeCmds>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d001      	beq.n	80123aa <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80123a6:	2313      	movs	r3, #19
 80123a8:	e05e      	b.n	8012468 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	f003 030f 	and.w	r3, r3, #15
 80123b0:	b2d9      	uxtb	r1, r3
 80123b2:	68ba      	ldr	r2, [r7, #8]
 80123b4:	7813      	ldrb	r3, [r2, #0]
 80123b6:	f361 0303 	bfi	r3, r1, #0, #4
 80123ba:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	781a      	ldrb	r2, [r3, #0]
 80123c0:	4b2b      	ldr	r3, [pc, #172]	; (8012470 <PrepareFrame+0x21c>)
 80123c2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80123c6:	e04b      	b.n	8012460 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80123c8:	4b29      	ldr	r3, [pc, #164]	; (8012470 <PrepareFrame+0x21c>)
 80123ca:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d010      	beq.n	80123f4 <PrepareFrame+0x1a0>
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	2b0f      	cmp	r3, #15
 80123d6:	d90d      	bls.n	80123f4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80123d8:	7ffb      	ldrb	r3, [r7, #31]
 80123da:	f107 0114 	add.w	r1, r7, #20
 80123de:	4a29      	ldr	r2, [pc, #164]	; (8012484 <PrepareFrame+0x230>)
 80123e0:	4618      	mov	r0, r3
 80123e2:	f002 fa57 	bl	8014894 <LoRaMacCommandsSerializeCmds>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80123ec:	2313      	movs	r3, #19
 80123ee:	e03b      	b.n	8012468 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80123f0:	230a      	movs	r3, #10
 80123f2:	e039      	b.n	8012468 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80123f4:	7ffb      	ldrb	r3, [r7, #31]
 80123f6:	f107 0114 	add.w	r1, r7, #20
 80123fa:	4a22      	ldr	r2, [pc, #136]	; (8012484 <PrepareFrame+0x230>)
 80123fc:	4618      	mov	r0, r3
 80123fe:	f002 fa49 	bl	8014894 <LoRaMacCommandsSerializeCmds>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012408:	2313      	movs	r3, #19
 801240a:	e02d      	b.n	8012468 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801240c:	4b18      	ldr	r3, [pc, #96]	; (8012470 <PrepareFrame+0x21c>)
 801240e:	2200      	movs	r2, #0
 8012410:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012414:	4b16      	ldr	r3, [pc, #88]	; (8012470 <PrepareFrame+0x21c>)
 8012416:	4a1b      	ldr	r2, [pc, #108]	; (8012484 <PrepareFrame+0x230>)
 8012418:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	b2da      	uxtb	r2, r3
 8012420:	4b13      	ldr	r3, [pc, #76]	; (8012470 <PrepareFrame+0x21c>)
 8012422:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8012426:	e01b      	b.n	8012460 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d01a      	beq.n	8012464 <PrepareFrame+0x210>
 801242e:	4b10      	ldr	r3, [pc, #64]	; (8012470 <PrepareFrame+0x21c>)
 8012430:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012434:	2b00      	cmp	r3, #0
 8012436:	d015      	beq.n	8012464 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012438:	4813      	ldr	r0, [pc, #76]	; (8012488 <PrepareFrame+0x234>)
 801243a:	4b0d      	ldr	r3, [pc, #52]	; (8012470 <PrepareFrame+0x21c>)
 801243c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012440:	b29b      	uxth	r3, r3
 8012442:	461a      	mov	r2, r3
 8012444:	6839      	ldr	r1, [r7, #0]
 8012446:	f006 f97a 	bl	801873e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801244a:	4b09      	ldr	r3, [pc, #36]	; (8012470 <PrepareFrame+0x21c>)
 801244c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012450:	b29b      	uxth	r3, r3
 8012452:	3301      	adds	r3, #1
 8012454:	b29a      	uxth	r2, r3
 8012456:	4b06      	ldr	r3, [pc, #24]	; (8012470 <PrepareFrame+0x21c>)
 8012458:	801a      	strh	r2, [r3, #0]
            }
            break;
 801245a:	e003      	b.n	8012464 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801245c:	2302      	movs	r3, #2
 801245e:	e003      	b.n	8012468 <PrepareFrame+0x214>
            break;
 8012460:	bf00      	nop
 8012462:	e000      	b.n	8012466 <PrepareFrame+0x212>
            break;
 8012464:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012466:	2300      	movs	r3, #0
}
 8012468:	4618      	mov	r0, r3
 801246a:	3720      	adds	r7, #32
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	20000d48 	.word	0x20000d48
 8012474:	20000e80 	.word	0x20000e80
 8012478:	20000d4a 	.word	0x20000d4a
 801247c:	20001268 	.word	0x20001268
 8012480:	20000e60 	.word	0x20000e60
 8012484:	200011e8 	.word	0x200011e8
 8012488:	20000d4b 	.word	0x20000d4b

0801248c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b08a      	sub	sp, #40	; 0x28
 8012490:	af00      	add	r7, sp, #0
 8012492:	4603      	mov	r3, r0
 8012494:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012496:	2303      	movs	r3, #3
 8012498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801249c:	2300      	movs	r3, #0
 801249e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80124a0:	79fb      	ldrb	r3, [r7, #7]
 80124a2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80124a4:	4b4a      	ldr	r3, [pc, #296]	; (80125d0 <SendFrameOnChannel+0x144>)
 80124a6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80124aa:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80124ac:	4b48      	ldr	r3, [pc, #288]	; (80125d0 <SendFrameOnChannel+0x144>)
 80124ae:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80124b2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80124b4:	4b46      	ldr	r3, [pc, #280]	; (80125d0 <SendFrameOnChannel+0x144>)
 80124b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124b8:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80124ba:	4b45      	ldr	r3, [pc, #276]	; (80125d0 <SendFrameOnChannel+0x144>)
 80124bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80124be:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80124c0:	4b44      	ldr	r3, [pc, #272]	; (80125d4 <SendFrameOnChannel+0x148>)
 80124c2:	881b      	ldrh	r3, [r3, #0]
 80124c4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80124c6:	4b42      	ldr	r3, [pc, #264]	; (80125d0 <SendFrameOnChannel+0x144>)
 80124c8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80124cc:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80124ce:	4b40      	ldr	r3, [pc, #256]	; (80125d0 <SendFrameOnChannel+0x144>)
 80124d0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80124d4:	f107 020f 	add.w	r2, r7, #15
 80124d8:	f107 0110 	add.w	r1, r7, #16
 80124dc:	4b3e      	ldr	r3, [pc, #248]	; (80125d8 <SendFrameOnChannel+0x14c>)
 80124de:	f003 ff27 	bl	8016330 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80124e2:	4b3c      	ldr	r3, [pc, #240]	; (80125d4 <SendFrameOnChannel+0x148>)
 80124e4:	2201      	movs	r2, #1
 80124e6:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80124ea:	4b39      	ldr	r3, [pc, #228]	; (80125d0 <SendFrameOnChannel+0x144>)
 80124ec:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80124f0:	b2da      	uxtb	r2, r3
 80124f2:	4b38      	ldr	r3, [pc, #224]	; (80125d4 <SendFrameOnChannel+0x148>)
 80124f4:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 80124f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80124fc:	4b35      	ldr	r3, [pc, #212]	; (80125d4 <SendFrameOnChannel+0x148>)
 80124fe:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8012502:	79fb      	ldrb	r3, [r7, #7]
 8012504:	4a33      	ldr	r2, [pc, #204]	; (80125d4 <SendFrameOnChannel+0x148>)
 8012506:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801250a:	4b32      	ldr	r3, [pc, #200]	; (80125d4 <SendFrameOnChannel+0x148>)
 801250c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8012510:	4a30      	ldr	r2, [pc, #192]	; (80125d4 <SendFrameOnChannel+0x148>)
 8012512:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012516:	4b2f      	ldr	r3, [pc, #188]	; (80125d4 <SendFrameOnChannel+0x148>)
 8012518:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 801251c:	4a2d      	ldr	r2, [pc, #180]	; (80125d4 <SendFrameOnChannel+0x148>)
 801251e:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012522:	f001 ff34 	bl	801438e <LoRaMacClassBIsBeaconModeActive>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00b      	beq.n	8012544 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801252c:	4b29      	ldr	r3, [pc, #164]	; (80125d4 <SendFrameOnChannel+0x148>)
 801252e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8012532:	4618      	mov	r0, r3
 8012534:	f001 ff96 	bl	8014464 <LoRaMacClassBIsUplinkCollision>
 8012538:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801253a:	6a3b      	ldr	r3, [r7, #32]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012540:	2310      	movs	r3, #16
 8012542:	e040      	b.n	80125c6 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012544:	4b22      	ldr	r3, [pc, #136]	; (80125d0 <SendFrameOnChannel+0x144>)
 8012546:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801254a:	2b01      	cmp	r3, #1
 801254c:	d101      	bne.n	8012552 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801254e:	f001 ff93 	bl	8014478 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012552:	f001 ff2d 	bl	80143b0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012556:	4b1e      	ldr	r3, [pc, #120]	; (80125d0 <SendFrameOnChannel+0x144>)
 8012558:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801255c:	b2db      	uxtb	r3, r3
 801255e:	4a1d      	ldr	r2, [pc, #116]	; (80125d4 <SendFrameOnChannel+0x148>)
 8012560:	f892 241f 	ldrb.w	r2, [r2, #1055]	; 0x41f
 8012564:	4611      	mov	r1, r2
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff fc64 	bl	8011e34 <SecureFrame>
 801256c:	4603      	mov	r3, r0
 801256e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8012572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012576:	2b00      	cmp	r3, #0
 8012578:	d002      	beq.n	8012580 <SendFrameOnChannel+0xf4>
    {
        return status;
 801257a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801257e:	e022      	b.n	80125c6 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012580:	4b14      	ldr	r3, [pc, #80]	; (80125d4 <SendFrameOnChannel+0x148>)
 8012582:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012586:	f043 0302 	orr.w	r3, r3, #2
 801258a:	4a12      	ldr	r2, [pc, #72]	; (80125d4 <SendFrameOnChannel+0x148>)
 801258c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8012590:	4b10      	ldr	r3, [pc, #64]	; (80125d4 <SendFrameOnChannel+0x148>)
 8012592:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8012596:	3301      	adds	r3, #1
 8012598:	b2da      	uxtb	r2, r3
 801259a:	4b0e      	ldr	r3, [pc, #56]	; (80125d4 <SendFrameOnChannel+0x148>)
 801259c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80125a0:	4b0c      	ldr	r3, [pc, #48]	; (80125d4 <SendFrameOnChannel+0x148>)
 80125a2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80125a6:	4b0b      	ldr	r3, [pc, #44]	; (80125d4 <SendFrameOnChannel+0x148>)
 80125a8:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80125ac:	4b09      	ldr	r3, [pc, #36]	; (80125d4 <SendFrameOnChannel+0x148>)
 80125ae:	2200      	movs	r2, #0
 80125b0:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80125b4:	4b09      	ldr	r3, [pc, #36]	; (80125dc <SendFrameOnChannel+0x150>)
 80125b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125b8:	4a06      	ldr	r2, [pc, #24]	; (80125d4 <SendFrameOnChannel+0x148>)
 80125ba:	8812      	ldrh	r2, [r2, #0]
 80125bc:	b2d2      	uxtb	r2, r2
 80125be:	4611      	mov	r1, r2
 80125c0:	4807      	ldr	r0, [pc, #28]	; (80125e0 <SendFrameOnChannel+0x154>)
 80125c2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80125c4:	2300      	movs	r3, #0
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3728      	adds	r7, #40	; 0x28
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	20001268 	.word	0x20001268
 80125d4:	20000d48 	.word	0x20000d48
 80125d8:	20001168 	.word	0x20001168
 80125dc:	0801dea4 	.word	0x0801dea4
 80125e0:	20000d4a 	.word	0x20000d4a

080125e4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	6039      	str	r1, [r7, #0]
 80125ee:	80fb      	strh	r3, [r7, #6]
 80125f0:	4613      	mov	r3, r2
 80125f2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80125f4:	4b09      	ldr	r3, [pc, #36]	; (801261c <SetTxContinuousWave+0x38>)
 80125f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125f8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80125fc:	88fa      	ldrh	r2, [r7, #6]
 80125fe:	6838      	ldr	r0, [r7, #0]
 8012600:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012602:	4b07      	ldr	r3, [pc, #28]	; (8012620 <SetTxContinuousWave+0x3c>)
 8012604:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012608:	f043 0302 	orr.w	r3, r3, #2
 801260c:	4a04      	ldr	r2, [pc, #16]	; (8012620 <SetTxContinuousWave+0x3c>)
 801260e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	0801dea4 	.word	0x0801dea4
 8012620:	20000d48 	.word	0x20000d48

08012624 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801262a:	2300      	movs	r3, #0
 801262c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801262e:	4b3e      	ldr	r3, [pc, #248]	; (8012728 <RestoreNvmData+0x104>)
 8012630:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012634:	2b01      	cmp	r3, #1
 8012636:	d001      	beq.n	801263c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012638:	2301      	movs	r3, #1
 801263a:	e071      	b.n	8012720 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801263c:	2124      	movs	r1, #36	; 0x24
 801263e:	483b      	ldr	r0, [pc, #236]	; (801272c <RestoreNvmData+0x108>)
 8012640:	f006 f8d2 	bl	80187e8 <Crc32>
 8012644:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012646:	4b39      	ldr	r3, [pc, #228]	; (801272c <RestoreNvmData+0x108>)
 8012648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801264a:	687a      	ldr	r2, [r7, #4]
 801264c:	429a      	cmp	r2, r3
 801264e:	d001      	beq.n	8012654 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012650:	2317      	movs	r3, #23
 8012652:	e065      	b.n	8012720 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012654:	2114      	movs	r1, #20
 8012656:	4836      	ldr	r0, [pc, #216]	; (8012730 <RestoreNvmData+0x10c>)
 8012658:	f006 f8c6 	bl	80187e8 <Crc32>
 801265c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801265e:	4b33      	ldr	r3, [pc, #204]	; (801272c <RestoreNvmData+0x108>)
 8012660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	429a      	cmp	r2, r3
 8012666:	d001      	beq.n	801266c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012668:	2317      	movs	r3, #23
 801266a:	e059      	b.n	8012720 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 801266c:	21e0      	movs	r1, #224	; 0xe0
 801266e:	4831      	ldr	r0, [pc, #196]	; (8012734 <RestoreNvmData+0x110>)
 8012670:	f006 f8ba 	bl	80187e8 <Crc32>
 8012674:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012676:	4b2d      	ldr	r3, [pc, #180]	; (801272c <RestoreNvmData+0x108>)
 8012678:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	429a      	cmp	r2, r3
 8012680:	d001      	beq.n	8012686 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012682:	2317      	movs	r3, #23
 8012684:	e04c      	b.n	8012720 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012686:	21bc      	movs	r1, #188	; 0xbc
 8012688:	482b      	ldr	r0, [pc, #172]	; (8012738 <RestoreNvmData+0x114>)
 801268a:	f006 f8ad 	bl	80187e8 <Crc32>
 801268e:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012690:	4b26      	ldr	r3, [pc, #152]	; (801272c <RestoreNvmData+0x108>)
 8012692:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8012696:	687a      	ldr	r2, [r7, #4]
 8012698:	429a      	cmp	r2, r3
 801269a:	d001      	beq.n	80126a0 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801269c:	2317      	movs	r3, #23
 801269e:	e03f      	b.n	8012720 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80126a0:	2100      	movs	r1, #0
 80126a2:	4826      	ldr	r0, [pc, #152]	; (801273c <RestoreNvmData+0x118>)
 80126a4:	f006 f8a0 	bl	80187e8 <Crc32>
 80126a8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80126aa:	4b20      	ldr	r3, [pc, #128]	; (801272c <RestoreNvmData+0x108>)
 80126ac:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d001      	beq.n	80126ba <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80126b6:	2317      	movs	r3, #23
 80126b8:	e032      	b.n	8012720 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80126ba:	2114      	movs	r1, #20
 80126bc:	4820      	ldr	r0, [pc, #128]	; (8012740 <RestoreNvmData+0x11c>)
 80126be:	f006 f893 	bl	80187e8 <Crc32>
 80126c2:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80126c4:	4b19      	ldr	r3, [pc, #100]	; (801272c <RestoreNvmData+0x108>)
 80126c6:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d001      	beq.n	80126d4 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80126d0:	2317      	movs	r3, #23
 80126d2:	e025      	b.n	8012720 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80126d4:	f240 527c 	movw	r2, #1404	; 0x57c
 80126d8:	4914      	ldr	r1, [pc, #80]	; (801272c <RestoreNvmData+0x108>)
 80126da:	481a      	ldr	r0, [pc, #104]	; (8012744 <RestoreNvmData+0x120>)
 80126dc:	f006 f82f 	bl	801873e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80126e0:	f240 527c 	movw	r2, #1404	; 0x57c
 80126e4:	2100      	movs	r1, #0
 80126e6:	4811      	ldr	r0, [pc, #68]	; (801272c <RestoreNvmData+0x108>)
 80126e8:	f006 f864 	bl	80187b4 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80126ec:	4b0e      	ldr	r3, [pc, #56]	; (8012728 <RestoreNvmData+0x104>)
 80126ee:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 80126f2:	4b0d      	ldr	r3, [pc, #52]	; (8012728 <RestoreNvmData+0x104>)
 80126f4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80126f8:	4b12      	ldr	r3, [pc, #72]	; (8012744 <RestoreNvmData+0x120>)
 80126fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126fc:	4a0a      	ldr	r2, [pc, #40]	; (8012728 <RestoreNvmData+0x104>)
 80126fe:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012702:	4b10      	ldr	r3, [pc, #64]	; (8012744 <RestoreNvmData+0x120>)
 8012704:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012708:	4b07      	ldr	r3, [pc, #28]	; (8012728 <RestoreNvmData+0x104>)
 801270a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801270e:	4b06      	ldr	r3, [pc, #24]	; (8012728 <RestoreNvmData+0x104>)
 8012710:	2201      	movs	r2, #1
 8012712:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012716:	4b04      	ldr	r3, [pc, #16]	; (8012728 <RestoreNvmData+0x104>)
 8012718:	2202      	movs	r2, #2
 801271a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    return LORAMAC_STATUS_OK;
 801271e:	2300      	movs	r3, #0
}
 8012720:	4618      	mov	r0, r3
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	20000d48 	.word	0x20000d48
 801272c:	200017e4 	.word	0x200017e4
 8012730:	2000180c 	.word	0x2000180c
 8012734:	20001824 	.word	0x20001824
 8012738:	20001908 	.word	0x20001908
 801273c:	200019c8 	.word	0x200019c8
 8012740:	20001d48 	.word	0x20001d48
 8012744:	20001268 	.word	0x20001268

08012748 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012748:	b480      	push	{r7}
 801274a:	b083      	sub	sp, #12
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <DetermineFrameType+0x16>
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d101      	bne.n	8012762 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801275e:	2303      	movs	r3, #3
 8012760:	e03b      	b.n	80127da <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	7b1b      	ldrb	r3, [r3, #12]
 8012766:	f003 030f 	and.w	r3, r3, #15
 801276a:	b2db      	uxtb	r3, r3
 801276c:	2b00      	cmp	r3, #0
 801276e:	d008      	beq.n	8012782 <DetermineFrameType+0x3a>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d003      	beq.n	8012782 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	2200      	movs	r2, #0
 801277e:	701a      	strb	r2, [r3, #0]
 8012780:	e02a      	b.n	80127d8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012788:	2b00      	cmp	r3, #0
 801278a:	d103      	bne.n	8012794 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	2201      	movs	r2, #1
 8012790:	701a      	strb	r2, [r3, #0]
 8012792:	e021      	b.n	80127d8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	7b1b      	ldrb	r3, [r3, #12]
 8012798:	f003 030f 	and.w	r3, r3, #15
 801279c:	b2db      	uxtb	r3, r3
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d108      	bne.n	80127b4 <DetermineFrameType+0x6c>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d103      	bne.n	80127b4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	2202      	movs	r2, #2
 80127b0:	701a      	strb	r2, [r3, #0]
 80127b2:	e011      	b.n	80127d8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	7b1b      	ldrb	r3, [r3, #12]
 80127b8:	f003 030f 	and.w	r3, r3, #15
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d108      	bne.n	80127d4 <DetermineFrameType+0x8c>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d003      	beq.n	80127d4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	2203      	movs	r2, #3
 80127d0:	701a      	strb	r2, [r3, #0]
 80127d2:	e001      	b.n	80127d8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80127d4:	2318      	movs	r3, #24
 80127d6:	e000      	b.n	80127da <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80127d8:	2300      	movs	r3, #0
}
 80127da:	4618      	mov	r0, r3
 80127dc:	370c      	adds	r7, #12
 80127de:	46bd      	mov	sp, r7
 80127e0:	bc80      	pop	{r7}
 80127e2:	4770      	bx	lr

080127e4 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	4603      	mov	r3, r0
 80127ec:	460a      	mov	r2, r1
 80127ee:	71fb      	strb	r3, [r7, #7]
 80127f0:	4613      	mov	r3, r2
 80127f2:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80127f4:	79fa      	ldrb	r2, [r7, #7]
 80127f6:	79bb      	ldrb	r3, [r7, #6]
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d301      	bcc.n	8012800 <CheckRetrans+0x1c>
    {
        return true;
 80127fc:	2301      	movs	r3, #1
 80127fe:	e000      	b.n	8012802 <CheckRetrans+0x1e>
    }
    return false;
 8012800:	2300      	movs	r3, #0
}
 8012802:	4618      	mov	r0, r3
 8012804:	370c      	adds	r7, #12
 8012806:	46bd      	mov	sp, r7
 8012808:	bc80      	pop	{r7}
 801280a:	4770      	bx	lr

0801280c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801280c:	b580      	push	{r7, lr}
 801280e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012810:	4b12      	ldr	r3, [pc, #72]	; (801285c <CheckRetransUnconfirmedUplink+0x50>)
 8012812:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8012816:	4a12      	ldr	r2, [pc, #72]	; (8012860 <CheckRetransUnconfirmedUplink+0x54>)
 8012818:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 801281c:	4611      	mov	r1, r2
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff ffe0 	bl	80127e4 <CheckRetrans>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d001      	beq.n	801282e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801282a:	2301      	movs	r3, #1
 801282c:	e014      	b.n	8012858 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801282e:	4b0b      	ldr	r3, [pc, #44]	; (801285c <CheckRetransUnconfirmedUplink+0x50>)
 8012830:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8012834:	f003 0302 	and.w	r3, r3, #2
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d00b      	beq.n	8012856 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801283e:	4b07      	ldr	r3, [pc, #28]	; (801285c <CheckRetransUnconfirmedUplink+0x50>)
 8012840:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8012844:	2b00      	cmp	r3, #0
 8012846:	d004      	beq.n	8012852 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012848:	4b04      	ldr	r3, [pc, #16]	; (801285c <CheckRetransUnconfirmedUplink+0x50>)
 801284a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801284e:	2b01      	cmp	r3, #1
 8012850:	d101      	bne.n	8012856 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8012852:	2301      	movs	r3, #1
 8012854:	e000      	b.n	8012858 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8012856:	2300      	movs	r3, #0
}
 8012858:	4618      	mov	r0, r3
 801285a:	bd80      	pop	{r7, pc}
 801285c:	20000d48 	.word	0x20000d48
 8012860:	20001268 	.word	0x20001268

08012864 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012868:	4b10      	ldr	r3, [pc, #64]	; (80128ac <CheckRetransConfirmedUplink+0x48>)
 801286a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 801286e:	4a10      	ldr	r2, [pc, #64]	; (80128b0 <CheckRetransConfirmedUplink+0x4c>)
 8012870:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8012874:	4611      	mov	r1, r2
 8012876:	4618      	mov	r0, r3
 8012878:	f7ff ffb4 	bl	80127e4 <CheckRetrans>
 801287c:	4603      	mov	r3, r0
 801287e:	2b00      	cmp	r3, #0
 8012880:	d001      	beq.n	8012886 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012882:	2301      	movs	r3, #1
 8012884:	e00f      	b.n	80128a6 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012886:	4b09      	ldr	r3, [pc, #36]	; (80128ac <CheckRetransConfirmedUplink+0x48>)
 8012888:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 801288c:	f003 0302 	and.w	r3, r3, #2
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	d006      	beq.n	80128a4 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012896:	4b05      	ldr	r3, [pc, #20]	; (80128ac <CheckRetransConfirmedUplink+0x48>)
 8012898:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 801289c:	2b00      	cmp	r3, #0
 801289e:	d001      	beq.n	80128a4 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80128a0:	2301      	movs	r3, #1
 80128a2:	e000      	b.n	80128a6 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	20000d48 	.word	0x20000d48
 80128b0:	20001268 	.word	0x20001268

080128b4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128c2:	d002      	beq.n	80128ca <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	3301      	adds	r3, #1
 80128c8:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80128ca:	687b      	ldr	r3, [r7, #4]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bc80      	pop	{r7}
 80128d4:	4770      	bx	lr
	...

080128d8 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80128dc:	4b1a      	ldr	r3, [pc, #104]	; (8012948 <StopRetransmission+0x70>)
 80128de:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80128e2:	f003 0302 	and.w	r3, r3, #2
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d009      	beq.n	8012900 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80128ec:	4b16      	ldr	r3, [pc, #88]	; (8012948 <StopRetransmission+0x70>)
 80128ee:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d011      	beq.n	801291a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80128f6:	4b14      	ldr	r3, [pc, #80]	; (8012948 <StopRetransmission+0x70>)
 80128f8:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	d00c      	beq.n	801291a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012900:	4b12      	ldr	r3, [pc, #72]	; (801294c <StopRetransmission+0x74>)
 8012902:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012906:	2b00      	cmp	r3, #0
 8012908:	d007      	beq.n	801291a <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 801290a:	4b10      	ldr	r3, [pc, #64]	; (801294c <StopRetransmission+0x74>)
 801290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801290e:	4618      	mov	r0, r3
 8012910:	f7ff ffd0 	bl	80128b4 <IncreaseAdrAckCounter>
 8012914:	4603      	mov	r3, r0
 8012916:	4a0d      	ldr	r2, [pc, #52]	; (801294c <StopRetransmission+0x74>)
 8012918:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801291a:	4b0b      	ldr	r3, [pc, #44]	; (8012948 <StopRetransmission+0x70>)
 801291c:	2200      	movs	r2, #0
 801291e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8012922:	4b09      	ldr	r3, [pc, #36]	; (8012948 <StopRetransmission+0x70>)
 8012924:	2200      	movs	r2, #0
 8012926:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 801292a:	4b07      	ldr	r3, [pc, #28]	; (8012948 <StopRetransmission+0x70>)
 801292c:	2200      	movs	r2, #0
 801292e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012932:	4b05      	ldr	r3, [pc, #20]	; (8012948 <StopRetransmission+0x70>)
 8012934:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012938:	f023 0302 	bic.w	r3, r3, #2
 801293c:	4a02      	ldr	r2, [pc, #8]	; (8012948 <StopRetransmission+0x70>)
 801293e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8012942:	2301      	movs	r3, #1
}
 8012944:	4618      	mov	r0, r3
 8012946:	bd80      	pop	{r7, pc}
 8012948:	20000d48 	.word	0x20000d48
 801294c:	20001268 	.word	0x20001268

08012950 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	4603      	mov	r3, r0
 8012958:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801295a:	4b0b      	ldr	r3, [pc, #44]	; (8012988 <CallNvmDataChangeCallback+0x38>)
 801295c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012960:	2b00      	cmp	r3, #0
 8012962:	d00c      	beq.n	801297e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012964:	4b08      	ldr	r3, [pc, #32]	; (8012988 <CallNvmDataChangeCallback+0x38>)
 8012966:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801296a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801296c:	2b00      	cmp	r3, #0
 801296e:	d006      	beq.n	801297e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012970:	4b05      	ldr	r3, [pc, #20]	; (8012988 <CallNvmDataChangeCallback+0x38>)
 8012972:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	88fa      	ldrh	r2, [r7, #6]
 801297a:	4610      	mov	r0, r2
 801297c:	4798      	blx	r3
    }
}
 801297e:	bf00      	nop
 8012980:	3708      	adds	r7, #8
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	20000d48 	.word	0x20000d48

0801298c <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 801298c:	b480      	push	{r7}
 801298e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012990:	4b0b      	ldr	r3, [pc, #44]	; (80129c0 <IsRequestPending+0x34>)
 8012992:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8012996:	f003 0304 	and.w	r3, r3, #4
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	d107      	bne.n	80129b0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80129a0:	4b07      	ldr	r3, [pc, #28]	; (80129c0 <IsRequestPending+0x34>)
 80129a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80129a6:	f003 0301 	and.w	r3, r3, #1
 80129aa:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <IsRequestPending+0x28>
    {
        return 1;
 80129b0:	2301      	movs	r3, #1
 80129b2:	e000      	b.n	80129b6 <IsRequestPending+0x2a>
    }
    return 0;
 80129b4:	2300      	movs	r3, #0
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bc80      	pop	{r7}
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	20000d48 	.word	0x20000d48

080129c4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80129c4:	b590      	push	{r4, r7, lr}
 80129c6:	b091      	sub	sp, #68	; 0x44
 80129c8:	af02      	add	r7, sp, #8
 80129ca:	6178      	str	r0, [r7, #20]
 80129cc:	6139      	str	r1, [r7, #16]
 80129ce:	4613      	mov	r3, r2
 80129d0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d002      	beq.n	80129de <LoRaMacInitialization+0x1a>
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d101      	bne.n	80129e2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80129de:	2303      	movs	r3, #3
 80129e0:	e27c      	b.n	8012edc <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00b      	beq.n	8012a02 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d007      	beq.n	8012a02 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d003      	beq.n	8012a02 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d101      	bne.n	8012a06 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a02:	2303      	movs	r3, #3
 8012a04:	e26a      	b.n	8012edc <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012a06:	7bfb      	ldrb	r3, [r7, #15]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f003 fbdb 	bl	80161c4 <RegionIsActive>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	f083 0301 	eor.w	r3, r3, #1
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d001      	beq.n	8012a1e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012a1a:	2309      	movs	r3, #9
 8012a1c:	e25e      	b.n	8012edc <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012a1e:	6978      	ldr	r0, [r7, #20]
 8012a20:	f002 f882 	bl	8014b28 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012a24:	f240 527c 	movw	r2, #1404	; 0x57c
 8012a28:	2100      	movs	r1, #0
 8012a2a:	48c7      	ldr	r0, [pc, #796]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012a2c:	f005 fec2 	bl	80187b4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012a30:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8012a34:	2100      	movs	r1, #0
 8012a36:	48c5      	ldr	r0, [pc, #788]	; (8012d4c <LoRaMacInitialization+0x388>)
 8012a38:	f005 febc 	bl	80187b4 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012a3c:	4ac2      	ldr	r2, [pc, #776]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012a3e:	7bfb      	ldrb	r3, [r7, #15]
 8012a40:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012a44:	4bc0      	ldr	r3, [pc, #768]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012a46:	2200      	movs	r2, #0
 8012a48:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8012a4c:	4bbe      	ldr	r3, [pc, #760]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012a4e:	2200      	movs	r2, #0
 8012a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012a54:	4bbc      	ldr	r3, [pc, #752]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012a56:	4abe      	ldr	r2, [pc, #760]	; (8012d50 <LoRaMacInitialization+0x38c>)
 8012a58:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012a62:	4bbc      	ldr	r3, [pc, #752]	; (8012d54 <LoRaMacInitialization+0x390>)
 8012a64:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012a66:	4bbc      	ldr	r3, [pc, #752]	; (8012d58 <LoRaMacInitialization+0x394>)
 8012a68:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8012a6a:	4bbc      	ldr	r3, [pc, #752]	; (8012d5c <LoRaMacInitialization+0x398>)
 8012a6c:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012a6e:	4bb6      	ldr	r3, [pc, #728]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012a70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a74:	f107 021c 	add.w	r2, r7, #28
 8012a78:	4611      	mov	r1, r2
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f003 fbdb 	bl	8016236 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012a80:	230f      	movs	r3, #15
 8012a82:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a86:	4bb0      	ldr	r3, [pc, #704]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012a90:	4611      	mov	r1, r2
 8012a92:	4618      	mov	r0, r3
 8012a94:	f003 fba6 	bl	80161e4 <RegionGetPhyParam>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	bf14      	ite	ne
 8012aa2:	2301      	movne	r3, #1
 8012aa4:	2300      	moveq	r3, #0
 8012aa6:	b2da      	uxtb	r2, r3
 8012aa8:	4ba7      	ldr	r3, [pc, #668]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012aaa:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012aae:	230a      	movs	r3, #10
 8012ab0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ab4:	4ba4      	ldr	r3, [pc, #656]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012aba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f003 fb8f 	bl	80161e4 <RegionGetPhyParam>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012acc:	b25a      	sxtb	r2, r3
 8012ace:	4b9e      	ldr	r3, [pc, #632]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012ad0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012ad4:	2306      	movs	r3, #6
 8012ad6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ada:	4b9b      	ldr	r3, [pc, #620]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ae0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f003 fb7c 	bl	80161e4 <RegionGetPhyParam>
 8012aec:	4603      	mov	r3, r0
 8012aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af2:	b25a      	sxtb	r2, r3
 8012af4:	4b94      	ldr	r3, [pc, #592]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012af6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012afa:	2310      	movs	r3, #16
 8012afc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b00:	4b91      	ldr	r3, [pc, #580]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f003 fb69 	bl	80161e4 <RegionGetPhyParam>
 8012b12:	4603      	mov	r3, r0
 8012b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b18:	4a8b      	ldr	r2, [pc, #556]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012b1e:	2311      	movs	r3, #17
 8012b20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b24:	4b88      	ldr	r3, [pc, #544]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b2e:	4611      	mov	r1, r2
 8012b30:	4618      	mov	r0, r3
 8012b32:	f003 fb57 	bl	80161e4 <RegionGetPhyParam>
 8012b36:	4603      	mov	r3, r0
 8012b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3c:	4a82      	ldr	r2, [pc, #520]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012b42:	2312      	movs	r3, #18
 8012b44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b48:	4b7f      	ldr	r3, [pc, #508]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b52:	4611      	mov	r1, r2
 8012b54:	4618      	mov	r0, r3
 8012b56:	f003 fb45 	bl	80161e4 <RegionGetPhyParam>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b60:	4a79      	ldr	r2, [pc, #484]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012b66:	2313      	movs	r3, #19
 8012b68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b6c:	4b76      	ldr	r3, [pc, #472]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b76:	4611      	mov	r1, r2
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f003 fb33 	bl	80161e4 <RegionGetPhyParam>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b84:	4a70      	ldr	r2, [pc, #448]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012b8a:	2314      	movs	r3, #20
 8012b8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012b90:	4b6d      	ldr	r3, [pc, #436]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b9a:	4611      	mov	r1, r2
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f003 fb21 	bl	80161e4 <RegionGetPhyParam>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba8:	4a67      	ldr	r2, [pc, #412]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012baa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012bae:	2316      	movs	r3, #22
 8012bb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bb4:	4b64      	ldr	r3, [pc, #400]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012bba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012bbe:	4611      	mov	r1, r2
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f003 fb0f 	bl	80161e4 <RegionGetPhyParam>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bcc:	b2da      	uxtb	r2, r3
 8012bce:	4b5e      	ldr	r3, [pc, #376]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012bd0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012bd4:	2317      	movs	r3, #23
 8012bd6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bda:	4b5b      	ldr	r3, [pc, #364]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012be0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012be4:	4611      	mov	r1, r2
 8012be6:	4618      	mov	r0, r3
 8012be8:	f003 fafc 	bl	80161e4 <RegionGetPhyParam>
 8012bec:	4603      	mov	r3, r0
 8012bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf2:	4a55      	ldr	r2, [pc, #340]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012bf4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfa:	4a53      	ldr	r2, [pc, #332]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012bfc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012c00:	2318      	movs	r3, #24
 8012c02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c06:	4b50      	ldr	r3, [pc, #320]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c10:	4611      	mov	r1, r2
 8012c12:	4618      	mov	r0, r3
 8012c14:	f003 fae6 	bl	80161e4 <RegionGetPhyParam>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	4b49      	ldr	r3, [pc, #292]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c22:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c28:	b2da      	uxtb	r2, r3
 8012c2a:	4b47      	ldr	r3, [pc, #284]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c2c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012c30:	231d      	movs	r3, #29
 8012c32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c36:	4b44      	ldr	r3, [pc, #272]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c40:	4611      	mov	r1, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f003 face 	bl	80161e4 <RegionGetPhyParam>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4e:	b2da      	uxtb	r2, r3
 8012c50:	4b3d      	ldr	r3, [pc, #244]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c52:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012c56:	231e      	movs	r3, #30
 8012c58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c5c:	4b3a      	ldr	r3, [pc, #232]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c66:	4611      	mov	r1, r2
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f003 fabb 	bl	80161e4 <RegionGetPhyParam>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c74:	b2da      	uxtb	r2, r3
 8012c76:	4b34      	ldr	r3, [pc, #208]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c78:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012c7c:	231f      	movs	r3, #31
 8012c7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c82:	4b31      	ldr	r3, [pc, #196]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c8c:	4611      	mov	r1, r2
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f003 faa8 	bl	80161e4 <RegionGetPhyParam>
 8012c94:	4603      	mov	r3, r0
 8012c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9a:	4a2b      	ldr	r2, [pc, #172]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012c9c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012ca0:	2320      	movs	r3, #32
 8012ca2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ca6:	4b28      	ldr	r3, [pc, #160]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012cb0:	4611      	mov	r1, r2
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f003 fa96 	bl	80161e4 <RegionGetPhyParam>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbe:	4a22      	ldr	r2, [pc, #136]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012cc0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012cc4:	230b      	movs	r3, #11
 8012cc6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cca:	4b1f      	ldr	r3, [pc, #124]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f003 fa84 	bl	80161e4 <RegionGetPhyParam>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8012ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	4b19      	ldr	r3, [pc, #100]	; (8012d4c <LoRaMacInitialization+0x388>)
 8012ce6:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012cea:	230c      	movs	r3, #12
 8012cec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cf0:	4b15      	ldr	r3, [pc, #84]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cf6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012cfa:	4611      	mov	r1, r2
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f003 fa71 	bl	80161e4 <RegionGetPhyParam>
 8012d02:	4603      	mov	r3, r0
 8012d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8012d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	4b10      	ldr	r3, [pc, #64]	; (8012d4c <LoRaMacInitialization+0x388>)
 8012d0c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012d10:	4b0d      	ldr	r3, [pc, #52]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d12:	2201      	movs	r2, #1
 8012d14:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012d18:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d1a:	220a      	movs	r2, #10
 8012d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012d20:	4b09      	ldr	r3, [pc, #36]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d22:	2206      	movs	r2, #6
 8012d24:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012d28:	4b07      	ldr	r3, [pc, #28]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d2e:	4a06      	ldr	r2, [pc, #24]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d30:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012d32:	4b05      	ldr	r3, [pc, #20]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d34:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012d38:	4b03      	ldr	r3, [pc, #12]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012d3e:	4b02      	ldr	r3, [pc, #8]	; (8012d48 <LoRaMacInitialization+0x384>)
 8012d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d44:	e00c      	b.n	8012d60 <LoRaMacInitialization+0x39c>
 8012d46:	bf00      	nop
 8012d48:	20001268 	.word	0x20001268
 8012d4c:	20000d48 	.word	0x20000d48
 8012d50:	01000400 	.word	0x01000400
 8012d54:	2000144c 	.word	0x2000144c
 8012d58:	20001450 	.word	0x20001450
 8012d5c:	20001d60 	.word	0x20001d60
 8012d60:	4a60      	ldr	r2, [pc, #384]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d62:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012d64:	4b5f      	ldr	r3, [pc, #380]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012d6a:	4a5e      	ldr	r2, [pc, #376]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d6c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012d6e:	4b5d      	ldr	r3, [pc, #372]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012d74:	4a5b      	ldr	r2, [pc, #364]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d76:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012d78:	4b5a      	ldr	r3, [pc, #360]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012d7e:	4a59      	ldr	r2, [pc, #356]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d80:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012d82:	4b58      	ldr	r3, [pc, #352]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012d88:	4a56      	ldr	r2, [pc, #344]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d8a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012d8c:	4b55      	ldr	r3, [pc, #340]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d8e:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8012d92:	4b54      	ldr	r3, [pc, #336]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8012d98:	4b52      	ldr	r3, [pc, #328]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012da0:	4a51      	ldr	r2, [pc, #324]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8012da8:	f7ff f8d4 	bl	8011f54 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012dac:	4b4d      	ldr	r3, [pc, #308]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012dae:	2201      	movs	r2, #1
 8012db0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8012db4:	4a4c      	ldr	r2, [pc, #304]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012dbc:	4b4a      	ldr	r3, [pc, #296]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8012dc4:	4b48      	ldr	r3, [pc, #288]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012dcc:	4b45      	ldr	r3, [pc, #276]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012dce:	2200      	movs	r2, #0
 8012dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012dd2:	4b44      	ldr	r3, [pc, #272]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012dd8:	2300      	movs	r3, #0
 8012dda:	9300      	str	r3, [sp, #0]
 8012ddc:	4b43      	ldr	r3, [pc, #268]	; (8012eec <LoRaMacInitialization+0x528>)
 8012dde:	2200      	movs	r2, #0
 8012de0:	f04f 31ff 	mov.w	r1, #4294967295
 8012de4:	4842      	ldr	r0, [pc, #264]	; (8012ef0 <LoRaMacInitialization+0x52c>)
 8012de6:	f009 fd51 	bl	801c88c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012dea:	2300      	movs	r3, #0
 8012dec:	9300      	str	r3, [sp, #0]
 8012dee:	4b41      	ldr	r3, [pc, #260]	; (8012ef4 <LoRaMacInitialization+0x530>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	f04f 31ff 	mov.w	r1, #4294967295
 8012df6:	4840      	ldr	r0, [pc, #256]	; (8012ef8 <LoRaMacInitialization+0x534>)
 8012df8:	f009 fd48 	bl	801c88c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	9300      	str	r3, [sp, #0]
 8012e00:	4b3e      	ldr	r3, [pc, #248]	; (8012efc <LoRaMacInitialization+0x538>)
 8012e02:	2200      	movs	r2, #0
 8012e04:	f04f 31ff 	mov.w	r1, #4294967295
 8012e08:	483d      	ldr	r0, [pc, #244]	; (8012f00 <LoRaMacInitialization+0x53c>)
 8012e0a:	f009 fd3f 	bl	801c88c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8012e0e:	2300      	movs	r3, #0
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	4b3c      	ldr	r3, [pc, #240]	; (8012f04 <LoRaMacInitialization+0x540>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	f04f 31ff 	mov.w	r1, #4294967295
 8012e1a:	483b      	ldr	r0, [pc, #236]	; (8012f08 <LoRaMacInitialization+0x544>)
 8012e1c:	f009 fd36 	bl	801c88c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012e20:	4c30      	ldr	r4, [pc, #192]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012e22:	463b      	mov	r3, r7
 8012e24:	4618      	mov	r0, r3
 8012e26:	f009 f8a1 	bl	801bf6c <SysTimeGetMcuTime>
 8012e2a:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8012e2e:	463a      	mov	r2, r7
 8012e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e34:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8012e38:	4b34      	ldr	r3, [pc, #208]	; (8012f0c <LoRaMacInitialization+0x548>)
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012e3e:	4b2a      	ldr	r3, [pc, #168]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012e40:	4a33      	ldr	r2, [pc, #204]	; (8012f10 <LoRaMacInitialization+0x54c>)
 8012e42:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012e46:	4b28      	ldr	r3, [pc, #160]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012e48:	4a32      	ldr	r2, [pc, #200]	; (8012f14 <LoRaMacInitialization+0x550>)
 8012e4a:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012e4e:	4b26      	ldr	r3, [pc, #152]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012e50:	4a31      	ldr	r2, [pc, #196]	; (8012f18 <LoRaMacInitialization+0x554>)
 8012e52:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012e56:	4b24      	ldr	r3, [pc, #144]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012e58:	4a30      	ldr	r2, [pc, #192]	; (8012f1c <LoRaMacInitialization+0x558>)
 8012e5a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012e5e:	4b22      	ldr	r3, [pc, #136]	; (8012ee8 <LoRaMacInitialization+0x524>)
 8012e60:	4a2f      	ldr	r2, [pc, #188]	; (8012f20 <LoRaMacInitialization+0x55c>)
 8012e62:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012e66:	4b2f      	ldr	r3, [pc, #188]	; (8012f24 <LoRaMacInitialization+0x560>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	482f      	ldr	r0, [pc, #188]	; (8012f28 <LoRaMacInitialization+0x564>)
 8012e6c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	4619      	mov	r1, r3
 8012e74:	482d      	ldr	r0, [pc, #180]	; (8012f2c <LoRaMacInitialization+0x568>)
 8012e76:	f7fa fbab 	bl	800d5d0 <SecureElementInit>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d001      	beq.n	8012e84 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e80:	2311      	movs	r3, #17
 8012e82:	e02b      	b.n	8012edc <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012e84:	4817      	ldr	r0, [pc, #92]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012e86:	f002 fafb 	bl	8015480 <LoRaMacCryptoInit>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e90:	2311      	movs	r3, #17
 8012e92:	e023      	b.n	8012edc <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012e94:	f001 fc1a 	bl	80146cc <LoRaMacCommandsInit>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d001      	beq.n	8012ea2 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e9e:	2313      	movs	r3, #19
 8012ea0:	e01c      	b.n	8012edc <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012ea2:	4823      	ldr	r0, [pc, #140]	; (8012f30 <LoRaMacInitialization+0x56c>)
 8012ea4:	f002 fb8c 	bl	80155c0 <LoRaMacCryptoSetMulticastReference>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d001      	beq.n	8012eb2 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012eae:	2311      	movs	r3, #17
 8012eb0:	e014      	b.n	8012edc <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012eb2:	4b1c      	ldr	r3, [pc, #112]	; (8012f24 <LoRaMacInitialization+0x560>)
 8012eb4:	695b      	ldr	r3, [r3, #20]
 8012eb6:	4798      	blx	r3
 8012eb8:	4603      	mov	r3, r0
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f005 fc1a 	bl	80186f4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012ec0:	4b18      	ldr	r3, [pc, #96]	; (8012f24 <LoRaMacInitialization+0x560>)
 8012ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ec4:	4a07      	ldr	r2, [pc, #28]	; (8012ee4 <LoRaMacInitialization+0x520>)
 8012ec6:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8012eca:	4610      	mov	r0, r2
 8012ecc:	4798      	blx	r3
    Radio.Sleep( );
 8012ece:	4b15      	ldr	r3, [pc, #84]	; (8012f24 <LoRaMacInitialization+0x560>)
 8012ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012ed4:	2001      	movs	r0, #1
 8012ed6:	f7fd fad3 	bl	8010480 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	373c      	adds	r7, #60	; 0x3c
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd90      	pop	{r4, r7, pc}
 8012ee4:	20001268 	.word	0x20001268
 8012ee8:	20000d48 	.word	0x20000d48
 8012eec:	08010a35 	.word	0x08010a35
 8012ef0:	200010b0 	.word	0x200010b0
 8012ef4:	08010ac5 	.word	0x08010ac5
 8012ef8:	200010c8 	.word	0x200010c8
 8012efc:	08010b3d 	.word	0x08010b3d
 8012f00:	200010e0 	.word	0x200010e0
 8012f04:	08010bbd 	.word	0x08010bbd
 8012f08:	2000114c 	.word	0x2000114c
 8012f0c:	20001df0 	.word	0x20001df0
 8012f10:	0800f535 	.word	0x0800f535
 8012f14:	0800f5ad 	.word	0x0800f5ad
 8012f18:	0800f68d 	.word	0x0800f68d
 8012f1c:	0800f641 	.word	0x0800f641
 8012f20:	0800f6c9 	.word	0x0800f6c9
 8012f24:	0801dea4 	.word	0x0801dea4
 8012f28:	20001094 	.word	0x20001094
 8012f2c:	2000138c 	.word	0x2000138c
 8012f30:	20001340 	.word	0x20001340

08012f34 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012f34:	b480      	push	{r7}
 8012f36:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012f38:	4b04      	ldr	r3, [pc, #16]	; (8012f4c <LoRaMacStart+0x18>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8012f40:	2300      	movs	r3, #0
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bc80      	pop	{r7}
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop
 8012f4c:	20000d48 	.word	0x20000d48

08012f50 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8012f54:	f7fd fa74 	bl	8010440 <LoRaMacIsBusy>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	f083 0301 	eor.w	r3, r3, #1
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d005      	beq.n	8012f70 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8012f64:	4b07      	ldr	r3, [pc, #28]	; (8012f84 <LoRaMacStop+0x34>)
 8012f66:	2201      	movs	r2, #1
 8012f68:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	e007      	b.n	8012f80 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8012f70:	4b04      	ldr	r3, [pc, #16]	; (8012f84 <LoRaMacStop+0x34>)
 8012f72:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012f76:	2b01      	cmp	r3, #1
 8012f78:	d101      	bne.n	8012f7e <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	e000      	b.n	8012f80 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8012f7e:	2301      	movs	r3, #1
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	20000d48 	.word	0x20000d48

08012f88 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012f8c:	4812      	ldr	r0, [pc, #72]	; (8012fd8 <LoRaMacHalt+0x50>)
 8012f8e:	f009 fd21 	bl	801c9d4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8012f92:	4812      	ldr	r0, [pc, #72]	; (8012fdc <LoRaMacHalt+0x54>)
 8012f94:	f009 fd1e 	bl	801c9d4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012f98:	4811      	ldr	r0, [pc, #68]	; (8012fe0 <LoRaMacHalt+0x58>)
 8012f9a:	f009 fd1b 	bl	801c9d4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8012f9e:	4811      	ldr	r0, [pc, #68]	; (8012fe4 <LoRaMacHalt+0x5c>)
 8012fa0:	f009 fd18 	bl	801c9d4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012fa4:	f001 fa04 	bl	80143b0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012fa8:	4b0f      	ldr	r3, [pc, #60]	; (8012fe8 <LoRaMacHalt+0x60>)
 8012faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fac:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8012fae:	4b0f      	ldr	r3, [pc, #60]	; (8012fec <LoRaMacHalt+0x64>)
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8012fb6:	480e      	ldr	r0, [pc, #56]	; (8012ff0 <LoRaMacHalt+0x68>)
 8012fb8:	f7fd fc18 	bl	80107ec <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012fbc:	f240 527c 	movw	r2, #1404	; 0x57c
 8012fc0:	490b      	ldr	r1, [pc, #44]	; (8012ff0 <LoRaMacHalt+0x68>)
 8012fc2:	480c      	ldr	r0, [pc, #48]	; (8012ff4 <LoRaMacHalt+0x6c>)
 8012fc4:	f005 fbbb 	bl	801873e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012fc8:	4b08      	ldr	r3, [pc, #32]	; (8012fec <LoRaMacHalt+0x64>)
 8012fca:	2201      	movs	r2, #1
 8012fcc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	200010b0 	.word	0x200010b0
 8012fdc:	200010c8 	.word	0x200010c8
 8012fe0:	200010e0 	.word	0x200010e0
 8012fe4:	2000114c 	.word	0x2000114c
 8012fe8:	0801dea4 	.word	0x0801dea4
 8012fec:	20000d48 	.word	0x20000d48
 8012ff0:	20001268 	.word	0x20001268
 8012ff4:	200017e4 	.word	0x200017e4

08012ff8 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012ff8:	b590      	push	{r4, r7, lr}
 8012ffa:	b08d      	sub	sp, #52	; 0x34
 8012ffc:	af02      	add	r7, sp, #8
 8012ffe:	4603      	mov	r3, r0
 8013000:	6039      	str	r1, [r7, #0]
 8013002:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013004:	4b42      	ldr	r3, [pc, #264]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 8013006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013008:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801300a:	4b41      	ldr	r3, [pc, #260]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 801300c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8013010:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013012:	4b3f      	ldr	r3, [pc, #252]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 8013014:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8013018:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801301a:	4b3e      	ldr	r3, [pc, #248]	; (8013114 <LoRaMacQueryTxPossible+0x11c>)
 801301c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8013020:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d101      	bne.n	8013030 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801302c:	2303      	movs	r3, #3
 801302e:	e06b      	b.n	8013108 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8013030:	2300      	movs	r3, #0
 8013032:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013034:	4b36      	ldr	r3, [pc, #216]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 8013036:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801303a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801303c:	4b34      	ldr	r3, [pc, #208]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 801303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013040:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013042:	4b34      	ldr	r3, [pc, #208]	; (8013114 <LoRaMacQueryTxPossible+0x11c>)
 8013044:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8013048:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801304a:	4b32      	ldr	r3, [pc, #200]	; (8013114 <LoRaMacQueryTxPossible+0x11c>)
 801304c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8013050:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013052:	4b2f      	ldr	r3, [pc, #188]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 8013054:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013058:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801305c:	4b2c      	ldr	r3, [pc, #176]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 801305e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013062:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8013066:	4b2b      	ldr	r3, [pc, #172]	; (8013114 <LoRaMacQueryTxPossible+0x11c>)
 8013068:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 801306c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013070:	4b27      	ldr	r3, [pc, #156]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 8013072:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801307a:	4b25      	ldr	r3, [pc, #148]	; (8013110 <LoRaMacQueryTxPossible+0x118>)
 801307c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013080:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8013084:	f107 040d 	add.w	r4, r7, #13
 8013088:	f107 020e 	add.w	r2, r7, #14
 801308c:	f107 010f 	add.w	r1, r7, #15
 8013090:	f107 0014 	add.w	r0, r7, #20
 8013094:	f107 0310 	add.w	r3, r7, #16
 8013098:	9300      	str	r3, [sp, #0]
 801309a:	4623      	mov	r3, r4
 801309c:	f001 f852 	bl	8014144 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80130a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7fd fec5 	bl	8010e34 <GetMaxAppPayloadWithoutFOptsLength>
 80130aa:	4603      	mov	r3, r0
 80130ac:	461a      	mov	r2, r3
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80130b2:	f107 0308 	add.w	r3, r7, #8
 80130b6:	4618      	mov	r0, r3
 80130b8:	f001 fbd6 	bl	8014868 <LoRaMacCommandsGetSizeSerializedCmds>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d001      	beq.n	80130c6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80130c2:	2313      	movs	r3, #19
 80130c4:	e020      	b.n	8013108 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	2b0f      	cmp	r3, #15
 80130ca:	d819      	bhi.n	8013100 <LoRaMacQueryTxPossible+0x108>
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	785b      	ldrb	r3, [r3, #1]
 80130d0:	461a      	mov	r2, r3
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d313      	bcc.n	8013100 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	785a      	ldrb	r2, [r3, #1]
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	1ad3      	subs	r3, r2, r3
 80130e2:	b2da      	uxtb	r2, r3
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	785b      	ldrb	r3, [r3, #1]
 80130ec:	4619      	mov	r1, r3
 80130ee:	79fa      	ldrb	r2, [r7, #7]
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	4413      	add	r3, r2
 80130f4:	4299      	cmp	r1, r3
 80130f6:	d301      	bcc.n	80130fc <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80130f8:	2300      	movs	r3, #0
 80130fa:	e005      	b.n	8013108 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80130fc:	2308      	movs	r3, #8
 80130fe:	e003      	b.n	8013108 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	2200      	movs	r2, #0
 8013104:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013106:	2308      	movs	r3, #8
    }
}
 8013108:	4618      	mov	r0, r3
 801310a:	372c      	adds	r7, #44	; 0x2c
 801310c:	46bd      	mov	sp, r7
 801310e:	bd90      	pop	{r4, r7, pc}
 8013110:	20001268 	.word	0x20001268
 8013114:	20000d48 	.word	0x20000d48

08013118 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013118:	b590      	push	{r4, r7, lr}
 801311a:	b087      	sub	sp, #28
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013120:	2300      	movs	r3, #0
 8013122:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d101      	bne.n	801312e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801312a:	2303      	movs	r3, #3
 801312c:	e191      	b.n	8013452 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	2b39      	cmp	r3, #57	; 0x39
 8013134:	f200 8186 	bhi.w	8013444 <LoRaMacMibGetRequestConfirm+0x32c>
 8013138:	a201      	add	r2, pc, #4	; (adr r2, 8013140 <LoRaMacMibGetRequestConfirm+0x28>)
 801313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801313e:	bf00      	nop
 8013140:	08013229 	.word	0x08013229
 8013144:	08013235 	.word	0x08013235
 8013148:	08013241 	.word	0x08013241
 801314c:	0801324d 	.word	0x0801324d
 8013150:	08013259 	.word	0x08013259
 8013154:	08013265 	.word	0x08013265
 8013158:	08013271 	.word	0x08013271
 801315c:	08013445 	.word	0x08013445
 8013160:	08013445 	.word	0x08013445
 8013164:	08013445 	.word	0x08013445
 8013168:	08013445 	.word	0x08013445
 801316c:	08013445 	.word	0x08013445
 8013170:	08013445 	.word	0x08013445
 8013174:	08013445 	.word	0x08013445
 8013178:	08013445 	.word	0x08013445
 801317c:	0801327d 	.word	0x0801327d
 8013180:	08013289 	.word	0x08013289
 8013184:	08013295 	.word	0x08013295
 8013188:	080132b7 	.word	0x080132b7
 801318c:	080132c9 	.word	0x080132c9
 8013190:	080132db 	.word	0x080132db
 8013194:	080132ed 	.word	0x080132ed
 8013198:	08013321 	.word	0x08013321
 801319c:	080132ff 	.word	0x080132ff
 80131a0:	08013343 	.word	0x08013343
 80131a4:	0801334f 	.word	0x0801334f
 80131a8:	08013359 	.word	0x08013359
 80131ac:	08013363 	.word	0x08013363
 80131b0:	0801336d 	.word	0x0801336d
 80131b4:	08013377 	.word	0x08013377
 80131b8:	08013381 	.word	0x08013381
 80131bc:	080133ad 	.word	0x080133ad
 80131c0:	080133b9 	.word	0x080133b9
 80131c4:	080133d1 	.word	0x080133d1
 80131c8:	080133c5 	.word	0x080133c5
 80131cc:	080133dd 	.word	0x080133dd
 80131d0:	080133e7 	.word	0x080133e7
 80131d4:	080133f3 	.word	0x080133f3
 80131d8:	0801340d 	.word	0x0801340d
 80131dc:	080133fd 	.word	0x080133fd
 80131e0:	08013405 	.word	0x08013405
 80131e4:	08013445 	.word	0x08013445
 80131e8:	08013419 	.word	0x08013419
 80131ec:	08013445 	.word	0x08013445
 80131f0:	08013445 	.word	0x08013445
 80131f4:	08013445 	.word	0x08013445
 80131f8:	08013445 	.word	0x08013445
 80131fc:	08013445 	.word	0x08013445
 8013200:	08013445 	.word	0x08013445
 8013204:	08013445 	.word	0x08013445
 8013208:	08013445 	.word	0x08013445
 801320c:	08013445 	.word	0x08013445
 8013210:	08013445 	.word	0x08013445
 8013214:	08013445 	.word	0x08013445
 8013218:	08013445 	.word	0x08013445
 801321c:	08013445 	.word	0x08013445
 8013220:	0801342d 	.word	0x0801342d
 8013224:	08013439 	.word	0x08013439
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8013228:	4b8c      	ldr	r3, [pc, #560]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801322a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	711a      	strb	r2, [r3, #4]
            break;
 8013232:	e10d      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013234:	4b89      	ldr	r3, [pc, #548]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013236:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	711a      	strb	r2, [r3, #4]
            break;
 801323e:	e107      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013240:	f7fa fc9c 	bl	800db7c <SecureElementGetDevEui>
 8013244:	4602      	mov	r2, r0
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	605a      	str	r2, [r3, #4]
            break;
 801324a:	e101      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801324c:	f7fa fcb8 	bl	800dbc0 <SecureElementGetJoinEui>
 8013250:	4602      	mov	r2, r0
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	605a      	str	r2, [r3, #4]
            break;
 8013256:	e0fb      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8013258:	4b80      	ldr	r3, [pc, #512]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801325a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	711a      	strb	r2, [r3, #4]
            break;
 8013262:	e0f5      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8013264:	4b7d      	ldr	r3, [pc, #500]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013266:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	605a      	str	r2, [r3, #4]
            break;
 801326e:	e0ef      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8013270:	4b7a      	ldr	r3, [pc, #488]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013272:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	605a      	str	r2, [r3, #4]
            break;
 801327a:	e0e9      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801327c:	4b77      	ldr	r3, [pc, #476]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801327e:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	711a      	strb	r2, [r3, #4]
            break;
 8013286:	e0e3      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013288:	4b74      	ldr	r3, [pc, #464]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801328a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	711a      	strb	r2, [r3, #4]
            break;
 8013292:	e0dd      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013294:	231c      	movs	r3, #28
 8013296:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013298:	4b70      	ldr	r3, [pc, #448]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801329a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801329e:	f107 0210 	add.w	r2, r7, #16
 80132a2:	4611      	mov	r1, r2
 80132a4:	4618      	mov	r0, r3
 80132a6:	f002 ff9d 	bl	80161e4 <RegionGetPhyParam>
 80132aa:	4603      	mov	r3, r0
 80132ac:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80132ae:	68fa      	ldr	r2, [r7, #12]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	605a      	str	r2, [r3, #4]
            break;
 80132b4:	e0cc      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	4a68      	ldr	r2, [pc, #416]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80132ba:	3304      	adds	r3, #4
 80132bc:	3264      	adds	r2, #100	; 0x64
 80132be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132c2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80132c6:	e0c3      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	4a64      	ldr	r2, [pc, #400]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80132cc:	3304      	adds	r3, #4
 80132ce:	32a8      	adds	r2, #168	; 0xa8
 80132d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132d4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80132d8:	e0ba      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4a5f      	ldr	r2, [pc, #380]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80132de:	3304      	adds	r3, #4
 80132e0:	326c      	adds	r2, #108	; 0x6c
 80132e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132e6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80132ea:	e0b1      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	4a5b      	ldr	r2, [pc, #364]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80132f0:	3304      	adds	r3, #4
 80132f2:	32b0      	adds	r2, #176	; 0xb0
 80132f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132f8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80132fc:	e0a8      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80132fe:	231a      	movs	r3, #26
 8013300:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013302:	4b56      	ldr	r3, [pc, #344]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013308:	f107 0210 	add.w	r2, r7, #16
 801330c:	4611      	mov	r1, r2
 801330e:	4618      	mov	r0, r3
 8013310:	f002 ff68 	bl	80161e4 <RegionGetPhyParam>
 8013314:	4603      	mov	r3, r0
 8013316:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013318:	68fa      	ldr	r2, [r7, #12]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	605a      	str	r2, [r3, #4]
            break;
 801331e:	e097      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013320:	2319      	movs	r3, #25
 8013322:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013324:	4b4d      	ldr	r3, [pc, #308]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801332a:	f107 0210 	add.w	r2, r7, #16
 801332e:	4611      	mov	r1, r2
 8013330:	4618      	mov	r0, r3
 8013332:	f002 ff57 	bl	80161e4 <RegionGetPhyParam>
 8013336:	4603      	mov	r3, r0
 8013338:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	605a      	str	r2, [r3, #4]
            break;
 8013340:	e086      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013342:	4b46      	ldr	r3, [pc, #280]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013344:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	711a      	strb	r2, [r3, #4]
            break;
 801334c:	e080      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801334e:	4b43      	ldr	r3, [pc, #268]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	605a      	str	r2, [r3, #4]
            break;
 8013356:	e07b      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8013358:	4b40      	ldr	r3, [pc, #256]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801335a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	605a      	str	r2, [r3, #4]
            break;
 8013360:	e076      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8013362:	4b3e      	ldr	r3, [pc, #248]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	605a      	str	r2, [r3, #4]
            break;
 801336a:	e071      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801336c:	4b3b      	ldr	r3, [pc, #236]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801336e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	605a      	str	r2, [r3, #4]
            break;
 8013374:	e06c      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8013376:	4b39      	ldr	r3, [pc, #228]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013378:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	605a      	str	r2, [r3, #4]
            break;
 801337e:	e067      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8013380:	2302      	movs	r3, #2
 8013382:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013384:	4b35      	ldr	r3, [pc, #212]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013386:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801338a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801338c:	4b33      	ldr	r3, [pc, #204]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801338e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013392:	f107 0210 	add.w	r2, r7, #16
 8013396:	4611      	mov	r1, r2
 8013398:	4618      	mov	r0, r3
 801339a:	f002 ff23 	bl	80161e4 <RegionGetPhyParam>
 801339e:	4603      	mov	r3, r0
 80133a0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	b25a      	sxtb	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	711a      	strb	r2, [r3, #4]
            break;
 80133aa:	e051      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80133ac:	4b2b      	ldr	r3, [pc, #172]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80133ae:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	711a      	strb	r2, [r3, #4]
            break;
 80133b6:	e04b      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80133b8:	4b28      	ldr	r3, [pc, #160]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80133ba:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	711a      	strb	r2, [r3, #4]
            break;
 80133c2:	e045      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80133c4:	4b25      	ldr	r3, [pc, #148]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80133c6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	711a      	strb	r2, [r3, #4]
            break;
 80133ce:	e03f      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80133d0:	4b22      	ldr	r3, [pc, #136]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80133d2:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	711a      	strb	r2, [r3, #4]
            break;
 80133da:	e039      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80133dc:	4b1f      	ldr	r3, [pc, #124]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80133de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	605a      	str	r2, [r3, #4]
            break;
 80133e4:	e034      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80133e6:	4b1d      	ldr	r3, [pc, #116]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80133e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	711a      	strb	r2, [r3, #4]
            break;
 80133f0:	e02e      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80133f2:	4b1a      	ldr	r3, [pc, #104]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 80133f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	605a      	str	r2, [r3, #4]
            break;
 80133fa:	e029      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	4a17      	ldr	r2, [pc, #92]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 8013400:	605a      	str	r2, [r3, #4]
            break;
 8013402:	e025      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	4a16      	ldr	r2, [pc, #88]	; (8013460 <LoRaMacMibGetRequestConfirm+0x348>)
 8013408:	605a      	str	r2, [r3, #4]
            break;
 801340a:	e021      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801340c:	4b13      	ldr	r3, [pc, #76]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801340e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	605a      	str	r2, [r3, #4]
            break;
 8013416:	e01b      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	4a10      	ldr	r2, [pc, #64]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801341c:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8013420:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013422:	687c      	ldr	r4, [r7, #4]
 8013424:	f003 f854 	bl	80164d0 <RegionGetVersion>
 8013428:	60a0      	str	r0, [r4, #8]
            break;
 801342a:	e011      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801342c:	4b0b      	ldr	r3, [pc, #44]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801342e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	605a      	str	r2, [r3, #4]
            break;
 8013436:	e00b      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8013438:	4b08      	ldr	r3, [pc, #32]	; (801345c <LoRaMacMibGetRequestConfirm+0x344>)
 801343a:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	711a      	strb	r2, [r3, #4]
            break;
 8013442:	e005      	b.n	8013450 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f000 ffca 	bl	80143de <LoRaMacClassBMibGetRequestConfirm>
 801344a:	4603      	mov	r3, r0
 801344c:	75fb      	strb	r3, [r7, #23]
            break;
 801344e:	bf00      	nop
        }
    }
    return status;
 8013450:	7dfb      	ldrb	r3, [r7, #23]
}
 8013452:	4618      	mov	r0, r3
 8013454:	371c      	adds	r7, #28
 8013456:	46bd      	mov	sp, r7
 8013458:	bd90      	pop	{r4, r7, pc}
 801345a:	bf00      	nop
 801345c:	20001268 	.word	0x20001268
 8013460:	200017e4 	.word	0x200017e4

08013464 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b086      	sub	sp, #24
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801346c:	2300      	movs	r3, #0
 801346e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d101      	bne.n	801347a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013476:	2303      	movs	r3, #3
 8013478:	e35c      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801347a:	4bb9      	ldr	r3, [pc, #740]	; (8013760 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801347c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013480:	f003 0302 	and.w	r3, r3, #2
 8013484:	2b00      	cmp	r3, #0
 8013486:	d001      	beq.n	801348c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013488:	2301      	movs	r3, #1
 801348a:	e353      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	2b39      	cmp	r3, #57	; 0x39
 8013492:	f200 8323 	bhi.w	8013adc <LoRaMacMibSetRequestConfirm+0x678>
 8013496:	a201      	add	r2, pc, #4	; (adr r2, 801349c <LoRaMacMibSetRequestConfirm+0x38>)
 8013498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801349c:	08013585 	.word	0x08013585
 80134a0:	08013595 	.word	0x08013595
 80134a4:	080135af 	.word	0x080135af
 80134a8:	080135c7 	.word	0x080135c7
 80134ac:	080135df 	.word	0x080135df
 80134b0:	080135eb 	.word	0x080135eb
 80134b4:	080135f7 	.word	0x080135f7
 80134b8:	08013603 	.word	0x08013603
 80134bc:	08013629 	.word	0x08013629
 80134c0:	0801364f 	.word	0x0801364f
 80134c4:	08013675 	.word	0x08013675
 80134c8:	0801369b 	.word	0x0801369b
 80134cc:	080136c1 	.word	0x080136c1
 80134d0:	080136e7 	.word	0x080136e7
 80134d4:	0801370d 	.word	0x0801370d
 80134d8:	08013733 	.word	0x08013733
 80134dc:	08013753 	.word	0x08013753
 80134e0:	08013add 	.word	0x08013add
 80134e4:	0801376d 	.word	0x0801376d
 80134e8:	080137dd 	.word	0x080137dd
 80134ec:	0801381d 	.word	0x0801381d
 80134f0:	0801387f 	.word	0x0801387f
 80134f4:	080138ef 	.word	0x080138ef
 80134f8:	080138bf 	.word	0x080138bf
 80134fc:	0801391f 	.word	0x0801391f
 8013500:	08013941 	.word	0x08013941
 8013504:	0801394b 	.word	0x0801394b
 8013508:	08013955 	.word	0x08013955
 801350c:	0801395f 	.word	0x0801395f
 8013510:	08013969 	.word	0x08013969
 8013514:	08013add 	.word	0x08013add
 8013518:	08013973 	.word	0x08013973
 801351c:	080139a5 	.word	0x080139a5
 8013520:	08013a11 	.word	0x08013a11
 8013524:	080139df 	.word	0x080139df
 8013528:	08013a4d 	.word	0x08013a4d
 801352c:	08013a63 	.word	0x08013a63
 8013530:	08013a7b 	.word	0x08013a7b
 8013534:	08013a85 	.word	0x08013a85
 8013538:	08013a91 	.word	0x08013a91
 801353c:	08013add 	.word	0x08013add
 8013540:	08013a9b 	.word	0x08013a9b
 8013544:	08013add 	.word	0x08013add
 8013548:	08013add 	.word	0x08013add
 801354c:	08013add 	.word	0x08013add
 8013550:	08013add 	.word	0x08013add
 8013554:	08013add 	.word	0x08013add
 8013558:	08013add 	.word	0x08013add
 801355c:	08013add 	.word	0x08013add
 8013560:	08013add 	.word	0x08013add
 8013564:	08013add 	.word	0x08013add
 8013568:	08013add 	.word	0x08013add
 801356c:	08013add 	.word	0x08013add
 8013570:	08013add 	.word	0x08013add
 8013574:	08013add 	.word	0x08013add
 8013578:	08013add 	.word	0x08013add
 801357c:	08013ac5 	.word	0x08013ac5
 8013580:	08013ad1 	.word	0x08013ad1
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	791b      	ldrb	r3, [r3, #4]
 8013588:	4618      	mov	r0, r3
 801358a:	f7fd fb81 	bl	8010c90 <SwitchClass>
 801358e:	4603      	mov	r3, r0
 8013590:	75fb      	strb	r3, [r7, #23]
            break;
 8013592:	e2c4      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	791b      	ldrb	r3, [r3, #4]
 8013598:	2b02      	cmp	r3, #2
 801359a:	d005      	beq.n	80135a8 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	791a      	ldrb	r2, [r3, #4]
 80135a0:	4b70      	ldr	r3, [pc, #448]	; (8013764 <LoRaMacMibSetRequestConfirm+0x300>)
 80135a2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80135a6:	e2ba      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135a8:	2303      	movs	r3, #3
 80135aa:	75fb      	strb	r3, [r7, #23]
            break;
 80135ac:	e2b7      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7fa faca 	bl	800db4c <SecureElementSetDevEui>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	f000 8294 	beq.w	8013ae8 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135c0:	2303      	movs	r3, #3
 80135c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80135c4:	e290      	b.n	8013ae8 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fa fae0 	bl	800db90 <SecureElementSetJoinEui>
 80135d0:	4603      	mov	r3, r0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	f000 828a 	beq.w	8013aec <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135d8:	2303      	movs	r3, #3
 80135da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80135dc:	e286      	b.n	8013aec <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	791a      	ldrb	r2, [r3, #4]
 80135e2:	4b60      	ldr	r3, [pc, #384]	; (8013764 <LoRaMacMibSetRequestConfirm+0x300>)
 80135e4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 80135e8:	e299      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	4a5d      	ldr	r2, [pc, #372]	; (8013764 <LoRaMacMibSetRequestConfirm+0x300>)
 80135f0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 80135f4:	e293      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	4a5a      	ldr	r2, [pc, #360]	; (8013764 <LoRaMacMibSetRequestConfirm+0x300>)
 80135fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8013600:	e28d      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d00b      	beq.n	8013622 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	4619      	mov	r1, r3
 8013610:	2000      	movs	r0, #0
 8013612:	f001 fffd 	bl	8015610 <LoRaMacCryptoSetKey>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	f000 8269 	beq.w	8013af0 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801361e:	2311      	movs	r3, #17
 8013620:	e288      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013622:	2303      	movs	r3, #3
 8013624:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013626:	e263      	b.n	8013af0 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	685b      	ldr	r3, [r3, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00b      	beq.n	8013648 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	685b      	ldr	r3, [r3, #4]
 8013634:	4619      	mov	r1, r3
 8013636:	2001      	movs	r0, #1
 8013638:	f001 ffea 	bl	8015610 <LoRaMacCryptoSetKey>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	f000 8258 	beq.w	8013af4 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013644:	2311      	movs	r3, #17
 8013646:	e275      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013648:	2303      	movs	r3, #3
 801364a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801364c:	e252      	b.n	8013af4 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d00b      	beq.n	801366e <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	4619      	mov	r1, r3
 801365c:	2002      	movs	r0, #2
 801365e:	f001 ffd7 	bl	8015610 <LoRaMacCryptoSetKey>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	f000 8247 	beq.w	8013af8 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801366a:	2311      	movs	r3, #17
 801366c:	e262      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801366e:	2303      	movs	r3, #3
 8013670:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013672:	e241      	b.n	8013af8 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d00b      	beq.n	8013694 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	685b      	ldr	r3, [r3, #4]
 8013680:	4619      	mov	r1, r3
 8013682:	2003      	movs	r0, #3
 8013684:	f001 ffc4 	bl	8015610 <LoRaMacCryptoSetKey>
 8013688:	4603      	mov	r3, r0
 801368a:	2b00      	cmp	r3, #0
 801368c:	f000 8236 	beq.w	8013afc <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013690:	2311      	movs	r3, #17
 8013692:	e24f      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013694:	2303      	movs	r3, #3
 8013696:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013698:	e230      	b.n	8013afc <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d00b      	beq.n	80136ba <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	4619      	mov	r1, r3
 80136a8:	207f      	movs	r0, #127	; 0x7f
 80136aa:	f001 ffb1 	bl	8015610 <LoRaMacCryptoSetKey>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f000 8225 	beq.w	8013b00 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80136b6:	2311      	movs	r3, #17
 80136b8:	e23c      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136ba:	2303      	movs	r3, #3
 80136bc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80136be:	e21f      	b.n	8013b00 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d00b      	beq.n	80136e0 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	685b      	ldr	r3, [r3, #4]
 80136cc:	4619      	mov	r1, r3
 80136ce:	2080      	movs	r0, #128	; 0x80
 80136d0:	f001 ff9e 	bl	8015610 <LoRaMacCryptoSetKey>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	f000 8214 	beq.w	8013b04 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80136dc:	2311      	movs	r3, #17
 80136de:	e229      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80136e0:	2303      	movs	r3, #3
 80136e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80136e4:	e20e      	b.n	8013b04 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	685b      	ldr	r3, [r3, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d00b      	beq.n	8013706 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	4619      	mov	r1, r3
 80136f4:	2081      	movs	r0, #129	; 0x81
 80136f6:	f001 ff8b 	bl	8015610 <LoRaMacCryptoSetKey>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 8203 	beq.w	8013b08 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013702:	2311      	movs	r3, #17
 8013704:	e216      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013706:	2303      	movs	r3, #3
 8013708:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801370a:	e1fd      	b.n	8013b08 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00b      	beq.n	801372c <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	4619      	mov	r1, r3
 801371a:	2082      	movs	r0, #130	; 0x82
 801371c:	f001 ff78 	bl	8015610 <LoRaMacCryptoSetKey>
 8013720:	4603      	mov	r3, r0
 8013722:	2b00      	cmp	r3, #0
 8013724:	f000 81f2 	beq.w	8013b0c <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013728:	2311      	movs	r3, #17
 801372a:	e203      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801372c:	2303      	movs	r3, #3
 801372e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013730:	e1ec      	b.n	8013b0c <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	791a      	ldrb	r2, [r3, #4]
 8013736:	4b0b      	ldr	r3, [pc, #44]	; (8013764 <LoRaMacMibSetRequestConfirm+0x300>)
 8013738:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801373c:	4b0a      	ldr	r3, [pc, #40]	; (8013768 <LoRaMacMibSetRequestConfirm+0x304>)
 801373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013740:	4a08      	ldr	r2, [pc, #32]	; (8013764 <LoRaMacMibSetRequestConfirm+0x300>)
 8013742:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8013746:	4610      	mov	r0, r2
 8013748:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801374a:	4b07      	ldr	r3, [pc, #28]	; (8013768 <LoRaMacMibSetRequestConfirm+0x304>)
 801374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801374e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013750:	e1e5      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	791a      	ldrb	r2, [r3, #4]
 8013756:	4b03      	ldr	r3, [pc, #12]	; (8013764 <LoRaMacMibSetRequestConfirm+0x300>)
 8013758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 801375c:	e1df      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
 801375e:	bf00      	nop
 8013760:	20000d48 	.word	0x20000d48
 8013764:	20001268 	.word	0x20001268
 8013768:	0801dea4 	.word	0x0801dea4
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	7a1b      	ldrb	r3, [r3, #8]
 8013770:	b25b      	sxtb	r3, r3
 8013772:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013774:	4bb3      	ldr	r3, [pc, #716]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013776:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801377a:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801377c:	4bb1      	ldr	r3, [pc, #708]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801377e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013782:	f107 0108 	add.w	r1, r7, #8
 8013786:	2207      	movs	r2, #7
 8013788:	4618      	mov	r0, r3
 801378a:	f002 fd66 	bl	801625a <RegionVerify>
 801378e:	4603      	mov	r3, r0
 8013790:	f083 0301 	eor.w	r3, r3, #1
 8013794:	b2db      	uxtb	r3, r3
 8013796:	2b00      	cmp	r3, #0
 8013798:	d002      	beq.n	80137a0 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801379a:	2303      	movs	r3, #3
 801379c:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801379e:	e1be      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80137a6:	4ba7      	ldr	r3, [pc, #668]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80137a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137ac:	f107 0108 	add.w	r1, r7, #8
 80137b0:	2200      	movs	r2, #0
 80137b2:	4618      	mov	r0, r3
 80137b4:	f002 fd51 	bl	801625a <RegionVerify>
 80137b8:	4603      	mov	r3, r0
 80137ba:	f083 0301 	eor.w	r3, r3, #1
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137c4:	2303      	movs	r3, #3
 80137c6:	75fb      	strb	r3, [r7, #23]
            break;
 80137c8:	e1a9      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80137ca:	4b9e      	ldr	r3, [pc, #632]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	3364      	adds	r3, #100	; 0x64
 80137d0:	3204      	adds	r2, #4
 80137d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137d6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80137da:	e1a0      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	7a1b      	ldrb	r3, [r3, #8]
 80137e0:	b25b      	sxtb	r3, r3
 80137e2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137e4:	4b97      	ldr	r3, [pc, #604]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80137e6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80137ea:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80137ec:	4b95      	ldr	r3, [pc, #596]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80137ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137f2:	f107 0108 	add.w	r1, r7, #8
 80137f6:	2207      	movs	r2, #7
 80137f8:	4618      	mov	r0, r3
 80137fa:	f002 fd2e 	bl	801625a <RegionVerify>
 80137fe:	4603      	mov	r3, r0
 8013800:	2b00      	cmp	r3, #0
 8013802:	d008      	beq.n	8013816 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013804:	4b8f      	ldr	r3, [pc, #572]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	33a8      	adds	r3, #168	; 0xa8
 801380a:	3204      	adds	r2, #4
 801380c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013810:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013814:	e183      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013816:	2303      	movs	r3, #3
 8013818:	75fb      	strb	r3, [r7, #23]
            break;
 801381a:	e180      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	7a1b      	ldrb	r3, [r3, #8]
 8013820:	b25b      	sxtb	r3, r3
 8013822:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013824:	4b87      	ldr	r3, [pc, #540]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013826:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801382a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801382c:	4b85      	ldr	r3, [pc, #532]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801382e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013832:	f107 0108 	add.w	r1, r7, #8
 8013836:	2207      	movs	r2, #7
 8013838:	4618      	mov	r0, r3
 801383a:	f002 fd0e 	bl	801625a <RegionVerify>
 801383e:	4603      	mov	r3, r0
 8013840:	2b00      	cmp	r3, #0
 8013842:	d019      	beq.n	8013878 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013844:	4b7f      	ldr	r3, [pc, #508]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	336c      	adds	r3, #108	; 0x6c
 801384a:	3204      	adds	r2, #4
 801384c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013850:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013854:	4b7b      	ldr	r3, [pc, #492]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013856:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801385a:	2b02      	cmp	r3, #2
 801385c:	f040 8158 	bne.w	8013b10 <LoRaMacMibSetRequestConfirm+0x6ac>
 8013860:	4b78      	ldr	r3, [pc, #480]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013862:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013866:	2b00      	cmp	r3, #0
 8013868:	f000 8152 	beq.w	8013b10 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801386c:	4b76      	ldr	r3, [pc, #472]	; (8013a48 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013870:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013872:	f7fe fca5 	bl	80121c0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013876:	e14b      	b.n	8013b10 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013878:	2303      	movs	r3, #3
 801387a:	75fb      	strb	r3, [r7, #23]
            break;
 801387c:	e148      	b.n	8013b10 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	7a1b      	ldrb	r3, [r3, #8]
 8013882:	b25b      	sxtb	r3, r3
 8013884:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013886:	4b6f      	ldr	r3, [pc, #444]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013888:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801388c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801388e:	4b6d      	ldr	r3, [pc, #436]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013894:	f107 0108 	add.w	r1, r7, #8
 8013898:	2207      	movs	r2, #7
 801389a:	4618      	mov	r0, r3
 801389c:	f002 fcdd 	bl	801625a <RegionVerify>
 80138a0:	4603      	mov	r3, r0
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d008      	beq.n	80138b8 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80138a6:	4b67      	ldr	r3, [pc, #412]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	33b0      	adds	r3, #176	; 0xb0
 80138ac:	3204      	adds	r2, #4
 80138ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138b2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80138b6:	e132      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138b8:	2303      	movs	r3, #3
 80138ba:	75fb      	strb	r3, [r7, #23]
            break;
 80138bc:	e12f      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80138c4:	2301      	movs	r3, #1
 80138c6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80138c8:	4b5e      	ldr	r3, [pc, #376]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80138ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138ce:	f107 020c 	add.w	r2, r7, #12
 80138d2:	4611      	mov	r1, r2
 80138d4:	4618      	mov	r0, r3
 80138d6:	f002 fce9 	bl	80162ac <RegionChanMaskSet>
 80138da:	4603      	mov	r3, r0
 80138dc:	f083 0301 	eor.w	r3, r3, #1
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	f000 8116 	beq.w	8013b14 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138e8:	2303      	movs	r3, #3
 80138ea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138ec:	e112      	b.n	8013b14 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80138f4:	2300      	movs	r3, #0
 80138f6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80138f8:	4b52      	ldr	r3, [pc, #328]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80138fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138fe:	f107 020c 	add.w	r2, r7, #12
 8013902:	4611      	mov	r1, r2
 8013904:	4618      	mov	r0, r3
 8013906:	f002 fcd1 	bl	80162ac <RegionChanMaskSet>
 801390a:	4603      	mov	r3, r0
 801390c:	f083 0301 	eor.w	r3, r3, #1
 8013910:	b2db      	uxtb	r3, r3
 8013912:	2b00      	cmp	r3, #0
 8013914:	f000 8100 	beq.w	8013b18 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013918:	2303      	movs	r3, #3
 801391a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801391c:	e0fc      	b.n	8013b18 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	791b      	ldrb	r3, [r3, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d009      	beq.n	801393a <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801392a:	2b0f      	cmp	r3, #15
 801392c:	d805      	bhi.n	801393a <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	791a      	ldrb	r2, [r3, #4]
 8013932:	4b44      	ldr	r3, [pc, #272]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013934:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013938:	e0f1      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801393a:	2303      	movs	r3, #3
 801393c:	75fb      	strb	r3, [r7, #23]
            break;
 801393e:	e0ee      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	4a3f      	ldr	r2, [pc, #252]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013946:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8013948:	e0e9      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	4a3d      	ldr	r2, [pc, #244]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013950:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8013952:	e0e4      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	4a3a      	ldr	r2, [pc, #232]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801395a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801395c:	e0df      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	4a38      	ldr	r2, [pc, #224]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013964:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8013966:	e0da      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	4a35      	ldr	r2, [pc, #212]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801396e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8013970:	e0d5      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013978:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801397a:	4b32      	ldr	r3, [pc, #200]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801397c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013980:	f107 0108 	add.w	r1, r7, #8
 8013984:	2206      	movs	r2, #6
 8013986:	4618      	mov	r0, r3
 8013988:	f002 fc67 	bl	801625a <RegionVerify>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d005      	beq.n	801399e <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013992:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013996:	4b2b      	ldr	r3, [pc, #172]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013998:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801399c:	e0bf      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801399e:	2303      	movs	r3, #3
 80139a0:	75fb      	strb	r3, [r7, #23]
            break;
 80139a2:	e0bc      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80139aa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80139ac:	4b25      	ldr	r3, [pc, #148]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80139ae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80139b2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80139b4:	4b23      	ldr	r3, [pc, #140]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80139b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80139ba:	f107 0108 	add.w	r1, r7, #8
 80139be:	2205      	movs	r2, #5
 80139c0:	4618      	mov	r0, r3
 80139c2:	f002 fc4a 	bl	801625a <RegionVerify>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d005      	beq.n	80139d8 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80139cc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80139d0:	4b1c      	ldr	r3, [pc, #112]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80139d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80139d6:	e0a2      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139d8:	2303      	movs	r3, #3
 80139da:	75fb      	strb	r3, [r7, #23]
            break;
 80139dc:	e09f      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80139e4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80139e6:	4b17      	ldr	r3, [pc, #92]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80139e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80139ec:	f107 0108 	add.w	r1, r7, #8
 80139f0:	220a      	movs	r2, #10
 80139f2:	4618      	mov	r0, r3
 80139f4:	f002 fc31 	bl	801625a <RegionVerify>
 80139f8:	4603      	mov	r3, r0
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d005      	beq.n	8013a0a <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80139fe:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013a02:	4b10      	ldr	r3, [pc, #64]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013a04:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a08:	e089      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a0a:	2303      	movs	r3, #3
 8013a0c:	75fb      	strb	r3, [r7, #23]
            break;
 8013a0e:	e086      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013a16:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013a18:	4b0a      	ldr	r3, [pc, #40]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a1e:	f107 0108 	add.w	r1, r7, #8
 8013a22:	2209      	movs	r2, #9
 8013a24:	4618      	mov	r0, r3
 8013a26:	f002 fc18 	bl	801625a <RegionVerify>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d005      	beq.n	8013a3c <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013a30:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013a34:	4b03      	ldr	r3, [pc, #12]	; (8013a44 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a3a:	e070      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a3c:	2303      	movs	r3, #3
 8013a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8013a40:	e06d      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
 8013a42:	bf00      	nop
 8013a44:	20001268 	.word	0x20001268
 8013a48:	0801dea4 	.word	0x0801dea4
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	4a3a      	ldr	r2, [pc, #232]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8013a56:	4b39      	ldr	r3, [pc, #228]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a5c:	4a37      	ldr	r2, [pc, #220]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a5e:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8013a60:	e05d      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	791a      	ldrb	r2, [r3, #4]
 8013a66:	4b35      	ldr	r3, [pc, #212]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a68:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8013a6c:	4b33      	ldr	r3, [pc, #204]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a6e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013a72:	4b32      	ldr	r3, [pc, #200]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8013a78:	e051      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	4a2f      	ldr	r2, [pc, #188]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a80:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8013a82:	e04c      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	4a2c      	ldr	r2, [pc, #176]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013a8a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8013a8e:	e046      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013a90:	f7fe fdc8 	bl	8012624 <RestoreNvmData>
 8013a94:	4603      	mov	r3, r0
 8013a96:	75fb      	strb	r3, [r7, #23]
            break;
 8013a98:	e041      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	799b      	ldrb	r3, [r3, #6]
 8013a9e:	2b01      	cmp	r3, #1
 8013aa0:	d80d      	bhi.n	8013abe <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013aa2:	4a26      	ldr	r2, [pc, #152]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6858      	ldr	r0, [r3, #4]
 8013ab0:	f001 fd12 	bl	80154d8 <LoRaMacCryptoSetLrWanVersion>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d030      	beq.n	8013b1c <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013aba:	2311      	movs	r3, #17
 8013abc:	e03a      	b.n	8013b34 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013abe:	2303      	movs	r3, #3
 8013ac0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ac2:	e02b      	b.n	8013b1c <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	4a1c      	ldr	r2, [pc, #112]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013aca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8013ace:	e026      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	791a      	ldrb	r2, [r3, #4]
 8013ad4:	4b19      	ldr	r3, [pc, #100]	; (8013b3c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8013ad6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
            break;
 8013ada:	e020      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f000 fc88 	bl	80143f2 <LoRaMacMibClassBSetRequestConfirm>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	75fb      	strb	r3, [r7, #23]
            break;
 8013ae6:	e01a      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013ae8:	bf00      	nop
 8013aea:	e018      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013aec:	bf00      	nop
 8013aee:	e016      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013af0:	bf00      	nop
 8013af2:	e014      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013af4:	bf00      	nop
 8013af6:	e012      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013af8:	bf00      	nop
 8013afa:	e010      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013afc:	bf00      	nop
 8013afe:	e00e      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b00:	bf00      	nop
 8013b02:	e00c      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b04:	bf00      	nop
 8013b06:	e00a      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b08:	bf00      	nop
 8013b0a:	e008      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b0c:	bf00      	nop
 8013b0e:	e006      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b10:	bf00      	nop
 8013b12:	e004      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b14:	bf00      	nop
 8013b16:	e002      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b18:	bf00      	nop
 8013b1a:	e000      	b.n	8013b1e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8013b1c:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8013b1e:	7dfb      	ldrb	r3, [r7, #23]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d106      	bne.n	8013b32 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013b24:	4a06      	ldr	r2, [pc, #24]	; (8013b40 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8013b26:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b2e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3718      	adds	r7, #24
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	20001268 	.word	0x20001268
 8013b40:	20000d48 	.word	0x20000d48

08013b44 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b08a      	sub	sp, #40	; 0x28
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013b52:	2300      	movs	r3, #0
 8013b54:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d101      	bne.n	8013b60 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b5c:	2303      	movs	r3, #3
 8013b5e:	e16c      	b.n	8013e3a <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2200      	movs	r2, #0
 8013b64:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013b66:	f7fc fc6b 	bl	8010440 <LoRaMacIsBusy>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d001      	beq.n	8013b74 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8013b70:	2301      	movs	r3, #1
 8013b72:	e162      	b.n	8013e3a <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013b74:	f001 f954 	bl	8014e20 <LoRaMacConfirmQueueIsFull>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d001      	beq.n	8013b82 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8013b7e:	2301      	movs	r3, #1
 8013b80:	e15b      	b.n	8013e3a <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013b82:	f001 f941 	bl	8014e08 <LoRaMacConfirmQueueGetCnt>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d104      	bne.n	8013b96 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013b8c:	2214      	movs	r2, #20
 8013b8e:	2100      	movs	r1, #0
 8013b90:	48ac      	ldr	r0, [pc, #688]	; (8013e44 <LoRaMacMlmeRequest+0x300>)
 8013b92:	f004 fe0f 	bl	80187b4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013b96:	4bac      	ldr	r3, [pc, #688]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013b98:	2201      	movs	r2, #1
 8013b9a:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013b9e:	4aaa      	ldr	r2, [pc, #680]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013ba0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013ba4:	f043 0304 	orr.w	r3, r3, #4
 8013ba8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	3b01      	subs	r3, #1
 8013bcc:	2b0c      	cmp	r3, #12
 8013bce:	f200 8108 	bhi.w	8013de2 <LoRaMacMlmeRequest+0x29e>
 8013bd2:	a201      	add	r2, pc, #4	; (adr r2, 8013bd8 <LoRaMacMlmeRequest+0x94>)
 8013bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bd8:	08013c0d 	.word	0x08013c0d
 8013bdc:	08013de3 	.word	0x08013de3
 8013be0:	08013de3 	.word	0x08013de3
 8013be4:	08013ce3 	.word	0x08013ce3
 8013be8:	08013d05 	.word	0x08013d05
 8013bec:	08013de3 	.word	0x08013de3
 8013bf0:	08013de3 	.word	0x08013de3
 8013bf4:	08013de3 	.word	0x08013de3
 8013bf8:	08013d23 	.word	0x08013d23
 8013bfc:	08013de3 	.word	0x08013de3
 8013c00:	08013db1 	.word	0x08013db1
 8013c04:	08013d45 	.word	0x08013d45
 8013c08:	08013d8f 	.word	0x08013d8f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013c0c:	4b8e      	ldr	r3, [pc, #568]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013c0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c12:	f003 0320 	and.w	r3, r3, #32
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d001      	beq.n	8013c1e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e10d      	b.n	8013e3a <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	791b      	ldrb	r3, [r3, #4]
 8013c22:	2b02      	cmp	r3, #2
 8013c24:	d12e      	bne.n	8013c84 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8013c26:	f7fe f995 	bl	8011f54 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013c2a:	4b88      	ldr	r3, [pc, #544]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013c2c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	795b      	ldrb	r3, [r3, #5]
 8013c34:	b25b      	sxtb	r3, r3
 8013c36:	2200      	movs	r2, #0
 8013c38:	4619      	mov	r1, r3
 8013c3a:	f002 fbf6 	bl	801642a <RegionAlternateDr>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	461a      	mov	r2, r3
 8013c42:	4b82      	ldr	r3, [pc, #520]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013c48:	2307      	movs	r3, #7
 8013c4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8013c4e:	20ff      	movs	r0, #255	; 0xff
 8013c50:	f7fd fefe 	bl	8011a50 <SendReJoinReq>
 8013c54:	4603      	mov	r3, r0
 8013c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8013c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f000 80c1 	beq.w	8013de6 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013c64:	4b79      	ldr	r3, [pc, #484]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013c66:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	795b      	ldrb	r3, [r3, #5]
 8013c6e:	b25b      	sxtb	r3, r3
 8013c70:	2201      	movs	r2, #1
 8013c72:	4619      	mov	r1, r3
 8013c74:	f002 fbd9 	bl	801642a <RegionAlternateDr>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	4b73      	ldr	r3, [pc, #460]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013c82:	e0b0      	b.n	8013de6 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	791b      	ldrb	r3, [r3, #4]
 8013c88:	2b01      	cmp	r3, #1
 8013c8a:	f040 80ac 	bne.w	8013de6 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8013c8e:	4b6f      	ldr	r3, [pc, #444]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013c90:	2200      	movs	r2, #0
 8013c92:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013c96:	2302      	movs	r3, #2
 8013c98:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013c9a:	4b6c      	ldr	r3, [pc, #432]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013ca0:	f107 020c 	add.w	r2, r7, #12
 8013ca4:	4611      	mov	r1, r2
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f002 fac5 	bl	8016236 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	791a      	ldrb	r2, [r3, #4]
 8013cb0:	4b66      	ldr	r3, [pc, #408]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013cb2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8013cc2:	4b61      	ldr	r3, [pc, #388]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013cc4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013cc8:	691b      	ldr	r3, [r3, #16]
 8013cca:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013ccc:	4a5e      	ldr	r2, [pc, #376]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013cce:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013cd2:	f043 0320 	orr.w	r3, r3, #32
 8013cd6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013ce0:	e081      	b.n	8013de6 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013ce8:	f107 031c 	add.w	r3, r7, #28
 8013cec:	2200      	movs	r2, #0
 8013cee:	4619      	mov	r1, r3
 8013cf0:	2002      	movs	r0, #2
 8013cf2:	f000 fcfb 	bl	80146ec <LoRaMacCommandsAddCmd>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d076      	beq.n	8013dea <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013cfc:	2313      	movs	r3, #19
 8013cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8013d02:	e072      	b.n	8013dea <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	8898      	ldrh	r0, [r3, #4]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6899      	ldr	r1, [r3, #8]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013d12:	b2db      	uxtb	r3, r3
 8013d14:	461a      	mov	r2, r3
 8013d16:	f7fe fc65 	bl	80125e4 <SetTxContinuousWave>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013d20:	e06a      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013d22:	2300      	movs	r3, #0
 8013d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013d28:	f107 031c 	add.w	r3, r7, #28
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	4619      	mov	r1, r3
 8013d30:	200d      	movs	r0, #13
 8013d32:	f000 fcdb 	bl	80146ec <LoRaMacCommandsAddCmd>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d058      	beq.n	8013dee <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013d3c:	2313      	movs	r3, #19
 8013d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8013d42:	e054      	b.n	8013dee <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013d44:	4b41      	ldr	r3, [pc, #260]	; (8013e4c <LoRaMacMlmeRequest+0x308>)
 8013d46:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d151      	bne.n	8013df2 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	791b      	ldrb	r3, [r3, #4]
 8013d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	791b      	ldrb	r3, [r3, #4]
 8013d5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	4618      	mov	r0, r3
 8013d62:	f000 fb1b 	bl	801439c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013d66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d6a:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013d72:	f107 031c 	add.w	r3, r7, #28
 8013d76:	2201      	movs	r2, #1
 8013d78:	4619      	mov	r1, r3
 8013d7a:	2010      	movs	r0, #16
 8013d7c:	f000 fcb6 	bl	80146ec <LoRaMacCommandsAddCmd>
 8013d80:	4603      	mov	r3, r0
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d035      	beq.n	8013df2 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013d86:	2313      	movs	r3, #19
 8013d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8013d8c:	e031      	b.n	8013df2 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013d94:	f107 031c 	add.w	r3, r7, #28
 8013d98:	2200      	movs	r2, #0
 8013d9a:	4619      	mov	r1, r3
 8013d9c:	2012      	movs	r0, #18
 8013d9e:	f000 fca5 	bl	80146ec <LoRaMacCommandsAddCmd>
 8013da2:	4603      	mov	r3, r0
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d026      	beq.n	8013df6 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013da8:	2313      	movs	r3, #19
 8013daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8013dae:	e022      	b.n	8013df6 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013db0:	2301      	movs	r3, #1
 8013db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013db6:	f000 faa7 	bl	8014308 <LoRaMacClassBIsAcquisitionInProgress>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	f083 0301 	eor.w	r3, r3, #1
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d009      	beq.n	8013dda <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013dc6:	2000      	movs	r0, #0
 8013dc8:	f000 fa80 	bl	80142cc <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013dcc:	2000      	movs	r0, #0
 8013dce:	f000 faa2 	bl	8014316 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013dd8:	e00e      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013de0:	e00a      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8013de2:	bf00      	nop
 8013de4:	e008      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013de6:	bf00      	nop
 8013de8:	e006      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013dea:	bf00      	nop
 8013dec:	e004      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013dee:	bf00      	nop
 8013df0:	e002      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013df2:	bf00      	nop
 8013df4:	e000      	b.n	8013df8 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013df6:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013df8:	4b13      	ldr	r3, [pc, #76]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013dfa:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d010      	beq.n	8013e2c <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013e0a:	f000 fffd 	bl	8014e08 <LoRaMacConfirmQueueGetCnt>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d110      	bne.n	8013e36 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8013e14:	4b0c      	ldr	r3, [pc, #48]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013e16:	2200      	movs	r2, #0
 8013e18:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013e1c:	4a0a      	ldr	r2, [pc, #40]	; (8013e48 <LoRaMacMlmeRequest+0x304>)
 8013e1e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013e22:	f36f 0382 	bfc	r3, #2, #1
 8013e26:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8013e2a:	e004      	b.n	8013e36 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013e2c:	f107 0320 	add.w	r3, r7, #32
 8013e30:	4618      	mov	r0, r3
 8013e32:	f000 fe9b 	bl	8014b6c <LoRaMacConfirmQueueAdd>
    }
    return status;
 8013e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3728      	adds	r7, #40	; 0x28
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	bf00      	nop
 8013e44:	200011a0 	.word	0x200011a0
 8013e48:	20000d48 	.word	0x20000d48
 8013e4c:	20001268 	.word	0x20001268

08013e50 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013e50:	b5b0      	push	{r4, r5, r7, lr}
 8013e52:	b092      	sub	sp, #72	; 0x48
 8013e54:	af02      	add	r7, sp, #8
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	460b      	mov	r3, r1
 8013e5a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e5c:	2302      	movs	r3, #2
 8013e5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013e62:	2300      	movs	r3, #0
 8013e64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	63bb      	str	r3, [r7, #56]	; 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8013e72:	2300      	movs	r3, #0
 8013e74:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d101      	bne.n	8013e82 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e7e:	2303      	movs	r3, #3
 8013e80:	e113      	b.n	80140aa <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2200      	movs	r2, #0
 8013e86:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8013e88:	f7fc fada 	bl	8010440 <LoRaMacIsBusy>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d001      	beq.n	8013e96 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8013e92:	2301      	movs	r3, #1
 8013e94:	e109      	b.n	80140aa <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f107 040c 	add.w	r4, r7, #12
 8013e9c:	461d      	mov	r5, r3
 8013e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ea2:	682b      	ldr	r3, [r5, #0]
 8013ea4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013eac:	2214      	movs	r2, #20
 8013eae:	2100      	movs	r1, #0
 8013eb0:	4880      	ldr	r0, [pc, #512]	; (80140b4 <LoRaMacMcpsRequest+0x264>)
 8013eb2:	f004 fc7f 	bl	80187b4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013eb6:	4b80      	ldr	r3, [pc, #512]	; (80140b8 <LoRaMacMcpsRequest+0x268>)
 8013eb8:	2201      	movs	r2, #1
 8013eba:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013ebe:	4b7f      	ldr	r3, [pc, #508]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013ec0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013ec4:	2b02      	cmp	r3, #2
 8013ec6:	d111      	bne.n	8013eec <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013ec8:	4b7c      	ldr	r3, [pc, #496]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013eca:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8013ece:	2b02      	cmp	r3, #2
 8013ed0:	d10c      	bne.n	8013eec <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013ed2:	4b7a      	ldr	r3, [pc, #488]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013ed4:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8013ed8:	f083 0301 	eor.w	r3, r3, #1
 8013edc:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d004      	beq.n	8013eec <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8013ee2:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d101      	bne.n	8013eec <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013ee8:	2301      	movs	r3, #1
 8013eea:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013eec:	7b3b      	ldrb	r3, [r7, #12]
 8013eee:	2b03      	cmp	r3, #3
 8013ef0:	d030      	beq.n	8013f54 <LoRaMacMcpsRequest+0x104>
 8013ef2:	2b03      	cmp	r3, #3
 8013ef4:	dc3f      	bgt.n	8013f76 <LoRaMacMcpsRequest+0x126>
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d002      	beq.n	8013f00 <LoRaMacMcpsRequest+0xb0>
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d015      	beq.n	8013f2a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013efe:	e03a      	b.n	8013f76 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8013f00:	2301      	movs	r3, #1
 8013f02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013f06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f0a:	2202      	movs	r2, #2
 8013f0c:	f362 1347 	bfi	r3, r2, #5, #3
 8013f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8013f14:	7c3b      	ldrb	r3, [r7, #16]
 8013f16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8013f1e:	8b3b      	ldrh	r3, [r7, #24]
 8013f20:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8013f22:	7ebb      	ldrb	r3, [r7, #26]
 8013f24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013f28:	e026      	b.n	8013f78 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013f30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f34:	2204      	movs	r2, #4
 8013f36:	f362 1347 	bfi	r3, r2, #5, #3
 8013f3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8013f3e:	7c3b      	ldrb	r3, [r7, #16]
 8013f40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8013f48:	8b3b      	ldrh	r3, [r7, #24]
 8013f4a:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8013f4c:	7ebb      	ldrb	r3, [r7, #26]
 8013f4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013f52:	e011      	b.n	8013f78 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8013f54:	2301      	movs	r3, #1
 8013f56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f5e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8013f62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8013f6a:	8abb      	ldrh	r3, [r7, #20]
 8013f6c:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8013f6e:	7dbb      	ldrb	r3, [r7, #22]
 8013f70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013f74:	e000      	b.n	8013f78 <LoRaMacMcpsRequest+0x128>
            break;
 8013f76:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013f78:	2302      	movs	r3, #2
 8013f7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013f7e:	4b4f      	ldr	r3, [pc, #316]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013f80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013f84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013f88:	4b4c      	ldr	r3, [pc, #304]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013f8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013f92:	4611      	mov	r1, r2
 8013f94:	4618      	mov	r0, r3
 8013f96:	f002 f925 	bl	80161e4 <RegionGetPhyParam>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa0:	b25b      	sxtb	r3, r3
 8013fa2:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	bfb8      	it	lt
 8013faa:	4613      	movlt	r3, r2
 8013fac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013fb0:	4b42      	ldr	r3, [pc, #264]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013fb2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013fb6:	4a41      	ldr	r2, [pc, #260]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013fb8:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8013fbc:	4a3f      	ldr	r2, [pc, #252]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013fbe:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7fc fbd4 	bl	8010770 <CheckForMinimumAbpDatarate>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d002      	beq.n	8013fd4 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8013fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8013fd4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d05f      	beq.n	801409c <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013fdc:	4b37      	ldr	r3, [pc, #220]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013fde:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013fe2:	f083 0301 	eor.w	r3, r3, #1
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d10e      	bne.n	801400a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013fec:	4b33      	ldr	r3, [pc, #204]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013fee:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013ff2:	4a32      	ldr	r2, [pc, #200]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013ff4:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8013ff8:	4a30      	ldr	r2, [pc, #192]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8013ffa:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7fc fbb6 	bl	8010770 <CheckForMinimumAbpDatarate>
 8014004:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014006:	2b00      	cmp	r3, #0
 8014008:	d01c      	beq.n	8014044 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801400a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801400e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014012:	4b2a      	ldr	r3, [pc, #168]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8014014:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8014018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801401c:	4b27      	ldr	r3, [pc, #156]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 801401e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014022:	f107 0120 	add.w	r1, r7, #32
 8014026:	2205      	movs	r2, #5
 8014028:	4618      	mov	r0, r3
 801402a:	f002 f916 	bl	801625a <RegionVerify>
 801402e:	4603      	mov	r3, r0
 8014030:	2b00      	cmp	r3, #0
 8014032:	d005      	beq.n	8014040 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014034:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014038:	4b20      	ldr	r3, [pc, #128]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 801403a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801403e:	e001      	b.n	8014044 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014040:	2303      	movs	r3, #3
 8014042:	e032      	b.n	80140aa <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014044:	4b1d      	ldr	r3, [pc, #116]	; (80140bc <LoRaMacMcpsRequest+0x26c>)
 8014046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801404a:	4a1b      	ldr	r2, [pc, #108]	; (80140b8 <LoRaMacMcpsRequest+0x268>)
 801404c:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 8014050:	4611      	mov	r1, r2
 8014052:	4618      	mov	r0, r3
 8014054:	f7fc fc76 	bl	8010944 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8014058:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801405a:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 801405e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014062:	78fb      	ldrb	r3, [r7, #3]
 8014064:	9300      	str	r3, [sp, #0]
 8014066:	4613      	mov	r3, r2
 8014068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801406a:	f7fd fc0d 	bl	8011888 <Send>
 801406e:	4603      	mov	r3, r0
 8014070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8014074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014078:	2b00      	cmp	r3, #0
 801407a:	d10b      	bne.n	8014094 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 801407c:	7b3a      	ldrb	r2, [r7, #12]
 801407e:	4b0e      	ldr	r3, [pc, #56]	; (80140b8 <LoRaMacMcpsRequest+0x268>)
 8014080:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014084:	4a0c      	ldr	r2, [pc, #48]	; (80140b8 <LoRaMacMcpsRequest+0x268>)
 8014086:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801408a:	f043 0301 	orr.w	r3, r3, #1
 801408e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8014092:	e003      	b.n	801409c <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014094:	4b08      	ldr	r3, [pc, #32]	; (80140b8 <LoRaMacMcpsRequest+0x268>)
 8014096:	2200      	movs	r2, #0
 8014098:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801409c:	4b06      	ldr	r3, [pc, #24]	; (80140b8 <LoRaMacMcpsRequest+0x268>)
 801409e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	611a      	str	r2, [r3, #16]

    return status;
 80140a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3740      	adds	r7, #64	; 0x40
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bdb0      	pop	{r4, r5, r7, pc}
 80140b2:	bf00      	nop
 80140b4:	2000118c 	.word	0x2000118c
 80140b8:	20000d48 	.word	0x20000d48
 80140bc:	20001268 	.word	0x20001268

080140c0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	4603      	mov	r3, r0
 80140c8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80140ca:	79fb      	ldrb	r3, [r7, #7]
 80140cc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80140ce:	4b0a      	ldr	r3, [pc, #40]	; (80140f8 <LoRaMacTestSetDutyCycleOn+0x38>)
 80140d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80140d4:	f107 010c 	add.w	r1, r7, #12
 80140d8:	220f      	movs	r2, #15
 80140da:	4618      	mov	r0, r3
 80140dc:	f002 f8bd 	bl	801625a <RegionVerify>
 80140e0:	4603      	mov	r3, r0
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d003      	beq.n	80140ee <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80140e6:	4a04      	ldr	r2, [pc, #16]	; (80140f8 <LoRaMacTestSetDutyCycleOn+0x38>)
 80140e8:	79fb      	ldrb	r3, [r7, #7]
 80140ea:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 80140ee:	bf00      	nop
 80140f0:	3710      	adds	r7, #16
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
 80140f6:	bf00      	nop
 80140f8:	20001268 	.word	0x20001268

080140fc <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014100:	f7fe ff26 	bl	8012f50 <LoRaMacStop>
 8014104:	4603      	mov	r3, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d111      	bne.n	801412e <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801410a:	480a      	ldr	r0, [pc, #40]	; (8014134 <LoRaMacDeInitialization+0x38>)
 801410c:	f008 fc62 	bl	801c9d4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014110:	4809      	ldr	r0, [pc, #36]	; (8014138 <LoRaMacDeInitialization+0x3c>)
 8014112:	f008 fc5f 	bl	801c9d4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014116:	4809      	ldr	r0, [pc, #36]	; (801413c <LoRaMacDeInitialization+0x40>)
 8014118:	f008 fc5c 	bl	801c9d4 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801411c:	f000 f948 	bl	80143b0 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8014120:	f7fd ff18 	bl	8011f54 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014124:	4b06      	ldr	r3, [pc, #24]	; (8014140 <LoRaMacDeInitialization+0x44>)
 8014126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014128:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801412a:	2300      	movs	r3, #0
 801412c:	e000      	b.n	8014130 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801412e:	2301      	movs	r3, #1
    }
}
 8014130:	4618      	mov	r0, r3
 8014132:	bd80      	pop	{r7, pc}
 8014134:	200010b0 	.word	0x200010b0
 8014138:	200010c8 	.word	0x200010c8
 801413c:	200010e0 	.word	0x200010e0
 8014140:	0801dea4 	.word	0x0801dea4

08014144 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b08c      	sub	sp, #48	; 0x30
 8014148:	af00      	add	r7, sp, #0
 801414a:	60f8      	str	r0, [r7, #12]
 801414c:	60b9      	str	r1, [r7, #8]
 801414e:	607a      	str	r2, [r7, #4]
 8014150:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014152:	2300      	movs	r3, #0
 8014154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	7b1b      	ldrb	r3, [r3, #12]
 801415c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	7b5b      	ldrb	r3, [r3, #13]
 8014164:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	7b9b      	ldrb	r3, [r3, #14]
 801416c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	685a      	ldr	r2, [r3, #4]
 8014174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014176:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	785b      	ldrb	r3, [r3, #1]
 801417c:	2b00      	cmp	r3, #0
 801417e:	f000 8088 	beq.w	8014292 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014182:	2302      	movs	r3, #2
 8014184:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	7bdb      	ldrb	r3, [r3, #15]
 801418c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	7c1b      	ldrb	r3, [r3, #16]
 8014194:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014198:	4611      	mov	r1, r2
 801419a:	4618      	mov	r0, r3
 801419c:	f002 f822 	bl	80161e4 <RegionGetPhyParam>
 80141a0:	4603      	mov	r3, r0
 80141a2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80141a4:	6a3b      	ldr	r3, [r7, #32]
 80141a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80141aa:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80141ae:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80141b2:	4293      	cmp	r3, r2
 80141b4:	bfb8      	it	lt
 80141b6:	4613      	movlt	r3, r2
 80141b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	68fa      	ldr	r2, [r7, #12]
 80141c2:	8912      	ldrh	r2, [r2, #8]
 80141c4:	4293      	cmp	r3, r2
 80141c6:	d302      	bcc.n	80141ce <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80141c8:	2301      	movs	r3, #1
 80141ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	68fa      	ldr	r2, [r7, #12]
 80141d4:	8912      	ldrh	r2, [r2, #8]
 80141d6:	4611      	mov	r1, r2
 80141d8:	68fa      	ldr	r2, [r7, #12]
 80141da:	8952      	ldrh	r2, [r2, #10]
 80141dc:	440a      	add	r2, r1
 80141de:	4293      	cmp	r3, r2
 80141e0:	d30f      	bcc.n	8014202 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80141e2:	230a      	movs	r3, #10
 80141e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	7c1b      	ldrb	r3, [r3, #16]
 80141ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80141f0:	4611      	mov	r1, r2
 80141f2:	4618      	mov	r0, r3
 80141f4:	f001 fff6 	bl	80161e4 <RegionGetPhyParam>
 80141f8:	4603      	mov	r3, r0
 80141fa:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	8912      	ldrh	r2, [r2, #8]
 801420a:	4611      	mov	r1, r2
 801420c:	68fa      	ldr	r2, [r7, #12]
 801420e:	8952      	ldrh	r2, [r2, #10]
 8014210:	0052      	lsls	r2, r2, #1
 8014212:	440a      	add	r2, r1
 8014214:	4293      	cmp	r3, r2
 8014216:	d33c      	bcc.n	8014292 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	68fa      	ldr	r2, [r7, #12]
 801421e:	8912      	ldrh	r2, [r2, #8]
 8014220:	1a9b      	subs	r3, r3, r2
 8014222:	68fa      	ldr	r2, [r7, #12]
 8014224:	8952      	ldrh	r2, [r2, #10]
 8014226:	fbb3 f1f2 	udiv	r1, r3, r2
 801422a:	fb01 f202 	mul.w	r2, r1, r2
 801422e:	1a9b      	subs	r3, r3, r2
 8014230:	2b00      	cmp	r3, #0
 8014232:	d12e      	bne.n	8014292 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014234:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8014238:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801423c:	429a      	cmp	r2, r3
 801423e:	d110      	bne.n	8014262 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d009      	beq.n	801425c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014248:	2302      	movs	r3, #2
 801424a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	7c1b      	ldrb	r3, [r3, #16]
 8014250:	f107 0210 	add.w	r2, r7, #16
 8014254:	4611      	mov	r1, r2
 8014256:	4618      	mov	r0, r3
 8014258:	f001 ffed 	bl	8016236 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 801425c:	2301      	movs	r3, #1
 801425e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014262:	2321      	movs	r3, #33	; 0x21
 8014264:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8014268:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801426c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	7bdb      	ldrb	r3, [r3, #15]
 8014274:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	7c1b      	ldrb	r3, [r3, #16]
 801427c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014280:	4611      	mov	r1, r2
 8014282:	4618      	mov	r0, r3
 8014284:	f001 ffae 	bl	80161e4 <RegionGetPhyParam>
 8014288:	4603      	mov	r3, r0
 801428a:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 801428c:	6a3b      	ldr	r3, [r7, #32]
 801428e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8014298:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80142a0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80142a8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80142aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3730      	adds	r7, #48	; 0x30
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}

080142b6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80142b6:	b480      	push	{r7}
 80142b8:	b085      	sub	sp, #20
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	60f8      	str	r0, [r7, #12]
 80142be:	60b9      	str	r1, [r7, #8]
 80142c0:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142c2:	bf00      	nop
 80142c4:	3714      	adds	r7, #20
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bc80      	pop	{r7}
 80142ca:	4770      	bx	lr

080142cc <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	4603      	mov	r3, r0
 80142d4:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142d6:	bf00      	nop
 80142d8:	370c      	adds	r7, #12
 80142da:	46bd      	mov	sp, r7
 80142dc:	bc80      	pop	{r7}
 80142de:	4770      	bx	lr

080142e0 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	4603      	mov	r3, r0
 80142e8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142ea:	bf00      	nop
 80142ec:	370c      	adds	r7, #12
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bc80      	pop	{r7}
 80142f2:	4770      	bx	lr

080142f4 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	4603      	mov	r3, r0
 80142fc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80142fe:	bf00      	nop
 8014300:	370c      	adds	r7, #12
 8014302:	46bd      	mov	sp, r7
 8014304:	bc80      	pop	{r7}
 8014306:	4770      	bx	lr

08014308 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014308:	b480      	push	{r7}
 801430a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801430c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801430e:	4618      	mov	r0, r3
 8014310:	46bd      	mov	sp, r7
 8014312:	bc80      	pop	{r7}
 8014314:	4770      	bx	lr

08014316 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014316:	b480      	push	{r7}
 8014318:	b083      	sub	sp, #12
 801431a:	af00      	add	r7, sp, #0
 801431c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801431e:	bf00      	nop
 8014320:	370c      	adds	r7, #12
 8014322:	46bd      	mov	sp, r7
 8014324:	bc80      	pop	{r7}
 8014326:	4770      	bx	lr

08014328 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014328:	b480      	push	{r7}
 801432a:	b083      	sub	sp, #12
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014330:	bf00      	nop
 8014332:	370c      	adds	r7, #12
 8014334:	46bd      	mov	sp, r7
 8014336:	bc80      	pop	{r7}
 8014338:	4770      	bx	lr

0801433a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801433a:	b480      	push	{r7}
 801433c:	b083      	sub	sp, #12
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014342:	bf00      	nop
 8014344:	370c      	adds	r7, #12
 8014346:	46bd      	mov	sp, r7
 8014348:	bc80      	pop	{r7}
 801434a:	4770      	bx	lr

0801434c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
 8014354:	460b      	mov	r3, r1
 8014356:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014358:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801435a:	4618      	mov	r0, r3
 801435c:	370c      	adds	r7, #12
 801435e:	46bd      	mov	sp, r7
 8014360:	bc80      	pop	{r7}
 8014362:	4770      	bx	lr

08014364 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8014364:	b480      	push	{r7}
 8014366:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014368:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801436a:	4618      	mov	r0, r3
 801436c:	46bd      	mov	sp, r7
 801436e:	bc80      	pop	{r7}
 8014370:	4770      	bx	lr

08014372 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014372:	b480      	push	{r7}
 8014374:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014376:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014378:	4618      	mov	r0, r3
 801437a:	46bd      	mov	sp, r7
 801437c:	bc80      	pop	{r7}
 801437e:	4770      	bx	lr

08014380 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014380:	b480      	push	{r7}
 8014382:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014384:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014386:	4618      	mov	r0, r3
 8014388:	46bd      	mov	sp, r7
 801438a:	bc80      	pop	{r7}
 801438c:	4770      	bx	lr

0801438e <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801438e:	b480      	push	{r7}
 8014390:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014392:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014394:	4618      	mov	r0, r3
 8014396:	46bd      	mov	sp, r7
 8014398:	bc80      	pop	{r7}
 801439a:	4770      	bx	lr

0801439c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	4603      	mov	r3, r0
 80143a4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80143a6:	bf00      	nop
 80143a8:	370c      	adds	r7, #12
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bc80      	pop	{r7}
 80143ae:	4770      	bx	lr

080143b0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80143b0:	b480      	push	{r7}
 80143b2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80143b4:	bf00      	nop
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bc80      	pop	{r7}
 80143ba:	4770      	bx	lr

080143bc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80143bc:	b480      	push	{r7}
 80143be:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80143c0:	bf00      	nop
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bc80      	pop	{r7}
 80143c6:	4770      	bx	lr

080143c8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	4603      	mov	r3, r0
 80143d0:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80143d2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	370c      	adds	r7, #12
 80143d8:	46bd      	mov	sp, r7
 80143da:	bc80      	pop	{r7}
 80143dc:	4770      	bx	lr

080143de <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80143de:	b480      	push	{r7}
 80143e0:	b083      	sub	sp, #12
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80143e6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bc80      	pop	{r7}
 80143f0:	4770      	bx	lr

080143f2 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80143f2:	b480      	push	{r7}
 80143f4:	b083      	sub	sp, #12
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80143fa:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	bc80      	pop	{r7}
 8014404:	4770      	bx	lr

08014406 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014406:	b480      	push	{r7}
 8014408:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801440a:	bf00      	nop
 801440c:	46bd      	mov	sp, r7
 801440e:	bc80      	pop	{r7}
 8014410:	4770      	bx	lr

08014412 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014412:	b480      	push	{r7}
 8014414:	b083      	sub	sp, #12
 8014416:	af00      	add	r7, sp, #0
 8014418:	4603      	mov	r3, r0
 801441a:	6039      	str	r1, [r7, #0]
 801441c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801441e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014420:	4618      	mov	r0, r3
 8014422:	370c      	adds	r7, #12
 8014424:	46bd      	mov	sp, r7
 8014426:	bc80      	pop	{r7}
 8014428:	4770      	bx	lr

0801442a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801442a:	b480      	push	{r7}
 801442c:	b083      	sub	sp, #12
 801442e:	af00      	add	r7, sp, #0
 8014430:	4603      	mov	r3, r0
 8014432:	603a      	str	r2, [r7, #0]
 8014434:	80fb      	strh	r3, [r7, #6]
 8014436:	460b      	mov	r3, r1
 8014438:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801443a:	bf00      	nop
 801443c:	370c      	adds	r7, #12
 801443e:	46bd      	mov	sp, r7
 8014440:	bc80      	pop	{r7}
 8014442:	4770      	bx	lr

08014444 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014444:	b480      	push	{r7}
 8014446:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014448:	bf00      	nop
 801444a:	46bd      	mov	sp, r7
 801444c:	bc80      	pop	{r7}
 801444e:	4770      	bx	lr

08014450 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8014458:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801445a:	4618      	mov	r0, r3
 801445c:	370c      	adds	r7, #12
 801445e:	46bd      	mov	sp, r7
 8014460:	bc80      	pop	{r7}
 8014462:	4770      	bx	lr

08014464 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801446c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801446e:	4618      	mov	r0, r3
 8014470:	370c      	adds	r7, #12
 8014472:	46bd      	mov	sp, r7
 8014474:	bc80      	pop	{r7}
 8014476:	4770      	bx	lr

08014478 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8014478:	b480      	push	{r7}
 801447a:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801447c:	bf00      	nop
 801447e:	46bd      	mov	sp, r7
 8014480:	bc80      	pop	{r7}
 8014482:	4770      	bx	lr

08014484 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	460b      	mov	r3, r1
 801448e:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014490:	bf00      	nop
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	bc80      	pop	{r7}
 8014498:	4770      	bx	lr

0801449a <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801449a:	b480      	push	{r7}
 801449c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801449e:	bf00      	nop
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bc80      	pop	{r7}
 80144a4:	4770      	bx	lr

080144a6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80144a6:	b480      	push	{r7}
 80144a8:	b085      	sub	sp, #20
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80144b2:	2300      	movs	r3, #0
 80144b4:	81fb      	strh	r3, [r7, #14]
 80144b6:	e00a      	b.n	80144ce <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80144b8:	89fb      	ldrh	r3, [r7, #14]
 80144ba:	68ba      	ldr	r2, [r7, #8]
 80144bc:	4413      	add	r3, r2
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d001      	beq.n	80144c8 <IsSlotFree+0x22>
        {
            return false;
 80144c4:	2300      	movs	r3, #0
 80144c6:	e006      	b.n	80144d6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80144c8:	89fb      	ldrh	r3, [r7, #14]
 80144ca:	3301      	adds	r3, #1
 80144cc:	81fb      	strh	r3, [r7, #14]
 80144ce:	89fb      	ldrh	r3, [r7, #14]
 80144d0:	2b0f      	cmp	r3, #15
 80144d2:	d9f1      	bls.n	80144b8 <IsSlotFree+0x12>
        }
    }
    return true;
 80144d4:	2301      	movs	r3, #1
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	3714      	adds	r7, #20
 80144da:	46bd      	mov	sp, r7
 80144dc:	bc80      	pop	{r7}
 80144de:	4770      	bx	lr

080144e0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80144e6:	2300      	movs	r3, #0
 80144e8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80144ea:	e007      	b.n	80144fc <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	3301      	adds	r3, #1
 80144f0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80144f2:	79fb      	ldrb	r3, [r7, #7]
 80144f4:	2b20      	cmp	r3, #32
 80144f6:	d101      	bne.n	80144fc <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80144f8:	2300      	movs	r3, #0
 80144fa:	e012      	b.n	8014522 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80144fc:	79fb      	ldrb	r3, [r7, #7]
 80144fe:	011b      	lsls	r3, r3, #4
 8014500:	3308      	adds	r3, #8
 8014502:	4a0a      	ldr	r2, [pc, #40]	; (801452c <MallocNewMacCommandSlot+0x4c>)
 8014504:	4413      	add	r3, r2
 8014506:	4618      	mov	r0, r3
 8014508:	f7ff ffcd 	bl	80144a6 <IsSlotFree>
 801450c:	4603      	mov	r3, r0
 801450e:	f083 0301 	eor.w	r3, r3, #1
 8014512:	b2db      	uxtb	r3, r3
 8014514:	2b00      	cmp	r3, #0
 8014516:	d1e9      	bne.n	80144ec <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014518:	79fb      	ldrb	r3, [r7, #7]
 801451a:	011b      	lsls	r3, r3, #4
 801451c:	3308      	adds	r3, #8
 801451e:	4a03      	ldr	r2, [pc, #12]	; (801452c <MallocNewMacCommandSlot+0x4c>)
 8014520:	4413      	add	r3, r2
}
 8014522:	4618      	mov	r0, r3
 8014524:	3708      	adds	r7, #8
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	20001e08 	.word	0x20001e08

08014530 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d101      	bne.n	8014542 <FreeMacCommandSlot+0x12>
    {
        return false;
 801453e:	2300      	movs	r3, #0
 8014540:	e005      	b.n	801454e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014542:	2210      	movs	r2, #16
 8014544:	2100      	movs	r1, #0
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f004 f934 	bl	80187b4 <memset1>

    return true;
 801454c:	2301      	movs	r3, #1
}
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014556:	b480      	push	{r7}
 8014558:	b083      	sub	sp, #12
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d101      	bne.n	8014568 <LinkedListInit+0x12>
    {
        return false;
 8014564:	2300      	movs	r3, #0
 8014566:	e006      	b.n	8014576 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2200      	movs	r2, #0
 801456c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2200      	movs	r2, #0
 8014572:	605a      	str	r2, [r3, #4]

    return true;
 8014574:	2301      	movs	r3, #1
}
 8014576:	4618      	mov	r0, r3
 8014578:	370c      	adds	r7, #12
 801457a:	46bd      	mov	sp, r7
 801457c:	bc80      	pop	{r7}
 801457e:	4770      	bx	lr

08014580 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d002      	beq.n	8014596 <LinkedListAdd+0x16>
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d101      	bne.n	801459a <LinkedListAdd+0x1a>
    {
        return false;
 8014596:	2300      	movs	r3, #0
 8014598:	e015      	b.n	80145c6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d102      	bne.n	80145a8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	683a      	ldr	r2, [r7, #0]
 80145a6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	685b      	ldr	r3, [r3, #4]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d003      	beq.n	80145b8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	683a      	ldr	r2, [r7, #0]
 80145b6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	2200      	movs	r2, #0
 80145bc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	683a      	ldr	r2, [r7, #0]
 80145c2:	605a      	str	r2, [r3, #4]

    return true;
 80145c4:	2301      	movs	r3, #1
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	370c      	adds	r7, #12
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bc80      	pop	{r7}
 80145ce:	4770      	bx	lr

080145d0 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80145d0:	b480      	push	{r7}
 80145d2:	b085      	sub	sp, #20
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d002      	beq.n	80145e6 <LinkedListGetPrevious+0x16>
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d101      	bne.n	80145ea <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80145e6:	2300      	movs	r3, #0
 80145e8:	e016      	b.n	8014618 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80145f0:	683a      	ldr	r2, [r7, #0]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	429a      	cmp	r2, r3
 80145f6:	d00c      	beq.n	8014612 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80145f8:	e002      	b.n	8014600 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d007      	beq.n	8014616 <LinkedListGetPrevious+0x46>
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	683a      	ldr	r2, [r7, #0]
 801460c:	429a      	cmp	r2, r3
 801460e:	d1f4      	bne.n	80145fa <LinkedListGetPrevious+0x2a>
 8014610:	e001      	b.n	8014616 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014612:	2300      	movs	r3, #0
 8014614:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014616:	68fb      	ldr	r3, [r7, #12]
}
 8014618:	4618      	mov	r0, r3
 801461a:	3714      	adds	r7, #20
 801461c:	46bd      	mov	sp, r7
 801461e:	bc80      	pop	{r7}
 8014620:	4770      	bx	lr

08014622 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014622:	b580      	push	{r7, lr}
 8014624:	b084      	sub	sp, #16
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
 801462a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d002      	beq.n	8014638 <LinkedListRemove+0x16>
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d101      	bne.n	801463c <LinkedListRemove+0x1a>
    {
        return false;
 8014638:	2300      	movs	r3, #0
 801463a:	e020      	b.n	801467e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801463c:	6839      	ldr	r1, [r7, #0]
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f7ff ffc6 	bl	80145d0 <LinkedListGetPrevious>
 8014644:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	683a      	ldr	r2, [r7, #0]
 801464c:	429a      	cmp	r2, r3
 801464e:	d103      	bne.n	8014658 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	685b      	ldr	r3, [r3, #4]
 801465c:	683a      	ldr	r2, [r7, #0]
 801465e:	429a      	cmp	r2, r3
 8014660:	d102      	bne.n	8014668 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	68fa      	ldr	r2, [r7, #12]
 8014666:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d003      	beq.n	8014676 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	681a      	ldr	r2, [r3, #0]
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	2200      	movs	r2, #0
 801467a:	601a      	str	r2, [r3, #0]

    return true;
 801467c:	2301      	movs	r3, #1
}
 801467e:	4618      	mov	r0, r3
 8014680:	3710      	adds	r7, #16
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
	...

08014688 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014688:	b480      	push	{r7}
 801468a:	b083      	sub	sp, #12
 801468c:	af00      	add	r7, sp, #0
 801468e:	4603      	mov	r3, r0
 8014690:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014692:	79fb      	ldrb	r3, [r7, #7]
 8014694:	2b11      	cmp	r3, #17
 8014696:	bf8c      	ite	hi
 8014698:	2201      	movhi	r2, #1
 801469a:	2200      	movls	r2, #0
 801469c:	b2d2      	uxtb	r2, r2
 801469e:	2a00      	cmp	r2, #0
 80146a0:	d10c      	bne.n	80146bc <IsSticky+0x34>
 80146a2:	2201      	movs	r2, #1
 80146a4:	409a      	lsls	r2, r3
 80146a6:	4b08      	ldr	r3, [pc, #32]	; (80146c8 <IsSticky+0x40>)
 80146a8:	4013      	ands	r3, r2
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	bf14      	ite	ne
 80146ae:	2301      	movne	r3, #1
 80146b0:	2300      	moveq	r3, #0
 80146b2:	b2db      	uxtb	r3, r3
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d001      	beq.n	80146bc <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80146b8:	2301      	movs	r3, #1
 80146ba:	e000      	b.n	80146be <IsSticky+0x36>
        default:
            return false;
 80146bc:	2300      	movs	r3, #0
    }
}
 80146be:	4618      	mov	r0, r3
 80146c0:	370c      	adds	r7, #12
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bc80      	pop	{r7}
 80146c6:	4770      	bx	lr
 80146c8:	00020720 	.word	0x00020720

080146cc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80146d0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80146d4:	2100      	movs	r1, #0
 80146d6:	4804      	ldr	r0, [pc, #16]	; (80146e8 <LoRaMacCommandsInit+0x1c>)
 80146d8:	f004 f86c 	bl	80187b4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80146dc:	4802      	ldr	r0, [pc, #8]	; (80146e8 <LoRaMacCommandsInit+0x1c>)
 80146de:	f7ff ff3a 	bl	8014556 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80146e2:	2300      	movs	r3, #0
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	20001e08 	.word	0x20001e08

080146ec <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b086      	sub	sp, #24
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	4603      	mov	r3, r0
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
 80146f8:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d101      	bne.n	8014704 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014700:	2301      	movs	r3, #1
 8014702:	e033      	b.n	801476c <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014704:	f7ff feec 	bl	80144e0 <MallocNewMacCommandSlot>
 8014708:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d101      	bne.n	8014714 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014710:	2302      	movs	r3, #2
 8014712:	e02b      	b.n	801476c <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014714:	6979      	ldr	r1, [r7, #20]
 8014716:	4817      	ldr	r0, [pc, #92]	; (8014774 <LoRaMacCommandsAddCmd+0x88>)
 8014718:	f7ff ff32 	bl	8014580 <LinkedListAdd>
 801471c:	4603      	mov	r3, r0
 801471e:	f083 0301 	eor.w	r3, r3, #1
 8014722:	b2db      	uxtb	r3, r3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d001      	beq.n	801472c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014728:	2305      	movs	r3, #5
 801472a:	e01f      	b.n	801476c <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	7bfa      	ldrb	r2, [r7, #15]
 8014730:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	3305      	adds	r3, #5
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	b292      	uxth	r2, r2
 8014740:	68b9      	ldr	r1, [r7, #8]
 8014742:	4618      	mov	r0, r3
 8014744:	f003 fffb 	bl	801873e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014748:	7bfb      	ldrb	r3, [r7, #15]
 801474a:	4618      	mov	r0, r3
 801474c:	f7ff ff9c 	bl	8014688 <IsSticky>
 8014750:	4603      	mov	r3, r0
 8014752:	461a      	mov	r2, r3
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014758:	4b06      	ldr	r3, [pc, #24]	; (8014774 <LoRaMacCommandsAddCmd+0x88>)
 801475a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4413      	add	r3, r2
 8014762:	3301      	adds	r3, #1
 8014764:	4a03      	ldr	r2, [pc, #12]	; (8014774 <LoRaMacCommandsAddCmd+0x88>)
 8014766:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 801476a:	2300      	movs	r3, #0
}
 801476c:	4618      	mov	r0, r3
 801476e:	3718      	adds	r7, #24
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	20001e08 	.word	0x20001e08

08014778 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d101      	bne.n	801478a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014786:	2301      	movs	r3, #1
 8014788:	e021      	b.n	80147ce <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801478a:	6879      	ldr	r1, [r7, #4]
 801478c:	4812      	ldr	r0, [pc, #72]	; (80147d8 <LoRaMacCommandsRemoveCmd+0x60>)
 801478e:	f7ff ff48 	bl	8014622 <LinkedListRemove>
 8014792:	4603      	mov	r3, r0
 8014794:	f083 0301 	eor.w	r3, r3, #1
 8014798:	b2db      	uxtb	r3, r3
 801479a:	2b00      	cmp	r3, #0
 801479c:	d001      	beq.n	80147a2 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801479e:	2303      	movs	r3, #3
 80147a0:	e015      	b.n	80147ce <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80147a2:	4b0d      	ldr	r3, [pc, #52]	; (80147d8 <LoRaMacCommandsRemoveCmd+0x60>)
 80147a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	689b      	ldr	r3, [r3, #8]
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	3b01      	subs	r3, #1
 80147b0:	4a09      	ldr	r2, [pc, #36]	; (80147d8 <LoRaMacCommandsRemoveCmd+0x60>)
 80147b2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7ff feba 	bl	8014530 <FreeMacCommandSlot>
 80147bc:	4603      	mov	r3, r0
 80147be:	f083 0301 	eor.w	r3, r3, #1
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d001      	beq.n	80147cc <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80147c8:	2305      	movs	r3, #5
 80147ca:	e000      	b.n	80147ce <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3708      	adds	r7, #8
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	20001e08 	.word	0x20001e08

080147dc <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80147e2:	4b0f      	ldr	r3, [pc, #60]	; (8014820 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80147e8:	e012      	b.n	8014810 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	7b1b      	ldrb	r3, [r3, #12]
 80147ee:	f083 0301 	eor.w	r3, r3, #1
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d008      	beq.n	801480a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f7ff ffba 	bl	8014778 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	607b      	str	r3, [r7, #4]
 8014808:	e002      	b.n	8014810 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d1e9      	bne.n	80147ea <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014816:	2300      	movs	r3, #0
}
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	20001e08 	.word	0x20001e08

08014824 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801482a:	4b0e      	ldr	r3, [pc, #56]	; (8014864 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014830:	e00f      	b.n	8014852 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	791b      	ldrb	r3, [r3, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	f7ff ff23 	bl	8014688 <IsSticky>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d002      	beq.n	801484e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f7ff ff95 	bl	8014778 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d1ec      	bne.n	8014832 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014858:	2300      	movs	r3, #0
}
 801485a:	4618      	mov	r0, r3
 801485c:	3708      	adds	r7, #8
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	20001e08 	.word	0x20001e08

08014868 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d101      	bne.n	801487a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014876:	2301      	movs	r3, #1
 8014878:	e005      	b.n	8014886 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801487a:	4b05      	ldr	r3, [pc, #20]	; (8014890 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 801487c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014884:	2300      	movs	r3, #0
}
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	bc80      	pop	{r7}
 801488e:	4770      	bx	lr
 8014890:	20001e08 	.word	0x20001e08

08014894 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b088      	sub	sp, #32
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80148a0:	4b25      	ldr	r3, [pc, #148]	; (8014938 <LoRaMacCommandsSerializeCmds+0xa4>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80148a6:	2300      	movs	r3, #0
 80148a8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d002      	beq.n	80148b6 <LoRaMacCommandsSerializeCmds+0x22>
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d126      	bne.n	8014904 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80148b6:	2301      	movs	r3, #1
 80148b8:	e039      	b.n	801492e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80148ba:	7efb      	ldrb	r3, [r7, #27]
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	1ad2      	subs	r2, r2, r3
 80148c0:	69fb      	ldr	r3, [r7, #28]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	3301      	adds	r3, #1
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d320      	bcc.n	801490c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80148ca:	7efb      	ldrb	r3, [r7, #27]
 80148cc:	1c5a      	adds	r2, r3, #1
 80148ce:	76fa      	strb	r2, [r7, #27]
 80148d0:	461a      	mov	r2, r3
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	4413      	add	r3, r2
 80148d6:	69fa      	ldr	r2, [r7, #28]
 80148d8:	7912      	ldrb	r2, [r2, #4]
 80148da:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80148dc:	7efb      	ldrb	r3, [r7, #27]
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	18d0      	adds	r0, r2, r3
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	1d59      	adds	r1, r3, #5
 80148e6:	69fb      	ldr	r3, [r7, #28]
 80148e8:	689b      	ldr	r3, [r3, #8]
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	461a      	mov	r2, r3
 80148ee:	f003 ff26 	bl	801873e <memcpy1>
            itr += curElement->PayloadSize;
 80148f2:	69fb      	ldr	r3, [r7, #28]
 80148f4:	689b      	ldr	r3, [r3, #8]
 80148f6:	b2da      	uxtb	r2, r3
 80148f8:	7efb      	ldrb	r3, [r7, #27]
 80148fa:	4413      	add	r3, r2
 80148fc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014904:	69fb      	ldr	r3, [r7, #28]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d1d7      	bne.n	80148ba <LoRaMacCommandsSerializeCmds+0x26>
 801490a:	e009      	b.n	8014920 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 801490c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801490e:	e007      	b.n	8014920 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014916:	69f8      	ldr	r0, [r7, #28]
 8014918:	f7ff ff2e 	bl	8014778 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014920:	69fb      	ldr	r3, [r7, #28]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d1f4      	bne.n	8014910 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014926:	68b8      	ldr	r0, [r7, #8]
 8014928:	f7ff ff9e 	bl	8014868 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 801492c:	2300      	movs	r3, #0
}
 801492e:	4618      	mov	r0, r3
 8014930:	3720      	adds	r7, #32
 8014932:	46bd      	mov	sp, r7
 8014934:	bd80      	pop	{r7, pc}
 8014936:	bf00      	nop
 8014938:	20001e08 	.word	0x20001e08

0801493c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 801493c:	b480      	push	{r7}
 801493e:	b085      	sub	sp, #20
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d101      	bne.n	801494e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801494a:	2301      	movs	r3, #1
 801494c:	e016      	b.n	801497c <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801494e:	4b0e      	ldr	r3, [pc, #56]	; (8014988 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2200      	movs	r2, #0
 8014958:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801495a:	e00b      	b.n	8014974 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	7b1b      	ldrb	r3, [r3, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d004      	beq.n	801496e <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2201      	movs	r2, #1
 8014968:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801496a:	2300      	movs	r3, #0
 801496c:	e006      	b.n	801497c <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d1f0      	bne.n	801495c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801497a:	2300      	movs	r3, #0
}
 801497c:	4618      	mov	r0, r3
 801497e:	3714      	adds	r7, #20
 8014980:	46bd      	mov	sp, r7
 8014982:	bc80      	pop	{r7}
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	20001e08 	.word	0x20001e08

0801498c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 801498c:	b480      	push	{r7}
 801498e:	b085      	sub	sp, #20
 8014990:	af00      	add	r7, sp, #0
 8014992:	4603      	mov	r3, r0
 8014994:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014996:	2300      	movs	r3, #0
 8014998:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801499a:	79fb      	ldrb	r3, [r7, #7]
 801499c:	3b02      	subs	r3, #2
 801499e:	2b11      	cmp	r3, #17
 80149a0:	d850      	bhi.n	8014a44 <LoRaMacCommandsGetCmdSize+0xb8>
 80149a2:	a201      	add	r2, pc, #4	; (adr r2, 80149a8 <LoRaMacCommandsGetCmdSize+0x1c>)
 80149a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a8:	080149f1 	.word	0x080149f1
 80149ac:	080149f7 	.word	0x080149f7
 80149b0:	080149fd 	.word	0x080149fd
 80149b4:	08014a03 	.word	0x08014a03
 80149b8:	08014a09 	.word	0x08014a09
 80149bc:	08014a0f 	.word	0x08014a0f
 80149c0:	08014a15 	.word	0x08014a15
 80149c4:	08014a1b 	.word	0x08014a1b
 80149c8:	08014a21 	.word	0x08014a21
 80149cc:	08014a45 	.word	0x08014a45
 80149d0:	08014a45 	.word	0x08014a45
 80149d4:	08014a27 	.word	0x08014a27
 80149d8:	08014a45 	.word	0x08014a45
 80149dc:	08014a45 	.word	0x08014a45
 80149e0:	08014a2d 	.word	0x08014a2d
 80149e4:	08014a33 	.word	0x08014a33
 80149e8:	08014a39 	.word	0x08014a39
 80149ec:	08014a3f 	.word	0x08014a3f
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80149f0:	2303      	movs	r3, #3
 80149f2:	73fb      	strb	r3, [r7, #15]
            break;
 80149f4:	e027      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80149f6:	2305      	movs	r3, #5
 80149f8:	73fb      	strb	r3, [r7, #15]
            break;
 80149fa:	e024      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80149fc:	2302      	movs	r3, #2
 80149fe:	73fb      	strb	r3, [r7, #15]
            break;
 8014a00:	e021      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014a02:	2305      	movs	r3, #5
 8014a04:	73fb      	strb	r3, [r7, #15]
            break;
 8014a06:	e01e      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	73fb      	strb	r3, [r7, #15]
            break;
 8014a0c:	e01b      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014a0e:	2306      	movs	r3, #6
 8014a10:	73fb      	strb	r3, [r7, #15]
            break;
 8014a12:	e018      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014a14:	2302      	movs	r3, #2
 8014a16:	73fb      	strb	r3, [r7, #15]
            break;
 8014a18:	e015      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014a1a:	2302      	movs	r3, #2
 8014a1c:	73fb      	strb	r3, [r7, #15]
            break;
 8014a1e:	e012      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014a20:	2305      	movs	r3, #5
 8014a22:	73fb      	strb	r3, [r7, #15]
            break;
 8014a24:	e00f      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014a26:	2306      	movs	r3, #6
 8014a28:	73fb      	strb	r3, [r7, #15]
            break;
 8014a2a:	e00c      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	73fb      	strb	r3, [r7, #15]
            break;
 8014a30:	e009      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014a32:	2305      	movs	r3, #5
 8014a34:	73fb      	strb	r3, [r7, #15]
            break;
 8014a36:	e006      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014a38:	2304      	movs	r3, #4
 8014a3a:	73fb      	strb	r3, [r7, #15]
            break;
 8014a3c:	e003      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014a3e:	2304      	movs	r3, #4
 8014a40:	73fb      	strb	r3, [r7, #15]
            break;
 8014a42:	e000      	b.n	8014a46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014a44:	bf00      	nop
        }
    }
    return cidSize;
 8014a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3714      	adds	r7, #20
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bc80      	pop	{r7}
 8014a50:	4770      	bx	lr
 8014a52:	bf00      	nop

08014a54 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014a54:	b480      	push	{r7}
 8014a56:	b083      	sub	sp, #12
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4a07      	ldr	r2, [pc, #28]	; (8014a7c <IncreaseBufferPointer+0x28>)
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d102      	bne.n	8014a6a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014a64:	4b06      	ldr	r3, [pc, #24]	; (8014a80 <IncreaseBufferPointer+0x2c>)
 8014a66:	607b      	str	r3, [r7, #4]
 8014a68:	e002      	b.n	8014a70 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	3304      	adds	r3, #4
 8014a6e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014a70:	687b      	ldr	r3, [r7, #4]
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	370c      	adds	r7, #12
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bc80      	pop	{r7}
 8014a7a:	4770      	bx	lr
 8014a7c:	20002030 	.word	0x20002030
 8014a80:	20002020 	.word	0x20002020

08014a84 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014a8e:	79fb      	ldrb	r3, [r7, #7]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d101      	bne.n	8014a98 <IsListEmpty+0x14>
    {
        return true;
 8014a94:	2301      	movs	r3, #1
 8014a96:	e000      	b.n	8014a9a <IsListEmpty+0x16>
    }
    return false;
 8014a98:	2300      	movs	r3, #0
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	370c      	adds	r7, #12
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bc80      	pop	{r7}
 8014aa2:	4770      	bx	lr

08014aa4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	4603      	mov	r3, r0
 8014aac:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014aae:	79fb      	ldrb	r3, [r7, #7]
 8014ab0:	2b04      	cmp	r3, #4
 8014ab2:	d901      	bls.n	8014ab8 <IsListFull+0x14>
    {
        return true;
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	e000      	b.n	8014aba <IsListFull+0x16>
    }
    return false;
 8014ab8:	2300      	movs	r3, #0
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	370c      	adds	r7, #12
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bc80      	pop	{r7}
 8014ac2:	4770      	bx	lr

08014ac4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	4603      	mov	r3, r0
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	607a      	str	r2, [r7, #4]
 8014ad0:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014ad6:	4b13      	ldr	r3, [pc, #76]	; (8014b24 <GetElement+0x60>)
 8014ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7ff ffd1 	bl	8014a84 <IsListEmpty>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d001      	beq.n	8014aec <GetElement+0x28>
    {
        return NULL;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	e017      	b.n	8014b1c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014aec:	2300      	movs	r3, #0
 8014aee:	74fb      	strb	r3, [r7, #19]
 8014af0:	e00d      	b.n	8014b0e <GetElement+0x4a>
    {
        if( element->Request == request )
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	781b      	ldrb	r3, [r3, #0]
 8014af6:	7bfa      	ldrb	r2, [r7, #15]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d101      	bne.n	8014b00 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	e00d      	b.n	8014b1c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014b00:	6978      	ldr	r0, [r7, #20]
 8014b02:	f7ff ffa7 	bl	8014a54 <IncreaseBufferPointer>
 8014b06:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014b08:	7cfb      	ldrb	r3, [r7, #19]
 8014b0a:	3301      	adds	r3, #1
 8014b0c:	74fb      	strb	r3, [r7, #19]
 8014b0e:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <GetElement+0x60>)
 8014b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b14:	7cfa      	ldrb	r2, [r7, #19]
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d3eb      	bcc.n	8014af2 <GetElement+0x2e>
    }

    return NULL;
 8014b1a:	2300      	movs	r3, #0
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3718      	adds	r7, #24
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	20002014 	.word	0x20002014

08014b28 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014b30:	4a0c      	ldr	r2, [pc, #48]	; (8014b64 <LoRaMacConfirmQueueInit+0x3c>)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014b36:	4b0b      	ldr	r3, [pc, #44]	; (8014b64 <LoRaMacConfirmQueueInit+0x3c>)
 8014b38:	2200      	movs	r2, #0
 8014b3a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014b3e:	4b09      	ldr	r3, [pc, #36]	; (8014b64 <LoRaMacConfirmQueueInit+0x3c>)
 8014b40:	4a09      	ldr	r2, [pc, #36]	; (8014b68 <LoRaMacConfirmQueueInit+0x40>)
 8014b42:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014b44:	4b07      	ldr	r3, [pc, #28]	; (8014b64 <LoRaMacConfirmQueueInit+0x3c>)
 8014b46:	4a08      	ldr	r2, [pc, #32]	; (8014b68 <LoRaMacConfirmQueueInit+0x40>)
 8014b48:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014b4a:	2214      	movs	r2, #20
 8014b4c:	21ff      	movs	r1, #255	; 0xff
 8014b4e:	4806      	ldr	r0, [pc, #24]	; (8014b68 <LoRaMacConfirmQueueInit+0x40>)
 8014b50:	f003 fe30 	bl	80187b4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014b54:	4b03      	ldr	r3, [pc, #12]	; (8014b64 <LoRaMacConfirmQueueInit+0x3c>)
 8014b56:	2201      	movs	r2, #1
 8014b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8014b5c:	bf00      	nop
 8014b5e:	3708      	adds	r7, #8
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	20002014 	.word	0x20002014
 8014b68:	20002020 	.word	0x20002020

08014b6c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014b74:	4b19      	ldr	r3, [pc, #100]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7ff ff92 	bl	8014aa4 <IsListFull>
 8014b80:	4603      	mov	r3, r0
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d001      	beq.n	8014b8a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014b86:	2300      	movs	r3, #0
 8014b88:	e024      	b.n	8014bd4 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014b8a:	4b14      	ldr	r3, [pc, #80]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014b8c:	689b      	ldr	r3, [r3, #8]
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	7812      	ldrb	r2, [r2, #0]
 8014b92:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014b94:	4b11      	ldr	r3, [pc, #68]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014b96:	689b      	ldr	r3, [r3, #8]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	7852      	ldrb	r2, [r2, #1]
 8014b9c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014b9e:	4b0f      	ldr	r3, [pc, #60]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014ba0:	689b      	ldr	r3, [r3, #8]
 8014ba2:	687a      	ldr	r2, [r7, #4]
 8014ba4:	78d2      	ldrb	r2, [r2, #3]
 8014ba6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8014ba8:	4b0c      	ldr	r3, [pc, #48]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014baa:	689b      	ldr	r3, [r3, #8]
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	7892      	ldrb	r2, [r2, #2]
 8014bb0:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8014bb2:	4b0a      	ldr	r3, [pc, #40]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bb8:	3301      	adds	r3, #1
 8014bba:	b2da      	uxtb	r2, r3
 8014bbc:	4b07      	ldr	r3, [pc, #28]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014bbe:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014bc2:	4b06      	ldr	r3, [pc, #24]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014bc4:	689b      	ldr	r3, [r3, #8]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7ff ff44 	bl	8014a54 <IncreaseBufferPointer>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	4a03      	ldr	r2, [pc, #12]	; (8014bdc <LoRaMacConfirmQueueAdd+0x70>)
 8014bd0:	6093      	str	r3, [r2, #8]

    return true;
 8014bd2:	2301      	movs	r3, #1
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3708      	adds	r7, #8
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}
 8014bdc:	20002014 	.word	0x20002014

08014be0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014be4:	4b0e      	ldr	r3, [pc, #56]	; (8014c20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7ff ff4a 	bl	8014a84 <IsListEmpty>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d001      	beq.n	8014bfa <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	e010      	b.n	8014c1c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014bfa:	4b09      	ldr	r3, [pc, #36]	; (8014c20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c00:	3b01      	subs	r3, #1
 8014c02:	b2da      	uxtb	r2, r3
 8014c04:	4b06      	ldr	r3, [pc, #24]	; (8014c20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014c06:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014c0a:	4b05      	ldr	r3, [pc, #20]	; (8014c20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7ff ff20 	bl	8014a54 <IncreaseBufferPointer>
 8014c14:	4603      	mov	r3, r0
 8014c16:	4a02      	ldr	r2, [pc, #8]	; (8014c20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014c18:	6053      	str	r3, [r2, #4]

    return true;
 8014c1a:	2301      	movs	r3, #1
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	20002014 	.word	0x20002014

08014c24 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	460a      	mov	r2, r1
 8014c2e:	71fb      	strb	r3, [r7, #7]
 8014c30:	4613      	mov	r3, r2
 8014c32:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014c34:	2300      	movs	r3, #0
 8014c36:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014c38:	4b10      	ldr	r3, [pc, #64]	; (8014c7c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7ff ff20 	bl	8014a84 <IsListEmpty>
 8014c44:	4603      	mov	r3, r0
 8014c46:	f083 0301 	eor.w	r3, r3, #1
 8014c4a:	b2db      	uxtb	r3, r3
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d011      	beq.n	8014c74 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014c50:	4b0a      	ldr	r3, [pc, #40]	; (8014c7c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014c52:	6859      	ldr	r1, [r3, #4]
 8014c54:	4b09      	ldr	r3, [pc, #36]	; (8014c7c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014c56:	689a      	ldr	r2, [r3, #8]
 8014c58:	79bb      	ldrb	r3, [r7, #6]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7ff ff32 	bl	8014ac4 <GetElement>
 8014c60:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d005      	beq.n	8014c74 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	79fa      	ldrb	r2, [r7, #7]
 8014c6c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2201      	movs	r2, #1
 8014c72:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014c74:	bf00      	nop
 8014c76:	3710      	adds	r7, #16
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	20002014 	.word	0x20002014

08014c80 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	4603      	mov	r3, r0
 8014c88:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014c8e:	4b10      	ldr	r3, [pc, #64]	; (8014cd0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7ff fef5 	bl	8014a84 <IsListEmpty>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	f083 0301 	eor.w	r3, r3, #1
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d00e      	beq.n	8014cc4 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014ca6:	4b0a      	ldr	r3, [pc, #40]	; (8014cd0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014ca8:	6859      	ldr	r1, [r3, #4]
 8014caa:	4b09      	ldr	r3, [pc, #36]	; (8014cd0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014cac:	689a      	ldr	r2, [r3, #8]
 8014cae:	79fb      	ldrb	r3, [r7, #7]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7ff ff07 	bl	8014ac4 <GetElement>
 8014cb6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d002      	beq.n	8014cc4 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	785b      	ldrb	r3, [r3, #1]
 8014cc2:	e000      	b.n	8014cc6 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014cc4:	2301      	movs	r3, #1
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	20002014 	.word	0x20002014

08014cd4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	4603      	mov	r3, r0
 8014cdc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014cde:	4b16      	ldr	r3, [pc, #88]	; (8014d38 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014ce4:	4a14      	ldr	r2, [pc, #80]	; (8014d38 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014ce6:	79fb      	ldrb	r3, [r7, #7]
 8014ce8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014cec:	4b12      	ldr	r3, [pc, #72]	; (8014d38 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7ff fec6 	bl	8014a84 <IsListEmpty>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	f083 0301 	eor.w	r3, r3, #1
 8014cfe:	b2db      	uxtb	r3, r3
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d015      	beq.n	8014d30 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	79fa      	ldrb	r2, [r7, #7]
 8014d08:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	78db      	ldrb	r3, [r3, #3]
 8014d0e:	f083 0301 	eor.w	r3, r3, #1
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d002      	beq.n	8014d1e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014d1e:	68f8      	ldr	r0, [r7, #12]
 8014d20:	f7ff fe98 	bl	8014a54 <IncreaseBufferPointer>
 8014d24:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014d26:	4b04      	ldr	r3, [pc, #16]	; (8014d38 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	68fa      	ldr	r2, [r7, #12]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d1e9      	bne.n	8014d04 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014d30:	bf00      	nop
 8014d32:	3710      	adds	r7, #16
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	20002014 	.word	0x20002014

08014d3c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	4603      	mov	r3, r0
 8014d44:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014d46:	4b09      	ldr	r3, [pc, #36]	; (8014d6c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014d48:	6859      	ldr	r1, [r3, #4]
 8014d4a:	4b08      	ldr	r3, [pc, #32]	; (8014d6c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014d4c:	689a      	ldr	r2, [r3, #8]
 8014d4e:	79fb      	ldrb	r3, [r7, #7]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7ff feb7 	bl	8014ac4 <GetElement>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d001      	beq.n	8014d60 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	e000      	b.n	8014d62 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014d60:	2300      	movs	r3, #0
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3708      	adds	r7, #8
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}
 8014d6a:	bf00      	nop
 8014d6c:	20002014 	.word	0x20002014

08014d70 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b084      	sub	sp, #16
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014d78:	4b22      	ldr	r3, [pc, #136]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d7e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014d80:	2300      	movs	r3, #0
 8014d82:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014d84:	2300      	movs	r3, #0
 8014d86:	73fb      	strb	r3, [r7, #15]
 8014d88:	e032      	b.n	8014df0 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014d8a:	4b1e      	ldr	r3, [pc, #120]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014d8c:	685b      	ldr	r3, [r3, #4]
 8014d8e:	781a      	ldrb	r2, [r3, #0]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014d94:	4b1b      	ldr	r3, [pc, #108]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014d96:	685b      	ldr	r3, [r3, #4]
 8014d98:	785a      	ldrb	r2, [r3, #1]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014d9e:	4b19      	ldr	r3, [pc, #100]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	789b      	ldrb	r3, [r3, #2]
 8014da4:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014da6:	7b7b      	ldrb	r3, [r7, #13]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d005      	beq.n	8014db8 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014dac:	4b15      	ldr	r3, [pc, #84]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	689b      	ldr	r3, [r3, #8]
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	4798      	blx	r3
 8014db6:	e00b      	b.n	8014dd0 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014db8:	4b12      	ldr	r3, [pc, #72]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014dc0:	4b10      	ldr	r3, [pc, #64]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	785b      	ldrb	r3, [r3, #1]
 8014dc6:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014dc8:	4b0e      	ldr	r3, [pc, #56]	; (8014e04 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	78db      	ldrb	r3, [r3, #3]
 8014dce:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014dd0:	f7ff ff06 	bl	8014be0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014dd4:	7b7b      	ldrb	r3, [r7, #13]
 8014dd6:	f083 0301 	eor.w	r3, r3, #1
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d004      	beq.n	8014dea <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014de0:	f107 0308 	add.w	r3, r7, #8
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7ff fec1 	bl	8014b6c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014dea:	7bfb      	ldrb	r3, [r7, #15]
 8014dec:	3301      	adds	r3, #1
 8014dee:	73fb      	strb	r3, [r7, #15]
 8014df0:	7bfa      	ldrb	r2, [r7, #15]
 8014df2:	7bbb      	ldrb	r3, [r7, #14]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d3c8      	bcc.n	8014d8a <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8014df8:	bf00      	nop
 8014dfa:	bf00      	nop
 8014dfc:	3710      	adds	r7, #16
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
 8014e02:	bf00      	nop
 8014e04:	20002014 	.word	0x20002014

08014e08 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014e08:	b480      	push	{r7}
 8014e0a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014e0c:	4b03      	ldr	r3, [pc, #12]	; (8014e1c <LoRaMacConfirmQueueGetCnt+0x14>)
 8014e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bc80      	pop	{r7}
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	20002014 	.word	0x20002014

08014e20 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014e24:	4b06      	ldr	r3, [pc, #24]	; (8014e40 <LoRaMacConfirmQueueIsFull+0x20>)
 8014e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7ff fe3a 	bl	8014aa4 <IsListFull>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d001      	beq.n	8014e3a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8014e36:	2301      	movs	r3, #1
 8014e38:	e000      	b.n	8014e3c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8014e3a:	2300      	movs	r3, #0
    }
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	20002014 	.word	0x20002014

08014e44 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b08e      	sub	sp, #56	; 0x38
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	607b      	str	r3, [r7, #4]
 8014e4e:	460b      	mov	r3, r1
 8014e50:	817b      	strh	r3, [r7, #10]
 8014e52:	4613      	mov	r3, r2
 8014e54:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d101      	bne.n	8014e60 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e5c:	2309      	movs	r3, #9
 8014e5e:	e086      	b.n	8014f6e <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8014e60:	2300      	movs	r3, #0
 8014e62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8014e66:	2301      	movs	r3, #1
 8014e68:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	623b      	str	r3, [r7, #32]
 8014e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e72:	2200      	movs	r2, #0
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	605a      	str	r2, [r3, #4]
 8014e78:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	613b      	str	r3, [r7, #16]
 8014e7e:	f107 0314 	add.w	r3, r7, #20
 8014e82:	2200      	movs	r2, #0
 8014e84:	601a      	str	r2, [r3, #0]
 8014e86:	605a      	str	r2, [r3, #4]
 8014e88:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014e8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014e92:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	b2db      	uxtb	r3, r3
 8014e98:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	0a1b      	lsrs	r3, r3, #8
 8014e9e:	b2db      	uxtb	r3, r3
 8014ea0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	0c1b      	lsrs	r3, r3, #16
 8014ea6:	b2db      	uxtb	r3, r3
 8014ea8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	0e1b      	lsrs	r3, r3, #24
 8014eae:	b2db      	uxtb	r3, r3
 8014eb0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8014eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eba:	0a1b      	lsrs	r3, r3, #8
 8014ebc:	b2db      	uxtb	r3, r3
 8014ebe:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ec2:	0c1b      	lsrs	r3, r3, #16
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eca:	0e1b      	lsrs	r3, r3, #24
 8014ecc:	b2db      	uxtb	r3, r3
 8014ece:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014ed0:	e048      	b.n	8014f64 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8014ed2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014ed8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014eda:	3301      	adds	r3, #1
 8014edc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014ede:	f107 0320 	add.w	r3, r7, #32
 8014ee2:	7a7a      	ldrb	r2, [r7, #9]
 8014ee4:	f107 0010 	add.w	r0, r7, #16
 8014ee8:	2110      	movs	r1, #16
 8014eea:	f7f8 fd0a 	bl	800d902 <SecureElementAesEncrypt>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d001      	beq.n	8014ef8 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ef4:	230e      	movs	r3, #14
 8014ef6:	e03a      	b.n	8014f6e <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014ef8:	2300      	movs	r3, #0
 8014efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8014efe:	e01e      	b.n	8014f3e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014f00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014f08:	4413      	add	r3, r2
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	4413      	add	r3, r2
 8014f10:	7819      	ldrb	r1, [r3, #0]
 8014f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014f16:	3338      	adds	r3, #56	; 0x38
 8014f18:	443b      	add	r3, r7
 8014f1a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8014f1e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8014f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014f26:	4403      	add	r3, r0
 8014f28:	4618      	mov	r0, r3
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	4403      	add	r3, r0
 8014f2e:	404a      	eors	r2, r1
 8014f30:	b2d2      	uxtb	r2, r2
 8014f32:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014f34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014f38:	3301      	adds	r3, #1
 8014f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8014f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014f42:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014f46:	2a10      	cmp	r2, #16
 8014f48:	bfa8      	it	ge
 8014f4a:	2210      	movge	r2, #16
 8014f4c:	b212      	sxth	r2, r2
 8014f4e:	4293      	cmp	r3, r2
 8014f50:	dbd6      	blt.n	8014f00 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8014f52:	897b      	ldrh	r3, [r7, #10]
 8014f54:	3b10      	subs	r3, #16
 8014f56:	b29b      	uxth	r3, r3
 8014f58:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8014f5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f5e:	3310      	adds	r3, #16
 8014f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8014f64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	dcb2      	bgt.n	8014ed2 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014f6c:	2300      	movs	r3, #0
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3738      	adds	r7, #56	; 0x38
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}

08014f76 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014f76:	b490      	push	{r4, r7}
 8014f78:	b082      	sub	sp, #8
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	4608      	mov	r0, r1
 8014f80:	4611      	mov	r1, r2
 8014f82:	461a      	mov	r2, r3
 8014f84:	4623      	mov	r3, r4
 8014f86:	80fb      	strh	r3, [r7, #6]
 8014f88:	4603      	mov	r3, r0
 8014f8a:	717b      	strb	r3, [r7, #5]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	713b      	strb	r3, [r7, #4]
 8014f90:	4613      	mov	r3, r2
 8014f92:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014f94:	69bb      	ldr	r3, [r7, #24]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d101      	bne.n	8014f9e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f9a:	2309      	movs	r3, #9
 8014f9c:	e04e      	b.n	801503c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014f9e:	69bb      	ldr	r3, [r7, #24]
 8014fa0:	2249      	movs	r2, #73	; 0x49
 8014fa2:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014fa4:	69bb      	ldr	r3, [r7, #24]
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	2200      	movs	r2, #0
 8014faa:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014fac:	69bb      	ldr	r3, [r7, #24]
 8014fae:	3302      	adds	r3, #2
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	3303      	adds	r3, #3
 8014fb8:	2200      	movs	r2, #0
 8014fba:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	3304      	adds	r3, #4
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	3305      	adds	r3, #5
 8014fc8:	78fa      	ldrb	r2, [r7, #3]
 8014fca:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014fcc:	69bb      	ldr	r3, [r7, #24]
 8014fce:	3306      	adds	r3, #6
 8014fd0:	693a      	ldr	r2, [r7, #16]
 8014fd2:	b2d2      	uxtb	r2, r2
 8014fd4:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	0a1a      	lsrs	r2, r3, #8
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	3307      	adds	r3, #7
 8014fde:	b2d2      	uxtb	r2, r2
 8014fe0:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	0c1a      	lsrs	r2, r3, #16
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	3308      	adds	r3, #8
 8014fea:	b2d2      	uxtb	r2, r2
 8014fec:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014fee:	693b      	ldr	r3, [r7, #16]
 8014ff0:	0e1a      	lsrs	r2, r3, #24
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	3309      	adds	r3, #9
 8014ff6:	b2d2      	uxtb	r2, r2
 8014ff8:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014ffa:	69bb      	ldr	r3, [r7, #24]
 8014ffc:	330a      	adds	r3, #10
 8014ffe:	697a      	ldr	r2, [r7, #20]
 8015000:	b2d2      	uxtb	r2, r2
 8015002:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	0a1a      	lsrs	r2, r3, #8
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	330b      	adds	r3, #11
 801500c:	b2d2      	uxtb	r2, r2
 801500e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	0c1a      	lsrs	r2, r3, #16
 8015014:	69bb      	ldr	r3, [r7, #24]
 8015016:	330c      	adds	r3, #12
 8015018:	b2d2      	uxtb	r2, r2
 801501a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	0e1a      	lsrs	r2, r3, #24
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	330d      	adds	r3, #13
 8015024:	b2d2      	uxtb	r2, r2
 8015026:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015028:	69bb      	ldr	r3, [r7, #24]
 801502a:	330e      	adds	r3, #14
 801502c:	2200      	movs	r2, #0
 801502e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015030:	69bb      	ldr	r3, [r7, #24]
 8015032:	330f      	adds	r3, #15
 8015034:	88fa      	ldrh	r2, [r7, #6]
 8015036:	b2d2      	uxtb	r2, r2
 8015038:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801503a:	2300      	movs	r3, #0
}
 801503c:	4618      	mov	r0, r3
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bc90      	pop	{r4, r7}
 8015044:	4770      	bx	lr

08015046 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015046:	b590      	push	{r4, r7, lr}
 8015048:	b08b      	sub	sp, #44	; 0x2c
 801504a:	af04      	add	r7, sp, #16
 801504c:	6078      	str	r0, [r7, #4]
 801504e:	4608      	mov	r0, r1
 8015050:	4611      	mov	r1, r2
 8015052:	461a      	mov	r2, r3
 8015054:	4603      	mov	r3, r0
 8015056:	807b      	strh	r3, [r7, #2]
 8015058:	460b      	mov	r3, r1
 801505a:	707b      	strb	r3, [r7, #1]
 801505c:	4613      	mov	r3, r2
 801505e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d002      	beq.n	801506c <ComputeCmacB0+0x26>
 8015066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015068:	2b00      	cmp	r3, #0
 801506a:	d101      	bne.n	8015070 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801506c:	2309      	movs	r3, #9
 801506e:	e024      	b.n	80150ba <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015070:	887b      	ldrh	r3, [r7, #2]
 8015072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015076:	d901      	bls.n	801507c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015078:	230d      	movs	r3, #13
 801507a:	e01e      	b.n	80150ba <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801507c:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8015080:	783a      	ldrb	r2, [r7, #0]
 8015082:	7879      	ldrb	r1, [r7, #1]
 8015084:	8878      	ldrh	r0, [r7, #2]
 8015086:	f107 0308 	add.w	r3, r7, #8
 801508a:	9302      	str	r3, [sp, #8]
 801508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801508e:	9301      	str	r3, [sp, #4]
 8015090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015092:	9300      	str	r3, [sp, #0]
 8015094:	4623      	mov	r3, r4
 8015096:	f7ff ff6e 	bl	8014f76 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801509a:	7879      	ldrb	r1, [r7, #1]
 801509c:	887a      	ldrh	r2, [r7, #2]
 801509e:	f107 0008 	add.w	r0, r7, #8
 80150a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	460b      	mov	r3, r1
 80150a8:	6879      	ldr	r1, [r7, #4]
 80150aa:	f7f8 fbdd 	bl	800d868 <SecureElementComputeAesCmac>
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d001      	beq.n	80150b8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150b4:	230e      	movs	r3, #14
 80150b6:	e000      	b.n	80150ba <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	371c      	adds	r7, #28
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd90      	pop	{r4, r7, pc}

080150c2 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80150c2:	b590      	push	{r4, r7, lr}
 80150c4:	b0cd      	sub	sp, #308	; 0x134
 80150c6:	af04      	add	r7, sp, #16
 80150c8:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80150cc:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80150d0:	6020      	str	r0, [r4, #0]
 80150d2:	460c      	mov	r4, r1
 80150d4:	4610      	mov	r0, r2
 80150d6:	4619      	mov	r1, r3
 80150d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80150dc:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80150e0:	4622      	mov	r2, r4
 80150e2:	801a      	strh	r2, [r3, #0]
 80150e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80150e8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80150ec:	4602      	mov	r2, r0
 80150ee:	701a      	strb	r2, [r3, #0]
 80150f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80150f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80150f8:	460a      	mov	r2, r1
 80150fa:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80150fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015100:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d101      	bne.n	801510e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801510a:	2309      	movs	r3, #9
 801510c:	e063      	b.n	80151d6 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801510e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015112:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015116:	881b      	ldrh	r3, [r3, #0]
 8015118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801511c:	d901      	bls.n	8015122 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801511e:	230d      	movs	r3, #13
 8015120:	e059      	b.n	80151d6 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015122:	f107 030c 	add.w	r3, r7, #12
 8015126:	f44f 7288 	mov.w	r2, #272	; 0x110
 801512a:	2100      	movs	r1, #0
 801512c:	4618      	mov	r0, r3
 801512e:	f003 fb41 	bl	80187b4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015132:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8015136:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801513a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801513e:	781a      	ldrb	r2, [r3, #0]
 8015140:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015144:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015148:	7819      	ldrb	r1, [r3, #0]
 801514a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801514e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015152:	8818      	ldrh	r0, [r3, #0]
 8015154:	f107 030c 	add.w	r3, r7, #12
 8015158:	9302      	str	r3, [sp, #8]
 801515a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801515e:	9301      	str	r3, [sp, #4]
 8015160:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015164:	9300      	str	r3, [sp, #0]
 8015166:	4623      	mov	r3, r4
 8015168:	f7ff ff05 	bl	8014f76 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801516c:	f107 030c 	add.w	r3, r7, #12
 8015170:	3310      	adds	r3, #16
 8015172:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8015176:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801517a:	8812      	ldrh	r2, [r2, #0]
 801517c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8015180:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8015184:	6809      	ldr	r1, [r1, #0]
 8015186:	4618      	mov	r0, r3
 8015188:	f003 fad9 	bl	801873e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801518c:	2306      	movs	r3, #6
 801518e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015192:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015196:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801519a:	881b      	ldrh	r3, [r3, #0]
 801519c:	3310      	adds	r3, #16
 801519e:	b299      	uxth	r1, r3
 80151a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80151a4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	f107 000c 	add.w	r0, r7, #12
 80151ae:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80151b2:	f7f8 fb77 	bl	800d8a4 <SecureElementVerifyAesCmac>
 80151b6:	4603      	mov	r3, r0
 80151b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80151bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d101      	bne.n	80151c8 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80151c4:	2300      	movs	r3, #0
 80151c6:	e006      	b.n	80151d6 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80151c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	d101      	bne.n	80151d4 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80151d0:	2301      	movs	r3, #1
 80151d2:	e000      	b.n	80151d6 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80151d4:	230e      	movs	r3, #14
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd90      	pop	{r4, r7, pc}

080151e0 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80151e0:	b480      	push	{r7}
 80151e2:	b085      	sub	sp, #20
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	4603      	mov	r3, r0
 80151e8:	6039      	str	r1, [r7, #0]
 80151ea:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80151ec:	2300      	movs	r3, #0
 80151ee:	73fb      	strb	r3, [r7, #15]
 80151f0:	e011      	b.n	8015216 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80151f2:	7bfb      	ldrb	r3, [r7, #15]
 80151f4:	4a0c      	ldr	r2, [pc, #48]	; (8015228 <GetKeyAddrItem+0x48>)
 80151f6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80151fa:	79fa      	ldrb	r2, [r7, #7]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d107      	bne.n	8015210 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8015200:	7bfb      	ldrb	r3, [r7, #15]
 8015202:	009b      	lsls	r3, r3, #2
 8015204:	4a08      	ldr	r2, [pc, #32]	; (8015228 <GetKeyAddrItem+0x48>)
 8015206:	441a      	add	r2, r3
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801520c:	2300      	movs	r3, #0
 801520e:	e006      	b.n	801521e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015210:	7bfb      	ldrb	r3, [r7, #15]
 8015212:	3301      	adds	r3, #1
 8015214:	73fb      	strb	r3, [r7, #15]
 8015216:	7bfb      	ldrb	r3, [r7, #15]
 8015218:	2b01      	cmp	r3, #1
 801521a:	d9ea      	bls.n	80151f2 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801521c:	230b      	movs	r3, #11
}
 801521e:	4618      	mov	r0, r3
 8015220:	3714      	adds	r7, #20
 8015222:	46bd      	mov	sp, r7
 8015224:	bc80      	pop	{r7}
 8015226:	4770      	bx	lr
 8015228:	20000110 	.word	0x20000110

0801522c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b088      	sub	sp, #32
 8015230:	af00      	add	r7, sp, #0
 8015232:	60b9      	str	r1, [r7, #8]
 8015234:	607a      	str	r2, [r7, #4]
 8015236:	461a      	mov	r2, r3
 8015238:	4603      	mov	r3, r0
 801523a:	73fb      	strb	r3, [r7, #15]
 801523c:	4613      	mov	r3, r2
 801523e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8015240:	2300      	movs	r3, #0
 8015242:	613b      	str	r3, [r7, #16]
 8015244:	f107 0314 	add.w	r3, r7, #20
 8015248:	2200      	movs	r2, #0
 801524a:	601a      	str	r2, [r3, #0]
 801524c:	605a      	str	r2, [r3, #4]
 801524e:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8015250:	7bfb      	ldrb	r3, [r7, #15]
 8015252:	2b02      	cmp	r3, #2
 8015254:	d002      	beq.n	801525c <DeriveSessionKey10x+0x30>
 8015256:	2b03      	cmp	r3, #3
 8015258:	d003      	beq.n	8015262 <DeriveSessionKey10x+0x36>
 801525a:	e005      	b.n	8015268 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 801525c:	2301      	movs	r3, #1
 801525e:	743b      	strb	r3, [r7, #16]
            break;
 8015260:	e004      	b.n	801526c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015262:	2302      	movs	r3, #2
 8015264:	743b      	strb	r3, [r7, #16]
            break;
 8015266:	e001      	b.n	801526c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015268:	230a      	movs	r3, #10
 801526a:	e02a      	b.n	80152c2 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	b2db      	uxtb	r3, r3
 8015270:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	0a1b      	lsrs	r3, r3, #8
 8015276:	b2db      	uxtb	r3, r3
 8015278:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	0c1b      	lsrs	r3, r3, #16
 801527e:	b2db      	uxtb	r3, r3
 8015280:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	b2db      	uxtb	r3, r3
 8015286:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	0a1b      	lsrs	r3, r3, #8
 801528c:	b2db      	uxtb	r3, r3
 801528e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	0c1b      	lsrs	r3, r3, #16
 8015294:	b2db      	uxtb	r3, r3
 8015296:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015298:	89bb      	ldrh	r3, [r7, #12]
 801529a:	b2db      	uxtb	r3, r3
 801529c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801529e:	89bb      	ldrh	r3, [r7, #12]
 80152a0:	0a1b      	lsrs	r3, r3, #8
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80152a8:	7bfa      	ldrb	r2, [r7, #15]
 80152aa:	f107 0310 	add.w	r3, r7, #16
 80152ae:	2101      	movs	r1, #1
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7f8 fb8d 	bl	800d9d0 <SecureElementDeriveAndStoreKey>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d001      	beq.n	80152c0 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80152bc:	230e      	movs	r3, #14
 80152be:	e000      	b.n	80152c2 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80152c0:	2300      	movs	r3, #0
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	3720      	adds	r7, #32
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bd80      	pop	{r7, pc}
	...

080152cc <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80152cc:	b480      	push	{r7}
 80152ce:	b083      	sub	sp, #12
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	4603      	mov	r3, r0
 80152d4:	6039      	str	r1, [r7, #0]
 80152d6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d101      	bne.n	80152e2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152de:	2309      	movs	r3, #9
 80152e0:	e03b      	b.n	801535a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	3b01      	subs	r3, #1
 80152e6:	2b03      	cmp	r3, #3
 80152e8:	d834      	bhi.n	8015354 <GetLastFcntDown+0x88>
 80152ea:	a201      	add	r2, pc, #4	; (adr r2, 80152f0 <GetLastFcntDown+0x24>)
 80152ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152f0:	08015301 	.word	0x08015301
 80152f4:	08015319 	.word	0x08015319
 80152f8:	08015331 	.word	0x08015331
 80152fc:	08015349 	.word	0x08015349
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8015300:	4b18      	ldr	r3, [pc, #96]	; (8015364 <GetLastFcntDown+0x98>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	691a      	ldr	r2, [r3, #16]
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801530a:	4b16      	ldr	r3, [pc, #88]	; (8015364 <GetLastFcntDown+0x98>)
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	4b15      	ldr	r3, [pc, #84]	; (8015364 <GetLastFcntDown+0x98>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	6912      	ldr	r2, [r2, #16]
 8015314:	621a      	str	r2, [r3, #32]
            break;
 8015316:	e01f      	b.n	8015358 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015318:	4b12      	ldr	r3, [pc, #72]	; (8015364 <GetLastFcntDown+0x98>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	695a      	ldr	r2, [r3, #20]
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8015322:	4b10      	ldr	r3, [pc, #64]	; (8015364 <GetLastFcntDown+0x98>)
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	4b0f      	ldr	r3, [pc, #60]	; (8015364 <GetLastFcntDown+0x98>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	6952      	ldr	r2, [r2, #20]
 801532c:	621a      	str	r2, [r3, #32]
            break;
 801532e:	e013      	b.n	8015358 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8015330:	4b0c      	ldr	r3, [pc, #48]	; (8015364 <GetLastFcntDown+0x98>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	699a      	ldr	r2, [r3, #24]
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801533a:	4b0a      	ldr	r3, [pc, #40]	; (8015364 <GetLastFcntDown+0x98>)
 801533c:	681a      	ldr	r2, [r3, #0]
 801533e:	4b09      	ldr	r3, [pc, #36]	; (8015364 <GetLastFcntDown+0x98>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	6992      	ldr	r2, [r2, #24]
 8015344:	621a      	str	r2, [r3, #32]
            break;
 8015346:	e007      	b.n	8015358 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8015348:	4b06      	ldr	r3, [pc, #24]	; (8015364 <GetLastFcntDown+0x98>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	69da      	ldr	r2, [r3, #28]
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	601a      	str	r2, [r3, #0]
            break;
 8015352:	e001      	b.n	8015358 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015354:	2305      	movs	r3, #5
 8015356:	e000      	b.n	801535a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015358:	2300      	movs	r3, #0
}
 801535a:	4618      	mov	r0, r3
 801535c:	370c      	adds	r7, #12
 801535e:	46bd      	mov	sp, r7
 8015360:	bc80      	pop	{r7}
 8015362:	4770      	bx	lr
 8015364:	20002038 	.word	0x20002038

08015368 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	4603      	mov	r3, r0
 8015370:	6039      	str	r1, [r7, #0]
 8015372:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8015374:	2300      	movs	r3, #0
 8015376:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015378:	f107 020c 	add.w	r2, r7, #12
 801537c:	79fb      	ldrb	r3, [r7, #7]
 801537e:	4611      	mov	r1, r2
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff ffa3 	bl	80152cc <GetLastFcntDown>
 8015386:	4603      	mov	r3, r0
 8015388:	2b00      	cmp	r3, #0
 801538a:	d001      	beq.n	8015390 <CheckFCntDown+0x28>
    {
        return false;
 801538c:	2300      	movs	r3, #0
 801538e:	e00a      	b.n	80153a6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	429a      	cmp	r2, r3
 8015396:	d803      	bhi.n	80153a0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8015398:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801539e:	d101      	bne.n	80153a4 <CheckFCntDown+0x3c>
    {
        return true;
 80153a0:	2301      	movs	r3, #1
 80153a2:	e000      	b.n	80153a6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80153a4:	2300      	movs	r3, #0
    }
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
	...

080153b0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80153b0:	b480      	push	{r7}
 80153b2:	b083      	sub	sp, #12
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	4603      	mov	r3, r0
 80153b8:	6039      	str	r1, [r7, #0]
 80153ba:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80153bc:	79fb      	ldrb	r3, [r7, #7]
 80153be:	3b01      	subs	r3, #1
 80153c0:	2b03      	cmp	r3, #3
 80153c2:	d81f      	bhi.n	8015404 <UpdateFCntDown+0x54>
 80153c4:	a201      	add	r2, pc, #4	; (adr r2, 80153cc <UpdateFCntDown+0x1c>)
 80153c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153ca:	bf00      	nop
 80153cc:	080153dd 	.word	0x080153dd
 80153d0:	080153e7 	.word	0x080153e7
 80153d4:	080153f1 	.word	0x080153f1
 80153d8:	080153fb 	.word	0x080153fb
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80153dc:	4b0c      	ldr	r3, [pc, #48]	; (8015410 <UpdateFCntDown+0x60>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	683a      	ldr	r2, [r7, #0]
 80153e2:	611a      	str	r2, [r3, #16]
            break;
 80153e4:	e00f      	b.n	8015406 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80153e6:	4b0a      	ldr	r3, [pc, #40]	; (8015410 <UpdateFCntDown+0x60>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	683a      	ldr	r2, [r7, #0]
 80153ec:	615a      	str	r2, [r3, #20]
            break;
 80153ee:	e00a      	b.n	8015406 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80153f0:	4b07      	ldr	r3, [pc, #28]	; (8015410 <UpdateFCntDown+0x60>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	683a      	ldr	r2, [r7, #0]
 80153f6:	619a      	str	r2, [r3, #24]
            break;
 80153f8:	e005      	b.n	8015406 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80153fa:	4b05      	ldr	r3, [pc, #20]	; (8015410 <UpdateFCntDown+0x60>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	683a      	ldr	r2, [r7, #0]
 8015400:	61da      	str	r2, [r3, #28]
            break;
 8015402:	e000      	b.n	8015406 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015404:	bf00      	nop
    }
}
 8015406:	bf00      	nop
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	bc80      	pop	{r7}
 801540e:	4770      	bx	lr
 8015410:	20002038 	.word	0x20002038

08015414 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801541a:	4b18      	ldr	r3, [pc, #96]	; (801547c <ResetFCnts+0x68>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2200      	movs	r2, #0
 8015420:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015422:	4b16      	ldr	r3, [pc, #88]	; (801547c <ResetFCnts+0x68>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f04f 32ff 	mov.w	r2, #4294967295
 801542a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801542c:	4b13      	ldr	r3, [pc, #76]	; (801547c <ResetFCnts+0x68>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f04f 32ff 	mov.w	r2, #4294967295
 8015434:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015436:	4b11      	ldr	r3, [pc, #68]	; (801547c <ResetFCnts+0x68>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f04f 32ff 	mov.w	r2, #4294967295
 801543e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8015440:	4b0e      	ldr	r3, [pc, #56]	; (801547c <ResetFCnts+0x68>)
 8015442:	681a      	ldr	r2, [r3, #0]
 8015444:	4b0d      	ldr	r3, [pc, #52]	; (801547c <ResetFCnts+0x68>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	6992      	ldr	r2, [r2, #24]
 801544a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801544c:	2300      	movs	r3, #0
 801544e:	607b      	str	r3, [r7, #4]
 8015450:	e00b      	b.n	801546a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8015452:	4b0a      	ldr	r3, [pc, #40]	; (801547c <ResetFCnts+0x68>)
 8015454:	681a      	ldr	r2, [r3, #0]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	3306      	adds	r3, #6
 801545a:	009b      	lsls	r3, r3, #2
 801545c:	4413      	add	r3, r2
 801545e:	f04f 32ff 	mov.w	r2, #4294967295
 8015462:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	3301      	adds	r3, #1
 8015468:	607b      	str	r3, [r7, #4]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	2b00      	cmp	r3, #0
 801546e:	ddf0      	ble.n	8015452 <ResetFCnts+0x3e>
    }
}
 8015470:	bf00      	nop
 8015472:	bf00      	nop
 8015474:	370c      	adds	r7, #12
 8015476:	46bd      	mov	sp, r7
 8015478:	bc80      	pop	{r7}
 801547a:	4770      	bx	lr
 801547c:	20002038 	.word	0x20002038

08015480 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d101      	bne.n	8015492 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801548e:	2308      	movs	r3, #8
 8015490:	e01c      	b.n	80154cc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8015492:	4a10      	ldr	r2, [pc, #64]	; (80154d4 <LoRaMacCryptoInit+0x54>)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015498:	4b0e      	ldr	r3, [pc, #56]	; (80154d4 <LoRaMacCryptoInit+0x54>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	2228      	movs	r2, #40	; 0x28
 801549e:	2100      	movs	r1, #0
 80154a0:	4618      	mov	r0, r3
 80154a2:	f003 f987 	bl	80187b4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80154a6:	4b0b      	ldr	r3, [pc, #44]	; (80154d4 <LoRaMacCryptoInit+0x54>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	2201      	movs	r2, #1
 80154ac:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80154ae:	4b09      	ldr	r3, [pc, #36]	; (80154d4 <LoRaMacCryptoInit+0x54>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	2201      	movs	r2, #1
 80154b4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80154b6:	4b07      	ldr	r3, [pc, #28]	; (80154d4 <LoRaMacCryptoInit+0x54>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	2201      	movs	r2, #1
 80154bc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80154be:	4b05      	ldr	r3, [pc, #20]	; (80154d4 <LoRaMacCryptoInit+0x54>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	2200      	movs	r2, #0
 80154c4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80154c6:	f7ff ffa5 	bl	8015414 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80154ca:	2300      	movs	r3, #0
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3708      	adds	r7, #8
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	20002038 	.word	0x20002038

080154d8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80154d8:	b480      	push	{r7}
 80154da:	b083      	sub	sp, #12
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80154e0:	4b04      	ldr	r3, [pc, #16]	; (80154f4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	370c      	adds	r7, #12
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bc80      	pop	{r7}
 80154f2:	4770      	bx	lr
 80154f4:	20002038 	.word	0x20002038

080154f8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d101      	bne.n	801550a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015506:	2309      	movs	r3, #9
 8015508:	e006      	b.n	8015518 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801550a:	4b06      	ldr	r3, [pc, #24]	; (8015524 <LoRaMacCryptoGetFCntUp+0x2c>)
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	1c5a      	adds	r2, r3, #1
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	370c      	adds	r7, #12
 801551c:	46bd      	mov	sp, r7
 801551e:	bc80      	pop	{r7}
 8015520:	4770      	bx	lr
 8015522:	bf00      	nop
 8015524:	20002038 	.word	0x20002038

08015528 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b088      	sub	sp, #32
 801552c:	af00      	add	r7, sp, #0
 801552e:	4603      	mov	r3, r0
 8015530:	60b9      	str	r1, [r7, #8]
 8015532:	607a      	str	r2, [r7, #4]
 8015534:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8015536:	2300      	movs	r3, #0
 8015538:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801553a:	2300      	movs	r3, #0
 801553c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801553e:	2312      	movs	r3, #18
 8015540:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d101      	bne.n	801554c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015548:	2309      	movs	r3, #9
 801554a:	e035      	b.n	80155b8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801554c:	f107 0214 	add.w	r2, r7, #20
 8015550:	7bfb      	ldrb	r3, [r7, #15]
 8015552:	4611      	mov	r1, r2
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff feb9 	bl	80152cc <GetLastFcntDown>
 801555a:	4603      	mov	r3, r0
 801555c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801555e:	7efb      	ldrb	r3, [r7, #27]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d001      	beq.n	8015568 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8015564:	7efb      	ldrb	r3, [r7, #27]
 8015566:	e027      	b.n	80155b8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801556e:	d103      	bne.n	8015578 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	68ba      	ldr	r2, [r7, #8]
 8015574:	601a      	str	r2, [r3, #0]
 8015576:	e01e      	b.n	80155b6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	b29b      	uxth	r3, r3
 801557c:	68ba      	ldr	r2, [r7, #8]
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	2b00      	cmp	r3, #0
 8015586:	dd05      	ble.n	8015594 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015588:	697a      	ldr	r2, [r7, #20]
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	441a      	add	r2, r3
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	601a      	str	r2, [r3, #0]
 8015592:	e010      	b.n	80155b6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d104      	bne.n	80155a4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801559a:	697a      	ldr	r2, [r7, #20]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80155a0:	2307      	movs	r3, #7
 80155a2:	e009      	b.n	80155b8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	0c1b      	lsrs	r3, r3, #16
 80155a8:	041b      	lsls	r3, r3, #16
 80155aa:	68ba      	ldr	r2, [r7, #8]
 80155ac:	4413      	add	r3, r2
 80155ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3720      	adds	r7, #32
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80155c0:	b480      	push	{r7}
 80155c2:	b085      	sub	sp, #20
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d101      	bne.n	80155d2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80155ce:	2309      	movs	r3, #9
 80155d0:	e017      	b.n	8015602 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80155d2:	2300      	movs	r3, #0
 80155d4:	60fb      	str	r3, [r7, #12]
 80155d6:	e010      	b.n	80155fa <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80155d8:	4b0c      	ldr	r3, [pc, #48]	; (801560c <LoRaMacCryptoSetMulticastReference+0x4c>)
 80155da:	6819      	ldr	r1, [r3, #0]
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	222c      	movs	r2, #44	; 0x2c
 80155e0:	fb02 f303 	mul.w	r3, r2, r3
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	4413      	add	r3, r2
 80155e8:	68fa      	ldr	r2, [r7, #12]
 80155ea:	3206      	adds	r2, #6
 80155ec:	0092      	lsls	r2, r2, #2
 80155ee:	440a      	add	r2, r1
 80155f0:	3204      	adds	r2, #4
 80155f2:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	3301      	adds	r3, #1
 80155f8:	60fb      	str	r3, [r7, #12]
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	ddeb      	ble.n	80155d8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015600:	2300      	movs	r3, #0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3714      	adds	r7, #20
 8015606:	46bd      	mov	sp, r7
 8015608:	bc80      	pop	{r7}
 801560a:	4770      	bx	lr
 801560c:	20002038 	.word	0x20002038

08015610 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	4603      	mov	r3, r0
 8015618:	6039      	str	r1, [r7, #0]
 801561a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801561c:	79fb      	ldrb	r3, [r7, #7]
 801561e:	6839      	ldr	r1, [r7, #0]
 8015620:	4618      	mov	r0, r3
 8015622:	f7f8 f8c3 	bl	800d7ac <SecureElementSetKey>
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d001      	beq.n	8015630 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801562c:	230e      	movs	r3, #14
 801562e:	e018      	b.n	8015662 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8015630:	79fb      	ldrb	r3, [r7, #7]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d114      	bne.n	8015660 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015636:	4b0d      	ldr	r3, [pc, #52]	; (801566c <LoRaMacCryptoSetKey+0x5c>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	789b      	ldrb	r3, [r3, #2]
 801563c:	79fa      	ldrb	r2, [r7, #7]
 801563e:	4611      	mov	r1, r2
 8015640:	4618      	mov	r0, r3
 8015642:	f000 fa39 	bl	8015ab8 <LoRaMacCryptoDeriveMcRootKey>
 8015646:	4603      	mov	r3, r0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d001      	beq.n	8015650 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801564c:	230e      	movs	r3, #14
 801564e:	e008      	b.n	8015662 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015650:	2004      	movs	r0, #4
 8015652:	f000 fa5c 	bl	8015b0e <LoRaMacCryptoDeriveMcKEKey>
 8015656:	4603      	mov	r3, r0
 8015658:	2b00      	cmp	r3, #0
 801565a:	d001      	beq.n	8015660 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801565c:	230e      	movs	r3, #14
 801565e:	e000      	b.n	8015662 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015660:	2300      	movs	r3, #0
}
 8015662:	4618      	mov	r0, r3
 8015664:	3708      	adds	r7, #8
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
 801566a:	bf00      	nop
 801566c:	20002038 	.word	0x20002038

08015670 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b086      	sub	sp, #24
 8015674:	af02      	add	r7, sp, #8
 8015676:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d101      	bne.n	8015682 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801567e:	2309      	movs	r3, #9
 8015680:	e02d      	b.n	80156de <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015682:	2301      	movs	r3, #1
 8015684:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015686:	4b18      	ldr	r3, [pc, #96]	; (80156e8 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	889a      	ldrh	r2, [r3, #4]
 801568c:	3201      	adds	r2, #1
 801568e:	b292      	uxth	r2, r2
 8015690:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015692:	4b15      	ldr	r3, [pc, #84]	; (80156e8 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	889a      	ldrh	r2, [r3, #4]
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f000 fc18 	bl	8015ed2 <LoRaMacSerializerJoinRequest>
 80156a2:	4603      	mov	r3, r0
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d001      	beq.n	80156ac <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80156a8:	2310      	movs	r3, #16
 80156aa:	e018      	b.n	80156de <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6819      	ldr	r1, [r3, #0]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	3318      	adds	r3, #24
 80156b4:	7bfa      	ldrb	r2, [r7, #15]
 80156b6:	9300      	str	r3, [sp, #0]
 80156b8:	4613      	mov	r3, r2
 80156ba:	2213      	movs	r2, #19
 80156bc:	2000      	movs	r0, #0
 80156be:	f7f8 f8d3 	bl	800d868 <SecureElementComputeAesCmac>
 80156c2:	4603      	mov	r3, r0
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d001      	beq.n	80156cc <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80156c8:	230e      	movs	r3, #14
 80156ca:	e008      	b.n	80156de <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f000 fc00 	bl	8015ed2 <LoRaMacSerializerJoinRequest>
 80156d2:	4603      	mov	r3, r0
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d001      	beq.n	80156dc <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80156d8:	2310      	movs	r3, #16
 80156da:	e000      	b.n	80156de <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80156dc:	2300      	movs	r3, #0
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3710      	adds	r7, #16
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	20002038 	.word	0x20002038

080156ec <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80156ec:	b590      	push	{r4, r7, lr}
 80156ee:	b097      	sub	sp, #92	; 0x5c
 80156f0:	af04      	add	r7, sp, #16
 80156f2:	4603      	mov	r3, r0
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	607a      	str	r2, [r7, #4]
 80156f8:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d002      	beq.n	8015706 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d101      	bne.n	801570a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015706:	2309      	movs	r3, #9
 8015708:	e0bd      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801570a:	2312      	movs	r3, #18
 801570c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015710:	2300      	movs	r3, #0
 8015712:	61bb      	str	r3, [r7, #24]
 8015714:	f107 031c 	add.w	r3, r7, #28
 8015718:	221d      	movs	r2, #29
 801571a:	2100      	movs	r1, #0
 801571c:	4618      	mov	r0, r3
 801571e:	f007 fe0d 	bl	801d33c <memset>
    uint8_t versionMinor         = 0;
 8015722:	2300      	movs	r3, #0
 8015724:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015726:	4b5a      	ldr	r3, [pc, #360]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	889b      	ldrh	r3, [r3, #4]
 801572c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681c      	ldr	r4, [r3, #0]
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	791b      	ldrb	r3, [r3, #4]
 8015738:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801573c:	7bf8      	ldrb	r0, [r7, #15]
 801573e:	f107 0217 	add.w	r2, r7, #23
 8015742:	9202      	str	r2, [sp, #8]
 8015744:	f107 0218 	add.w	r2, r7, #24
 8015748:	9201      	str	r2, [sp, #4]
 801574a:	9300      	str	r3, [sp, #0]
 801574c:	4623      	mov	r3, r4
 801574e:	460a      	mov	r2, r1
 8015750:	68b9      	ldr	r1, [r7, #8]
 8015752:	f7f8 f97d 	bl	800da50 <SecureElementProcessJoinAccept>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	d001      	beq.n	8015760 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801575c:	230e      	movs	r3, #14
 801575e:	e092      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	6818      	ldr	r0, [r3, #0]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	791b      	ldrb	r3, [r3, #4]
 8015768:	b29a      	uxth	r2, r3
 801576a:	f107 0318 	add.w	r3, r7, #24
 801576e:	4619      	mov	r1, r3
 8015770:	f002 ffe5 	bl	801873e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f000 f9ed 	bl	8015b54 <LoRaMacParserJoinAccept>
 801577a:	4603      	mov	r3, r0
 801577c:	2b00      	cmp	r3, #0
 801577e:	d001      	beq.n	8015784 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015780:	230f      	movs	r3, #15
 8015782:	e080      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	799b      	ldrb	r3, [r3, #6]
 8015788:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	79db      	ldrb	r3, [r3, #7]
 801578e:	021b      	lsls	r3, r3, #8
 8015790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015792:	4313      	orrs	r3, r2
 8015794:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	7a1b      	ldrb	r3, [r3, #8]
 801579a:	041b      	lsls	r3, r3, #16
 801579c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801579e:	4313      	orrs	r3, r2
 80157a0:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80157a2:	4b3b      	ldr	r3, [pc, #236]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	689b      	ldr	r3, [r3, #8]
 80157a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d010      	beq.n	80157d0 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80157ae:	4b38      	ldr	r3, [pc, #224]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80157b4:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80157b6:	7dfb      	ldrb	r3, [r7, #23]
 80157b8:	2100      	movs	r1, #0
 80157ba:	4618      	mov	r0, r3
 80157bc:	f000 f97c 	bl	8015ab8 <LoRaMacCryptoDeriveMcRootKey>
 80157c0:	4603      	mov	r3, r0
 80157c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80157c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d005      	beq.n	80157da <LoRaMacCryptoHandleJoinAccept+0xee>
 80157ce:	e001      	b.n	80157d4 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80157d0:	2303      	movs	r3, #3
 80157d2:	e058      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80157d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80157d8:	e055      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80157da:	2004      	movs	r0, #4
 80157dc:	f000 f997 	bl	8015b0e <LoRaMacCryptoDeriveMcKEKey>
 80157e0:	4603      	mov	r3, r0
 80157e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80157e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d002      	beq.n	80157f4 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80157ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80157f2:	e048      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	7a5b      	ldrb	r3, [r3, #9]
 80157f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	7a9b      	ldrb	r3, [r3, #10]
 80157fe:	021b      	lsls	r3, r3, #8
 8015800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015802:	4313      	orrs	r3, r2
 8015804:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	7adb      	ldrb	r3, [r3, #11]
 801580a:	041b      	lsls	r3, r3, #16
 801580c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801580e:	4313      	orrs	r3, r2
 8015810:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8015812:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801581a:	2003      	movs	r0, #3
 801581c:	f7ff fd06 	bl	801522c <DeriveSessionKey10x>
 8015820:	4603      	mov	r3, r0
 8015822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015826:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801582a:	2b00      	cmp	r3, #0
 801582c:	d002      	beq.n	8015834 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801582e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015832:	e028      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015834:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801583a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801583c:	2002      	movs	r0, #2
 801583e:	f7ff fcf5 	bl	801522c <DeriveSessionKey10x>
 8015842:	4603      	mov	r3, r0
 8015844:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801584c:	2b00      	cmp	r3, #0
 801584e:	d002      	beq.n	8015856 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8015850:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015854:	e017      	b.n	8015886 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015856:	4b0e      	ldr	r3, [pc, #56]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	7dfa      	ldrb	r2, [r7, #23]
 801585c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801585e:	4b0c      	ldr	r3, [pc, #48]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	2200      	movs	r2, #0
 8015864:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015866:	4b0a      	ldr	r3, [pc, #40]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	f04f 32ff 	mov.w	r2, #4294967295
 801586e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015870:	4b07      	ldr	r3, [pc, #28]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	f04f 32ff 	mov.w	r2, #4294967295
 8015878:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801587a:	4b05      	ldr	r3, [pc, #20]	; (8015890 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f04f 32ff 	mov.w	r2, #4294967295
 8015882:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015884:	2300      	movs	r3, #0
}
 8015886:	4618      	mov	r0, r3
 8015888:	374c      	adds	r7, #76	; 0x4c
 801588a:	46bd      	mov	sp, r7
 801588c:	bd90      	pop	{r4, r7, pc}
 801588e:	bf00      	nop
 8015890:	20002038 	.word	0x20002038

08015894 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015894:	b590      	push	{r4, r7, lr}
 8015896:	b08b      	sub	sp, #44	; 0x2c
 8015898:	af04      	add	r7, sp, #16
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	607b      	str	r3, [r7, #4]
 801589e:	460b      	mov	r3, r1
 80158a0:	72fb      	strb	r3, [r7, #11]
 80158a2:	4613      	mov	r3, r2
 80158a4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80158a6:	2312      	movs	r3, #18
 80158a8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80158aa:	2303      	movs	r3, #3
 80158ac:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d101      	bne.n	80158b8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80158b4:	2309      	movs	r3, #9
 80158b6:	e05f      	b.n	8015978 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80158b8:	4b31      	ldr	r3, [pc, #196]	; (8015980 <LoRaMacCryptoSecureMessage+0xec>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	68fa      	ldr	r2, [r7, #12]
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d201      	bcs.n	80158c8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80158c4:	2306      	movs	r3, #6
 80158c6:	e057      	b.n	8015978 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d101      	bne.n	80158d6 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80158d2:	2302      	movs	r3, #2
 80158d4:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80158d6:	4b2a      	ldr	r3, [pc, #168]	; (8015980 <LoRaMacCryptoSecureMessage+0xec>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	68fa      	ldr	r2, [r7, #12]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d916      	bls.n	8015910 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158ec:	b219      	sxth	r1, r3
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	689c      	ldr	r4, [r3, #8]
 80158f2:	7dfa      	ldrb	r2, [r7, #23]
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	9301      	str	r3, [sp, #4]
 80158f8:	2300      	movs	r3, #0
 80158fa:	9300      	str	r3, [sp, #0]
 80158fc:	4623      	mov	r3, r4
 80158fe:	f7ff faa1 	bl	8014e44 <PayloadEncrypt>
 8015902:	4603      	mov	r3, r0
 8015904:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015906:	7dbb      	ldrb	r3, [r7, #22]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d001      	beq.n	8015910 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801590c:	7dbb      	ldrb	r3, [r7, #22]
 801590e:	e033      	b.n	8015978 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	f000 fb60 	bl	8015fd6 <LoRaMacSerializerData>
 8015916:	4603      	mov	r3, r0
 8015918:	2b00      	cmp	r3, #0
 801591a:	d001      	beq.n	8015920 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801591c:	2310      	movs	r3, #16
 801591e:	e02b      	b.n	8015978 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015920:	2302      	movs	r3, #2
 8015922:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6818      	ldr	r0, [r3, #0]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	791b      	ldrb	r3, [r3, #4]
 801592c:	b29b      	uxth	r3, r3
 801592e:	3b04      	subs	r3, #4
 8015930:	b299      	uxth	r1, r3
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	689b      	ldr	r3, [r3, #8]
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	322c      	adds	r2, #44	; 0x2c
 801593a:	7dfc      	ldrb	r4, [r7, #23]
 801593c:	9203      	str	r2, [sp, #12]
 801593e:	68fa      	ldr	r2, [r7, #12]
 8015940:	9202      	str	r2, [sp, #8]
 8015942:	9301      	str	r3, [sp, #4]
 8015944:	2300      	movs	r3, #0
 8015946:	9300      	str	r3, [sp, #0]
 8015948:	2300      	movs	r3, #0
 801594a:	4622      	mov	r2, r4
 801594c:	f7ff fb7b 	bl	8015046 <ComputeCmacB0>
 8015950:	4603      	mov	r3, r0
 8015952:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015954:	7dbb      	ldrb	r3, [r7, #22]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d001      	beq.n	801595e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801595a:	7dbb      	ldrb	r3, [r7, #22]
 801595c:	e00c      	b.n	8015978 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f000 fb39 	bl	8015fd6 <LoRaMacSerializerData>
 8015964:	4603      	mov	r3, r0
 8015966:	2b00      	cmp	r3, #0
 8015968:	d001      	beq.n	801596e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801596a:	2310      	movs	r3, #16
 801596c:	e004      	b.n	8015978 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801596e:	4b04      	ldr	r3, [pc, #16]	; (8015980 <LoRaMacCryptoSecureMessage+0xec>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	68fa      	ldr	r2, [r7, #12]
 8015974:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015976:	2300      	movs	r3, #0
}
 8015978:	4618      	mov	r0, r3
 801597a:	371c      	adds	r7, #28
 801597c:	46bd      	mov	sp, r7
 801597e:	bd90      	pop	{r4, r7, pc}
 8015980:	20002038 	.word	0x20002038

08015984 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015984:	b590      	push	{r4, r7, lr}
 8015986:	b08b      	sub	sp, #44	; 0x2c
 8015988:	af04      	add	r7, sp, #16
 801598a:	60b9      	str	r1, [r7, #8]
 801598c:	607b      	str	r3, [r7, #4]
 801598e:	4603      	mov	r3, r0
 8015990:	73fb      	strb	r3, [r7, #15]
 8015992:	4613      	mov	r3, r2
 8015994:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015998:	2b00      	cmp	r3, #0
 801599a:	d101      	bne.n	80159a0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801599c:	2309      	movs	r3, #9
 801599e:	e084      	b.n	8015aaa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80159a0:	7bbb      	ldrb	r3, [r7, #14]
 80159a2:	6879      	ldr	r1, [r7, #4]
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7ff fcdf 	bl	8015368 <CheckFCntDown>
 80159aa:	4603      	mov	r3, r0
 80159ac:	f083 0301 	eor.w	r3, r3, #1
 80159b0:	b2db      	uxtb	r3, r3
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d001      	beq.n	80159ba <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80159b6:	2306      	movs	r3, #6
 80159b8:	e077      	b.n	8015aaa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80159ba:	2312      	movs	r3, #18
 80159bc:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80159be:	2303      	movs	r3, #3
 80159c0:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80159c2:	2302      	movs	r3, #2
 80159c4:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80159c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159c8:	f000 f98f 	bl	8015cea <LoRaMacParserData>
 80159cc:	4603      	mov	r3, r0
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d001      	beq.n	80159d6 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80159d2:	230f      	movs	r3, #15
 80159d4:	e069      	b.n	8015aaa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80159d6:	f107 0210 	add.w	r2, r7, #16
 80159da:	7bfb      	ldrb	r3, [r7, #15]
 80159dc:	4611      	mov	r1, r2
 80159de:	4618      	mov	r0, r3
 80159e0:	f7ff fbfe 	bl	80151e0 <GetKeyAddrItem>
 80159e4:	4603      	mov	r3, r0
 80159e6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80159e8:	7d7b      	ldrb	r3, [r7, #21]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d001      	beq.n	80159f2 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80159ee:	7d7b      	ldrb	r3, [r7, #21]
 80159f0:	e05b      	b.n	8015aaa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80159f2:	693b      	ldr	r3, [r7, #16]
 80159f4:	785b      	ldrb	r3, [r3, #1]
 80159f6:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	789b      	ldrb	r3, [r3, #2]
 80159fc:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80159fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a00:	689b      	ldr	r3, [r3, #8]
 8015a02:	68ba      	ldr	r2, [r7, #8]
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d001      	beq.n	8015a0c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015a08:	2302      	movs	r3, #2
 8015a0a:	e04e      	b.n	8015aaa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0e:	7b1b      	ldrb	r3, [r3, #12]
 8015a10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	bf14      	ite	ne
 8015a1a:	2301      	movne	r3, #1
 8015a1c:	2300      	moveq	r3, #0
 8015a1e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015a20:	4b24      	ldr	r3, [pc, #144]	; (8015ab4 <LoRaMacCryptoUnsecureMessage+0x130>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	789b      	ldrb	r3, [r3, #2]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d101      	bne.n	8015a2e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a30:	6818      	ldr	r0, [r3, #0]
 8015a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a34:	791b      	ldrb	r3, [r3, #4]
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	3b04      	subs	r3, #4
 8015a3a:	b299      	uxth	r1, r3
 8015a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a40:	7dbc      	ldrb	r4, [r7, #22]
 8015a42:	7d3a      	ldrb	r2, [r7, #20]
 8015a44:	9303      	str	r3, [sp, #12]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	9302      	str	r3, [sp, #8]
 8015a4a:	68bb      	ldr	r3, [r7, #8]
 8015a4c:	9301      	str	r3, [sp, #4]
 8015a4e:	2301      	movs	r3, #1
 8015a50:	9300      	str	r3, [sp, #0]
 8015a52:	4623      	mov	r3, r4
 8015a54:	f7ff fb35 	bl	80150c2 <VerifyCmacB0>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a5c:	7d7b      	ldrb	r3, [r7, #21]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d001      	beq.n	8015a66 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8015a62:	7d7b      	ldrb	r3, [r7, #21]
 8015a64:	e021      	b.n	8015aaa <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d101      	bne.n	8015a74 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015a70:	2302      	movs	r3, #2
 8015a72:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a7e:	b219      	sxth	r1, r3
 8015a80:	7dfa      	ldrb	r2, [r7, #23]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	9301      	str	r3, [sp, #4]
 8015a86:	2301      	movs	r3, #1
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	f7ff f9da 	bl	8014e44 <PayloadEncrypt>
 8015a90:	4603      	mov	r3, r0
 8015a92:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a94:	7d7b      	ldrb	r3, [r7, #21]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d001      	beq.n	8015a9e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8015a9a:	7d7b      	ldrb	r3, [r7, #21]
 8015a9c:	e005      	b.n	8015aaa <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8015a9e:	7bbb      	ldrb	r3, [r7, #14]
 8015aa0:	6879      	ldr	r1, [r7, #4]
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f7ff fc84 	bl	80153b0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015aa8:	2300      	movs	r3, #0
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	371c      	adds	r7, #28
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd90      	pop	{r4, r7, pc}
 8015ab2:	bf00      	nop
 8015ab4:	20002038 	.word	0x20002038

08015ab8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b086      	sub	sp, #24
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	4603      	mov	r3, r0
 8015ac0:	460a      	mov	r2, r1
 8015ac2:	71fb      	strb	r3, [r7, #7]
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8015ac8:	79bb      	ldrb	r3, [r7, #6]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d001      	beq.n	8015ad2 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015ace:	230a      	movs	r3, #10
 8015ad0:	e019      	b.n	8015b06 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	60bb      	str	r3, [r7, #8]
 8015ad6:	f107 030c 	add.w	r3, r7, #12
 8015ada:	2200      	movs	r2, #0
 8015adc:	601a      	str	r2, [r3, #0]
 8015ade:	605a      	str	r2, [r3, #4]
 8015ae0:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8015ae2:	79fb      	ldrb	r3, [r7, #7]
 8015ae4:	2b01      	cmp	r3, #1
 8015ae6:	d101      	bne.n	8015aec <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8015ae8:	2320      	movs	r3, #32
 8015aea:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015aec:	79b9      	ldrb	r1, [r7, #6]
 8015aee:	f107 0308 	add.w	r3, r7, #8
 8015af2:	2204      	movs	r2, #4
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f7 ff6b 	bl	800d9d0 <SecureElementDeriveAndStoreKey>
 8015afa:	4603      	mov	r3, r0
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d001      	beq.n	8015b04 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b00:	230e      	movs	r3, #14
 8015b02:	e000      	b.n	8015b06 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015b04:	2300      	movs	r3, #0
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3718      	adds	r7, #24
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b086      	sub	sp, #24
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	4603      	mov	r3, r0
 8015b16:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015b18:	79fb      	ldrb	r3, [r7, #7]
 8015b1a:	2b04      	cmp	r3, #4
 8015b1c:	d001      	beq.n	8015b22 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015b1e:	230a      	movs	r3, #10
 8015b20:	e014      	b.n	8015b4c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8015b22:	2300      	movs	r3, #0
 8015b24:	60bb      	str	r3, [r7, #8]
 8015b26:	f107 030c 	add.w	r3, r7, #12
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	601a      	str	r2, [r3, #0]
 8015b2e:	605a      	str	r2, [r3, #4]
 8015b30:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015b32:	79f9      	ldrb	r1, [r7, #7]
 8015b34:	f107 0308 	add.w	r3, r7, #8
 8015b38:	227f      	movs	r2, #127	; 0x7f
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7f7 ff48 	bl	800d9d0 <SecureElementDeriveAndStoreKey>
 8015b40:	4603      	mov	r3, r0
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d001      	beq.n	8015b4a <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b46:	230e      	movs	r3, #14
 8015b48:	e000      	b.n	8015b4c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015b4a:	2300      	movs	r3, #0
}
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3718      	adds	r7, #24
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d003      	beq.n	8015b6a <LoRaMacParserJoinAccept+0x16>
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d101      	bne.n	8015b6e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015b6a:	2302      	movs	r3, #2
 8015b6c:	e0b9      	b.n	8015ce2 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	89fb      	ldrh	r3, [r7, #14]
 8015b78:	1c59      	adds	r1, r3, #1
 8015b7a:	81f9      	strh	r1, [r7, #14]
 8015b7c:	4413      	add	r3, r2
 8015b7e:	781a      	ldrb	r2, [r3, #0]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	1d98      	adds	r0, r3, #6
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681a      	ldr	r2, [r3, #0]
 8015b8c:	89fb      	ldrh	r3, [r7, #14]
 8015b8e:	4413      	add	r3, r2
 8015b90:	2203      	movs	r2, #3
 8015b92:	4619      	mov	r1, r3
 8015b94:	f002 fdd3 	bl	801873e <memcpy1>
    bufItr = bufItr + 3;
 8015b98:	89fb      	ldrh	r3, [r7, #14]
 8015b9a:	3303      	adds	r3, #3
 8015b9c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f103 0009 	add.w	r0, r3, #9
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681a      	ldr	r2, [r3, #0]
 8015ba8:	89fb      	ldrh	r3, [r7, #14]
 8015baa:	4413      	add	r3, r2
 8015bac:	2203      	movs	r2, #3
 8015bae:	4619      	mov	r1, r3
 8015bb0:	f002 fdc5 	bl	801873e <memcpy1>
    bufItr = bufItr + 3;
 8015bb4:	89fb      	ldrh	r3, [r7, #14]
 8015bb6:	3303      	adds	r3, #3
 8015bb8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	89fb      	ldrh	r3, [r7, #14]
 8015bc0:	1c59      	adds	r1, r3, #1
 8015bc2:	81f9      	strh	r1, [r7, #14]
 8015bc4:	4413      	add	r3, r2
 8015bc6:	781b      	ldrb	r3, [r3, #0]
 8015bc8:	461a      	mov	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	89fb      	ldrh	r3, [r7, #14]
 8015bd4:	1c59      	adds	r1, r3, #1
 8015bd6:	81f9      	strh	r1, [r7, #14]
 8015bd8:	4413      	add	r3, r2
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	021a      	lsls	r2, r3, #8
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	68db      	ldr	r3, [r3, #12]
 8015be2:	431a      	orrs	r2, r3
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	89fb      	ldrh	r3, [r7, #14]
 8015bee:	1c59      	adds	r1, r3, #1
 8015bf0:	81f9      	strh	r1, [r7, #14]
 8015bf2:	4413      	add	r3, r2
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	041a      	lsls	r2, r3, #16
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	431a      	orrs	r2, r3
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681a      	ldr	r2, [r3, #0]
 8015c06:	89fb      	ldrh	r3, [r7, #14]
 8015c08:	1c59      	adds	r1, r3, #1
 8015c0a:	81f9      	strh	r1, [r7, #14]
 8015c0c:	4413      	add	r3, r2
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	061a      	lsls	r2, r3, #24
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	68db      	ldr	r3, [r3, #12]
 8015c16:	431a      	orrs	r2, r3
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681a      	ldr	r2, [r3, #0]
 8015c20:	89fb      	ldrh	r3, [r7, #14]
 8015c22:	1c59      	adds	r1, r3, #1
 8015c24:	81f9      	strh	r1, [r7, #14]
 8015c26:	4413      	add	r3, r2
 8015c28:	781a      	ldrb	r2, [r3, #0]
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	89fb      	ldrh	r3, [r7, #14]
 8015c34:	1c59      	adds	r1, r3, #1
 8015c36:	81f9      	strh	r1, [r7, #14]
 8015c38:	4413      	add	r3, r2
 8015c3a:	781a      	ldrb	r2, [r3, #0]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	791b      	ldrb	r3, [r3, #4]
 8015c44:	1f1a      	subs	r2, r3, #4
 8015c46:	89fb      	ldrh	r3, [r7, #14]
 8015c48:	1ad3      	subs	r3, r2, r3
 8015c4a:	2b10      	cmp	r3, #16
 8015c4c:	d10e      	bne.n	8015c6c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f103 0012 	add.w	r0, r3, #18
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	89fb      	ldrh	r3, [r7, #14]
 8015c5a:	4413      	add	r3, r2
 8015c5c:	2210      	movs	r2, #16
 8015c5e:	4619      	mov	r1, r3
 8015c60:	f002 fd6d 	bl	801873e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015c64:	89fb      	ldrh	r3, [r7, #14]
 8015c66:	3310      	adds	r3, #16
 8015c68:	81fb      	strh	r3, [r7, #14]
 8015c6a:	e008      	b.n	8015c7e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	791b      	ldrb	r3, [r3, #4]
 8015c70:	1f1a      	subs	r2, r3, #4
 8015c72:	89fb      	ldrh	r3, [r7, #14]
 8015c74:	1ad3      	subs	r3, r2, r3
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	dd01      	ble.n	8015c7e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	e031      	b.n	8015ce2 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681a      	ldr	r2, [r3, #0]
 8015c82:	89fb      	ldrh	r3, [r7, #14]
 8015c84:	1c59      	adds	r1, r3, #1
 8015c86:	81f9      	strh	r1, [r7, #14]
 8015c88:	4413      	add	r3, r2
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	461a      	mov	r2, r3
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681a      	ldr	r2, [r3, #0]
 8015c96:	89fb      	ldrh	r3, [r7, #14]
 8015c98:	1c59      	adds	r1, r3, #1
 8015c9a:	81f9      	strh	r1, [r7, #14]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	781b      	ldrb	r3, [r3, #0]
 8015ca0:	021a      	lsls	r2, r3, #8
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ca6:	431a      	orrs	r2, r3
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681a      	ldr	r2, [r3, #0]
 8015cb0:	89fb      	ldrh	r3, [r7, #14]
 8015cb2:	1c59      	adds	r1, r3, #1
 8015cb4:	81f9      	strh	r1, [r7, #14]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	041a      	lsls	r2, r3, #16
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc0:	431a      	orrs	r2, r3
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681a      	ldr	r2, [r3, #0]
 8015cca:	89fb      	ldrh	r3, [r7, #14]
 8015ccc:	1c59      	adds	r1, r3, #1
 8015cce:	81f9      	strh	r1, [r7, #14]
 8015cd0:	4413      	add	r3, r2
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	061a      	lsls	r2, r3, #24
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cda:	431a      	orrs	r2, r3
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015ce0:	2300      	movs	r3, #0
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3710      	adds	r7, #16
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}

08015cea <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015cea:	b580      	push	{r7, lr}
 8015cec:	b084      	sub	sp, #16
 8015cee:	af00      	add	r7, sp, #0
 8015cf0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d003      	beq.n	8015d00 <LoRaMacParserData+0x16>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d101      	bne.n	8015d04 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015d00:	2302      	movs	r3, #2
 8015d02:	e0e2      	b.n	8015eca <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8015d04:	2300      	movs	r3, #0
 8015d06:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	89fb      	ldrh	r3, [r7, #14]
 8015d0e:	1c59      	adds	r1, r3, #1
 8015d10:	81f9      	strh	r1, [r7, #14]
 8015d12:	4413      	add	r3, r2
 8015d14:	781a      	ldrb	r2, [r3, #0]
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681a      	ldr	r2, [r3, #0]
 8015d1e:	89fb      	ldrh	r3, [r7, #14]
 8015d20:	1c59      	adds	r1, r3, #1
 8015d22:	81f9      	strh	r1, [r7, #14]
 8015d24:	4413      	add	r3, r2
 8015d26:	781b      	ldrb	r3, [r3, #0]
 8015d28:	461a      	mov	r2, r3
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681a      	ldr	r2, [r3, #0]
 8015d32:	89fb      	ldrh	r3, [r7, #14]
 8015d34:	1c59      	adds	r1, r3, #1
 8015d36:	81f9      	strh	r1, [r7, #14]
 8015d38:	4413      	add	r3, r2
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	021a      	lsls	r2, r3, #8
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	689b      	ldr	r3, [r3, #8]
 8015d42:	431a      	orrs	r2, r3
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	681a      	ldr	r2, [r3, #0]
 8015d4c:	89fb      	ldrh	r3, [r7, #14]
 8015d4e:	1c59      	adds	r1, r3, #1
 8015d50:	81f9      	strh	r1, [r7, #14]
 8015d52:	4413      	add	r3, r2
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	041a      	lsls	r2, r3, #16
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	689b      	ldr	r3, [r3, #8]
 8015d5c:	431a      	orrs	r2, r3
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681a      	ldr	r2, [r3, #0]
 8015d66:	89fb      	ldrh	r3, [r7, #14]
 8015d68:	1c59      	adds	r1, r3, #1
 8015d6a:	81f9      	strh	r1, [r7, #14]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	061a      	lsls	r2, r3, #24
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	689b      	ldr	r3, [r3, #8]
 8015d76:	431a      	orrs	r2, r3
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681a      	ldr	r2, [r3, #0]
 8015d80:	89fb      	ldrh	r3, [r7, #14]
 8015d82:	1c59      	adds	r1, r3, #1
 8015d84:	81f9      	strh	r1, [r7, #14]
 8015d86:	4413      	add	r3, r2
 8015d88:	781a      	ldrb	r2, [r3, #0]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681a      	ldr	r2, [r3, #0]
 8015d92:	89fb      	ldrh	r3, [r7, #14]
 8015d94:	1c59      	adds	r1, r3, #1
 8015d96:	81f9      	strh	r1, [r7, #14]
 8015d98:	4413      	add	r3, r2
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681a      	ldr	r2, [r3, #0]
 8015da6:	89fb      	ldrh	r3, [r7, #14]
 8015da8:	1c59      	adds	r1, r3, #1
 8015daa:	81f9      	strh	r1, [r7, #14]
 8015dac:	4413      	add	r3, r2
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	0219      	lsls	r1, r3, #8
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	89db      	ldrh	r3, [r3, #14]
 8015db6:	b21a      	sxth	r2, r3
 8015db8:	b20b      	sxth	r3, r1
 8015dba:	4313      	orrs	r3, r2
 8015dbc:	b21b      	sxth	r3, r3
 8015dbe:	b29a      	uxth	r2, r3
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f103 0010 	add.w	r0, r3, #16
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681a      	ldr	r2, [r3, #0]
 8015dce:	89fb      	ldrh	r3, [r7, #14]
 8015dd0:	18d1      	adds	r1, r2, r3
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	7b1b      	ldrb	r3, [r3, #12]
 8015dd6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015dda:	b2db      	uxtb	r3, r3
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	461a      	mov	r2, r3
 8015de0:	f002 fcad 	bl	801873e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	7b1b      	ldrb	r3, [r3, #12]
 8015de8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015dec:	b2db      	uxtb	r3, r3
 8015dee:	b29a      	uxth	r2, r3
 8015df0:	89fb      	ldrh	r3, [r7, #14]
 8015df2:	4413      	add	r3, r2
 8015df4:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2200      	movs	r2, #0
 8015dfa:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2200      	movs	r2, #0
 8015e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	791b      	ldrb	r3, [r3, #4]
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	89fb      	ldrh	r3, [r7, #14]
 8015e0e:	1ad3      	subs	r3, r2, r3
 8015e10:	2b04      	cmp	r3, #4
 8015e12:	dd28      	ble.n	8015e66 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681a      	ldr	r2, [r3, #0]
 8015e18:	89fb      	ldrh	r3, [r7, #14]
 8015e1a:	1c59      	adds	r1, r3, #1
 8015e1c:	81f9      	strh	r1, [r7, #14]
 8015e1e:	4413      	add	r3, r2
 8015e20:	781a      	ldrb	r2, [r3, #0]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	791a      	ldrb	r2, [r3, #4]
 8015e2c:	89fb      	ldrh	r3, [r7, #14]
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	1ad3      	subs	r3, r2, r3
 8015e32:	b2db      	uxtb	r3, r3
 8015e34:	3b04      	subs	r3, #4
 8015e36:	b2da      	uxtb	r2, r3
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681a      	ldr	r2, [r3, #0]
 8015e46:	89fb      	ldrh	r3, [r7, #14]
 8015e48:	18d1      	adds	r1, r2, r3
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	461a      	mov	r2, r3
 8015e54:	f002 fc73 	bl	801873e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e5e:	b29a      	uxth	r2, r3
 8015e60:	89fb      	ldrh	r3, [r7, #14]
 8015e62:	4413      	add	r3, r2
 8015e64:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	791b      	ldrb	r3, [r3, #4]
 8015e6e:	3b04      	subs	r3, #4
 8015e70:	4413      	add	r3, r2
 8015e72:	781b      	ldrb	r3, [r3, #0]
 8015e74:	461a      	mov	r2, r3
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	6819      	ldr	r1, [r3, #0]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	791b      	ldrb	r3, [r3, #4]
 8015e86:	3b03      	subs	r3, #3
 8015e88:	440b      	add	r3, r1
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	021b      	lsls	r3, r3, #8
 8015e8e:	431a      	orrs	r2, r3
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	6819      	ldr	r1, [r3, #0]
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	791b      	ldrb	r3, [r3, #4]
 8015ea0:	3b02      	subs	r3, #2
 8015ea2:	440b      	add	r3, r1
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	041b      	lsls	r3, r3, #16
 8015ea8:	431a      	orrs	r2, r3
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6819      	ldr	r1, [r3, #0]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	791b      	ldrb	r3, [r3, #4]
 8015eba:	3b01      	subs	r3, #1
 8015ebc:	440b      	add	r3, r1
 8015ebe:	781b      	ldrb	r3, [r3, #0]
 8015ec0:	061b      	lsls	r3, r3, #24
 8015ec2:	431a      	orrs	r2, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015ec8:	2300      	movs	r3, #0
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3710      	adds	r7, #16
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}

08015ed2 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015ed2:	b580      	push	{r7, lr}
 8015ed4:	b084      	sub	sp, #16
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d003      	beq.n	8015ee8 <LoRaMacSerializerJoinRequest+0x16>
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d101      	bne.n	8015eec <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015ee8:	2301      	movs	r3, #1
 8015eea:	e070      	b.n	8015fce <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015eec:	2300      	movs	r3, #0
 8015eee:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	791b      	ldrb	r3, [r3, #4]
 8015ef4:	2b16      	cmp	r3, #22
 8015ef6:	d801      	bhi.n	8015efc <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015ef8:	2302      	movs	r3, #2
 8015efa:	e068      	b.n	8015fce <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681a      	ldr	r2, [r3, #0]
 8015f00:	89fb      	ldrh	r3, [r7, #14]
 8015f02:	1c59      	adds	r1, r3, #1
 8015f04:	81f9      	strh	r1, [r7, #14]
 8015f06:	4413      	add	r3, r2
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	7952      	ldrb	r2, [r2, #5]
 8015f0c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	89fb      	ldrh	r3, [r7, #14]
 8015f14:	18d0      	adds	r0, r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	3306      	adds	r3, #6
 8015f1a:	2208      	movs	r2, #8
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	f002 fc29 	bl	8018774 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015f22:	89fb      	ldrh	r3, [r7, #14]
 8015f24:	3308      	adds	r3, #8
 8015f26:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	89fb      	ldrh	r3, [r7, #14]
 8015f2e:	18d0      	adds	r0, r2, r3
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	330e      	adds	r3, #14
 8015f34:	2208      	movs	r2, #8
 8015f36:	4619      	mov	r1, r3
 8015f38:	f002 fc1c 	bl	8018774 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015f3c:	89fb      	ldrh	r3, [r7, #14]
 8015f3e:	3308      	adds	r3, #8
 8015f40:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	8ad9      	ldrh	r1, [r3, #22]
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	89fb      	ldrh	r3, [r7, #14]
 8015f4c:	1c58      	adds	r0, r3, #1
 8015f4e:	81f8      	strh	r0, [r7, #14]
 8015f50:	4413      	add	r3, r2
 8015f52:	b2ca      	uxtb	r2, r1
 8015f54:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	8adb      	ldrh	r3, [r3, #22]
 8015f5a:	0a1b      	lsrs	r3, r3, #8
 8015f5c:	b299      	uxth	r1, r3
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	89fb      	ldrh	r3, [r7, #14]
 8015f64:	1c58      	adds	r0, r3, #1
 8015f66:	81f8      	strh	r0, [r7, #14]
 8015f68:	4413      	add	r3, r2
 8015f6a:	b2ca      	uxtb	r2, r1
 8015f6c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6999      	ldr	r1, [r3, #24]
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681a      	ldr	r2, [r3, #0]
 8015f76:	89fb      	ldrh	r3, [r7, #14]
 8015f78:	1c58      	adds	r0, r3, #1
 8015f7a:	81f8      	strh	r0, [r7, #14]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	b2ca      	uxtb	r2, r1
 8015f80:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	699b      	ldr	r3, [r3, #24]
 8015f86:	0a19      	lsrs	r1, r3, #8
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681a      	ldr	r2, [r3, #0]
 8015f8c:	89fb      	ldrh	r3, [r7, #14]
 8015f8e:	1c58      	adds	r0, r3, #1
 8015f90:	81f8      	strh	r0, [r7, #14]
 8015f92:	4413      	add	r3, r2
 8015f94:	b2ca      	uxtb	r2, r1
 8015f96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	699b      	ldr	r3, [r3, #24]
 8015f9c:	0c19      	lsrs	r1, r3, #16
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681a      	ldr	r2, [r3, #0]
 8015fa2:	89fb      	ldrh	r3, [r7, #14]
 8015fa4:	1c58      	adds	r0, r3, #1
 8015fa6:	81f8      	strh	r0, [r7, #14]
 8015fa8:	4413      	add	r3, r2
 8015faa:	b2ca      	uxtb	r2, r1
 8015fac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	699b      	ldr	r3, [r3, #24]
 8015fb2:	0e19      	lsrs	r1, r3, #24
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	681a      	ldr	r2, [r3, #0]
 8015fb8:	89fb      	ldrh	r3, [r7, #14]
 8015fba:	1c58      	adds	r0, r3, #1
 8015fbc:	81f8      	strh	r0, [r7, #14]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	b2ca      	uxtb	r2, r1
 8015fc2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015fc4:	89fb      	ldrh	r3, [r7, #14]
 8015fc6:	b2da      	uxtb	r2, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015fcc:	2300      	movs	r3, #0
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}

08015fd6 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015fd6:	b580      	push	{r7, lr}
 8015fd8:	b084      	sub	sp, #16
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d003      	beq.n	8015fec <LoRaMacSerializerData+0x16>
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d101      	bne.n	8015ff0 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015fec:	2301      	movs	r3, #1
 8015fee:	e0e5      	b.n	80161bc <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015ff4:	2308      	movs	r3, #8
 8015ff6:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	7b1b      	ldrb	r3, [r3, #12]
 8015ffc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016000:	b2db      	uxtb	r3, r3
 8016002:	b29a      	uxth	r2, r3
 8016004:	89bb      	ldrh	r3, [r7, #12]
 8016006:	4413      	add	r3, r2
 8016008:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016010:	2b00      	cmp	r3, #0
 8016012:	d002      	beq.n	801601a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016014:	89bb      	ldrh	r3, [r7, #12]
 8016016:	3301      	adds	r3, #1
 8016018:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016020:	b29a      	uxth	r2, r3
 8016022:	89bb      	ldrh	r3, [r7, #12]
 8016024:	4413      	add	r3, r2
 8016026:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016028:	89bb      	ldrh	r3, [r7, #12]
 801602a:	3304      	adds	r3, #4
 801602c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	791b      	ldrb	r3, [r3, #4]
 8016032:	b29b      	uxth	r3, r3
 8016034:	89ba      	ldrh	r2, [r7, #12]
 8016036:	429a      	cmp	r2, r3
 8016038:	d901      	bls.n	801603e <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801603a:	2302      	movs	r3, #2
 801603c:	e0be      	b.n	80161bc <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	681a      	ldr	r2, [r3, #0]
 8016042:	89fb      	ldrh	r3, [r7, #14]
 8016044:	1c59      	adds	r1, r3, #1
 8016046:	81f9      	strh	r1, [r7, #14]
 8016048:	4413      	add	r3, r2
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	7952      	ldrb	r2, [r2, #5]
 801604e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	6899      	ldr	r1, [r3, #8]
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681a      	ldr	r2, [r3, #0]
 8016058:	89fb      	ldrh	r3, [r7, #14]
 801605a:	1c58      	adds	r0, r3, #1
 801605c:	81f8      	strh	r0, [r7, #14]
 801605e:	4413      	add	r3, r2
 8016060:	b2ca      	uxtb	r2, r1
 8016062:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	689b      	ldr	r3, [r3, #8]
 8016068:	0a19      	lsrs	r1, r3, #8
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	681a      	ldr	r2, [r3, #0]
 801606e:	89fb      	ldrh	r3, [r7, #14]
 8016070:	1c58      	adds	r0, r3, #1
 8016072:	81f8      	strh	r0, [r7, #14]
 8016074:	4413      	add	r3, r2
 8016076:	b2ca      	uxtb	r2, r1
 8016078:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	689b      	ldr	r3, [r3, #8]
 801607e:	0c19      	lsrs	r1, r3, #16
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681a      	ldr	r2, [r3, #0]
 8016084:	89fb      	ldrh	r3, [r7, #14]
 8016086:	1c58      	adds	r0, r3, #1
 8016088:	81f8      	strh	r0, [r7, #14]
 801608a:	4413      	add	r3, r2
 801608c:	b2ca      	uxtb	r2, r1
 801608e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	689b      	ldr	r3, [r3, #8]
 8016094:	0e19      	lsrs	r1, r3, #24
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	89fb      	ldrh	r3, [r7, #14]
 801609c:	1c58      	adds	r0, r3, #1
 801609e:	81f8      	strh	r0, [r7, #14]
 80160a0:	4413      	add	r3, r2
 80160a2:	b2ca      	uxtb	r2, r1
 80160a4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681a      	ldr	r2, [r3, #0]
 80160aa:	89fb      	ldrh	r3, [r7, #14]
 80160ac:	1c59      	adds	r1, r3, #1
 80160ae:	81f9      	strh	r1, [r7, #14]
 80160b0:	4413      	add	r3, r2
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	7b12      	ldrb	r2, [r2, #12]
 80160b6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	89d9      	ldrh	r1, [r3, #14]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	89fb      	ldrh	r3, [r7, #14]
 80160c2:	1c58      	adds	r0, r3, #1
 80160c4:	81f8      	strh	r0, [r7, #14]
 80160c6:	4413      	add	r3, r2
 80160c8:	b2ca      	uxtb	r2, r1
 80160ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	89db      	ldrh	r3, [r3, #14]
 80160d0:	0a1b      	lsrs	r3, r3, #8
 80160d2:	b299      	uxth	r1, r3
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681a      	ldr	r2, [r3, #0]
 80160d8:	89fb      	ldrh	r3, [r7, #14]
 80160da:	1c58      	adds	r0, r3, #1
 80160dc:	81f8      	strh	r0, [r7, #14]
 80160de:	4413      	add	r3, r2
 80160e0:	b2ca      	uxtb	r2, r1
 80160e2:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	89fb      	ldrh	r3, [r7, #14]
 80160ea:	18d0      	adds	r0, r2, r3
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f103 0110 	add.w	r1, r3, #16
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	7b1b      	ldrb	r3, [r3, #12]
 80160f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	461a      	mov	r2, r3
 8016100:	f002 fb1d 	bl	801873e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	7b1b      	ldrb	r3, [r3, #12]
 8016108:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801610c:	b2db      	uxtb	r3, r3
 801610e:	b29a      	uxth	r2, r3
 8016110:	89fb      	ldrh	r3, [r7, #14]
 8016112:	4413      	add	r3, r2
 8016114:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801611c:	2b00      	cmp	r3, #0
 801611e:	d009      	beq.n	8016134 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681a      	ldr	r2, [r3, #0]
 8016124:	89fb      	ldrh	r3, [r7, #14]
 8016126:	1c59      	adds	r1, r3, #1
 8016128:	81f9      	strh	r1, [r7, #14]
 801612a:	4413      	add	r3, r2
 801612c:	687a      	ldr	r2, [r7, #4]
 801612e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016132:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	89fb      	ldrh	r3, [r7, #14]
 801613a:	18d0      	adds	r0, r2, r3
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016146:	b29b      	uxth	r3, r3
 8016148:	461a      	mov	r2, r3
 801614a:	f002 faf8 	bl	801873e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016154:	b29a      	uxth	r2, r3
 8016156:	89fb      	ldrh	r3, [r7, #14]
 8016158:	4413      	add	r3, r2
 801615a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	89fb      	ldrh	r3, [r7, #14]
 8016166:	1c58      	adds	r0, r3, #1
 8016168:	81f8      	strh	r0, [r7, #14]
 801616a:	4413      	add	r3, r2
 801616c:	b2ca      	uxtb	r2, r1
 801616e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016174:	0a19      	lsrs	r1, r3, #8
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681a      	ldr	r2, [r3, #0]
 801617a:	89fb      	ldrh	r3, [r7, #14]
 801617c:	1c58      	adds	r0, r3, #1
 801617e:	81f8      	strh	r0, [r7, #14]
 8016180:	4413      	add	r3, r2
 8016182:	b2ca      	uxtb	r2, r1
 8016184:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801618a:	0c19      	lsrs	r1, r3, #16
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681a      	ldr	r2, [r3, #0]
 8016190:	89fb      	ldrh	r3, [r7, #14]
 8016192:	1c58      	adds	r0, r3, #1
 8016194:	81f8      	strh	r0, [r7, #14]
 8016196:	4413      	add	r3, r2
 8016198:	b2ca      	uxtb	r2, r1
 801619a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161a0:	0e19      	lsrs	r1, r3, #24
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681a      	ldr	r2, [r3, #0]
 80161a6:	89fb      	ldrh	r3, [r7, #14]
 80161a8:	1c58      	adds	r0, r3, #1
 80161aa:	81f8      	strh	r0, [r7, #14]
 80161ac:	4413      	add	r3, r2
 80161ae:	b2ca      	uxtb	r2, r1
 80161b0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80161b2:	89fb      	ldrh	r3, [r7, #14]
 80161b4:	b2da      	uxtb	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80161ba:	2300      	movs	r3, #0
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3710      	adds	r7, #16
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80161c4:	b480      	push	{r7}
 80161c6:	b083      	sub	sp, #12
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	4603      	mov	r3, r0
 80161cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80161ce:	79fb      	ldrb	r3, [r7, #7]
 80161d0:	2b05      	cmp	r3, #5
 80161d2:	d101      	bne.n	80161d8 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80161d4:	2301      	movs	r3, #1
 80161d6:	e000      	b.n	80161da <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80161d8:	2300      	movs	r3, #0
        }
    }
}
 80161da:	4618      	mov	r0, r3
 80161dc:	370c      	adds	r7, #12
 80161de:	46bd      	mov	sp, r7
 80161e0:	bc80      	pop	{r7}
 80161e2:	4770      	bx	lr

080161e4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	4603      	mov	r3, r0
 80161ec:	6039      	str	r1, [r7, #0]
 80161ee:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80161f0:	2300      	movs	r3, #0
 80161f2:	60bb      	str	r3, [r7, #8]
    switch( region )
 80161f4:	79fb      	ldrb	r3, [r7, #7]
 80161f6:	2b05      	cmp	r3, #5
 80161f8:	d105      	bne.n	8016206 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80161fa:	6838      	ldr	r0, [r7, #0]
 80161fc:	f001 f982 	bl	8017504 <RegionEU868GetPhyParam>
 8016200:	4603      	mov	r3, r0
 8016202:	60fb      	str	r3, [r7, #12]
 8016204:	e001      	b.n	801620a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	4618      	mov	r0, r3
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b082      	sub	sp, #8
 8016218:	af00      	add	r7, sp, #0
 801621a:	4603      	mov	r3, r0
 801621c:	6039      	str	r1, [r7, #0]
 801621e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016220:	79fb      	ldrb	r3, [r7, #7]
 8016222:	2b05      	cmp	r3, #5
 8016224:	d103      	bne.n	801622e <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016226:	6838      	ldr	r0, [r7, #0]
 8016228:	f001 fab2 	bl	8017790 <RegionEU868SetBandTxDone>
 801622c:	e000      	b.n	8016230 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801622e:	bf00      	nop
        }
    }
}
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}

08016236 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016236:	b580      	push	{r7, lr}
 8016238:	b082      	sub	sp, #8
 801623a:	af00      	add	r7, sp, #0
 801623c:	4603      	mov	r3, r0
 801623e:	6039      	str	r1, [r7, #0]
 8016240:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016242:	79fb      	ldrb	r3, [r7, #7]
 8016244:	2b05      	cmp	r3, #5
 8016246:	d103      	bne.n	8016250 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016248:	6838      	ldr	r0, [r7, #0]
 801624a:	f001 facd 	bl	80177e8 <RegionEU868InitDefaults>
 801624e:	e000      	b.n	8016252 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016250:	bf00      	nop
        }
    }
}
 8016252:	bf00      	nop
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801625a:	b580      	push	{r7, lr}
 801625c:	b082      	sub	sp, #8
 801625e:	af00      	add	r7, sp, #0
 8016260:	4603      	mov	r3, r0
 8016262:	6039      	str	r1, [r7, #0]
 8016264:	71fb      	strb	r3, [r7, #7]
 8016266:	4613      	mov	r3, r2
 8016268:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801626a:	79fb      	ldrb	r3, [r7, #7]
 801626c:	2b05      	cmp	r3, #5
 801626e:	d106      	bne.n	801627e <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016270:	79bb      	ldrb	r3, [r7, #6]
 8016272:	4619      	mov	r1, r3
 8016274:	6838      	ldr	r0, [r7, #0]
 8016276:	f001 fb55 	bl	8017924 <RegionEU868Verify>
 801627a:	4603      	mov	r3, r0
 801627c:	e000      	b.n	8016280 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801627e:	2300      	movs	r3, #0
        }
    }
}
 8016280:	4618      	mov	r0, r3
 8016282:	3708      	adds	r7, #8
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}

08016288 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	4603      	mov	r3, r0
 8016290:	6039      	str	r1, [r7, #0]
 8016292:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016294:	79fb      	ldrb	r3, [r7, #7]
 8016296:	2b05      	cmp	r3, #5
 8016298:	d103      	bne.n	80162a2 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801629a:	6838      	ldr	r0, [r7, #0]
 801629c:	f001 fbbe 	bl	8017a1c <RegionEU868ApplyCFList>
 80162a0:	e000      	b.n	80162a4 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80162a2:	bf00      	nop
        }
    }
}
 80162a4:	bf00      	nop
 80162a6:	3708      	adds	r7, #8
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	4603      	mov	r3, r0
 80162b4:	6039      	str	r1, [r7, #0]
 80162b6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80162b8:	79fb      	ldrb	r3, [r7, #7]
 80162ba:	2b05      	cmp	r3, #5
 80162bc:	d104      	bne.n	80162c8 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80162be:	6838      	ldr	r0, [r7, #0]
 80162c0:	f001 fc20 	bl	8017b04 <RegionEU868ChanMaskSet>
 80162c4:	4603      	mov	r3, r0
 80162c6:	e000      	b.n	80162ca <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80162c8:	2300      	movs	r3, #0
        }
    }
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}

080162d2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80162d2:	b580      	push	{r7, lr}
 80162d4:	b082      	sub	sp, #8
 80162d6:	af00      	add	r7, sp, #0
 80162d8:	603b      	str	r3, [r7, #0]
 80162da:	4603      	mov	r3, r0
 80162dc:	71fb      	strb	r3, [r7, #7]
 80162de:	460b      	mov	r3, r1
 80162e0:	71bb      	strb	r3, [r7, #6]
 80162e2:	4613      	mov	r3, r2
 80162e4:	717b      	strb	r3, [r7, #5]
    switch( region )
 80162e6:	79fb      	ldrb	r3, [r7, #7]
 80162e8:	2b05      	cmp	r3, #5
 80162ea:	d107      	bne.n	80162fc <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80162ec:	7979      	ldrb	r1, [r7, #5]
 80162ee:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80162f2:	693b      	ldr	r3, [r7, #16]
 80162f4:	683a      	ldr	r2, [r7, #0]
 80162f6:	f001 fc2f 	bl	8017b58 <RegionEU868ComputeRxWindowParameters>
 80162fa:	e000      	b.n	80162fe <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80162fc:	bf00      	nop
        }
    }
}
 80162fe:	bf00      	nop
 8016300:	3708      	adds	r7, #8
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}

08016306 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016306:	b580      	push	{r7, lr}
 8016308:	b084      	sub	sp, #16
 801630a:	af00      	add	r7, sp, #0
 801630c:	4603      	mov	r3, r0
 801630e:	60b9      	str	r1, [r7, #8]
 8016310:	607a      	str	r2, [r7, #4]
 8016312:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016314:	7bfb      	ldrb	r3, [r7, #15]
 8016316:	2b05      	cmp	r3, #5
 8016318:	d105      	bne.n	8016326 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801631a:	6879      	ldr	r1, [r7, #4]
 801631c:	68b8      	ldr	r0, [r7, #8]
 801631e:	f001 fc75 	bl	8017c0c <RegionEU868RxConfig>
 8016322:	4603      	mov	r3, r0
 8016324:	e000      	b.n	8016328 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016326:	2300      	movs	r3, #0
        }
    }
}
 8016328:	4618      	mov	r0, r3
 801632a:	3710      	adds	r7, #16
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b084      	sub	sp, #16
 8016334:	af00      	add	r7, sp, #0
 8016336:	60b9      	str	r1, [r7, #8]
 8016338:	607a      	str	r2, [r7, #4]
 801633a:	603b      	str	r3, [r7, #0]
 801633c:	4603      	mov	r3, r0
 801633e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016340:	7bfb      	ldrb	r3, [r7, #15]
 8016342:	2b05      	cmp	r3, #5
 8016344:	d106      	bne.n	8016354 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016346:	683a      	ldr	r2, [r7, #0]
 8016348:	6879      	ldr	r1, [r7, #4]
 801634a:	68b8      	ldr	r0, [r7, #8]
 801634c:	f001 fd2e 	bl	8017dac <RegionEU868TxConfig>
 8016350:	4603      	mov	r3, r0
 8016352:	e000      	b.n	8016356 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016354:	2300      	movs	r3, #0
        }
    }
}
 8016356:	4618      	mov	r0, r3
 8016358:	3710      	adds	r7, #16
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}

0801635e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801635e:	b580      	push	{r7, lr}
 8016360:	b086      	sub	sp, #24
 8016362:	af02      	add	r7, sp, #8
 8016364:	60b9      	str	r1, [r7, #8]
 8016366:	607a      	str	r2, [r7, #4]
 8016368:	603b      	str	r3, [r7, #0]
 801636a:	4603      	mov	r3, r0
 801636c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801636e:	7bfb      	ldrb	r3, [r7, #15]
 8016370:	2b05      	cmp	r3, #5
 8016372:	d109      	bne.n	8016388 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016374:	69fb      	ldr	r3, [r7, #28]
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	69bb      	ldr	r3, [r7, #24]
 801637a:	683a      	ldr	r2, [r7, #0]
 801637c:	6879      	ldr	r1, [r7, #4]
 801637e:	68b8      	ldr	r0, [r7, #8]
 8016380:	f001 fde4 	bl	8017f4c <RegionEU868LinkAdrReq>
 8016384:	4603      	mov	r3, r0
 8016386:	e000      	b.n	801638a <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016388:	2300      	movs	r3, #0
        }
    }
}
 801638a:	4618      	mov	r0, r3
 801638c:	3710      	adds	r7, #16
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}

08016392 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016392:	b580      	push	{r7, lr}
 8016394:	b082      	sub	sp, #8
 8016396:	af00      	add	r7, sp, #0
 8016398:	4603      	mov	r3, r0
 801639a:	6039      	str	r1, [r7, #0]
 801639c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801639e:	79fb      	ldrb	r3, [r7, #7]
 80163a0:	2b05      	cmp	r3, #5
 80163a2:	d104      	bne.n	80163ae <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80163a4:	6838      	ldr	r0, [r7, #0]
 80163a6:	f001 fef3 	bl	8018190 <RegionEU868RxParamSetupReq>
 80163aa:	4603      	mov	r3, r0
 80163ac:	e000      	b.n	80163b0 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80163ae:	2300      	movs	r3, #0
        }
    }
}
 80163b0:	4618      	mov	r0, r3
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
 80163be:	4603      	mov	r3, r0
 80163c0:	6039      	str	r1, [r7, #0]
 80163c2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80163c4:	79fb      	ldrb	r3, [r7, #7]
 80163c6:	2b05      	cmp	r3, #5
 80163c8:	d104      	bne.n	80163d4 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80163ca:	6838      	ldr	r0, [r7, #0]
 80163cc:	f001 ff1e 	bl	801820c <RegionEU868NewChannelReq>
 80163d0:	4603      	mov	r3, r0
 80163d2:	e000      	b.n	80163d6 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80163d4:	2300      	movs	r3, #0
        }
    }
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3708      	adds	r7, #8
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}

080163de <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80163de:	b580      	push	{r7, lr}
 80163e0:	b082      	sub	sp, #8
 80163e2:	af00      	add	r7, sp, #0
 80163e4:	4603      	mov	r3, r0
 80163e6:	6039      	str	r1, [r7, #0]
 80163e8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80163ea:	79fb      	ldrb	r3, [r7, #7]
 80163ec:	2b05      	cmp	r3, #5
 80163ee:	d104      	bne.n	80163fa <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80163f0:	6838      	ldr	r0, [r7, #0]
 80163f2:	f001 ff69 	bl	80182c8 <RegionEU868TxParamSetupReq>
 80163f6:	4603      	mov	r3, r0
 80163f8:	e000      	b.n	80163fc <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80163fa:	2300      	movs	r3, #0
        }
    }
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	3708      	adds	r7, #8
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}

08016404 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b082      	sub	sp, #8
 8016408:	af00      	add	r7, sp, #0
 801640a:	4603      	mov	r3, r0
 801640c:	6039      	str	r1, [r7, #0]
 801640e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016410:	79fb      	ldrb	r3, [r7, #7]
 8016412:	2b05      	cmp	r3, #5
 8016414:	d104      	bne.n	8016420 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016416:	6838      	ldr	r0, [r7, #0]
 8016418:	f001 ff62 	bl	80182e0 <RegionEU868DlChannelReq>
 801641c:	4603      	mov	r3, r0
 801641e:	e000      	b.n	8016422 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016420:	2300      	movs	r3, #0
        }
    }
}
 8016422:	4618      	mov	r0, r3
 8016424:	3708      	adds	r7, #8
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}

0801642a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b082      	sub	sp, #8
 801642e:	af00      	add	r7, sp, #0
 8016430:	4603      	mov	r3, r0
 8016432:	71fb      	strb	r3, [r7, #7]
 8016434:	460b      	mov	r3, r1
 8016436:	71bb      	strb	r3, [r7, #6]
 8016438:	4613      	mov	r3, r2
 801643a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801643c:	79fb      	ldrb	r3, [r7, #7]
 801643e:	2b05      	cmp	r3, #5
 8016440:	d108      	bne.n	8016454 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016442:	797a      	ldrb	r2, [r7, #5]
 8016444:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016448:	4611      	mov	r1, r2
 801644a:	4618      	mov	r0, r3
 801644c:	f001 ff8c 	bl	8018368 <RegionEU868AlternateDr>
 8016450:	4603      	mov	r3, r0
 8016452:	e000      	b.n	8016456 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016454:	2300      	movs	r3, #0
        }
    }
}
 8016456:	4618      	mov	r0, r3
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}

0801645e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801645e:	b580      	push	{r7, lr}
 8016460:	b084      	sub	sp, #16
 8016462:	af00      	add	r7, sp, #0
 8016464:	60b9      	str	r1, [r7, #8]
 8016466:	607a      	str	r2, [r7, #4]
 8016468:	603b      	str	r3, [r7, #0]
 801646a:	4603      	mov	r3, r0
 801646c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801646e:	7bfb      	ldrb	r3, [r7, #15]
 8016470:	2b05      	cmp	r3, #5
 8016472:	d107      	bne.n	8016484 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016474:	69bb      	ldr	r3, [r7, #24]
 8016476:	683a      	ldr	r2, [r7, #0]
 8016478:	6879      	ldr	r1, [r7, #4]
 801647a:	68b8      	ldr	r0, [r7, #8]
 801647c:	f001 ff84 	bl	8018388 <RegionEU868NextChannel>
 8016480:	4603      	mov	r3, r0
 8016482:	e000      	b.n	8016486 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016484:	2309      	movs	r3, #9
        }
    }
}
 8016486:	4618      	mov	r0, r3
 8016488:	3710      	adds	r7, #16
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}

0801648e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801648e:	b590      	push	{r4, r7, lr}
 8016490:	b083      	sub	sp, #12
 8016492:	af00      	add	r7, sp, #0
 8016494:	4604      	mov	r4, r0
 8016496:	4608      	mov	r0, r1
 8016498:	4611      	mov	r1, r2
 801649a:	461a      	mov	r2, r3
 801649c:	4623      	mov	r3, r4
 801649e:	71fb      	strb	r3, [r7, #7]
 80164a0:	4603      	mov	r3, r0
 80164a2:	71bb      	strb	r3, [r7, #6]
 80164a4:	460b      	mov	r3, r1
 80164a6:	717b      	strb	r3, [r7, #5]
 80164a8:	4613      	mov	r3, r2
 80164aa:	713b      	strb	r3, [r7, #4]
    switch( region )
 80164ac:	79fb      	ldrb	r3, [r7, #7]
 80164ae:	2b05      	cmp	r3, #5
 80164b0:	d109      	bne.n	80164c6 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80164b2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80164b6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80164ba:	79bb      	ldrb	r3, [r7, #6]
 80164bc:	4618      	mov	r0, r3
 80164be:	f002 f8dd 	bl	801867c <RegionEU868ApplyDrOffset>
 80164c2:	4603      	mov	r3, r0
 80164c4:	e000      	b.n	80164c8 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80164c6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80164c8:	4618      	mov	r0, r3
 80164ca:	370c      	adds	r7, #12
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd90      	pop	{r4, r7, pc}

080164d0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80164d0:	b480      	push	{r7}
 80164d2:	b083      	sub	sp, #12
 80164d4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80164d6:	4b04      	ldr	r3, [pc, #16]	; (80164e8 <RegionGetVersion+0x18>)
 80164d8:	607b      	str	r3, [r7, #4]

    return version;
 80164da:	687b      	ldr	r3, [r7, #4]
}
 80164dc:	4618      	mov	r0, r3
 80164de:	370c      	adds	r7, #12
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bc80      	pop	{r7}
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	02010001 	.word	0x02010001

080164ec <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80164ec:	b480      	push	{r7}
 80164ee:	b087      	sub	sp, #28
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	4608      	mov	r0, r1
 80164f6:	4639      	mov	r1, r7
 80164f8:	e881 000c 	stmia.w	r1, {r2, r3}
 80164fc:	4603      	mov	r3, r0
 80164fe:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	881b      	ldrh	r3, [r3, #0]
 8016504:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016506:	7afb      	ldrb	r3, [r7, #11]
 8016508:	f083 0301 	eor.w	r3, r3, #1
 801650c:	b2db      	uxtb	r3, r3
 801650e:	2b00      	cmp	r3, #0
 8016510:	d01b      	beq.n	801654a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016512:	f242 7310 	movw	r3, #10000	; 0x2710
 8016516:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801651e:	d202      	bcs.n	8016526 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016520:	2364      	movs	r3, #100	; 0x64
 8016522:	82bb      	strh	r3, [r7, #20]
 8016524:	e00b      	b.n	801653e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016526:	683b      	ldr	r3, [r7, #0]
 8016528:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801652c:	4293      	cmp	r3, r2
 801652e:	d803      	bhi.n	8016538 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016534:	82bb      	strh	r3, [r7, #20]
 8016536:	e002      	b.n	801653e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016538:	f242 7310 	movw	r3, #10000	; 0x2710
 801653c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801653e:	8aba      	ldrh	r2, [r7, #20]
 8016540:	8afb      	ldrh	r3, [r7, #22]
 8016542:	4293      	cmp	r3, r2
 8016544:	bf38      	it	cc
 8016546:	4613      	movcc	r3, r2
 8016548:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801654a:	8afb      	ldrh	r3, [r7, #22]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d101      	bne.n	8016554 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016550:	2301      	movs	r3, #1
 8016552:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016554:	8afb      	ldrh	r3, [r7, #22]
}
 8016556:	4618      	mov	r0, r3
 8016558:	371c      	adds	r7, #28
 801655a:	46bd      	mov	sp, r7
 801655c:	bc80      	pop	{r7}
 801655e:	4770      	bx	lr

08016560 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b08e      	sub	sp, #56	; 0x38
 8016564:	af02      	add	r7, sp, #8
 8016566:	60f8      	str	r0, [r7, #12]
 8016568:	4608      	mov	r0, r1
 801656a:	4639      	mov	r1, r7
 801656c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016570:	4603      	mov	r3, r0
 8016572:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	881b      	ldrh	r3, [r3, #0]
 8016578:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801657a:	4b4b      	ldr	r3, [pc, #300]	; (80166a8 <SetMaxTimeCredits+0x148>)
 801657c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801657e:	463b      	mov	r3, r7
 8016580:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016584:	f005 fd12 	bl	801bfac <SysTimeToMs>
 8016588:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801658a:	f107 0314 	add.w	r3, r7, #20
 801658e:	2200      	movs	r2, #0
 8016590:	601a      	str	r2, [r3, #0]
 8016592:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016594:	7af9      	ldrb	r1, [r7, #11]
 8016596:	463b      	mov	r3, r7
 8016598:	cb0c      	ldmia	r3, {r2, r3}
 801659a:	68f8      	ldr	r0, [r7, #12]
 801659c:	f7ff ffa6 	bl	80164ec <GetDutyCycle>
 80165a0:	4603      	mov	r3, r0
 80165a2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80165a4:	7afb      	ldrb	r3, [r7, #11]
 80165a6:	f083 0301 	eor.w	r3, r3, #1
 80165aa:	b2db      	uxtb	r3, r3
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d062      	beq.n	8016676 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80165b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80165b2:	2b64      	cmp	r3, #100	; 0x64
 80165b4:	d105      	bne.n	80165c2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80165b6:	4b3c      	ldr	r3, [pc, #240]	; (80166a8 <SetMaxTimeCredits+0x148>)
 80165b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165be:	609a      	str	r2, [r3, #8]
 80165c0:	e00b      	b.n	80165da <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80165c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80165c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80165c8:	d105      	bne.n	80165d6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80165ca:	4b38      	ldr	r3, [pc, #224]	; (80166ac <SetMaxTimeCredits+0x14c>)
 80165cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165d2:	609a      	str	r2, [r3, #8]
 80165d4:	e001      	b.n	80165da <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80165d6:	4b36      	ldr	r3, [pc, #216]	; (80166b0 <SetMaxTimeCredits+0x150>)
 80165d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	689a      	ldr	r2, [r3, #8]
 80165de:	f107 031c 	add.w	r3, r7, #28
 80165e2:	4611      	mov	r1, r2
 80165e4:	4618      	mov	r0, r3
 80165e6:	f005 fd09 	bl	801bffc <SysTimeFromMs>
 80165ea:	f107 0014 	add.w	r0, r7, #20
 80165ee:	6a3b      	ldr	r3, [r7, #32]
 80165f0:	9300      	str	r3, [sp, #0]
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	463a      	mov	r2, r7
 80165f6:	ca06      	ldmia	r2, {r1, r2}
 80165f8:	f005 fc19 	bl	801be2e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80165fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016600:	f083 0301 	eor.w	r3, r3, #1
 8016604:	b2db      	uxtb	r3, r3
 8016606:	2b00      	cmp	r3, #0
 8016608:	d006      	beq.n	8016618 <SetMaxTimeCredits+0xb8>
 801660a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801660e:	f083 0301 	eor.w	r3, r3, #1
 8016612:	b2db      	uxtb	r3, r3
 8016614:	2b00      	cmp	r3, #0
 8016616:	d108      	bne.n	801662a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801661c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801661e:	429a      	cmp	r2, r3
 8016620:	d103      	bne.n	801662a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016622:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016624:	4a23      	ldr	r2, [pc, #140]	; (80166b4 <SetMaxTimeCredits+0x154>)
 8016626:	4293      	cmp	r3, r2
 8016628:	d92f      	bls.n	801668a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801662e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	4a21      	ldr	r2, [pc, #132]	; (80166b8 <SetMaxTimeCredits+0x158>)
 8016634:	4293      	cmp	r3, r2
 8016636:	d928      	bls.n	801668a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801663e:	3b30      	subs	r3, #48	; 0x30
 8016640:	4a1e      	ldr	r2, [pc, #120]	; (80166bc <SetMaxTimeCredits+0x15c>)
 8016642:	fba2 2303 	umull	r2, r3, r2, r3
 8016646:	0c1b      	lsrs	r3, r3, #16
 8016648:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801664a:	697b      	ldr	r3, [r7, #20]
 801664c:	4a1c      	ldr	r2, [pc, #112]	; (80166c0 <SetMaxTimeCredits+0x160>)
 801664e:	fb02 f303 	mul.w	r3, r2, r3
 8016652:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801665a:	3330      	adds	r3, #48	; 0x30
 801665c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801665e:	2300      	movs	r3, #0
 8016660:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016662:	f107 0314 	add.w	r3, r7, #20
 8016666:	e893 0003 	ldmia.w	r3, {r0, r1}
 801666a:	f005 fc9f 	bl	801bfac <SysTimeToMs>
 801666e:	4602      	mov	r2, r0
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	609a      	str	r2, [r3, #8]
 8016674:	e009      	b.n	801668a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016676:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801667a:	f083 0301 	eor.w	r3, r3, #1
 801667e:	b2db      	uxtb	r3, r3
 8016680:	2b00      	cmp	r3, #0
 8016682:	d002      	beq.n	801668a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016688:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d102      	bne.n	8016698 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016696:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801669c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801669e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3730      	adds	r7, #48	; 0x30
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}
 80166a8:	001b7740 	.word	0x001b7740
 80166ac:	0112a880 	.word	0x0112a880
 80166b0:	02932e00 	.word	0x02932e00
 80166b4:	0001517f 	.word	0x0001517f
 80166b8:	0001ec2f 	.word	0x0001ec2f
 80166bc:	c22e4507 	.word	0xc22e4507
 80166c0:	00015180 	.word	0x00015180

080166c4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b086      	sub	sp, #24
 80166c8:	af02      	add	r7, sp, #8
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	4608      	mov	r0, r1
 80166ce:	4611      	mov	r1, r2
 80166d0:	461a      	mov	r2, r3
 80166d2:	4603      	mov	r3, r0
 80166d4:	70fb      	strb	r3, [r7, #3]
 80166d6:	460b      	mov	r3, r1
 80166d8:	70bb      	strb	r3, [r7, #2]
 80166da:	4613      	mov	r3, r2
 80166dc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80166de:	78f9      	ldrb	r1, [r7, #3]
 80166e0:	787b      	ldrb	r3, [r7, #1]
 80166e2:	9301      	str	r3, [sp, #4]
 80166e4:	78bb      	ldrb	r3, [r7, #2]
 80166e6:	9300      	str	r3, [sp, #0]
 80166e8:	f107 0318 	add.w	r3, r7, #24
 80166ec:	cb0c      	ldmia	r3, {r2, r3}
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f7ff ff36 	bl	8016560 <SetMaxTimeCredits>
 80166f4:	4603      	mov	r3, r0
 80166f6:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80166f8:	78fb      	ldrb	r3, [r7, #3]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d00a      	beq.n	8016714 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	4618      	mov	r0, r3
 8016704:	f006 fa92 	bl	801cc2c <UTIL_TIMER_GetElapsedTime>
 8016708:	4602      	mov	r2, r0
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	68db      	ldr	r3, [r3, #12]
 801670e:	441a      	add	r2, r3
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	68da      	ldr	r2, [r3, #12]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	691b      	ldr	r3, [r3, #16]
 801671c:	429a      	cmp	r2, r3
 801671e:	d903      	bls.n	8016728 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	691a      	ldr	r2, [r3, #16]
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6a3a      	ldr	r2, [r7, #32]
 801672c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801672e:	89fb      	ldrh	r3, [r7, #14]
}
 8016730:	4618      	mov	r0, r3
 8016732:	3710      	adds	r7, #16
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016738:	b480      	push	{r7}
 801673a:	b085      	sub	sp, #20
 801673c:	af00      	add	r7, sp, #0
 801673e:	4603      	mov	r3, r0
 8016740:	460a      	mov	r2, r1
 8016742:	80fb      	strh	r3, [r7, #6]
 8016744:	4613      	mov	r3, r2
 8016746:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016748:	2300      	movs	r3, #0
 801674a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801674c:	2300      	movs	r3, #0
 801674e:	73bb      	strb	r3, [r7, #14]
 8016750:	e011      	b.n	8016776 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016752:	88fa      	ldrh	r2, [r7, #6]
 8016754:	7bbb      	ldrb	r3, [r7, #14]
 8016756:	2101      	movs	r1, #1
 8016758:	fa01 f303 	lsl.w	r3, r1, r3
 801675c:	401a      	ands	r2, r3
 801675e:	7bbb      	ldrb	r3, [r7, #14]
 8016760:	2101      	movs	r1, #1
 8016762:	fa01 f303 	lsl.w	r3, r1, r3
 8016766:	429a      	cmp	r2, r3
 8016768:	d102      	bne.n	8016770 <CountChannels+0x38>
        {
            nbActiveBits++;
 801676a:	7bfb      	ldrb	r3, [r7, #15]
 801676c:	3301      	adds	r3, #1
 801676e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016770:	7bbb      	ldrb	r3, [r7, #14]
 8016772:	3301      	adds	r3, #1
 8016774:	73bb      	strb	r3, [r7, #14]
 8016776:	7bba      	ldrb	r2, [r7, #14]
 8016778:	797b      	ldrb	r3, [r7, #5]
 801677a:	429a      	cmp	r2, r3
 801677c:	d3e9      	bcc.n	8016752 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016780:	4618      	mov	r0, r3
 8016782:	3714      	adds	r7, #20
 8016784:	46bd      	mov	sp, r7
 8016786:	bc80      	pop	{r7}
 8016788:	4770      	bx	lr

0801678a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801678a:	b580      	push	{r7, lr}
 801678c:	b084      	sub	sp, #16
 801678e:	af00      	add	r7, sp, #0
 8016790:	6039      	str	r1, [r7, #0]
 8016792:	4611      	mov	r1, r2
 8016794:	461a      	mov	r2, r3
 8016796:	4603      	mov	r3, r0
 8016798:	71fb      	strb	r3, [r7, #7]
 801679a:	460b      	mov	r3, r1
 801679c:	71bb      	strb	r3, [r7, #6]
 801679e:	4613      	mov	r3, r2
 80167a0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80167a2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80167a6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80167aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 f85d 	bl	801686e <RegionCommonValueInRange>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d101      	bne.n	80167be <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80167ba:	2300      	movs	r3, #0
 80167bc:	e053      	b.n	8016866 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80167be:	2300      	movs	r3, #0
 80167c0:	73fb      	strb	r3, [r7, #15]
 80167c2:	2300      	movs	r3, #0
 80167c4:	73bb      	strb	r3, [r7, #14]
 80167c6:	e049      	b.n	801685c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80167c8:	2300      	movs	r3, #0
 80167ca:	737b      	strb	r3, [r7, #13]
 80167cc:	e03d      	b.n	801684a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80167ce:	7bbb      	ldrb	r3, [r7, #14]
 80167d0:	005b      	lsls	r3, r3, #1
 80167d2:	683a      	ldr	r2, [r7, #0]
 80167d4:	4413      	add	r3, r2
 80167d6:	881b      	ldrh	r3, [r3, #0]
 80167d8:	461a      	mov	r2, r3
 80167da:	7b7b      	ldrb	r3, [r7, #13]
 80167dc:	fa42 f303 	asr.w	r3, r2, r3
 80167e0:	f003 0301 	and.w	r3, r3, #1
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d02d      	beq.n	8016844 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80167e8:	7bfa      	ldrb	r2, [r7, #15]
 80167ea:	7b7b      	ldrb	r3, [r7, #13]
 80167ec:	4413      	add	r3, r2
 80167ee:	461a      	mov	r2, r3
 80167f0:	4613      	mov	r3, r2
 80167f2:	005b      	lsls	r3, r3, #1
 80167f4:	4413      	add	r3, r2
 80167f6:	009b      	lsls	r3, r3, #2
 80167f8:	461a      	mov	r2, r3
 80167fa:	69fb      	ldr	r3, [r7, #28]
 80167fc:	4413      	add	r3, r2
 80167fe:	7a1b      	ldrb	r3, [r3, #8]
 8016800:	f343 0303 	sbfx	r3, r3, #0, #4
 8016804:	b25b      	sxtb	r3, r3
 8016806:	f003 030f 	and.w	r3, r3, #15
 801680a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801680c:	7bfa      	ldrb	r2, [r7, #15]
 801680e:	7b7b      	ldrb	r3, [r7, #13]
 8016810:	4413      	add	r3, r2
 8016812:	461a      	mov	r2, r3
 8016814:	4613      	mov	r3, r2
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	4413      	add	r3, r2
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	461a      	mov	r2, r3
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	4413      	add	r3, r2
 8016822:	7a1b      	ldrb	r3, [r3, #8]
 8016824:	f343 1303 	sbfx	r3, r3, #4, #4
 8016828:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801682a:	f003 030f 	and.w	r3, r3, #15
 801682e:	b25a      	sxtb	r2, r3
 8016830:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016834:	4618      	mov	r0, r3
 8016836:	f000 f81a 	bl	801686e <RegionCommonValueInRange>
 801683a:	4603      	mov	r3, r0
 801683c:	2b01      	cmp	r3, #1
 801683e:	d101      	bne.n	8016844 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016840:	2301      	movs	r3, #1
 8016842:	e010      	b.n	8016866 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016844:	7b7b      	ldrb	r3, [r7, #13]
 8016846:	3301      	adds	r3, #1
 8016848:	737b      	strb	r3, [r7, #13]
 801684a:	7b7b      	ldrb	r3, [r7, #13]
 801684c:	2b0f      	cmp	r3, #15
 801684e:	d9be      	bls.n	80167ce <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016850:	7bfb      	ldrb	r3, [r7, #15]
 8016852:	3310      	adds	r3, #16
 8016854:	73fb      	strb	r3, [r7, #15]
 8016856:	7bbb      	ldrb	r3, [r7, #14]
 8016858:	3301      	adds	r3, #1
 801685a:	73bb      	strb	r3, [r7, #14]
 801685c:	7bfa      	ldrb	r2, [r7, #15]
 801685e:	79fb      	ldrb	r3, [r7, #7]
 8016860:	429a      	cmp	r2, r3
 8016862:	d3b1      	bcc.n	80167c8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016864:	2300      	movs	r3, #0
}
 8016866:	4618      	mov	r0, r3
 8016868:	3710      	adds	r7, #16
 801686a:	46bd      	mov	sp, r7
 801686c:	bd80      	pop	{r7, pc}

0801686e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801686e:	b480      	push	{r7}
 8016870:	b083      	sub	sp, #12
 8016872:	af00      	add	r7, sp, #0
 8016874:	4603      	mov	r3, r0
 8016876:	71fb      	strb	r3, [r7, #7]
 8016878:	460b      	mov	r3, r1
 801687a:	71bb      	strb	r3, [r7, #6]
 801687c:	4613      	mov	r3, r2
 801687e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016880:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016884:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016888:	429a      	cmp	r2, r3
 801688a:	db07      	blt.n	801689c <RegionCommonValueInRange+0x2e>
 801688c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016890:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016894:	429a      	cmp	r2, r3
 8016896:	dc01      	bgt.n	801689c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016898:	2301      	movs	r3, #1
 801689a:	e000      	b.n	801689e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801689c:	2300      	movs	r3, #0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	370c      	adds	r7, #12
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bc80      	pop	{r7}
 80168a6:	4770      	bx	lr

080168a8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80168a8:	b480      	push	{r7}
 80168aa:	b085      	sub	sp, #20
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	460b      	mov	r3, r1
 80168b2:	70fb      	strb	r3, [r7, #3]
 80168b4:	4613      	mov	r3, r2
 80168b6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80168b8:	78fb      	ldrb	r3, [r7, #3]
 80168ba:	091b      	lsrs	r3, r3, #4
 80168bc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80168be:	78bb      	ldrb	r3, [r7, #2]
 80168c0:	091b      	lsrs	r3, r3, #4
 80168c2:	b2db      	uxtb	r3, r3
 80168c4:	7bfa      	ldrb	r2, [r7, #15]
 80168c6:	429a      	cmp	r2, r3
 80168c8:	d803      	bhi.n	80168d2 <RegionCommonChanDisable+0x2a>
 80168ca:	78fa      	ldrb	r2, [r7, #3]
 80168cc:	78bb      	ldrb	r3, [r7, #2]
 80168ce:	429a      	cmp	r2, r3
 80168d0:	d301      	bcc.n	80168d6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80168d2:	2300      	movs	r3, #0
 80168d4:	e017      	b.n	8016906 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80168d6:	7bfb      	ldrb	r3, [r7, #15]
 80168d8:	005b      	lsls	r3, r3, #1
 80168da:	687a      	ldr	r2, [r7, #4]
 80168dc:	4413      	add	r3, r2
 80168de:	881b      	ldrh	r3, [r3, #0]
 80168e0:	b21a      	sxth	r2, r3
 80168e2:	78fb      	ldrb	r3, [r7, #3]
 80168e4:	f003 030f 	and.w	r3, r3, #15
 80168e8:	2101      	movs	r1, #1
 80168ea:	fa01 f303 	lsl.w	r3, r1, r3
 80168ee:	b21b      	sxth	r3, r3
 80168f0:	43db      	mvns	r3, r3
 80168f2:	b21b      	sxth	r3, r3
 80168f4:	4013      	ands	r3, r2
 80168f6:	b219      	sxth	r1, r3
 80168f8:	7bfb      	ldrb	r3, [r7, #15]
 80168fa:	005b      	lsls	r3, r3, #1
 80168fc:	687a      	ldr	r2, [r7, #4]
 80168fe:	4413      	add	r3, r2
 8016900:	b28a      	uxth	r2, r1
 8016902:	801a      	strh	r2, [r3, #0]

    return true;
 8016904:	2301      	movs	r3, #1
}
 8016906:	4618      	mov	r0, r3
 8016908:	3714      	adds	r7, #20
 801690a:	46bd      	mov	sp, r7
 801690c:	bc80      	pop	{r7}
 801690e:	4770      	bx	lr

08016910 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	460b      	mov	r3, r1
 801691a:	70fb      	strb	r3, [r7, #3]
 801691c:	4613      	mov	r3, r2
 801691e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016920:	2300      	movs	r3, #0
 8016922:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d101      	bne.n	801692e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801692a:	2300      	movs	r3, #0
 801692c:	e018      	b.n	8016960 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801692e:	78fb      	ldrb	r3, [r7, #3]
 8016930:	73bb      	strb	r3, [r7, #14]
 8016932:	e010      	b.n	8016956 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016934:	7bbb      	ldrb	r3, [r7, #14]
 8016936:	005b      	lsls	r3, r3, #1
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	4413      	add	r3, r2
 801693c:	881b      	ldrh	r3, [r3, #0]
 801693e:	2110      	movs	r1, #16
 8016940:	4618      	mov	r0, r3
 8016942:	f7ff fef9 	bl	8016738 <CountChannels>
 8016946:	4603      	mov	r3, r0
 8016948:	461a      	mov	r2, r3
 801694a:	7bfb      	ldrb	r3, [r7, #15]
 801694c:	4413      	add	r3, r2
 801694e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016950:	7bbb      	ldrb	r3, [r7, #14]
 8016952:	3301      	adds	r3, #1
 8016954:	73bb      	strb	r3, [r7, #14]
 8016956:	7bba      	ldrb	r2, [r7, #14]
 8016958:	78bb      	ldrb	r3, [r7, #2]
 801695a:	429a      	cmp	r2, r3
 801695c:	d3ea      	bcc.n	8016934 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016968:	b480      	push	{r7}
 801696a:	b087      	sub	sp, #28
 801696c:	af00      	add	r7, sp, #0
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	60b9      	str	r1, [r7, #8]
 8016972:	4613      	mov	r3, r2
 8016974:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d016      	beq.n	80169aa <RegionCommonChanMaskCopy+0x42>
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d013      	beq.n	80169aa <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016982:	2300      	movs	r3, #0
 8016984:	75fb      	strb	r3, [r7, #23]
 8016986:	e00c      	b.n	80169a2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016988:	7dfb      	ldrb	r3, [r7, #23]
 801698a:	005b      	lsls	r3, r3, #1
 801698c:	68ba      	ldr	r2, [r7, #8]
 801698e:	441a      	add	r2, r3
 8016990:	7dfb      	ldrb	r3, [r7, #23]
 8016992:	005b      	lsls	r3, r3, #1
 8016994:	68f9      	ldr	r1, [r7, #12]
 8016996:	440b      	add	r3, r1
 8016998:	8812      	ldrh	r2, [r2, #0]
 801699a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801699c:	7dfb      	ldrb	r3, [r7, #23]
 801699e:	3301      	adds	r3, #1
 80169a0:	75fb      	strb	r3, [r7, #23]
 80169a2:	7dfa      	ldrb	r2, [r7, #23]
 80169a4:	79fb      	ldrb	r3, [r7, #7]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d3ee      	bcc.n	8016988 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80169aa:	bf00      	nop
 80169ac:	371c      	adds	r7, #28
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bc80      	pop	{r7}
 80169b2:	4770      	bx	lr

080169b4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80169b4:	b082      	sub	sp, #8
 80169b6:	b580      	push	{r7, lr}
 80169b8:	b086      	sub	sp, #24
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	60f8      	str	r0, [r7, #12]
 80169be:	60b9      	str	r1, [r7, #8]
 80169c0:	627b      	str	r3, [r7, #36]	; 0x24
 80169c2:	4613      	mov	r3, r2
 80169c4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80169c6:	79f9      	ldrb	r1, [r7, #7]
 80169c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80169cc:	cb0c      	ldmia	r3, {r2, r3}
 80169ce:	68f8      	ldr	r0, [r7, #12]
 80169d0:	f7ff fd8c 	bl	80164ec <GetDutyCycle>
 80169d4:	4603      	mov	r3, r0
 80169d6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	68da      	ldr	r2, [r3, #12]
 80169dc:	8afb      	ldrh	r3, [r7, #22]
 80169de:	68b9      	ldr	r1, [r7, #8]
 80169e0:	fb01 f303 	mul.w	r3, r1, r3
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d909      	bls.n	80169fc <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	68da      	ldr	r2, [r3, #12]
 80169ec:	8afb      	ldrh	r3, [r7, #22]
 80169ee:	68b9      	ldr	r1, [r7, #8]
 80169f0:	fb01 f303 	mul.w	r3, r1, r3
 80169f4:	1ad2      	subs	r2, r2, r3
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80169fa:	e002      	b.n	8016a02 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	2200      	movs	r2, #0
 8016a00:	60da      	str	r2, [r3, #12]
}
 8016a02:	bf00      	nop
 8016a04:	3718      	adds	r7, #24
 8016a06:	46bd      	mov	sp, r7
 8016a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016a0c:	b002      	add	sp, #8
 8016a0e:	4770      	bx	lr

08016a10 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a12:	b08f      	sub	sp, #60	; 0x3c
 8016a14:	af04      	add	r7, sp, #16
 8016a16:	6039      	str	r1, [r7, #0]
 8016a18:	4611      	mov	r1, r2
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	71fb      	strb	r3, [r7, #7]
 8016a20:	460b      	mov	r3, r1
 8016a22:	71bb      	strb	r3, [r7, #6]
 8016a24:	4613      	mov	r3, r2
 8016a26:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016a28:	f04f 33ff 	mov.w	r3, #4294967295
 8016a2c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016a2e:	f006 f8eb 	bl	801cc08 <UTIL_TIMER_GetCurrentTime>
 8016a32:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016a34:	2300      	movs	r3, #0
 8016a36:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016a38:	2301      	movs	r3, #1
 8016a3a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016a42:	2300      	movs	r3, #0
 8016a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016a48:	e0ba      	b.n	8016bc0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016a4a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016a4e:	4613      	mov	r3, r2
 8016a50:	005b      	lsls	r3, r3, #1
 8016a52:	4413      	add	r3, r2
 8016a54:	00db      	lsls	r3, r3, #3
 8016a56:	461a      	mov	r2, r3
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	189c      	adds	r4, r3, r2
 8016a5c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8016a60:	797a      	ldrb	r2, [r7, #5]
 8016a62:	79fd      	ldrb	r5, [r7, #7]
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	9302      	str	r3, [sp, #8]
 8016a68:	46ec      	mov	ip, sp
 8016a6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016a6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a72:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016a76:	4633      	mov	r3, r6
 8016a78:	4629      	mov	r1, r5
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	f7ff fe22 	bl	80166c4 <UpdateTimeCredits>
 8016a80:	4603      	mov	r3, r0
 8016a82:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016a84:	8afa      	ldrh	r2, [r7, #22]
 8016a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a88:	fb02 f303 	mul.w	r3, r2, r3
 8016a8c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016a8e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016a92:	4613      	mov	r3, r2
 8016a94:	005b      	lsls	r3, r3, #1
 8016a96:	4413      	add	r3, r2
 8016a98:	00db      	lsls	r3, r3, #3
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	4413      	add	r3, r2
 8016aa0:	68db      	ldr	r3, [r3, #12]
 8016aa2:	69ba      	ldr	r2, [r7, #24]
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d308      	bcc.n	8016aba <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016aa8:	797b      	ldrb	r3, [r7, #5]
 8016aaa:	f083 0301 	eor.w	r3, r3, #1
 8016aae:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d013      	beq.n	8016adc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016ab4:	79fb      	ldrb	r3, [r7, #7]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d010      	beq.n	8016adc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8016aba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016abe:	4613      	mov	r3, r2
 8016ac0:	005b      	lsls	r3, r3, #1
 8016ac2:	4413      	add	r3, r2
 8016ac4:	00db      	lsls	r3, r3, #3
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	4413      	add	r3, r2
 8016acc:	2201      	movs	r2, #1
 8016ace:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ad4:	3301      	adds	r3, #1
 8016ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016ada:	e06c      	b.n	8016bb6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016adc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	005b      	lsls	r3, r3, #1
 8016ae4:	4413      	add	r3, r2
 8016ae6:	00db      	lsls	r3, r3, #3
 8016ae8:	461a      	mov	r2, r3
 8016aea:	683b      	ldr	r3, [r7, #0]
 8016aec:	4413      	add	r3, r2
 8016aee:	2200      	movs	r2, #0
 8016af0:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016af2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016af6:	4613      	mov	r3, r2
 8016af8:	005b      	lsls	r3, r3, #1
 8016afa:	4413      	add	r3, r2
 8016afc:	00db      	lsls	r3, r3, #3
 8016afe:	461a      	mov	r2, r3
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	4413      	add	r3, r2
 8016b04:	691b      	ldr	r3, [r3, #16]
 8016b06:	69ba      	ldr	r2, [r7, #24]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d215      	bcs.n	8016b38 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016b0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016b10:	4613      	mov	r3, r2
 8016b12:	005b      	lsls	r3, r3, #1
 8016b14:	4413      	add	r3, r2
 8016b16:	00db      	lsls	r3, r3, #3
 8016b18:	461a      	mov	r2, r3
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	68db      	ldr	r3, [r3, #12]
 8016b20:	69ba      	ldr	r2, [r7, #24]
 8016b22:	1ad3      	subs	r3, r2, r3
 8016b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b26:	4293      	cmp	r3, r2
 8016b28:	bf28      	it	cs
 8016b2a:	4613      	movcs	r3, r2
 8016b2c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b32:	3301      	adds	r3, #1
 8016b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016b38:	79fb      	ldrb	r3, [r7, #7]
 8016b3a:	f083 0301 	eor.w	r3, r3, #1
 8016b3e:	b2db      	uxtb	r3, r3
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d038      	beq.n	8016bb6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016b44:	2300      	movs	r3, #0
 8016b46:	60fb      	str	r3, [r7, #12]
 8016b48:	2300      	movs	r3, #0
 8016b4a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016b4c:	8afb      	ldrh	r3, [r7, #22]
 8016b4e:	2b64      	cmp	r3, #100	; 0x64
 8016b50:	d103      	bne.n	8016b5a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8016b52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8016b56:	60fb      	str	r3, [r7, #12]
 8016b58:	e009      	b.n	8016b6e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016b5a:	8afb      	ldrh	r3, [r7, #22]
 8016b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016b60:	d103      	bne.n	8016b6a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8016b62:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8016b66:	60fb      	str	r3, [r7, #12]
 8016b68:	e001      	b.n	8016b6e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016b6a:	4b1e      	ldr	r3, [pc, #120]	; (8016be4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016b6c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b70:	4a1c      	ldr	r2, [pc, #112]	; (8016be4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016b72:	4293      	cmp	r3, r2
 8016b74:	d90e      	bls.n	8016b94 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016b76:	68fa      	ldr	r2, [r7, #12]
 8016b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b7a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8016b7e:	3b30      	subs	r3, #48	; 0x30
 8016b80:	4919      	ldr	r1, [pc, #100]	; (8016be8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8016b82:	fba1 1303 	umull	r1, r3, r1, r3
 8016b86:	0c1b      	lsrs	r3, r3, #16
 8016b88:	3301      	adds	r3, #1
 8016b8a:	4918      	ldr	r1, [pc, #96]	; (8016bec <RegionCommonUpdateBandTimeOff+0x1dc>)
 8016b8c:	fb01 f303 	mul.w	r3, r1, r3
 8016b90:	4413      	add	r3, r2
 8016b92:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016b94:	f107 000c 	add.w	r0, r7, #12
 8016b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b9a:	9300      	str	r3, [sp, #0]
 8016b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b9e:	f107 020c 	add.w	r2, r7, #12
 8016ba2:	ca06      	ldmia	r2, {r1, r2}
 8016ba4:	f005 f943 	bl	801be2e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016ba8:	f107 030c 	add.w	r3, r7, #12
 8016bac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bb0:	f005 f9fc 	bl	801bfac <SysTimeToMs>
 8016bb4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8016bb6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016bba:	3301      	adds	r3, #1
 8016bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016bc0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016bc4:	79bb      	ldrb	r3, [r7, #6]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	f4ff af3f 	bcc.w	8016a4a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d102      	bne.n	8016bda <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd8:	e000      	b.n	8016bdc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016bdc:	4618      	mov	r0, r3
 8016bde:	372c      	adds	r7, #44	; 0x2c
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016be4:	0001ec30 	.word	0x0001ec30
 8016be8:	c22e4507 	.word	0xc22e4507
 8016bec:	00015180 	.word	0x00015180

08016bf0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	2b03      	cmp	r3, #3
 8016c04:	d13f      	bne.n	8016c86 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	3301      	adds	r3, #1
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	b25a      	sxtb	r2, r3
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c18:	f003 030f 	and.w	r3, r3, #15
 8016c1c:	b25a      	sxtb	r2, r3
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	091b      	lsrs	r3, r3, #4
 8016c2c:	b2db      	uxtb	r3, r3
 8016c2e:	b25a      	sxtb	r2, r3
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	3302      	adds	r3, #2
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	b29a      	uxth	r2, r3
 8016c3c:	683b      	ldr	r3, [r7, #0]
 8016c3e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	889b      	ldrh	r3, [r3, #4]
 8016c44:	b21a      	sxth	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	3303      	adds	r3, #3
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	021b      	lsls	r3, r3, #8
 8016c4e:	b21b      	sxth	r3, r3
 8016c50:	4313      	orrs	r3, r2
 8016c52:	b21b      	sxth	r3, r3
 8016c54:	b29a      	uxth	r2, r3
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	791a      	ldrb	r2, [r3, #4]
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016c62:	683b      	ldr	r3, [r7, #0]
 8016c64:	781b      	ldrb	r3, [r3, #0]
 8016c66:	091b      	lsrs	r3, r3, #4
 8016c68:	b2db      	uxtb	r3, r3
 8016c6a:	f003 0307 	and.w	r3, r3, #7
 8016c6e:	b2da      	uxtb	r2, r3
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	f003 030f 	and.w	r3, r3, #15
 8016c7c:	b2da      	uxtb	r2, r3
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016c82:	2305      	movs	r3, #5
 8016c84:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3714      	adds	r7, #20
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bc80      	pop	{r7}
 8016c90:	4770      	bx	lr

08016c92 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016c92:	b5b0      	push	{r4, r5, r7, lr}
 8016c94:	b088      	sub	sp, #32
 8016c96:	af02      	add	r7, sp, #8
 8016c98:	60f8      	str	r0, [r7, #12]
 8016c9a:	60b9      	str	r1, [r7, #8]
 8016c9c:	607a      	str	r2, [r7, #4]
 8016c9e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	791b      	ldrb	r3, [r3, #4]
 8016ca4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	799b      	ldrb	r3, [r3, #6]
 8016caa:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	79db      	ldrb	r3, [r3, #7]
 8016cb0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	7a1b      	ldrb	r3, [r3, #8]
 8016cb6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	795b      	ldrb	r3, [r3, #5]
 8016cbc:	f083 0301 	eor.w	r3, r3, #1
 8016cc0:	b2db      	uxtb	r3, r3
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d008      	beq.n	8016cd8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	7adb      	ldrb	r3, [r3, #11]
 8016cca:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	7a5b      	ldrb	r3, [r3, #9]
 8016cd0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	7a9b      	ldrb	r3, [r3, #10]
 8016cd6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016cd8:	7dfb      	ldrb	r3, [r7, #23]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d04a      	beq.n	8016d74 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016cde:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016ce2:	2b0f      	cmp	r3, #15
 8016ce4:	d103      	bne.n	8016cee <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	7a5b      	ldrb	r3, [r3, #9]
 8016cea:	75bb      	strb	r3, [r7, #22]
 8016cec:	e01d      	b.n	8016d2a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	7b18      	ldrb	r0, [r3, #12]
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	6919      	ldr	r1, [r3, #16]
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016d02:	68fa      	ldr	r2, [r7, #12]
 8016d04:	6992      	ldr	r2, [r2, #24]
 8016d06:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016d0a:	9201      	str	r2, [sp, #4]
 8016d0c:	9300      	str	r3, [sp, #0]
 8016d0e:	462b      	mov	r3, r5
 8016d10:	4622      	mov	r2, r4
 8016d12:	f7ff fd3a 	bl	801678a <RegionCommonChanVerifyDr>
 8016d16:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016d18:	f083 0301 	eor.w	r3, r3, #1
 8016d1c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d003      	beq.n	8016d2a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016d22:	7dfb      	ldrb	r3, [r7, #23]
 8016d24:	f023 0302 	bic.w	r3, r3, #2
 8016d28:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016d2a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016d2e:	2b0f      	cmp	r3, #15
 8016d30:	d103      	bne.n	8016d3a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	7a9b      	ldrb	r3, [r3, #10]
 8016d36:	757b      	strb	r3, [r7, #21]
 8016d38:	e01c      	b.n	8016d74 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016d46:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7ff fd8f 	bl	801686e <RegionCommonValueInRange>
 8016d50:	4603      	mov	r3, r0
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d10e      	bne.n	8016d74 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016d5c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016d60:	429a      	cmp	r2, r3
 8016d62:	da03      	bge.n	8016d6c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	7f5b      	ldrb	r3, [r3, #29]
 8016d68:	757b      	strb	r3, [r7, #21]
 8016d6a:	e003      	b.n	8016d74 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016d6c:	7dfb      	ldrb	r3, [r7, #23]
 8016d6e:	f023 0304 	bic.w	r3, r3, #4
 8016d72:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016d74:	7dfb      	ldrb	r3, [r7, #23]
 8016d76:	2b07      	cmp	r3, #7
 8016d78:	d105      	bne.n	8016d86 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016d7a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d101      	bne.n	8016d86 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016d82:	2301      	movs	r3, #1
 8016d84:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	7dba      	ldrb	r2, [r7, #22]
 8016d8a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	7d7a      	ldrb	r2, [r7, #21]
 8016d90:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016d92:	7d3a      	ldrb	r2, [r7, #20]
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	701a      	strb	r2, [r3, #0]

    return status;
 8016d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	3718      	adds	r7, #24
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016da4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016da4:	b480      	push	{r7}
 8016da6:	b083      	sub	sp, #12
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	4603      	mov	r3, r0
 8016dac:	6039      	str	r1, [r7, #0]
 8016dae:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016db0:	79fb      	ldrb	r3, [r7, #7]
 8016db2:	4a06      	ldr	r2, [pc, #24]	; (8016dcc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016db4:	fa02 f303 	lsl.w	r3, r2, r3
 8016db8:	461a      	mov	r2, r3
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	370c      	adds	r7, #12
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bc80      	pop	{r7}
 8016dc8:	4770      	bx	lr
 8016dca:	bf00      	nop
 8016dcc:	000f4240 	.word	0x000f4240

08016dd0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016dd0:	b480      	push	{r7}
 8016dd2:	b083      	sub	sp, #12
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016dda:	79fb      	ldrb	r3, [r7, #7]
 8016ddc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016de0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	370c      	adds	r7, #12
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bc80      	pop	{r7}
 8016dec:	4770      	bx	lr
	...

08016df0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016df0:	b480      	push	{r7}
 8016df2:	b085      	sub	sp, #20
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	607a      	str	r2, [r7, #4]
 8016dfa:	603b      	str	r3, [r7, #0]
 8016dfc:	460b      	mov	r3, r1
 8016dfe:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016e00:	7afa      	ldrb	r2, [r7, #11]
 8016e02:	7afb      	ldrb	r3, [r7, #11]
 8016e04:	3b04      	subs	r3, #4
 8016e06:	4619      	mov	r1, r3
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	fb03 f101 	mul.w	r1, r3, r1
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016e14:	fb00 f303 	mul.w	r3, r0, r3
 8016e18:	440b      	add	r3, r1
 8016e1a:	005b      	lsls	r3, r3, #1
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d013      	beq.n	8016e48 <RegionCommonComputeRxWindowParameters+0x58>
 8016e20:	7afb      	ldrb	r3, [r7, #11]
 8016e22:	3b04      	subs	r3, #4
 8016e24:	4619      	mov	r1, r3
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	fb03 f101 	mul.w	r1, r3, r1
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016e32:	fb00 f303 	mul.w	r3, r0, r3
 8016e36:	440b      	add	r3, r1
 8016e38:	0059      	lsls	r1, r3, #1
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	440b      	add	r3, r1
 8016e3e:	1e59      	subs	r1, r3, #1
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8016e46:	e00f      	b.n	8016e68 <RegionCommonComputeRxWindowParameters+0x78>
 8016e48:	7afb      	ldrb	r3, [r7, #11]
 8016e4a:	3b04      	subs	r3, #4
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	fb03 f101 	mul.w	r1, r3, r1
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016e5a:	fb00 f303 	mul.w	r3, r0, r3
 8016e5e:	440b      	add	r3, r1
 8016e60:	0059      	lsls	r1, r3, #1
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	bf38      	it	cc
 8016e6c:	461a      	movcc	r2, r3
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	009b      	lsls	r3, r3, #2
 8016e76:	4619      	mov	r1, r3
 8016e78:	69bb      	ldr	r3, [r7, #24]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	68fa      	ldr	r2, [r7, #12]
 8016e7e:	fb02 f303 	mul.w	r3, r2, r3
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d007      	beq.n	8016e96 <RegionCommonComputeRxWindowParameters+0xa6>
 8016e86:	69bb      	ldr	r3, [r7, #24]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	68fa      	ldr	r2, [r7, #12]
 8016e8c:	fb02 f303 	mul.w	r3, r2, r3
 8016e90:	3301      	adds	r3, #1
 8016e92:	085b      	lsrs	r3, r3, #1
 8016e94:	e005      	b.n	8016ea2 <RegionCommonComputeRxWindowParameters+0xb2>
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	68fa      	ldr	r2, [r7, #12]
 8016e9c:	fb02 f303 	mul.w	r3, r2, r3
 8016ea0:	085b      	lsrs	r3, r3, #1
 8016ea2:	1acb      	subs	r3, r1, r3
 8016ea4:	683a      	ldr	r2, [r7, #0]
 8016ea6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016eaa:	fb01 f202 	mul.w	r2, r1, r2
 8016eae:	1a9b      	subs	r3, r3, r2
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	dd27      	ble.n	8016f04 <RegionCommonComputeRxWindowParameters+0x114>
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	4619      	mov	r1, r3
 8016eba:	69bb      	ldr	r3, [r7, #24]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	68fa      	ldr	r2, [r7, #12]
 8016ec0:	fb02 f303 	mul.w	r3, r2, r3
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d007      	beq.n	8016ed8 <RegionCommonComputeRxWindowParameters+0xe8>
 8016ec8:	69bb      	ldr	r3, [r7, #24]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	68fa      	ldr	r2, [r7, #12]
 8016ece:	fb02 f303 	mul.w	r3, r2, r3
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	085b      	lsrs	r3, r3, #1
 8016ed6:	e005      	b.n	8016ee4 <RegionCommonComputeRxWindowParameters+0xf4>
 8016ed8:	69bb      	ldr	r3, [r7, #24]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	68fa      	ldr	r2, [r7, #12]
 8016ede:	fb02 f303 	mul.w	r3, r2, r3
 8016ee2:	085b      	lsrs	r3, r3, #1
 8016ee4:	1acb      	subs	r3, r1, r3
 8016ee6:	683a      	ldr	r2, [r7, #0]
 8016ee8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016eec:	fb01 f202 	mul.w	r2, r1, r2
 8016ef0:	1a9b      	subs	r3, r3, r2
 8016ef2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8016ef6:	4a19      	ldr	r2, [pc, #100]	; (8016f5c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8016efc:	1192      	asrs	r2, r2, #6
 8016efe:	17db      	asrs	r3, r3, #31
 8016f00:	1ad3      	subs	r3, r2, r3
 8016f02:	e024      	b.n	8016f4e <RegionCommonComputeRxWindowParameters+0x15e>
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	009b      	lsls	r3, r3, #2
 8016f08:	4619      	mov	r1, r3
 8016f0a:	69bb      	ldr	r3, [r7, #24]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	68fa      	ldr	r2, [r7, #12]
 8016f10:	fb02 f303 	mul.w	r3, r2, r3
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d007      	beq.n	8016f28 <RegionCommonComputeRxWindowParameters+0x138>
 8016f18:	69bb      	ldr	r3, [r7, #24]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	68fa      	ldr	r2, [r7, #12]
 8016f1e:	fb02 f303 	mul.w	r3, r2, r3
 8016f22:	3301      	adds	r3, #1
 8016f24:	085b      	lsrs	r3, r3, #1
 8016f26:	e005      	b.n	8016f34 <RegionCommonComputeRxWindowParameters+0x144>
 8016f28:	69bb      	ldr	r3, [r7, #24]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	68fa      	ldr	r2, [r7, #12]
 8016f2e:	fb02 f303 	mul.w	r3, r2, r3
 8016f32:	085b      	lsrs	r3, r3, #1
 8016f34:	1acb      	subs	r3, r1, r3
 8016f36:	683a      	ldr	r2, [r7, #0]
 8016f38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016f3c:	fb01 f202 	mul.w	r2, r1, r2
 8016f40:	1a9b      	subs	r3, r3, r2
 8016f42:	4a06      	ldr	r2, [pc, #24]	; (8016f5c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016f44:	fb82 1203 	smull	r1, r2, r2, r3
 8016f48:	1192      	asrs	r2, r2, #6
 8016f4a:	17db      	asrs	r3, r3, #31
 8016f4c:	1ad3      	subs	r3, r2, r3
 8016f4e:	69fa      	ldr	r2, [r7, #28]
 8016f50:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016f52:	bf00      	nop
 8016f54:	3714      	adds	r7, #20
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bc80      	pop	{r7}
 8016f5a:	4770      	bx	lr
 8016f5c:	10624dd3 	.word	0x10624dd3

08016f60 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b086      	sub	sp, #24
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	60b9      	str	r1, [r7, #8]
 8016f6a:	607a      	str	r2, [r7, #4]
 8016f6c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f76:	005b      	lsls	r3, r3, #1
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f7e9 fe89 	bl	8000c90 <__aeabi_ui2f>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	4619      	mov	r1, r3
 8016f82:	68b8      	ldr	r0, [r7, #8]
 8016f84:	f7e9 fdd2 	bl	8000b2c <__aeabi_fsub>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	6879      	ldr	r1, [r7, #4]
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7e9 fdcd 	bl	8000b2c <__aeabi_fsub>
 8016f92:	4603      	mov	r3, r0
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7e9 fa5b 	bl	8000450 <__aeabi_f2d>
 8016f9a:	4602      	mov	r2, r0
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	4610      	mov	r0, r2
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	f006 fa3d 	bl	801d420 <floor>
 8016fa6:	4602      	mov	r2, r0
 8016fa8:	460b      	mov	r3, r1
 8016faa:	4610      	mov	r0, r2
 8016fac:	4619      	mov	r1, r3
 8016fae:	f7e9 fd41 	bl	8000a34 <__aeabi_d2iz>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3718      	adds	r7, #24
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}

08016fc2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016fc2:	b590      	push	{r4, r7, lr}
 8016fc4:	b087      	sub	sp, #28
 8016fc6:	af00      	add	r7, sp, #0
 8016fc8:	60f8      	str	r0, [r7, #12]
 8016fca:	60b9      	str	r1, [r7, #8]
 8016fcc:	607a      	str	r2, [r7, #4]
 8016fce:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016fd8:	2300      	movs	r3, #0
 8016fda:	757b      	strb	r3, [r7, #21]
 8016fdc:	2300      	movs	r3, #0
 8016fde:	753b      	strb	r3, [r7, #20]
 8016fe0:	e09c      	b.n	801711c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	74fb      	strb	r3, [r7, #19]
 8016fe6:	e08f      	b.n	8017108 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	685a      	ldr	r2, [r3, #4]
 8016fec:	7d3b      	ldrb	r3, [r7, #20]
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	4413      	add	r3, r2
 8016ff2:	881b      	ldrh	r3, [r3, #0]
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	7cfb      	ldrb	r3, [r7, #19]
 8016ff8:	fa42 f303 	asr.w	r3, r2, r3
 8016ffc:	f003 0301 	and.w	r3, r3, #1
 8017000:	2b00      	cmp	r3, #0
 8017002:	d07e      	beq.n	8017102 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	689a      	ldr	r2, [r3, #8]
 8017008:	7d79      	ldrb	r1, [r7, #21]
 801700a:	7cfb      	ldrb	r3, [r7, #19]
 801700c:	440b      	add	r3, r1
 801700e:	4619      	mov	r1, r3
 8017010:	460b      	mov	r3, r1
 8017012:	005b      	lsls	r3, r3, #1
 8017014:	440b      	add	r3, r1
 8017016:	009b      	lsls	r3, r3, #2
 8017018:	4413      	add	r3, r2
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d06b      	beq.n	80170f8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	f083 0301 	eor.w	r3, r3, #1
 8017028:	b2db      	uxtb	r3, r3
 801702a:	2b00      	cmp	r3, #0
 801702c:	d011      	beq.n	8017052 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017032:	2b00      	cmp	r3, #0
 8017034:	d00d      	beq.n	8017052 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	695a      	ldr	r2, [r3, #20]
 801703a:	7d3b      	ldrb	r3, [r7, #20]
 801703c:	005b      	lsls	r3, r3, #1
 801703e:	4413      	add	r3, r2
 8017040:	881b      	ldrh	r3, [r3, #0]
 8017042:	461a      	mov	r2, r3
 8017044:	7cfb      	ldrb	r3, [r7, #19]
 8017046:	fa42 f303 	asr.w	r3, r2, r3
 801704a:	f003 0301 	and.w	r3, r3, #1
 801704e:	2b00      	cmp	r3, #0
 8017050:	d054      	beq.n	80170fc <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	785b      	ldrb	r3, [r3, #1]
 8017056:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	689a      	ldr	r2, [r3, #8]
 801705c:	7d79      	ldrb	r1, [r7, #21]
 801705e:	7cfb      	ldrb	r3, [r7, #19]
 8017060:	440b      	add	r3, r1
 8017062:	4619      	mov	r1, r3
 8017064:	460b      	mov	r3, r1
 8017066:	005b      	lsls	r3, r3, #1
 8017068:	440b      	add	r3, r1
 801706a:	009b      	lsls	r3, r3, #2
 801706c:	4413      	add	r3, r2
 801706e:	7a1b      	ldrb	r3, [r3, #8]
 8017070:	f343 0303 	sbfx	r3, r3, #0, #4
 8017074:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017076:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	689a      	ldr	r2, [r3, #8]
 801707c:	7d79      	ldrb	r1, [r7, #21]
 801707e:	7cfb      	ldrb	r3, [r7, #19]
 8017080:	440b      	add	r3, r1
 8017082:	4619      	mov	r1, r3
 8017084:	460b      	mov	r3, r1
 8017086:	005b      	lsls	r3, r3, #1
 8017088:	440b      	add	r3, r1
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	4413      	add	r3, r2
 801708e:	7a1b      	ldrb	r3, [r3, #8]
 8017090:	f343 1303 	sbfx	r3, r3, #4, #4
 8017094:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017096:	461a      	mov	r2, r3
 8017098:	4621      	mov	r1, r4
 801709a:	f7ff fbe8 	bl	801686e <RegionCommonValueInRange>
 801709e:	4603      	mov	r3, r0
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d02d      	beq.n	8017100 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	68da      	ldr	r2, [r3, #12]
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	6899      	ldr	r1, [r3, #8]
 80170ac:	7d78      	ldrb	r0, [r7, #21]
 80170ae:	7cfb      	ldrb	r3, [r7, #19]
 80170b0:	4403      	add	r3, r0
 80170b2:	4618      	mov	r0, r3
 80170b4:	4603      	mov	r3, r0
 80170b6:	005b      	lsls	r3, r3, #1
 80170b8:	4403      	add	r3, r0
 80170ba:	009b      	lsls	r3, r3, #2
 80170bc:	440b      	add	r3, r1
 80170be:	7a5b      	ldrb	r3, [r3, #9]
 80170c0:	4619      	mov	r1, r3
 80170c2:	460b      	mov	r3, r1
 80170c4:	005b      	lsls	r3, r3, #1
 80170c6:	440b      	add	r3, r1
 80170c8:	00db      	lsls	r3, r3, #3
 80170ca:	4413      	add	r3, r2
 80170cc:	7d1b      	ldrb	r3, [r3, #20]
 80170ce:	f083 0301 	eor.w	r3, r3, #1
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d003      	beq.n	80170e0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80170d8:	7dbb      	ldrb	r3, [r7, #22]
 80170da:	3301      	adds	r3, #1
 80170dc:	75bb      	strb	r3, [r7, #22]
                    continue;
 80170de:	e010      	b.n	8017102 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80170e0:	7dfb      	ldrb	r3, [r7, #23]
 80170e2:	1c5a      	adds	r2, r3, #1
 80170e4:	75fa      	strb	r2, [r7, #23]
 80170e6:	461a      	mov	r2, r3
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	4413      	add	r3, r2
 80170ec:	7d79      	ldrb	r1, [r7, #21]
 80170ee:	7cfa      	ldrb	r2, [r7, #19]
 80170f0:	440a      	add	r2, r1
 80170f2:	b2d2      	uxtb	r2, r2
 80170f4:	701a      	strb	r2, [r3, #0]
 80170f6:	e004      	b.n	8017102 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80170f8:	bf00      	nop
 80170fa:	e002      	b.n	8017102 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80170fc:	bf00      	nop
 80170fe:	e000      	b.n	8017102 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017100:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8017102:	7cfb      	ldrb	r3, [r7, #19]
 8017104:	3301      	adds	r3, #1
 8017106:	74fb      	strb	r3, [r7, #19]
 8017108:	7cfb      	ldrb	r3, [r7, #19]
 801710a:	2b0f      	cmp	r3, #15
 801710c:	f67f af6c 	bls.w	8016fe8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017110:	7d7b      	ldrb	r3, [r7, #21]
 8017112:	3310      	adds	r3, #16
 8017114:	757b      	strb	r3, [r7, #21]
 8017116:	7d3b      	ldrb	r3, [r7, #20]
 8017118:	3301      	adds	r3, #1
 801711a:	753b      	strb	r3, [r7, #20]
 801711c:	7d7b      	ldrb	r3, [r7, #21]
 801711e:	b29a      	uxth	r2, r3
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	8a1b      	ldrh	r3, [r3, #16]
 8017124:	429a      	cmp	r2, r3
 8017126:	f4ff af5c 	bcc.w	8016fe2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	7dfa      	ldrb	r2, [r7, #23]
 801712e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	7dba      	ldrb	r2, [r7, #22]
 8017134:	701a      	strb	r2, [r3, #0]
}
 8017136:	bf00      	nop
 8017138:	371c      	adds	r7, #28
 801713a:	46bd      	mov	sp, r7
 801713c:	bd90      	pop	{r4, r7, pc}

0801713e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801713e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017140:	b08b      	sub	sp, #44	; 0x2c
 8017142:	af04      	add	r7, sp, #16
 8017144:	60f8      	str	r0, [r7, #12]
 8017146:	60b9      	str	r1, [r7, #8]
 8017148:	607a      	str	r2, [r7, #4]
 801714a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	4618      	mov	r0, r3
 8017152:	f005 fd6b 	bl	801cc2c <UTIL_TIMER_GetElapsedTime>
 8017156:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	681a      	ldr	r2, [r3, #0]
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	1ad2      	subs	r2, r2, r3
 8017160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017162:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017166:	2201      	movs	r2, #1
 8017168:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	2200      	movs	r2, #0
 801716e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	685b      	ldr	r3, [r3, #4]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d004      	beq.n	8017182 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801717c:	697a      	ldr	r2, [r7, #20]
 801717e:	429a      	cmp	r2, r3
 8017180:	d32b      	bcc.n	80171da <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	2200      	movs	r2, #0
 8017186:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	69db      	ldr	r3, [r3, #28]
 801718c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017192:	68dd      	ldr	r5, [r3, #12]
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	7a5e      	ldrb	r6, [r3, #9]
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	f893 c008 	ldrb.w	ip, [r3, #8]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	7d1b      	ldrb	r3, [r3, #20]
 80171a2:	68fa      	ldr	r2, [r7, #12]
 80171a4:	6992      	ldr	r2, [r2, #24]
 80171a6:	9203      	str	r2, [sp, #12]
 80171a8:	68fa      	ldr	r2, [r7, #12]
 80171aa:	f10d 0e04 	add.w	lr, sp, #4
 80171ae:	320c      	adds	r2, #12
 80171b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171b4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80171b8:	9300      	str	r3, [sp, #0]
 80171ba:	4663      	mov	r3, ip
 80171bc:	4632      	mov	r2, r6
 80171be:	4629      	mov	r1, r5
 80171c0:	4620      	mov	r0, r4
 80171c2:	f7ff fc25 	bl	8016a10 <RegionCommonUpdateBandTimeOff>
 80171c6:	4602      	mov	r2, r0
 80171c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ca:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	69d8      	ldr	r0, [r3, #28]
 80171d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d2:	683a      	ldr	r2, [r7, #0]
 80171d4:	6879      	ldr	r1, [r7, #4]
 80171d6:	f7ff fef4 	bl	8016fc2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	781b      	ldrb	r3, [r3, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d004      	beq.n	80171ec <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80171e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171e4:	2200      	movs	r2, #0
 80171e6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80171e8:	2300      	movs	r3, #0
 80171ea:	e006      	b.n	80171fa <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80171ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d001      	beq.n	80171f8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80171f4:	230b      	movs	r3, #11
 80171f6:	e000      	b.n	80171fa <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80171f8:	230c      	movs	r3, #12
    }
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	371c      	adds	r7, #28
 80171fe:	46bd      	mov	sp, r7
 8017200:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017202 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8017202:	b5b0      	push	{r4, r5, r7, lr}
 8017204:	b086      	sub	sp, #24
 8017206:	af02      	add	r7, sp, #8
 8017208:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f993 2000 	ldrsb.w	r2, [r3]
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801721c:	429a      	cmp	r2, r3
 801721e:	d103      	bne.n	8017228 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017226:	e026      	b.n	8017276 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017228:	7bfb      	ldrb	r3, [r7, #15]
 801722a:	3b01      	subs	r3, #1
 801722c:	b2db      	uxtb	r3, r3
 801722e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017236:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801723a:	429a      	cmp	r2, r3
 801723c:	d019      	beq.n	8017272 <RegionCommonGetNextLowerTxDr+0x70>
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	78d8      	ldrb	r0, [r3, #3]
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	6859      	ldr	r1, [r3, #4]
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017252:	687a      	ldr	r2, [r7, #4]
 8017254:	6892      	ldr	r2, [r2, #8]
 8017256:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801725a:	9201      	str	r2, [sp, #4]
 801725c:	9300      	str	r3, [sp, #0]
 801725e:	462b      	mov	r3, r5
 8017260:	4622      	mov	r2, r4
 8017262:	f7ff fa92 	bl	801678a <RegionCommonChanVerifyDr>
 8017266:	4603      	mov	r3, r0
 8017268:	f083 0301 	eor.w	r3, r3, #1
 801726c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801726e:	2b00      	cmp	r3, #0
 8017270:	d1da      	bne.n	8017228 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017272:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8017276:	4618      	mov	r0, r3
 8017278:	3710      	adds	r7, #16
 801727a:	46bd      	mov	sp, r7
 801727c:	bdb0      	pop	{r4, r5, r7, pc}

0801727e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801727e:	b480      	push	{r7}
 8017280:	b083      	sub	sp, #12
 8017282:	af00      	add	r7, sp, #0
 8017284:	4603      	mov	r3, r0
 8017286:	460a      	mov	r2, r1
 8017288:	71fb      	strb	r3, [r7, #7]
 801728a:	4613      	mov	r3, r2
 801728c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801728e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017296:	4293      	cmp	r3, r2
 8017298:	bfb8      	it	lt
 801729a:	4613      	movlt	r3, r2
 801729c:	b25b      	sxtb	r3, r3
}
 801729e:	4618      	mov	r0, r3
 80172a0:	370c      	adds	r7, #12
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bc80      	pop	{r7}
 80172a6:	4770      	bx	lr

080172a8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80172a8:	b480      	push	{r7}
 80172aa:	b083      	sub	sp, #12
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	009b      	lsls	r3, r3, #2
 80172b6:	683a      	ldr	r2, [r7, #0]
 80172b8:	4413      	add	r3, r2
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	4a07      	ldr	r2, [pc, #28]	; (80172dc <RegionCommonGetBandwidth+0x34>)
 80172be:	4293      	cmp	r3, r2
 80172c0:	d004      	beq.n	80172cc <RegionCommonGetBandwidth+0x24>
 80172c2:	4a07      	ldr	r2, [pc, #28]	; (80172e0 <RegionCommonGetBandwidth+0x38>)
 80172c4:	4293      	cmp	r3, r2
 80172c6:	d003      	beq.n	80172d0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80172c8:	2300      	movs	r3, #0
 80172ca:	e002      	b.n	80172d2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80172cc:	2301      	movs	r3, #1
 80172ce:	e000      	b.n	80172d2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80172d0:	2302      	movs	r3, #2
    }
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	370c      	adds	r7, #12
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bc80      	pop	{r7}
 80172da:	4770      	bx	lr
 80172dc:	0003d090 	.word	0x0003d090
 80172e0:	0007a120 	.word	0x0007a120

080172e4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b086      	sub	sp, #24
 80172e8:	af04      	add	r7, sp, #16
 80172ea:	4603      	mov	r3, r0
 80172ec:	6039      	str	r1, [r7, #0]
 80172ee:	71fb      	strb	r3, [r7, #7]
 80172f0:	4613      	mov	r3, r2
 80172f2:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80172f4:	79fb      	ldrb	r3, [r7, #7]
 80172f6:	2b05      	cmp	r3, #5
 80172f8:	d810      	bhi.n	801731c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80172fa:	79fb      	ldrb	r3, [r7, #7]
 80172fc:	4a0f      	ldr	r2, [pc, #60]	; (801733c <RegionCommonRxConfigPrint+0x58>)
 80172fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017302:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017306:	9202      	str	r2, [sp, #8]
 8017308:	683a      	ldr	r2, [r7, #0]
 801730a:	9201      	str	r2, [sp, #4]
 801730c:	9300      	str	r3, [sp, #0]
 801730e:	4b0c      	ldr	r3, [pc, #48]	; (8017340 <RegionCommonRxConfigPrint+0x5c>)
 8017310:	2201      	movs	r2, #1
 8017312:	2100      	movs	r1, #0
 8017314:	2002      	movs	r0, #2
 8017316:	f005 fd67 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801731a:	e00a      	b.n	8017332 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801731c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017320:	9301      	str	r3, [sp, #4]
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	9300      	str	r3, [sp, #0]
 8017326:	4b07      	ldr	r3, [pc, #28]	; (8017344 <RegionCommonRxConfigPrint+0x60>)
 8017328:	2201      	movs	r2, #1
 801732a:	2100      	movs	r1, #0
 801732c:	2002      	movs	r0, #2
 801732e:	f005 fd5b 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
}
 8017332:	bf00      	nop
 8017334:	3708      	adds	r7, #8
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	20000118 	.word	0x20000118
 8017340:	0801d8c8 	.word	0x0801d8c8
 8017344:	0801d8e8 	.word	0x0801d8e8

08017348 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b084      	sub	sp, #16
 801734c:	af02      	add	r7, sp, #8
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	460b      	mov	r3, r1
 8017352:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017358:	9301      	str	r3, [sp, #4]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	9300      	str	r3, [sp, #0]
 801735e:	4b05      	ldr	r3, [pc, #20]	; (8017374 <RegionCommonTxConfigPrint+0x2c>)
 8017360:	2201      	movs	r2, #1
 8017362:	2100      	movs	r1, #0
 8017364:	2002      	movs	r0, #2
 8017366:	f005 fd3f 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
}
 801736a:	bf00      	nop
 801736c:	3708      	adds	r7, #8
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}
 8017372:	bf00      	nop
 8017374:	0801d904 	.word	0x0801d904

08017378 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017382:	4b2d      	ldr	r3, [pc, #180]	; (8017438 <VerifyRfFreq+0xc0>)
 8017384:	6a1b      	ldr	r3, [r3, #32]
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	4798      	blx	r3
 801738a:	4603      	mov	r3, r0
 801738c:	f083 0301 	eor.w	r3, r3, #1
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b00      	cmp	r3, #0
 8017394:	d001      	beq.n	801739a <VerifyRfFreq+0x22>
    {
        return false;
 8017396:	2300      	movs	r3, #0
 8017398:	e04a      	b.n	8017430 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	4a27      	ldr	r2, [pc, #156]	; (801743c <VerifyRfFreq+0xc4>)
 801739e:	4293      	cmp	r3, r2
 80173a0:	d307      	bcc.n	80173b2 <VerifyRfFreq+0x3a>
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	4a26      	ldr	r2, [pc, #152]	; (8017440 <VerifyRfFreq+0xc8>)
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d803      	bhi.n	80173b2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	2202      	movs	r2, #2
 80173ae:	701a      	strb	r2, [r3, #0]
 80173b0:	e03d      	b.n	801742e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	4a22      	ldr	r2, [pc, #136]	; (8017440 <VerifyRfFreq+0xc8>)
 80173b6:	4293      	cmp	r3, r2
 80173b8:	d907      	bls.n	80173ca <VerifyRfFreq+0x52>
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	4a21      	ldr	r2, [pc, #132]	; (8017444 <VerifyRfFreq+0xcc>)
 80173be:	4293      	cmp	r3, r2
 80173c0:	d803      	bhi.n	80173ca <VerifyRfFreq+0x52>
    {
        *band = 0;
 80173c2:	683b      	ldr	r3, [r7, #0]
 80173c4:	2200      	movs	r2, #0
 80173c6:	701a      	strb	r2, [r3, #0]
 80173c8:	e031      	b.n	801742e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	4a1d      	ldr	r2, [pc, #116]	; (8017444 <VerifyRfFreq+0xcc>)
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d907      	bls.n	80173e2 <VerifyRfFreq+0x6a>
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	4a1c      	ldr	r2, [pc, #112]	; (8017448 <VerifyRfFreq+0xd0>)
 80173d6:	4293      	cmp	r3, r2
 80173d8:	d803      	bhi.n	80173e2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	2201      	movs	r2, #1
 80173de:	701a      	strb	r2, [r3, #0]
 80173e0:	e025      	b.n	801742e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	4a19      	ldr	r2, [pc, #100]	; (801744c <VerifyRfFreq+0xd4>)
 80173e6:	4293      	cmp	r3, r2
 80173e8:	d907      	bls.n	80173fa <VerifyRfFreq+0x82>
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	4a18      	ldr	r2, [pc, #96]	; (8017450 <VerifyRfFreq+0xd8>)
 80173ee:	4293      	cmp	r3, r2
 80173f0:	d803      	bhi.n	80173fa <VerifyRfFreq+0x82>
    {
        *band = 5;
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	2205      	movs	r2, #5
 80173f6:	701a      	strb	r2, [r3, #0]
 80173f8:	e019      	b.n	801742e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	4a15      	ldr	r2, [pc, #84]	; (8017454 <VerifyRfFreq+0xdc>)
 80173fe:	4293      	cmp	r3, r2
 8017400:	d907      	bls.n	8017412 <VerifyRfFreq+0x9a>
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	4a14      	ldr	r2, [pc, #80]	; (8017458 <VerifyRfFreq+0xe0>)
 8017406:	4293      	cmp	r3, r2
 8017408:	d803      	bhi.n	8017412 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	2203      	movs	r2, #3
 801740e:	701a      	strb	r2, [r3, #0]
 8017410:	e00d      	b.n	801742e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	4a11      	ldr	r2, [pc, #68]	; (801745c <VerifyRfFreq+0xe4>)
 8017416:	4293      	cmp	r3, r2
 8017418:	d307      	bcc.n	801742a <VerifyRfFreq+0xb2>
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	4a10      	ldr	r2, [pc, #64]	; (8017460 <VerifyRfFreq+0xe8>)
 801741e:	4293      	cmp	r3, r2
 8017420:	d803      	bhi.n	801742a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8017422:	683b      	ldr	r3, [r7, #0]
 8017424:	2204      	movs	r2, #4
 8017426:	701a      	strb	r2, [r3, #0]
 8017428:	e001      	b.n	801742e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801742a:	2300      	movs	r3, #0
 801742c:	e000      	b.n	8017430 <VerifyRfFreq+0xb8>
    }
    return true;
 801742e:	2301      	movs	r3, #1
}
 8017430:	4618      	mov	r0, r3
 8017432:	3708      	adds	r7, #8
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}
 8017438:	0801dea4 	.word	0x0801dea4
 801743c:	337055c0 	.word	0x337055c0
 8017440:	338eda3f 	.word	0x338eda3f
 8017444:	33bca100 	.word	0x33bca100
 8017448:	33c5c8c0 	.word	0x33c5c8c0
 801744c:	33c74f5f 	.word	0x33c74f5f
 8017450:	33cef080 	.word	0x33cef080
 8017454:	33d1fdbf 	.word	0x33d1fdbf
 8017458:	33d5ce50 	.word	0x33d5ce50
 801745c:	33d691a0 	.word	0x33d691a0
 8017460:	33db2580 	.word	0x33db2580

08017464 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017464:	b590      	push	{r4, r7, lr}
 8017466:	b08b      	sub	sp, #44	; 0x2c
 8017468:	af04      	add	r7, sp, #16
 801746a:	4603      	mov	r3, r0
 801746c:	460a      	mov	r2, r1
 801746e:	71fb      	strb	r3, [r7, #7]
 8017470:	4613      	mov	r3, r2
 8017472:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8017474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017478:	4a1f      	ldr	r2, [pc, #124]	; (80174f8 <GetTimeOnAir+0x94>)
 801747a:	5cd3      	ldrb	r3, [r2, r3]
 801747c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801747e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017482:	491e      	ldr	r1, [pc, #120]	; (80174fc <GetTimeOnAir+0x98>)
 8017484:	4618      	mov	r0, r3
 8017486:	f7ff ff0f 	bl	80172a8 <RegionCommonGetBandwidth>
 801748a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801748c:	2300      	movs	r3, #0
 801748e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017494:	2b07      	cmp	r3, #7
 8017496:	d118      	bne.n	80174ca <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017498:	4b19      	ldr	r3, [pc, #100]	; (8017500 <GetTimeOnAir+0x9c>)
 801749a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801749c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80174a4:	fb02 f303 	mul.w	r3, r2, r3
 80174a8:	4619      	mov	r1, r3
 80174aa:	88bb      	ldrh	r3, [r7, #4]
 80174ac:	b2db      	uxtb	r3, r3
 80174ae:	2201      	movs	r2, #1
 80174b0:	9203      	str	r2, [sp, #12]
 80174b2:	9302      	str	r3, [sp, #8]
 80174b4:	2300      	movs	r3, #0
 80174b6:	9301      	str	r3, [sp, #4]
 80174b8:	2305      	movs	r3, #5
 80174ba:	9300      	str	r3, [sp, #0]
 80174bc:	2300      	movs	r3, #0
 80174be:	460a      	mov	r2, r1
 80174c0:	68f9      	ldr	r1, [r7, #12]
 80174c2:	2000      	movs	r0, #0
 80174c4:	47a0      	blx	r4
 80174c6:	6178      	str	r0, [r7, #20]
 80174c8:	e011      	b.n	80174ee <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80174ca:	4b0d      	ldr	r3, [pc, #52]	; (8017500 <GetTimeOnAir+0x9c>)
 80174cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80174ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80174d2:	88bb      	ldrh	r3, [r7, #4]
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	2101      	movs	r1, #1
 80174d8:	9103      	str	r1, [sp, #12]
 80174da:	9302      	str	r3, [sp, #8]
 80174dc:	2300      	movs	r3, #0
 80174de:	9301      	str	r3, [sp, #4]
 80174e0:	2308      	movs	r3, #8
 80174e2:	9300      	str	r3, [sp, #0]
 80174e4:	2301      	movs	r3, #1
 80174e6:	68f9      	ldr	r1, [r7, #12]
 80174e8:	2001      	movs	r0, #1
 80174ea:	47a0      	blx	r4
 80174ec:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80174ee:	697b      	ldr	r3, [r7, #20]
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	371c      	adds	r7, #28
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd90      	pop	{r4, r7, pc}
 80174f8:	0801de6c 	.word	0x0801de6c
 80174fc:	0801de74 	.word	0x0801de74
 8017500:	0801dea4 	.word	0x0801dea4

08017504 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b088      	sub	sp, #32
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801750c:	2300      	movs	r3, #0
 801750e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	781b      	ldrb	r3, [r3, #0]
 8017514:	3b01      	subs	r3, #1
 8017516:	2b37      	cmp	r3, #55	; 0x37
 8017518:	f200 8122 	bhi.w	8017760 <RegionEU868GetPhyParam+0x25c>
 801751c:	a201      	add	r2, pc, #4	; (adr r2, 8017524 <RegionEU868GetPhyParam+0x20>)
 801751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017522:	bf00      	nop
 8017524:	08017605 	.word	0x08017605
 8017528:	0801760b 	.word	0x0801760b
 801752c:	08017761 	.word	0x08017761
 8017530:	08017761 	.word	0x08017761
 8017534:	08017761 	.word	0x08017761
 8017538:	08017611 	.word	0x08017611
 801753c:	08017761 	.word	0x08017761
 8017540:	0801764b 	.word	0x0801764b
 8017544:	08017761 	.word	0x08017761
 8017548:	08017651 	.word	0x08017651
 801754c:	08017657 	.word	0x08017657
 8017550:	0801765d 	.word	0x0801765d
 8017554:	08017663 	.word	0x08017663
 8017558:	08017673 	.word	0x08017673
 801755c:	08017683 	.word	0x08017683
 8017560:	08017689 	.word	0x08017689
 8017564:	08017691 	.word	0x08017691
 8017568:	08017699 	.word	0x08017699
 801756c:	080176a1 	.word	0x080176a1
 8017570:	080176a9 	.word	0x080176a9
 8017574:	080176b1 	.word	0x080176b1
 8017578:	080176c5 	.word	0x080176c5
 801757c:	080176cb 	.word	0x080176cb
 8017580:	080176d1 	.word	0x080176d1
 8017584:	080176d7 	.word	0x080176d7
 8017588:	080176e3 	.word	0x080176e3
 801758c:	080176ef 	.word	0x080176ef
 8017590:	080176f5 	.word	0x080176f5
 8017594:	080176fd 	.word	0x080176fd
 8017598:	08017703 	.word	0x08017703
 801759c:	08017709 	.word	0x08017709
 80175a0:	08017711 	.word	0x08017711
 80175a4:	08017617 	.word	0x08017617
 80175a8:	08017761 	.word	0x08017761
 80175ac:	08017761 	.word	0x08017761
 80175b0:	08017761 	.word	0x08017761
 80175b4:	08017761 	.word	0x08017761
 80175b8:	08017761 	.word	0x08017761
 80175bc:	08017761 	.word	0x08017761
 80175c0:	08017761 	.word	0x08017761
 80175c4:	08017761 	.word	0x08017761
 80175c8:	08017761 	.word	0x08017761
 80175cc:	08017761 	.word	0x08017761
 80175d0:	08017761 	.word	0x08017761
 80175d4:	08017761 	.word	0x08017761
 80175d8:	08017761 	.word	0x08017761
 80175dc:	08017717 	.word	0x08017717
 80175e0:	0801771d 	.word	0x0801771d
 80175e4:	0801772b 	.word	0x0801772b
 80175e8:	08017761 	.word	0x08017761
 80175ec:	08017761 	.word	0x08017761
 80175f0:	08017731 	.word	0x08017731
 80175f4:	08017737 	.word	0x08017737
 80175f8:	08017761 	.word	0x08017761
 80175fc:	0801773d 	.word	0x0801773d
 8017600:	0801774d 	.word	0x0801774d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017604:	2300      	movs	r3, #0
 8017606:	61bb      	str	r3, [r7, #24]
            break;
 8017608:	e0ab      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801760a:	2300      	movs	r3, #0
 801760c:	61bb      	str	r3, [r7, #24]
            break;
 801760e:	e0a8      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017610:	2300      	movs	r3, #0
 8017612:	61bb      	str	r3, [r7, #24]
            break;
 8017614:	e0a5      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801761c:	733b      	strb	r3, [r7, #12]
 801761e:	2307      	movs	r3, #7
 8017620:	737b      	strb	r3, [r7, #13]
 8017622:	2300      	movs	r3, #0
 8017624:	73bb      	strb	r3, [r7, #14]
 8017626:	2310      	movs	r3, #16
 8017628:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801762a:	4b51      	ldr	r3, [pc, #324]	; (8017770 <RegionEU868GetPhyParam+0x26c>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017632:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017634:	4b4e      	ldr	r3, [pc, #312]	; (8017770 <RegionEU868GetPhyParam+0x26c>)
 8017636:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017638:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801763a:	f107 030c 	add.w	r3, r7, #12
 801763e:	4618      	mov	r0, r3
 8017640:	f7ff fddf 	bl	8017202 <RegionCommonGetNextLowerTxDr>
 8017644:	4603      	mov	r3, r0
 8017646:	61bb      	str	r3, [r7, #24]
            break;
 8017648:	e08b      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801764a:	2300      	movs	r3, #0
 801764c:	61bb      	str	r3, [r7, #24]
            break;
 801764e:	e088      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017650:	2300      	movs	r3, #0
 8017652:	61bb      	str	r3, [r7, #24]
            break;
 8017654:	e085      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017656:	2340      	movs	r3, #64	; 0x40
 8017658:	61bb      	str	r3, [r7, #24]
            break;
 801765a:	e082      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801765c:	2320      	movs	r3, #32
 801765e:	61bb      	str	r3, [r7, #24]
            break;
 8017660:	e07f      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017668:	461a      	mov	r2, r3
 801766a:	4b42      	ldr	r3, [pc, #264]	; (8017774 <RegionEU868GetPhyParam+0x270>)
 801766c:	5c9b      	ldrb	r3, [r3, r2]
 801766e:	61bb      	str	r3, [r7, #24]
            break;
 8017670:	e077      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017678:	461a      	mov	r2, r3
 801767a:	4b3f      	ldr	r3, [pc, #252]	; (8017778 <RegionEU868GetPhyParam+0x274>)
 801767c:	5c9b      	ldrb	r3, [r3, r2]
 801767e:	61bb      	str	r3, [r7, #24]
            break;
 8017680:	e06f      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017682:	2301      	movs	r3, #1
 8017684:	61bb      	str	r3, [r7, #24]
            break;
 8017686:	e06c      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017688:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801768c:	61bb      	str	r3, [r7, #24]
            break;
 801768e:	e068      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017694:	61bb      	str	r3, [r7, #24]
            break;
 8017696:	e064      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017698:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801769c:	61bb      	str	r3, [r7, #24]
            break;
 801769e:	e060      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80176a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80176a4:	61bb      	str	r3, [r7, #24]
            break;
 80176a6:	e05c      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80176a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80176ac:	61bb      	str	r3, [r7, #24]
            break;
 80176ae:	e058      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80176b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80176b4:	4831      	ldr	r0, [pc, #196]	; (801777c <RegionEU868GetPhyParam+0x278>)
 80176b6:	f001 f82b 	bl	8018710 <randr>
 80176ba:	4603      	mov	r3, r0
 80176bc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80176c0:	61bb      	str	r3, [r7, #24]
            break;
 80176c2:	e04e      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80176c4:	2300      	movs	r3, #0
 80176c6:	61bb      	str	r3, [r7, #24]
            break;
 80176c8:	e04b      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80176ca:	4b2d      	ldr	r3, [pc, #180]	; (8017780 <RegionEU868GetPhyParam+0x27c>)
 80176cc:	61bb      	str	r3, [r7, #24]
            break;
 80176ce:	e048      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80176d0:	2300      	movs	r3, #0
 80176d2:	61bb      	str	r3, [r7, #24]
            break;
 80176d4:	e045      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80176d6:	4b26      	ldr	r3, [pc, #152]	; (8017770 <RegionEU868GetPhyParam+0x26c>)
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80176de:	61bb      	str	r3, [r7, #24]
            break;
 80176e0:	e03f      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80176e2:	4b23      	ldr	r3, [pc, #140]	; (8017770 <RegionEU868GetPhyParam+0x26c>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80176ea:	61bb      	str	r3, [r7, #24]
            break;
 80176ec:	e039      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80176ee:	2310      	movs	r3, #16
 80176f0:	61bb      	str	r3, [r7, #24]
            break;
 80176f2:	e036      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80176f4:	4b1e      	ldr	r3, [pc, #120]	; (8017770 <RegionEU868GetPhyParam+0x26c>)
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	61bb      	str	r3, [r7, #24]
            break;
 80176fa:	e032      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80176fc:	2300      	movs	r3, #0
 80176fe:	61bb      	str	r3, [r7, #24]
            break;
 8017700:	e02f      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017702:	2300      	movs	r3, #0
 8017704:	61bb      	str	r3, [r7, #24]
            break;
 8017706:	e02c      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017708:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801770c:	61bb      	str	r3, [r7, #24]
            break;
 801770e:	e028      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017710:	4b1c      	ldr	r3, [pc, #112]	; (8017784 <RegionEU868GetPhyParam+0x280>)
 8017712:	61bb      	str	r3, [r7, #24]
            break;
 8017714:	e025      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017716:	4b1a      	ldr	r3, [pc, #104]	; (8017780 <RegionEU868GetPhyParam+0x27c>)
 8017718:	61bb      	str	r3, [r7, #24]
            break;
 801771a:	e022      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801771c:	2311      	movs	r3, #17
 801771e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017720:	2301      	movs	r3, #1
 8017722:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017724:	2300      	movs	r3, #0
 8017726:	76bb      	strb	r3, [r7, #26]
            break;
 8017728:	e01b      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801772a:	2303      	movs	r3, #3
 801772c:	61bb      	str	r3, [r7, #24]
            break;
 801772e:	e018      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017730:	4b13      	ldr	r3, [pc, #76]	; (8017780 <RegionEU868GetPhyParam+0x27c>)
 8017732:	61bb      	str	r3, [r7, #24]
            break;
 8017734:	e015      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017736:	2303      	movs	r3, #3
 8017738:	61bb      	str	r3, [r7, #24]
            break;
 801773a:	e012      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017742:	461a      	mov	r2, r3
 8017744:	4b10      	ldr	r3, [pc, #64]	; (8017788 <RegionEU868GetPhyParam+0x284>)
 8017746:	5c9b      	ldrb	r3, [r3, r2]
 8017748:	61bb      	str	r3, [r7, #24]
            break;
 801774a:	e00a      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017752:	490e      	ldr	r1, [pc, #56]	; (801778c <RegionEU868GetPhyParam+0x288>)
 8017754:	4618      	mov	r0, r3
 8017756:	f7ff fda7 	bl	80172a8 <RegionCommonGetBandwidth>
 801775a:	4603      	mov	r3, r0
 801775c:	61bb      	str	r3, [r7, #24]
            break;
 801775e:	e000      	b.n	8017762 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017760:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017762:	69bb      	ldr	r3, [r7, #24]
 8017764:	61fb      	str	r3, [r7, #28]
 8017766:	69fb      	ldr	r3, [r7, #28]
}
 8017768:	4618      	mov	r0, r3
 801776a:	3720      	adds	r7, #32
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}
 8017770:	2000203c 	.word	0x2000203c
 8017774:	0801de94 	.word	0x0801de94
 8017778:	0801de9c 	.word	0x0801de9c
 801777c:	fffffc18 	.word	0xfffffc18
 8017780:	33d3e608 	.word	0x33d3e608
 8017784:	4009999a 	.word	0x4009999a
 8017788:	0801de6c 	.word	0x0801de6c
 801778c:	0801de74 	.word	0x0801de74

08017790 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017790:	b590      	push	{r4, r7, lr}
 8017792:	b085      	sub	sp, #20
 8017794:	af02      	add	r7, sp, #8
 8017796:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017798:	4b11      	ldr	r3, [pc, #68]	; (80177e0 <RegionEU868SetBandTxDone+0x50>)
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	4b11      	ldr	r3, [pc, #68]	; (80177e4 <RegionEU868SetBandTxDone+0x54>)
 801779e:	6819      	ldr	r1, [r3, #0]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	4618      	mov	r0, r3
 80177a6:	4603      	mov	r3, r0
 80177a8:	005b      	lsls	r3, r3, #1
 80177aa:	4403      	add	r3, r0
 80177ac:	009b      	lsls	r3, r3, #2
 80177ae:	440b      	add	r3, r1
 80177b0:	3309      	adds	r3, #9
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	4619      	mov	r1, r3
 80177b6:	460b      	mov	r3, r1
 80177b8:	005b      	lsls	r3, r3, #1
 80177ba:	440b      	add	r3, r1
 80177bc:	00db      	lsls	r3, r3, #3
 80177be:	18d0      	adds	r0, r2, r3
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6899      	ldr	r1, [r3, #8]
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	785c      	ldrb	r4, [r3, #1]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	691a      	ldr	r2, [r3, #16]
 80177cc:	9200      	str	r2, [sp, #0]
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	4622      	mov	r2, r4
 80177d2:	f7ff f8ef 	bl	80169b4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80177d6:	bf00      	nop
 80177d8:	370c      	adds	r7, #12
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd90      	pop	{r4, r7, pc}
 80177de:	bf00      	nop
 80177e0:	20002040 	.word	0x20002040
 80177e4:	2000203c 	.word	0x2000203c

080177e8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b0b0      	sub	sp, #192	; 0xc0
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80177f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80177f4:	2290      	movs	r2, #144	; 0x90
 80177f6:	2100      	movs	r1, #0
 80177f8:	4618      	mov	r0, r3
 80177fa:	f005 fd9f 	bl	801d33c <memset>
 80177fe:	2364      	movs	r3, #100	; 0x64
 8017800:	863b      	strh	r3, [r7, #48]	; 0x30
 8017802:	2364      	movs	r3, #100	; 0x64
 8017804:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801780c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8017810:	230a      	movs	r3, #10
 8017812:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8017816:	2364      	movs	r3, #100	; 0x64
 8017818:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801781c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017820:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	7b1b      	ldrb	r3, [r3, #12]
 8017828:	2b02      	cmp	r3, #2
 801782a:	d05d      	beq.n	80178e8 <RegionEU868InitDefaults+0x100>
 801782c:	2b02      	cmp	r3, #2
 801782e:	dc6a      	bgt.n	8017906 <RegionEU868InitDefaults+0x11e>
 8017830:	2b00      	cmp	r3, #0
 8017832:	d002      	beq.n	801783a <RegionEU868InitDefaults+0x52>
 8017834:	2b01      	cmp	r3, #1
 8017836:	d03e      	beq.n	80178b6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017838:	e065      	b.n	8017906 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d062      	beq.n	8017908 <RegionEU868InitDefaults+0x120>
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d05e      	beq.n	8017908 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	4a30      	ldr	r2, [pc, #192]	; (8017910 <RegionEU868InitDefaults+0x128>)
 8017850:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	689b      	ldr	r3, [r3, #8]
 8017856:	4a2f      	ldr	r2, [pc, #188]	; (8017914 <RegionEU868InitDefaults+0x12c>)
 8017858:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801785a:	4b2e      	ldr	r3, [pc, #184]	; (8017914 <RegionEU868InitDefaults+0x12c>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8017862:	2290      	movs	r2, #144	; 0x90
 8017864:	4618      	mov	r0, r3
 8017866:	f000 ff6a 	bl	801873e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801786a:	4b29      	ldr	r3, [pc, #164]	; (8017910 <RegionEU868InitDefaults+0x128>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4a2a      	ldr	r2, [pc, #168]	; (8017918 <RegionEU868InitDefaults+0x130>)
 8017870:	ca07      	ldmia	r2, {r0, r1, r2}
 8017872:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017876:	4b26      	ldr	r3, [pc, #152]	; (8017910 <RegionEU868InitDefaults+0x128>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	4a28      	ldr	r2, [pc, #160]	; (801791c <RegionEU868InitDefaults+0x134>)
 801787c:	330c      	adds	r3, #12
 801787e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017880:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017884:	4b22      	ldr	r3, [pc, #136]	; (8017910 <RegionEU868InitDefaults+0x128>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	4a25      	ldr	r2, [pc, #148]	; (8017920 <RegionEU868InitDefaults+0x138>)
 801788a:	3318      	adds	r3, #24
 801788c:	ca07      	ldmia	r2, {r0, r1, r2}
 801788e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017892:	4b1f      	ldr	r3, [pc, #124]	; (8017910 <RegionEU868InitDefaults+0x128>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	2207      	movs	r2, #7
 8017898:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801789c:	4b1c      	ldr	r3, [pc, #112]	; (8017910 <RegionEU868InitDefaults+0x128>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80178a4:	4b1a      	ldr	r3, [pc, #104]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80178ac:	2201      	movs	r2, #1
 80178ae:	4619      	mov	r1, r3
 80178b0:	f7ff f85a 	bl	8016968 <RegionCommonChanMaskCopy>
 80178b4:	e028      	b.n	8017908 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80178b6:	4b16      	ldr	r3, [pc, #88]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	2200      	movs	r2, #0
 80178bc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80178be:	4b14      	ldr	r3, [pc, #80]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	2200      	movs	r2, #0
 80178c4:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80178c6:	4b12      	ldr	r3, [pc, #72]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	2200      	movs	r2, #0
 80178cc:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80178ce:	4b10      	ldr	r3, [pc, #64]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80178d6:	4b0e      	ldr	r3, [pc, #56]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80178de:	2201      	movs	r2, #1
 80178e0:	4619      	mov	r1, r3
 80178e2:	f7ff f841 	bl	8016968 <RegionCommonChanMaskCopy>
            break;
 80178e6:	e00f      	b.n	8017908 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80178e8:	4b09      	ldr	r3, [pc, #36]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 80178f0:	4b07      	ldr	r3, [pc, #28]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 80178f8:	4b05      	ldr	r3, [pc, #20]	; (8017910 <RegionEU868InitDefaults+0x128>)
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	430a      	orrs	r2, r1
 80178fe:	b292      	uxth	r2, r2
 8017900:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8017904:	e000      	b.n	8017908 <RegionEU868InitDefaults+0x120>
            break;
 8017906:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017908:	37c0      	adds	r7, #192	; 0xc0
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}
 801790e:	bf00      	nop
 8017910:	2000203c 	.word	0x2000203c
 8017914:	20002040 	.word	0x20002040
 8017918:	0801d920 	.word	0x0801d920
 801791c:	0801d92c 	.word	0x0801d92c
 8017920:	0801d938 	.word	0x0801d938

08017924 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b084      	sub	sp, #16
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	460b      	mov	r3, r1
 801792e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017930:	78fb      	ldrb	r3, [r7, #3]
 8017932:	2b0f      	cmp	r3, #15
 8017934:	d86c      	bhi.n	8017a10 <RegionEU868Verify+0xec>
 8017936:	a201      	add	r2, pc, #4	; (adr r2, 801793c <RegionEU868Verify+0x18>)
 8017938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801793c:	0801797d 	.word	0x0801797d
 8017940:	08017a11 	.word	0x08017a11
 8017944:	08017a11 	.word	0x08017a11
 8017948:	08017a11 	.word	0x08017a11
 801794c:	08017a11 	.word	0x08017a11
 8017950:	08017995 	.word	0x08017995
 8017954:	080179b3 	.word	0x080179b3
 8017958:	080179d1 	.word	0x080179d1
 801795c:	08017a11 	.word	0x08017a11
 8017960:	080179ef 	.word	0x080179ef
 8017964:	080179ef 	.word	0x080179ef
 8017968:	08017a11 	.word	0x08017a11
 801796c:	08017a11 	.word	0x08017a11
 8017970:	08017a11 	.word	0x08017a11
 8017974:	08017a11 	.word	0x08017a11
 8017978:	08017a0d 	.word	0x08017a0d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801797c:	2300      	movs	r3, #0
 801797e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	f107 020f 	add.w	r2, r7, #15
 8017988:	4611      	mov	r1, r2
 801798a:	4618      	mov	r0, r3
 801798c:	f7ff fcf4 	bl	8017378 <VerifyRfFreq>
 8017990:	4603      	mov	r3, r0
 8017992:	e03e      	b.n	8017a12 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	f993 3000 	ldrsb.w	r3, [r3]
 801799a:	2207      	movs	r2, #7
 801799c:	2100      	movs	r1, #0
 801799e:	4618      	mov	r0, r3
 80179a0:	f7fe ff65 	bl	801686e <RegionCommonValueInRange>
 80179a4:	4603      	mov	r3, r0
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	bf14      	ite	ne
 80179aa:	2301      	movne	r3, #1
 80179ac:	2300      	moveq	r3, #0
 80179ae:	b2db      	uxtb	r3, r3
 80179b0:	e02f      	b.n	8017a12 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	f993 3000 	ldrsb.w	r3, [r3]
 80179b8:	2205      	movs	r2, #5
 80179ba:	2100      	movs	r1, #0
 80179bc:	4618      	mov	r0, r3
 80179be:	f7fe ff56 	bl	801686e <RegionCommonValueInRange>
 80179c2:	4603      	mov	r3, r0
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	bf14      	ite	ne
 80179c8:	2301      	movne	r3, #1
 80179ca:	2300      	moveq	r3, #0
 80179cc:	b2db      	uxtb	r3, r3
 80179ce:	e020      	b.n	8017a12 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f993 3000 	ldrsb.w	r3, [r3]
 80179d6:	2207      	movs	r2, #7
 80179d8:	2100      	movs	r1, #0
 80179da:	4618      	mov	r0, r3
 80179dc:	f7fe ff47 	bl	801686e <RegionCommonValueInRange>
 80179e0:	4603      	mov	r3, r0
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	bf14      	ite	ne
 80179e6:	2301      	movne	r3, #1
 80179e8:	2300      	moveq	r3, #0
 80179ea:	b2db      	uxtb	r3, r3
 80179ec:	e011      	b.n	8017a12 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f993 3000 	ldrsb.w	r3, [r3]
 80179f4:	2207      	movs	r2, #7
 80179f6:	2100      	movs	r1, #0
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7fe ff38 	bl	801686e <RegionCommonValueInRange>
 80179fe:	4603      	mov	r3, r0
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	bf14      	ite	ne
 8017a04:	2301      	movne	r3, #1
 8017a06:	2300      	moveq	r3, #0
 8017a08:	b2db      	uxtb	r3, r3
 8017a0a:	e002      	b.n	8017a12 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	e000      	b.n	8017a12 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017a10:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3710      	adds	r7, #16
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
 8017a1a:	bf00      	nop

08017a1c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b08a      	sub	sp, #40	; 0x28
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017a24:	2350      	movs	r3, #80	; 0x50
 8017a26:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	7a1b      	ldrb	r3, [r3, #8]
 8017a2e:	2b10      	cmp	r3, #16
 8017a30:	d162      	bne.n	8017af8 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	685b      	ldr	r3, [r3, #4]
 8017a36:	330f      	adds	r3, #15
 8017a38:	781b      	ldrb	r3, [r3, #0]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d15e      	bne.n	8017afc <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017a3e:	2300      	movs	r3, #0
 8017a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a44:	2303      	movs	r3, #3
 8017a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017a4a:	e050      	b.n	8017aee <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017a50:	2b07      	cmp	r3, #7
 8017a52:	d824      	bhi.n	8017a9e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	685a      	ldr	r2, [r3, #4]
 8017a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a5c:	4413      	add	r3, r2
 8017a5e:	781b      	ldrb	r3, [r3, #0]
 8017a60:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017a62:	69ba      	ldr	r2, [r7, #24]
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	6859      	ldr	r1, [r3, #4]
 8017a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a6c:	3301      	adds	r3, #1
 8017a6e:	440b      	add	r3, r1
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	021b      	lsls	r3, r3, #8
 8017a74:	4313      	orrs	r3, r2
 8017a76:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017a78:	69ba      	ldr	r2, [r7, #24]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	6859      	ldr	r1, [r3, #4]
 8017a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a82:	3302      	adds	r3, #2
 8017a84:	440b      	add	r3, r1
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	041b      	lsls	r3, r3, #16
 8017a8a:	4313      	orrs	r3, r2
 8017a8c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8017a8e:	69bb      	ldr	r3, [r7, #24]
 8017a90:	2264      	movs	r2, #100	; 0x64
 8017a92:	fb02 f303 	mul.w	r3, r2, r3
 8017a96:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017a98:	2300      	movs	r3, #0
 8017a9a:	61fb      	str	r3, [r7, #28]
 8017a9c:	e006      	b.n	8017aac <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8017aac:	69bb      	ldr	r3, [r7, #24]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d00b      	beq.n	8017aca <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8017ab2:	f107 0318 	add.w	r3, r7, #24
 8017ab6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8017ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017abc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017abe:	f107 0310 	add.w	r3, r7, #16
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f000 fd0e 	bl	80184e4 <RegionEU868ChannelAdd>
 8017ac8:	e007      	b.n	8017ada <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017aca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ace:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8017ad0:	f107 030c 	add.w	r3, r7, #12
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f000 fda7 	bl	8018628 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ade:	3303      	adds	r3, #3
 8017ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ae8:	3301      	adds	r3, #1
 8017aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017aee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017af2:	2b0f      	cmp	r3, #15
 8017af4:	d9aa      	bls.n	8017a4c <RegionEU868ApplyCFList+0x30>
 8017af6:	e002      	b.n	8017afe <RegionEU868ApplyCFList+0xe2>
        return;
 8017af8:	bf00      	nop
 8017afa:	e000      	b.n	8017afe <RegionEU868ApplyCFList+0xe2>
        return;
 8017afc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017afe:	3728      	adds	r7, #40	; 0x28
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	791b      	ldrb	r3, [r3, #4]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d002      	beq.n	8017b1a <RegionEU868ChanMaskSet+0x16>
 8017b14:	2b01      	cmp	r3, #1
 8017b16:	d00b      	beq.n	8017b30 <RegionEU868ChanMaskSet+0x2c>
 8017b18:	e015      	b.n	8017b46 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017b1a:	4b0e      	ldr	r3, [pc, #56]	; (8017b54 <RegionEU868ChanMaskSet+0x50>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	2201      	movs	r2, #1
 8017b28:	4619      	mov	r1, r3
 8017b2a:	f7fe ff1d 	bl	8016968 <RegionCommonChanMaskCopy>
            break;
 8017b2e:	e00c      	b.n	8017b4a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017b30:	4b08      	ldr	r3, [pc, #32]	; (8017b54 <RegionEU868ChanMaskSet+0x50>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	2201      	movs	r2, #1
 8017b3e:	4619      	mov	r1, r3
 8017b40:	f7fe ff12 	bl	8016968 <RegionCommonChanMaskCopy>
            break;
 8017b44:	e001      	b.n	8017b4a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8017b46:	2300      	movs	r3, #0
 8017b48:	e000      	b.n	8017b4c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8017b4a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3708      	adds	r7, #8
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	2000203c 	.word	0x2000203c

08017b58 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b088      	sub	sp, #32
 8017b5c:	af02      	add	r7, sp, #8
 8017b5e:	60ba      	str	r2, [r7, #8]
 8017b60:	607b      	str	r3, [r7, #4]
 8017b62:	4603      	mov	r3, r0
 8017b64:	73fb      	strb	r3, [r7, #15]
 8017b66:	460b      	mov	r3, r1
 8017b68:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b72:	2b07      	cmp	r3, #7
 8017b74:	bfa8      	it	ge
 8017b76:	2307      	movge	r3, #7
 8017b78:	b25a      	sxtb	r2, r3
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b84:	491e      	ldr	r1, [pc, #120]	; (8017c00 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7ff fb8e 	bl	80172a8 <RegionCommonGetBandwidth>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	b2da      	uxtb	r2, r3
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b9a:	2b07      	cmp	r3, #7
 8017b9c:	d10a      	bne.n	8017bb4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ba4:	461a      	mov	r2, r3
 8017ba6:	4b17      	ldr	r3, [pc, #92]	; (8017c04 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017ba8:	5c9b      	ldrb	r3, [r3, r2]
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7ff f910 	bl	8016dd0 <RegionCommonComputeSymbolTimeFsk>
 8017bb0:	6178      	str	r0, [r7, #20]
 8017bb2:	e011      	b.n	8017bd8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bba:	461a      	mov	r2, r3
 8017bbc:	4b11      	ldr	r3, [pc, #68]	; (8017c04 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017bbe:	5c9a      	ldrb	r2, [r3, r2]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bc6:	4619      	mov	r1, r3
 8017bc8:	4b0d      	ldr	r3, [pc, #52]	; (8017c00 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017bca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017bce:	4619      	mov	r1, r3
 8017bd0:	4610      	mov	r0, r2
 8017bd2:	f7ff f8e7 	bl	8016da4 <RegionCommonComputeSymbolTimeLoRa>
 8017bd6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017bd8:	4b0b      	ldr	r3, [pc, #44]	; (8017c08 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8017bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017bdc:	4798      	blx	r3
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	3308      	adds	r3, #8
 8017be2:	687a      	ldr	r2, [r7, #4]
 8017be4:	320c      	adds	r2, #12
 8017be6:	7bb9      	ldrb	r1, [r7, #14]
 8017be8:	9201      	str	r2, [sp, #4]
 8017bea:	9300      	str	r3, [sp, #0]
 8017bec:	4603      	mov	r3, r0
 8017bee:	68ba      	ldr	r2, [r7, #8]
 8017bf0:	6978      	ldr	r0, [r7, #20]
 8017bf2:	f7ff f8fd 	bl	8016df0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017bf6:	bf00      	nop
 8017bf8:	3718      	adds	r7, #24
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	0801de74 	.word	0x0801de74
 8017c04:	0801de6c 	.word	0x0801de6c
 8017c08:	0801dea4 	.word	0x0801dea4

08017c0c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017c0c:	b5b0      	push	{r4, r5, r7, lr}
 8017c0e:	b090      	sub	sp, #64	; 0x40
 8017c10:	af0a      	add	r7, sp, #40	; 0x28
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	785b      	ldrb	r3, [r3, #1]
 8017c1a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8017c20:	2300      	movs	r3, #0
 8017c22:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	685b      	ldr	r3, [r3, #4]
 8017c28:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017c2a:	4b5a      	ldr	r3, [pc, #360]	; (8017d94 <RegionEU868RxConfig+0x188>)
 8017c2c:	685b      	ldr	r3, [r3, #4]
 8017c2e:	4798      	blx	r3
 8017c30:	4603      	mov	r3, r0
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d001      	beq.n	8017c3a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017c36:	2300      	movs	r3, #0
 8017c38:	e0a8      	b.n	8017d8c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	7cdb      	ldrb	r3, [r3, #19]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d126      	bne.n	8017c90 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8017c42:	4b55      	ldr	r3, [pc, #340]	; (8017d98 <RegionEU868RxConfig+0x18c>)
 8017c44:	681a      	ldr	r2, [r3, #0]
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	781b      	ldrb	r3, [r3, #0]
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	005b      	lsls	r3, r3, #1
 8017c50:	440b      	add	r3, r1
 8017c52:	009b      	lsls	r3, r3, #2
 8017c54:	4413      	add	r3, r2
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017c5a:	4b4f      	ldr	r3, [pc, #316]	; (8017d98 <RegionEU868RxConfig+0x18c>)
 8017c5c:	681a      	ldr	r2, [r3, #0]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	781b      	ldrb	r3, [r3, #0]
 8017c62:	4619      	mov	r1, r3
 8017c64:	460b      	mov	r3, r1
 8017c66:	005b      	lsls	r3, r3, #1
 8017c68:	440b      	add	r3, r1
 8017c6a:	009b      	lsls	r3, r3, #2
 8017c6c:	4413      	add	r3, r2
 8017c6e:	3304      	adds	r3, #4
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d00c      	beq.n	8017c90 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017c76:	4b48      	ldr	r3, [pc, #288]	; (8017d98 <RegionEU868RxConfig+0x18c>)
 8017c78:	681a      	ldr	r2, [r3, #0]
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	781b      	ldrb	r3, [r3, #0]
 8017c7e:	4619      	mov	r1, r3
 8017c80:	460b      	mov	r3, r1
 8017c82:	005b      	lsls	r3, r3, #1
 8017c84:	440b      	add	r3, r1
 8017c86:	009b      	lsls	r3, r3, #2
 8017c88:	4413      	add	r3, r2
 8017c8a:	3304      	adds	r3, #4
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c94:	4a41      	ldr	r2, [pc, #260]	; (8017d9c <RegionEU868RxConfig+0x190>)
 8017c96:	5cd3      	ldrb	r3, [r2, r3]
 8017c98:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017c9a:	4b3e      	ldr	r3, [pc, #248]	; (8017d94 <RegionEU868RxConfig+0x188>)
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	6938      	ldr	r0, [r7, #16]
 8017ca0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ca6:	2b07      	cmp	r3, #7
 8017ca8:	d128      	bne.n	8017cfc <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8017caa:	2300      	movs	r3, #0
 8017cac:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017cae:	4b39      	ldr	r3, [pc, #228]	; (8017d94 <RegionEU868RxConfig+0x188>)
 8017cb0:	699c      	ldr	r4, [r3, #24]
 8017cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017cba:	fb02 f303 	mul.w	r3, r2, r3
 8017cbe:	4619      	mov	r1, r3
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	689b      	ldr	r3, [r3, #8]
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	687a      	ldr	r2, [r7, #4]
 8017cc8:	7c92      	ldrb	r2, [r2, #18]
 8017cca:	7df8      	ldrb	r0, [r7, #23]
 8017ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8017cce:	2200      	movs	r2, #0
 8017cd0:	9208      	str	r2, [sp, #32]
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	9207      	str	r2, [sp, #28]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	9206      	str	r2, [sp, #24]
 8017cda:	2201      	movs	r2, #1
 8017cdc:	9205      	str	r2, [sp, #20]
 8017cde:	2200      	movs	r2, #0
 8017ce0:	9204      	str	r2, [sp, #16]
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	9203      	str	r2, [sp, #12]
 8017ce6:	9302      	str	r3, [sp, #8]
 8017ce8:	2305      	movs	r3, #5
 8017cea:	9301      	str	r3, [sp, #4]
 8017cec:	4b2c      	ldr	r3, [pc, #176]	; (8017da0 <RegionEU868RxConfig+0x194>)
 8017cee:	9300      	str	r3, [sp, #0]
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	460a      	mov	r2, r1
 8017cf4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017cf8:	47a0      	blx	r4
 8017cfa:	e024      	b.n	8017d46 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017d00:	4b24      	ldr	r3, [pc, #144]	; (8017d94 <RegionEU868RxConfig+0x188>)
 8017d02:	699c      	ldr	r4, [r3, #24]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	789b      	ldrb	r3, [r3, #2]
 8017d08:	461d      	mov	r5, r3
 8017d0a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	689b      	ldr	r3, [r3, #8]
 8017d12:	b29b      	uxth	r3, r3
 8017d14:	687a      	ldr	r2, [r7, #4]
 8017d16:	7c92      	ldrb	r2, [r2, #18]
 8017d18:	7df8      	ldrb	r0, [r7, #23]
 8017d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8017d1c:	2201      	movs	r2, #1
 8017d1e:	9208      	str	r2, [sp, #32]
 8017d20:	2200      	movs	r2, #0
 8017d22:	9207      	str	r2, [sp, #28]
 8017d24:	2200      	movs	r2, #0
 8017d26:	9206      	str	r2, [sp, #24]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	9205      	str	r2, [sp, #20]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	9204      	str	r2, [sp, #16]
 8017d30:	2200      	movs	r2, #0
 8017d32:	9203      	str	r2, [sp, #12]
 8017d34:	9302      	str	r3, [sp, #8]
 8017d36:	2308      	movs	r3, #8
 8017d38:	9301      	str	r3, [sp, #4]
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	9300      	str	r3, [sp, #0]
 8017d3e:	2301      	movs	r3, #1
 8017d40:	460a      	mov	r2, r1
 8017d42:	4629      	mov	r1, r5
 8017d44:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	7c5b      	ldrb	r3, [r3, #17]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d005      	beq.n	8017d5a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d52:	4a14      	ldr	r2, [pc, #80]	; (8017da4 <RegionEU868RxConfig+0x198>)
 8017d54:	5cd3      	ldrb	r3, [r2, r3]
 8017d56:	75bb      	strb	r3, [r7, #22]
 8017d58:	e004      	b.n	8017d64 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d5e:	4a12      	ldr	r2, [pc, #72]	; (8017da8 <RegionEU868RxConfig+0x19c>)
 8017d60:	5cd3      	ldrb	r3, [r2, r3]
 8017d62:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017d64:	4b0b      	ldr	r3, [pc, #44]	; (8017d94 <RegionEU868RxConfig+0x188>)
 8017d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d68:	7dba      	ldrb	r2, [r7, #22]
 8017d6a:	320d      	adds	r2, #13
 8017d6c:	b2d1      	uxtb	r1, r2
 8017d6e:	7dfa      	ldrb	r2, [r7, #23]
 8017d70:	4610      	mov	r0, r2
 8017d72:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	7cdb      	ldrb	r3, [r3, #19]
 8017d78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017d7c:	6939      	ldr	r1, [r7, #16]
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7ff fab0 	bl	80172e4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	7bfa      	ldrb	r2, [r7, #15]
 8017d88:	701a      	strb	r2, [r3, #0]
    return true;
 8017d8a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3718      	adds	r7, #24
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bdb0      	pop	{r4, r5, r7, pc}
 8017d94:	0801dea4 	.word	0x0801dea4
 8017d98:	2000203c 	.word	0x2000203c
 8017d9c:	0801de6c 	.word	0x0801de6c
 8017da0:	00014585 	.word	0x00014585
 8017da4:	0801de9c 	.word	0x0801de9c
 8017da8:	0801de94 	.word	0x0801de94

08017dac <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017dac:	b590      	push	{r4, r7, lr}
 8017dae:	b093      	sub	sp, #76	; 0x4c
 8017db0:	af0a      	add	r7, sp, #40	; 0x28
 8017db2:	60f8      	str	r0, [r7, #12]
 8017db4:	60b9      	str	r1, [r7, #8]
 8017db6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dbe:	461a      	mov	r2, r3
 8017dc0:	4b5d      	ldr	r3, [pc, #372]	; (8017f38 <RegionEU868TxConfig+0x18c>)
 8017dc2:	5c9b      	ldrb	r3, [r3, r2]
 8017dc4:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017dcc:	4b5b      	ldr	r3, [pc, #364]	; (8017f3c <RegionEU868TxConfig+0x190>)
 8017dce:	681a      	ldr	r2, [r3, #0]
 8017dd0:	4b5b      	ldr	r3, [pc, #364]	; (8017f40 <RegionEU868TxConfig+0x194>)
 8017dd2:	6819      	ldr	r1, [r3, #0]
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	781b      	ldrb	r3, [r3, #0]
 8017dd8:	461c      	mov	r4, r3
 8017dda:	4623      	mov	r3, r4
 8017ddc:	005b      	lsls	r3, r3, #1
 8017dde:	4423      	add	r3, r4
 8017de0:	009b      	lsls	r3, r3, #2
 8017de2:	440b      	add	r3, r1
 8017de4:	3309      	adds	r3, #9
 8017de6:	781b      	ldrb	r3, [r3, #0]
 8017de8:	4619      	mov	r1, r3
 8017dea:	460b      	mov	r3, r1
 8017dec:	005b      	lsls	r3, r3, #1
 8017dee:	440b      	add	r3, r1
 8017df0:	00db      	lsls	r3, r3, #3
 8017df2:	4413      	add	r3, r2
 8017df4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017df8:	4619      	mov	r1, r3
 8017dfa:	f7ff fa40 	bl	801727e <RegionCommonLimitTxPower>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e08:	494e      	ldr	r1, [pc, #312]	; (8017f44 <RegionEU868TxConfig+0x198>)
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f7ff fa4c 	bl	80172a8 <RegionCommonGetBandwidth>
 8017e10:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017e12:	2300      	movs	r3, #0
 8017e14:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	6859      	ldr	r1, [r3, #4]
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	689a      	ldr	r2, [r3, #8]
 8017e1e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7ff f89c 	bl	8016f60 <RegionCommonComputeTxPower>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017e2c:	4b46      	ldr	r3, [pc, #280]	; (8017f48 <RegionEU868TxConfig+0x19c>)
 8017e2e:	68da      	ldr	r2, [r3, #12]
 8017e30:	4b43      	ldr	r3, [pc, #268]	; (8017f40 <RegionEU868TxConfig+0x194>)
 8017e32:	6819      	ldr	r1, [r3, #0]
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	4618      	mov	r0, r3
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	005b      	lsls	r3, r3, #1
 8017e3e:	4403      	add	r3, r0
 8017e40:	009b      	lsls	r3, r3, #2
 8017e42:	440b      	add	r3, r1
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	4618      	mov	r0, r3
 8017e48:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e50:	2b07      	cmp	r3, #7
 8017e52:	d124      	bne.n	8017e9e <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017e54:	2300      	movs	r3, #0
 8017e56:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017e58:	4b3b      	ldr	r3, [pc, #236]	; (8017f48 <RegionEU868TxConfig+0x19c>)
 8017e5a:	69dc      	ldr	r4, [r3, #28]
 8017e5c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017e64:	fb02 f303 	mul.w	r3, r2, r3
 8017e68:	461a      	mov	r2, r3
 8017e6a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017e6e:	7ff8      	ldrb	r0, [r7, #31]
 8017e70:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017e74:	9308      	str	r3, [sp, #32]
 8017e76:	2300      	movs	r3, #0
 8017e78:	9307      	str	r3, [sp, #28]
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	9306      	str	r3, [sp, #24]
 8017e7e:	2300      	movs	r3, #0
 8017e80:	9305      	str	r3, [sp, #20]
 8017e82:	2301      	movs	r3, #1
 8017e84:	9304      	str	r3, [sp, #16]
 8017e86:	2300      	movs	r3, #0
 8017e88:	9303      	str	r3, [sp, #12]
 8017e8a:	2305      	movs	r3, #5
 8017e8c:	9302      	str	r3, [sp, #8]
 8017e8e:	2300      	movs	r3, #0
 8017e90:	9301      	str	r3, [sp, #4]
 8017e92:	9200      	str	r2, [sp, #0]
 8017e94:	69bb      	ldr	r3, [r7, #24]
 8017e96:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017e9a:	47a0      	blx	r4
 8017e9c:	e01d      	b.n	8017eda <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8017e9e:	2301      	movs	r3, #1
 8017ea0:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017ea2:	4b29      	ldr	r3, [pc, #164]	; (8017f48 <RegionEU868TxConfig+0x19c>)
 8017ea4:	69dc      	ldr	r4, [r3, #28]
 8017ea6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017eaa:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017eae:	7ff8      	ldrb	r0, [r7, #31]
 8017eb0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017eb4:	9208      	str	r2, [sp, #32]
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	9207      	str	r2, [sp, #28]
 8017eba:	2200      	movs	r2, #0
 8017ebc:	9206      	str	r2, [sp, #24]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	9205      	str	r2, [sp, #20]
 8017ec2:	2201      	movs	r2, #1
 8017ec4:	9204      	str	r2, [sp, #16]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	9203      	str	r2, [sp, #12]
 8017eca:	2208      	movs	r2, #8
 8017ecc:	9202      	str	r2, [sp, #8]
 8017ece:	2201      	movs	r2, #1
 8017ed0:	9201      	str	r2, [sp, #4]
 8017ed2:	9300      	str	r3, [sp, #0]
 8017ed4:	69bb      	ldr	r3, [r7, #24]
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017eda:	4b19      	ldr	r3, [pc, #100]	; (8017f40 <RegionEU868TxConfig+0x194>)
 8017edc:	681a      	ldr	r2, [r3, #0]
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	781b      	ldrb	r3, [r3, #0]
 8017ee2:	4619      	mov	r1, r3
 8017ee4:	460b      	mov	r3, r1
 8017ee6:	005b      	lsls	r3, r3, #1
 8017ee8:	440b      	add	r3, r1
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	4413      	add	r3, r2
 8017eee:	681a      	ldr	r2, [r3, #0]
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	4610      	mov	r0, r2
 8017efa:	f7ff fa25 	bl	8017348 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	899b      	ldrh	r3, [r3, #12]
 8017f08:	4619      	mov	r1, r3
 8017f0a:	4610      	mov	r0, r2
 8017f0c:	f7ff faaa 	bl	8017464 <GetTimeOnAir>
 8017f10:	4602      	mov	r2, r0
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017f16:	4b0c      	ldr	r3, [pc, #48]	; (8017f48 <RegionEU868TxConfig+0x19c>)
 8017f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f1a:	68fa      	ldr	r2, [r7, #12]
 8017f1c:	8992      	ldrh	r2, [r2, #12]
 8017f1e:	b2d1      	uxtb	r1, r2
 8017f20:	7ffa      	ldrb	r2, [r7, #31]
 8017f22:	4610      	mov	r0, r2
 8017f24:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	7f7a      	ldrb	r2, [r7, #29]
 8017f2a:	701a      	strb	r2, [r3, #0]
    return true;
 8017f2c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	3724      	adds	r7, #36	; 0x24
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd90      	pop	{r4, r7, pc}
 8017f36:	bf00      	nop
 8017f38:	0801de6c 	.word	0x0801de6c
 8017f3c:	20002040 	.word	0x20002040
 8017f40:	2000203c 	.word	0x2000203c
 8017f44:	0801de74 	.word	0x0801de74
 8017f48:	0801dea4 	.word	0x0801dea4

08017f4c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017f4c:	b590      	push	{r4, r7, lr}
 8017f4e:	b093      	sub	sp, #76	; 0x4c
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	60f8      	str	r0, [r7, #12]
 8017f54:	60b9      	str	r1, [r7, #8]
 8017f56:	607a      	str	r2, [r7, #4]
 8017f58:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017f5a:	2307      	movs	r3, #7
 8017f5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017f60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017f64:	2200      	movs	r2, #0
 8017f66:	601a      	str	r2, [r3, #0]
 8017f68:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017f70:	2300      	movs	r3, #0
 8017f72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017f76:	2300      	movs	r3, #0
 8017f78:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017f7a:	e085      	b.n	8018088 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	685a      	ldr	r2, [r3, #4]
 8017f80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017f84:	4413      	add	r3, r2
 8017f86:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017f8a:	4611      	mov	r1, r2
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f7fe fe2f 	bl	8016bf0 <RegionCommonParseLinkAdrReq>
 8017f92:	4603      	mov	r3, r0
 8017f94:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017f98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d07b      	beq.n	8018098 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017fa0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017fa4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017fa8:	4413      	add	r3, r2
 8017faa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017fae:	2307      	movs	r3, #7
 8017fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017fb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017fb8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017fba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d109      	bne.n	8017fd6 <RegionEU868LinkAdrReq+0x8a>
 8017fc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d106      	bne.n	8017fd6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017fc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017fcc:	f023 0301 	bic.w	r3, r3, #1
 8017fd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017fd4:	e058      	b.n	8018088 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017fd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d003      	beq.n	8017fe6 <RegionEU868LinkAdrReq+0x9a>
 8017fde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017fe2:	2b05      	cmp	r3, #5
 8017fe4:	d903      	bls.n	8017fee <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017fea:	2b06      	cmp	r3, #6
 8017fec:	d906      	bls.n	8017ffc <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017fee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017ff2:	f023 0301 	bic.w	r3, r3, #1
 8017ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017ffa:	e045      	b.n	8018088 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8018002:	e03d      	b.n	8018080 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018004:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018008:	2b06      	cmp	r3, #6
 801800a:	d118      	bne.n	801803e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801800c:	4b5f      	ldr	r3, [pc, #380]	; (801818c <RegionEU868LinkAdrReq+0x240>)
 801800e:	6819      	ldr	r1, [r3, #0]
 8018010:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8018014:	4613      	mov	r3, r2
 8018016:	005b      	lsls	r3, r3, #1
 8018018:	4413      	add	r3, r2
 801801a:	009b      	lsls	r3, r3, #2
 801801c:	440b      	add	r3, r1
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d028      	beq.n	8018076 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8018024:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018028:	2201      	movs	r2, #1
 801802a:	fa02 f303 	lsl.w	r3, r2, r3
 801802e:	b21a      	sxth	r2, r3
 8018030:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018032:	b21b      	sxth	r3, r3
 8018034:	4313      	orrs	r3, r2
 8018036:	b21b      	sxth	r3, r3
 8018038:	b29b      	uxth	r3, r3
 801803a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801803c:	e01b      	b.n	8018076 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801803e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018040:	461a      	mov	r2, r3
 8018042:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018046:	fa42 f303 	asr.w	r3, r2, r3
 801804a:	f003 0301 	and.w	r3, r3, #1
 801804e:	2b00      	cmp	r3, #0
 8018050:	d011      	beq.n	8018076 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8018052:	4b4e      	ldr	r3, [pc, #312]	; (801818c <RegionEU868LinkAdrReq+0x240>)
 8018054:	6819      	ldr	r1, [r3, #0]
 8018056:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801805a:	4613      	mov	r3, r2
 801805c:	005b      	lsls	r3, r3, #1
 801805e:	4413      	add	r3, r2
 8018060:	009b      	lsls	r3, r3, #2
 8018062:	440b      	add	r3, r1
 8018064:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018066:	2b00      	cmp	r3, #0
 8018068:	d105      	bne.n	8018076 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801806a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801806e:	f023 0301 	bic.w	r3, r3, #1
 8018072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018076:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801807a:	3301      	adds	r3, #1
 801807c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8018080:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018084:	2b0f      	cmp	r3, #15
 8018086:	d9bd      	bls.n	8018004 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	7a1b      	ldrb	r3, [r3, #8]
 801808c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8018090:	429a      	cmp	r2, r3
 8018092:	f4ff af73 	bcc.w	8017f7c <RegionEU868LinkAdrReq+0x30>
 8018096:	e000      	b.n	801809a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8018098:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801809a:	2302      	movs	r3, #2
 801809c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	7a5b      	ldrb	r3, [r3, #9]
 80180a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80180a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7ff fa29 	bl	8017504 <RegionEU868GetPhyParam>
 80180b2:	4603      	mov	r3, r0
 80180b4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80180b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80180ba:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	7a9b      	ldrb	r3, [r3, #10]
 80180c0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80180c2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80180c6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80180c8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80180cc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80180ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80180d2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80180da:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80180e2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	7b5b      	ldrb	r3, [r3, #13]
 80180e8:	b25b      	sxtb	r3, r3
 80180ea:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80180ec:	2310      	movs	r3, #16
 80180ee:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80180f0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80180f4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80180f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180f8:	b25b      	sxtb	r3, r3
 80180fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80180fe:	2307      	movs	r3, #7
 8018100:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018104:	4b21      	ldr	r3, [pc, #132]	; (801818c <RegionEU868LinkAdrReq+0x240>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801810a:	2307      	movs	r3, #7
 801810c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018110:	2300      	movs	r3, #0
 8018112:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801811c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8018120:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018124:	1c9a      	adds	r2, r3, #2
 8018126:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801812a:	1c59      	adds	r1, r3, #1
 801812c:	f107 0010 	add.w	r0, r7, #16
 8018130:	4623      	mov	r3, r4
 8018132:	f7fe fdae 	bl	8016c92 <RegionCommonLinkAdrReqVerifyParams>
 8018136:	4603      	mov	r3, r0
 8018138:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801813c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018140:	2b07      	cmp	r3, #7
 8018142:	d10d      	bne.n	8018160 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8018144:	4b11      	ldr	r3, [pc, #68]	; (801818c <RegionEU868LinkAdrReq+0x240>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801814c:	220c      	movs	r2, #12
 801814e:	2100      	movs	r1, #0
 8018150:	4618      	mov	r0, r3
 8018152:	f000 fb2f 	bl	80187b4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8018156:	4b0d      	ldr	r3, [pc, #52]	; (801818c <RegionEU868LinkAdrReq+0x240>)
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801815c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018160:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018168:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018170:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801817a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801817e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8018180:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8018184:	4618      	mov	r0, r3
 8018186:	374c      	adds	r7, #76	; 0x4c
 8018188:	46bd      	mov	sp, r7
 801818a:	bd90      	pop	{r4, r7, pc}
 801818c:	2000203c 	.word	0x2000203c

08018190 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b084      	sub	sp, #16
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018198:	2307      	movs	r3, #7
 801819a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801819c:	2300      	movs	r3, #0
 801819e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	685b      	ldr	r3, [r3, #4]
 80181a4:	f107 020e 	add.w	r2, r7, #14
 80181a8:	4611      	mov	r1, r2
 80181aa:	4618      	mov	r0, r3
 80181ac:	f7ff f8e4 	bl	8017378 <VerifyRfFreq>
 80181b0:	4603      	mov	r3, r0
 80181b2:	f083 0301 	eor.w	r3, r3, #1
 80181b6:	b2db      	uxtb	r3, r3
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d003      	beq.n	80181c4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80181bc:	7bfb      	ldrb	r3, [r7, #15]
 80181be:	f023 0301 	bic.w	r3, r3, #1
 80181c2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	f993 3000 	ldrsb.w	r3, [r3]
 80181ca:	2207      	movs	r2, #7
 80181cc:	2100      	movs	r1, #0
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fe fb4d 	bl	801686e <RegionCommonValueInRange>
 80181d4:	4603      	mov	r3, r0
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d103      	bne.n	80181e2 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80181da:	7bfb      	ldrb	r3, [r7, #15]
 80181dc:	f023 0302 	bic.w	r3, r3, #2
 80181e0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80181e8:	2205      	movs	r2, #5
 80181ea:	2100      	movs	r1, #0
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7fe fb3e 	bl	801686e <RegionCommonValueInRange>
 80181f2:	4603      	mov	r3, r0
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d103      	bne.n	8018200 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80181f8:	7bfb      	ldrb	r3, [r7, #15]
 80181fa:	f023 0304 	bic.w	r3, r3, #4
 80181fe:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8018200:	7bfb      	ldrb	r3, [r7, #15]
}
 8018202:	4618      	mov	r0, r3
 8018204:	3710      	adds	r7, #16
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}
	...

0801820c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b086      	sub	sp, #24
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018214:	2303      	movs	r3, #3
 8018216:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d114      	bne.n	801824c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018228:	b2db      	uxtb	r3, r3
 801822a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801822c:	f107 0308 	add.w	r3, r7, #8
 8018230:	4618      	mov	r0, r3
 8018232:	f000 f9f9 	bl	8018628 <RegionEU868ChannelsRemove>
 8018236:	4603      	mov	r3, r0
 8018238:	f083 0301 	eor.w	r3, r3, #1
 801823c:	b2db      	uxtb	r3, r3
 801823e:	2b00      	cmp	r3, #0
 8018240:	d03b      	beq.n	80182ba <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8018242:	7dfb      	ldrb	r3, [r7, #23]
 8018244:	f023 0303 	bic.w	r3, r3, #3
 8018248:	75fb      	strb	r3, [r7, #23]
 801824a:	e036      	b.n	80182ba <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018258:	b2db      	uxtb	r3, r3
 801825a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801825c:	f107 030c 	add.w	r3, r7, #12
 8018260:	4618      	mov	r0, r3
 8018262:	f000 f93f 	bl	80184e4 <RegionEU868ChannelAdd>
 8018266:	4603      	mov	r3, r0
 8018268:	2b06      	cmp	r3, #6
 801826a:	d820      	bhi.n	80182ae <RegionEU868NewChannelReq+0xa2>
 801826c:	a201      	add	r2, pc, #4	; (adr r2, 8018274 <RegionEU868NewChannelReq+0x68>)
 801826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018272:	bf00      	nop
 8018274:	080182b9 	.word	0x080182b9
 8018278:	080182af 	.word	0x080182af
 801827c:	080182af 	.word	0x080182af
 8018280:	080182af 	.word	0x080182af
 8018284:	08018291 	.word	0x08018291
 8018288:	0801829b 	.word	0x0801829b
 801828c:	080182a5 	.word	0x080182a5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018290:	7dfb      	ldrb	r3, [r7, #23]
 8018292:	f023 0301 	bic.w	r3, r3, #1
 8018296:	75fb      	strb	r3, [r7, #23]
                break;
 8018298:	e00f      	b.n	80182ba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801829a:	7dfb      	ldrb	r3, [r7, #23]
 801829c:	f023 0302 	bic.w	r3, r3, #2
 80182a0:	75fb      	strb	r3, [r7, #23]
                break;
 80182a2:	e00a      	b.n	80182ba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80182a4:	7dfb      	ldrb	r3, [r7, #23]
 80182a6:	f023 0303 	bic.w	r3, r3, #3
 80182aa:	75fb      	strb	r3, [r7, #23]
                break;
 80182ac:	e005      	b.n	80182ba <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80182ae:	7dfb      	ldrb	r3, [r7, #23]
 80182b0:	f023 0303 	bic.w	r3, r3, #3
 80182b4:	75fb      	strb	r3, [r7, #23]
                break;
 80182b6:	e000      	b.n	80182ba <RegionEU868NewChannelReq+0xae>
                break;
 80182b8:	bf00      	nop
            }
        }
    }

    return status;
 80182ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80182be:	4618      	mov	r0, r3
 80182c0:	3718      	adds	r7, #24
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop

080182c8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80182c8:	b480      	push	{r7}
 80182ca:	b083      	sub	sp, #12
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80182d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	370c      	adds	r7, #12
 80182d8:	46bd      	mov	sp, r7
 80182da:	bc80      	pop	{r7}
 80182dc:	4770      	bx	lr
	...

080182e0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b084      	sub	sp, #16
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80182e8:	2303      	movs	r3, #3
 80182ea:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80182ec:	2300      	movs	r3, #0
 80182ee:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	f107 020e 	add.w	r2, r7, #14
 80182f8:	4611      	mov	r1, r2
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7ff f83c 	bl	8017378 <VerifyRfFreq>
 8018300:	4603      	mov	r3, r0
 8018302:	f083 0301 	eor.w	r3, r3, #1
 8018306:	b2db      	uxtb	r3, r3
 8018308:	2b00      	cmp	r3, #0
 801830a:	d003      	beq.n	8018314 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 801830c:	7bfb      	ldrb	r3, [r7, #15]
 801830e:	f023 0301 	bic.w	r3, r3, #1
 8018312:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018314:	4b13      	ldr	r3, [pc, #76]	; (8018364 <RegionEU868DlChannelReq+0x84>)
 8018316:	681a      	ldr	r2, [r3, #0]
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	4619      	mov	r1, r3
 801831e:	460b      	mov	r3, r1
 8018320:	005b      	lsls	r3, r3, #1
 8018322:	440b      	add	r3, r1
 8018324:	009b      	lsls	r3, r3, #2
 8018326:	4413      	add	r3, r2
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d103      	bne.n	8018336 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801832e:	7bfb      	ldrb	r3, [r7, #15]
 8018330:	f023 0302 	bic.w	r3, r3, #2
 8018334:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018336:	7bfb      	ldrb	r3, [r7, #15]
 8018338:	2b03      	cmp	r3, #3
 801833a:	d10d      	bne.n	8018358 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801833c:	4b09      	ldr	r3, [pc, #36]	; (8018364 <RegionEU868DlChannelReq+0x84>)
 801833e:	6819      	ldr	r1, [r3, #0]
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	4618      	mov	r0, r3
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	685a      	ldr	r2, [r3, #4]
 801834a:	4603      	mov	r3, r0
 801834c:	005b      	lsls	r3, r3, #1
 801834e:	4403      	add	r3, r0
 8018350:	009b      	lsls	r3, r3, #2
 8018352:	440b      	add	r3, r1
 8018354:	3304      	adds	r3, #4
 8018356:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8018358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801835c:	4618      	mov	r0, r3
 801835e:	3710      	adds	r7, #16
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}
 8018364:	2000203c 	.word	0x2000203c

08018368 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018368:	b480      	push	{r7}
 801836a:	b083      	sub	sp, #12
 801836c:	af00      	add	r7, sp, #0
 801836e:	4603      	mov	r3, r0
 8018370:	460a      	mov	r2, r1
 8018372:	71fb      	strb	r3, [r7, #7]
 8018374:	4613      	mov	r3, r2
 8018376:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8018378:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801837c:	4618      	mov	r0, r3
 801837e:	370c      	adds	r7, #12
 8018380:	46bd      	mov	sp, r7
 8018382:	bc80      	pop	{r7}
 8018384:	4770      	bx	lr
	...

08018388 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b09a      	sub	sp, #104	; 0x68
 801838c:	af02      	add	r7, sp, #8
 801838e:	60f8      	str	r0, [r7, #12]
 8018390:	60b9      	str	r1, [r7, #8]
 8018392:	607a      	str	r2, [r7, #4]
 8018394:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018396:	2300      	movs	r3, #0
 8018398:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801839c:	2300      	movs	r3, #0
 801839e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80183a2:	2300      	movs	r3, #0
 80183a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80183a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80183aa:	2200      	movs	r2, #0
 80183ac:	601a      	str	r2, [r3, #0]
 80183ae:	605a      	str	r2, [r3, #4]
 80183b0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80183b2:	230c      	movs	r3, #12
 80183b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80183b8:	2307      	movs	r3, #7
 80183ba:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80183bc:	4b47      	ldr	r3, [pc, #284]	; (80184dc <RegionEU868NextChannel+0x154>)
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80183c4:	2201      	movs	r2, #1
 80183c6:	2100      	movs	r1, #0
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7fe faa1 	bl	8016910 <RegionCommonCountChannels>
 80183ce:	4603      	mov	r3, r0
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d10a      	bne.n	80183ea <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80183d4:	4b41      	ldr	r3, [pc, #260]	; (80184dc <RegionEU868NextChannel+0x154>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80183dc:	4b3f      	ldr	r3, [pc, #252]	; (80184dc <RegionEU868NextChannel+0x154>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	f042 0207 	orr.w	r2, r2, #7
 80183e4:	b292      	uxth	r2, r2
 80183e6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	7a5b      	ldrb	r3, [r3, #9]
 80183ee:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80183f6:	b2db      	uxtb	r3, r3
 80183f8:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80183fa:	4b38      	ldr	r3, [pc, #224]	; (80184dc <RegionEU868NextChannel+0x154>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018402:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018404:	4b35      	ldr	r3, [pc, #212]	; (80184dc <RegionEU868NextChannel+0x154>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801840a:	4b35      	ldr	r3, [pc, #212]	; (80184e0 <RegionEU868NextChannel+0x158>)
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018410:	2310      	movs	r3, #16
 8018412:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8018414:	f107 0312 	add.w	r3, r7, #18
 8018418:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	685b      	ldr	r3, [r3, #4]
 8018424:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	7a9b      	ldrb	r3, [r3, #10]
 801842a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801842e:	2306      	movs	r3, #6
 8018430:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018434:	68fa      	ldr	r2, [r7, #12]
 8018436:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801843a:	320c      	adds	r2, #12
 801843c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018440:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	7d1b      	ldrb	r3, [r3, #20]
 8018448:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	8adb      	ldrh	r3, [r3, #22]
 8018456:	4619      	mov	r1, r3
 8018458:	4610      	mov	r0, r2
 801845a:	f7ff f803 	bl	8017464 <GetTimeOnAir>
 801845e:	4603      	mov	r3, r0
 8018460:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018462:	f107 0314 	add.w	r3, r7, #20
 8018466:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018468:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801846c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018470:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	9301      	str	r3, [sp, #4]
 8018478:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801847c:	9300      	str	r3, [sp, #0]
 801847e:	460b      	mov	r3, r1
 8018480:	6839      	ldr	r1, [r7, #0]
 8018482:	f7fe fe5c 	bl	801713e <RegionCommonIdentifyChannels>
 8018486:	4603      	mov	r3, r0
 8018488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801848c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018490:	2b00      	cmp	r3, #0
 8018492:	d10e      	bne.n	80184b2 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018494:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8018498:	3b01      	subs	r3, #1
 801849a:	4619      	mov	r1, r3
 801849c:	2000      	movs	r0, #0
 801849e:	f000 f937 	bl	8018710 <randr>
 80184a2:	4603      	mov	r3, r0
 80184a4:	3360      	adds	r3, #96	; 0x60
 80184a6:	443b      	add	r3, r7
 80184a8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	701a      	strb	r2, [r3, #0]
 80184b0:	e00e      	b.n	80184d0 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80184b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80184b6:	2b0c      	cmp	r3, #12
 80184b8:	d10a      	bne.n	80184d0 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80184ba:	4b08      	ldr	r3, [pc, #32]	; (80184dc <RegionEU868NextChannel+0x154>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80184c2:	4b06      	ldr	r3, [pc, #24]	; (80184dc <RegionEU868NextChannel+0x154>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	f042 0207 	orr.w	r2, r2, #7
 80184ca:	b292      	uxth	r2, r2
 80184cc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 80184d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3760      	adds	r7, #96	; 0x60
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	2000203c 	.word	0x2000203c
 80184e0:	20002040 	.word	0x20002040

080184e4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b084      	sub	sp, #16
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80184ec:	2300      	movs	r3, #0
 80184ee:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80184f0:	2300      	movs	r3, #0
 80184f2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80184f4:	2300      	movs	r3, #0
 80184f6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	791b      	ldrb	r3, [r3, #4]
 80184fc:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80184fe:	7b7b      	ldrb	r3, [r7, #13]
 8018500:	2b02      	cmp	r3, #2
 8018502:	d801      	bhi.n	8018508 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018504:	2306      	movs	r3, #6
 8018506:	e089      	b.n	801861c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018508:	7b7b      	ldrb	r3, [r7, #13]
 801850a:	2b0f      	cmp	r3, #15
 801850c:	d901      	bls.n	8018512 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801850e:	2303      	movs	r3, #3
 8018510:	e084      	b.n	801861c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	7a1b      	ldrb	r3, [r3, #8]
 8018518:	f343 0303 	sbfx	r3, r3, #0, #4
 801851c:	b25b      	sxtb	r3, r3
 801851e:	2207      	movs	r2, #7
 8018520:	2100      	movs	r1, #0
 8018522:	4618      	mov	r0, r3
 8018524:	f7fe f9a3 	bl	801686e <RegionCommonValueInRange>
 8018528:	4603      	mov	r3, r0
 801852a:	2b00      	cmp	r3, #0
 801852c:	d101      	bne.n	8018532 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801852e:	2301      	movs	r3, #1
 8018530:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	7a1b      	ldrb	r3, [r3, #8]
 8018538:	f343 1303 	sbfx	r3, r3, #4, #4
 801853c:	b25b      	sxtb	r3, r3
 801853e:	2207      	movs	r2, #7
 8018540:	2100      	movs	r1, #0
 8018542:	4618      	mov	r0, r3
 8018544:	f7fe f993 	bl	801686e <RegionCommonValueInRange>
 8018548:	4603      	mov	r3, r0
 801854a:	2b00      	cmp	r3, #0
 801854c:	d101      	bne.n	8018552 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801854e:	2301      	movs	r3, #1
 8018550:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	7a1b      	ldrb	r3, [r3, #8]
 8018558:	f343 0303 	sbfx	r3, r3, #0, #4
 801855c:	b25a      	sxtb	r2, r3
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	7a1b      	ldrb	r3, [r3, #8]
 8018564:	f343 1303 	sbfx	r3, r3, #4, #4
 8018568:	b25b      	sxtb	r3, r3
 801856a:	429a      	cmp	r2, r3
 801856c:	dd01      	ble.n	8018572 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801856e:	2301      	movs	r3, #1
 8018570:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8018572:	7bbb      	ldrb	r3, [r7, #14]
 8018574:	f083 0301 	eor.w	r3, r3, #1
 8018578:	b2db      	uxtb	r3, r3
 801857a:	2b00      	cmp	r3, #0
 801857c:	d010      	beq.n	80185a0 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f107 020c 	add.w	r2, r7, #12
 8018588:	4611      	mov	r1, r2
 801858a:	4618      	mov	r0, r3
 801858c:	f7fe fef4 	bl	8017378 <VerifyRfFreq>
 8018590:	4603      	mov	r3, r0
 8018592:	f083 0301 	eor.w	r3, r3, #1
 8018596:	b2db      	uxtb	r3, r3
 8018598:	2b00      	cmp	r3, #0
 801859a:	d001      	beq.n	80185a0 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801859c:	2301      	movs	r3, #1
 801859e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80185a0:	7bfb      	ldrb	r3, [r7, #15]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d004      	beq.n	80185b0 <RegionEU868ChannelAdd+0xcc>
 80185a6:	7bbb      	ldrb	r3, [r7, #14]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d001      	beq.n	80185b0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80185ac:	2306      	movs	r3, #6
 80185ae:	e035      	b.n	801861c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80185b0:	7bfb      	ldrb	r3, [r7, #15]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d001      	beq.n	80185ba <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80185b6:	2305      	movs	r3, #5
 80185b8:	e030      	b.n	801861c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80185ba:	7bbb      	ldrb	r3, [r7, #14]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d001      	beq.n	80185c4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80185c0:	2304      	movs	r3, #4
 80185c2:	e02b      	b.n	801861c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80185c4:	4b17      	ldr	r3, [pc, #92]	; (8018624 <RegionEU868ChannelAdd+0x140>)
 80185c6:	6819      	ldr	r1, [r3, #0]
 80185c8:	7b7a      	ldrb	r2, [r7, #13]
 80185ca:	4613      	mov	r3, r2
 80185cc:	005b      	lsls	r3, r3, #1
 80185ce:	4413      	add	r3, r2
 80185d0:	009b      	lsls	r3, r3, #2
 80185d2:	18c8      	adds	r0, r1, r3
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	220c      	movs	r2, #12
 80185da:	4619      	mov	r1, r3
 80185dc:	f000 f8af 	bl	801873e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80185e0:	4b10      	ldr	r3, [pc, #64]	; (8018624 <RegionEU868ChannelAdd+0x140>)
 80185e2:	6819      	ldr	r1, [r3, #0]
 80185e4:	7b7a      	ldrb	r2, [r7, #13]
 80185e6:	7b38      	ldrb	r0, [r7, #12]
 80185e8:	4613      	mov	r3, r2
 80185ea:	005b      	lsls	r3, r3, #1
 80185ec:	4413      	add	r3, r2
 80185ee:	009b      	lsls	r3, r3, #2
 80185f0:	440b      	add	r3, r1
 80185f2:	3309      	adds	r3, #9
 80185f4:	4602      	mov	r2, r0
 80185f6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80185f8:	4b0a      	ldr	r3, [pc, #40]	; (8018624 <RegionEU868ChannelAdd+0x140>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8018600:	b21a      	sxth	r2, r3
 8018602:	7b7b      	ldrb	r3, [r7, #13]
 8018604:	2101      	movs	r1, #1
 8018606:	fa01 f303 	lsl.w	r3, r1, r3
 801860a:	b21b      	sxth	r3, r3
 801860c:	4313      	orrs	r3, r2
 801860e:	b21a      	sxth	r2, r3
 8018610:	4b04      	ldr	r3, [pc, #16]	; (8018624 <RegionEU868ChannelAdd+0x140>)
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	b292      	uxth	r2, r2
 8018616:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801861a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801861c:	4618      	mov	r0, r3
 801861e:	3710      	adds	r7, #16
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	2000203c 	.word	0x2000203c

08018628 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b086      	sub	sp, #24
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	781b      	ldrb	r3, [r3, #0]
 8018634:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018636:	7dfb      	ldrb	r3, [r7, #23]
 8018638:	2b02      	cmp	r3, #2
 801863a:	d801      	bhi.n	8018640 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801863c:	2300      	movs	r3, #0
 801863e:	e016      	b.n	801866e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018640:	4b0d      	ldr	r3, [pc, #52]	; (8018678 <RegionEU868ChannelsRemove+0x50>)
 8018642:	6819      	ldr	r1, [r3, #0]
 8018644:	7dfa      	ldrb	r2, [r7, #23]
 8018646:	4613      	mov	r3, r2
 8018648:	005b      	lsls	r3, r3, #1
 801864a:	4413      	add	r3, r2
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	440b      	add	r3, r1
 8018650:	461a      	mov	r2, r3
 8018652:	2300      	movs	r3, #0
 8018654:	6013      	str	r3, [r2, #0]
 8018656:	6053      	str	r3, [r2, #4]
 8018658:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801865a:	4b07      	ldr	r3, [pc, #28]	; (8018678 <RegionEU868ChannelsRemove+0x50>)
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018662:	7df9      	ldrb	r1, [r7, #23]
 8018664:	2210      	movs	r2, #16
 8018666:	4618      	mov	r0, r3
 8018668:	f7fe f91e 	bl	80168a8 <RegionCommonChanDisable>
 801866c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801866e:	4618      	mov	r0, r3
 8018670:	3718      	adds	r7, #24
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}
 8018676:	bf00      	nop
 8018678:	2000203c 	.word	0x2000203c

0801867c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801867c:	b480      	push	{r7}
 801867e:	b085      	sub	sp, #20
 8018680:	af00      	add	r7, sp, #0
 8018682:	4603      	mov	r3, r0
 8018684:	71fb      	strb	r3, [r7, #7]
 8018686:	460b      	mov	r3, r1
 8018688:	71bb      	strb	r3, [r7, #6]
 801868a:	4613      	mov	r3, r2
 801868c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801868e:	79ba      	ldrb	r2, [r7, #6]
 8018690:	797b      	ldrb	r3, [r7, #5]
 8018692:	1ad3      	subs	r3, r2, r3
 8018694:	b2db      	uxtb	r3, r3
 8018696:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801869c:	2b00      	cmp	r3, #0
 801869e:	da01      	bge.n	80186a4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80186a0:	2300      	movs	r3, #0
 80186a2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80186a4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80186a6:	4618      	mov	r0, r3
 80186a8:	3714      	adds	r7, #20
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bc80      	pop	{r7}
 80186ae:	4770      	bx	lr

080186b0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80186b0:	b480      	push	{r7}
 80186b2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80186b4:	4b0d      	ldr	r3, [pc, #52]	; (80186ec <rand1+0x3c>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	4a0d      	ldr	r2, [pc, #52]	; (80186f0 <rand1+0x40>)
 80186ba:	fb02 f303 	mul.w	r3, r2, r3
 80186be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80186c2:	3339      	adds	r3, #57	; 0x39
 80186c4:	4a09      	ldr	r2, [pc, #36]	; (80186ec <rand1+0x3c>)
 80186c6:	6013      	str	r3, [r2, #0]
 80186c8:	4b08      	ldr	r3, [pc, #32]	; (80186ec <rand1+0x3c>)
 80186ca:	681a      	ldr	r2, [r3, #0]
 80186cc:	2303      	movs	r3, #3
 80186ce:	fba3 1302 	umull	r1, r3, r3, r2
 80186d2:	1ad1      	subs	r1, r2, r3
 80186d4:	0849      	lsrs	r1, r1, #1
 80186d6:	440b      	add	r3, r1
 80186d8:	0f99      	lsrs	r1, r3, #30
 80186da:	460b      	mov	r3, r1
 80186dc:	07db      	lsls	r3, r3, #31
 80186de:	1a5b      	subs	r3, r3, r1
 80186e0:	1ad1      	subs	r1, r2, r3
 80186e2:	460b      	mov	r3, r1
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	46bd      	mov	sp, r7
 80186e8:	bc80      	pop	{r7}
 80186ea:	4770      	bx	lr
 80186ec:	20000130 	.word	0x20000130
 80186f0:	41c64e6d 	.word	0x41c64e6d

080186f4 <srand1>:

void srand1( uint32_t seed )
{
 80186f4:	b480      	push	{r7}
 80186f6:	b083      	sub	sp, #12
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
    next = seed;
 80186fc:	4a03      	ldr	r2, [pc, #12]	; (801870c <srand1+0x18>)
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	6013      	str	r3, [r2, #0]
}
 8018702:	bf00      	nop
 8018704:	370c      	adds	r7, #12
 8018706:	46bd      	mov	sp, r7
 8018708:	bc80      	pop	{r7}
 801870a:	4770      	bx	lr
 801870c:	20000130 	.word	0x20000130

08018710 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b082      	sub	sp, #8
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
 8018718:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801871a:	f7ff ffc9 	bl	80186b0 <rand1>
 801871e:	4602      	mov	r2, r0
 8018720:	6839      	ldr	r1, [r7, #0]
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	1acb      	subs	r3, r1, r3
 8018726:	3301      	adds	r3, #1
 8018728:	fb92 f1f3 	sdiv	r1, r2, r3
 801872c:	fb01 f303 	mul.w	r3, r1, r3
 8018730:	1ad2      	subs	r2, r2, r3
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	4413      	add	r3, r2
}
 8018736:	4618      	mov	r0, r3
 8018738:	3708      	adds	r7, #8
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}

0801873e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801873e:	b480      	push	{r7}
 8018740:	b085      	sub	sp, #20
 8018742:	af00      	add	r7, sp, #0
 8018744:	60f8      	str	r0, [r7, #12]
 8018746:	60b9      	str	r1, [r7, #8]
 8018748:	4613      	mov	r3, r2
 801874a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801874c:	e007      	b.n	801875e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801874e:	68ba      	ldr	r2, [r7, #8]
 8018750:	1c53      	adds	r3, r2, #1
 8018752:	60bb      	str	r3, [r7, #8]
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	1c59      	adds	r1, r3, #1
 8018758:	60f9      	str	r1, [r7, #12]
 801875a:	7812      	ldrb	r2, [r2, #0]
 801875c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801875e:	88fb      	ldrh	r3, [r7, #6]
 8018760:	1e5a      	subs	r2, r3, #1
 8018762:	80fa      	strh	r2, [r7, #6]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d1f2      	bne.n	801874e <memcpy1+0x10>
    }
}
 8018768:	bf00      	nop
 801876a:	bf00      	nop
 801876c:	3714      	adds	r7, #20
 801876e:	46bd      	mov	sp, r7
 8018770:	bc80      	pop	{r7}
 8018772:	4770      	bx	lr

08018774 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018774:	b480      	push	{r7}
 8018776:	b085      	sub	sp, #20
 8018778:	af00      	add	r7, sp, #0
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	60b9      	str	r1, [r7, #8]
 801877e:	4613      	mov	r3, r2
 8018780:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018782:	88fb      	ldrh	r3, [r7, #6]
 8018784:	3b01      	subs	r3, #1
 8018786:	68fa      	ldr	r2, [r7, #12]
 8018788:	4413      	add	r3, r2
 801878a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801878c:	e007      	b.n	801879e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801878e:	68ba      	ldr	r2, [r7, #8]
 8018790:	1c53      	adds	r3, r2, #1
 8018792:	60bb      	str	r3, [r7, #8]
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	1e59      	subs	r1, r3, #1
 8018798:	60f9      	str	r1, [r7, #12]
 801879a:	7812      	ldrb	r2, [r2, #0]
 801879c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801879e:	88fb      	ldrh	r3, [r7, #6]
 80187a0:	1e5a      	subs	r2, r3, #1
 80187a2:	80fa      	strh	r2, [r7, #6]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d1f2      	bne.n	801878e <memcpyr+0x1a>
    }
}
 80187a8:	bf00      	nop
 80187aa:	bf00      	nop
 80187ac:	3714      	adds	r7, #20
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bc80      	pop	{r7}
 80187b2:	4770      	bx	lr

080187b4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80187b4:	b480      	push	{r7}
 80187b6:	b083      	sub	sp, #12
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
 80187bc:	460b      	mov	r3, r1
 80187be:	70fb      	strb	r3, [r7, #3]
 80187c0:	4613      	mov	r3, r2
 80187c2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80187c4:	e004      	b.n	80187d0 <memset1+0x1c>
    {
        *dst++ = value;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	1c5a      	adds	r2, r3, #1
 80187ca:	607a      	str	r2, [r7, #4]
 80187cc:	78fa      	ldrb	r2, [r7, #3]
 80187ce:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80187d0:	883b      	ldrh	r3, [r7, #0]
 80187d2:	1e5a      	subs	r2, r3, #1
 80187d4:	803a      	strh	r2, [r7, #0]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d1f5      	bne.n	80187c6 <memset1+0x12>
    }
}
 80187da:	bf00      	nop
 80187dc:	bf00      	nop
 80187de:	370c      	adds	r7, #12
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bc80      	pop	{r7}
 80187e4:	4770      	bx	lr
	...

080187e8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80187e8:	b480      	push	{r7}
 80187ea:	b085      	sub	sp, #20
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
 80187f0:	460b      	mov	r3, r1
 80187f2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80187f4:	f04f 33ff 	mov.w	r3, #4294967295
 80187f8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d101      	bne.n	8018804 <Crc32+0x1c>
    {
        return 0;
 8018800:	2300      	movs	r3, #0
 8018802:	e026      	b.n	8018852 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018804:	2300      	movs	r3, #0
 8018806:	817b      	strh	r3, [r7, #10]
 8018808:	e01d      	b.n	8018846 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801880a:	897b      	ldrh	r3, [r7, #10]
 801880c:	687a      	ldr	r2, [r7, #4]
 801880e:	4413      	add	r3, r2
 8018810:	781b      	ldrb	r3, [r3, #0]
 8018812:	461a      	mov	r2, r3
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	4053      	eors	r3, r2
 8018818:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801881a:	2300      	movs	r3, #0
 801881c:	813b      	strh	r3, [r7, #8]
 801881e:	e00c      	b.n	801883a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	085a      	lsrs	r2, r3, #1
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	f003 0301 	and.w	r3, r3, #1
 801882a:	425b      	negs	r3, r3
 801882c:	490b      	ldr	r1, [pc, #44]	; (801885c <Crc32+0x74>)
 801882e:	400b      	ands	r3, r1
 8018830:	4053      	eors	r3, r2
 8018832:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018834:	893b      	ldrh	r3, [r7, #8]
 8018836:	3301      	adds	r3, #1
 8018838:	813b      	strh	r3, [r7, #8]
 801883a:	893b      	ldrh	r3, [r7, #8]
 801883c:	2b07      	cmp	r3, #7
 801883e:	d9ef      	bls.n	8018820 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018840:	897b      	ldrh	r3, [r7, #10]
 8018842:	3301      	adds	r3, #1
 8018844:	817b      	strh	r3, [r7, #10]
 8018846:	897a      	ldrh	r2, [r7, #10]
 8018848:	887b      	ldrh	r3, [r7, #2]
 801884a:	429a      	cmp	r2, r3
 801884c:	d3dd      	bcc.n	801880a <Crc32+0x22>
        }
    }

    return ~crc;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	43db      	mvns	r3, r3
}
 8018852:	4618      	mov	r0, r3
 8018854:	3714      	adds	r7, #20
 8018856:	46bd      	mov	sp, r7
 8018858:	bc80      	pop	{r7}
 801885a:	4770      	bx	lr
 801885c:	edb88320 	.word	0xedb88320

08018860 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b084      	sub	sp, #16
 8018864:	af02      	add	r7, sp, #8
 8018866:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018868:	4a24      	ldr	r2, [pc, #144]	; (80188fc <RadioInit+0x9c>)
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801886e:	4b24      	ldr	r3, [pc, #144]	; (8018900 <RadioInit+0xa0>)
 8018870:	2200      	movs	r2, #0
 8018872:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018874:	4b22      	ldr	r3, [pc, #136]	; (8018900 <RadioInit+0xa0>)
 8018876:	2200      	movs	r2, #0
 8018878:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801887a:	4b21      	ldr	r3, [pc, #132]	; (8018900 <RadioInit+0xa0>)
 801887c:	2200      	movs	r2, #0
 801887e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018880:	4b1f      	ldr	r3, [pc, #124]	; (8018900 <RadioInit+0xa0>)
 8018882:	2200      	movs	r2, #0
 8018884:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8018886:	481f      	ldr	r0, [pc, #124]	; (8018904 <RadioInit+0xa4>)
 8018888:	f001 ff88 	bl	801a79c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801888c:	4b1c      	ldr	r3, [pc, #112]	; (8018900 <RadioInit+0xa0>)
 801888e:	2200      	movs	r2, #0
 8018890:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018892:	4b1b      	ldr	r3, [pc, #108]	; (8018900 <RadioInit+0xa0>)
 8018894:	2200      	movs	r2, #0
 8018896:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018898:	f002 fa16 	bl	801acc8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801889c:	2100      	movs	r1, #0
 801889e:	2000      	movs	r0, #0
 80188a0:	f002 fdde 	bl	801b460 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80188a4:	2204      	movs	r2, #4
 80188a6:	2100      	movs	r1, #0
 80188a8:	2001      	movs	r0, #1
 80188aa:	f002 fb9b 	bl	801afe4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80188ae:	2300      	movs	r3, #0
 80188b0:	2200      	movs	r2, #0
 80188b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80188b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80188ba:	f002 facb 	bl	801ae54 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80188be:	f000 fe83 	bl	80195c8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80188c2:	2300      	movs	r3, #0
 80188c4:	9300      	str	r3, [sp, #0]
 80188c6:	4b10      	ldr	r3, [pc, #64]	; (8018908 <RadioInit+0xa8>)
 80188c8:	2200      	movs	r2, #0
 80188ca:	f04f 31ff 	mov.w	r1, #4294967295
 80188ce:	480f      	ldr	r0, [pc, #60]	; (801890c <RadioInit+0xac>)
 80188d0:	f003 ffdc 	bl	801c88c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80188d4:	2300      	movs	r3, #0
 80188d6:	9300      	str	r3, [sp, #0]
 80188d8:	4b0d      	ldr	r3, [pc, #52]	; (8018910 <RadioInit+0xb0>)
 80188da:	2200      	movs	r2, #0
 80188dc:	f04f 31ff 	mov.w	r1, #4294967295
 80188e0:	480c      	ldr	r0, [pc, #48]	; (8018914 <RadioInit+0xb4>)
 80188e2:	f003 ffd3 	bl	801c88c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80188e6:	4809      	ldr	r0, [pc, #36]	; (801890c <RadioInit+0xac>)
 80188e8:	f004 f874 	bl	801c9d4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80188ec:	4809      	ldr	r0, [pc, #36]	; (8018914 <RadioInit+0xb4>)
 80188ee:	f004 f871 	bl	801c9d4 <UTIL_TIMER_Stop>
}
 80188f2:	bf00      	nop
 80188f4:	3708      	adds	r7, #8
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd80      	pop	{r7, pc}
 80188fa:	bf00      	nop
 80188fc:	20002144 	.word	0x20002144
 8018900:	20002148 	.word	0x20002148
 8018904:	080199b5 	.word	0x080199b5
 8018908:	0801993d 	.word	0x0801993d
 801890c:	200021a4 	.word	0x200021a4
 8018910:	08019951 	.word	0x08019951
 8018914:	200021bc 	.word	0x200021bc

08018918 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018918:	b580      	push	{r7, lr}
 801891a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801891c:	f001 ff80 	bl	801a820 <SUBGRF_GetOperatingMode>
 8018920:	4603      	mov	r3, r0
 8018922:	2b07      	cmp	r3, #7
 8018924:	d00a      	beq.n	801893c <RadioGetStatus+0x24>
 8018926:	2b07      	cmp	r3, #7
 8018928:	dc0a      	bgt.n	8018940 <RadioGetStatus+0x28>
 801892a:	2b04      	cmp	r3, #4
 801892c:	d002      	beq.n	8018934 <RadioGetStatus+0x1c>
 801892e:	2b05      	cmp	r3, #5
 8018930:	d002      	beq.n	8018938 <RadioGetStatus+0x20>
 8018932:	e005      	b.n	8018940 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018934:	2302      	movs	r3, #2
 8018936:	e004      	b.n	8018942 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018938:	2301      	movs	r3, #1
 801893a:	e002      	b.n	8018942 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801893c:	2303      	movs	r3, #3
 801893e:	e000      	b.n	8018942 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018940:	2300      	movs	r3, #0
    }
}
 8018942:	4618      	mov	r0, r3
 8018944:	bd80      	pop	{r7, pc}
	...

08018948 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018948:	b580      	push	{r7, lr}
 801894a:	b082      	sub	sp, #8
 801894c:	af00      	add	r7, sp, #0
 801894e:	4603      	mov	r3, r0
 8018950:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018952:	4a2a      	ldr	r2, [pc, #168]	; (80189fc <RadioSetModem+0xb4>)
 8018954:	79fb      	ldrb	r3, [r7, #7]
 8018956:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018958:	79fb      	ldrb	r3, [r7, #7]
 801895a:	4618      	mov	r0, r3
 801895c:	f003 f943 	bl	801bbe6 <RFW_SetRadioModem>
    switch( modem )
 8018960:	79fb      	ldrb	r3, [r7, #7]
 8018962:	2b05      	cmp	r3, #5
 8018964:	d80e      	bhi.n	8018984 <RadioSetModem+0x3c>
 8018966:	a201      	add	r2, pc, #4	; (adr r2, 801896c <RadioSetModem+0x24>)
 8018968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801896c:	08018993 	.word	0x08018993
 8018970:	080189a1 	.word	0x080189a1
 8018974:	08018985 	.word	0x08018985
 8018978:	080189c7 	.word	0x080189c7
 801897c:	080189d5 	.word	0x080189d5
 8018980:	080189e3 	.word	0x080189e3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018984:	2003      	movs	r0, #3
 8018986:	f002 fb07 	bl	801af98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801898a:	4b1c      	ldr	r3, [pc, #112]	; (80189fc <RadioSetModem+0xb4>)
 801898c:	2200      	movs	r2, #0
 801898e:	735a      	strb	r2, [r3, #13]
        break;
 8018990:	e02f      	b.n	80189f2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018992:	2000      	movs	r0, #0
 8018994:	f002 fb00 	bl	801af98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018998:	4b18      	ldr	r3, [pc, #96]	; (80189fc <RadioSetModem+0xb4>)
 801899a:	2200      	movs	r2, #0
 801899c:	735a      	strb	r2, [r3, #13]
        break;
 801899e:	e028      	b.n	80189f2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80189a0:	2001      	movs	r0, #1
 80189a2:	f002 faf9 	bl	801af98 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80189a6:	4b15      	ldr	r3, [pc, #84]	; (80189fc <RadioSetModem+0xb4>)
 80189a8:	7b5a      	ldrb	r2, [r3, #13]
 80189aa:	4b14      	ldr	r3, [pc, #80]	; (80189fc <RadioSetModem+0xb4>)
 80189ac:	7b1b      	ldrb	r3, [r3, #12]
 80189ae:	429a      	cmp	r2, r3
 80189b0:	d01e      	beq.n	80189f0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80189b2:	4b12      	ldr	r3, [pc, #72]	; (80189fc <RadioSetModem+0xb4>)
 80189b4:	7b1a      	ldrb	r2, [r3, #12]
 80189b6:	4b11      	ldr	r3, [pc, #68]	; (80189fc <RadioSetModem+0xb4>)
 80189b8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80189ba:	4b10      	ldr	r3, [pc, #64]	; (80189fc <RadioSetModem+0xb4>)
 80189bc:	7b5b      	ldrb	r3, [r3, #13]
 80189be:	4618      	mov	r0, r3
 80189c0:	f000 ff86 	bl	80198d0 <RadioSetPublicNetwork>
        }
        break;
 80189c4:	e014      	b.n	80189f0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80189c6:	2002      	movs	r0, #2
 80189c8:	f002 fae6 	bl	801af98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80189cc:	4b0b      	ldr	r3, [pc, #44]	; (80189fc <RadioSetModem+0xb4>)
 80189ce:	2200      	movs	r2, #0
 80189d0:	735a      	strb	r2, [r3, #13]
        break;
 80189d2:	e00e      	b.n	80189f2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80189d4:	2002      	movs	r0, #2
 80189d6:	f002 fadf 	bl	801af98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80189da:	4b08      	ldr	r3, [pc, #32]	; (80189fc <RadioSetModem+0xb4>)
 80189dc:	2200      	movs	r2, #0
 80189de:	735a      	strb	r2, [r3, #13]
        break;
 80189e0:	e007      	b.n	80189f2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80189e2:	2000      	movs	r0, #0
 80189e4:	f002 fad8 	bl	801af98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80189e8:	4b04      	ldr	r3, [pc, #16]	; (80189fc <RadioSetModem+0xb4>)
 80189ea:	2200      	movs	r2, #0
 80189ec:	735a      	strb	r2, [r3, #13]
        break;
 80189ee:	e000      	b.n	80189f2 <RadioSetModem+0xaa>
        break;
 80189f0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80189f2:	bf00      	nop
 80189f4:	3708      	adds	r7, #8
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}
 80189fa:	bf00      	nop
 80189fc:	20002148 	.word	0x20002148

08018a00 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b082      	sub	sp, #8
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018a08:	6878      	ldr	r0, [r7, #4]
 8018a0a:	f002 fa7f 	bl	801af0c <SUBGRF_SetRfFrequency>
}
 8018a0e:	bf00      	nop
 8018a10:	3708      	adds	r7, #8
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}

08018a16 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018a16:	b580      	push	{r7, lr}
 8018a18:	b090      	sub	sp, #64	; 0x40
 8018a1a:	af0a      	add	r7, sp, #40	; 0x28
 8018a1c:	60f8      	str	r0, [r7, #12]
 8018a1e:	60b9      	str	r1, [r7, #8]
 8018a20:	603b      	str	r3, [r7, #0]
 8018a22:	4613      	mov	r3, r2
 8018a24:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018a26:	2301      	movs	r3, #1
 8018a28:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8018a32:	f000 fddc 	bl	80195ee <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018a36:	2000      	movs	r0, #0
 8018a38:	f7ff ff86 	bl	8018948 <RadioSetModem>

    RadioSetChannel( freq );
 8018a3c:	68f8      	ldr	r0, [r7, #12]
 8018a3e:	f7ff ffdf 	bl	8018a00 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018a42:	2301      	movs	r3, #1
 8018a44:	9309      	str	r3, [sp, #36]	; 0x24
 8018a46:	2300      	movs	r3, #0
 8018a48:	9308      	str	r3, [sp, #32]
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	9307      	str	r3, [sp, #28]
 8018a4e:	2300      	movs	r3, #0
 8018a50:	9306      	str	r3, [sp, #24]
 8018a52:	2300      	movs	r3, #0
 8018a54:	9305      	str	r3, [sp, #20]
 8018a56:	2300      	movs	r3, #0
 8018a58:	9304      	str	r3, [sp, #16]
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	9303      	str	r3, [sp, #12]
 8018a5e:	2300      	movs	r3, #0
 8018a60:	9302      	str	r3, [sp, #8]
 8018a62:	2303      	movs	r3, #3
 8018a64:	9301      	str	r3, [sp, #4]
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	9300      	str	r3, [sp, #0]
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018a70:	68b9      	ldr	r1, [r7, #8]
 8018a72:	2000      	movs	r0, #0
 8018a74:	f000 f83c 	bl	8018af0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018a78:	2000      	movs	r0, #0
 8018a7a:	f000 fdbf 	bl	80195fc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018a7e:	f000 ff55 	bl	801992c <RadioGetWakeupTime>
 8018a82:	4603      	mov	r3, r0
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7e9 fd63 	bl	8002550 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018a8a:	f004 f8bd 	bl	801cc08 <UTIL_TIMER_GetCurrentTime>
 8018a8e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018a90:	e00d      	b.n	8018aae <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018a92:	2000      	movs	r0, #0
 8018a94:	f000 fe9a 	bl	80197cc <RadioRssi>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018a9c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018aa4:	429a      	cmp	r2, r3
 8018aa6:	dd02      	ble.n	8018aae <RadioIsChannelFree+0x98>
        {
            status = false;
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	75fb      	strb	r3, [r7, #23]
            break;
 8018aac:	e006      	b.n	8018abc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018aae:	6938      	ldr	r0, [r7, #16]
 8018ab0:	f004 f8bc 	bl	801cc2c <UTIL_TIMER_GetElapsedTime>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	683b      	ldr	r3, [r7, #0]
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	d8ea      	bhi.n	8018a92 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8018abc:	f000 fd97 	bl	80195ee <RadioStandby>

    return status;
 8018ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	3718      	adds	r7, #24
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}

08018aca <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018aca:	b580      	push	{r7, lr}
 8018acc:	b082      	sub	sp, #8
 8018ace:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	2100      	movs	r1, #0
 8018ada:	2000      	movs	r0, #0
 8018adc:	f002 f9ba 	bl	801ae54 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018ae0:	f001 ff6f 	bl	801a9c2 <SUBGRF_GetRandom>
 8018ae4:	6078      	str	r0, [r7, #4]

    return rnd;
 8018ae6:	687b      	ldr	r3, [r7, #4]
}
 8018ae8:	4618      	mov	r0, r3
 8018aea:	3708      	adds	r7, #8
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd80      	pop	{r7, pc}

08018af0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b08a      	sub	sp, #40	; 0x28
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	60b9      	str	r1, [r7, #8]
 8018af8:	607a      	str	r2, [r7, #4]
 8018afa:	461a      	mov	r2, r3
 8018afc:	4603      	mov	r3, r0
 8018afe:	73fb      	strb	r3, [r7, #15]
 8018b00:	4613      	mov	r3, r2
 8018b02:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8018b04:	4ab9      	ldr	r2, [pc, #740]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b06:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018b0a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018b0c:	f003 f829 	bl	801bb62 <RFW_DeInit>
    if( rxContinuous == true )
 8018b10:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d001      	beq.n	8018b1c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018b18:	2300      	movs	r3, #0
 8018b1a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8018b1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d004      	beq.n	8018b2e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018b24:	4ab2      	ldr	r2, [pc, #712]	; (8018df0 <RadioSetRxConfig+0x300>)
 8018b26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8018b2a:	7013      	strb	r3, [r2, #0]
 8018b2c:	e002      	b.n	8018b34 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018b2e:	4bb0      	ldr	r3, [pc, #704]	; (8018df0 <RadioSetRxConfig+0x300>)
 8018b30:	22ff      	movs	r2, #255	; 0xff
 8018b32:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018b34:	7bfb      	ldrb	r3, [r7, #15]
 8018b36:	2b05      	cmp	r3, #5
 8018b38:	d009      	beq.n	8018b4e <RadioSetRxConfig+0x5e>
 8018b3a:	2b05      	cmp	r3, #5
 8018b3c:	f300 81ca 	bgt.w	8018ed4 <RadioSetRxConfig+0x3e4>
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	f000 80bf 	beq.w	8018cc4 <RadioSetRxConfig+0x1d4>
 8018b46:	2b01      	cmp	r3, #1
 8018b48:	f000 8124 	beq.w	8018d94 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018b4c:	e1c2      	b.n	8018ed4 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8018b4e:	2001      	movs	r0, #1
 8018b50:	f002 f87c 	bl	801ac4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018b54:	4ba5      	ldr	r3, [pc, #660]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b56:	2200      	movs	r2, #0
 8018b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018b5c:	4aa3      	ldr	r2, [pc, #652]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018b62:	4ba2      	ldr	r3, [pc, #648]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b64:	2209      	movs	r2, #9
 8018b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018b6a:	4ba0      	ldr	r3, [pc, #640]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018b70:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018b72:	68b8      	ldr	r0, [r7, #8]
 8018b74:	f002 ff28 	bl	801b9c8 <SUBGRF_GetFskBandwidthRegValue>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	461a      	mov	r2, r3
 8018b7c:	4b9b      	ldr	r3, [pc, #620]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018b82:	4b9a      	ldr	r3, [pc, #616]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b84:	2200      	movs	r2, #0
 8018b86:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018b88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018b8a:	00db      	lsls	r3, r3, #3
 8018b8c:	b29a      	uxth	r2, r3
 8018b8e:	4b97      	ldr	r3, [pc, #604]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b90:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018b92:	4b96      	ldr	r3, [pc, #600]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b94:	2200      	movs	r2, #0
 8018b96:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018b98:	4b94      	ldr	r3, [pc, #592]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018b9a:	2210      	movs	r2, #16
 8018b9c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018b9e:	4b93      	ldr	r3, [pc, #588]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018ba4:	4b91      	ldr	r3, [pc, #580]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018baa:	4b91      	ldr	r3, [pc, #580]	; (8018df0 <RadioSetRxConfig+0x300>)
 8018bac:	781a      	ldrb	r2, [r3, #0]
 8018bae:	4b8f      	ldr	r3, [pc, #572]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018bb0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018bb2:	4b8e      	ldr	r3, [pc, #568]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018bb4:	2201      	movs	r2, #1
 8018bb6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018bb8:	4b8c      	ldr	r3, [pc, #560]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018bba:	2200      	movs	r2, #0
 8018bbc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018bbe:	2005      	movs	r0, #5
 8018bc0:	f7ff fec2 	bl	8018948 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018bc4:	488b      	ldr	r0, [pc, #556]	; (8018df4 <RadioSetRxConfig+0x304>)
 8018bc6:	f002 fadb 	bl	801b180 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018bca:	488b      	ldr	r0, [pc, #556]	; (8018df8 <RadioSetRxConfig+0x308>)
 8018bcc:	f002 fbaa 	bl	801b324 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018bd0:	4a8a      	ldr	r2, [pc, #552]	; (8018dfc <RadioSetRxConfig+0x30c>)
 8018bd2:	f107 031c 	add.w	r3, r7, #28
 8018bd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bda:	e883 0003 	stmia.w	r3, {r0, r1}
 8018bde:	f107 031c 	add.w	r3, r7, #28
 8018be2:	4618      	mov	r0, r3
 8018be4:	f001 fe6b 	bl	801a8be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018be8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018bec:	f001 feb6 	bl	801a95c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018bf0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018bf4:	f000 fe09 	bl	801980a <RadioRead>
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c02:	f023 0310 	bic.w	r3, r3, #16
 8018c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c0e:	4619      	mov	r1, r3
 8018c10:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018c14:	f000 fde7 	bl	80197e6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018c18:	2104      	movs	r1, #4
 8018c1a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8018c1e:	f000 fde2 	bl	80197e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018c22:	f640 009b 	movw	r0, #2203	; 0x89b
 8018c26:	f000 fdf0 	bl	801980a <RadioRead>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c34:	f023 031c 	bic.w	r3, r3, #28
 8018c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c40:	f043 0308 	orr.w	r3, r3, #8
 8018c44:	b2db      	uxtb	r3, r3
 8018c46:	4619      	mov	r1, r3
 8018c48:	f640 009b 	movw	r0, #2203	; 0x89b
 8018c4c:	f000 fdcb 	bl	80197e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018c50:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018c54:	f000 fdd9 	bl	801980a <RadioRead>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c62:	f023 0318 	bic.w	r3, r3, #24
 8018c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c6e:	f043 0318 	orr.w	r3, r3, #24
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	4619      	mov	r1, r3
 8018c76:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018c7a:	f000 fdb4 	bl	80197e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018c7e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018c82:	f000 fdc2 	bl	801980a <RadioRead>
 8018c86:	4603      	mov	r3, r0
 8018c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c9c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	4619      	mov	r1, r3
 8018ca4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018ca8:	f000 fd9d 	bl	80197e6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018cac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018cae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018cb2:	fb02 f303 	mul.w	r3, r2, r3
 8018cb6:	461a      	mov	r2, r3
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8018cbe:	4a4b      	ldr	r2, [pc, #300]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018cc0:	6093      	str	r3, [r2, #8]
            break;
 8018cc2:	e108      	b.n	8018ed6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018cc4:	2000      	movs	r0, #0
 8018cc6:	f001 ffc1 	bl	801ac4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018cca:	4b48      	ldr	r3, [pc, #288]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018ccc:	2200      	movs	r2, #0
 8018cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018cd2:	4a46      	ldr	r2, [pc, #280]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018cd8:	4b44      	ldr	r3, [pc, #272]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018cda:	220b      	movs	r2, #11
 8018cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018ce0:	68b8      	ldr	r0, [r7, #8]
 8018ce2:	f002 fe71 	bl	801b9c8 <SUBGRF_GetFskBandwidthRegValue>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	461a      	mov	r2, r3
 8018cea:	4b40      	ldr	r3, [pc, #256]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018cf0:	4b3e      	ldr	r3, [pc, #248]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018cf6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cf8:	00db      	lsls	r3, r3, #3
 8018cfa:	b29a      	uxth	r2, r3
 8018cfc:	4b3b      	ldr	r3, [pc, #236]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018cfe:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018d00:	4b3a      	ldr	r3, [pc, #232]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d02:	2204      	movs	r2, #4
 8018d04:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018d06:	4b39      	ldr	r3, [pc, #228]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d08:	2218      	movs	r2, #24
 8018d0a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018d0c:	4b37      	ldr	r3, [pc, #220]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d0e:	2200      	movs	r2, #0
 8018d10:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018d12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018d16:	f083 0301 	eor.w	r3, r3, #1
 8018d1a:	b2db      	uxtb	r3, r3
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	4b33      	ldr	r3, [pc, #204]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d20:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018d22:	4b33      	ldr	r3, [pc, #204]	; (8018df0 <RadioSetRxConfig+0x300>)
 8018d24:	781a      	ldrb	r2, [r3, #0]
 8018d26:	4b31      	ldr	r3, [pc, #196]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d28:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018d2a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d003      	beq.n	8018d3a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018d32:	4b2e      	ldr	r3, [pc, #184]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d34:	22f2      	movs	r2, #242	; 0xf2
 8018d36:	75da      	strb	r2, [r3, #23]
 8018d38:	e002      	b.n	8018d40 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018d3a:	4b2c      	ldr	r3, [pc, #176]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d3c:	2201      	movs	r2, #1
 8018d3e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018d40:	4b2a      	ldr	r3, [pc, #168]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d42:	2201      	movs	r2, #1
 8018d44:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018d46:	f000 fc52 	bl	80195ee <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018d4a:	2000      	movs	r0, #0
 8018d4c:	f7ff fdfc 	bl	8018948 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d50:	4828      	ldr	r0, [pc, #160]	; (8018df4 <RadioSetRxConfig+0x304>)
 8018d52:	f002 fa15 	bl	801b180 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d56:	4828      	ldr	r0, [pc, #160]	; (8018df8 <RadioSetRxConfig+0x308>)
 8018d58:	f002 fae4 	bl	801b324 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018d5c:	4a28      	ldr	r2, [pc, #160]	; (8018e00 <RadioSetRxConfig+0x310>)
 8018d5e:	f107 0314 	add.w	r3, r7, #20
 8018d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d66:	e883 0003 	stmia.w	r3, {r0, r1}
 8018d6a:	f107 0314 	add.w	r3, r7, #20
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f001 fda5 	bl	801a8be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018d74:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018d78:	f001 fdf0 	bl	801a95c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018d7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018d7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018d82:	fb02 f303 	mul.w	r3, r2, r3
 8018d86:	461a      	mov	r2, r3
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d8e:	4a17      	ldr	r2, [pc, #92]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d90:	6093      	str	r3, [r2, #8]
            break;
 8018d92:	e0a0      	b.n	8018ed6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018d94:	2000      	movs	r0, #0
 8018d96:	f001 ff59 	bl	801ac4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018d9a:	4b14      	ldr	r3, [pc, #80]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018d9c:	2201      	movs	r2, #1
 8018d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	b2da      	uxtb	r2, r3
 8018da6:	4b11      	ldr	r3, [pc, #68]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018dac:	4a15      	ldr	r2, [pc, #84]	; (8018e04 <RadioSetRxConfig+0x314>)
 8018dae:	68bb      	ldr	r3, [r7, #8]
 8018db0:	4413      	add	r3, r2
 8018db2:	781a      	ldrb	r2, [r3, #0]
 8018db4:	4b0d      	ldr	r3, [pc, #52]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018dba:	4a0c      	ldr	r2, [pc, #48]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018dbc:	7bbb      	ldrb	r3, [r7, #14]
 8018dbe:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018dc2:	68bb      	ldr	r3, [r7, #8]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d105      	bne.n	8018dd4 <RadioSetRxConfig+0x2e4>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2b0b      	cmp	r3, #11
 8018dcc:	d008      	beq.n	8018de0 <RadioSetRxConfig+0x2f0>
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2b0c      	cmp	r3, #12
 8018dd2:	d005      	beq.n	8018de0 <RadioSetRxConfig+0x2f0>
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	2b01      	cmp	r3, #1
 8018dd8:	d116      	bne.n	8018e08 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	2b0c      	cmp	r3, #12
 8018dde:	d113      	bne.n	8018e08 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018de0:	4b02      	ldr	r3, [pc, #8]	; (8018dec <RadioSetRxConfig+0x2fc>)
 8018de2:	2201      	movs	r2, #1
 8018de4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018de8:	e012      	b.n	8018e10 <RadioSetRxConfig+0x320>
 8018dea:	bf00      	nop
 8018dec:	20002148 	.word	0x20002148
 8018df0:	20000134 	.word	0x20000134
 8018df4:	20002180 	.word	0x20002180
 8018df8:	20002156 	.word	0x20002156
 8018dfc:	0801d944 	.word	0x0801d944
 8018e00:	0801d94c 	.word	0x0801d94c
 8018e04:	0801df28 	.word	0x0801df28
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018e08:	4b35      	ldr	r3, [pc, #212]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018e10:	4b33      	ldr	r3, [pc, #204]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e12:	2201      	movs	r2, #1
 8018e14:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018e16:	4b32      	ldr	r3, [pc, #200]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018e1c:	2b05      	cmp	r3, #5
 8018e1e:	d004      	beq.n	8018e2a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018e20:	4b2f      	ldr	r3, [pc, #188]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018e26:	2b06      	cmp	r3, #6
 8018e28:	d10a      	bne.n	8018e40 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018e2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e2c:	2b0b      	cmp	r3, #11
 8018e2e:	d803      	bhi.n	8018e38 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018e30:	4b2b      	ldr	r3, [pc, #172]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e32:	220c      	movs	r2, #12
 8018e34:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018e36:	e006      	b.n	8018e46 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018e38:	4a29      	ldr	r2, [pc, #164]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e3c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018e3e:	e002      	b.n	8018e46 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018e40:	4a27      	ldr	r2, [pc, #156]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e44:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018e46:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018e4a:	4b25      	ldr	r3, [pc, #148]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e4c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018e4e:	4b25      	ldr	r3, [pc, #148]	; (8018ee4 <RadioSetRxConfig+0x3f4>)
 8018e50:	781a      	ldrb	r2, [r3, #0]
 8018e52:	4b23      	ldr	r3, [pc, #140]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e54:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018e56:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018e5a:	4b21      	ldr	r3, [pc, #132]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e5c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018e60:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8018e64:	4b1e      	ldr	r3, [pc, #120]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018e6a:	f000 fbc0 	bl	80195ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018e6e:	2001      	movs	r0, #1
 8018e70:	f7ff fd6a 	bl	8018948 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e74:	481c      	ldr	r0, [pc, #112]	; (8018ee8 <RadioSetRxConfig+0x3f8>)
 8018e76:	f002 f983 	bl	801b180 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e7a:	481c      	ldr	r0, [pc, #112]	; (8018eec <RadioSetRxConfig+0x3fc>)
 8018e7c:	f002 fa52 	bl	801b324 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018e80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018e82:	b2db      	uxtb	r3, r3
 8018e84:	4618      	mov	r0, r3
 8018e86:	f001 fef0 	bl	801ac6a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018e8a:	4b15      	ldr	r3, [pc, #84]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018e8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018e90:	2b01      	cmp	r3, #1
 8018e92:	d10d      	bne.n	8018eb0 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018e94:	f240 7036 	movw	r0, #1846	; 0x736
 8018e98:	f002 fba0 	bl	801b5dc <SUBGRF_ReadRegister>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	f023 0304 	bic.w	r3, r3, #4
 8018ea2:	b2db      	uxtb	r3, r3
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	f240 7036 	movw	r0, #1846	; 0x736
 8018eaa:	f002 fb83 	bl	801b5b4 <SUBGRF_WriteRegister>
 8018eae:	e00c      	b.n	8018eca <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018eb0:	f240 7036 	movw	r0, #1846	; 0x736
 8018eb4:	f002 fb92 	bl	801b5dc <SUBGRF_ReadRegister>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	f043 0304 	orr.w	r3, r3, #4
 8018ebe:	b2db      	uxtb	r3, r3
 8018ec0:	4619      	mov	r1, r3
 8018ec2:	f240 7036 	movw	r0, #1846	; 0x736
 8018ec6:	f002 fb75 	bl	801b5b4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018eca:	4b05      	ldr	r3, [pc, #20]	; (8018ee0 <RadioSetRxConfig+0x3f0>)
 8018ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ed0:	609a      	str	r2, [r3, #8]
            break;
 8018ed2:	e000      	b.n	8018ed6 <RadioSetRxConfig+0x3e6>
            break;
 8018ed4:	bf00      	nop
    }
}
 8018ed6:	bf00      	nop
 8018ed8:	3728      	adds	r7, #40	; 0x28
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}
 8018ede:	bf00      	nop
 8018ee0:	20002148 	.word	0x20002148
 8018ee4:	20000134 	.word	0x20000134
 8018ee8:	20002180 	.word	0x20002180
 8018eec:	20002156 	.word	0x20002156

08018ef0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b086      	sub	sp, #24
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	60ba      	str	r2, [r7, #8]
 8018ef8:	607b      	str	r3, [r7, #4]
 8018efa:	4603      	mov	r3, r0
 8018efc:	73fb      	strb	r3, [r7, #15]
 8018efe:	460b      	mov	r3, r1
 8018f00:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018f02:	f002 fe2e 	bl	801bb62 <RFW_DeInit>
    switch( modem )
 8018f06:	7bfb      	ldrb	r3, [r7, #15]
 8018f08:	2b04      	cmp	r3, #4
 8018f0a:	f000 80c7 	beq.w	801909c <RadioSetTxConfig+0x1ac>
 8018f0e:	2b04      	cmp	r3, #4
 8018f10:	f300 80d6 	bgt.w	80190c0 <RadioSetTxConfig+0x1d0>
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d002      	beq.n	8018f1e <RadioSetTxConfig+0x2e>
 8018f18:	2b01      	cmp	r3, #1
 8018f1a:	d059      	beq.n	8018fd0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018f1c:	e0d0      	b.n	80190c0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018f1e:	4b74      	ldr	r3, [pc, #464]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f20:	2200      	movs	r2, #0
 8018f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018f26:	4a72      	ldr	r2, [pc, #456]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f28:	6a3b      	ldr	r3, [r7, #32]
 8018f2a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018f2c:	4b70      	ldr	r3, [pc, #448]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f2e:	220b      	movs	r2, #11
 8018f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018f34:	6878      	ldr	r0, [r7, #4]
 8018f36:	f002 fd47 	bl	801b9c8 <SUBGRF_GetFskBandwidthRegValue>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	461a      	mov	r2, r3
 8018f3e:	4b6c      	ldr	r3, [pc, #432]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018f44:	4a6a      	ldr	r2, [pc, #424]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f46:	68bb      	ldr	r3, [r7, #8]
 8018f48:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018f4a:	4b69      	ldr	r3, [pc, #420]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018f52:	00db      	lsls	r3, r3, #3
 8018f54:	b29a      	uxth	r2, r3
 8018f56:	4b66      	ldr	r3, [pc, #408]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f58:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018f5a:	4b65      	ldr	r3, [pc, #404]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f5c:	2204      	movs	r2, #4
 8018f5e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018f60:	4b63      	ldr	r3, [pc, #396]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f62:	2218      	movs	r2, #24
 8018f64:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018f66:	4b62      	ldr	r3, [pc, #392]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f68:	2200      	movs	r2, #0
 8018f6a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018f6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018f70:	f083 0301 	eor.w	r3, r3, #1
 8018f74:	b2db      	uxtb	r3, r3
 8018f76:	461a      	mov	r2, r3
 8018f78:	4b5d      	ldr	r3, [pc, #372]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f7a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018f7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d003      	beq.n	8018f8c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018f84:	4b5a      	ldr	r3, [pc, #360]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f86:	22f2      	movs	r2, #242	; 0xf2
 8018f88:	75da      	strb	r2, [r3, #23]
 8018f8a:	e002      	b.n	8018f92 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018f8c:	4b58      	ldr	r3, [pc, #352]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f8e:	2201      	movs	r2, #1
 8018f90:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018f92:	4b57      	ldr	r3, [pc, #348]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018f94:	2201      	movs	r2, #1
 8018f96:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018f98:	f000 fb29 	bl	80195ee <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018f9c:	2000      	movs	r0, #0
 8018f9e:	f7ff fcd3 	bl	8018948 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018fa2:	4854      	ldr	r0, [pc, #336]	; (80190f4 <RadioSetTxConfig+0x204>)
 8018fa4:	f002 f8ec 	bl	801b180 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018fa8:	4853      	ldr	r0, [pc, #332]	; (80190f8 <RadioSetTxConfig+0x208>)
 8018faa:	f002 f9bb 	bl	801b324 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018fae:	4a53      	ldr	r2, [pc, #332]	; (80190fc <RadioSetTxConfig+0x20c>)
 8018fb0:	f107 0310 	add.w	r3, r7, #16
 8018fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fb8:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fbc:	f107 0310 	add.w	r3, r7, #16
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f001 fc7c 	bl	801a8be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018fca:	f001 fcc7 	bl	801a95c <SUBGRF_SetWhiteningSeed>
            break;
 8018fce:	e078      	b.n	80190c2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018fd0:	4b47      	ldr	r3, [pc, #284]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018fd2:	2201      	movs	r2, #1
 8018fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018fd8:	6a3b      	ldr	r3, [r7, #32]
 8018fda:	b2da      	uxtb	r2, r3
 8018fdc:	4b44      	ldr	r3, [pc, #272]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018fe2:	4a47      	ldr	r2, [pc, #284]	; (8019100 <RadioSetTxConfig+0x210>)
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	4413      	add	r3, r2
 8018fe8:	781a      	ldrb	r2, [r3, #0]
 8018fea:	4b41      	ldr	r3, [pc, #260]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018ff0:	4a3f      	ldr	r2, [pc, #252]	; (80190f0 <RadioSetTxConfig+0x200>)
 8018ff2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018ff6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d105      	bne.n	801900c <RadioSetTxConfig+0x11c>
 8019000:	6a3b      	ldr	r3, [r7, #32]
 8019002:	2b0b      	cmp	r3, #11
 8019004:	d008      	beq.n	8019018 <RadioSetTxConfig+0x128>
 8019006:	6a3b      	ldr	r3, [r7, #32]
 8019008:	2b0c      	cmp	r3, #12
 801900a:	d005      	beq.n	8019018 <RadioSetTxConfig+0x128>
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	2b01      	cmp	r3, #1
 8019010:	d107      	bne.n	8019022 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019012:	6a3b      	ldr	r3, [r7, #32]
 8019014:	2b0c      	cmp	r3, #12
 8019016:	d104      	bne.n	8019022 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019018:	4b35      	ldr	r3, [pc, #212]	; (80190f0 <RadioSetTxConfig+0x200>)
 801901a:	2201      	movs	r2, #1
 801901c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019020:	e003      	b.n	801902a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019022:	4b33      	ldr	r3, [pc, #204]	; (80190f0 <RadioSetTxConfig+0x200>)
 8019024:	2200      	movs	r2, #0
 8019026:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801902a:	4b31      	ldr	r3, [pc, #196]	; (80190f0 <RadioSetTxConfig+0x200>)
 801902c:	2201      	movs	r2, #1
 801902e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019030:	4b2f      	ldr	r3, [pc, #188]	; (80190f0 <RadioSetTxConfig+0x200>)
 8019032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019036:	2b05      	cmp	r3, #5
 8019038:	d004      	beq.n	8019044 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801903a:	4b2d      	ldr	r3, [pc, #180]	; (80190f0 <RadioSetTxConfig+0x200>)
 801903c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019040:	2b06      	cmp	r3, #6
 8019042:	d10a      	bne.n	801905a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8019044:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019046:	2b0b      	cmp	r3, #11
 8019048:	d803      	bhi.n	8019052 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801904a:	4b29      	ldr	r3, [pc, #164]	; (80190f0 <RadioSetTxConfig+0x200>)
 801904c:	220c      	movs	r2, #12
 801904e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019050:	e006      	b.n	8019060 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019052:	4a27      	ldr	r2, [pc, #156]	; (80190f0 <RadioSetTxConfig+0x200>)
 8019054:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019056:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019058:	e002      	b.n	8019060 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801905a:	4a25      	ldr	r2, [pc, #148]	; (80190f0 <RadioSetTxConfig+0x200>)
 801905c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801905e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019060:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019064:	4b22      	ldr	r3, [pc, #136]	; (80190f0 <RadioSetTxConfig+0x200>)
 8019066:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019068:	4b26      	ldr	r3, [pc, #152]	; (8019104 <RadioSetTxConfig+0x214>)
 801906a:	781a      	ldrb	r2, [r3, #0]
 801906c:	4b20      	ldr	r3, [pc, #128]	; (80190f0 <RadioSetTxConfig+0x200>)
 801906e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019070:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019074:	4b1e      	ldr	r3, [pc, #120]	; (80190f0 <RadioSetTxConfig+0x200>)
 8019076:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801907a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801907e:	4b1c      	ldr	r3, [pc, #112]	; (80190f0 <RadioSetTxConfig+0x200>)
 8019080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019084:	f000 fab3 	bl	80195ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019088:	2001      	movs	r0, #1
 801908a:	f7ff fc5d 	bl	8018948 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801908e:	4819      	ldr	r0, [pc, #100]	; (80190f4 <RadioSetTxConfig+0x204>)
 8019090:	f002 f876 	bl	801b180 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019094:	4818      	ldr	r0, [pc, #96]	; (80190f8 <RadioSetTxConfig+0x208>)
 8019096:	f002 f945 	bl	801b324 <SUBGRF_SetPacketParams>
            break;
 801909a:	e012      	b.n	80190c2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801909c:	2004      	movs	r0, #4
 801909e:	f7ff fc53 	bl	8018948 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80190a2:	4b13      	ldr	r3, [pc, #76]	; (80190f0 <RadioSetTxConfig+0x200>)
 80190a4:	2202      	movs	r2, #2
 80190a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80190aa:	4a11      	ldr	r2, [pc, #68]	; (80190f0 <RadioSetTxConfig+0x200>)
 80190ac:	6a3b      	ldr	r3, [r7, #32]
 80190ae:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80190b0:	4b0f      	ldr	r3, [pc, #60]	; (80190f0 <RadioSetTxConfig+0x200>)
 80190b2:	2216      	movs	r2, #22
 80190b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80190b8:	480e      	ldr	r0, [pc, #56]	; (80190f4 <RadioSetTxConfig+0x204>)
 80190ba:	f002 f861 	bl	801b180 <SUBGRF_SetModulationParams>
            break;
 80190be:	e000      	b.n	80190c2 <RadioSetTxConfig+0x1d2>
            break;
 80190c0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80190c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80190c6:	4618      	mov	r0, r3
 80190c8:	f002 fb90 	bl	801b7ec <SUBGRF_SetRfTxPower>
 80190cc:	4603      	mov	r3, r0
 80190ce:	461a      	mov	r2, r3
 80190d0:	4b07      	ldr	r3, [pc, #28]	; (80190f0 <RadioSetTxConfig+0x200>)
 80190d2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80190d6:	4b06      	ldr	r3, [pc, #24]	; (80190f0 <RadioSetTxConfig+0x200>)
 80190d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80190dc:	4618      	mov	r0, r3
 80190de:	f002 fd54 	bl	801bb8a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80190e2:	4a03      	ldr	r2, [pc, #12]	; (80190f0 <RadioSetTxConfig+0x200>)
 80190e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80190e6:	6053      	str	r3, [r2, #4]
}
 80190e8:	bf00      	nop
 80190ea:	3718      	adds	r7, #24
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}
 80190f0:	20002148 	.word	0x20002148
 80190f4:	20002180 	.word	0x20002180
 80190f8:	20002156 	.word	0x20002156
 80190fc:	0801d94c 	.word	0x0801d94c
 8019100:	0801df28 	.word	0x0801df28
 8019104:	20000134 	.word	0x20000134

08019108 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019108:	b480      	push	{r7}
 801910a:	b083      	sub	sp, #12
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
    return true;
 8019110:	2301      	movs	r3, #1
}
 8019112:	4618      	mov	r0, r3
 8019114:	370c      	adds	r7, #12
 8019116:	46bd      	mov	sp, r7
 8019118:	bc80      	pop	{r7}
 801911a:	4770      	bx	lr

0801911c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801911c:	b480      	push	{r7}
 801911e:	b085      	sub	sp, #20
 8019120:	af00      	add	r7, sp, #0
 8019122:	4603      	mov	r3, r0
 8019124:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019126:	2300      	movs	r3, #0
 8019128:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801912a:	79fb      	ldrb	r3, [r7, #7]
 801912c:	2b0a      	cmp	r3, #10
 801912e:	d83e      	bhi.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
 8019130:	a201      	add	r2, pc, #4	; (adr r2, 8019138 <RadioGetLoRaBandwidthInHz+0x1c>)
 8019132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019136:	bf00      	nop
 8019138:	08019165 	.word	0x08019165
 801913c:	08019175 	.word	0x08019175
 8019140:	08019185 	.word	0x08019185
 8019144:	08019195 	.word	0x08019195
 8019148:	0801919d 	.word	0x0801919d
 801914c:	080191a3 	.word	0x080191a3
 8019150:	080191a9 	.word	0x080191a9
 8019154:	080191af 	.word	0x080191af
 8019158:	0801916d 	.word	0x0801916d
 801915c:	0801917d 	.word	0x0801917d
 8019160:	0801918d 	.word	0x0801918d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019164:	f641 6384 	movw	r3, #7812	; 0x1e84
 8019168:	60fb      	str	r3, [r7, #12]
        break;
 801916a:	e020      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801916c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019170:	60fb      	str	r3, [r7, #12]
        break;
 8019172:	e01c      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019174:	f643 5309 	movw	r3, #15625	; 0x3d09
 8019178:	60fb      	str	r3, [r7, #12]
        break;
 801917a:	e018      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801917c:	f245 1361 	movw	r3, #20833	; 0x5161
 8019180:	60fb      	str	r3, [r7, #12]
        break;
 8019182:	e014      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019184:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019188:	60fb      	str	r3, [r7, #12]
        break;
 801918a:	e010      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801918c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8019190:	60fb      	str	r3, [r7, #12]
        break;
 8019192:	e00c      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019194:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019198:	60fb      	str	r3, [r7, #12]
        break;
 801919a:	e008      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801919c:	4b07      	ldr	r3, [pc, #28]	; (80191bc <RadioGetLoRaBandwidthInHz+0xa0>)
 801919e:	60fb      	str	r3, [r7, #12]
        break;
 80191a0:	e005      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80191a2:	4b07      	ldr	r3, [pc, #28]	; (80191c0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80191a4:	60fb      	str	r3, [r7, #12]
        break;
 80191a6:	e002      	b.n	80191ae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80191a8:	4b06      	ldr	r3, [pc, #24]	; (80191c4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80191aa:	60fb      	str	r3, [r7, #12]
        break;
 80191ac:	bf00      	nop
    }

    return bandwidthInHz;
 80191ae:	68fb      	ldr	r3, [r7, #12]
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	3714      	adds	r7, #20
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bc80      	pop	{r7}
 80191b8:	4770      	bx	lr
 80191ba:	bf00      	nop
 80191bc:	0001e848 	.word	0x0001e848
 80191c0:	0003d090 	.word	0x0003d090
 80191c4:	0007a120 	.word	0x0007a120

080191c8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80191c8:	b480      	push	{r7}
 80191ca:	b083      	sub	sp, #12
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	4608      	mov	r0, r1
 80191d2:	4611      	mov	r1, r2
 80191d4:	461a      	mov	r2, r3
 80191d6:	4603      	mov	r3, r0
 80191d8:	70fb      	strb	r3, [r7, #3]
 80191da:	460b      	mov	r3, r1
 80191dc:	803b      	strh	r3, [r7, #0]
 80191de:	4613      	mov	r3, r2
 80191e0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80191e2:	883b      	ldrh	r3, [r7, #0]
 80191e4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80191e6:	78ba      	ldrb	r2, [r7, #2]
 80191e8:	f082 0201 	eor.w	r2, r2, #1
 80191ec:	b2d2      	uxtb	r2, r2
 80191ee:	2a00      	cmp	r2, #0
 80191f0:	d001      	beq.n	80191f6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80191f2:	2208      	movs	r2, #8
 80191f4:	e000      	b.n	80191f8 <RadioGetGfskTimeOnAirNumerator+0x30>
 80191f6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80191f8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80191fa:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80191fe:	7c3b      	ldrb	r3, [r7, #16]
 8019200:	7d39      	ldrb	r1, [r7, #20]
 8019202:	2900      	cmp	r1, #0
 8019204:	d001      	beq.n	801920a <RadioGetGfskTimeOnAirNumerator+0x42>
 8019206:	2102      	movs	r1, #2
 8019208:	e000      	b.n	801920c <RadioGetGfskTimeOnAirNumerator+0x44>
 801920a:	2100      	movs	r1, #0
 801920c:	440b      	add	r3, r1
 801920e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019210:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8019212:	4618      	mov	r0, r3
 8019214:	370c      	adds	r7, #12
 8019216:	46bd      	mov	sp, r7
 8019218:	bc80      	pop	{r7}
 801921a:	4770      	bx	lr

0801921c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801921c:	b480      	push	{r7}
 801921e:	b08b      	sub	sp, #44	; 0x2c
 8019220:	af00      	add	r7, sp, #0
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	4611      	mov	r1, r2
 8019228:	461a      	mov	r2, r3
 801922a:	460b      	mov	r3, r1
 801922c:	71fb      	strb	r3, [r7, #7]
 801922e:	4613      	mov	r3, r2
 8019230:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019232:	79fb      	ldrb	r3, [r7, #7]
 8019234:	3304      	adds	r3, #4
 8019236:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019238:	2300      	movs	r3, #0
 801923a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	2b05      	cmp	r3, #5
 8019242:	d002      	beq.n	801924a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019244:	68bb      	ldr	r3, [r7, #8]
 8019246:	2b06      	cmp	r3, #6
 8019248:	d104      	bne.n	8019254 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801924a:	88bb      	ldrh	r3, [r7, #4]
 801924c:	2b0b      	cmp	r3, #11
 801924e:	d801      	bhi.n	8019254 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019250:	230c      	movs	r3, #12
 8019252:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d105      	bne.n	8019266 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801925a:	68bb      	ldr	r3, [r7, #8]
 801925c:	2b0b      	cmp	r3, #11
 801925e:	d008      	beq.n	8019272 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	2b0c      	cmp	r3, #12
 8019264:	d005      	beq.n	8019272 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	2b01      	cmp	r3, #1
 801926a:	d105      	bne.n	8019278 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801926c:	68bb      	ldr	r3, [r7, #8]
 801926e:	2b0c      	cmp	r3, #12
 8019270:	d102      	bne.n	8019278 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019272:	2301      	movs	r3, #1
 8019274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019278:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801927c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801927e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019282:	2a00      	cmp	r2, #0
 8019284:	d001      	beq.n	801928a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019286:	2210      	movs	r2, #16
 8019288:	e000      	b.n	801928c <RadioGetLoRaTimeOnAirNumerator+0x70>
 801928a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801928c:	4413      	add	r3, r2
 801928e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019290:	68bb      	ldr	r3, [r7, #8]
 8019292:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019294:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019296:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801929a:	2a00      	cmp	r2, #0
 801929c:	d001      	beq.n	80192a2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801929e:	2200      	movs	r2, #0
 80192a0:	e000      	b.n	80192a4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80192a2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80192a4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80192a6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80192a8:	68bb      	ldr	r3, [r7, #8]
 80192aa:	2b06      	cmp	r3, #6
 80192ac:	d803      	bhi.n	80192b6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80192ae:	68bb      	ldr	r3, [r7, #8]
 80192b0:	009b      	lsls	r3, r3, #2
 80192b2:	623b      	str	r3, [r7, #32]
 80192b4:	e00e      	b.n	80192d4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80192b6:	69fb      	ldr	r3, [r7, #28]
 80192b8:	3308      	adds	r3, #8
 80192ba:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80192bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d004      	beq.n	80192ce <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	3b02      	subs	r3, #2
 80192c8:	009b      	lsls	r3, r3, #2
 80192ca:	623b      	str	r3, [r7, #32]
 80192cc:	e002      	b.n	80192d4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80192ce:	68bb      	ldr	r3, [r7, #8]
 80192d0:	009b      	lsls	r3, r3, #2
 80192d2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80192d4:	69fb      	ldr	r3, [r7, #28]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	da01      	bge.n	80192de <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80192da:	2300      	movs	r3, #0
 80192dc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80192de:	69fa      	ldr	r2, [r7, #28]
 80192e0:	6a3b      	ldr	r3, [r7, #32]
 80192e2:	4413      	add	r3, r2
 80192e4:	1e5a      	subs	r2, r3, #1
 80192e6:	6a3b      	ldr	r3, [r7, #32]
 80192e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80192ec:	697a      	ldr	r2, [r7, #20]
 80192ee:	fb03 f202 	mul.w	r2, r3, r2
 80192f2:	88bb      	ldrh	r3, [r7, #4]
 80192f4:	4413      	add	r3, r2
    int32_t intermediate =
 80192f6:	330c      	adds	r3, #12
 80192f8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	2b06      	cmp	r3, #6
 80192fe:	d802      	bhi.n	8019306 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019300:	69bb      	ldr	r3, [r7, #24]
 8019302:	3302      	adds	r3, #2
 8019304:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019306:	69bb      	ldr	r3, [r7, #24]
 8019308:	009b      	lsls	r3, r3, #2
 801930a:	1c5a      	adds	r2, r3, #1
 801930c:	68bb      	ldr	r3, [r7, #8]
 801930e:	3b02      	subs	r3, #2
 8019310:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019314:	4618      	mov	r0, r3
 8019316:	372c      	adds	r7, #44	; 0x2c
 8019318:	46bd      	mov	sp, r7
 801931a:	bc80      	pop	{r7}
 801931c:	4770      	bx	lr
	...

08019320 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b08a      	sub	sp, #40	; 0x28
 8019324:	af04      	add	r7, sp, #16
 8019326:	60b9      	str	r1, [r7, #8]
 8019328:	607a      	str	r2, [r7, #4]
 801932a:	461a      	mov	r2, r3
 801932c:	4603      	mov	r3, r0
 801932e:	73fb      	strb	r3, [r7, #15]
 8019330:	4613      	mov	r3, r2
 8019332:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019334:	2300      	movs	r3, #0
 8019336:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019338:	2301      	movs	r3, #1
 801933a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801933c:	7bfb      	ldrb	r3, [r7, #15]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d002      	beq.n	8019348 <RadioTimeOnAir+0x28>
 8019342:	2b01      	cmp	r3, #1
 8019344:	d017      	beq.n	8019376 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019346:	e035      	b.n	80193b4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019348:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801934c:	8c3a      	ldrh	r2, [r7, #32]
 801934e:	7bb9      	ldrb	r1, [r7, #14]
 8019350:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019354:	9301      	str	r3, [sp, #4]
 8019356:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801935a:	9300      	str	r3, [sp, #0]
 801935c:	4603      	mov	r3, r0
 801935e:	6878      	ldr	r0, [r7, #4]
 8019360:	f7ff ff32 	bl	80191c8 <RadioGetGfskTimeOnAirNumerator>
 8019364:	4603      	mov	r3, r0
 8019366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801936a:	fb02 f303 	mul.w	r3, r2, r3
 801936e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	613b      	str	r3, [r7, #16]
        break;
 8019374:	e01e      	b.n	80193b4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019376:	8c39      	ldrh	r1, [r7, #32]
 8019378:	7bba      	ldrb	r2, [r7, #14]
 801937a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801937e:	9302      	str	r3, [sp, #8]
 8019380:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019384:	9301      	str	r3, [sp, #4]
 8019386:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801938a:	9300      	str	r3, [sp, #0]
 801938c:	460b      	mov	r3, r1
 801938e:	6879      	ldr	r1, [r7, #4]
 8019390:	68b8      	ldr	r0, [r7, #8]
 8019392:	f7ff ff43 	bl	801921c <RadioGetLoRaTimeOnAirNumerator>
 8019396:	4603      	mov	r3, r0
 8019398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801939c:	fb02 f303 	mul.w	r3, r2, r3
 80193a0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80193a2:	4a0a      	ldr	r2, [pc, #40]	; (80193cc <RadioTimeOnAir+0xac>)
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	4413      	add	r3, r2
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7ff feb6 	bl	801911c <RadioGetLoRaBandwidthInHz>
 80193b0:	6138      	str	r0, [r7, #16]
        break;
 80193b2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80193b4:	697a      	ldr	r2, [r7, #20]
 80193b6:	693b      	ldr	r3, [r7, #16]
 80193b8:	4413      	add	r3, r2
 80193ba:	1e5a      	subs	r2, r3, #1
 80193bc:	693b      	ldr	r3, [r7, #16]
 80193be:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3718      	adds	r7, #24
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}
 80193ca:	bf00      	nop
 80193cc:	0801df28 	.word	0x0801df28

080193d0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
 80193d8:	460b      	mov	r3, r1
 80193da:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80193dc:	2300      	movs	r3, #0
 80193de:	2200      	movs	r2, #0
 80193e0:	f240 2101 	movw	r1, #513	; 0x201
 80193e4:	f240 2001 	movw	r0, #513	; 0x201
 80193e8:	f001 fd34 	bl	801ae54 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80193ec:	4b71      	ldr	r3, [pc, #452]	; (80195b4 <RadioSend+0x1e4>)
 80193ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80193f2:	2101      	movs	r1, #1
 80193f4:	4618      	mov	r0, r3
 80193f6:	f002 f9d1 	bl	801b79c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80193fa:	4b6e      	ldr	r3, [pc, #440]	; (80195b4 <RadioSend+0x1e4>)
 80193fc:	781b      	ldrb	r3, [r3, #0]
 80193fe:	2b01      	cmp	r3, #1
 8019400:	d112      	bne.n	8019428 <RadioSend+0x58>
 8019402:	4b6c      	ldr	r3, [pc, #432]	; (80195b4 <RadioSend+0x1e4>)
 8019404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019408:	2b06      	cmp	r3, #6
 801940a:	d10d      	bne.n	8019428 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801940c:	f640 0089 	movw	r0, #2185	; 0x889
 8019410:	f002 f8e4 	bl	801b5dc <SUBGRF_ReadRegister>
 8019414:	4603      	mov	r3, r0
 8019416:	f023 0304 	bic.w	r3, r3, #4
 801941a:	b2db      	uxtb	r3, r3
 801941c:	4619      	mov	r1, r3
 801941e:	f640 0089 	movw	r0, #2185	; 0x889
 8019422:	f002 f8c7 	bl	801b5b4 <SUBGRF_WriteRegister>
 8019426:	e00c      	b.n	8019442 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019428:	f640 0089 	movw	r0, #2185	; 0x889
 801942c:	f002 f8d6 	bl	801b5dc <SUBGRF_ReadRegister>
 8019430:	4603      	mov	r3, r0
 8019432:	f043 0304 	orr.w	r3, r3, #4
 8019436:	b2db      	uxtb	r3, r3
 8019438:	4619      	mov	r1, r3
 801943a:	f640 0089 	movw	r0, #2185	; 0x889
 801943e:	f002 f8b9 	bl	801b5b4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8019442:	4b5c      	ldr	r3, [pc, #368]	; (80195b4 <RadioSend+0x1e4>)
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	2b04      	cmp	r3, #4
 8019448:	f200 80a7 	bhi.w	801959a <RadioSend+0x1ca>
 801944c:	a201      	add	r2, pc, #4	; (adr r2, 8019454 <RadioSend+0x84>)
 801944e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019452:	bf00      	nop
 8019454:	08019483 	.word	0x08019483
 8019458:	08019469 	.word	0x08019469
 801945c:	08019483 	.word	0x08019483
 8019460:	080194e3 	.word	0x080194e3
 8019464:	08019503 	.word	0x08019503
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019468:	4a52      	ldr	r2, [pc, #328]	; (80195b4 <RadioSend+0x1e4>)
 801946a:	78fb      	ldrb	r3, [r7, #3]
 801946c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801946e:	4852      	ldr	r0, [pc, #328]	; (80195b8 <RadioSend+0x1e8>)
 8019470:	f001 ff58 	bl	801b324 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019474:	78fb      	ldrb	r3, [r7, #3]
 8019476:	2200      	movs	r2, #0
 8019478:	4619      	mov	r1, r3
 801947a:	6878      	ldr	r0, [r7, #4]
 801947c:	f001 fa0c 	bl	801a898 <SUBGRF_SendPayload>
            break;
 8019480:	e08c      	b.n	801959c <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019482:	f002 fb74 	bl	801bb6e <RFW_Is_Init>
 8019486:	4603      	mov	r3, r0
 8019488:	2b01      	cmp	r3, #1
 801948a:	d11d      	bne.n	80194c8 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801948c:	f107 020d 	add.w	r2, r7, #13
 8019490:	78fb      	ldrb	r3, [r7, #3]
 8019492:	4619      	mov	r1, r3
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	f002 fb82 	bl	801bb9e <RFW_TransmitInit>
 801949a:	4603      	mov	r3, r0
 801949c:	2b00      	cmp	r3, #0
 801949e:	d10c      	bne.n	80194ba <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80194a0:	7b7a      	ldrb	r2, [r7, #13]
 80194a2:	4b44      	ldr	r3, [pc, #272]	; (80195b4 <RadioSend+0x1e4>)
 80194a4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80194a6:	4844      	ldr	r0, [pc, #272]	; (80195b8 <RadioSend+0x1e8>)
 80194a8:	f001 ff3c 	bl	801b324 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80194ac:	7b7b      	ldrb	r3, [r7, #13]
 80194ae:	2200      	movs	r2, #0
 80194b0:	4619      	mov	r1, r3
 80194b2:	6878      	ldr	r0, [r7, #4]
 80194b4:	f001 f9f0 	bl	801a898 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80194b8:	e070      	b.n	801959c <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80194ba:	4b40      	ldr	r3, [pc, #256]	; (80195bc <RadioSend+0x1ec>)
 80194bc:	2201      	movs	r2, #1
 80194be:	2100      	movs	r1, #0
 80194c0:	2002      	movs	r0, #2
 80194c2:	f003 fc91 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
 80194c6:	e072      	b.n	80195ae <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80194c8:	4a3a      	ldr	r2, [pc, #232]	; (80195b4 <RadioSend+0x1e4>)
 80194ca:	78fb      	ldrb	r3, [r7, #3]
 80194cc:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80194ce:	483a      	ldr	r0, [pc, #232]	; (80195b8 <RadioSend+0x1e8>)
 80194d0:	f001 ff28 	bl	801b324 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80194d4:	78fb      	ldrb	r3, [r7, #3]
 80194d6:	2200      	movs	r2, #0
 80194d8:	4619      	mov	r1, r3
 80194da:	6878      	ldr	r0, [r7, #4]
 80194dc:	f001 f9dc 	bl	801a898 <SUBGRF_SendPayload>
            break;
 80194e0:	e05c      	b.n	801959c <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80194e2:	4b34      	ldr	r3, [pc, #208]	; (80195b4 <RadioSend+0x1e4>)
 80194e4:	2202      	movs	r2, #2
 80194e6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80194e8:	4a32      	ldr	r2, [pc, #200]	; (80195b4 <RadioSend+0x1e4>)
 80194ea:	78fb      	ldrb	r3, [r7, #3]
 80194ec:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80194ee:	4832      	ldr	r0, [pc, #200]	; (80195b8 <RadioSend+0x1e8>)
 80194f0:	f001 ff18 	bl	801b324 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80194f4:	78fb      	ldrb	r3, [r7, #3]
 80194f6:	2200      	movs	r2, #0
 80194f8:	4619      	mov	r1, r3
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f001 f9cc 	bl	801a898 <SUBGRF_SendPayload>
            break;
 8019500:	e04c      	b.n	801959c <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019502:	78fb      	ldrb	r3, [r7, #3]
 8019504:	461a      	mov	r2, r3
 8019506:	6879      	ldr	r1, [r7, #4]
 8019508:	482d      	ldr	r0, [pc, #180]	; (80195c0 <RadioSend+0x1f0>)
 801950a:	f000 fcbc 	bl	8019e86 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801950e:	4b29      	ldr	r3, [pc, #164]	; (80195b4 <RadioSend+0x1e4>)
 8019510:	2202      	movs	r2, #2
 8019512:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019514:	78fb      	ldrb	r3, [r7, #3]
 8019516:	3301      	adds	r3, #1
 8019518:	b2da      	uxtb	r2, r3
 801951a:	4b26      	ldr	r3, [pc, #152]	; (80195b4 <RadioSend+0x1e4>)
 801951c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801951e:	4826      	ldr	r0, [pc, #152]	; (80195b8 <RadioSend+0x1e8>)
 8019520:	f001 ff00 	bl	801b324 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019524:	2100      	movs	r1, #0
 8019526:	20f1      	movs	r0, #241	; 0xf1
 8019528:	f000 f95d 	bl	80197e6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801952c:	2100      	movs	r1, #0
 801952e:	20f0      	movs	r0, #240	; 0xf0
 8019530:	f000 f959 	bl	80197e6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019534:	4b1f      	ldr	r3, [pc, #124]	; (80195b4 <RadioSend+0x1e4>)
 8019536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019538:	2b64      	cmp	r3, #100	; 0x64
 801953a:	d108      	bne.n	801954e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801953c:	2170      	movs	r1, #112	; 0x70
 801953e:	20f3      	movs	r0, #243	; 0xf3
 8019540:	f000 f951 	bl	80197e6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019544:	211d      	movs	r1, #29
 8019546:	20f2      	movs	r0, #242	; 0xf2
 8019548:	f000 f94d 	bl	80197e6 <RadioWrite>
 801954c:	e007      	b.n	801955e <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801954e:	21e1      	movs	r1, #225	; 0xe1
 8019550:	20f3      	movs	r0, #243	; 0xf3
 8019552:	f000 f948 	bl	80197e6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019556:	2104      	movs	r1, #4
 8019558:	20f2      	movs	r0, #242	; 0xf2
 801955a:	f000 f944 	bl	80197e6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801955e:	78fb      	ldrb	r3, [r7, #3]
 8019560:	b29b      	uxth	r3, r3
 8019562:	00db      	lsls	r3, r3, #3
 8019564:	b29b      	uxth	r3, r3
 8019566:	3302      	adds	r3, #2
 8019568:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801956a:	89fb      	ldrh	r3, [r7, #14]
 801956c:	0a1b      	lsrs	r3, r3, #8
 801956e:	b29b      	uxth	r3, r3
 8019570:	b2db      	uxtb	r3, r3
 8019572:	4619      	mov	r1, r3
 8019574:	20f4      	movs	r0, #244	; 0xf4
 8019576:	f000 f936 	bl	80197e6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801957a:	89fb      	ldrh	r3, [r7, #14]
 801957c:	b2db      	uxtb	r3, r3
 801957e:	4619      	mov	r1, r3
 8019580:	20f5      	movs	r0, #245	; 0xf5
 8019582:	f000 f930 	bl	80197e6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8019586:	78fb      	ldrb	r3, [r7, #3]
 8019588:	3301      	adds	r3, #1
 801958a:	b2db      	uxtb	r3, r3
 801958c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019590:	4619      	mov	r1, r3
 8019592:	480b      	ldr	r0, [pc, #44]	; (80195c0 <RadioSend+0x1f0>)
 8019594:	f001 f980 	bl	801a898 <SUBGRF_SendPayload>
            break;
 8019598:	e000      	b.n	801959c <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801959a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801959c:	4b05      	ldr	r3, [pc, #20]	; (80195b4 <RadioSend+0x1e4>)
 801959e:	685b      	ldr	r3, [r3, #4]
 80195a0:	4619      	mov	r1, r3
 80195a2:	4808      	ldr	r0, [pc, #32]	; (80195c4 <RadioSend+0x1f4>)
 80195a4:	f003 fa86 	bl	801cab4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80195a8:	4806      	ldr	r0, [pc, #24]	; (80195c4 <RadioSend+0x1f4>)
 80195aa:	f003 f9a5 	bl	801c8f8 <UTIL_TIMER_Start>
}
 80195ae:	3710      	adds	r7, #16
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}
 80195b4:	20002148 	.word	0x20002148
 80195b8:	20002156 	.word	0x20002156
 80195bc:	0801d954 	.word	0x0801d954
 80195c0:	20002044 	.word	0x20002044
 80195c4:	200021a4 	.word	0x200021a4

080195c8 <RadioSleep>:

static void RadioSleep( void )
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b082      	sub	sp, #8
 80195cc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80195ce:	2300      	movs	r3, #0
 80195d0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80195d2:	793b      	ldrb	r3, [r7, #4]
 80195d4:	f043 0304 	orr.w	r3, r3, #4
 80195d8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80195da:	7938      	ldrb	r0, [r7, #4]
 80195dc:	f001 fa38 	bl	801aa50 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80195e0:	2002      	movs	r0, #2
 80195e2:	f7e8 ffb5 	bl	8002550 <HAL_Delay>
}
 80195e6:	bf00      	nop
 80195e8:	3708      	adds	r7, #8
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd80      	pop	{r7, pc}

080195ee <RadioStandby>:

static void RadioStandby( void )
{
 80195ee:	b580      	push	{r7, lr}
 80195f0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80195f2:	2000      	movs	r0, #0
 80195f4:	f001 fa5e 	bl	801aab4 <SUBGRF_SetStandby>
}
 80195f8:	bf00      	nop
 80195fa:	bd80      	pop	{r7, pc}

080195fc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b082      	sub	sp, #8
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8019604:	f002 fab3 	bl	801bb6e <RFW_Is_Init>
 8019608:	4603      	mov	r3, r0
 801960a:	2b01      	cmp	r3, #1
 801960c:	d102      	bne.n	8019614 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801960e:	f002 fad6 	bl	801bbbe <RFW_ReceiveInit>
 8019612:	e007      	b.n	8019624 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019614:	2300      	movs	r3, #0
 8019616:	2200      	movs	r2, #0
 8019618:	f240 2162 	movw	r1, #610	; 0x262
 801961c:	f240 2062 	movw	r0, #610	; 0x262
 8019620:	f001 fc18 	bl	801ae54 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d006      	beq.n	8019638 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801962a:	6879      	ldr	r1, [r7, #4]
 801962c:	4811      	ldr	r0, [pc, #68]	; (8019674 <RadioRx+0x78>)
 801962e:	f003 fa41 	bl	801cab4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019632:	4810      	ldr	r0, [pc, #64]	; (8019674 <RadioRx+0x78>)
 8019634:	f003 f960 	bl	801c8f8 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019638:	4b0f      	ldr	r3, [pc, #60]	; (8019678 <RadioRx+0x7c>)
 801963a:	2200      	movs	r2, #0
 801963c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801963e:	4b0e      	ldr	r3, [pc, #56]	; (8019678 <RadioRx+0x7c>)
 8019640:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019644:	2100      	movs	r1, #0
 8019646:	4618      	mov	r0, r3
 8019648:	f002 f8a8 	bl	801b79c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801964c:	4b0a      	ldr	r3, [pc, #40]	; (8019678 <RadioRx+0x7c>)
 801964e:	785b      	ldrb	r3, [r3, #1]
 8019650:	2b00      	cmp	r3, #0
 8019652:	d004      	beq.n	801965e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019654:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019658:	f001 fa68 	bl	801ab2c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801965c:	e005      	b.n	801966a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801965e:	4b06      	ldr	r3, [pc, #24]	; (8019678 <RadioRx+0x7c>)
 8019660:	689b      	ldr	r3, [r3, #8]
 8019662:	019b      	lsls	r3, r3, #6
 8019664:	4618      	mov	r0, r3
 8019666:	f001 fa61 	bl	801ab2c <SUBGRF_SetRx>
}
 801966a:	bf00      	nop
 801966c:	3708      	adds	r7, #8
 801966e:	46bd      	mov	sp, r7
 8019670:	bd80      	pop	{r7, pc}
 8019672:	bf00      	nop
 8019674:	200021bc 	.word	0x200021bc
 8019678:	20002148 	.word	0x20002148

0801967c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b082      	sub	sp, #8
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8019684:	f002 fa73 	bl	801bb6e <RFW_Is_Init>
 8019688:	4603      	mov	r3, r0
 801968a:	2b01      	cmp	r3, #1
 801968c:	d102      	bne.n	8019694 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801968e:	f002 fa96 	bl	801bbbe <RFW_ReceiveInit>
 8019692:	e007      	b.n	80196a4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019694:	2300      	movs	r3, #0
 8019696:	2200      	movs	r2, #0
 8019698:	f240 2162 	movw	r1, #610	; 0x262
 801969c:	f240 2062 	movw	r0, #610	; 0x262
 80196a0:	f001 fbd8 	bl	801ae54 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d006      	beq.n	80196b8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80196aa:	6879      	ldr	r1, [r7, #4]
 80196ac:	4811      	ldr	r0, [pc, #68]	; (80196f4 <RadioRxBoosted+0x78>)
 80196ae:	f003 fa01 	bl	801cab4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80196b2:	4810      	ldr	r0, [pc, #64]	; (80196f4 <RadioRxBoosted+0x78>)
 80196b4:	f003 f920 	bl	801c8f8 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80196b8:	4b0f      	ldr	r3, [pc, #60]	; (80196f8 <RadioRxBoosted+0x7c>)
 80196ba:	2200      	movs	r2, #0
 80196bc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80196be:	4b0e      	ldr	r3, [pc, #56]	; (80196f8 <RadioRxBoosted+0x7c>)
 80196c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80196c4:	2100      	movs	r1, #0
 80196c6:	4618      	mov	r0, r3
 80196c8:	f002 f868 	bl	801b79c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80196cc:	4b0a      	ldr	r3, [pc, #40]	; (80196f8 <RadioRxBoosted+0x7c>)
 80196ce:	785b      	ldrb	r3, [r3, #1]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d004      	beq.n	80196de <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80196d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80196d8:	f001 fa48 	bl	801ab6c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80196dc:	e005      	b.n	80196ea <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80196de:	4b06      	ldr	r3, [pc, #24]	; (80196f8 <RadioRxBoosted+0x7c>)
 80196e0:	689b      	ldr	r3, [r3, #8]
 80196e2:	019b      	lsls	r3, r3, #6
 80196e4:	4618      	mov	r0, r3
 80196e6:	f001 fa41 	bl	801ab6c <SUBGRF_SetRxBoosted>
}
 80196ea:	bf00      	nop
 80196ec:	3708      	adds	r7, #8
 80196ee:	46bd      	mov	sp, r7
 80196f0:	bd80      	pop	{r7, pc}
 80196f2:	bf00      	nop
 80196f4:	200021bc 	.word	0x200021bc
 80196f8:	20002148 	.word	0x20002148

080196fc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
 8019704:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	005a      	lsls	r2, r3, #1
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	4413      	add	r3, r2
 801970e:	4a0c      	ldr	r2, [pc, #48]	; (8019740 <RadioSetRxDutyCycle+0x44>)
 8019710:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019712:	2300      	movs	r3, #0
 8019714:	2200      	movs	r2, #0
 8019716:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801971a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801971e:	f001 fb99 	bl	801ae54 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019722:	4b07      	ldr	r3, [pc, #28]	; (8019740 <RadioSetRxDutyCycle+0x44>)
 8019724:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019728:	2100      	movs	r1, #0
 801972a:	4618      	mov	r0, r3
 801972c:	f002 f836 	bl	801b79c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019730:	6839      	ldr	r1, [r7, #0]
 8019732:	6878      	ldr	r0, [r7, #4]
 8019734:	f001 fa3e 	bl	801abb4 <SUBGRF_SetRxDutyCycle>
}
 8019738:	bf00      	nop
 801973a:	3708      	adds	r7, #8
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}
 8019740:	20002148 	.word	0x20002148

08019744 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019744:	b580      	push	{r7, lr}
 8019746:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019748:	4b09      	ldr	r3, [pc, #36]	; (8019770 <RadioStartCad+0x2c>)
 801974a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801974e:	2100      	movs	r1, #0
 8019750:	4618      	mov	r0, r3
 8019752:	f002 f823 	bl	801b79c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019756:	2300      	movs	r3, #0
 8019758:	2200      	movs	r2, #0
 801975a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801975e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019762:	f001 fb77 	bl	801ae54 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019766:	f001 fa51 	bl	801ac0c <SUBGRF_SetCad>
}
 801976a:	bf00      	nop
 801976c:	bd80      	pop	{r7, pc}
 801976e:	bf00      	nop
 8019770:	20002148 	.word	0x20002148

08019774 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b084      	sub	sp, #16
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
 801977c:	460b      	mov	r3, r1
 801977e:	70fb      	strb	r3, [r7, #3]
 8019780:	4613      	mov	r3, r2
 8019782:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019784:	883b      	ldrh	r3, [r7, #0]
 8019786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801978a:	fb02 f303 	mul.w	r3, r2, r3
 801978e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019790:	6878      	ldr	r0, [r7, #4]
 8019792:	f001 fbbb 	bl	801af0c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801979a:	4618      	mov	r0, r3
 801979c:	f002 f826 	bl	801b7ec <SUBGRF_SetRfTxPower>
 80197a0:	4603      	mov	r3, r0
 80197a2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80197a4:	7afb      	ldrb	r3, [r7, #11]
 80197a6:	2101      	movs	r1, #1
 80197a8:	4618      	mov	r0, r3
 80197aa:	f001 fff7 	bl	801b79c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80197ae:	f001 fa3b 	bl	801ac28 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80197b2:	68f9      	ldr	r1, [r7, #12]
 80197b4:	4804      	ldr	r0, [pc, #16]	; (80197c8 <RadioSetTxContinuousWave+0x54>)
 80197b6:	f003 f97d 	bl	801cab4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80197ba:	4803      	ldr	r0, [pc, #12]	; (80197c8 <RadioSetTxContinuousWave+0x54>)
 80197bc:	f003 f89c 	bl	801c8f8 <UTIL_TIMER_Start>
}
 80197c0:	bf00      	nop
 80197c2:	3710      	adds	r7, #16
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}
 80197c8:	200021a4 	.word	0x200021a4

080197cc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b082      	sub	sp, #8
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	4603      	mov	r3, r0
 80197d4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80197d6:	f001 fe5a 	bl	801b48e <SUBGRF_GetRssiInst>
 80197da:	4603      	mov	r3, r0
 80197dc:	b21b      	sxth	r3, r3
}
 80197de:	4618      	mov	r0, r3
 80197e0:	3708      	adds	r7, #8
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}

080197e6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80197e6:	b580      	push	{r7, lr}
 80197e8:	b082      	sub	sp, #8
 80197ea:	af00      	add	r7, sp, #0
 80197ec:	4603      	mov	r3, r0
 80197ee:	460a      	mov	r2, r1
 80197f0:	80fb      	strh	r3, [r7, #6]
 80197f2:	4613      	mov	r3, r2
 80197f4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80197f6:	797a      	ldrb	r2, [r7, #5]
 80197f8:	88fb      	ldrh	r3, [r7, #6]
 80197fa:	4611      	mov	r1, r2
 80197fc:	4618      	mov	r0, r3
 80197fe:	f001 fed9 	bl	801b5b4 <SUBGRF_WriteRegister>
}
 8019802:	bf00      	nop
 8019804:	3708      	adds	r7, #8
 8019806:	46bd      	mov	sp, r7
 8019808:	bd80      	pop	{r7, pc}

0801980a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801980a:	b580      	push	{r7, lr}
 801980c:	b082      	sub	sp, #8
 801980e:	af00      	add	r7, sp, #0
 8019810:	4603      	mov	r3, r0
 8019812:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019814:	88fb      	ldrh	r3, [r7, #6]
 8019816:	4618      	mov	r0, r3
 8019818:	f001 fee0 	bl	801b5dc <SUBGRF_ReadRegister>
 801981c:	4603      	mov	r3, r0
}
 801981e:	4618      	mov	r0, r3
 8019820:	3708      	adds	r7, #8
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}

08019826 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019826:	b580      	push	{r7, lr}
 8019828:	b082      	sub	sp, #8
 801982a:	af00      	add	r7, sp, #0
 801982c:	4603      	mov	r3, r0
 801982e:	6039      	str	r1, [r7, #0]
 8019830:	80fb      	strh	r3, [r7, #6]
 8019832:	4613      	mov	r3, r2
 8019834:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019836:	797b      	ldrb	r3, [r7, #5]
 8019838:	b29a      	uxth	r2, r3
 801983a:	88fb      	ldrh	r3, [r7, #6]
 801983c:	6839      	ldr	r1, [r7, #0]
 801983e:	4618      	mov	r0, r3
 8019840:	f001 fee0 	bl	801b604 <SUBGRF_WriteRegisters>
}
 8019844:	bf00      	nop
 8019846:	3708      	adds	r7, #8
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}

0801984c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b082      	sub	sp, #8
 8019850:	af00      	add	r7, sp, #0
 8019852:	4603      	mov	r3, r0
 8019854:	6039      	str	r1, [r7, #0]
 8019856:	80fb      	strh	r3, [r7, #6]
 8019858:	4613      	mov	r3, r2
 801985a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801985c:	797b      	ldrb	r3, [r7, #5]
 801985e:	b29a      	uxth	r2, r3
 8019860:	88fb      	ldrh	r3, [r7, #6]
 8019862:	6839      	ldr	r1, [r7, #0]
 8019864:	4618      	mov	r0, r3
 8019866:	f001 feef 	bl	801b648 <SUBGRF_ReadRegisters>
}
 801986a:	bf00      	nop
 801986c:	3708      	adds	r7, #8
 801986e:	46bd      	mov	sp, r7
 8019870:	bd80      	pop	{r7, pc}
	...

08019874 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b082      	sub	sp, #8
 8019878:	af00      	add	r7, sp, #0
 801987a:	4603      	mov	r3, r0
 801987c:	460a      	mov	r2, r1
 801987e:	71fb      	strb	r3, [r7, #7]
 8019880:	4613      	mov	r3, r2
 8019882:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019884:	79fb      	ldrb	r3, [r7, #7]
 8019886:	2b01      	cmp	r3, #1
 8019888:	d10a      	bne.n	80198a0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801988a:	4a0e      	ldr	r2, [pc, #56]	; (80198c4 <RadioSetMaxPayloadLength+0x50>)
 801988c:	79bb      	ldrb	r3, [r7, #6]
 801988e:	7013      	strb	r3, [r2, #0]
 8019890:	4b0c      	ldr	r3, [pc, #48]	; (80198c4 <RadioSetMaxPayloadLength+0x50>)
 8019892:	781a      	ldrb	r2, [r3, #0]
 8019894:	4b0c      	ldr	r3, [pc, #48]	; (80198c8 <RadioSetMaxPayloadLength+0x54>)
 8019896:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019898:	480c      	ldr	r0, [pc, #48]	; (80198cc <RadioSetMaxPayloadLength+0x58>)
 801989a:	f001 fd43 	bl	801b324 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801989e:	e00d      	b.n	80198bc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80198a0:	4b09      	ldr	r3, [pc, #36]	; (80198c8 <RadioSetMaxPayloadLength+0x54>)
 80198a2:	7d5b      	ldrb	r3, [r3, #21]
 80198a4:	2b01      	cmp	r3, #1
 80198a6:	d109      	bne.n	80198bc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80198a8:	4a06      	ldr	r2, [pc, #24]	; (80198c4 <RadioSetMaxPayloadLength+0x50>)
 80198aa:	79bb      	ldrb	r3, [r7, #6]
 80198ac:	7013      	strb	r3, [r2, #0]
 80198ae:	4b05      	ldr	r3, [pc, #20]	; (80198c4 <RadioSetMaxPayloadLength+0x50>)
 80198b0:	781a      	ldrb	r2, [r3, #0]
 80198b2:	4b05      	ldr	r3, [pc, #20]	; (80198c8 <RadioSetMaxPayloadLength+0x54>)
 80198b4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80198b6:	4805      	ldr	r0, [pc, #20]	; (80198cc <RadioSetMaxPayloadLength+0x58>)
 80198b8:	f001 fd34 	bl	801b324 <SUBGRF_SetPacketParams>
}
 80198bc:	bf00      	nop
 80198be:	3708      	adds	r7, #8
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	20000134 	.word	0x20000134
 80198c8:	20002148 	.word	0x20002148
 80198cc:	20002156 	.word	0x20002156

080198d0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b082      	sub	sp, #8
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	4603      	mov	r3, r0
 80198d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80198da:	4a13      	ldr	r2, [pc, #76]	; (8019928 <RadioSetPublicNetwork+0x58>)
 80198dc:	79fb      	ldrb	r3, [r7, #7]
 80198de:	7313      	strb	r3, [r2, #12]
 80198e0:	4b11      	ldr	r3, [pc, #68]	; (8019928 <RadioSetPublicNetwork+0x58>)
 80198e2:	7b1a      	ldrb	r2, [r3, #12]
 80198e4:	4b10      	ldr	r3, [pc, #64]	; (8019928 <RadioSetPublicNetwork+0x58>)
 80198e6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80198e8:	2001      	movs	r0, #1
 80198ea:	f7ff f82d 	bl	8018948 <RadioSetModem>
    if( enable == true )
 80198ee:	79fb      	ldrb	r3, [r7, #7]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d00a      	beq.n	801990a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80198f4:	2134      	movs	r1, #52	; 0x34
 80198f6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80198fa:	f001 fe5b 	bl	801b5b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80198fe:	2144      	movs	r1, #68	; 0x44
 8019900:	f240 7041 	movw	r0, #1857	; 0x741
 8019904:	f001 fe56 	bl	801b5b4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019908:	e009      	b.n	801991e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801990a:	2114      	movs	r1, #20
 801990c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019910:	f001 fe50 	bl	801b5b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019914:	2124      	movs	r1, #36	; 0x24
 8019916:	f240 7041 	movw	r0, #1857	; 0x741
 801991a:	f001 fe4b 	bl	801b5b4 <SUBGRF_WriteRegister>
}
 801991e:	bf00      	nop
 8019920:	3708      	adds	r7, #8
 8019922:	46bd      	mov	sp, r7
 8019924:	bd80      	pop	{r7, pc}
 8019926:	bf00      	nop
 8019928:	20002148 	.word	0x20002148

0801992c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801992c:	b580      	push	{r7, lr}
 801992e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019930:	f001 ff90 	bl	801b854 <SUBGRF_GetRadioWakeUpTime>
 8019934:	4603      	mov	r3, r0
 8019936:	3303      	adds	r3, #3
}
 8019938:	4618      	mov	r0, r3
 801993a:	bd80      	pop	{r7, pc}

0801993c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b082      	sub	sp, #8
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019944:	f000 f80e 	bl	8019964 <RadioOnTxTimeoutProcess>
}
 8019948:	bf00      	nop
 801994a:	3708      	adds	r7, #8
 801994c:	46bd      	mov	sp, r7
 801994e:	bd80      	pop	{r7, pc}

08019950 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b082      	sub	sp, #8
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019958:	f000 f818 	bl	801998c <RadioOnRxTimeoutProcess>
}
 801995c:	bf00      	nop
 801995e:	3708      	adds	r7, #8
 8019960:	46bd      	mov	sp, r7
 8019962:	bd80      	pop	{r7, pc}

08019964 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019964:	b580      	push	{r7, lr}
 8019966:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019968:	4b07      	ldr	r3, [pc, #28]	; (8019988 <RadioOnTxTimeoutProcess+0x24>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d008      	beq.n	8019982 <RadioOnTxTimeoutProcess+0x1e>
 8019970:	4b05      	ldr	r3, [pc, #20]	; (8019988 <RadioOnTxTimeoutProcess+0x24>)
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	685b      	ldr	r3, [r3, #4]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d003      	beq.n	8019982 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801997a:	4b03      	ldr	r3, [pc, #12]	; (8019988 <RadioOnTxTimeoutProcess+0x24>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	685b      	ldr	r3, [r3, #4]
 8019980:	4798      	blx	r3
    }
}
 8019982:	bf00      	nop
 8019984:	bd80      	pop	{r7, pc}
 8019986:	bf00      	nop
 8019988:	20002144 	.word	0x20002144

0801998c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801998c:	b580      	push	{r7, lr}
 801998e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019990:	4b07      	ldr	r3, [pc, #28]	; (80199b0 <RadioOnRxTimeoutProcess+0x24>)
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d008      	beq.n	80199aa <RadioOnRxTimeoutProcess+0x1e>
 8019998:	4b05      	ldr	r3, [pc, #20]	; (80199b0 <RadioOnRxTimeoutProcess+0x24>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	68db      	ldr	r3, [r3, #12]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d003      	beq.n	80199aa <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80199a2:	4b03      	ldr	r3, [pc, #12]	; (80199b0 <RadioOnRxTimeoutProcess+0x24>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	68db      	ldr	r3, [r3, #12]
 80199a8:	4798      	blx	r3
    }
}
 80199aa:	bf00      	nop
 80199ac:	bd80      	pop	{r7, pc}
 80199ae:	bf00      	nop
 80199b0:	20002144 	.word	0x20002144

080199b4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b082      	sub	sp, #8
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	4603      	mov	r3, r0
 80199bc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80199be:	4a05      	ldr	r2, [pc, #20]	; (80199d4 <RadioOnDioIrq+0x20>)
 80199c0:	88fb      	ldrh	r3, [r7, #6]
 80199c2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80199c6:	f000 f807 	bl	80199d8 <RadioIrqProcess>
}
 80199ca:	bf00      	nop
 80199cc:	3708      	adds	r7, #8
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	20002148 	.word	0x20002148

080199d8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80199d8:	b590      	push	{r4, r7, lr}
 80199da:	b083      	sub	sp, #12
 80199dc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80199de:	2300      	movs	r3, #0
 80199e0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80199e2:	2300      	movs	r3, #0
 80199e4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80199e6:	4ba8      	ldr	r3, [pc, #672]	; (8019c88 <RadioIrqProcess+0x2b0>)
 80199e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80199ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80199f0:	f000 810c 	beq.w	8019c0c <RadioIrqProcess+0x234>
 80199f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80199f8:	f300 81e8 	bgt.w	8019dcc <RadioIrqProcess+0x3f4>
 80199fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019a00:	f000 80f0 	beq.w	8019be4 <RadioIrqProcess+0x20c>
 8019a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019a08:	f300 81e0 	bgt.w	8019dcc <RadioIrqProcess+0x3f4>
 8019a0c:	2b80      	cmp	r3, #128	; 0x80
 8019a0e:	f000 80d5 	beq.w	8019bbc <RadioIrqProcess+0x1e4>
 8019a12:	2b80      	cmp	r3, #128	; 0x80
 8019a14:	f300 81da 	bgt.w	8019dcc <RadioIrqProcess+0x3f4>
 8019a18:	2b20      	cmp	r3, #32
 8019a1a:	dc49      	bgt.n	8019ab0 <RadioIrqProcess+0xd8>
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	f340 81d5 	ble.w	8019dcc <RadioIrqProcess+0x3f4>
 8019a22:	3b01      	subs	r3, #1
 8019a24:	2b1f      	cmp	r3, #31
 8019a26:	f200 81d1 	bhi.w	8019dcc <RadioIrqProcess+0x3f4>
 8019a2a:	a201      	add	r2, pc, #4	; (adr r2, 8019a30 <RadioIrqProcess+0x58>)
 8019a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a30:	08019ab9 	.word	0x08019ab9
 8019a34:	08019af3 	.word	0x08019af3
 8019a38:	08019dcd 	.word	0x08019dcd
 8019a3c:	08019ca9 	.word	0x08019ca9
 8019a40:	08019dcd 	.word	0x08019dcd
 8019a44:	08019dcd 	.word	0x08019dcd
 8019a48:	08019dcd 	.word	0x08019dcd
 8019a4c:	08019d25 	.word	0x08019d25
 8019a50:	08019dcd 	.word	0x08019dcd
 8019a54:	08019dcd 	.word	0x08019dcd
 8019a58:	08019dcd 	.word	0x08019dcd
 8019a5c:	08019dcd 	.word	0x08019dcd
 8019a60:	08019dcd 	.word	0x08019dcd
 8019a64:	08019dcd 	.word	0x08019dcd
 8019a68:	08019dcd 	.word	0x08019dcd
 8019a6c:	08019d41 	.word	0x08019d41
 8019a70:	08019dcd 	.word	0x08019dcd
 8019a74:	08019dcd 	.word	0x08019dcd
 8019a78:	08019dcd 	.word	0x08019dcd
 8019a7c:	08019dcd 	.word	0x08019dcd
 8019a80:	08019dcd 	.word	0x08019dcd
 8019a84:	08019dcd 	.word	0x08019dcd
 8019a88:	08019dcd 	.word	0x08019dcd
 8019a8c:	08019dcd 	.word	0x08019dcd
 8019a90:	08019dcd 	.word	0x08019dcd
 8019a94:	08019dcd 	.word	0x08019dcd
 8019a98:	08019dcd 	.word	0x08019dcd
 8019a9c:	08019dcd 	.word	0x08019dcd
 8019aa0:	08019dcd 	.word	0x08019dcd
 8019aa4:	08019dcd 	.word	0x08019dcd
 8019aa8:	08019dcd 	.word	0x08019dcd
 8019aac:	08019d4f 	.word	0x08019d4f
 8019ab0:	2b40      	cmp	r3, #64	; 0x40
 8019ab2:	f000 816d 	beq.w	8019d90 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8019ab6:	e189      	b.n	8019dcc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019ab8:	4874      	ldr	r0, [pc, #464]	; (8019c8c <RadioIrqProcess+0x2b4>)
 8019aba:	f002 ff8b 	bl	801c9d4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019abe:	2000      	movs	r0, #0
 8019ac0:	f000 fff8 	bl	801aab4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8019ac4:	f002 f85a 	bl	801bb7c <RFW_Is_LongPacketModeEnabled>
 8019ac8:	4603      	mov	r3, r0
 8019aca:	2b01      	cmp	r3, #1
 8019acc:	d101      	bne.n	8019ad2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019ace:	f002 f87e 	bl	801bbce <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8019ad2:	4b6f      	ldr	r3, [pc, #444]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	f000 817a 	beq.w	8019dd0 <RadioIrqProcess+0x3f8>
 8019adc:	4b6c      	ldr	r3, [pc, #432]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	f000 8174 	beq.w	8019dd0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019ae8:	4b69      	ldr	r3, [pc, #420]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	4798      	blx	r3
        break;
 8019af0:	e16e      	b.n	8019dd0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8019af2:	4868      	ldr	r0, [pc, #416]	; (8019c94 <RadioIrqProcess+0x2bc>)
 8019af4:	f002 ff6e 	bl	801c9d4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019af8:	4b63      	ldr	r3, [pc, #396]	; (8019c88 <RadioIrqProcess+0x2b0>)
 8019afa:	785b      	ldrb	r3, [r3, #1]
 8019afc:	f083 0301 	eor.w	r3, r3, #1
 8019b00:	b2db      	uxtb	r3, r3
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d014      	beq.n	8019b30 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8019b06:	2000      	movs	r0, #0
 8019b08:	f000 ffd4 	bl	801aab4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019b0c:	2100      	movs	r1, #0
 8019b0e:	f640 1002 	movw	r0, #2306	; 0x902
 8019b12:	f001 fd4f 	bl	801b5b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8019b16:	f640 1044 	movw	r0, #2372	; 0x944
 8019b1a:	f001 fd5f 	bl	801b5dc <SUBGRF_ReadRegister>
 8019b1e:	4603      	mov	r3, r0
 8019b20:	f043 0302 	orr.w	r3, r3, #2
 8019b24:	b2db      	uxtb	r3, r3
 8019b26:	4619      	mov	r1, r3
 8019b28:	f640 1044 	movw	r0, #2372	; 0x944
 8019b2c:	f001 fd42 	bl	801b5b4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019b30:	1dfb      	adds	r3, r7, #7
 8019b32:	22ff      	movs	r2, #255	; 0xff
 8019b34:	4619      	mov	r1, r3
 8019b36:	4858      	ldr	r0, [pc, #352]	; (8019c98 <RadioIrqProcess+0x2c0>)
 8019b38:	f000 fe8c 	bl	801a854 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019b3c:	4857      	ldr	r0, [pc, #348]	; (8019c9c <RadioIrqProcess+0x2c4>)
 8019b3e:	f001 fce7 	bl	801b510 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019b42:	4b53      	ldr	r3, [pc, #332]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d036      	beq.n	8019bb8 <RadioIrqProcess+0x1e0>
 8019b4a:	4b51      	ldr	r3, [pc, #324]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	689b      	ldr	r3, [r3, #8]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d031      	beq.n	8019bb8 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8019b54:	4b4c      	ldr	r3, [pc, #304]	; (8019c88 <RadioIrqProcess+0x2b0>)
 8019b56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019b5a:	2b01      	cmp	r3, #1
 8019b5c:	d10e      	bne.n	8019b7c <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8019b5e:	4b4c      	ldr	r3, [pc, #304]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	689c      	ldr	r4, [r3, #8]
 8019b64:	79fb      	ldrb	r3, [r7, #7]
 8019b66:	b299      	uxth	r1, r3
 8019b68:	4b47      	ldr	r3, [pc, #284]	; (8019c88 <RadioIrqProcess+0x2b0>)
 8019b6a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8019b6e:	b21a      	sxth	r2, r3
 8019b70:	4b45      	ldr	r3, [pc, #276]	; (8019c88 <RadioIrqProcess+0x2b0>)
 8019b72:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8019b76:	4848      	ldr	r0, [pc, #288]	; (8019c98 <RadioIrqProcess+0x2c0>)
 8019b78:	47a0      	blx	r4
                break;
 8019b7a:	e01e      	b.n	8019bba <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019b7c:	4b42      	ldr	r3, [pc, #264]	; (8019c88 <RadioIrqProcess+0x2b0>)
 8019b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b80:	463a      	mov	r2, r7
 8019b82:	4611      	mov	r1, r2
 8019b84:	4618      	mov	r0, r3
 8019b86:	f001 ff47 	bl	801ba18 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8019b8a:	4b41      	ldr	r3, [pc, #260]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	689c      	ldr	r4, [r3, #8]
 8019b90:	79fb      	ldrb	r3, [r7, #7]
 8019b92:	b299      	uxth	r1, r3
 8019b94:	4b3c      	ldr	r3, [pc, #240]	; (8019c88 <RadioIrqProcess+0x2b0>)
 8019b96:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8019b9a:	b218      	sxth	r0, r3
 8019b9c:	683b      	ldr	r3, [r7, #0]
 8019b9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8019ba2:	4a3f      	ldr	r2, [pc, #252]	; (8019ca0 <RadioIrqProcess+0x2c8>)
 8019ba4:	fb82 c203 	smull	ip, r2, r2, r3
 8019ba8:	1192      	asrs	r2, r2, #6
 8019baa:	17db      	asrs	r3, r3, #31
 8019bac:	1ad3      	subs	r3, r2, r3
 8019bae:	b25b      	sxtb	r3, r3
 8019bb0:	4602      	mov	r2, r0
 8019bb2:	4839      	ldr	r0, [pc, #228]	; (8019c98 <RadioIrqProcess+0x2c0>)
 8019bb4:	47a0      	blx	r4
                break;
 8019bb6:	e000      	b.n	8019bba <RadioIrqProcess+0x1e2>
        }
 8019bb8:	bf00      	nop
        break;
 8019bba:	e118      	b.n	8019dee <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8019bbc:	2000      	movs	r0, #0
 8019bbe:	f000 ff79 	bl	801aab4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019bc2:	4b33      	ldr	r3, [pc, #204]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	f000 8104 	beq.w	8019dd4 <RadioIrqProcess+0x3fc>
 8019bcc:	4b30      	ldr	r3, [pc, #192]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	699b      	ldr	r3, [r3, #24]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	f000 80fe 	beq.w	8019dd4 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8019bd8:	4b2d      	ldr	r3, [pc, #180]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	699b      	ldr	r3, [r3, #24]
 8019bde:	2000      	movs	r0, #0
 8019be0:	4798      	blx	r3
        break;
 8019be2:	e0f7      	b.n	8019dd4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8019be4:	2000      	movs	r0, #0
 8019be6:	f000 ff65 	bl	801aab4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019bea:	4b29      	ldr	r3, [pc, #164]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	f000 80f2 	beq.w	8019dd8 <RadioIrqProcess+0x400>
 8019bf4:	4b26      	ldr	r3, [pc, #152]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	699b      	ldr	r3, [r3, #24]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	f000 80ec 	beq.w	8019dd8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8019c00:	4b23      	ldr	r3, [pc, #140]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	699b      	ldr	r3, [r3, #24]
 8019c06:	2001      	movs	r0, #1
 8019c08:	4798      	blx	r3
        break;
 8019c0a:	e0e5      	b.n	8019dd8 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019c0c:	4b25      	ldr	r3, [pc, #148]	; (8019ca4 <RadioIrqProcess+0x2cc>)
 8019c0e:	2201      	movs	r2, #1
 8019c10:	2100      	movs	r1, #0
 8019c12:	2002      	movs	r0, #2
 8019c14:	f003 f8e8 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019c18:	f000 fe02 	bl	801a820 <SUBGRF_GetOperatingMode>
 8019c1c:	4603      	mov	r3, r0
 8019c1e:	2b04      	cmp	r3, #4
 8019c20:	d115      	bne.n	8019c4e <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8019c22:	481a      	ldr	r0, [pc, #104]	; (8019c8c <RadioIrqProcess+0x2b4>)
 8019c24:	f002 fed6 	bl	801c9d4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019c28:	2000      	movs	r0, #0
 8019c2a:	f000 ff43 	bl	801aab4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019c2e:	4b18      	ldr	r3, [pc, #96]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	f000 80d2 	beq.w	8019ddc <RadioIrqProcess+0x404>
 8019c38:	4b15      	ldr	r3, [pc, #84]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	685b      	ldr	r3, [r3, #4]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	f000 80cc 	beq.w	8019ddc <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8019c44:	4b12      	ldr	r3, [pc, #72]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	685b      	ldr	r3, [r3, #4]
 8019c4a:	4798      	blx	r3
        break;
 8019c4c:	e0c6      	b.n	8019ddc <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019c4e:	f000 fde7 	bl	801a820 <SUBGRF_GetOperatingMode>
 8019c52:	4603      	mov	r3, r0
 8019c54:	2b05      	cmp	r3, #5
 8019c56:	f040 80c1 	bne.w	8019ddc <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8019c5a:	480e      	ldr	r0, [pc, #56]	; (8019c94 <RadioIrqProcess+0x2bc>)
 8019c5c:	f002 feba 	bl	801c9d4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019c60:	2000      	movs	r0, #0
 8019c62:	f000 ff27 	bl	801aab4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019c66:	4b0a      	ldr	r3, [pc, #40]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	f000 80b6 	beq.w	8019ddc <RadioIrqProcess+0x404>
 8019c70:	4b07      	ldr	r3, [pc, #28]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	68db      	ldr	r3, [r3, #12]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	f000 80b0 	beq.w	8019ddc <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8019c7c:	4b04      	ldr	r3, [pc, #16]	; (8019c90 <RadioIrqProcess+0x2b8>)
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	68db      	ldr	r3, [r3, #12]
 8019c82:	4798      	blx	r3
        break;
 8019c84:	e0aa      	b.n	8019ddc <RadioIrqProcess+0x404>
 8019c86:	bf00      	nop
 8019c88:	20002148 	.word	0x20002148
 8019c8c:	200021a4 	.word	0x200021a4
 8019c90:	20002144 	.word	0x20002144
 8019c94:	200021bc 	.word	0x200021bc
 8019c98:	20002044 	.word	0x20002044
 8019c9c:	2000216c 	.word	0x2000216c
 8019ca0:	10624dd3 	.word	0x10624dd3
 8019ca4:	0801d96c 	.word	0x0801d96c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019ca8:	4b53      	ldr	r3, [pc, #332]	; (8019df8 <RadioIrqProcess+0x420>)
 8019caa:	2201      	movs	r2, #1
 8019cac:	2100      	movs	r1, #0
 8019cae:	2002      	movs	r0, #2
 8019cb0:	f003 f89a 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019cb4:	4b51      	ldr	r3, [pc, #324]	; (8019dfc <RadioIrqProcess+0x424>)
 8019cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	f000 8091 	beq.w	8019de0 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8019cbe:	4a50      	ldr	r2, [pc, #320]	; (8019e00 <RadioIrqProcess+0x428>)
 8019cc0:	4b4e      	ldr	r3, [pc, #312]	; (8019dfc <RadioIrqProcess+0x424>)
 8019cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cc4:	0c1b      	lsrs	r3, r3, #16
 8019cc6:	b2db      	uxtb	r3, r3
 8019cc8:	4619      	mov	r1, r3
 8019cca:	f640 1003 	movw	r0, #2307	; 0x903
 8019cce:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8019cd0:	4a4b      	ldr	r2, [pc, #300]	; (8019e00 <RadioIrqProcess+0x428>)
 8019cd2:	4b4a      	ldr	r3, [pc, #296]	; (8019dfc <RadioIrqProcess+0x424>)
 8019cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cd6:	0a1b      	lsrs	r3, r3, #8
 8019cd8:	b2db      	uxtb	r3, r3
 8019cda:	4619      	mov	r1, r3
 8019cdc:	f640 1004 	movw	r0, #2308	; 0x904
 8019ce0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8019ce2:	4a47      	ldr	r2, [pc, #284]	; (8019e00 <RadioIrqProcess+0x428>)
 8019ce4:	4b45      	ldr	r3, [pc, #276]	; (8019dfc <RadioIrqProcess+0x424>)
 8019ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019ce8:	b2db      	uxtb	r3, r3
 8019cea:	4619      	mov	r1, r3
 8019cec:	f640 1005 	movw	r0, #2309	; 0x905
 8019cf0:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8019cf2:	4c43      	ldr	r4, [pc, #268]	; (8019e00 <RadioIrqProcess+0x428>)
 8019cf4:	4b43      	ldr	r3, [pc, #268]	; (8019e04 <RadioIrqProcess+0x42c>)
 8019cf6:	f640 1002 	movw	r0, #2306	; 0x902
 8019cfa:	4798      	blx	r3
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	f043 0301 	orr.w	r3, r3, #1
 8019d02:	b2db      	uxtb	r3, r3
 8019d04:	4619      	mov	r1, r3
 8019d06:	f640 1002 	movw	r0, #2306	; 0x902
 8019d0a:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8019d0c:	4b3b      	ldr	r3, [pc, #236]	; (8019dfc <RadioIrqProcess+0x424>)
 8019d0e:	2200      	movs	r2, #0
 8019d10:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019d12:	2300      	movs	r3, #0
 8019d14:	2200      	movs	r2, #0
 8019d16:	f240 2162 	movw	r1, #610	; 0x262
 8019d1a:	f240 2062 	movw	r0, #610	; 0x262
 8019d1e:	f001 f899 	bl	801ae54 <SUBGRF_SetDioIrqParams>
        break;
 8019d22:	e05d      	b.n	8019de0 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019d24:	4b38      	ldr	r3, [pc, #224]	; (8019e08 <RadioIrqProcess+0x430>)
 8019d26:	2201      	movs	r2, #1
 8019d28:	2100      	movs	r1, #0
 8019d2a:	2002      	movs	r0, #2
 8019d2c:	f003 f85c 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019d30:	f001 ff1d 	bl	801bb6e <RFW_Is_Init>
 8019d34:	4603      	mov	r3, r0
 8019d36:	2b01      	cmp	r3, #1
 8019d38:	d154      	bne.n	8019de4 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8019d3a:	f001 ff4e 	bl	801bbda <RFW_ReceivePayload>
        break;
 8019d3e:	e051      	b.n	8019de4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019d40:	4b32      	ldr	r3, [pc, #200]	; (8019e0c <RadioIrqProcess+0x434>)
 8019d42:	2201      	movs	r2, #1
 8019d44:	2100      	movs	r1, #0
 8019d46:	2002      	movs	r0, #2
 8019d48:	f003 f84e 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019d4c:	e04f      	b.n	8019dee <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8019d4e:	4830      	ldr	r0, [pc, #192]	; (8019e10 <RadioIrqProcess+0x438>)
 8019d50:	f002 fe40 	bl	801c9d4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019d54:	4b29      	ldr	r3, [pc, #164]	; (8019dfc <RadioIrqProcess+0x424>)
 8019d56:	785b      	ldrb	r3, [r3, #1]
 8019d58:	f083 0301 	eor.w	r3, r3, #1
 8019d5c:	b2db      	uxtb	r3, r3
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d002      	beq.n	8019d68 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019d62:	2000      	movs	r0, #0
 8019d64:	f000 fea6 	bl	801aab4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019d68:	4b2a      	ldr	r3, [pc, #168]	; (8019e14 <RadioIrqProcess+0x43c>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d03b      	beq.n	8019de8 <RadioIrqProcess+0x410>
 8019d70:	4b28      	ldr	r3, [pc, #160]	; (8019e14 <RadioIrqProcess+0x43c>)
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	68db      	ldr	r3, [r3, #12]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d036      	beq.n	8019de8 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8019d7a:	4b26      	ldr	r3, [pc, #152]	; (8019e14 <RadioIrqProcess+0x43c>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	68db      	ldr	r3, [r3, #12]
 8019d80:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019d82:	4b25      	ldr	r3, [pc, #148]	; (8019e18 <RadioIrqProcess+0x440>)
 8019d84:	2201      	movs	r2, #1
 8019d86:	2100      	movs	r1, #0
 8019d88:	2002      	movs	r0, #2
 8019d8a:	f003 f82d 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019d8e:	e02b      	b.n	8019de8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019d90:	4b22      	ldr	r3, [pc, #136]	; (8019e1c <RadioIrqProcess+0x444>)
 8019d92:	2201      	movs	r2, #1
 8019d94:	2100      	movs	r1, #0
 8019d96:	2002      	movs	r0, #2
 8019d98:	f003 f826 	bl	801cde8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019d9c:	4b17      	ldr	r3, [pc, #92]	; (8019dfc <RadioIrqProcess+0x424>)
 8019d9e:	785b      	ldrb	r3, [r3, #1]
 8019da0:	f083 0301 	eor.w	r3, r3, #1
 8019da4:	b2db      	uxtb	r3, r3
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d002      	beq.n	8019db0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019daa:	2000      	movs	r0, #0
 8019dac:	f000 fe82 	bl	801aab4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019db0:	4b18      	ldr	r3, [pc, #96]	; (8019e14 <RadioIrqProcess+0x43c>)
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d019      	beq.n	8019dec <RadioIrqProcess+0x414>
 8019db8:	4b16      	ldr	r3, [pc, #88]	; (8019e14 <RadioIrqProcess+0x43c>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	691b      	ldr	r3, [r3, #16]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d014      	beq.n	8019dec <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8019dc2:	4b14      	ldr	r3, [pc, #80]	; (8019e14 <RadioIrqProcess+0x43c>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	691b      	ldr	r3, [r3, #16]
 8019dc8:	4798      	blx	r3
        break;
 8019dca:	e00f      	b.n	8019dec <RadioIrqProcess+0x414>
        break;
 8019dcc:	bf00      	nop
 8019dce:	e00e      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019dd0:	bf00      	nop
 8019dd2:	e00c      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019dd4:	bf00      	nop
 8019dd6:	e00a      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019dd8:	bf00      	nop
 8019dda:	e008      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019ddc:	bf00      	nop
 8019dde:	e006      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019de0:	bf00      	nop
 8019de2:	e004      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019de4:	bf00      	nop
 8019de6:	e002      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019de8:	bf00      	nop
 8019dea:	e000      	b.n	8019dee <RadioIrqProcess+0x416>
        break;
 8019dec:	bf00      	nop
    }
}
 8019dee:	bf00      	nop
 8019df0:	370c      	adds	r7, #12
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd90      	pop	{r4, r7, pc}
 8019df6:	bf00      	nop
 8019df8:	0801d980 	.word	0x0801d980
 8019dfc:	20002148 	.word	0x20002148
 8019e00:	080197e7 	.word	0x080197e7
 8019e04:	0801980b 	.word	0x0801980b
 8019e08:	0801d98c 	.word	0x0801d98c
 8019e0c:	0801d998 	.word	0x0801d998
 8019e10:	200021bc 	.word	0x200021bc
 8019e14:	20002144 	.word	0x20002144
 8019e18:	0801d9a4 	.word	0x0801d9a4
 8019e1c:	0801d9b0 	.word	0x0801d9b0

08019e20 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019e24:	4b09      	ldr	r3, [pc, #36]	; (8019e4c <RadioTxPrbs+0x2c>)
 8019e26:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e2a:	2101      	movs	r1, #1
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f001 fcb5 	bl	801b79c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019e32:	4b07      	ldr	r3, [pc, #28]	; (8019e50 <RadioTxPrbs+0x30>)
 8019e34:	212d      	movs	r1, #45	; 0x2d
 8019e36:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019e3a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019e3c:	f000 fefd 	bl	801ac3a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019e40:	4804      	ldr	r0, [pc, #16]	; (8019e54 <RadioTxPrbs+0x34>)
 8019e42:	f000 fe53 	bl	801aaec <SUBGRF_SetTx>
}
 8019e46:	bf00      	nop
 8019e48:	bd80      	pop	{r7, pc}
 8019e4a:	bf00      	nop
 8019e4c:	20002148 	.word	0x20002148
 8019e50:	080197e7 	.word	0x080197e7
 8019e54:	000fffff 	.word	0x000fffff

08019e58 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b084      	sub	sp, #16
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	4603      	mov	r3, r0
 8019e60:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e66:	4618      	mov	r0, r3
 8019e68:	f001 fcc0 	bl	801b7ec <SUBGRF_SetRfTxPower>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019e70:	7bfb      	ldrb	r3, [r7, #15]
 8019e72:	2101      	movs	r1, #1
 8019e74:	4618      	mov	r0, r3
 8019e76:	f001 fc91 	bl	801b79c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019e7a:	f000 fed5 	bl	801ac28 <SUBGRF_SetTxContinuousWave>
}
 8019e7e:	bf00      	nop
 8019e80:	3710      	adds	r7, #16
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bd80      	pop	{r7, pc}

08019e86 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019e86:	b480      	push	{r7}
 8019e88:	b089      	sub	sp, #36	; 0x24
 8019e8a:	af00      	add	r7, sp, #0
 8019e8c:	60f8      	str	r0, [r7, #12]
 8019e8e:	60b9      	str	r1, [r7, #8]
 8019e90:	4613      	mov	r3, r2
 8019e92:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019e94:	2300      	movs	r3, #0
 8019e96:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019e98:	2300      	movs	r3, #0
 8019e9a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	61bb      	str	r3, [r7, #24]
 8019ea0:	e011      	b.n	8019ec6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019ea2:	69bb      	ldr	r3, [r7, #24]
 8019ea4:	68ba      	ldr	r2, [r7, #8]
 8019ea6:	4413      	add	r3, r2
 8019ea8:	781a      	ldrb	r2, [r3, #0]
 8019eaa:	69bb      	ldr	r3, [r7, #24]
 8019eac:	68b9      	ldr	r1, [r7, #8]
 8019eae:	440b      	add	r3, r1
 8019eb0:	43d2      	mvns	r2, r2
 8019eb2:	b2d2      	uxtb	r2, r2
 8019eb4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019eb6:	69bb      	ldr	r3, [r7, #24]
 8019eb8:	68fa      	ldr	r2, [r7, #12]
 8019eba:	4413      	add	r3, r2
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019ec0:	69bb      	ldr	r3, [r7, #24]
 8019ec2:	3301      	adds	r3, #1
 8019ec4:	61bb      	str	r3, [r7, #24]
 8019ec6:	79fb      	ldrb	r3, [r7, #7]
 8019ec8:	69ba      	ldr	r2, [r7, #24]
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	dbe9      	blt.n	8019ea2 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019ece:	2300      	movs	r3, #0
 8019ed0:	61bb      	str	r3, [r7, #24]
 8019ed2:	e049      	b.n	8019f68 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019ed4:	69bb      	ldr	r3, [r7, #24]
 8019ed6:	425a      	negs	r2, r3
 8019ed8:	f003 0307 	and.w	r3, r3, #7
 8019edc:	f002 0207 	and.w	r2, r2, #7
 8019ee0:	bf58      	it	pl
 8019ee2:	4253      	negpl	r3, r2
 8019ee4:	b2db      	uxtb	r3, r3
 8019ee6:	f1c3 0307 	rsb	r3, r3, #7
 8019eea:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019eec:	69bb      	ldr	r3, [r7, #24]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	da00      	bge.n	8019ef4 <payload_integration+0x6e>
 8019ef2:	3307      	adds	r3, #7
 8019ef4:	10db      	asrs	r3, r3, #3
 8019ef6:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019ef8:	69bb      	ldr	r3, [r7, #24]
 8019efa:	3301      	adds	r3, #1
 8019efc:	425a      	negs	r2, r3
 8019efe:	f003 0307 	and.w	r3, r3, #7
 8019f02:	f002 0207 	and.w	r2, r2, #7
 8019f06:	bf58      	it	pl
 8019f08:	4253      	negpl	r3, r2
 8019f0a:	b2db      	uxtb	r3, r3
 8019f0c:	f1c3 0307 	rsb	r3, r3, #7
 8019f10:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019f12:	69bb      	ldr	r3, [r7, #24]
 8019f14:	3301      	adds	r3, #1
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	da00      	bge.n	8019f1c <payload_integration+0x96>
 8019f1a:	3307      	adds	r3, #7
 8019f1c:	10db      	asrs	r3, r3, #3
 8019f1e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019f20:	7dbb      	ldrb	r3, [r7, #22]
 8019f22:	68ba      	ldr	r2, [r7, #8]
 8019f24:	4413      	add	r3, r2
 8019f26:	781b      	ldrb	r3, [r3, #0]
 8019f28:	461a      	mov	r2, r3
 8019f2a:	7dfb      	ldrb	r3, [r7, #23]
 8019f2c:	fa42 f303 	asr.w	r3, r2, r3
 8019f30:	b2db      	uxtb	r3, r3
 8019f32:	f003 0301 	and.w	r3, r3, #1
 8019f36:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019f38:	7ffa      	ldrb	r2, [r7, #31]
 8019f3a:	7cfb      	ldrb	r3, [r7, #19]
 8019f3c:	4053      	eors	r3, r2
 8019f3e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019f40:	7d3b      	ldrb	r3, [r7, #20]
 8019f42:	68fa      	ldr	r2, [r7, #12]
 8019f44:	4413      	add	r3, r2
 8019f46:	781b      	ldrb	r3, [r3, #0]
 8019f48:	b25a      	sxtb	r2, r3
 8019f4a:	7ff9      	ldrb	r1, [r7, #31]
 8019f4c:	7d7b      	ldrb	r3, [r7, #21]
 8019f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8019f52:	b25b      	sxtb	r3, r3
 8019f54:	4313      	orrs	r3, r2
 8019f56:	b259      	sxtb	r1, r3
 8019f58:	7d3b      	ldrb	r3, [r7, #20]
 8019f5a:	68fa      	ldr	r2, [r7, #12]
 8019f5c:	4413      	add	r3, r2
 8019f5e:	b2ca      	uxtb	r2, r1
 8019f60:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019f62:	69bb      	ldr	r3, [r7, #24]
 8019f64:	3301      	adds	r3, #1
 8019f66:	61bb      	str	r3, [r7, #24]
 8019f68:	79fb      	ldrb	r3, [r7, #7]
 8019f6a:	00db      	lsls	r3, r3, #3
 8019f6c:	69ba      	ldr	r2, [r7, #24]
 8019f6e:	429a      	cmp	r2, r3
 8019f70:	dbb0      	blt.n	8019ed4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019f72:	7ffb      	ldrb	r3, [r7, #31]
 8019f74:	01db      	lsls	r3, r3, #7
 8019f76:	b25a      	sxtb	r2, r3
 8019f78:	7ffb      	ldrb	r3, [r7, #31]
 8019f7a:	019b      	lsls	r3, r3, #6
 8019f7c:	b25b      	sxtb	r3, r3
 8019f7e:	4313      	orrs	r3, r2
 8019f80:	b25b      	sxtb	r3, r3
 8019f82:	7ffa      	ldrb	r2, [r7, #31]
 8019f84:	2a00      	cmp	r2, #0
 8019f86:	d101      	bne.n	8019f8c <payload_integration+0x106>
 8019f88:	2220      	movs	r2, #32
 8019f8a:	e000      	b.n	8019f8e <payload_integration+0x108>
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	4313      	orrs	r3, r2
 8019f90:	b259      	sxtb	r1, r3
 8019f92:	79fb      	ldrb	r3, [r7, #7]
 8019f94:	68fa      	ldr	r2, [r7, #12]
 8019f96:	4413      	add	r3, r2
 8019f98:	b2ca      	uxtb	r2, r1
 8019f9a:	701a      	strb	r2, [r3, #0]
}
 8019f9c:	bf00      	nop
 8019f9e:	3724      	adds	r7, #36	; 0x24
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bc80      	pop	{r7}
 8019fa4:	4770      	bx	lr
	...

08019fa8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b08c      	sub	sp, #48	; 0x30
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	60b9      	str	r1, [r7, #8]
 8019fb0:	607a      	str	r2, [r7, #4]
 8019fb2:	603b      	str	r3, [r7, #0]
 8019fb4:	4603      	mov	r3, r0
 8019fb6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019fb8:	2300      	movs	r3, #0
 8019fba:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	623b      	str	r3, [r7, #32]
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019fc4:	f001 fdcd 	bl	801bb62 <RFW_DeInit>

    if( rxContinuous != 0 )
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d001      	beq.n	8019fd2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019fce:	2300      	movs	r3, #0
 8019fd0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	bf14      	ite	ne
 8019fd8:	2301      	movne	r3, #1
 8019fda:	2300      	moveq	r3, #0
 8019fdc:	b2da      	uxtb	r2, r3
 8019fde:	4ba3      	ldr	r3, [pc, #652]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 8019fe0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019fe2:	7bfb      	ldrb	r3, [r7, #15]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d003      	beq.n	8019ff0 <RadioSetRxGenericConfig+0x48>
 8019fe8:	2b01      	cmp	r3, #1
 8019fea:	f000 80dc 	beq.w	801a1a6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019fee:	e194      	b.n	801a31a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019ff0:	68bb      	ldr	r3, [r7, #8]
 8019ff2:	689b      	ldr	r3, [r3, #8]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d003      	beq.n	801a000 <RadioSetRxGenericConfig+0x58>
 8019ff8:	68bb      	ldr	r3, [r7, #8]
 8019ffa:	68db      	ldr	r3, [r3, #12]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d102      	bne.n	801a006 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a000:	f04f 33ff 	mov.w	r3, #4294967295
 801a004:	e18a      	b.n	801a31c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	7f9b      	ldrb	r3, [r3, #30]
 801a00a:	2b08      	cmp	r3, #8
 801a00c:	d902      	bls.n	801a014 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a00e:	f04f 33ff 	mov.w	r3, #4294967295
 801a012:	e183      	b.n	801a31c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	6919      	ldr	r1, [r3, #16]
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	7f9b      	ldrb	r3, [r3, #30]
 801a01c:	b29a      	uxth	r2, r3
 801a01e:	f107 0320 	add.w	r3, r7, #32
 801a022:	4618      	mov	r0, r3
 801a024:	f001 fe90 	bl	801bd48 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	bf14      	ite	ne
 801a030:	2301      	movne	r3, #1
 801a032:	2300      	moveq	r3, #0
 801a034:	b2db      	uxtb	r3, r3
 801a036:	4618      	mov	r0, r3
 801a038:	f000 fe08 	bl	801ac4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a03c:	4b8b      	ldr	r3, [pc, #556]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a03e:	2200      	movs	r2, #0
 801a040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	689b      	ldr	r3, [r3, #8]
 801a048:	4a88      	ldr	r2, [pc, #544]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a04a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801a04c:	68bb      	ldr	r3, [r7, #8]
 801a04e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a052:	4b86      	ldr	r3, [pc, #536]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	685b      	ldr	r3, [r3, #4]
 801a05c:	4618      	mov	r0, r3
 801a05e:	f001 fcb3 	bl	801b9c8 <SUBGRF_GetFskBandwidthRegValue>
 801a062:	4603      	mov	r3, r0
 801a064:	461a      	mov	r2, r3
 801a066:	4b81      	ldr	r3, [pc, #516]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a06c:	4b7f      	ldr	r3, [pc, #508]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a06e:	2200      	movs	r2, #0
 801a070:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a072:	68bb      	ldr	r3, [r7, #8]
 801a074:	68db      	ldr	r3, [r3, #12]
 801a076:	b29b      	uxth	r3, r3
 801a078:	00db      	lsls	r3, r3, #3
 801a07a:	b29a      	uxth	r2, r3
 801a07c:	4b7b      	ldr	r3, [pc, #492]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a07e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a080:	68bb      	ldr	r3, [r7, #8]
 801a082:	7fda      	ldrb	r2, [r3, #31]
 801a084:	4b79      	ldr	r3, [pc, #484]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a086:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	7f9b      	ldrb	r3, [r3, #30]
 801a08c:	00db      	lsls	r3, r3, #3
 801a08e:	b2da      	uxtb	r2, r3
 801a090:	4b76      	ldr	r3, [pc, #472]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a092:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a09a:	4b74      	ldr	r3, [pc, #464]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a09c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a09e:	68bb      	ldr	r3, [r7, #8]
 801a0a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d105      	bne.n	801a0b4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	695b      	ldr	r3, [r3, #20]
 801a0ac:	b2da      	uxtb	r2, r3
 801a0ae:	4b6f      	ldr	r3, [pc, #444]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a0b0:	759a      	strb	r2, [r3, #22]
 801a0b2:	e00b      	b.n	801a0cc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a0b4:	68bb      	ldr	r3, [r7, #8]
 801a0b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a0ba:	2b02      	cmp	r3, #2
 801a0bc:	d103      	bne.n	801a0c6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a0be:	4b6b      	ldr	r3, [pc, #428]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a0c0:	22ff      	movs	r2, #255	; 0xff
 801a0c2:	759a      	strb	r2, [r3, #22]
 801a0c4:	e002      	b.n	801a0cc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a0c6:	4b69      	ldr	r3, [pc, #420]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a0c8:	22ff      	movs	r2, #255	; 0xff
 801a0ca:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a0d2:	2b02      	cmp	r3, #2
 801a0d4:	d004      	beq.n	801a0e0 <RadioSetRxGenericConfig+0x138>
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a0dc:	2b02      	cmp	r3, #2
 801a0de:	d12d      	bne.n	801a13c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a0e6:	2bf1      	cmp	r3, #241	; 0xf1
 801a0e8:	d00c      	beq.n	801a104 <RadioSetRxGenericConfig+0x15c>
 801a0ea:	68bb      	ldr	r3, [r7, #8]
 801a0ec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a0f0:	2bf2      	cmp	r3, #242	; 0xf2
 801a0f2:	d007      	beq.n	801a104 <RadioSetRxGenericConfig+0x15c>
 801a0f4:	68bb      	ldr	r3, [r7, #8]
 801a0f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a0fa:	2b01      	cmp	r3, #1
 801a0fc:	d002      	beq.n	801a104 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801a0fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a102:	e10b      	b.n	801a31c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801a104:	2300      	movs	r3, #0
 801a106:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801a108:	68bb      	ldr	r3, [r7, #8]
 801a10a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a10c:	4b58      	ldr	r3, [pc, #352]	; (801a270 <RadioSetRxGenericConfig+0x2c8>)
 801a10e:	6819      	ldr	r1, [r3, #0]
 801a110:	f107 0314 	add.w	r3, r7, #20
 801a114:	4a57      	ldr	r2, [pc, #348]	; (801a274 <RadioSetRxGenericConfig+0x2cc>)
 801a116:	4618      	mov	r0, r3
 801a118:	f001 fd16 	bl	801bb48 <RFW_Init>
 801a11c:	4603      	mov	r3, r0
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d002      	beq.n	801a128 <RadioSetRxGenericConfig+0x180>
            return -1;
 801a122:	f04f 33ff 	mov.w	r3, #4294967295
 801a126:	e0f9      	b.n	801a31c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a128:	4b50      	ldr	r3, [pc, #320]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a12a:	2200      	movs	r2, #0
 801a12c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a12e:	4b4f      	ldr	r3, [pc, #316]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a130:	2201      	movs	r2, #1
 801a132:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a134:	4b4d      	ldr	r3, [pc, #308]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a136:	2200      	movs	r2, #0
 801a138:	755a      	strb	r2, [r3, #21]
        {
 801a13a:	e00e      	b.n	801a15a <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a142:	4b4a      	ldr	r3, [pc, #296]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a144:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a14c:	4b47      	ldr	r3, [pc, #284]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a14e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a156:	4b45      	ldr	r3, [pc, #276]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a158:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a15a:	f7ff fa48 	bl	80195ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a15e:	2000      	movs	r0, #0
 801a160:	f7fe fbf2 	bl	8018948 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a164:	4844      	ldr	r0, [pc, #272]	; (801a278 <RadioSetRxGenericConfig+0x2d0>)
 801a166:	f001 f80b 	bl	801b180 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a16a:	4844      	ldr	r0, [pc, #272]	; (801a27c <RadioSetRxGenericConfig+0x2d4>)
 801a16c:	f001 f8da 	bl	801b324 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a170:	f107 0320 	add.w	r3, r7, #32
 801a174:	4618      	mov	r0, r3
 801a176:	f000 fba2 	bl	801a8be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a17a:	68bb      	ldr	r3, [r7, #8]
 801a17c:	8b9b      	ldrh	r3, [r3, #28]
 801a17e:	4618      	mov	r0, r3
 801a180:	f000 fbec 	bl	801a95c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	8b1b      	ldrh	r3, [r3, #24]
 801a188:	4618      	mov	r0, r3
 801a18a:	f000 fbc7 	bl	801a91c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a194:	fb03 f202 	mul.w	r2, r3, r2
 801a198:	68bb      	ldr	r3, [r7, #8]
 801a19a:	689b      	ldr	r3, [r3, #8]
 801a19c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a1a0:	4a32      	ldr	r2, [pc, #200]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a1a2:	6093      	str	r3, [r2, #8]
        break;
 801a1a4:	e0b9      	b.n	801a31a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d102      	bne.n	801a1b4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a1ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a1b2:	e0b3      	b.n	801a31c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801a1ba:	2b01      	cmp	r3, #1
 801a1bc:	d104      	bne.n	801a1c8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a1be:	68bb      	ldr	r3, [r7, #8]
 801a1c0:	695b      	ldr	r3, [r3, #20]
 801a1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a1c6:	e002      	b.n	801a1ce <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a1c8:	23ff      	movs	r3, #255	; 0xff
 801a1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a1ce:	68bb      	ldr	r3, [r7, #8]
 801a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	bf14      	ite	ne
 801a1d6:	2301      	movne	r3, #1
 801a1d8:	2300      	moveq	r3, #0
 801a1da:	b2db      	uxtb	r3, r3
 801a1dc:	4618      	mov	r0, r3
 801a1de:	f000 fd35 	bl	801ac4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a1e2:	683b      	ldr	r3, [r7, #0]
 801a1e4:	b2db      	uxtb	r3, r3
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	f000 fd3f 	bl	801ac6a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a1ec:	4b1f      	ldr	r3, [pc, #124]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a1ee:	2201      	movs	r2, #1
 801a1f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a1fa:	4b1c      	ldr	r3, [pc, #112]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a1fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a206:	4b19      	ldr	r3, [pc, #100]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a20c:	68bb      	ldr	r3, [r7, #8]
 801a20e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a212:	4b16      	ldr	r3, [pc, #88]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a214:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a21e:	2b02      	cmp	r3, #2
 801a220:	d010      	beq.n	801a244 <RadioSetRxGenericConfig+0x29c>
 801a222:	2b02      	cmp	r3, #2
 801a224:	dc2c      	bgt.n	801a280 <RadioSetRxGenericConfig+0x2d8>
 801a226:	2b00      	cmp	r3, #0
 801a228:	d002      	beq.n	801a230 <RadioSetRxGenericConfig+0x288>
 801a22a:	2b01      	cmp	r3, #1
 801a22c:	d005      	beq.n	801a23a <RadioSetRxGenericConfig+0x292>
            break;
 801a22e:	e027      	b.n	801a280 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a230:	4b0e      	ldr	r3, [pc, #56]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a232:	2200      	movs	r2, #0
 801a234:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a238:	e023      	b.n	801a282 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a23a:	4b0c      	ldr	r3, [pc, #48]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a23c:	2201      	movs	r2, #1
 801a23e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a242:	e01e      	b.n	801a282 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a24a:	2b0b      	cmp	r3, #11
 801a24c:	d004      	beq.n	801a258 <RadioSetRxGenericConfig+0x2b0>
 801a24e:	68bb      	ldr	r3, [r7, #8]
 801a250:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a254:	2b0c      	cmp	r3, #12
 801a256:	d104      	bne.n	801a262 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a258:	4b04      	ldr	r3, [pc, #16]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a25a:	2201      	movs	r2, #1
 801a25c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a260:	e00f      	b.n	801a282 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a262:	4b02      	ldr	r3, [pc, #8]	; (801a26c <RadioSetRxGenericConfig+0x2c4>)
 801a264:	2200      	movs	r2, #0
 801a266:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a26a:	e00a      	b.n	801a282 <RadioSetRxGenericConfig+0x2da>
 801a26c:	20002148 	.word	0x20002148
 801a270:	20002144 	.word	0x20002144
 801a274:	200021bc 	.word	0x200021bc
 801a278:	20002180 	.word	0x20002180
 801a27c:	20002156 	.word	0x20002156
            break;
 801a280:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a282:	4b28      	ldr	r3, [pc, #160]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a284:	2201      	movs	r2, #1
 801a286:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801a28c:	4b25      	ldr	r3, [pc, #148]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a28e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a296:	4b23      	ldr	r3, [pc, #140]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a298:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a29a:	4a22      	ldr	r2, [pc, #136]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a2a0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a2a2:	68bb      	ldr	r3, [r7, #8]
 801a2a4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801a2a8:	4b1e      	ldr	r3, [pc, #120]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a2aa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a2ae:	68bb      	ldr	r3, [r7, #8]
 801a2b0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801a2b4:	4b1b      	ldr	r3, [pc, #108]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a2b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a2ba:	f7ff f998 	bl	80195ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a2be:	2001      	movs	r0, #1
 801a2c0:	f7fe fb42 	bl	8018948 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2c4:	4818      	ldr	r0, [pc, #96]	; (801a328 <RadioSetRxGenericConfig+0x380>)
 801a2c6:	f000 ff5b 	bl	801b180 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2ca:	4818      	ldr	r0, [pc, #96]	; (801a32c <RadioSetRxGenericConfig+0x384>)
 801a2cc:	f001 f82a 	bl	801b324 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a2d0:	4b14      	ldr	r3, [pc, #80]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a2d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a2d6:	2b01      	cmp	r3, #1
 801a2d8:	d10d      	bne.n	801a2f6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a2da:	f240 7036 	movw	r0, #1846	; 0x736
 801a2de:	f001 f97d 	bl	801b5dc <SUBGRF_ReadRegister>
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	f023 0304 	bic.w	r3, r3, #4
 801a2e8:	b2db      	uxtb	r3, r3
 801a2ea:	4619      	mov	r1, r3
 801a2ec:	f240 7036 	movw	r0, #1846	; 0x736
 801a2f0:	f001 f960 	bl	801b5b4 <SUBGRF_WriteRegister>
 801a2f4:	e00c      	b.n	801a310 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a2f6:	f240 7036 	movw	r0, #1846	; 0x736
 801a2fa:	f001 f96f 	bl	801b5dc <SUBGRF_ReadRegister>
 801a2fe:	4603      	mov	r3, r0
 801a300:	f043 0304 	orr.w	r3, r3, #4
 801a304:	b2db      	uxtb	r3, r3
 801a306:	4619      	mov	r1, r3
 801a308:	f240 7036 	movw	r0, #1846	; 0x736
 801a30c:	f001 f952 	bl	801b5b4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a310:	4b04      	ldr	r3, [pc, #16]	; (801a324 <RadioSetRxGenericConfig+0x37c>)
 801a312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a316:	609a      	str	r2, [r3, #8]
        break;
 801a318:	bf00      	nop
    }
    return status;
 801a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a31c:	4618      	mov	r0, r3
 801a31e:	3730      	adds	r7, #48	; 0x30
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}
 801a324:	20002148 	.word	0x20002148
 801a328:	20002180 	.word	0x20002180
 801a32c:	20002156 	.word	0x20002156

0801a330 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b08e      	sub	sp, #56	; 0x38
 801a334:	af00      	add	r7, sp, #0
 801a336:	60b9      	str	r1, [r7, #8]
 801a338:	607b      	str	r3, [r7, #4]
 801a33a:	4603      	mov	r3, r0
 801a33c:	73fb      	strb	r3, [r7, #15]
 801a33e:	4613      	mov	r3, r2
 801a340:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a342:	2300      	movs	r3, #0
 801a344:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a346:	2300      	movs	r3, #0
 801a348:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a34a:	f001 fc0a 	bl	801bb62 <RFW_DeInit>
    switch( modem )
 801a34e:	7bfb      	ldrb	r3, [r7, #15]
 801a350:	2b03      	cmp	r3, #3
 801a352:	f200 8204 	bhi.w	801a75e <RadioSetTxGenericConfig+0x42e>
 801a356:	a201      	add	r2, pc, #4	; (adr r2, 801a35c <RadioSetTxGenericConfig+0x2c>)
 801a358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a35c:	0801a4e1 	.word	0x0801a4e1
 801a360:	0801a629 	.word	0x0801a629
 801a364:	0801a721 	.word	0x0801a721
 801a368:	0801a36d 	.word	0x0801a36d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a36c:	68bb      	ldr	r3, [r7, #8]
 801a36e:	7c9b      	ldrb	r3, [r3, #18]
 801a370:	2b08      	cmp	r3, #8
 801a372:	d902      	bls.n	801a37a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a374:	f04f 33ff 	mov.w	r3, #4294967295
 801a378:	e206      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801a37a:	68bb      	ldr	r3, [r7, #8]
 801a37c:	6899      	ldr	r1, [r3, #8]
 801a37e:	68bb      	ldr	r3, [r7, #8]
 801a380:	7c9b      	ldrb	r3, [r3, #18]
 801a382:	b29a      	uxth	r2, r3
 801a384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a388:	4618      	mov	r0, r3
 801a38a:	f001 fcdd 	bl	801bd48 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d102      	bne.n	801a39c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a396:	f04f 33ff 	mov.w	r3, #4294967295
 801a39a:	e1f5      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801a39c:	68bb      	ldr	r3, [r7, #8]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	f242 7210 	movw	r2, #10000	; 0x2710
 801a3a4:	4293      	cmp	r3, r2
 801a3a6:	d813      	bhi.n	801a3d0 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801a3a8:	2302      	movs	r3, #2
 801a3aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a3ae:	4b99      	ldr	r3, [pc, #612]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3b0:	2203      	movs	r2, #3
 801a3b2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a3b4:	4b97      	ldr	r3, [pc, #604]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3b6:	2203      	movs	r2, #3
 801a3b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a3bc:	68bb      	ldr	r3, [r7, #8]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	4a94      	ldr	r2, [pc, #592]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3c2:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	7cda      	ldrb	r2, [r3, #19]
 801a3c8:	4b92      	ldr	r3, [pc, #584]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a3ce:	e017      	b.n	801a400 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a3d6:	4b8f      	ldr	r3, [pc, #572]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3d8:	2200      	movs	r2, #0
 801a3da:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a3dc:	4b8d      	ldr	r3, [pc, #564]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3de:	2200      	movs	r2, #0
 801a3e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	4a8a      	ldr	r2, [pc, #552]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3ea:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a3ec:	68bb      	ldr	r3, [r7, #8]
 801a3ee:	7cda      	ldrb	r2, [r3, #19]
 801a3f0:	4b88      	ldr	r3, [pc, #544]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801a3f6:	68bb      	ldr	r3, [r7, #8]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	089b      	lsrs	r3, r3, #2
 801a3fc:	4a85      	ldr	r2, [pc, #532]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a3fe:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	685b      	ldr	r3, [r3, #4]
 801a404:	b29b      	uxth	r3, r3
 801a406:	00db      	lsls	r3, r3, #3
 801a408:	b29a      	uxth	r2, r3
 801a40a:	4b82      	ldr	r3, [pc, #520]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a40c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a40e:	4b81      	ldr	r3, [pc, #516]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a410:	2204      	movs	r2, #4
 801a412:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a414:	68bb      	ldr	r3, [r7, #8]
 801a416:	7c9b      	ldrb	r3, [r3, #18]
 801a418:	00db      	lsls	r3, r3, #3
 801a41a:	b2da      	uxtb	r2, r3
 801a41c:	4b7d      	ldr	r3, [pc, #500]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a41e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a420:	4b7c      	ldr	r3, [pc, #496]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a422:	2200      	movs	r2, #0
 801a424:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a426:	68bb      	ldr	r3, [r7, #8]
 801a428:	7d9b      	ldrb	r3, [r3, #22]
 801a42a:	2b02      	cmp	r3, #2
 801a42c:	d003      	beq.n	801a436 <RadioSetTxGenericConfig+0x106>
 801a42e:	68bb      	ldr	r3, [r7, #8]
 801a430:	7d1b      	ldrb	r3, [r3, #20]
 801a432:	2b02      	cmp	r3, #2
 801a434:	d12b      	bne.n	801a48e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a436:	68bb      	ldr	r3, [r7, #8]
 801a438:	7d5b      	ldrb	r3, [r3, #21]
 801a43a:	2bf1      	cmp	r3, #241	; 0xf1
 801a43c:	d00a      	beq.n	801a454 <RadioSetTxGenericConfig+0x124>
 801a43e:	68bb      	ldr	r3, [r7, #8]
 801a440:	7d5b      	ldrb	r3, [r3, #21]
 801a442:	2bf2      	cmp	r3, #242	; 0xf2
 801a444:	d006      	beq.n	801a454 <RadioSetTxGenericConfig+0x124>
 801a446:	68bb      	ldr	r3, [r7, #8]
 801a448:	7d5b      	ldrb	r3, [r3, #21]
 801a44a:	2b01      	cmp	r3, #1
 801a44c:	d002      	beq.n	801a454 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801a44e:	f04f 33ff 	mov.w	r3, #4294967295
 801a452:	e199      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801a454:	68bb      	ldr	r3, [r7, #8]
 801a456:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a458:	2301      	movs	r3, #1
 801a45a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a45e:	4b6e      	ldr	r3, [pc, #440]	; (801a618 <RadioSetTxGenericConfig+0x2e8>)
 801a460:	6819      	ldr	r1, [r3, #0]
 801a462:	f107 0320 	add.w	r3, r7, #32
 801a466:	4a6d      	ldr	r2, [pc, #436]	; (801a61c <RadioSetTxGenericConfig+0x2ec>)
 801a468:	4618      	mov	r0, r3
 801a46a:	f001 fb6d 	bl	801bb48 <RFW_Init>
 801a46e:	4603      	mov	r3, r0
 801a470:	2b00      	cmp	r3, #0
 801a472:	d002      	beq.n	801a47a <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801a474:	f04f 33ff 	mov.w	r3, #4294967295
 801a478:	e186      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a47a:	4b66      	ldr	r3, [pc, #408]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a47c:	2200      	movs	r2, #0
 801a47e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a480:	4b64      	ldr	r3, [pc, #400]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a482:	2201      	movs	r2, #1
 801a484:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a486:	4b63      	ldr	r3, [pc, #396]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a488:	2200      	movs	r2, #0
 801a48a:	755a      	strb	r2, [r3, #21]
        {
 801a48c:	e00b      	b.n	801a4a6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a48e:	68bb      	ldr	r3, [r7, #8]
 801a490:	7d5a      	ldrb	r2, [r3, #21]
 801a492:	4b60      	ldr	r3, [pc, #384]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a494:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a496:	68bb      	ldr	r3, [r7, #8]
 801a498:	7d9a      	ldrb	r2, [r3, #22]
 801a49a:	4b5e      	ldr	r3, [pc, #376]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a49c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	7d1a      	ldrb	r2, [r3, #20]
 801a4a2:	4b5c      	ldr	r3, [pc, #368]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a4a4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a4a6:	f7ff f8a2 	bl	80195ee <RadioStandby>
        RadioSetModem( radio_modem );
 801a4aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	f7fe fa4a 	bl	8018948 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a4b4:	485a      	ldr	r0, [pc, #360]	; (801a620 <RadioSetTxGenericConfig+0x2f0>)
 801a4b6:	f000 fe63 	bl	801b180 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a4ba:	485a      	ldr	r0, [pc, #360]	; (801a624 <RadioSetTxGenericConfig+0x2f4>)
 801a4bc:	f000 ff32 	bl	801b324 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a4c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f000 f9fa 	bl	801a8be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a4ca:	68bb      	ldr	r3, [r7, #8]
 801a4cc:	8a1b      	ldrh	r3, [r3, #16]
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f000 fa44 	bl	801a95c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	899b      	ldrh	r3, [r3, #12]
 801a4d8:	4618      	mov	r0, r3
 801a4da:	f000 fa1f 	bl	801a91c <SUBGRF_SetCrcPolynomial>
        break;
 801a4de:	e13f      	b.n	801a760 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d102      	bne.n	801a4ee <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801a4e8:	f04f 33ff 	mov.w	r3, #4294967295
 801a4ec:	e14c      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a4ee:	68bb      	ldr	r3, [r7, #8]
 801a4f0:	7c9b      	ldrb	r3, [r3, #18]
 801a4f2:	2b08      	cmp	r3, #8
 801a4f4:	d902      	bls.n	801a4fc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801a4f6:	f04f 33ff 	mov.w	r3, #4294967295
 801a4fa:	e145      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801a4fc:	68bb      	ldr	r3, [r7, #8]
 801a4fe:	6899      	ldr	r1, [r3, #8]
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	7c9b      	ldrb	r3, [r3, #18]
 801a504:	b29a      	uxth	r2, r3
 801a506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a50a:	4618      	mov	r0, r3
 801a50c:	f001 fc1c 	bl	801bd48 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a510:	4b40      	ldr	r3, [pc, #256]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a512:	2200      	movs	r2, #0
 801a514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a518:	68bb      	ldr	r3, [r7, #8]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	4a3d      	ldr	r2, [pc, #244]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a51e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a520:	68bb      	ldr	r3, [r7, #8]
 801a522:	7cda      	ldrb	r2, [r3, #19]
 801a524:	4b3b      	ldr	r3, [pc, #236]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a52a:	68bb      	ldr	r3, [r7, #8]
 801a52c:	699b      	ldr	r3, [r3, #24]
 801a52e:	4a39      	ldr	r2, [pc, #228]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a530:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a532:	4b38      	ldr	r3, [pc, #224]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a534:	2200      	movs	r2, #0
 801a536:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a538:	68bb      	ldr	r3, [r7, #8]
 801a53a:	685b      	ldr	r3, [r3, #4]
 801a53c:	b29b      	uxth	r3, r3
 801a53e:	00db      	lsls	r3, r3, #3
 801a540:	b29a      	uxth	r2, r3
 801a542:	4b34      	ldr	r3, [pc, #208]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a544:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a546:	4b33      	ldr	r3, [pc, #204]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a548:	2204      	movs	r2, #4
 801a54a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a54c:	68bb      	ldr	r3, [r7, #8]
 801a54e:	7c9b      	ldrb	r3, [r3, #18]
 801a550:	00db      	lsls	r3, r3, #3
 801a552:	b2da      	uxtb	r2, r3
 801a554:	4b2f      	ldr	r3, [pc, #188]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a556:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a558:	4b2e      	ldr	r3, [pc, #184]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a55a:	2200      	movs	r2, #0
 801a55c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a55e:	68bb      	ldr	r3, [r7, #8]
 801a560:	7d9b      	ldrb	r3, [r3, #22]
 801a562:	2b02      	cmp	r3, #2
 801a564:	d003      	beq.n	801a56e <RadioSetTxGenericConfig+0x23e>
 801a566:	68bb      	ldr	r3, [r7, #8]
 801a568:	7d1b      	ldrb	r3, [r3, #20]
 801a56a:	2b02      	cmp	r3, #2
 801a56c:	d12a      	bne.n	801a5c4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a56e:	68bb      	ldr	r3, [r7, #8]
 801a570:	7d5b      	ldrb	r3, [r3, #21]
 801a572:	2bf1      	cmp	r3, #241	; 0xf1
 801a574:	d00a      	beq.n	801a58c <RadioSetTxGenericConfig+0x25c>
 801a576:	68bb      	ldr	r3, [r7, #8]
 801a578:	7d5b      	ldrb	r3, [r3, #21]
 801a57a:	2bf2      	cmp	r3, #242	; 0xf2
 801a57c:	d006      	beq.n	801a58c <RadioSetTxGenericConfig+0x25c>
 801a57e:	68bb      	ldr	r3, [r7, #8]
 801a580:	7d5b      	ldrb	r3, [r3, #21]
 801a582:	2b01      	cmp	r3, #1
 801a584:	d002      	beq.n	801a58c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a586:	f04f 33ff 	mov.w	r3, #4294967295
 801a58a:	e0fd      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a58c:	2301      	movs	r3, #1
 801a58e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a594:	4b20      	ldr	r3, [pc, #128]	; (801a618 <RadioSetTxGenericConfig+0x2e8>)
 801a596:	6819      	ldr	r1, [r3, #0]
 801a598:	f107 0314 	add.w	r3, r7, #20
 801a59c:	4a1f      	ldr	r2, [pc, #124]	; (801a61c <RadioSetTxGenericConfig+0x2ec>)
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f001 fad2 	bl	801bb48 <RFW_Init>
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d002      	beq.n	801a5b0 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801a5aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a5ae:	e0eb      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a5b0:	4b18      	ldr	r3, [pc, #96]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a5b6:	4b17      	ldr	r3, [pc, #92]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a5b8:	2201      	movs	r2, #1
 801a5ba:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a5bc:	4b15      	ldr	r3, [pc, #84]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a5be:	2200      	movs	r2, #0
 801a5c0:	755a      	strb	r2, [r3, #21]
        {
 801a5c2:	e00b      	b.n	801a5dc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a5c4:	68bb      	ldr	r3, [r7, #8]
 801a5c6:	7d5a      	ldrb	r2, [r3, #21]
 801a5c8:	4b12      	ldr	r3, [pc, #72]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a5ca:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	7d9a      	ldrb	r2, [r3, #22]
 801a5d0:	4b10      	ldr	r3, [pc, #64]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a5d2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a5d4:	68bb      	ldr	r3, [r7, #8]
 801a5d6:	7d1a      	ldrb	r2, [r3, #20]
 801a5d8:	4b0e      	ldr	r3, [pc, #56]	; (801a614 <RadioSetTxGenericConfig+0x2e4>)
 801a5da:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a5dc:	f7ff f807 	bl	80195ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a5e0:	2000      	movs	r0, #0
 801a5e2:	f7fe f9b1 	bl	8018948 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a5e6:	480e      	ldr	r0, [pc, #56]	; (801a620 <RadioSetTxGenericConfig+0x2f0>)
 801a5e8:	f000 fdca 	bl	801b180 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5ec:	480d      	ldr	r0, [pc, #52]	; (801a624 <RadioSetTxGenericConfig+0x2f4>)
 801a5ee:	f000 fe99 	bl	801b324 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a5f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	f000 f961 	bl	801a8be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	8a1b      	ldrh	r3, [r3, #16]
 801a600:	4618      	mov	r0, r3
 801a602:	f000 f9ab 	bl	801a95c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a606:	68bb      	ldr	r3, [r7, #8]
 801a608:	899b      	ldrh	r3, [r3, #12]
 801a60a:	4618      	mov	r0, r3
 801a60c:	f000 f986 	bl	801a91c <SUBGRF_SetCrcPolynomial>
        break;
 801a610:	e0a6      	b.n	801a760 <RadioSetTxGenericConfig+0x430>
 801a612:	bf00      	nop
 801a614:	20002148 	.word	0x20002148
 801a618:	20002144 	.word	0x20002144
 801a61c:	200021a4 	.word	0x200021a4
 801a620:	20002180 	.word	0x20002180
 801a624:	20002156 	.word	0x20002156
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a628:	4b59      	ldr	r3, [pc, #356]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a62a:	2201      	movs	r2, #1
 801a62c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	781a      	ldrb	r2, [r3, #0]
 801a634:	4b56      	ldr	r3, [pc, #344]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a63a:	68bb      	ldr	r3, [r7, #8]
 801a63c:	785a      	ldrb	r2, [r3, #1]
 801a63e:	4b54      	ldr	r3, [pc, #336]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	789a      	ldrb	r2, [r3, #2]
 801a648:	4b51      	ldr	r3, [pc, #324]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a64a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a64e:	68bb      	ldr	r3, [r7, #8]
 801a650:	78db      	ldrb	r3, [r3, #3]
 801a652:	2b02      	cmp	r3, #2
 801a654:	d010      	beq.n	801a678 <RadioSetTxGenericConfig+0x348>
 801a656:	2b02      	cmp	r3, #2
 801a658:	dc20      	bgt.n	801a69c <RadioSetTxGenericConfig+0x36c>
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d002      	beq.n	801a664 <RadioSetTxGenericConfig+0x334>
 801a65e:	2b01      	cmp	r3, #1
 801a660:	d005      	beq.n	801a66e <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a662:	e01b      	b.n	801a69c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a664:	4b4a      	ldr	r3, [pc, #296]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a666:	2200      	movs	r2, #0
 801a668:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a66c:	e017      	b.n	801a69e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a66e:	4b48      	ldr	r3, [pc, #288]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a670:	2201      	movs	r2, #1
 801a672:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a676:	e012      	b.n	801a69e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a678:	68bb      	ldr	r3, [r7, #8]
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	2b0b      	cmp	r3, #11
 801a67e:	d003      	beq.n	801a688 <RadioSetTxGenericConfig+0x358>
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	781b      	ldrb	r3, [r3, #0]
 801a684:	2b0c      	cmp	r3, #12
 801a686:	d104      	bne.n	801a692 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a688:	4b41      	ldr	r3, [pc, #260]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a68a:	2201      	movs	r2, #1
 801a68c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a690:	e005      	b.n	801a69e <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a692:	4b3f      	ldr	r3, [pc, #252]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a694:	2200      	movs	r2, #0
 801a696:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a69a:	e000      	b.n	801a69e <RadioSetTxGenericConfig+0x36e>
            break;
 801a69c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a69e:	4b3c      	ldr	r3, [pc, #240]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a6a0:	2201      	movs	r2, #1
 801a6a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	889a      	ldrh	r2, [r3, #4]
 801a6a8:	4b39      	ldr	r3, [pc, #228]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a6aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a6ac:	68bb      	ldr	r3, [r7, #8]
 801a6ae:	799a      	ldrb	r2, [r3, #6]
 801a6b0:	4b37      	ldr	r3, [pc, #220]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a6b2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	79da      	ldrb	r2, [r3, #7]
 801a6b8:	4b35      	ldr	r3, [pc, #212]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a6ba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a6be:	68bb      	ldr	r3, [r7, #8]
 801a6c0:	7a1a      	ldrb	r2, [r3, #8]
 801a6c2:	4b33      	ldr	r3, [pc, #204]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a6c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a6c8:	f7fe ff91 	bl	80195ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a6cc:	2001      	movs	r0, #1
 801a6ce:	f7fe f93b 	bl	8018948 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a6d2:	4830      	ldr	r0, [pc, #192]	; (801a794 <RadioSetTxGenericConfig+0x464>)
 801a6d4:	f000 fd54 	bl	801b180 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6d8:	482f      	ldr	r0, [pc, #188]	; (801a798 <RadioSetTxGenericConfig+0x468>)
 801a6da:	f000 fe23 	bl	801b324 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a6de:	4b2c      	ldr	r3, [pc, #176]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a6e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a6e4:	2b06      	cmp	r3, #6
 801a6e6:	d10d      	bne.n	801a704 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a6e8:	f640 0089 	movw	r0, #2185	; 0x889
 801a6ec:	f000 ff76 	bl	801b5dc <SUBGRF_ReadRegister>
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	f023 0304 	bic.w	r3, r3, #4
 801a6f6:	b2db      	uxtb	r3, r3
 801a6f8:	4619      	mov	r1, r3
 801a6fa:	f640 0089 	movw	r0, #2185	; 0x889
 801a6fe:	f000 ff59 	bl	801b5b4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a702:	e02d      	b.n	801a760 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a704:	f640 0089 	movw	r0, #2185	; 0x889
 801a708:	f000 ff68 	bl	801b5dc <SUBGRF_ReadRegister>
 801a70c:	4603      	mov	r3, r0
 801a70e:	f043 0304 	orr.w	r3, r3, #4
 801a712:	b2db      	uxtb	r3, r3
 801a714:	4619      	mov	r1, r3
 801a716:	f640 0089 	movw	r0, #2185	; 0x889
 801a71a:	f000 ff4b 	bl	801b5b4 <SUBGRF_WriteRegister>
        break;
 801a71e:	e01f      	b.n	801a760 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a720:	68bb      	ldr	r3, [r7, #8]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d004      	beq.n	801a732 <RadioSetTxGenericConfig+0x402>
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a730:	d902      	bls.n	801a738 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a732:	f04f 33ff 	mov.w	r3, #4294967295
 801a736:	e027      	b.n	801a788 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a738:	2003      	movs	r0, #3
 801a73a:	f7fe f905 	bl	8018948 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a73e:	4b14      	ldr	r3, [pc, #80]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a740:	2202      	movs	r2, #2
 801a742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	4a11      	ldr	r2, [pc, #68]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a74c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a74e:	4b10      	ldr	r3, [pc, #64]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a750:	2216      	movs	r2, #22
 801a752:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a756:	480f      	ldr	r0, [pc, #60]	; (801a794 <RadioSetTxGenericConfig+0x464>)
 801a758:	f000 fd12 	bl	801b180 <SUBGRF_SetModulationParams>
        break;
 801a75c:	e000      	b.n	801a760 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a75e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a764:	4618      	mov	r0, r3
 801a766:	f001 f841 	bl	801b7ec <SUBGRF_SetRfTxPower>
 801a76a:	4603      	mov	r3, r0
 801a76c:	461a      	mov	r2, r3
 801a76e:	4b08      	ldr	r3, [pc, #32]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a770:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a774:	4b06      	ldr	r3, [pc, #24]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a776:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a77a:	4618      	mov	r0, r3
 801a77c:	f001 fa05 	bl	801bb8a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a780:	4a03      	ldr	r2, [pc, #12]	; (801a790 <RadioSetTxGenericConfig+0x460>)
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	6053      	str	r3, [r2, #4]
    return 0;
 801a786:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a788:	4618      	mov	r0, r3
 801a78a:	3738      	adds	r7, #56	; 0x38
 801a78c:	46bd      	mov	sp, r7
 801a78e:	bd80      	pop	{r7, pc}
 801a790:	20002148 	.word	0x20002148
 801a794:	20002180 	.word	0x20002180
 801a798:	20002156 	.word	0x20002156

0801a79c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b084      	sub	sp, #16
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d002      	beq.n	801a7b0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a7aa:	4a1a      	ldr	r2, [pc, #104]	; (801a814 <SUBGRF_Init+0x78>)
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a7b0:	f7e7 fd00 	bl	80021b4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a7b4:	2002      	movs	r0, #2
 801a7b6:	f001 f8e5 	bl	801b984 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a7ba:	4b17      	ldr	r3, [pc, #92]	; (801a818 <SUBGRF_Init+0x7c>)
 801a7bc:	2200      	movs	r2, #0
 801a7be:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a7c0:	2000      	movs	r0, #0
 801a7c2:	f000 f977 	bl	801aab4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a7c6:	f7f1 fda5 	bl	800c314 <RBI_IsTCXO>
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	2b01      	cmp	r3, #1
 801a7ce:	d10e      	bne.n	801a7ee <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a7d0:	2140      	movs	r1, #64	; 0x40
 801a7d2:	2001      	movs	r0, #1
 801a7d4:	f000 fb78 	bl	801aec8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a7d8:	2100      	movs	r1, #0
 801a7da:	f640 1011 	movw	r0, #2321	; 0x911
 801a7de:	f000 fee9 	bl	801b5b4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a7e2:	237f      	movs	r3, #127	; 0x7f
 801a7e4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a7e6:	7b38      	ldrb	r0, [r7, #12]
 801a7e8:	f000 fa85 	bl	801acf6 <SUBGRF_Calibrate>
 801a7ec:	e009      	b.n	801a802 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a7ee:	2120      	movs	r1, #32
 801a7f0:	f640 1011 	movw	r0, #2321	; 0x911
 801a7f4:	f000 fede 	bl	801b5b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a7f8:	2120      	movs	r1, #32
 801a7fa:	f640 1012 	movw	r0, #2322	; 0x912
 801a7fe:	f000 fed9 	bl	801b5b4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a802:	f7f1 fd6b 	bl	800c2dc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a806:	4b05      	ldr	r3, [pc, #20]	; (801a81c <SUBGRF_Init+0x80>)
 801a808:	2201      	movs	r2, #1
 801a80a:	701a      	strb	r2, [r3, #0]
}
 801a80c:	bf00      	nop
 801a80e:	3710      	adds	r7, #16
 801a810:	46bd      	mov	sp, r7
 801a812:	bd80      	pop	{r7, pc}
 801a814:	200021e0 	.word	0x200021e0
 801a818:	200021dc 	.word	0x200021dc
 801a81c:	200021d4 	.word	0x200021d4

0801a820 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a820:	b480      	push	{r7}
 801a822:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a824:	4b02      	ldr	r3, [pc, #8]	; (801a830 <SUBGRF_GetOperatingMode+0x10>)
 801a826:	781b      	ldrb	r3, [r3, #0]
}
 801a828:	4618      	mov	r0, r3
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bc80      	pop	{r7}
 801a82e:	4770      	bx	lr
 801a830:	200021d4 	.word	0x200021d4

0801a834 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a834:	b580      	push	{r7, lr}
 801a836:	b082      	sub	sp, #8
 801a838:	af00      	add	r7, sp, #0
 801a83a:	6078      	str	r0, [r7, #4]
 801a83c:	460b      	mov	r3, r1
 801a83e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a840:	78fb      	ldrb	r3, [r7, #3]
 801a842:	461a      	mov	r2, r3
 801a844:	6879      	ldr	r1, [r7, #4]
 801a846:	2000      	movs	r0, #0
 801a848:	f000 ff20 	bl	801b68c <SUBGRF_WriteBuffer>
}
 801a84c:	bf00      	nop
 801a84e:	3708      	adds	r7, #8
 801a850:	46bd      	mov	sp, r7
 801a852:	bd80      	pop	{r7, pc}

0801a854 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b086      	sub	sp, #24
 801a858:	af00      	add	r7, sp, #0
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	60b9      	str	r1, [r7, #8]
 801a85e:	4613      	mov	r3, r2
 801a860:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a862:	2300      	movs	r3, #0
 801a864:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a866:	f107 0317 	add.w	r3, r7, #23
 801a86a:	4619      	mov	r1, r3
 801a86c:	68b8      	ldr	r0, [r7, #8]
 801a86e:	f000 fe23 	bl	801b4b8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	781b      	ldrb	r3, [r3, #0]
 801a876:	79fa      	ldrb	r2, [r7, #7]
 801a878:	429a      	cmp	r2, r3
 801a87a:	d201      	bcs.n	801a880 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a87c:	2301      	movs	r3, #1
 801a87e:	e007      	b.n	801a890 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a880:	7df8      	ldrb	r0, [r7, #23]
 801a882:	68bb      	ldr	r3, [r7, #8]
 801a884:	781b      	ldrb	r3, [r3, #0]
 801a886:	461a      	mov	r2, r3
 801a888:	68f9      	ldr	r1, [r7, #12]
 801a88a:	f000 ff21 	bl	801b6d0 <SUBGRF_ReadBuffer>

    return 0;
 801a88e:	2300      	movs	r3, #0
}
 801a890:	4618      	mov	r0, r3
 801a892:	3718      	adds	r7, #24
 801a894:	46bd      	mov	sp, r7
 801a896:	bd80      	pop	{r7, pc}

0801a898 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b084      	sub	sp, #16
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	60f8      	str	r0, [r7, #12]
 801a8a0:	460b      	mov	r3, r1
 801a8a2:	607a      	str	r2, [r7, #4]
 801a8a4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a8a6:	7afb      	ldrb	r3, [r7, #11]
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	68f8      	ldr	r0, [r7, #12]
 801a8ac:	f7ff ffc2 	bl	801a834 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a8b0:	6878      	ldr	r0, [r7, #4]
 801a8b2:	f000 f91b 	bl	801aaec <SUBGRF_SetTx>
}
 801a8b6:	bf00      	nop
 801a8b8:	3710      	adds	r7, #16
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}

0801a8be <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a8be:	b580      	push	{r7, lr}
 801a8c0:	b082      	sub	sp, #8
 801a8c2:	af00      	add	r7, sp, #0
 801a8c4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a8c6:	2208      	movs	r2, #8
 801a8c8:	6879      	ldr	r1, [r7, #4]
 801a8ca:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801a8ce:	f000 fe99 	bl	801b604 <SUBGRF_WriteRegisters>
    return 0;
 801a8d2:	2300      	movs	r3, #0
}
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	3708      	adds	r7, #8
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}

0801a8dc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b084      	sub	sp, #16
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a8e6:	88fb      	ldrh	r3, [r7, #6]
 801a8e8:	0a1b      	lsrs	r3, r3, #8
 801a8ea:	b29b      	uxth	r3, r3
 801a8ec:	b2db      	uxtb	r3, r3
 801a8ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a8f0:	88fb      	ldrh	r3, [r7, #6]
 801a8f2:	b2db      	uxtb	r3, r3
 801a8f4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a8f6:	f000 fb6b 	bl	801afd0 <SUBGRF_GetPacketType>
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d108      	bne.n	801a912 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a900:	f107 030c 	add.w	r3, r7, #12
 801a904:	2202      	movs	r2, #2
 801a906:	4619      	mov	r1, r3
 801a908:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801a90c:	f000 fe7a 	bl	801b604 <SUBGRF_WriteRegisters>
            break;
 801a910:	e000      	b.n	801a914 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a912:	bf00      	nop
    }
}
 801a914:	bf00      	nop
 801a916:	3710      	adds	r7, #16
 801a918:	46bd      	mov	sp, r7
 801a91a:	bd80      	pop	{r7, pc}

0801a91c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af00      	add	r7, sp, #0
 801a922:	4603      	mov	r3, r0
 801a924:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a926:	88fb      	ldrh	r3, [r7, #6]
 801a928:	0a1b      	lsrs	r3, r3, #8
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	b2db      	uxtb	r3, r3
 801a92e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a930:	88fb      	ldrh	r3, [r7, #6]
 801a932:	b2db      	uxtb	r3, r3
 801a934:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a936:	f000 fb4b 	bl	801afd0 <SUBGRF_GetPacketType>
 801a93a:	4603      	mov	r3, r0
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d108      	bne.n	801a952 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a940:	f107 030c 	add.w	r3, r7, #12
 801a944:	2202      	movs	r2, #2
 801a946:	4619      	mov	r1, r3
 801a948:	f240 60be 	movw	r0, #1726	; 0x6be
 801a94c:	f000 fe5a 	bl	801b604 <SUBGRF_WriteRegisters>
            break;
 801a950:	e000      	b.n	801a954 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a952:	bf00      	nop
    }
}
 801a954:	bf00      	nop
 801a956:	3710      	adds	r7, #16
 801a958:	46bd      	mov	sp, r7
 801a95a:	bd80      	pop	{r7, pc}

0801a95c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b084      	sub	sp, #16
 801a960:	af00      	add	r7, sp, #0
 801a962:	4603      	mov	r3, r0
 801a964:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a966:	2300      	movs	r3, #0
 801a968:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a96a:	f000 fb31 	bl	801afd0 <SUBGRF_GetPacketType>
 801a96e:	4603      	mov	r3, r0
 801a970:	2b00      	cmp	r3, #0
 801a972:	d121      	bne.n	801a9b8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a974:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a978:	f000 fe30 	bl	801b5dc <SUBGRF_ReadRegister>
 801a97c:	4603      	mov	r3, r0
 801a97e:	f023 0301 	bic.w	r3, r3, #1
 801a982:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a984:	88fb      	ldrh	r3, [r7, #6]
 801a986:	0a1b      	lsrs	r3, r3, #8
 801a988:	b29b      	uxth	r3, r3
 801a98a:	b25b      	sxtb	r3, r3
 801a98c:	f003 0301 	and.w	r3, r3, #1
 801a990:	b25a      	sxtb	r2, r3
 801a992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a996:	4313      	orrs	r3, r2
 801a998:	b25b      	sxtb	r3, r3
 801a99a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a99c:	7bfb      	ldrb	r3, [r7, #15]
 801a99e:	4619      	mov	r1, r3
 801a9a0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a9a4:	f000 fe06 	bl	801b5b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a9a8:	88fb      	ldrh	r3, [r7, #6]
 801a9aa:	b2db      	uxtb	r3, r3
 801a9ac:	4619      	mov	r1, r3
 801a9ae:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801a9b2:	f000 fdff 	bl	801b5b4 <SUBGRF_WriteRegister>
            break;
 801a9b6:	e000      	b.n	801a9ba <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a9b8:	bf00      	nop
    }
}
 801a9ba:	bf00      	nop
 801a9bc:	3710      	adds	r7, #16
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}

0801a9c2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a9c2:	b580      	push	{r7, lr}
 801a9c4:	b082      	sub	sp, #8
 801a9c6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a9d4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a9d8:	f000 fe00 	bl	801b5dc <SUBGRF_ReadRegister>
 801a9dc:	4603      	mov	r3, r0
 801a9de:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a9e0:	79fb      	ldrb	r3, [r7, #7]
 801a9e2:	f023 0301 	bic.w	r3, r3, #1
 801a9e6:	b2db      	uxtb	r3, r3
 801a9e8:	4619      	mov	r1, r3
 801a9ea:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a9ee:	f000 fde1 	bl	801b5b4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a9f2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a9f6:	f000 fdf1 	bl	801b5dc <SUBGRF_ReadRegister>
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a9fe:	79bb      	ldrb	r3, [r7, #6]
 801aa00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aa04:	b2db      	uxtb	r3, r3
 801aa06:	4619      	mov	r1, r3
 801aa08:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801aa0c:	f000 fdd2 	bl	801b5b4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801aa10:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801aa14:	f000 f88a 	bl	801ab2c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801aa18:	463b      	mov	r3, r7
 801aa1a:	2204      	movs	r2, #4
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	f640 0019 	movw	r0, #2073	; 0x819
 801aa22:	f000 fe11 	bl	801b648 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801aa26:	2000      	movs	r0, #0
 801aa28:	f000 f844 	bl	801aab4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801aa2c:	79fb      	ldrb	r3, [r7, #7]
 801aa2e:	4619      	mov	r1, r3
 801aa30:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801aa34:	f000 fdbe 	bl	801b5b4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801aa38:	79bb      	ldrb	r3, [r7, #6]
 801aa3a:	4619      	mov	r1, r3
 801aa3c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801aa40:	f000 fdb8 	bl	801b5b4 <SUBGRF_WriteRegister>

    return number;
 801aa44:	683b      	ldr	r3, [r7, #0]
}
 801aa46:	4618      	mov	r0, r3
 801aa48:	3708      	adds	r7, #8
 801aa4a:	46bd      	mov	sp, r7
 801aa4c:	bd80      	pop	{r7, pc}
	...

0801aa50 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b084      	sub	sp, #16
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801aa58:	2000      	movs	r0, #0
 801aa5a:	f7f1 fc46 	bl	800c2ea <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801aa5e:	2002      	movs	r0, #2
 801aa60:	f000 ff90 	bl	801b984 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aa64:	793b      	ldrb	r3, [r7, #4]
 801aa66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801aa6a:	b2db      	uxtb	r3, r3
 801aa6c:	009b      	lsls	r3, r3, #2
 801aa6e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aa70:	793b      	ldrb	r3, [r7, #4]
 801aa72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aa7a:	b25b      	sxtb	r3, r3
 801aa7c:	4313      	orrs	r3, r2
 801aa7e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801aa80:	793b      	ldrb	r3, [r7, #4]
 801aa82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801aa86:	b2db      	uxtb	r3, r3
 801aa88:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aa8a:	4313      	orrs	r3, r2
 801aa8c:	b25b      	sxtb	r3, r3
 801aa8e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aa90:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801aa92:	f107 030f 	add.w	r3, r7, #15
 801aa96:	2201      	movs	r2, #1
 801aa98:	4619      	mov	r1, r3
 801aa9a:	2084      	movs	r0, #132	; 0x84
 801aa9c:	f000 fe3a 	bl	801b714 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801aaa0:	4b03      	ldr	r3, [pc, #12]	; (801aab0 <SUBGRF_SetSleep+0x60>)
 801aaa2:	2200      	movs	r2, #0
 801aaa4:	701a      	strb	r2, [r3, #0]
}
 801aaa6:	bf00      	nop
 801aaa8:	3710      	adds	r7, #16
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}
 801aaae:	bf00      	nop
 801aab0:	200021d4 	.word	0x200021d4

0801aab4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801aab4:	b580      	push	{r7, lr}
 801aab6:	b082      	sub	sp, #8
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	4603      	mov	r3, r0
 801aabc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801aabe:	1dfb      	adds	r3, r7, #7
 801aac0:	2201      	movs	r2, #1
 801aac2:	4619      	mov	r1, r3
 801aac4:	2080      	movs	r0, #128	; 0x80
 801aac6:	f000 fe25 	bl	801b714 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801aaca:	79fb      	ldrb	r3, [r7, #7]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d103      	bne.n	801aad8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801aad0:	4b05      	ldr	r3, [pc, #20]	; (801aae8 <SUBGRF_SetStandby+0x34>)
 801aad2:	2201      	movs	r2, #1
 801aad4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801aad6:	e002      	b.n	801aade <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801aad8:	4b03      	ldr	r3, [pc, #12]	; (801aae8 <SUBGRF_SetStandby+0x34>)
 801aada:	2202      	movs	r2, #2
 801aadc:	701a      	strb	r2, [r3, #0]
}
 801aade:	bf00      	nop
 801aae0:	3708      	adds	r7, #8
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}
 801aae6:	bf00      	nop
 801aae8:	200021d4 	.word	0x200021d4

0801aaec <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b084      	sub	sp, #16
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801aaf4:	4b0c      	ldr	r3, [pc, #48]	; (801ab28 <SUBGRF_SetTx+0x3c>)
 801aaf6:	2204      	movs	r2, #4
 801aaf8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	0c1b      	lsrs	r3, r3, #16
 801aafe:	b2db      	uxtb	r3, r3
 801ab00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	0a1b      	lsrs	r3, r3, #8
 801ab06:	b2db      	uxtb	r3, r3
 801ab08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	b2db      	uxtb	r3, r3
 801ab0e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801ab10:	f107 030c 	add.w	r3, r7, #12
 801ab14:	2203      	movs	r2, #3
 801ab16:	4619      	mov	r1, r3
 801ab18:	2083      	movs	r0, #131	; 0x83
 801ab1a:	f000 fdfb 	bl	801b714 <SUBGRF_WriteCommand>
}
 801ab1e:	bf00      	nop
 801ab20:	3710      	adds	r7, #16
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}
 801ab26:	bf00      	nop
 801ab28:	200021d4 	.word	0x200021d4

0801ab2c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b084      	sub	sp, #16
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801ab34:	4b0c      	ldr	r3, [pc, #48]	; (801ab68 <SUBGRF_SetRx+0x3c>)
 801ab36:	2205      	movs	r2, #5
 801ab38:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	0c1b      	lsrs	r3, r3, #16
 801ab3e:	b2db      	uxtb	r3, r3
 801ab40:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	0a1b      	lsrs	r3, r3, #8
 801ab46:	b2db      	uxtb	r3, r3
 801ab48:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	b2db      	uxtb	r3, r3
 801ab4e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801ab50:	f107 030c 	add.w	r3, r7, #12
 801ab54:	2203      	movs	r2, #3
 801ab56:	4619      	mov	r1, r3
 801ab58:	2082      	movs	r0, #130	; 0x82
 801ab5a:	f000 fddb 	bl	801b714 <SUBGRF_WriteCommand>
}
 801ab5e:	bf00      	nop
 801ab60:	3710      	adds	r7, #16
 801ab62:	46bd      	mov	sp, r7
 801ab64:	bd80      	pop	{r7, pc}
 801ab66:	bf00      	nop
 801ab68:	200021d4 	.word	0x200021d4

0801ab6c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b084      	sub	sp, #16
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801ab74:	4b0e      	ldr	r3, [pc, #56]	; (801abb0 <SUBGRF_SetRxBoosted+0x44>)
 801ab76:	2205      	movs	r2, #5
 801ab78:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801ab7a:	2197      	movs	r1, #151	; 0x97
 801ab7c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801ab80:	f000 fd18 	bl	801b5b4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	0c1b      	lsrs	r3, r3, #16
 801ab88:	b2db      	uxtb	r3, r3
 801ab8a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	0a1b      	lsrs	r3, r3, #8
 801ab90:	b2db      	uxtb	r3, r3
 801ab92:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	b2db      	uxtb	r3, r3
 801ab98:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801ab9a:	f107 030c 	add.w	r3, r7, #12
 801ab9e:	2203      	movs	r2, #3
 801aba0:	4619      	mov	r1, r3
 801aba2:	2082      	movs	r0, #130	; 0x82
 801aba4:	f000 fdb6 	bl	801b714 <SUBGRF_WriteCommand>
}
 801aba8:	bf00      	nop
 801abaa:	3710      	adds	r7, #16
 801abac:	46bd      	mov	sp, r7
 801abae:	bd80      	pop	{r7, pc}
 801abb0:	200021d4 	.word	0x200021d4

0801abb4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	0c1b      	lsrs	r3, r3, #16
 801abc2:	b2db      	uxtb	r3, r3
 801abc4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	0a1b      	lsrs	r3, r3, #8
 801abca:	b2db      	uxtb	r3, r3
 801abcc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	b2db      	uxtb	r3, r3
 801abd2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	0c1b      	lsrs	r3, r3, #16
 801abd8:	b2db      	uxtb	r3, r3
 801abda:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801abdc:	683b      	ldr	r3, [r7, #0]
 801abde:	0a1b      	lsrs	r3, r3, #8
 801abe0:	b2db      	uxtb	r3, r3
 801abe2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801abe4:	683b      	ldr	r3, [r7, #0]
 801abe6:	b2db      	uxtb	r3, r3
 801abe8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801abea:	f107 0308 	add.w	r3, r7, #8
 801abee:	2206      	movs	r2, #6
 801abf0:	4619      	mov	r1, r3
 801abf2:	2094      	movs	r0, #148	; 0x94
 801abf4:	f000 fd8e 	bl	801b714 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801abf8:	4b03      	ldr	r3, [pc, #12]	; (801ac08 <SUBGRF_SetRxDutyCycle+0x54>)
 801abfa:	2206      	movs	r2, #6
 801abfc:	701a      	strb	r2, [r3, #0]
}
 801abfe:	bf00      	nop
 801ac00:	3710      	adds	r7, #16
 801ac02:	46bd      	mov	sp, r7
 801ac04:	bd80      	pop	{r7, pc}
 801ac06:	bf00      	nop
 801ac08:	200021d4 	.word	0x200021d4

0801ac0c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801ac10:	2200      	movs	r2, #0
 801ac12:	2100      	movs	r1, #0
 801ac14:	20c5      	movs	r0, #197	; 0xc5
 801ac16:	f000 fd7d 	bl	801b714 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801ac1a:	4b02      	ldr	r3, [pc, #8]	; (801ac24 <SUBGRF_SetCad+0x18>)
 801ac1c:	2207      	movs	r2, #7
 801ac1e:	701a      	strb	r2, [r3, #0]
}
 801ac20:	bf00      	nop
 801ac22:	bd80      	pop	{r7, pc}
 801ac24:	200021d4 	.word	0x200021d4

0801ac28 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	2100      	movs	r1, #0
 801ac30:	20d1      	movs	r0, #209	; 0xd1
 801ac32:	f000 fd6f 	bl	801b714 <SUBGRF_WriteCommand>
}
 801ac36:	bf00      	nop
 801ac38:	bd80      	pop	{r7, pc}

0801ac3a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801ac3a:	b580      	push	{r7, lr}
 801ac3c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801ac3e:	2200      	movs	r2, #0
 801ac40:	2100      	movs	r1, #0
 801ac42:	20d2      	movs	r0, #210	; 0xd2
 801ac44:	f000 fd66 	bl	801b714 <SUBGRF_WriteCommand>
}
 801ac48:	bf00      	nop
 801ac4a:	bd80      	pop	{r7, pc}

0801ac4c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801ac4c:	b580      	push	{r7, lr}
 801ac4e:	b082      	sub	sp, #8
 801ac50:	af00      	add	r7, sp, #0
 801ac52:	4603      	mov	r3, r0
 801ac54:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801ac56:	1dfb      	adds	r3, r7, #7
 801ac58:	2201      	movs	r2, #1
 801ac5a:	4619      	mov	r1, r3
 801ac5c:	209f      	movs	r0, #159	; 0x9f
 801ac5e:	f000 fd59 	bl	801b714 <SUBGRF_WriteCommand>
}
 801ac62:	bf00      	nop
 801ac64:	3708      	adds	r7, #8
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}

0801ac6a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801ac6a:	b580      	push	{r7, lr}
 801ac6c:	b084      	sub	sp, #16
 801ac6e:	af00      	add	r7, sp, #0
 801ac70:	4603      	mov	r3, r0
 801ac72:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801ac74:	1dfb      	adds	r3, r7, #7
 801ac76:	2201      	movs	r2, #1
 801ac78:	4619      	mov	r1, r3
 801ac7a:	20a0      	movs	r0, #160	; 0xa0
 801ac7c:	f000 fd4a 	bl	801b714 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801ac80:	79fb      	ldrb	r3, [r7, #7]
 801ac82:	2b3f      	cmp	r3, #63	; 0x3f
 801ac84:	d91c      	bls.n	801acc0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801ac86:	79fb      	ldrb	r3, [r7, #7]
 801ac88:	085b      	lsrs	r3, r3, #1
 801ac8a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801ac90:	2300      	movs	r3, #0
 801ac92:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801ac94:	e005      	b.n	801aca2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801ac96:	7bfb      	ldrb	r3, [r7, #15]
 801ac98:	089b      	lsrs	r3, r3, #2
 801ac9a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801ac9c:	7bbb      	ldrb	r3, [r7, #14]
 801ac9e:	3301      	adds	r3, #1
 801aca0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801aca2:	7bfb      	ldrb	r3, [r7, #15]
 801aca4:	2b1f      	cmp	r3, #31
 801aca6:	d8f6      	bhi.n	801ac96 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801aca8:	7bfb      	ldrb	r3, [r7, #15]
 801acaa:	00db      	lsls	r3, r3, #3
 801acac:	b2da      	uxtb	r2, r3
 801acae:	7bbb      	ldrb	r3, [r7, #14]
 801acb0:	4413      	add	r3, r2
 801acb2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801acb4:	7b7b      	ldrb	r3, [r7, #13]
 801acb6:	4619      	mov	r1, r3
 801acb8:	f240 7006 	movw	r0, #1798	; 0x706
 801acbc:	f000 fc7a 	bl	801b5b4 <SUBGRF_WriteRegister>
    }
}
 801acc0:	bf00      	nop
 801acc2:	3710      	adds	r7, #16
 801acc4:	46bd      	mov	sp, r7
 801acc6:	bd80      	pop	{r7, pc}

0801acc8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b082      	sub	sp, #8
 801accc:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801acce:	f7f1 fb28 	bl	800c322 <RBI_IsDCDC>
 801acd2:	4603      	mov	r3, r0
 801acd4:	2b01      	cmp	r3, #1
 801acd6:	d102      	bne.n	801acde <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801acd8:	2301      	movs	r3, #1
 801acda:	71fb      	strb	r3, [r7, #7]
 801acdc:	e001      	b.n	801ace2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801acde:	2300      	movs	r3, #0
 801ace0:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ace2:	1dfb      	adds	r3, r7, #7
 801ace4:	2201      	movs	r2, #1
 801ace6:	4619      	mov	r1, r3
 801ace8:	2096      	movs	r0, #150	; 0x96
 801acea:	f000 fd13 	bl	801b714 <SUBGRF_WriteCommand>
}
 801acee:	bf00      	nop
 801acf0:	3708      	adds	r7, #8
 801acf2:	46bd      	mov	sp, r7
 801acf4:	bd80      	pop	{r7, pc}

0801acf6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801acf6:	b580      	push	{r7, lr}
 801acf8:	b084      	sub	sp, #16
 801acfa:	af00      	add	r7, sp, #0
 801acfc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801acfe:	793b      	ldrb	r3, [r7, #4]
 801ad00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ad04:	b2db      	uxtb	r3, r3
 801ad06:	019b      	lsls	r3, r3, #6
 801ad08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ad0a:	793b      	ldrb	r3, [r7, #4]
 801ad0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ad10:	b2db      	uxtb	r3, r3
 801ad12:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ad14:	b25b      	sxtb	r3, r3
 801ad16:	4313      	orrs	r3, r2
 801ad18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ad1a:	793b      	ldrb	r3, [r7, #4]
 801ad1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ad20:	b2db      	uxtb	r3, r3
 801ad22:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ad24:	b25b      	sxtb	r3, r3
 801ad26:	4313      	orrs	r3, r2
 801ad28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ad2a:	793b      	ldrb	r3, [r7, #4]
 801ad2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ad30:	b2db      	uxtb	r3, r3
 801ad32:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ad34:	b25b      	sxtb	r3, r3
 801ad36:	4313      	orrs	r3, r2
 801ad38:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ad3a:	793b      	ldrb	r3, [r7, #4]
 801ad3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ad40:	b2db      	uxtb	r3, r3
 801ad42:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ad44:	b25b      	sxtb	r3, r3
 801ad46:	4313      	orrs	r3, r2
 801ad48:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801ad4a:	793b      	ldrb	r3, [r7, #4]
 801ad4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801ad50:	b2db      	uxtb	r3, r3
 801ad52:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ad54:	b25b      	sxtb	r3, r3
 801ad56:	4313      	orrs	r3, r2
 801ad58:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801ad5a:	793b      	ldrb	r3, [r7, #4]
 801ad5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ad60:	b2db      	uxtb	r3, r3
 801ad62:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801ad64:	4313      	orrs	r3, r2
 801ad66:	b25b      	sxtb	r3, r3
 801ad68:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ad6a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801ad6c:	f107 030f 	add.w	r3, r7, #15
 801ad70:	2201      	movs	r2, #1
 801ad72:	4619      	mov	r1, r3
 801ad74:	2089      	movs	r0, #137	; 0x89
 801ad76:	f000 fccd 	bl	801b714 <SUBGRF_WriteCommand>
}
 801ad7a:	bf00      	nop
 801ad7c:	3710      	adds	r7, #16
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
	...

0801ad84 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801ad84:	b580      	push	{r7, lr}
 801ad86:	b084      	sub	sp, #16
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	4a1b      	ldr	r2, [pc, #108]	; (801adfc <SUBGRF_CalibrateImage+0x78>)
 801ad90:	4293      	cmp	r3, r2
 801ad92:	d904      	bls.n	801ad9e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801ad94:	23e1      	movs	r3, #225	; 0xe1
 801ad96:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801ad98:	23e9      	movs	r3, #233	; 0xe9
 801ad9a:	737b      	strb	r3, [r7, #13]
 801ad9c:	e022      	b.n	801ade4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	4a17      	ldr	r2, [pc, #92]	; (801ae00 <SUBGRF_CalibrateImage+0x7c>)
 801ada2:	4293      	cmp	r3, r2
 801ada4:	d904      	bls.n	801adb0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801ada6:	23d7      	movs	r3, #215	; 0xd7
 801ada8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801adaa:	23db      	movs	r3, #219	; 0xdb
 801adac:	737b      	strb	r3, [r7, #13]
 801adae:	e019      	b.n	801ade4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	4a14      	ldr	r2, [pc, #80]	; (801ae04 <SUBGRF_CalibrateImage+0x80>)
 801adb4:	4293      	cmp	r3, r2
 801adb6:	d904      	bls.n	801adc2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801adb8:	23c1      	movs	r3, #193	; 0xc1
 801adba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801adbc:	23c5      	movs	r3, #197	; 0xc5
 801adbe:	737b      	strb	r3, [r7, #13]
 801adc0:	e010      	b.n	801ade4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	4a10      	ldr	r2, [pc, #64]	; (801ae08 <SUBGRF_CalibrateImage+0x84>)
 801adc6:	4293      	cmp	r3, r2
 801adc8:	d904      	bls.n	801add4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801adca:	2375      	movs	r3, #117	; 0x75
 801adcc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801adce:	2381      	movs	r3, #129	; 0x81
 801add0:	737b      	strb	r3, [r7, #13]
 801add2:	e007      	b.n	801ade4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	4a0d      	ldr	r2, [pc, #52]	; (801ae0c <SUBGRF_CalibrateImage+0x88>)
 801add8:	4293      	cmp	r3, r2
 801adda:	d903      	bls.n	801ade4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801addc:	236b      	movs	r3, #107	; 0x6b
 801adde:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ade0:	236f      	movs	r3, #111	; 0x6f
 801ade2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ade4:	f107 030c 	add.w	r3, r7, #12
 801ade8:	2202      	movs	r2, #2
 801adea:	4619      	mov	r1, r3
 801adec:	2098      	movs	r0, #152	; 0x98
 801adee:	f000 fc91 	bl	801b714 <SUBGRF_WriteCommand>
}
 801adf2:	bf00      	nop
 801adf4:	3710      	adds	r7, #16
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}
 801adfa:	bf00      	nop
 801adfc:	35a4e900 	.word	0x35a4e900
 801ae00:	32a9f880 	.word	0x32a9f880
 801ae04:	2de54480 	.word	0x2de54480
 801ae08:	1b6b0b00 	.word	0x1b6b0b00
 801ae0c:	1954fc40 	.word	0x1954fc40

0801ae10 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ae10:	b590      	push	{r4, r7, lr}
 801ae12:	b085      	sub	sp, #20
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	4604      	mov	r4, r0
 801ae18:	4608      	mov	r0, r1
 801ae1a:	4611      	mov	r1, r2
 801ae1c:	461a      	mov	r2, r3
 801ae1e:	4623      	mov	r3, r4
 801ae20:	71fb      	strb	r3, [r7, #7]
 801ae22:	4603      	mov	r3, r0
 801ae24:	71bb      	strb	r3, [r7, #6]
 801ae26:	460b      	mov	r3, r1
 801ae28:	717b      	strb	r3, [r7, #5]
 801ae2a:	4613      	mov	r3, r2
 801ae2c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801ae2e:	79fb      	ldrb	r3, [r7, #7]
 801ae30:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801ae32:	79bb      	ldrb	r3, [r7, #6]
 801ae34:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801ae36:	797b      	ldrb	r3, [r7, #5]
 801ae38:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801ae3a:	793b      	ldrb	r3, [r7, #4]
 801ae3c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801ae3e:	f107 030c 	add.w	r3, r7, #12
 801ae42:	2204      	movs	r2, #4
 801ae44:	4619      	mov	r1, r3
 801ae46:	2095      	movs	r0, #149	; 0x95
 801ae48:	f000 fc64 	bl	801b714 <SUBGRF_WriteCommand>
}
 801ae4c:	bf00      	nop
 801ae4e:	3714      	adds	r7, #20
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd90      	pop	{r4, r7, pc}

0801ae54 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801ae54:	b590      	push	{r4, r7, lr}
 801ae56:	b085      	sub	sp, #20
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	4604      	mov	r4, r0
 801ae5c:	4608      	mov	r0, r1
 801ae5e:	4611      	mov	r1, r2
 801ae60:	461a      	mov	r2, r3
 801ae62:	4623      	mov	r3, r4
 801ae64:	80fb      	strh	r3, [r7, #6]
 801ae66:	4603      	mov	r3, r0
 801ae68:	80bb      	strh	r3, [r7, #4]
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	807b      	strh	r3, [r7, #2]
 801ae6e:	4613      	mov	r3, r2
 801ae70:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801ae72:	88fb      	ldrh	r3, [r7, #6]
 801ae74:	0a1b      	lsrs	r3, r3, #8
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	b2db      	uxtb	r3, r3
 801ae7a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801ae7c:	88fb      	ldrh	r3, [r7, #6]
 801ae7e:	b2db      	uxtb	r3, r3
 801ae80:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801ae82:	88bb      	ldrh	r3, [r7, #4]
 801ae84:	0a1b      	lsrs	r3, r3, #8
 801ae86:	b29b      	uxth	r3, r3
 801ae88:	b2db      	uxtb	r3, r3
 801ae8a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801ae8c:	88bb      	ldrh	r3, [r7, #4]
 801ae8e:	b2db      	uxtb	r3, r3
 801ae90:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801ae92:	887b      	ldrh	r3, [r7, #2]
 801ae94:	0a1b      	lsrs	r3, r3, #8
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	b2db      	uxtb	r3, r3
 801ae9a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801ae9c:	887b      	ldrh	r3, [r7, #2]
 801ae9e:	b2db      	uxtb	r3, r3
 801aea0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801aea2:	883b      	ldrh	r3, [r7, #0]
 801aea4:	0a1b      	lsrs	r3, r3, #8
 801aea6:	b29b      	uxth	r3, r3
 801aea8:	b2db      	uxtb	r3, r3
 801aeaa:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801aeac:	883b      	ldrh	r3, [r7, #0]
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801aeb2:	f107 0308 	add.w	r3, r7, #8
 801aeb6:	2208      	movs	r2, #8
 801aeb8:	4619      	mov	r1, r3
 801aeba:	2008      	movs	r0, #8
 801aebc:	f000 fc2a 	bl	801b714 <SUBGRF_WriteCommand>
}
 801aec0:	bf00      	nop
 801aec2:	3714      	adds	r7, #20
 801aec4:	46bd      	mov	sp, r7
 801aec6:	bd90      	pop	{r4, r7, pc}

0801aec8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b084      	sub	sp, #16
 801aecc:	af00      	add	r7, sp, #0
 801aece:	4603      	mov	r3, r0
 801aed0:	6039      	str	r1, [r7, #0]
 801aed2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801aed4:	79fb      	ldrb	r3, [r7, #7]
 801aed6:	f003 0307 	and.w	r3, r3, #7
 801aeda:	b2db      	uxtb	r3, r3
 801aedc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801aede:	683b      	ldr	r3, [r7, #0]
 801aee0:	0c1b      	lsrs	r3, r3, #16
 801aee2:	b2db      	uxtb	r3, r3
 801aee4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801aee6:	683b      	ldr	r3, [r7, #0]
 801aee8:	0a1b      	lsrs	r3, r3, #8
 801aeea:	b2db      	uxtb	r3, r3
 801aeec:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801aeee:	683b      	ldr	r3, [r7, #0]
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801aef4:	f107 030c 	add.w	r3, r7, #12
 801aef8:	2204      	movs	r2, #4
 801aefa:	4619      	mov	r1, r3
 801aefc:	2097      	movs	r0, #151	; 0x97
 801aefe:	f000 fc09 	bl	801b714 <SUBGRF_WriteCommand>
}
 801af02:	bf00      	nop
 801af04:	3710      	adds	r7, #16
 801af06:	46bd      	mov	sp, r7
 801af08:	bd80      	pop	{r7, pc}
	...

0801af0c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801af0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801af10:	b084      	sub	sp, #16
 801af12:	af00      	add	r7, sp, #0
 801af14:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801af16:	2300      	movs	r3, #0
 801af18:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801af1a:	4b1d      	ldr	r3, [pc, #116]	; (801af90 <SUBGRF_SetRfFrequency+0x84>)
 801af1c:	781b      	ldrb	r3, [r3, #0]
 801af1e:	f083 0301 	eor.w	r3, r3, #1
 801af22:	b2db      	uxtb	r3, r3
 801af24:	2b00      	cmp	r3, #0
 801af26:	d005      	beq.n	801af34 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801af28:	6878      	ldr	r0, [r7, #4]
 801af2a:	f7ff ff2b 	bl	801ad84 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801af2e:	4b18      	ldr	r3, [pc, #96]	; (801af90 <SUBGRF_SetRfFrequency+0x84>)
 801af30:	2201      	movs	r2, #1
 801af32:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2200      	movs	r2, #0
 801af38:	461c      	mov	r4, r3
 801af3a:	4615      	mov	r5, r2
 801af3c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801af40:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801af44:	4a13      	ldr	r2, [pc, #76]	; (801af94 <SUBGRF_SetRfFrequency+0x88>)
 801af46:	f04f 0300 	mov.w	r3, #0
 801af4a:	4640      	mov	r0, r8
 801af4c:	4649      	mov	r1, r9
 801af4e:	f7e5 ff1d 	bl	8000d8c <__aeabi_uldivmod>
 801af52:	4602      	mov	r2, r0
 801af54:	460b      	mov	r3, r1
 801af56:	4613      	mov	r3, r2
 801af58:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	0e1b      	lsrs	r3, r3, #24
 801af5e:	b2db      	uxtb	r3, r3
 801af60:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	0c1b      	lsrs	r3, r3, #16
 801af66:	b2db      	uxtb	r3, r3
 801af68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	0a1b      	lsrs	r3, r3, #8
 801af6e:	b2db      	uxtb	r3, r3
 801af70:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	b2db      	uxtb	r3, r3
 801af76:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801af78:	f107 0308 	add.w	r3, r7, #8
 801af7c:	2204      	movs	r2, #4
 801af7e:	4619      	mov	r1, r3
 801af80:	2086      	movs	r0, #134	; 0x86
 801af82:	f000 fbc7 	bl	801b714 <SUBGRF_WriteCommand>
}
 801af86:	bf00      	nop
 801af88:	3710      	adds	r7, #16
 801af8a:	46bd      	mov	sp, r7
 801af8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801af90:	200021dc 	.word	0x200021dc
 801af94:	01e84800 	.word	0x01e84800

0801af98 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b082      	sub	sp, #8
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	4603      	mov	r3, r0
 801afa0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801afa2:	79fa      	ldrb	r2, [r7, #7]
 801afa4:	4b09      	ldr	r3, [pc, #36]	; (801afcc <SUBGRF_SetPacketType+0x34>)
 801afa6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801afa8:	79fb      	ldrb	r3, [r7, #7]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d104      	bne.n	801afb8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801afae:	2100      	movs	r1, #0
 801afb0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801afb4:	f000 fafe 	bl	801b5b4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801afb8:	1dfb      	adds	r3, r7, #7
 801afba:	2201      	movs	r2, #1
 801afbc:	4619      	mov	r1, r3
 801afbe:	208a      	movs	r0, #138	; 0x8a
 801afc0:	f000 fba8 	bl	801b714 <SUBGRF_WriteCommand>
}
 801afc4:	bf00      	nop
 801afc6:	3708      	adds	r7, #8
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd80      	pop	{r7, pc}
 801afcc:	200021d5 	.word	0x200021d5

0801afd0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801afd0:	b480      	push	{r7}
 801afd2:	af00      	add	r7, sp, #0
    return PacketType;
 801afd4:	4b02      	ldr	r3, [pc, #8]	; (801afe0 <SUBGRF_GetPacketType+0x10>)
 801afd6:	781b      	ldrb	r3, [r3, #0]
}
 801afd8:	4618      	mov	r0, r3
 801afda:	46bd      	mov	sp, r7
 801afdc:	bc80      	pop	{r7}
 801afde:	4770      	bx	lr
 801afe0:	200021d5 	.word	0x200021d5

0801afe4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b084      	sub	sp, #16
 801afe8:	af00      	add	r7, sp, #0
 801afea:	4603      	mov	r3, r0
 801afec:	71fb      	strb	r3, [r7, #7]
 801afee:	460b      	mov	r3, r1
 801aff0:	71bb      	strb	r3, [r7, #6]
 801aff2:	4613      	mov	r3, r2
 801aff4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801aff6:	79fb      	ldrb	r3, [r7, #7]
 801aff8:	2b01      	cmp	r3, #1
 801affa:	d149      	bne.n	801b090 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801affc:	2000      	movs	r0, #0
 801affe:	f7f1 f997 	bl	800c330 <RBI_GetRFOMaxPowerConfig>
 801b002:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b004:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b008:	68fa      	ldr	r2, [r7, #12]
 801b00a:	429a      	cmp	r2, r3
 801b00c:	da01      	bge.n	801b012 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	2b0e      	cmp	r3, #14
 801b016:	d10e      	bne.n	801b036 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b018:	2301      	movs	r3, #1
 801b01a:	2201      	movs	r2, #1
 801b01c:	2100      	movs	r1, #0
 801b01e:	2004      	movs	r0, #4
 801b020:	f7ff fef6 	bl	801ae10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b024:	79ba      	ldrb	r2, [r7, #6]
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	b2db      	uxtb	r3, r3
 801b02a:	1ad3      	subs	r3, r2, r3
 801b02c:	b2db      	uxtb	r3, r3
 801b02e:	330e      	adds	r3, #14
 801b030:	b2db      	uxtb	r3, r3
 801b032:	71bb      	strb	r3, [r7, #6]
 801b034:	e01f      	b.n	801b076 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	2b0a      	cmp	r3, #10
 801b03a:	d10e      	bne.n	801b05a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b03c:	2301      	movs	r3, #1
 801b03e:	2201      	movs	r2, #1
 801b040:	2100      	movs	r1, #0
 801b042:	2001      	movs	r0, #1
 801b044:	f7ff fee4 	bl	801ae10 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b048:	79ba      	ldrb	r2, [r7, #6]
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	b2db      	uxtb	r3, r3
 801b04e:	1ad3      	subs	r3, r2, r3
 801b050:	b2db      	uxtb	r3, r3
 801b052:	330d      	adds	r3, #13
 801b054:	b2db      	uxtb	r3, r3
 801b056:	71bb      	strb	r3, [r7, #6]
 801b058:	e00d      	b.n	801b076 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801b05a:	2301      	movs	r3, #1
 801b05c:	2201      	movs	r2, #1
 801b05e:	2100      	movs	r1, #0
 801b060:	2006      	movs	r0, #6
 801b062:	f7ff fed5 	bl	801ae10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b066:	79ba      	ldrb	r2, [r7, #6]
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	b2db      	uxtb	r3, r3
 801b06c:	1ad3      	subs	r3, r2, r3
 801b06e:	b2db      	uxtb	r3, r3
 801b070:	330e      	adds	r3, #14
 801b072:	b2db      	uxtb	r3, r3
 801b074:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b076:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b07a:	f113 0f11 	cmn.w	r3, #17
 801b07e:	da01      	bge.n	801b084 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b080:	23ef      	movs	r3, #239	; 0xef
 801b082:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b084:	2118      	movs	r1, #24
 801b086:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b08a:	f000 fa93 	bl	801b5b4 <SUBGRF_WriteRegister>
 801b08e:	e067      	b.n	801b160 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b090:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b094:	f000 faa2 	bl	801b5dc <SUBGRF_ReadRegister>
 801b098:	4603      	mov	r3, r0
 801b09a:	f043 031e 	orr.w	r3, r3, #30
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	4619      	mov	r1, r3
 801b0a2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b0a6:	f000 fa85 	bl	801b5b4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b0aa:	2001      	movs	r0, #1
 801b0ac:	f7f1 f940 	bl	800c330 <RBI_GetRFOMaxPowerConfig>
 801b0b0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b0b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b0b6:	68fa      	ldr	r2, [r7, #12]
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	da01      	bge.n	801b0c0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	2b14      	cmp	r3, #20
 801b0c4:	d10e      	bne.n	801b0e4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b0c6:	2301      	movs	r3, #1
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	2105      	movs	r1, #5
 801b0cc:	2003      	movs	r0, #3
 801b0ce:	f7ff fe9f 	bl	801ae10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b0d2:	79ba      	ldrb	r2, [r7, #6]
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	b2db      	uxtb	r3, r3
 801b0d8:	1ad3      	subs	r3, r2, r3
 801b0da:	b2db      	uxtb	r3, r3
 801b0dc:	3316      	adds	r3, #22
 801b0de:	b2db      	uxtb	r3, r3
 801b0e0:	71bb      	strb	r3, [r7, #6]
 801b0e2:	e031      	b.n	801b148 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	2b11      	cmp	r3, #17
 801b0e8:	d10e      	bne.n	801b108 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b0ea:	2301      	movs	r3, #1
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	2103      	movs	r1, #3
 801b0f0:	2002      	movs	r0, #2
 801b0f2:	f7ff fe8d 	bl	801ae10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b0f6:	79ba      	ldrb	r2, [r7, #6]
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	b2db      	uxtb	r3, r3
 801b0fc:	1ad3      	subs	r3, r2, r3
 801b0fe:	b2db      	uxtb	r3, r3
 801b100:	3316      	adds	r3, #22
 801b102:	b2db      	uxtb	r3, r3
 801b104:	71bb      	strb	r3, [r7, #6]
 801b106:	e01f      	b.n	801b148 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	2b0e      	cmp	r3, #14
 801b10c:	d10e      	bne.n	801b12c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b10e:	2301      	movs	r3, #1
 801b110:	2200      	movs	r2, #0
 801b112:	2102      	movs	r1, #2
 801b114:	2002      	movs	r0, #2
 801b116:	f7ff fe7b 	bl	801ae10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b11a:	79ba      	ldrb	r2, [r7, #6]
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	b2db      	uxtb	r3, r3
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	b2db      	uxtb	r3, r3
 801b124:	330e      	adds	r3, #14
 801b126:	b2db      	uxtb	r3, r3
 801b128:	71bb      	strb	r3, [r7, #6]
 801b12a:	e00d      	b.n	801b148 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b12c:	2301      	movs	r3, #1
 801b12e:	2200      	movs	r2, #0
 801b130:	2107      	movs	r1, #7
 801b132:	2004      	movs	r0, #4
 801b134:	f7ff fe6c 	bl	801ae10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b138:	79ba      	ldrb	r2, [r7, #6]
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	b2db      	uxtb	r3, r3
 801b13e:	1ad3      	subs	r3, r2, r3
 801b140:	b2db      	uxtb	r3, r3
 801b142:	3316      	adds	r3, #22
 801b144:	b2db      	uxtb	r3, r3
 801b146:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b148:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b14c:	f113 0f09 	cmn.w	r3, #9
 801b150:	da01      	bge.n	801b156 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b152:	23f7      	movs	r3, #247	; 0xf7
 801b154:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b156:	2138      	movs	r1, #56	; 0x38
 801b158:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b15c:	f000 fa2a 	bl	801b5b4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b160:	79bb      	ldrb	r3, [r7, #6]
 801b162:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b164:	797b      	ldrb	r3, [r7, #5]
 801b166:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b168:	f107 0308 	add.w	r3, r7, #8
 801b16c:	2202      	movs	r2, #2
 801b16e:	4619      	mov	r1, r3
 801b170:	208e      	movs	r0, #142	; 0x8e
 801b172:	f000 facf 	bl	801b714 <SUBGRF_WriteCommand>
}
 801b176:	bf00      	nop
 801b178:	3710      	adds	r7, #16
 801b17a:	46bd      	mov	sp, r7
 801b17c:	bd80      	pop	{r7, pc}
	...

0801b180 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b184:	b086      	sub	sp, #24
 801b186:	af00      	add	r7, sp, #0
 801b188:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b18a:	2300      	movs	r3, #0
 801b18c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b18e:	4a61      	ldr	r2, [pc, #388]	; (801b314 <SUBGRF_SetModulationParams+0x194>)
 801b190:	f107 0308 	add.w	r3, r7, #8
 801b194:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b198:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	781a      	ldrb	r2, [r3, #0]
 801b1a0:	4b5d      	ldr	r3, [pc, #372]	; (801b318 <SUBGRF_SetModulationParams+0x198>)
 801b1a2:	781b      	ldrb	r3, [r3, #0]
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d004      	beq.n	801b1b2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	f7ff fef3 	bl	801af98 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	781b      	ldrb	r3, [r3, #0]
 801b1b6:	2b03      	cmp	r3, #3
 801b1b8:	f200 80a5 	bhi.w	801b306 <SUBGRF_SetModulationParams+0x186>
 801b1bc:	a201      	add	r2, pc, #4	; (adr r2, 801b1c4 <SUBGRF_SetModulationParams+0x44>)
 801b1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1c2:	bf00      	nop
 801b1c4:	0801b1d5 	.word	0x0801b1d5
 801b1c8:	0801b295 	.word	0x0801b295
 801b1cc:	0801b257 	.word	0x0801b257
 801b1d0:	0801b2c3 	.word	0x0801b2c3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b1d4:	2308      	movs	r3, #8
 801b1d6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	685b      	ldr	r3, [r3, #4]
 801b1dc:	4a4f      	ldr	r2, [pc, #316]	; (801b31c <SUBGRF_SetModulationParams+0x19c>)
 801b1de:	fbb2 f3f3 	udiv	r3, r2, r3
 801b1e2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b1e4:	697b      	ldr	r3, [r7, #20]
 801b1e6:	0c1b      	lsrs	r3, r3, #16
 801b1e8:	b2db      	uxtb	r3, r3
 801b1ea:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b1ec:	697b      	ldr	r3, [r7, #20]
 801b1ee:	0a1b      	lsrs	r3, r3, #8
 801b1f0:	b2db      	uxtb	r3, r3
 801b1f2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b1f4:	697b      	ldr	r3, [r7, #20]
 801b1f6:	b2db      	uxtb	r3, r3
 801b1f8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	7b1b      	ldrb	r3, [r3, #12]
 801b1fe:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	7b5b      	ldrb	r3, [r3, #13]
 801b204:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	689b      	ldr	r3, [r3, #8]
 801b20a:	2200      	movs	r2, #0
 801b20c:	461c      	mov	r4, r3
 801b20e:	4615      	mov	r5, r2
 801b210:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b214:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b218:	4a41      	ldr	r2, [pc, #260]	; (801b320 <SUBGRF_SetModulationParams+0x1a0>)
 801b21a:	f04f 0300 	mov.w	r3, #0
 801b21e:	4640      	mov	r0, r8
 801b220:	4649      	mov	r1, r9
 801b222:	f7e5 fdb3 	bl	8000d8c <__aeabi_uldivmod>
 801b226:	4602      	mov	r2, r0
 801b228:	460b      	mov	r3, r1
 801b22a:	4613      	mov	r3, r2
 801b22c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b22e:	697b      	ldr	r3, [r7, #20]
 801b230:	0c1b      	lsrs	r3, r3, #16
 801b232:	b2db      	uxtb	r3, r3
 801b234:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b236:	697b      	ldr	r3, [r7, #20]
 801b238:	0a1b      	lsrs	r3, r3, #8
 801b23a:	b2db      	uxtb	r3, r3
 801b23c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b23e:	697b      	ldr	r3, [r7, #20]
 801b240:	b2db      	uxtb	r3, r3
 801b242:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b244:	7cfb      	ldrb	r3, [r7, #19]
 801b246:	b29a      	uxth	r2, r3
 801b248:	f107 0308 	add.w	r3, r7, #8
 801b24c:	4619      	mov	r1, r3
 801b24e:	208b      	movs	r0, #139	; 0x8b
 801b250:	f000 fa60 	bl	801b714 <SUBGRF_WriteCommand>
        break;
 801b254:	e058      	b.n	801b308 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b256:	2304      	movs	r3, #4
 801b258:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	691b      	ldr	r3, [r3, #16]
 801b25e:	4a2f      	ldr	r2, [pc, #188]	; (801b31c <SUBGRF_SetModulationParams+0x19c>)
 801b260:	fbb2 f3f3 	udiv	r3, r2, r3
 801b264:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b266:	697b      	ldr	r3, [r7, #20]
 801b268:	0c1b      	lsrs	r3, r3, #16
 801b26a:	b2db      	uxtb	r3, r3
 801b26c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b26e:	697b      	ldr	r3, [r7, #20]
 801b270:	0a1b      	lsrs	r3, r3, #8
 801b272:	b2db      	uxtb	r3, r3
 801b274:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b276:	697b      	ldr	r3, [r7, #20]
 801b278:	b2db      	uxtb	r3, r3
 801b27a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	7d1b      	ldrb	r3, [r3, #20]
 801b280:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b282:	7cfb      	ldrb	r3, [r7, #19]
 801b284:	b29a      	uxth	r2, r3
 801b286:	f107 0308 	add.w	r3, r7, #8
 801b28a:	4619      	mov	r1, r3
 801b28c:	208b      	movs	r0, #139	; 0x8b
 801b28e:	f000 fa41 	bl	801b714 <SUBGRF_WriteCommand>
        break;
 801b292:	e039      	b.n	801b308 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b294:	2304      	movs	r3, #4
 801b296:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	7e1b      	ldrb	r3, [r3, #24]
 801b29c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	7e5b      	ldrb	r3, [r3, #25]
 801b2a2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	7e9b      	ldrb	r3, [r3, #26]
 801b2a8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	7edb      	ldrb	r3, [r3, #27]
 801b2ae:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b2b0:	7cfb      	ldrb	r3, [r7, #19]
 801b2b2:	b29a      	uxth	r2, r3
 801b2b4:	f107 0308 	add.w	r3, r7, #8
 801b2b8:	4619      	mov	r1, r3
 801b2ba:	208b      	movs	r0, #139	; 0x8b
 801b2bc:	f000 fa2a 	bl	801b714 <SUBGRF_WriteCommand>

        break;
 801b2c0:	e022      	b.n	801b308 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b2c2:	2305      	movs	r3, #5
 801b2c4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	685b      	ldr	r3, [r3, #4]
 801b2ca:	4a14      	ldr	r2, [pc, #80]	; (801b31c <SUBGRF_SetModulationParams+0x19c>)
 801b2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801b2d0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b2d2:	697b      	ldr	r3, [r7, #20]
 801b2d4:	0c1b      	lsrs	r3, r3, #16
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b2da:	697b      	ldr	r3, [r7, #20]
 801b2dc:	0a1b      	lsrs	r3, r3, #8
 801b2de:	b2db      	uxtb	r3, r3
 801b2e0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b2e2:	697b      	ldr	r3, [r7, #20]
 801b2e4:	b2db      	uxtb	r3, r3
 801b2e6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	7b1b      	ldrb	r3, [r3, #12]
 801b2ec:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	7b5b      	ldrb	r3, [r3, #13]
 801b2f2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b2f4:	7cfb      	ldrb	r3, [r7, #19]
 801b2f6:	b29a      	uxth	r2, r3
 801b2f8:	f107 0308 	add.w	r3, r7, #8
 801b2fc:	4619      	mov	r1, r3
 801b2fe:	208b      	movs	r0, #139	; 0x8b
 801b300:	f000 fa08 	bl	801b714 <SUBGRF_WriteCommand>
        break;
 801b304:	e000      	b.n	801b308 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b306:	bf00      	nop
    }
}
 801b308:	bf00      	nop
 801b30a:	3718      	adds	r7, #24
 801b30c:	46bd      	mov	sp, r7
 801b30e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b312:	bf00      	nop
 801b314:	0801d9c0 	.word	0x0801d9c0
 801b318:	200021d5 	.word	0x200021d5
 801b31c:	3d090000 	.word	0x3d090000
 801b320:	01e84800 	.word	0x01e84800

0801b324 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b324:	b580      	push	{r7, lr}
 801b326:	b086      	sub	sp, #24
 801b328:	af00      	add	r7, sp, #0
 801b32a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b32c:	2300      	movs	r3, #0
 801b32e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b330:	4a48      	ldr	r2, [pc, #288]	; (801b454 <SUBGRF_SetPacketParams+0x130>)
 801b332:	f107 030c 	add.w	r3, r7, #12
 801b336:	ca07      	ldmia	r2, {r0, r1, r2}
 801b338:	c303      	stmia	r3!, {r0, r1}
 801b33a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	781a      	ldrb	r2, [r3, #0]
 801b340:	4b45      	ldr	r3, [pc, #276]	; (801b458 <SUBGRF_SetPacketParams+0x134>)
 801b342:	781b      	ldrb	r3, [r3, #0]
 801b344:	429a      	cmp	r2, r3
 801b346:	d004      	beq.n	801b352 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7ff fe23 	bl	801af98 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	781b      	ldrb	r3, [r3, #0]
 801b356:	2b03      	cmp	r3, #3
 801b358:	d878      	bhi.n	801b44c <SUBGRF_SetPacketParams+0x128>
 801b35a:	a201      	add	r2, pc, #4	; (adr r2, 801b360 <SUBGRF_SetPacketParams+0x3c>)
 801b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b360:	0801b371 	.word	0x0801b371
 801b364:	0801b401 	.word	0x0801b401
 801b368:	0801b3f5 	.word	0x0801b3f5
 801b36c:	0801b371 	.word	0x0801b371
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	7a5b      	ldrb	r3, [r3, #9]
 801b374:	2bf1      	cmp	r3, #241	; 0xf1
 801b376:	d10a      	bne.n	801b38e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b378:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b37c:	f7ff faae 	bl	801a8dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b380:	f248 0005 	movw	r0, #32773	; 0x8005
 801b384:	f7ff faca 	bl	801a91c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b388:	2302      	movs	r3, #2
 801b38a:	75bb      	strb	r3, [r7, #22]
 801b38c:	e011      	b.n	801b3b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	7a5b      	ldrb	r3, [r3, #9]
 801b392:	2bf2      	cmp	r3, #242	; 0xf2
 801b394:	d10a      	bne.n	801b3ac <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b396:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b39a:	f7ff fa9f 	bl	801a8dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b39e:	f241 0021 	movw	r0, #4129	; 0x1021
 801b3a2:	f7ff fabb 	bl	801a91c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b3a6:	2306      	movs	r3, #6
 801b3a8:	75bb      	strb	r3, [r7, #22]
 801b3aa:	e002      	b.n	801b3b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	7a5b      	ldrb	r3, [r3, #9]
 801b3b0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b3b2:	2309      	movs	r3, #9
 801b3b4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	885b      	ldrh	r3, [r3, #2]
 801b3ba:	0a1b      	lsrs	r3, r3, #8
 801b3bc:	b29b      	uxth	r3, r3
 801b3be:	b2db      	uxtb	r3, r3
 801b3c0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	885b      	ldrh	r3, [r3, #2]
 801b3c6:	b2db      	uxtb	r3, r3
 801b3c8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	791b      	ldrb	r3, [r3, #4]
 801b3ce:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	795b      	ldrb	r3, [r3, #5]
 801b3d4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	799b      	ldrb	r3, [r3, #6]
 801b3da:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	79db      	ldrb	r3, [r3, #7]
 801b3e0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	7a1b      	ldrb	r3, [r3, #8]
 801b3e6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b3e8:	7dbb      	ldrb	r3, [r7, #22]
 801b3ea:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	7a9b      	ldrb	r3, [r3, #10]
 801b3f0:	753b      	strb	r3, [r7, #20]
        break;
 801b3f2:	e022      	b.n	801b43a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b3f4:	2301      	movs	r3, #1
 801b3f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	7b1b      	ldrb	r3, [r3, #12]
 801b3fc:	733b      	strb	r3, [r7, #12]
        break;
 801b3fe:	e01c      	b.n	801b43a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b400:	2306      	movs	r3, #6
 801b402:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	89db      	ldrh	r3, [r3, #14]
 801b408:	0a1b      	lsrs	r3, r3, #8
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	b2db      	uxtb	r3, r3
 801b40e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	89db      	ldrh	r3, [r3, #14]
 801b414:	b2db      	uxtb	r3, r3
 801b416:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	7c1a      	ldrb	r2, [r3, #16]
 801b41c:	4b0f      	ldr	r3, [pc, #60]	; (801b45c <SUBGRF_SetPacketParams+0x138>)
 801b41e:	4611      	mov	r1, r2
 801b420:	7019      	strb	r1, [r3, #0]
 801b422:	4613      	mov	r3, r2
 801b424:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	7c5b      	ldrb	r3, [r3, #17]
 801b42a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	7c9b      	ldrb	r3, [r3, #18]
 801b430:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	7cdb      	ldrb	r3, [r3, #19]
 801b436:	747b      	strb	r3, [r7, #17]
        break;
 801b438:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b43a:	7dfb      	ldrb	r3, [r7, #23]
 801b43c:	b29a      	uxth	r2, r3
 801b43e:	f107 030c 	add.w	r3, r7, #12
 801b442:	4619      	mov	r1, r3
 801b444:	208c      	movs	r0, #140	; 0x8c
 801b446:	f000 f965 	bl	801b714 <SUBGRF_WriteCommand>
 801b44a:	e000      	b.n	801b44e <SUBGRF_SetPacketParams+0x12a>
        return;
 801b44c:	bf00      	nop
}
 801b44e:	3718      	adds	r7, #24
 801b450:	46bd      	mov	sp, r7
 801b452:	bd80      	pop	{r7, pc}
 801b454:	0801d9c8 	.word	0x0801d9c8
 801b458:	200021d5 	.word	0x200021d5
 801b45c:	200021d6 	.word	0x200021d6

0801b460 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b084      	sub	sp, #16
 801b464:	af00      	add	r7, sp, #0
 801b466:	4603      	mov	r3, r0
 801b468:	460a      	mov	r2, r1
 801b46a:	71fb      	strb	r3, [r7, #7]
 801b46c:	4613      	mov	r3, r2
 801b46e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b470:	79fb      	ldrb	r3, [r7, #7]
 801b472:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b474:	79bb      	ldrb	r3, [r7, #6]
 801b476:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b478:	f107 030c 	add.w	r3, r7, #12
 801b47c:	2202      	movs	r2, #2
 801b47e:	4619      	mov	r1, r3
 801b480:	208f      	movs	r0, #143	; 0x8f
 801b482:	f000 f947 	bl	801b714 <SUBGRF_WriteCommand>
}
 801b486:	bf00      	nop
 801b488:	3710      	adds	r7, #16
 801b48a:	46bd      	mov	sp, r7
 801b48c:	bd80      	pop	{r7, pc}

0801b48e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b48e:	b580      	push	{r7, lr}
 801b490:	b082      	sub	sp, #8
 801b492:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b494:	2300      	movs	r3, #0
 801b496:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b498:	1d3b      	adds	r3, r7, #4
 801b49a:	2201      	movs	r2, #1
 801b49c:	4619      	mov	r1, r3
 801b49e:	2015      	movs	r0, #21
 801b4a0:	f000 f95a 	bl	801b758 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b4a4:	793b      	ldrb	r3, [r7, #4]
 801b4a6:	425b      	negs	r3, r3
 801b4a8:	105b      	asrs	r3, r3, #1
 801b4aa:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b4ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	3708      	adds	r7, #8
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}

0801b4b8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b084      	sub	sp, #16
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
 801b4c0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b4c2:	f107 030c 	add.w	r3, r7, #12
 801b4c6:	2202      	movs	r2, #2
 801b4c8:	4619      	mov	r1, r3
 801b4ca:	2013      	movs	r0, #19
 801b4cc:	f000 f944 	bl	801b758 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b4d0:	f7ff fd7e 	bl	801afd0 <SUBGRF_GetPacketType>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	2b01      	cmp	r3, #1
 801b4d8:	d10d      	bne.n	801b4f6 <SUBGRF_GetRxBufferStatus+0x3e>
 801b4da:	4b0c      	ldr	r3, [pc, #48]	; (801b50c <SUBGRF_GetRxBufferStatus+0x54>)
 801b4dc:	781b      	ldrb	r3, [r3, #0]
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	2b01      	cmp	r3, #1
 801b4e2:	d108      	bne.n	801b4f6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b4e4:	f240 7002 	movw	r0, #1794	; 0x702
 801b4e8:	f000 f878 	bl	801b5dc <SUBGRF_ReadRegister>
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	461a      	mov	r2, r3
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	701a      	strb	r2, [r3, #0]
 801b4f4:	e002      	b.n	801b4fc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b4f6:	7b3a      	ldrb	r2, [r7, #12]
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b4fc:	7b7a      	ldrb	r2, [r7, #13]
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	701a      	strb	r2, [r3, #0]
}
 801b502:	bf00      	nop
 801b504:	3710      	adds	r7, #16
 801b506:	46bd      	mov	sp, r7
 801b508:	bd80      	pop	{r7, pc}
 801b50a:	bf00      	nop
 801b50c:	200021d6 	.word	0x200021d6

0801b510 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b510:	b580      	push	{r7, lr}
 801b512:	b084      	sub	sp, #16
 801b514:	af00      	add	r7, sp, #0
 801b516:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b518:	f107 030c 	add.w	r3, r7, #12
 801b51c:	2203      	movs	r2, #3
 801b51e:	4619      	mov	r1, r3
 801b520:	2014      	movs	r0, #20
 801b522:	f000 f919 	bl	801b758 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b526:	f7ff fd53 	bl	801afd0 <SUBGRF_GetPacketType>
 801b52a:	4603      	mov	r3, r0
 801b52c:	461a      	mov	r2, r3
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	781b      	ldrb	r3, [r3, #0]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d002      	beq.n	801b540 <SUBGRF_GetPacketStatus+0x30>
 801b53a:	2b01      	cmp	r3, #1
 801b53c:	d013      	beq.n	801b566 <SUBGRF_GetPacketStatus+0x56>
 801b53e:	e02a      	b.n	801b596 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b540:	7b3a      	ldrb	r2, [r7, #12]
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b546:	7b7b      	ldrb	r3, [r7, #13]
 801b548:	425b      	negs	r3, r3
 801b54a:	105b      	asrs	r3, r3, #1
 801b54c:	b25a      	sxtb	r2, r3
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b552:	7bbb      	ldrb	r3, [r7, #14]
 801b554:	425b      	negs	r3, r3
 801b556:	105b      	asrs	r3, r3, #1
 801b558:	b25a      	sxtb	r2, r3
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	2200      	movs	r2, #0
 801b562:	609a      	str	r2, [r3, #8]
            break;
 801b564:	e020      	b.n	801b5a8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b566:	7b3b      	ldrb	r3, [r7, #12]
 801b568:	425b      	negs	r3, r3
 801b56a:	105b      	asrs	r3, r3, #1
 801b56c:	b25a      	sxtb	r2, r3
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b572:	7b7b      	ldrb	r3, [r7, #13]
 801b574:	b25b      	sxtb	r3, r3
 801b576:	3302      	adds	r3, #2
 801b578:	109b      	asrs	r3, r3, #2
 801b57a:	b25a      	sxtb	r2, r3
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b580:	7bbb      	ldrb	r3, [r7, #14]
 801b582:	425b      	negs	r3, r3
 801b584:	105b      	asrs	r3, r3, #1
 801b586:	b25a      	sxtb	r2, r3
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b58c:	4b08      	ldr	r3, [pc, #32]	; (801b5b0 <SUBGRF_GetPacketStatus+0xa0>)
 801b58e:	681a      	ldr	r2, [r3, #0]
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	611a      	str	r2, [r3, #16]
            break;
 801b594:	e008      	b.n	801b5a8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b596:	2214      	movs	r2, #20
 801b598:	2100      	movs	r1, #0
 801b59a:	6878      	ldr	r0, [r7, #4]
 801b59c:	f000 fbf3 	bl	801bd86 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	220f      	movs	r2, #15
 801b5a4:	701a      	strb	r2, [r3, #0]
            break;
 801b5a6:	bf00      	nop
    }
}
 801b5a8:	bf00      	nop
 801b5aa:	3710      	adds	r7, #16
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}
 801b5b0:	200021d8 	.word	0x200021d8

0801b5b4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b082      	sub	sp, #8
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	460a      	mov	r2, r1
 801b5be:	80fb      	strh	r3, [r7, #6]
 801b5c0:	4613      	mov	r3, r2
 801b5c2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b5c4:	1d7a      	adds	r2, r7, #5
 801b5c6:	88f9      	ldrh	r1, [r7, #6]
 801b5c8:	2301      	movs	r3, #1
 801b5ca:	4803      	ldr	r0, [pc, #12]	; (801b5d8 <SUBGRF_WriteRegister+0x24>)
 801b5cc:	f7ed f90a 	bl	80087e4 <HAL_SUBGHZ_WriteRegisters>
}
 801b5d0:	bf00      	nop
 801b5d2:	3708      	adds	r7, #8
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bd80      	pop	{r7, pc}
 801b5d8:	20000700 	.word	0x20000700

0801b5dc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b084      	sub	sp, #16
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b5e6:	f107 020f 	add.w	r2, r7, #15
 801b5ea:	88f9      	ldrh	r1, [r7, #6]
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	4804      	ldr	r0, [pc, #16]	; (801b600 <SUBGRF_ReadRegister+0x24>)
 801b5f0:	f7ed f957 	bl	80088a2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3710      	adds	r7, #16
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	bf00      	nop
 801b600:	20000700 	.word	0x20000700

0801b604 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b604:	b580      	push	{r7, lr}
 801b606:	b086      	sub	sp, #24
 801b608:	af00      	add	r7, sp, #0
 801b60a:	4603      	mov	r3, r0
 801b60c:	6039      	str	r1, [r7, #0]
 801b60e:	80fb      	strh	r3, [r7, #6]
 801b610:	4613      	mov	r3, r2
 801b612:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b614:	f3ef 8310 	mrs	r3, PRIMASK
 801b618:	60fb      	str	r3, [r7, #12]
  return(result);
 801b61a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b61c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b61e:	b672      	cpsid	i
}
 801b620:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b622:	88bb      	ldrh	r3, [r7, #4]
 801b624:	88f9      	ldrh	r1, [r7, #6]
 801b626:	683a      	ldr	r2, [r7, #0]
 801b628:	4806      	ldr	r0, [pc, #24]	; (801b644 <SUBGRF_WriteRegisters+0x40>)
 801b62a:	f7ed f8db 	bl	80087e4 <HAL_SUBGHZ_WriteRegisters>
 801b62e:	697b      	ldr	r3, [r7, #20]
 801b630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b632:	693b      	ldr	r3, [r7, #16]
 801b634:	f383 8810 	msr	PRIMASK, r3
}
 801b638:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b63a:	bf00      	nop
 801b63c:	3718      	adds	r7, #24
 801b63e:	46bd      	mov	sp, r7
 801b640:	bd80      	pop	{r7, pc}
 801b642:	bf00      	nop
 801b644:	20000700 	.word	0x20000700

0801b648 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b086      	sub	sp, #24
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	4603      	mov	r3, r0
 801b650:	6039      	str	r1, [r7, #0]
 801b652:	80fb      	strh	r3, [r7, #6]
 801b654:	4613      	mov	r3, r2
 801b656:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b658:	f3ef 8310 	mrs	r3, PRIMASK
 801b65c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b65e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b660:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b662:	b672      	cpsid	i
}
 801b664:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b666:	88bb      	ldrh	r3, [r7, #4]
 801b668:	88f9      	ldrh	r1, [r7, #6]
 801b66a:	683a      	ldr	r2, [r7, #0]
 801b66c:	4806      	ldr	r0, [pc, #24]	; (801b688 <SUBGRF_ReadRegisters+0x40>)
 801b66e:	f7ed f918 	bl	80088a2 <HAL_SUBGHZ_ReadRegisters>
 801b672:	697b      	ldr	r3, [r7, #20]
 801b674:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b676:	693b      	ldr	r3, [r7, #16]
 801b678:	f383 8810 	msr	PRIMASK, r3
}
 801b67c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b67e:	bf00      	nop
 801b680:	3718      	adds	r7, #24
 801b682:	46bd      	mov	sp, r7
 801b684:	bd80      	pop	{r7, pc}
 801b686:	bf00      	nop
 801b688:	20000700 	.word	0x20000700

0801b68c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b086      	sub	sp, #24
 801b690:	af00      	add	r7, sp, #0
 801b692:	4603      	mov	r3, r0
 801b694:	6039      	str	r1, [r7, #0]
 801b696:	71fb      	strb	r3, [r7, #7]
 801b698:	4613      	mov	r3, r2
 801b69a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b69c:	f3ef 8310 	mrs	r3, PRIMASK
 801b6a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b6a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b6a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6a6:	b672      	cpsid	i
}
 801b6a8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b6aa:	79bb      	ldrb	r3, [r7, #6]
 801b6ac:	b29b      	uxth	r3, r3
 801b6ae:	79f9      	ldrb	r1, [r7, #7]
 801b6b0:	683a      	ldr	r2, [r7, #0]
 801b6b2:	4806      	ldr	r0, [pc, #24]	; (801b6cc <SUBGRF_WriteBuffer+0x40>)
 801b6b4:	f7ed fa09 	bl	8008aca <HAL_SUBGHZ_WriteBuffer>
 801b6b8:	697b      	ldr	r3, [r7, #20]
 801b6ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	f383 8810 	msr	PRIMASK, r3
}
 801b6c2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b6c4:	bf00      	nop
 801b6c6:	3718      	adds	r7, #24
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	bd80      	pop	{r7, pc}
 801b6cc:	20000700 	.word	0x20000700

0801b6d0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b6d0:	b580      	push	{r7, lr}
 801b6d2:	b086      	sub	sp, #24
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	4603      	mov	r3, r0
 801b6d8:	6039      	str	r1, [r7, #0]
 801b6da:	71fb      	strb	r3, [r7, #7]
 801b6dc:	4613      	mov	r3, r2
 801b6de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6e0:	f3ef 8310 	mrs	r3, PRIMASK
 801b6e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b6e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b6e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6ea:	b672      	cpsid	i
}
 801b6ec:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b6ee:	79bb      	ldrb	r3, [r7, #6]
 801b6f0:	b29b      	uxth	r3, r3
 801b6f2:	79f9      	ldrb	r1, [r7, #7]
 801b6f4:	683a      	ldr	r2, [r7, #0]
 801b6f6:	4806      	ldr	r0, [pc, #24]	; (801b710 <SUBGRF_ReadBuffer+0x40>)
 801b6f8:	f7ed fa3a 	bl	8008b70 <HAL_SUBGHZ_ReadBuffer>
 801b6fc:	697b      	ldr	r3, [r7, #20]
 801b6fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b700:	693b      	ldr	r3, [r7, #16]
 801b702:	f383 8810 	msr	PRIMASK, r3
}
 801b706:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b708:	bf00      	nop
 801b70a:	3718      	adds	r7, #24
 801b70c:	46bd      	mov	sp, r7
 801b70e:	bd80      	pop	{r7, pc}
 801b710:	20000700 	.word	0x20000700

0801b714 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b086      	sub	sp, #24
 801b718:	af00      	add	r7, sp, #0
 801b71a:	4603      	mov	r3, r0
 801b71c:	6039      	str	r1, [r7, #0]
 801b71e:	71fb      	strb	r3, [r7, #7]
 801b720:	4613      	mov	r3, r2
 801b722:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b724:	f3ef 8310 	mrs	r3, PRIMASK
 801b728:	60fb      	str	r3, [r7, #12]
  return(result);
 801b72a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b72c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b72e:	b672      	cpsid	i
}
 801b730:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b732:	88bb      	ldrh	r3, [r7, #4]
 801b734:	79f9      	ldrb	r1, [r7, #7]
 801b736:	683a      	ldr	r2, [r7, #0]
 801b738:	4806      	ldr	r0, [pc, #24]	; (801b754 <SUBGRF_WriteCommand+0x40>)
 801b73a:	f7ed f913 	bl	8008964 <HAL_SUBGHZ_ExecSetCmd>
 801b73e:	697b      	ldr	r3, [r7, #20]
 801b740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b742:	693b      	ldr	r3, [r7, #16]
 801b744:	f383 8810 	msr	PRIMASK, r3
}
 801b748:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b74a:	bf00      	nop
 801b74c:	3718      	adds	r7, #24
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}
 801b752:	bf00      	nop
 801b754:	20000700 	.word	0x20000700

0801b758 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b086      	sub	sp, #24
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	4603      	mov	r3, r0
 801b760:	6039      	str	r1, [r7, #0]
 801b762:	71fb      	strb	r3, [r7, #7]
 801b764:	4613      	mov	r3, r2
 801b766:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b768:	f3ef 8310 	mrs	r3, PRIMASK
 801b76c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b76e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b770:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b772:	b672      	cpsid	i
}
 801b774:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b776:	88bb      	ldrh	r3, [r7, #4]
 801b778:	79f9      	ldrb	r1, [r7, #7]
 801b77a:	683a      	ldr	r2, [r7, #0]
 801b77c:	4806      	ldr	r0, [pc, #24]	; (801b798 <SUBGRF_ReadCommand+0x40>)
 801b77e:	f7ed f950 	bl	8008a22 <HAL_SUBGHZ_ExecGetCmd>
 801b782:	697b      	ldr	r3, [r7, #20]
 801b784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b786:	693b      	ldr	r3, [r7, #16]
 801b788:	f383 8810 	msr	PRIMASK, r3
}
 801b78c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b78e:	bf00      	nop
 801b790:	3718      	adds	r7, #24
 801b792:	46bd      	mov	sp, r7
 801b794:	bd80      	pop	{r7, pc}
 801b796:	bf00      	nop
 801b798:	20000700 	.word	0x20000700

0801b79c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b084      	sub	sp, #16
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	460a      	mov	r2, r1
 801b7a6:	71fb      	strb	r3, [r7, #7]
 801b7a8:	4613      	mov	r3, r2
 801b7aa:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b7ac:	2301      	movs	r3, #1
 801b7ae:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b7b0:	79bb      	ldrb	r3, [r7, #6]
 801b7b2:	2b01      	cmp	r3, #1
 801b7b4:	d10d      	bne.n	801b7d2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b7b6:	79fb      	ldrb	r3, [r7, #7]
 801b7b8:	2b01      	cmp	r3, #1
 801b7ba:	d104      	bne.n	801b7c6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b7bc:	2302      	movs	r3, #2
 801b7be:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b7c0:	2004      	movs	r0, #4
 801b7c2:	f000 f8df 	bl	801b984 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b7c6:	79fb      	ldrb	r3, [r7, #7]
 801b7c8:	2b02      	cmp	r3, #2
 801b7ca:	d107      	bne.n	801b7dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b7cc:	2303      	movs	r3, #3
 801b7ce:	73fb      	strb	r3, [r7, #15]
 801b7d0:	e004      	b.n	801b7dc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b7d2:	79bb      	ldrb	r3, [r7, #6]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d101      	bne.n	801b7dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b7d8:	2301      	movs	r3, #1
 801b7da:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b7dc:	7bfb      	ldrb	r3, [r7, #15]
 801b7de:	4618      	mov	r0, r3
 801b7e0:	f7f0 fd83 	bl	800c2ea <RBI_ConfigRFSwitch>
}
 801b7e4:	bf00      	nop
 801b7e6:	3710      	adds	r7, #16
 801b7e8:	46bd      	mov	sp, r7
 801b7ea:	bd80      	pop	{r7, pc}

0801b7ec <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b084      	sub	sp, #16
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b7f6:	2301      	movs	r3, #1
 801b7f8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b7fa:	f7f0 fd84 	bl	800c306 <RBI_GetTxConfig>
 801b7fe:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b800:	68bb      	ldr	r3, [r7, #8]
 801b802:	2b02      	cmp	r3, #2
 801b804:	d016      	beq.n	801b834 <SUBGRF_SetRfTxPower+0x48>
 801b806:	68bb      	ldr	r3, [r7, #8]
 801b808:	2b02      	cmp	r3, #2
 801b80a:	dc16      	bgt.n	801b83a <SUBGRF_SetRfTxPower+0x4e>
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d003      	beq.n	801b81a <SUBGRF_SetRfTxPower+0x2e>
 801b812:	68bb      	ldr	r3, [r7, #8]
 801b814:	2b01      	cmp	r3, #1
 801b816:	d00a      	beq.n	801b82e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b818:	e00f      	b.n	801b83a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b81a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b81e:	2b0f      	cmp	r3, #15
 801b820:	dd02      	ble.n	801b828 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b822:	2302      	movs	r3, #2
 801b824:	73fb      	strb	r3, [r7, #15]
            break;
 801b826:	e009      	b.n	801b83c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b828:	2301      	movs	r3, #1
 801b82a:	73fb      	strb	r3, [r7, #15]
            break;
 801b82c:	e006      	b.n	801b83c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b82e:	2301      	movs	r3, #1
 801b830:	73fb      	strb	r3, [r7, #15]
            break;
 801b832:	e003      	b.n	801b83c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b834:	2302      	movs	r3, #2
 801b836:	73fb      	strb	r3, [r7, #15]
            break;
 801b838:	e000      	b.n	801b83c <SUBGRF_SetRfTxPower+0x50>
            break;
 801b83a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b83c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b840:	7bfb      	ldrb	r3, [r7, #15]
 801b842:	2202      	movs	r2, #2
 801b844:	4618      	mov	r0, r3
 801b846:	f7ff fbcd 	bl	801afe4 <SUBGRF_SetTxParams>

    return paSelect;
 801b84a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b84c:	4618      	mov	r0, r3
 801b84e:	3710      	adds	r7, #16
 801b850:	46bd      	mov	sp, r7
 801b852:	bd80      	pop	{r7, pc}

0801b854 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b854:	b480      	push	{r7}
 801b856:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b858:	2301      	movs	r3, #1
}
 801b85a:	4618      	mov	r0, r3
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bc80      	pop	{r7}
 801b860:	4770      	bx	lr
	...

0801b864 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b082      	sub	sp, #8
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b86c:	4b03      	ldr	r3, [pc, #12]	; (801b87c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	2001      	movs	r0, #1
 801b872:	4798      	blx	r3
}
 801b874:	bf00      	nop
 801b876:	3708      	adds	r7, #8
 801b878:	46bd      	mov	sp, r7
 801b87a:	bd80      	pop	{r7, pc}
 801b87c:	200021e0 	.word	0x200021e0

0801b880 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b880:	b580      	push	{r7, lr}
 801b882:	b082      	sub	sp, #8
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b888:	4b03      	ldr	r3, [pc, #12]	; (801b898 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	2002      	movs	r0, #2
 801b88e:	4798      	blx	r3
}
 801b890:	bf00      	nop
 801b892:	3708      	adds	r7, #8
 801b894:	46bd      	mov	sp, r7
 801b896:	bd80      	pop	{r7, pc}
 801b898:	200021e0 	.word	0x200021e0

0801b89c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b89c:	b580      	push	{r7, lr}
 801b89e:	b082      	sub	sp, #8
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b8a4:	4b03      	ldr	r3, [pc, #12]	; (801b8b4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	2040      	movs	r0, #64	; 0x40
 801b8aa:	4798      	blx	r3
}
 801b8ac:	bf00      	nop
 801b8ae:	3708      	adds	r7, #8
 801b8b0:	46bd      	mov	sp, r7
 801b8b2:	bd80      	pop	{r7, pc}
 801b8b4:	200021e0 	.word	0x200021e0

0801b8b8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b082      	sub	sp, #8
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	6078      	str	r0, [r7, #4]
 801b8c0:	460b      	mov	r3, r1
 801b8c2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b8c4:	78fb      	ldrb	r3, [r7, #3]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d002      	beq.n	801b8d0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b8ca:	2b01      	cmp	r3, #1
 801b8cc:	d005      	beq.n	801b8da <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b8ce:	e00a      	b.n	801b8e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b8d0:	4b07      	ldr	r3, [pc, #28]	; (801b8f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	2080      	movs	r0, #128	; 0x80
 801b8d6:	4798      	blx	r3
            break;
 801b8d8:	e005      	b.n	801b8e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b8da:	4b05      	ldr	r3, [pc, #20]	; (801b8f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b8e2:	4798      	blx	r3
            break;
 801b8e4:	bf00      	nop
    }
}
 801b8e6:	bf00      	nop
 801b8e8:	3708      	adds	r7, #8
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	bd80      	pop	{r7, pc}
 801b8ee:	bf00      	nop
 801b8f0:	200021e0 	.word	0x200021e0

0801b8f4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b082      	sub	sp, #8
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b8fc:	4b04      	ldr	r3, [pc, #16]	; (801b910 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b904:	4798      	blx	r3
}
 801b906:	bf00      	nop
 801b908:	3708      	adds	r7, #8
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}
 801b90e:	bf00      	nop
 801b910:	200021e0 	.word	0x200021e0

0801b914 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b082      	sub	sp, #8
 801b918:	af00      	add	r7, sp, #0
 801b91a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b91c:	4b03      	ldr	r3, [pc, #12]	; (801b92c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	2020      	movs	r0, #32
 801b922:	4798      	blx	r3
}
 801b924:	bf00      	nop
 801b926:	3708      	adds	r7, #8
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}
 801b92c:	200021e0 	.word	0x200021e0

0801b930 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b930:	b580      	push	{r7, lr}
 801b932:	b082      	sub	sp, #8
 801b934:	af00      	add	r7, sp, #0
 801b936:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b938:	4b03      	ldr	r3, [pc, #12]	; (801b948 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	2004      	movs	r0, #4
 801b93e:	4798      	blx	r3
}
 801b940:	bf00      	nop
 801b942:	3708      	adds	r7, #8
 801b944:	46bd      	mov	sp, r7
 801b946:	bd80      	pop	{r7, pc}
 801b948:	200021e0 	.word	0x200021e0

0801b94c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b94c:	b580      	push	{r7, lr}
 801b94e:	b082      	sub	sp, #8
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b954:	4b03      	ldr	r3, [pc, #12]	; (801b964 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	2008      	movs	r0, #8
 801b95a:	4798      	blx	r3
}
 801b95c:	bf00      	nop
 801b95e:	3708      	adds	r7, #8
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}
 801b964:	200021e0 	.word	0x200021e0

0801b968 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b082      	sub	sp, #8
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b970:	4b03      	ldr	r3, [pc, #12]	; (801b980 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	2010      	movs	r0, #16
 801b976:	4798      	blx	r3
}
 801b978:	bf00      	nop
 801b97a:	3708      	adds	r7, #8
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd80      	pop	{r7, pc}
 801b980:	200021e0 	.word	0x200021e0

0801b984 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b984:	b580      	push	{r7, lr}
 801b986:	b084      	sub	sp, #16
 801b988:	af00      	add	r7, sp, #0
 801b98a:	4603      	mov	r3, r0
 801b98c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b98e:	f7f0 fcc8 	bl	800c322 <RBI_IsDCDC>
 801b992:	4603      	mov	r3, r0
 801b994:	2b01      	cmp	r3, #1
 801b996:	d112      	bne.n	801b9be <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b998:	f640 1023 	movw	r0, #2339	; 0x923
 801b99c:	f7ff fe1e 	bl	801b5dc <SUBGRF_ReadRegister>
 801b9a0:	4603      	mov	r3, r0
 801b9a2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b9a4:	7bfb      	ldrb	r3, [r7, #15]
 801b9a6:	f023 0306 	bic.w	r3, r3, #6
 801b9aa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b9ac:	7bfa      	ldrb	r2, [r7, #15]
 801b9ae:	79fb      	ldrb	r3, [r7, #7]
 801b9b0:	4313      	orrs	r3, r2
 801b9b2:	b2db      	uxtb	r3, r3
 801b9b4:	4619      	mov	r1, r3
 801b9b6:	f640 1023 	movw	r0, #2339	; 0x923
 801b9ba:	f7ff fdfb 	bl	801b5b4 <SUBGRF_WriteRegister>
  }
}
 801b9be:	bf00      	nop
 801b9c0:	3710      	adds	r7, #16
 801b9c2:	46bd      	mov	sp, r7
 801b9c4:	bd80      	pop	{r7, pc}
	...

0801b9c8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b9c8:	b480      	push	{r7}
 801b9ca:	b085      	sub	sp, #20
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d101      	bne.n	801b9da <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b9d6:	231f      	movs	r3, #31
 801b9d8:	e016      	b.n	801ba08 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b9da:	2300      	movs	r3, #0
 801b9dc:	73fb      	strb	r3, [r7, #15]
 801b9de:	e00f      	b.n	801ba00 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b9e0:	7bfb      	ldrb	r3, [r7, #15]
 801b9e2:	4a0c      	ldr	r2, [pc, #48]	; (801ba14 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b9e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b9e8:	687a      	ldr	r2, [r7, #4]
 801b9ea:	429a      	cmp	r2, r3
 801b9ec:	d205      	bcs.n	801b9fa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b9ee:	7bfb      	ldrb	r3, [r7, #15]
 801b9f0:	4a08      	ldr	r2, [pc, #32]	; (801ba14 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b9f2:	00db      	lsls	r3, r3, #3
 801b9f4:	4413      	add	r3, r2
 801b9f6:	791b      	ldrb	r3, [r3, #4]
 801b9f8:	e006      	b.n	801ba08 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b9fa:	7bfb      	ldrb	r3, [r7, #15]
 801b9fc:	3301      	adds	r3, #1
 801b9fe:	73fb      	strb	r3, [r7, #15]
 801ba00:	7bfb      	ldrb	r3, [r7, #15]
 801ba02:	2b15      	cmp	r3, #21
 801ba04:	d9ec      	bls.n	801b9e0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801ba06:	e7fe      	b.n	801ba06 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801ba08:	4618      	mov	r0, r3
 801ba0a:	3714      	adds	r7, #20
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bc80      	pop	{r7}
 801ba10:	4770      	bx	lr
 801ba12:	bf00      	nop
 801ba14:	0801df2c 	.word	0x0801df2c

0801ba18 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b08a      	sub	sp, #40	; 0x28
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
 801ba20:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801ba22:	4b35      	ldr	r3, [pc, #212]	; (801baf8 <SUBGRF_GetCFO+0xe0>)
 801ba24:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801ba26:	f640 0007 	movw	r0, #2055	; 0x807
 801ba2a:	f7ff fdd7 	bl	801b5dc <SUBGRF_ReadRegister>
 801ba2e:	4603      	mov	r3, r0
 801ba30:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801ba32:	7ffb      	ldrb	r3, [r7, #31]
 801ba34:	08db      	lsrs	r3, r3, #3
 801ba36:	b2db      	uxtb	r3, r3
 801ba38:	f003 0303 	and.w	r3, r3, #3
 801ba3c:	3328      	adds	r3, #40	; 0x28
 801ba3e:	443b      	add	r3, r7
 801ba40:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801ba44:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801ba46:	7ffb      	ldrb	r3, [r7, #31]
 801ba48:	f003 0307 	and.w	r3, r3, #7
 801ba4c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801ba4e:	7fba      	ldrb	r2, [r7, #30]
 801ba50:	7f7b      	ldrb	r3, [r7, #29]
 801ba52:	3b01      	subs	r3, #1
 801ba54:	fa02 f303 	lsl.w	r3, r2, r3
 801ba58:	461a      	mov	r2, r3
 801ba5a:	4b28      	ldr	r3, [pc, #160]	; (801bafc <SUBGRF_GetCFO+0xe4>)
 801ba5c:	fbb3 f3f2 	udiv	r3, r3, r2
 801ba60:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801ba62:	69ba      	ldr	r2, [r7, #24]
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba6a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801ba6c:	2301      	movs	r3, #1
 801ba6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801ba72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba76:	697a      	ldr	r2, [r7, #20]
 801ba78:	fb02 f303 	mul.w	r3, r2, r3
 801ba7c:	2b07      	cmp	r3, #7
 801ba7e:	d802      	bhi.n	801ba86 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801ba80:	2302      	movs	r3, #2
 801ba82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801ba86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba8a:	697a      	ldr	r2, [r7, #20]
 801ba8c:	fb02 f303 	mul.w	r3, r2, r3
 801ba90:	2b03      	cmp	r3, #3
 801ba92:	d802      	bhi.n	801ba9a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ba94:	2304      	movs	r3, #4
 801ba96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ba9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ba9e:	69bb      	ldr	r3, [r7, #24]
 801baa0:	fb02 f303 	mul.w	r3, r2, r3
 801baa4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801baa6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801baaa:	f7ff fd97 	bl	801b5dc <SUBGRF_ReadRegister>
 801baae:	4603      	mov	r3, r0
 801bab0:	021b      	lsls	r3, r3, #8
 801bab2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801bab6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801bab8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801babc:	f7ff fd8e 	bl	801b5dc <SUBGRF_ReadRegister>
 801bac0:	4603      	mov	r3, r0
 801bac2:	461a      	mov	r2, r3
 801bac4:	6a3b      	ldr	r3, [r7, #32]
 801bac6:	4313      	orrs	r3, r2
 801bac8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801baca:	6a3b      	ldr	r3, [r7, #32]
 801bacc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d005      	beq.n	801bae0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801bad4:	6a3b      	ldr	r3, [r7, #32]
 801bad6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801bada:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801bade:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801bae0:	693b      	ldr	r3, [r7, #16]
 801bae2:	095b      	lsrs	r3, r3, #5
 801bae4:	6a3a      	ldr	r2, [r7, #32]
 801bae6:	fb02 f303 	mul.w	r3, r2, r3
 801baea:	11da      	asrs	r2, r3, #7
 801baec:	683b      	ldr	r3, [r7, #0]
 801baee:	601a      	str	r2, [r3, #0]
}
 801baf0:	bf00      	nop
 801baf2:	3728      	adds	r7, #40	; 0x28
 801baf4:	46bd      	mov	sp, r7
 801baf6:	bd80      	pop	{r7, pc}
 801baf8:	0c0a0804 	.word	0x0c0a0804
 801bafc:	01e84800 	.word	0x01e84800

0801bb00 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801bb00:	b480      	push	{r7}
 801bb02:	b087      	sub	sp, #28
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	4603      	mov	r3, r0
 801bb08:	60b9      	str	r1, [r7, #8]
 801bb0a:	607a      	str	r2, [r7, #4]
 801bb0c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801bb0e:	2300      	movs	r3, #0
 801bb10:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801bb12:	f04f 33ff 	mov.w	r3, #4294967295
 801bb16:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801bb18:	697b      	ldr	r3, [r7, #20]
}
 801bb1a:	4618      	mov	r0, r3
 801bb1c:	371c      	adds	r7, #28
 801bb1e:	46bd      	mov	sp, r7
 801bb20:	bc80      	pop	{r7}
 801bb22:	4770      	bx	lr

0801bb24 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801bb24:	b480      	push	{r7}
 801bb26:	b087      	sub	sp, #28
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	60b9      	str	r1, [r7, #8]
 801bb2e:	607a      	str	r2, [r7, #4]
 801bb30:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801bb32:	2300      	movs	r3, #0
 801bb34:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801bb36:	f04f 33ff 	mov.w	r3, #4294967295
 801bb3a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801bb3c:	697b      	ldr	r3, [r7, #20]
}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	371c      	adds	r7, #28
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bc80      	pop	{r7}
 801bb46:	4770      	bx	lr

0801bb48 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801bb48:	b480      	push	{r7}
 801bb4a:	b085      	sub	sp, #20
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	60f8      	str	r0, [r7, #12]
 801bb50:	60b9      	str	r1, [r7, #8]
 801bb52:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801bb54:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801bb58:	4618      	mov	r0, r3
 801bb5a:	3714      	adds	r7, #20
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bc80      	pop	{r7}
 801bb60:	4770      	bx	lr

0801bb62 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801bb62:	b480      	push	{r7}
 801bb64:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801bb66:	bf00      	nop
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	bc80      	pop	{r7}
 801bb6c:	4770      	bx	lr

0801bb6e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801bb6e:	b480      	push	{r7}
 801bb70:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801bb72:	2300      	movs	r3, #0
#endif
}
 801bb74:	4618      	mov	r0, r3
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bc80      	pop	{r7}
 801bb7a:	4770      	bx	lr

0801bb7c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801bb7c:	b480      	push	{r7}
 801bb7e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801bb80:	2300      	movs	r3, #0
#endif
}
 801bb82:	4618      	mov	r0, r3
 801bb84:	46bd      	mov	sp, r7
 801bb86:	bc80      	pop	{r7}
 801bb88:	4770      	bx	lr

0801bb8a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801bb8a:	b480      	push	{r7}
 801bb8c:	b083      	sub	sp, #12
 801bb8e:	af00      	add	r7, sp, #0
 801bb90:	4603      	mov	r3, r0
 801bb92:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801bb94:	bf00      	nop
 801bb96:	370c      	adds	r7, #12
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	bc80      	pop	{r7}
 801bb9c:	4770      	bx	lr

0801bb9e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801bb9e:	b480      	push	{r7}
 801bba0:	b087      	sub	sp, #28
 801bba2:	af00      	add	r7, sp, #0
 801bba4:	60f8      	str	r0, [r7, #12]
 801bba6:	460b      	mov	r3, r1
 801bba8:	607a      	str	r2, [r7, #4]
 801bbaa:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801bbac:	f04f 33ff 	mov.w	r3, #4294967295
 801bbb0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801bbb2:	697b      	ldr	r3, [r7, #20]
}
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	371c      	adds	r7, #28
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bc80      	pop	{r7}
 801bbbc:	4770      	bx	lr

0801bbbe <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801bbbe:	b480      	push	{r7}
 801bbc0:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801bbc2:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801bbc6:	4618      	mov	r0, r3
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	bc80      	pop	{r7}
 801bbcc:	4770      	bx	lr

0801bbce <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801bbce:	b480      	push	{r7}
 801bbd0:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801bbd2:	bf00      	nop
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bc80      	pop	{r7}
 801bbd8:	4770      	bx	lr

0801bbda <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801bbda:	b480      	push	{r7}
 801bbdc:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801bbde:	bf00      	nop
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	bc80      	pop	{r7}
 801bbe4:	4770      	bx	lr

0801bbe6 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801bbe6:	b480      	push	{r7}
 801bbe8:	b083      	sub	sp, #12
 801bbea:	af00      	add	r7, sp, #0
 801bbec:	4603      	mov	r3, r0
 801bbee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801bbf0:	bf00      	nop
 801bbf2:	370c      	adds	r7, #12
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bc80      	pop	{r7}
 801bbf8:	4770      	bx	lr
	...

0801bbfc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801bbfc:	b480      	push	{r7}
 801bbfe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801bc00:	4b04      	ldr	r3, [pc, #16]	; (801bc14 <UTIL_LPM_Init+0x18>)
 801bc02:	2200      	movs	r2, #0
 801bc04:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801bc06:	4b04      	ldr	r3, [pc, #16]	; (801bc18 <UTIL_LPM_Init+0x1c>)
 801bc08:	2200      	movs	r2, #0
 801bc0a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801bc0c:	bf00      	nop
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	bc80      	pop	{r7}
 801bc12:	4770      	bx	lr
 801bc14:	200021e4 	.word	0x200021e4
 801bc18:	200021e8 	.word	0x200021e8

0801bc1c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bc1c:	b480      	push	{r7}
 801bc1e:	b087      	sub	sp, #28
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
 801bc24:	460b      	mov	r3, r1
 801bc26:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc28:	f3ef 8310 	mrs	r3, PRIMASK
 801bc2c:	613b      	str	r3, [r7, #16]
  return(result);
 801bc2e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bc30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc32:	b672      	cpsid	i
}
 801bc34:	bf00      	nop
  
  switch( state )
 801bc36:	78fb      	ldrb	r3, [r7, #3]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d008      	beq.n	801bc4e <UTIL_LPM_SetStopMode+0x32>
 801bc3c:	2b01      	cmp	r3, #1
 801bc3e:	d10e      	bne.n	801bc5e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801bc40:	4b0d      	ldr	r3, [pc, #52]	; (801bc78 <UTIL_LPM_SetStopMode+0x5c>)
 801bc42:	681a      	ldr	r2, [r3, #0]
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	4313      	orrs	r3, r2
 801bc48:	4a0b      	ldr	r2, [pc, #44]	; (801bc78 <UTIL_LPM_SetStopMode+0x5c>)
 801bc4a:	6013      	str	r3, [r2, #0]
      break;
 801bc4c:	e008      	b.n	801bc60 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	43da      	mvns	r2, r3
 801bc52:	4b09      	ldr	r3, [pc, #36]	; (801bc78 <UTIL_LPM_SetStopMode+0x5c>)
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	4013      	ands	r3, r2
 801bc58:	4a07      	ldr	r2, [pc, #28]	; (801bc78 <UTIL_LPM_SetStopMode+0x5c>)
 801bc5a:	6013      	str	r3, [r2, #0]
      break;
 801bc5c:	e000      	b.n	801bc60 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801bc5e:	bf00      	nop
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	f383 8810 	msr	PRIMASK, r3
}
 801bc6a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bc6c:	bf00      	nop
 801bc6e:	371c      	adds	r7, #28
 801bc70:	46bd      	mov	sp, r7
 801bc72:	bc80      	pop	{r7}
 801bc74:	4770      	bx	lr
 801bc76:	bf00      	nop
 801bc78:	200021e4 	.word	0x200021e4

0801bc7c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bc7c:	b480      	push	{r7}
 801bc7e:	b087      	sub	sp, #28
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
 801bc84:	460b      	mov	r3, r1
 801bc86:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc88:	f3ef 8310 	mrs	r3, PRIMASK
 801bc8c:	613b      	str	r3, [r7, #16]
  return(result);
 801bc8e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801bc90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc92:	b672      	cpsid	i
}
 801bc94:	bf00      	nop
  
  switch(state)
 801bc96:	78fb      	ldrb	r3, [r7, #3]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d008      	beq.n	801bcae <UTIL_LPM_SetOffMode+0x32>
 801bc9c:	2b01      	cmp	r3, #1
 801bc9e:	d10e      	bne.n	801bcbe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801bca0:	4b0d      	ldr	r3, [pc, #52]	; (801bcd8 <UTIL_LPM_SetOffMode+0x5c>)
 801bca2:	681a      	ldr	r2, [r3, #0]
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	4313      	orrs	r3, r2
 801bca8:	4a0b      	ldr	r2, [pc, #44]	; (801bcd8 <UTIL_LPM_SetOffMode+0x5c>)
 801bcaa:	6013      	str	r3, [r2, #0]
      break;
 801bcac:	e008      	b.n	801bcc0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	43da      	mvns	r2, r3
 801bcb2:	4b09      	ldr	r3, [pc, #36]	; (801bcd8 <UTIL_LPM_SetOffMode+0x5c>)
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	4013      	ands	r3, r2
 801bcb8:	4a07      	ldr	r2, [pc, #28]	; (801bcd8 <UTIL_LPM_SetOffMode+0x5c>)
 801bcba:	6013      	str	r3, [r2, #0]
      break;
 801bcbc:	e000      	b.n	801bcc0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801bcbe:	bf00      	nop
 801bcc0:	697b      	ldr	r3, [r7, #20]
 801bcc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	f383 8810 	msr	PRIMASK, r3
}
 801bcca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bccc:	bf00      	nop
 801bcce:	371c      	adds	r7, #28
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	bc80      	pop	{r7}
 801bcd4:	4770      	bx	lr
 801bcd6:	bf00      	nop
 801bcd8:	200021e8 	.word	0x200021e8

0801bcdc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801bcdc:	b580      	push	{r7, lr}
 801bcde:	b084      	sub	sp, #16
 801bce0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bce2:	f3ef 8310 	mrs	r3, PRIMASK
 801bce6:	60bb      	str	r3, [r7, #8]
  return(result);
 801bce8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801bcea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcec:	b672      	cpsid	i
}
 801bcee:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801bcf0:	4b12      	ldr	r3, [pc, #72]	; (801bd3c <UTIL_LPM_EnterLowPower+0x60>)
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d006      	beq.n	801bd06 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801bcf8:	4b11      	ldr	r3, [pc, #68]	; (801bd40 <UTIL_LPM_EnterLowPower+0x64>)
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801bcfe:	4b10      	ldr	r3, [pc, #64]	; (801bd40 <UTIL_LPM_EnterLowPower+0x64>)
 801bd00:	685b      	ldr	r3, [r3, #4]
 801bd02:	4798      	blx	r3
 801bd04:	e010      	b.n	801bd28 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801bd06:	4b0f      	ldr	r3, [pc, #60]	; (801bd44 <UTIL_LPM_EnterLowPower+0x68>)
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d006      	beq.n	801bd1c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801bd0e:	4b0c      	ldr	r3, [pc, #48]	; (801bd40 <UTIL_LPM_EnterLowPower+0x64>)
 801bd10:	689b      	ldr	r3, [r3, #8]
 801bd12:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801bd14:	4b0a      	ldr	r3, [pc, #40]	; (801bd40 <UTIL_LPM_EnterLowPower+0x64>)
 801bd16:	68db      	ldr	r3, [r3, #12]
 801bd18:	4798      	blx	r3
 801bd1a:	e005      	b.n	801bd28 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801bd1c:	4b08      	ldr	r3, [pc, #32]	; (801bd40 <UTIL_LPM_EnterLowPower+0x64>)
 801bd1e:	691b      	ldr	r3, [r3, #16]
 801bd20:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801bd22:	4b07      	ldr	r3, [pc, #28]	; (801bd40 <UTIL_LPM_EnterLowPower+0x64>)
 801bd24:	695b      	ldr	r3, [r3, #20]
 801bd26:	4798      	blx	r3
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	f383 8810 	msr	PRIMASK, r3
}
 801bd32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801bd34:	bf00      	nop
 801bd36:	3710      	adds	r7, #16
 801bd38:	46bd      	mov	sp, r7
 801bd3a:	bd80      	pop	{r7, pc}
 801bd3c:	200021e4 	.word	0x200021e4
 801bd40:	0801da2c 	.word	0x0801da2c
 801bd44:	200021e8 	.word	0x200021e8

0801bd48 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801bd48:	b480      	push	{r7}
 801bd4a:	b087      	sub	sp, #28
 801bd4c:	af00      	add	r7, sp, #0
 801bd4e:	60f8      	str	r0, [r7, #12]
 801bd50:	60b9      	str	r1, [r7, #8]
 801bd52:	4613      	mov	r3, r2
 801bd54:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801bd5a:	68bb      	ldr	r3, [r7, #8]
 801bd5c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801bd5e:	e007      	b.n	801bd70 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801bd60:	693a      	ldr	r2, [r7, #16]
 801bd62:	1c53      	adds	r3, r2, #1
 801bd64:	613b      	str	r3, [r7, #16]
 801bd66:	697b      	ldr	r3, [r7, #20]
 801bd68:	1c59      	adds	r1, r3, #1
 801bd6a:	6179      	str	r1, [r7, #20]
 801bd6c:	7812      	ldrb	r2, [r2, #0]
 801bd6e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bd70:	88fb      	ldrh	r3, [r7, #6]
 801bd72:	1e5a      	subs	r2, r3, #1
 801bd74:	80fa      	strh	r2, [r7, #6]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d1f2      	bne.n	801bd60 <UTIL_MEM_cpy_8+0x18>
    }
}
 801bd7a:	bf00      	nop
 801bd7c:	bf00      	nop
 801bd7e:	371c      	adds	r7, #28
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bc80      	pop	{r7}
 801bd84:	4770      	bx	lr

0801bd86 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bd86:	b480      	push	{r7}
 801bd88:	b085      	sub	sp, #20
 801bd8a:	af00      	add	r7, sp, #0
 801bd8c:	6078      	str	r0, [r7, #4]
 801bd8e:	460b      	mov	r3, r1
 801bd90:	70fb      	strb	r3, [r7, #3]
 801bd92:	4613      	mov	r3, r2
 801bd94:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bd9a:	e004      	b.n	801bda6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	1c5a      	adds	r2, r3, #1
 801bda0:	60fa      	str	r2, [r7, #12]
 801bda2:	78fa      	ldrb	r2, [r7, #3]
 801bda4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bda6:	883b      	ldrh	r3, [r7, #0]
 801bda8:	1e5a      	subs	r2, r3, #1
 801bdaa:	803a      	strh	r2, [r7, #0]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d1f5      	bne.n	801bd9c <UTIL_MEM_set_8+0x16>
  }
}
 801bdb0:	bf00      	nop
 801bdb2:	bf00      	nop
 801bdb4:	3714      	adds	r7, #20
 801bdb6:	46bd      	mov	sp, r7
 801bdb8:	bc80      	pop	{r7}
 801bdba:	4770      	bx	lr

0801bdbc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bdbc:	b082      	sub	sp, #8
 801bdbe:	b480      	push	{r7}
 801bdc0:	b087      	sub	sp, #28
 801bdc2:	af00      	add	r7, sp, #0
 801bdc4:	60f8      	str	r0, [r7, #12]
 801bdc6:	1d38      	adds	r0, r7, #4
 801bdc8:	e880 0006 	stmia.w	r0, {r1, r2}
 801bdcc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bdce:	2300      	movs	r3, #0
 801bdd0:	613b      	str	r3, [r7, #16]
 801bdd2:	2300      	movs	r3, #0
 801bdd4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801bdd6:	687a      	ldr	r2, [r7, #4]
 801bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdda:	4413      	add	r3, r2
 801bddc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bdde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bde2:	b29a      	uxth	r2, r3
 801bde4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801bde8:	b29b      	uxth	r3, r3
 801bdea:	4413      	add	r3, r2
 801bdec:	b29b      	uxth	r3, r3
 801bdee:	b21b      	sxth	r3, r3
 801bdf0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801bdf2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bdf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801bdfa:	db0a      	blt.n	801be12 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801bdfc:	693b      	ldr	r3, [r7, #16]
 801bdfe:	3301      	adds	r3, #1
 801be00:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801be02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801be06:	b29b      	uxth	r3, r3
 801be08:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801be0c:	b29b      	uxth	r3, r3
 801be0e:	b21b      	sxth	r3, r3
 801be10:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	461a      	mov	r2, r3
 801be16:	f107 0310 	add.w	r3, r7, #16
 801be1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be1e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801be22:	68f8      	ldr	r0, [r7, #12]
 801be24:	371c      	adds	r7, #28
 801be26:	46bd      	mov	sp, r7
 801be28:	bc80      	pop	{r7}
 801be2a:	b002      	add	sp, #8
 801be2c:	4770      	bx	lr

0801be2e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801be2e:	b082      	sub	sp, #8
 801be30:	b480      	push	{r7}
 801be32:	b087      	sub	sp, #28
 801be34:	af00      	add	r7, sp, #0
 801be36:	60f8      	str	r0, [r7, #12]
 801be38:	1d38      	adds	r0, r7, #4
 801be3a:	e880 0006 	stmia.w	r0, {r1, r2}
 801be3e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801be40:	2300      	movs	r3, #0
 801be42:	613b      	str	r3, [r7, #16]
 801be44:	2300      	movs	r3, #0
 801be46:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801be48:	687a      	ldr	r2, [r7, #4]
 801be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be4c:	1ad3      	subs	r3, r2, r3
 801be4e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801be50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801be54:	b29a      	uxth	r2, r3
 801be56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801be5a:	b29b      	uxth	r3, r3
 801be5c:	1ad3      	subs	r3, r2, r3
 801be5e:	b29b      	uxth	r3, r3
 801be60:	b21b      	sxth	r3, r3
 801be62:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801be64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	da0a      	bge.n	801be82 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801be6c:	693b      	ldr	r3, [r7, #16]
 801be6e:	3b01      	subs	r3, #1
 801be70:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801be72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801be76:	b29b      	uxth	r3, r3
 801be78:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801be7c:	b29b      	uxth	r3, r3
 801be7e:	b21b      	sxth	r3, r3
 801be80:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	461a      	mov	r2, r3
 801be86:	f107 0310 	add.w	r3, r7, #16
 801be8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be8e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801be92:	68f8      	ldr	r0, [r7, #12]
 801be94:	371c      	adds	r7, #28
 801be96:	46bd      	mov	sp, r7
 801be98:	bc80      	pop	{r7}
 801be9a:	b002      	add	sp, #8
 801be9c:	4770      	bx	lr
	...

0801bea0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bea0:	b580      	push	{r7, lr}
 801bea2:	b088      	sub	sp, #32
 801bea4:	af02      	add	r7, sp, #8
 801bea6:	463b      	mov	r3, r7
 801bea8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801beac:	2300      	movs	r3, #0
 801beae:	60bb      	str	r3, [r7, #8]
 801beb0:	2300      	movs	r3, #0
 801beb2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801beb4:	4b10      	ldr	r3, [pc, #64]	; (801bef8 <SysTimeSet+0x58>)
 801beb6:	691b      	ldr	r3, [r3, #16]
 801beb8:	f107 0208 	add.w	r2, r7, #8
 801bebc:	3204      	adds	r2, #4
 801bebe:	4610      	mov	r0, r2
 801bec0:	4798      	blx	r3
 801bec2:	4603      	mov	r3, r0
 801bec4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bec6:	f107 0010 	add.w	r0, r7, #16
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	9300      	str	r3, [sp, #0]
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	463a      	mov	r2, r7
 801bed2:	ca06      	ldmia	r2, {r1, r2}
 801bed4:	f7ff ffab 	bl	801be2e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bed8:	4b07      	ldr	r3, [pc, #28]	; (801bef8 <SysTimeSet+0x58>)
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	693a      	ldr	r2, [r7, #16]
 801bede:	4610      	mov	r0, r2
 801bee0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bee2:	4b05      	ldr	r3, [pc, #20]	; (801bef8 <SysTimeSet+0x58>)
 801bee4:	689b      	ldr	r3, [r3, #8]
 801bee6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801beea:	4610      	mov	r0, r2
 801beec:	4798      	blx	r3
}
 801beee:	bf00      	nop
 801bef0:	3718      	adds	r7, #24
 801bef2:	46bd      	mov	sp, r7
 801bef4:	bd80      	pop	{r7, pc}
 801bef6:	bf00      	nop
 801bef8:	0801db10 	.word	0x0801db10

0801befc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b08a      	sub	sp, #40	; 0x28
 801bf00:	af02      	add	r7, sp, #8
 801bf02:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bf04:	2300      	movs	r3, #0
 801bf06:	61bb      	str	r3, [r7, #24]
 801bf08:	2300      	movs	r3, #0
 801bf0a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	613b      	str	r3, [r7, #16]
 801bf10:	2300      	movs	r3, #0
 801bf12:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bf14:	4b14      	ldr	r3, [pc, #80]	; (801bf68 <SysTimeGet+0x6c>)
 801bf16:	691b      	ldr	r3, [r3, #16]
 801bf18:	f107 0218 	add.w	r2, r7, #24
 801bf1c:	3204      	adds	r2, #4
 801bf1e:	4610      	mov	r0, r2
 801bf20:	4798      	blx	r3
 801bf22:	4603      	mov	r3, r0
 801bf24:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bf26:	4b10      	ldr	r3, [pc, #64]	; (801bf68 <SysTimeGet+0x6c>)
 801bf28:	68db      	ldr	r3, [r3, #12]
 801bf2a:	4798      	blx	r3
 801bf2c:	4603      	mov	r3, r0
 801bf2e:	b21b      	sxth	r3, r3
 801bf30:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bf32:	4b0d      	ldr	r3, [pc, #52]	; (801bf68 <SysTimeGet+0x6c>)
 801bf34:	685b      	ldr	r3, [r3, #4]
 801bf36:	4798      	blx	r3
 801bf38:	4603      	mov	r3, r0
 801bf3a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801bf3c:	f107 0010 	add.w	r0, r7, #16
 801bf40:	69fb      	ldr	r3, [r7, #28]
 801bf42:	9300      	str	r3, [sp, #0]
 801bf44:	69bb      	ldr	r3, [r7, #24]
 801bf46:	f107 0208 	add.w	r2, r7, #8
 801bf4a:	ca06      	ldmia	r2, {r1, r2}
 801bf4c:	f7ff ff36 	bl	801bdbc <SysTimeAdd>

  return sysTime;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	461a      	mov	r2, r3
 801bf54:	f107 0310 	add.w	r3, r7, #16
 801bf58:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bf5c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bf60:	6878      	ldr	r0, [r7, #4]
 801bf62:	3720      	adds	r7, #32
 801bf64:	46bd      	mov	sp, r7
 801bf66:	bd80      	pop	{r7, pc}
 801bf68:	0801db10 	.word	0x0801db10

0801bf6c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801bf6c:	b580      	push	{r7, lr}
 801bf6e:	b084      	sub	sp, #16
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bf74:	2300      	movs	r3, #0
 801bf76:	60bb      	str	r3, [r7, #8]
 801bf78:	2300      	movs	r3, #0
 801bf7a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bf7c:	4b0a      	ldr	r3, [pc, #40]	; (801bfa8 <SysTimeGetMcuTime+0x3c>)
 801bf7e:	691b      	ldr	r3, [r3, #16]
 801bf80:	f107 0208 	add.w	r2, r7, #8
 801bf84:	3204      	adds	r2, #4
 801bf86:	4610      	mov	r0, r2
 801bf88:	4798      	blx	r3
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	461a      	mov	r2, r3
 801bf92:	f107 0308 	add.w	r3, r7, #8
 801bf96:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bf9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bf9e:	6878      	ldr	r0, [r7, #4]
 801bfa0:	3710      	adds	r7, #16
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	bd80      	pop	{r7, pc}
 801bfa6:	bf00      	nop
 801bfa8:	0801db10 	.word	0x0801db10

0801bfac <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b088      	sub	sp, #32
 801bfb0:	af02      	add	r7, sp, #8
 801bfb2:	463b      	mov	r3, r7
 801bfb4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bfb8:	4b0f      	ldr	r3, [pc, #60]	; (801bff8 <SysTimeToMs+0x4c>)
 801bfba:	68db      	ldr	r3, [r3, #12]
 801bfbc:	4798      	blx	r3
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	b21b      	sxth	r3, r3
 801bfc2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bfc4:	4b0c      	ldr	r3, [pc, #48]	; (801bff8 <SysTimeToMs+0x4c>)
 801bfc6:	685b      	ldr	r3, [r3, #4]
 801bfc8:	4798      	blx	r3
 801bfca:	4603      	mov	r3, r0
 801bfcc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801bfce:	f107 0008 	add.w	r0, r7, #8
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	9300      	str	r3, [sp, #0]
 801bfd6:	693b      	ldr	r3, [r7, #16]
 801bfd8:	463a      	mov	r2, r7
 801bfda:	ca06      	ldmia	r2, {r1, r2}
 801bfdc:	f7ff ff27 	bl	801be2e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801bfe0:	68bb      	ldr	r3, [r7, #8]
 801bfe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801bfe6:	fb02 f303 	mul.w	r3, r2, r3
 801bfea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801bfee:	4413      	add	r3, r2
}
 801bff0:	4618      	mov	r0, r3
 801bff2:	3718      	adds	r7, #24
 801bff4:	46bd      	mov	sp, r7
 801bff6:	bd80      	pop	{r7, pc}
 801bff8:	0801db10 	.word	0x0801db10

0801bffc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b08a      	sub	sp, #40	; 0x28
 801c000:	af02      	add	r7, sp, #8
 801c002:	6078      	str	r0, [r7, #4]
 801c004:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c006:	683b      	ldr	r3, [r7, #0]
 801c008:	4a19      	ldr	r2, [pc, #100]	; (801c070 <SysTimeFromMs+0x74>)
 801c00a:	fba2 2303 	umull	r2, r3, r2, r3
 801c00e:	099b      	lsrs	r3, r3, #6
 801c010:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c012:	69fb      	ldr	r3, [r7, #28]
 801c014:	617b      	str	r3, [r7, #20]
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	b29a      	uxth	r2, r3
 801c01a:	69fb      	ldr	r3, [r7, #28]
 801c01c:	b29b      	uxth	r3, r3
 801c01e:	4619      	mov	r1, r3
 801c020:	0149      	lsls	r1, r1, #5
 801c022:	1ac9      	subs	r1, r1, r3
 801c024:	0089      	lsls	r1, r1, #2
 801c026:	440b      	add	r3, r1
 801c028:	00db      	lsls	r3, r3, #3
 801c02a:	b29b      	uxth	r3, r3
 801c02c:	1ad3      	subs	r3, r2, r3
 801c02e:	b29b      	uxth	r3, r3
 801c030:	b21b      	sxth	r3, r3
 801c032:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c034:	f107 030c 	add.w	r3, r7, #12
 801c038:	2200      	movs	r2, #0
 801c03a:	601a      	str	r2, [r3, #0]
 801c03c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c03e:	4b0d      	ldr	r3, [pc, #52]	; (801c074 <SysTimeFromMs+0x78>)
 801c040:	68db      	ldr	r3, [r3, #12]
 801c042:	4798      	blx	r3
 801c044:	4603      	mov	r3, r0
 801c046:	b21b      	sxth	r3, r3
 801c048:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c04a:	4b0a      	ldr	r3, [pc, #40]	; (801c074 <SysTimeFromMs+0x78>)
 801c04c:	685b      	ldr	r3, [r3, #4]
 801c04e:	4798      	blx	r3
 801c050:	4603      	mov	r3, r0
 801c052:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c054:	6878      	ldr	r0, [r7, #4]
 801c056:	693b      	ldr	r3, [r7, #16]
 801c058:	9300      	str	r3, [sp, #0]
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	f107 0214 	add.w	r2, r7, #20
 801c060:	ca06      	ldmia	r2, {r1, r2}
 801c062:	f7ff feab 	bl	801bdbc <SysTimeAdd>
}
 801c066:	6878      	ldr	r0, [r7, #4]
 801c068:	3720      	adds	r7, #32
 801c06a:	46bd      	mov	sp, r7
 801c06c:	bd80      	pop	{r7, pc}
 801c06e:	bf00      	nop
 801c070:	10624dd3 	.word	0x10624dd3
 801c074:	0801db10 	.word	0x0801db10

0801c078 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c078:	b480      	push	{r7}
 801c07a:	b085      	sub	sp, #20
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c080:	2300      	movs	r3, #0
 801c082:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c084:	e00e      	b.n	801c0a4 <ee_skip_atoi+0x2c>
 801c086:	68fa      	ldr	r2, [r7, #12]
 801c088:	4613      	mov	r3, r2
 801c08a:	009b      	lsls	r3, r3, #2
 801c08c:	4413      	add	r3, r2
 801c08e:	005b      	lsls	r3, r3, #1
 801c090:	4618      	mov	r0, r3
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	1c59      	adds	r1, r3, #1
 801c098:	687a      	ldr	r2, [r7, #4]
 801c09a:	6011      	str	r1, [r2, #0]
 801c09c:	781b      	ldrb	r3, [r3, #0]
 801c09e:	4403      	add	r3, r0
 801c0a0:	3b30      	subs	r3, #48	; 0x30
 801c0a2:	60fb      	str	r3, [r7, #12]
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	781b      	ldrb	r3, [r3, #0]
 801c0aa:	2b2f      	cmp	r3, #47	; 0x2f
 801c0ac:	d904      	bls.n	801c0b8 <ee_skip_atoi+0x40>
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	781b      	ldrb	r3, [r3, #0]
 801c0b4:	2b39      	cmp	r3, #57	; 0x39
 801c0b6:	d9e6      	bls.n	801c086 <ee_skip_atoi+0xe>
  return i;
 801c0b8:	68fb      	ldr	r3, [r7, #12]
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	3714      	adds	r7, #20
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	bc80      	pop	{r7}
 801c0c2:	4770      	bx	lr

0801c0c4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c0c4:	b480      	push	{r7}
 801c0c6:	b099      	sub	sp, #100	; 0x64
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	60f8      	str	r0, [r7, #12]
 801c0cc:	60b9      	str	r1, [r7, #8]
 801c0ce:	607a      	str	r2, [r7, #4]
 801c0d0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c0d2:	4b71      	ldr	r3, [pc, #452]	; (801c298 <ee_number+0x1d4>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c0d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d002      	beq.n	801c0e8 <ee_number+0x24>
 801c0e2:	4b6e      	ldr	r3, [pc, #440]	; (801c29c <ee_number+0x1d8>)
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c0e8:	683b      	ldr	r3, [r7, #0]
 801c0ea:	2b01      	cmp	r3, #1
 801c0ec:	dd02      	ble.n	801c0f4 <ee_number+0x30>
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	2b24      	cmp	r3, #36	; 0x24
 801c0f2:	dd01      	ble.n	801c0f8 <ee_number+0x34>
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	e0ca      	b.n	801c28e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c0f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c0fa:	f003 0301 	and.w	r3, r3, #1
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d001      	beq.n	801c106 <ee_number+0x42>
 801c102:	2330      	movs	r3, #48	; 0x30
 801c104:	e000      	b.n	801c108 <ee_number+0x44>
 801c106:	2320      	movs	r3, #32
 801c108:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801c10c:	2300      	movs	r3, #0
 801c10e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801c112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c114:	f003 0302 	and.w	r3, r3, #2
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d00b      	beq.n	801c134 <ee_number+0x70>
  {
    if (num < 0)
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	2b00      	cmp	r3, #0
 801c120:	da08      	bge.n	801c134 <ee_number+0x70>
    {
      sign = '-';
 801c122:	232d      	movs	r3, #45	; 0x2d
 801c124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	425b      	negs	r3, r3
 801c12c:	607b      	str	r3, [r7, #4]
      size--;
 801c12e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c130:	3b01      	subs	r3, #1
 801c132:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c134:	2300      	movs	r3, #0
 801c136:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d11e      	bne.n	801c17c <ee_number+0xb8>
    tmp[i++] = '0';
 801c13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c140:	1c5a      	adds	r2, r3, #1
 801c142:	657a      	str	r2, [r7, #84]	; 0x54
 801c144:	3360      	adds	r3, #96	; 0x60
 801c146:	443b      	add	r3, r7
 801c148:	2230      	movs	r2, #48	; 0x30
 801c14a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801c14e:	e018      	b.n	801c182 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	683a      	ldr	r2, [r7, #0]
 801c154:	fbb3 f1f2 	udiv	r1, r3, r2
 801c158:	fb01 f202 	mul.w	r2, r1, r2
 801c15c:	1a9b      	subs	r3, r3, r2
 801c15e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c160:	441a      	add	r2, r3
 801c162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c164:	1c59      	adds	r1, r3, #1
 801c166:	6579      	str	r1, [r7, #84]	; 0x54
 801c168:	7812      	ldrb	r2, [r2, #0]
 801c16a:	3360      	adds	r3, #96	; 0x60
 801c16c:	443b      	add	r3, r7
 801c16e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801c172:	687a      	ldr	r2, [r7, #4]
 801c174:	683b      	ldr	r3, [r7, #0]
 801c176:	fbb2 f3f3 	udiv	r3, r2, r3
 801c17a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d1e6      	bne.n	801c150 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801c182:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c186:	429a      	cmp	r2, r3
 801c188:	dd01      	ble.n	801c18e <ee_number+0xca>
 801c18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c18c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801c18e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c192:	1ad3      	subs	r3, r2, r3
 801c194:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c198:	f003 0301 	and.w	r3, r3, #1
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d112      	bne.n	801c1c6 <ee_number+0x102>
 801c1a0:	e00c      	b.n	801c1bc <ee_number+0xf8>
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	1c5a      	adds	r2, r3, #1
 801c1a6:	60fa      	str	r2, [r7, #12]
 801c1a8:	2220      	movs	r2, #32
 801c1aa:	701a      	strb	r2, [r3, #0]
 801c1ac:	68bb      	ldr	r3, [r7, #8]
 801c1ae:	3b01      	subs	r3, #1
 801c1b0:	60bb      	str	r3, [r7, #8]
 801c1b2:	68bb      	ldr	r3, [r7, #8]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d101      	bne.n	801c1bc <ee_number+0xf8>
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	e068      	b.n	801c28e <ee_number+0x1ca>
 801c1bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c1be:	1e5a      	subs	r2, r3, #1
 801c1c0:	66ba      	str	r2, [r7, #104]	; 0x68
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	dced      	bgt.n	801c1a2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d01b      	beq.n	801c206 <ee_number+0x142>
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	1c5a      	adds	r2, r3, #1
 801c1d2:	60fa      	str	r2, [r7, #12]
 801c1d4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c1d8:	701a      	strb	r2, [r3, #0]
 801c1da:	68bb      	ldr	r3, [r7, #8]
 801c1dc:	3b01      	subs	r3, #1
 801c1de:	60bb      	str	r3, [r7, #8]
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d10f      	bne.n	801c206 <ee_number+0x142>
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	e051      	b.n	801c28e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	1c5a      	adds	r2, r3, #1
 801c1ee:	60fa      	str	r2, [r7, #12]
 801c1f0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c1f4:	701a      	strb	r2, [r3, #0]
 801c1f6:	68bb      	ldr	r3, [r7, #8]
 801c1f8:	3b01      	subs	r3, #1
 801c1fa:	60bb      	str	r3, [r7, #8]
 801c1fc:	68bb      	ldr	r3, [r7, #8]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d101      	bne.n	801c206 <ee_number+0x142>
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	e043      	b.n	801c28e <ee_number+0x1ca>
 801c206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c208:	1e5a      	subs	r2, r3, #1
 801c20a:	66ba      	str	r2, [r7, #104]	; 0x68
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	dcec      	bgt.n	801c1ea <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c210:	e00c      	b.n	801c22c <ee_number+0x168>
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	1c5a      	adds	r2, r3, #1
 801c216:	60fa      	str	r2, [r7, #12]
 801c218:	2230      	movs	r2, #48	; 0x30
 801c21a:	701a      	strb	r2, [r3, #0]
 801c21c:	68bb      	ldr	r3, [r7, #8]
 801c21e:	3b01      	subs	r3, #1
 801c220:	60bb      	str	r3, [r7, #8]
 801c222:	68bb      	ldr	r3, [r7, #8]
 801c224:	2b00      	cmp	r3, #0
 801c226:	d101      	bne.n	801c22c <ee_number+0x168>
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	e030      	b.n	801c28e <ee_number+0x1ca>
 801c22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c22e:	1e5a      	subs	r2, r3, #1
 801c230:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c232:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c234:	429a      	cmp	r2, r3
 801c236:	dbec      	blt.n	801c212 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c238:	e010      	b.n	801c25c <ee_number+0x198>
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	1c5a      	adds	r2, r3, #1
 801c23e:	60fa      	str	r2, [r7, #12]
 801c240:	f107 0110 	add.w	r1, r7, #16
 801c244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c246:	440a      	add	r2, r1
 801c248:	7812      	ldrb	r2, [r2, #0]
 801c24a:	701a      	strb	r2, [r3, #0]
 801c24c:	68bb      	ldr	r3, [r7, #8]
 801c24e:	3b01      	subs	r3, #1
 801c250:	60bb      	str	r3, [r7, #8]
 801c252:	68bb      	ldr	r3, [r7, #8]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d101      	bne.n	801c25c <ee_number+0x198>
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	e018      	b.n	801c28e <ee_number+0x1ca>
 801c25c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c25e:	1e5a      	subs	r2, r3, #1
 801c260:	657a      	str	r2, [r7, #84]	; 0x54
 801c262:	2b00      	cmp	r3, #0
 801c264:	dce9      	bgt.n	801c23a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c266:	e00c      	b.n	801c282 <ee_number+0x1be>
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	1c5a      	adds	r2, r3, #1
 801c26c:	60fa      	str	r2, [r7, #12]
 801c26e:	2220      	movs	r2, #32
 801c270:	701a      	strb	r2, [r3, #0]
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	3b01      	subs	r3, #1
 801c276:	60bb      	str	r3, [r7, #8]
 801c278:	68bb      	ldr	r3, [r7, #8]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d101      	bne.n	801c282 <ee_number+0x1be>
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	e005      	b.n	801c28e <ee_number+0x1ca>
 801c282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c284:	1e5a      	subs	r2, r3, #1
 801c286:	66ba      	str	r2, [r7, #104]	; 0x68
 801c288:	2b00      	cmp	r3, #0
 801c28a:	dced      	bgt.n	801c268 <ee_number+0x1a4>

  return str;
 801c28c:	68fb      	ldr	r3, [r7, #12]
}
 801c28e:	4618      	mov	r0, r3
 801c290:	3764      	adds	r7, #100	; 0x64
 801c292:	46bd      	mov	sp, r7
 801c294:	bc80      	pop	{r7}
 801c296:	4770      	bx	lr
 801c298:	20000138 	.word	0x20000138
 801c29c:	2000013c 	.word	0x2000013c

0801c2a0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c2a0:	b580      	push	{r7, lr}
 801c2a2:	b092      	sub	sp, #72	; 0x48
 801c2a4:	af04      	add	r7, sp, #16
 801c2a6:	60f8      	str	r0, [r7, #12]
 801c2a8:	60b9      	str	r1, [r7, #8]
 801c2aa:	607a      	str	r2, [r7, #4]
 801c2ac:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c2ae:	68bb      	ldr	r3, [r7, #8]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	dc01      	bgt.n	801c2b8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	e142      	b.n	801c53e <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c2bc:	e12a      	b.n	801c514 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c2be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	1ad2      	subs	r2, r2, r3
 801c2c4:	68bb      	ldr	r3, [r7, #8]
 801c2c6:	3b01      	subs	r3, #1
 801c2c8:	429a      	cmp	r2, r3
 801c2ca:	f280 8131 	bge.w	801c530 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	2b25      	cmp	r3, #37	; 0x25
 801c2d4:	d006      	beq.n	801c2e4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c2d6:	687a      	ldr	r2, [r7, #4]
 801c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2da:	1c59      	adds	r1, r3, #1
 801c2dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c2de:	7812      	ldrb	r2, [r2, #0]
 801c2e0:	701a      	strb	r2, [r3, #0]
      continue;
 801c2e2:	e114      	b.n	801c50e <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	3301      	adds	r3, #1
 801c2ec:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	2b30      	cmp	r3, #48	; 0x30
 801c2f4:	d103      	bne.n	801c2fe <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c2f6:	6a3b      	ldr	r3, [r7, #32]
 801c2f8:	f043 0301 	orr.w	r3, r3, #1
 801c2fc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c2fe:	f04f 33ff 	mov.w	r3, #4294967295
 801c302:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	781b      	ldrb	r3, [r3, #0]
 801c308:	2b2f      	cmp	r3, #47	; 0x2f
 801c30a:	d908      	bls.n	801c31e <tiny_vsnprintf_like+0x7e>
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	781b      	ldrb	r3, [r3, #0]
 801c310:	2b39      	cmp	r3, #57	; 0x39
 801c312:	d804      	bhi.n	801c31e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c314:	1d3b      	adds	r3, r7, #4
 801c316:	4618      	mov	r0, r3
 801c318:	f7ff feae 	bl	801c078 <ee_skip_atoi>
 801c31c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c31e:	f04f 33ff 	mov.w	r3, #4294967295
 801c322:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c324:	f04f 33ff 	mov.w	r3, #4294967295
 801c328:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c32a:	230a      	movs	r3, #10
 801c32c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	781b      	ldrb	r3, [r3, #0]
 801c332:	3b58      	subs	r3, #88	; 0x58
 801c334:	2b20      	cmp	r3, #32
 801c336:	f200 8094 	bhi.w	801c462 <tiny_vsnprintf_like+0x1c2>
 801c33a:	a201      	add	r2, pc, #4	; (adr r2, 801c340 <tiny_vsnprintf_like+0xa0>)
 801c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c340:	0801c44b 	.word	0x0801c44b
 801c344:	0801c463 	.word	0x0801c463
 801c348:	0801c463 	.word	0x0801c463
 801c34c:	0801c463 	.word	0x0801c463
 801c350:	0801c463 	.word	0x0801c463
 801c354:	0801c463 	.word	0x0801c463
 801c358:	0801c463 	.word	0x0801c463
 801c35c:	0801c463 	.word	0x0801c463
 801c360:	0801c463 	.word	0x0801c463
 801c364:	0801c463 	.word	0x0801c463
 801c368:	0801c463 	.word	0x0801c463
 801c36c:	0801c3cf 	.word	0x0801c3cf
 801c370:	0801c459 	.word	0x0801c459
 801c374:	0801c463 	.word	0x0801c463
 801c378:	0801c463 	.word	0x0801c463
 801c37c:	0801c463 	.word	0x0801c463
 801c380:	0801c463 	.word	0x0801c463
 801c384:	0801c459 	.word	0x0801c459
 801c388:	0801c463 	.word	0x0801c463
 801c38c:	0801c463 	.word	0x0801c463
 801c390:	0801c463 	.word	0x0801c463
 801c394:	0801c463 	.word	0x0801c463
 801c398:	0801c463 	.word	0x0801c463
 801c39c:	0801c463 	.word	0x0801c463
 801c3a0:	0801c463 	.word	0x0801c463
 801c3a4:	0801c463 	.word	0x0801c463
 801c3a8:	0801c463 	.word	0x0801c463
 801c3ac:	0801c3ef 	.word	0x0801c3ef
 801c3b0:	0801c463 	.word	0x0801c463
 801c3b4:	0801c4af 	.word	0x0801c4af
 801c3b8:	0801c463 	.word	0x0801c463
 801c3bc:	0801c463 	.word	0x0801c463
 801c3c0:	0801c453 	.word	0x0801c453
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3c6:	1c5a      	adds	r2, r3, #1
 801c3c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c3ca:	2220      	movs	r2, #32
 801c3cc:	701a      	strb	r2, [r3, #0]
 801c3ce:	69fb      	ldr	r3, [r7, #28]
 801c3d0:	3b01      	subs	r3, #1
 801c3d2:	61fb      	str	r3, [r7, #28]
 801c3d4:	69fb      	ldr	r3, [r7, #28]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	dcf4      	bgt.n	801c3c4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c3da:	683b      	ldr	r3, [r7, #0]
 801c3dc:	1d1a      	adds	r2, r3, #4
 801c3de:	603a      	str	r2, [r7, #0]
 801c3e0:	6819      	ldr	r1, [r3, #0]
 801c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3e4:	1c5a      	adds	r2, r3, #1
 801c3e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c3e8:	b2ca      	uxtb	r2, r1
 801c3ea:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c3ec:	e08f      	b.n	801c50e <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	1d1a      	adds	r2, r3, #4
 801c3f2:	603a      	str	r2, [r7, #0]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d101      	bne.n	801c402 <tiny_vsnprintf_like+0x162>
 801c3fe:	4b52      	ldr	r3, [pc, #328]	; (801c548 <tiny_vsnprintf_like+0x2a8>)
 801c400:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c404:	f7e3 feb8 	bl	8000178 <strlen>
 801c408:	4603      	mov	r3, r0
 801c40a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c40c:	e004      	b.n	801c418 <tiny_vsnprintf_like+0x178>
 801c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c410:	1c5a      	adds	r2, r3, #1
 801c412:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c414:	2220      	movs	r2, #32
 801c416:	701a      	strb	r2, [r3, #0]
 801c418:	69fb      	ldr	r3, [r7, #28]
 801c41a:	1e5a      	subs	r2, r3, #1
 801c41c:	61fa      	str	r2, [r7, #28]
 801c41e:	693a      	ldr	r2, [r7, #16]
 801c420:	429a      	cmp	r2, r3
 801c422:	dbf4      	blt.n	801c40e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c424:	2300      	movs	r3, #0
 801c426:	62bb      	str	r3, [r7, #40]	; 0x28
 801c428:	e00a      	b.n	801c440 <tiny_vsnprintf_like+0x1a0>
 801c42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c42c:	1c53      	adds	r3, r2, #1
 801c42e:	627b      	str	r3, [r7, #36]	; 0x24
 801c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c432:	1c59      	adds	r1, r3, #1
 801c434:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c436:	7812      	ldrb	r2, [r2, #0]
 801c438:	701a      	strb	r2, [r3, #0]
 801c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c43c:	3301      	adds	r3, #1
 801c43e:	62bb      	str	r3, [r7, #40]	; 0x28
 801c440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c442:	693b      	ldr	r3, [r7, #16]
 801c444:	429a      	cmp	r2, r3
 801c446:	dbf0      	blt.n	801c42a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c448:	e061      	b.n	801c50e <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c44a:	6a3b      	ldr	r3, [r7, #32]
 801c44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c450:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c452:	2310      	movs	r3, #16
 801c454:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801c456:	e02d      	b.n	801c4b4 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c458:	6a3b      	ldr	r3, [r7, #32]
 801c45a:	f043 0302 	orr.w	r3, r3, #2
 801c45e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c460:	e025      	b.n	801c4ae <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	781b      	ldrb	r3, [r3, #0]
 801c466:	2b25      	cmp	r3, #37	; 0x25
 801c468:	d004      	beq.n	801c474 <tiny_vsnprintf_like+0x1d4>
 801c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c46c:	1c5a      	adds	r2, r3, #1
 801c46e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c470:	2225      	movs	r2, #37	; 0x25
 801c472:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	1ad2      	subs	r2, r2, r3
 801c47a:	68bb      	ldr	r3, [r7, #8]
 801c47c:	3b01      	subs	r3, #1
 801c47e:	429a      	cmp	r2, r3
 801c480:	da17      	bge.n	801c4b2 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	2b00      	cmp	r3, #0
 801c488:	d006      	beq.n	801c498 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c48a:	687a      	ldr	r2, [r7, #4]
 801c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c48e:	1c59      	adds	r1, r3, #1
 801c490:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c492:	7812      	ldrb	r2, [r2, #0]
 801c494:	701a      	strb	r2, [r3, #0]
 801c496:	e002      	b.n	801c49e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	3b01      	subs	r3, #1
 801c49c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	1ad2      	subs	r2, r2, r3
 801c4a4:	68bb      	ldr	r3, [r7, #8]
 801c4a6:	3b01      	subs	r3, #1
 801c4a8:	429a      	cmp	r2, r3
 801c4aa:	db2f      	blt.n	801c50c <tiny_vsnprintf_like+0x26c>
 801c4ac:	e002      	b.n	801c4b4 <tiny_vsnprintf_like+0x214>
        break;
 801c4ae:	bf00      	nop
 801c4b0:	e000      	b.n	801c4b4 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801c4b2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c4b4:	697b      	ldr	r3, [r7, #20]
 801c4b6:	2b6c      	cmp	r3, #108	; 0x6c
 801c4b8:	d105      	bne.n	801c4c6 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801c4ba:	683b      	ldr	r3, [r7, #0]
 801c4bc:	1d1a      	adds	r2, r3, #4
 801c4be:	603a      	str	r2, [r7, #0]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	637b      	str	r3, [r7, #52]	; 0x34
 801c4c4:	e00f      	b.n	801c4e6 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801c4c6:	6a3b      	ldr	r3, [r7, #32]
 801c4c8:	f003 0302 	and.w	r3, r3, #2
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d005      	beq.n	801c4dc <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801c4d0:	683b      	ldr	r3, [r7, #0]
 801c4d2:	1d1a      	adds	r2, r3, #4
 801c4d4:	603a      	str	r2, [r7, #0]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	637b      	str	r3, [r7, #52]	; 0x34
 801c4da:	e004      	b.n	801c4e6 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	1d1a      	adds	r2, r3, #4
 801c4e0:	603a      	str	r2, [r7, #0]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c4e6:	68bb      	ldr	r3, [r7, #8]
 801c4e8:	1e5a      	subs	r2, r3, #1
 801c4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	1acb      	subs	r3, r1, r3
 801c4f0:	1ad1      	subs	r1, r2, r3
 801c4f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c4f4:	6a3b      	ldr	r3, [r7, #32]
 801c4f6:	9302      	str	r3, [sp, #8]
 801c4f8:	69bb      	ldr	r3, [r7, #24]
 801c4fa:	9301      	str	r3, [sp, #4]
 801c4fc:	69fb      	ldr	r3, [r7, #28]
 801c4fe:	9300      	str	r3, [sp, #0]
 801c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c504:	f7ff fdde 	bl	801c0c4 <ee_number>
 801c508:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c50a:	e000      	b.n	801c50e <tiny_vsnprintf_like+0x26e>
        continue;
 801c50c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	3301      	adds	r3, #1
 801c512:	607b      	str	r3, [r7, #4]
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	781b      	ldrb	r3, [r3, #0]
 801c518:	2b00      	cmp	r3, #0
 801c51a:	f47f aed0 	bne.w	801c2be <tiny_vsnprintf_like+0x1e>
 801c51e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	1ad2      	subs	r2, r2, r3
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	3b01      	subs	r3, #1
 801c528:	429a      	cmp	r2, r3
 801c52a:	f6bf aec8 	bge.w	801c2be <tiny_vsnprintf_like+0x1e>
 801c52e:	e000      	b.n	801c532 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801c530:	bf00      	nop
  }

  *str = '\0';
 801c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c534:	2200      	movs	r2, #0
 801c536:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	1ad3      	subs	r3, r2, r3
}
 801c53e:	4618      	mov	r0, r3
 801c540:	3738      	adds	r7, #56	; 0x38
 801c542:	46bd      	mov	sp, r7
 801c544:	bd80      	pop	{r7, pc}
 801c546:	bf00      	nop
 801c548:	0801da24 	.word	0x0801da24

0801c54c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b090      	sub	sp, #64	; 0x40
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c554:	4b73      	ldr	r3, [pc, #460]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c55a:	4b72      	ldr	r3, [pc, #456]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c55c:	681a      	ldr	r2, [r3, #0]
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	4013      	ands	r3, r2
 801c562:	4a70      	ldr	r2, [pc, #448]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c564:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c566:	4b70      	ldr	r3, [pc, #448]	; (801c728 <UTIL_SEQ_Run+0x1dc>)
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c56c:	4b6f      	ldr	r3, [pc, #444]	; (801c72c <UTIL_SEQ_Run+0x1e0>)
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c572:	4b6f      	ldr	r3, [pc, #444]	; (801c730 <UTIL_SEQ_Run+0x1e4>)
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801c578:	4b6e      	ldr	r3, [pc, #440]	; (801c734 <UTIL_SEQ_Run+0x1e8>)
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c57e:	e08d      	b.n	801c69c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c580:	2300      	movs	r3, #0
 801c582:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c584:	e002      	b.n	801c58c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c588:	3301      	adds	r3, #1
 801c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c58c:	4a6a      	ldr	r2, [pc, #424]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c590:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c596:	401a      	ands	r2, r3
 801c598:	4b62      	ldr	r3, [pc, #392]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c59a:	681b      	ldr	r3, [r3, #0]
 801c59c:	4013      	ands	r3, r2
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d0f1      	beq.n	801c586 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c5a2:	4a65      	ldr	r2, [pc, #404]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5a6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c5ac:	401a      	ands	r2, r3
 801c5ae:	4b5d      	ldr	r3, [pc, #372]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	4013      	ands	r3, r2
 801c5b4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c5b6:	4a60      	ldr	r2, [pc, #384]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5ba:	00db      	lsls	r3, r3, #3
 801c5bc:	4413      	add	r3, r2
 801c5be:	685a      	ldr	r2, [r3, #4]
 801c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5c2:	4013      	ands	r3, r2
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d106      	bne.n	801c5d6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c5c8:	4a5b      	ldr	r2, [pc, #364]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5cc:	00db      	lsls	r3, r3, #3
 801c5ce:	4413      	add	r3, r2
 801c5d0:	f04f 32ff 	mov.w	r2, #4294967295
 801c5d4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c5d6:	4a58      	ldr	r2, [pc, #352]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5da:	00db      	lsls	r3, r3, #3
 801c5dc:	4413      	add	r3, r2
 801c5de:	685a      	ldr	r2, [r3, #4]
 801c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5e2:	4013      	ands	r3, r2
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	f000 f907 	bl	801c7f8 <SEQ_BitPosition>
 801c5ea:	4603      	mov	r3, r0
 801c5ec:	461a      	mov	r2, r3
 801c5ee:	4b53      	ldr	r3, [pc, #332]	; (801c73c <UTIL_SEQ_Run+0x1f0>)
 801c5f0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c5f2:	4a51      	ldr	r2, [pc, #324]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5f6:	00db      	lsls	r3, r3, #3
 801c5f8:	4413      	add	r3, r2
 801c5fa:	685a      	ldr	r2, [r3, #4]
 801c5fc:	4b4f      	ldr	r3, [pc, #316]	; (801c73c <UTIL_SEQ_Run+0x1f0>)
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	2101      	movs	r1, #1
 801c602:	fa01 f303 	lsl.w	r3, r1, r3
 801c606:	43db      	mvns	r3, r3
 801c608:	401a      	ands	r2, r3
 801c60a:	494b      	ldr	r1, [pc, #300]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c60e:	00db      	lsls	r3, r3, #3
 801c610:	440b      	add	r3, r1
 801c612:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c614:	f3ef 8310 	mrs	r3, PRIMASK
 801c618:	61bb      	str	r3, [r7, #24]
  return(result);
 801c61a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c61c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c61e:	b672      	cpsid	i
}
 801c620:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c622:	4b46      	ldr	r3, [pc, #280]	; (801c73c <UTIL_SEQ_Run+0x1f0>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	2201      	movs	r2, #1
 801c628:	fa02 f303 	lsl.w	r3, r2, r3
 801c62c:	43da      	mvns	r2, r3
 801c62e:	4b3e      	ldr	r3, [pc, #248]	; (801c728 <UTIL_SEQ_Run+0x1dc>)
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	4013      	ands	r3, r2
 801c634:	4a3c      	ldr	r2, [pc, #240]	; (801c728 <UTIL_SEQ_Run+0x1dc>)
 801c636:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c638:	2301      	movs	r3, #1
 801c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c63c:	e013      	b.n	801c666 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c640:	3b01      	subs	r3, #1
 801c642:	4a3d      	ldr	r2, [pc, #244]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c644:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c648:	4b3c      	ldr	r3, [pc, #240]	; (801c73c <UTIL_SEQ_Run+0x1f0>)
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	2201      	movs	r2, #1
 801c64e:	fa02 f303 	lsl.w	r3, r2, r3
 801c652:	43da      	mvns	r2, r3
 801c654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c656:	3b01      	subs	r3, #1
 801c658:	400a      	ands	r2, r1
 801c65a:	4937      	ldr	r1, [pc, #220]	; (801c738 <UTIL_SEQ_Run+0x1ec>)
 801c65c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c662:	3b01      	subs	r3, #1
 801c664:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d1e8      	bne.n	801c63e <UTIL_SEQ_Run+0xf2>
 801c66c:	6a3b      	ldr	r3, [r7, #32]
 801c66e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c670:	697b      	ldr	r3, [r7, #20]
 801c672:	f383 8810 	msr	PRIMASK, r3
}
 801c676:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c678:	4b30      	ldr	r3, [pc, #192]	; (801c73c <UTIL_SEQ_Run+0x1f0>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	4a30      	ldr	r2, [pc, #192]	; (801c740 <UTIL_SEQ_Run+0x1f4>)
 801c67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c682:	4798      	blx	r3

    local_taskset = TaskSet;
 801c684:	4b28      	ldr	r3, [pc, #160]	; (801c728 <UTIL_SEQ_Run+0x1dc>)
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801c68a:	4b28      	ldr	r3, [pc, #160]	; (801c72c <UTIL_SEQ_Run+0x1e0>)
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801c690:	4b27      	ldr	r3, [pc, #156]	; (801c730 <UTIL_SEQ_Run+0x1e4>)
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801c696:	4b27      	ldr	r3, [pc, #156]	; (801c734 <UTIL_SEQ_Run+0x1e8>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6a0:	401a      	ands	r2, r3
 801c6a2:	4b20      	ldr	r3, [pc, #128]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	4013      	ands	r3, r2
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d005      	beq.n	801c6b8 <UTIL_SEQ_Run+0x16c>
 801c6ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6b0:	4013      	ands	r3, r2
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	f43f af64 	beq.w	801c580 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c6b8:	4b20      	ldr	r3, [pc, #128]	; (801c73c <UTIL_SEQ_Run+0x1f0>)
 801c6ba:	f04f 32ff 	mov.w	r2, #4294967295
 801c6be:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c6c0:	f000 f88e 	bl	801c7e0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6c4:	f3ef 8310 	mrs	r3, PRIMASK
 801c6c8:	613b      	str	r3, [r7, #16]
  return(result);
 801c6ca:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c6cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6ce:	b672      	cpsid	i
}
 801c6d0:	bf00      	nop
  local_taskset = TaskSet;
 801c6d2:	4b15      	ldr	r3, [pc, #84]	; (801c728 <UTIL_SEQ_Run+0x1dc>)
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c6d8:	4b14      	ldr	r3, [pc, #80]	; (801c72c <UTIL_SEQ_Run+0x1e0>)
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c6de:	4b14      	ldr	r3, [pc, #80]	; (801c730 <UTIL_SEQ_Run+0x1e4>)
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c6e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6e8:	401a      	ands	r2, r3
 801c6ea:	4b0e      	ldr	r3, [pc, #56]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	4013      	ands	r3, r2
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d107      	bne.n	801c704 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c6f4:	4b0f      	ldr	r3, [pc, #60]	; (801c734 <UTIL_SEQ_Run+0x1e8>)
 801c6f6:	681a      	ldr	r2, [r3, #0]
 801c6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c6fa:	4013      	ands	r3, r2
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d101      	bne.n	801c704 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c700:	f7e5 fde0 	bl	80022c4 <UTIL_SEQ_Idle>
 801c704:	69fb      	ldr	r3, [r7, #28]
 801c706:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	f383 8810 	msr	PRIMASK, r3
}
 801c70e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c710:	f000 f86c 	bl	801c7ec <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c714:	4a03      	ldr	r2, [pc, #12]	; (801c724 <UTIL_SEQ_Run+0x1d8>)
 801c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c718:	6013      	str	r3, [r2, #0]

  return;
 801c71a:	bf00      	nop
}
 801c71c:	3740      	adds	r7, #64	; 0x40
 801c71e:	46bd      	mov	sp, r7
 801c720:	bd80      	pop	{r7, pc}
 801c722:	bf00      	nop
 801c724:	20000144 	.word	0x20000144
 801c728:	200021ec 	.word	0x200021ec
 801c72c:	200021f0 	.word	0x200021f0
 801c730:	20000140 	.word	0x20000140
 801c734:	200021f4 	.word	0x200021f4
 801c738:	2000220c 	.word	0x2000220c
 801c73c:	200021f8 	.word	0x200021f8
 801c740:	200021fc 	.word	0x200021fc

0801c744 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b088      	sub	sp, #32
 801c748:	af00      	add	r7, sp, #0
 801c74a:	60f8      	str	r0, [r7, #12]
 801c74c:	60b9      	str	r1, [r7, #8]
 801c74e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c750:	f3ef 8310 	mrs	r3, PRIMASK
 801c754:	617b      	str	r3, [r7, #20]
  return(result);
 801c756:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c75a:	b672      	cpsid	i
}
 801c75c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c75e:	68f8      	ldr	r0, [r7, #12]
 801c760:	f000 f84a 	bl	801c7f8 <SEQ_BitPosition>
 801c764:	4603      	mov	r3, r0
 801c766:	4619      	mov	r1, r3
 801c768:	4a06      	ldr	r2, [pc, #24]	; (801c784 <UTIL_SEQ_RegTask+0x40>)
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c770:	69fb      	ldr	r3, [r7, #28]
 801c772:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c774:	69bb      	ldr	r3, [r7, #24]
 801c776:	f383 8810 	msr	PRIMASK, r3
}
 801c77a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c77c:	bf00      	nop
}
 801c77e:	3720      	adds	r7, #32
 801c780:	46bd      	mov	sp, r7
 801c782:	bd80      	pop	{r7, pc}
 801c784:	200021fc 	.word	0x200021fc

0801c788 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c788:	b480      	push	{r7}
 801c78a:	b087      	sub	sp, #28
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
 801c790:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c792:	f3ef 8310 	mrs	r3, PRIMASK
 801c796:	60fb      	str	r3, [r7, #12]
  return(result);
 801c798:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c79a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c79c:	b672      	cpsid	i
}
 801c79e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c7a0:	4b0d      	ldr	r3, [pc, #52]	; (801c7d8 <UTIL_SEQ_SetTask+0x50>)
 801c7a2:	681a      	ldr	r2, [r3, #0]
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	4313      	orrs	r3, r2
 801c7a8:	4a0b      	ldr	r2, [pc, #44]	; (801c7d8 <UTIL_SEQ_SetTask+0x50>)
 801c7aa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c7ac:	4a0b      	ldr	r2, [pc, #44]	; (801c7dc <UTIL_SEQ_SetTask+0x54>)
 801c7ae:	683b      	ldr	r3, [r7, #0]
 801c7b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	431a      	orrs	r2, r3
 801c7b8:	4908      	ldr	r1, [pc, #32]	; (801c7dc <UTIL_SEQ_SetTask+0x54>)
 801c7ba:	683b      	ldr	r3, [r7, #0]
 801c7bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c7c0:	697b      	ldr	r3, [r7, #20]
 801c7c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7c4:	693b      	ldr	r3, [r7, #16]
 801c7c6:	f383 8810 	msr	PRIMASK, r3
}
 801c7ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c7cc:	bf00      	nop
}
 801c7ce:	371c      	adds	r7, #28
 801c7d0:	46bd      	mov	sp, r7
 801c7d2:	bc80      	pop	{r7}
 801c7d4:	4770      	bx	lr
 801c7d6:	bf00      	nop
 801c7d8:	200021ec 	.word	0x200021ec
 801c7dc:	2000220c 	.word	0x2000220c

0801c7e0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c7e0:	b480      	push	{r7}
 801c7e2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c7e4:	bf00      	nop
}
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bc80      	pop	{r7}
 801c7ea:	4770      	bx	lr

0801c7ec <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c7ec:	b480      	push	{r7}
 801c7ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c7f0:	bf00      	nop
}
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bc80      	pop	{r7}
 801c7f6:	4770      	bx	lr

0801c7f8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c7f8:	b480      	push	{r7}
 801c7fa:	b085      	sub	sp, #20
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c800:	2300      	movs	r3, #0
 801c802:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c808:	68bb      	ldr	r3, [r7, #8]
 801c80a:	0c1b      	lsrs	r3, r3, #16
 801c80c:	041b      	lsls	r3, r3, #16
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d104      	bne.n	801c81c <SEQ_BitPosition+0x24>
 801c812:	2310      	movs	r3, #16
 801c814:	73fb      	strb	r3, [r7, #15]
 801c816:	68bb      	ldr	r3, [r7, #8]
 801c818:	041b      	lsls	r3, r3, #16
 801c81a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c81c:	68bb      	ldr	r3, [r7, #8]
 801c81e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801c822:	2b00      	cmp	r3, #0
 801c824:	d105      	bne.n	801c832 <SEQ_BitPosition+0x3a>
 801c826:	7bfb      	ldrb	r3, [r7, #15]
 801c828:	3308      	adds	r3, #8
 801c82a:	73fb      	strb	r3, [r7, #15]
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	021b      	lsls	r3, r3, #8
 801c830:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c832:	68bb      	ldr	r3, [r7, #8]
 801c834:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d105      	bne.n	801c848 <SEQ_BitPosition+0x50>
 801c83c:	7bfb      	ldrb	r3, [r7, #15]
 801c83e:	3304      	adds	r3, #4
 801c840:	73fb      	strb	r3, [r7, #15]
 801c842:	68bb      	ldr	r3, [r7, #8]
 801c844:	011b      	lsls	r3, r3, #4
 801c846:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c848:	68bb      	ldr	r3, [r7, #8]
 801c84a:	0f1b      	lsrs	r3, r3, #28
 801c84c:	4a06      	ldr	r2, [pc, #24]	; (801c868 <SEQ_BitPosition+0x70>)
 801c84e:	5cd2      	ldrb	r2, [r2, r3]
 801c850:	7bfb      	ldrb	r3, [r7, #15]
 801c852:	4413      	add	r3, r2
 801c854:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c856:	7bfb      	ldrb	r3, [r7, #15]
 801c858:	f1c3 031f 	rsb	r3, r3, #31
 801c85c:	b2db      	uxtb	r3, r3
}
 801c85e:	4618      	mov	r0, r3
 801c860:	3714      	adds	r7, #20
 801c862:	46bd      	mov	sp, r7
 801c864:	bc80      	pop	{r7}
 801c866:	4770      	bx	lr
 801c868:	0801dfdc 	.word	0x0801dfdc

0801c86c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c86c:	b580      	push	{r7, lr}
 801c86e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c870:	4b04      	ldr	r3, [pc, #16]	; (801c884 <UTIL_TIMER_Init+0x18>)
 801c872:	2200      	movs	r2, #0
 801c874:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c876:	4b04      	ldr	r3, [pc, #16]	; (801c888 <UTIL_TIMER_Init+0x1c>)
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	4798      	blx	r3
 801c87c:	4603      	mov	r3, r0
}
 801c87e:	4618      	mov	r0, r3
 801c880:	bd80      	pop	{r7, pc}
 801c882:	bf00      	nop
 801c884:	20002214 	.word	0x20002214
 801c888:	0801dae4 	.word	0x0801dae4

0801c88c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c88c:	b580      	push	{r7, lr}
 801c88e:	b084      	sub	sp, #16
 801c890:	af00      	add	r7, sp, #0
 801c892:	60f8      	str	r0, [r7, #12]
 801c894:	60b9      	str	r1, [r7, #8]
 801c896:	603b      	str	r3, [r7, #0]
 801c898:	4613      	mov	r3, r2
 801c89a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d023      	beq.n	801c8ea <UTIL_TIMER_Create+0x5e>
 801c8a2:	683b      	ldr	r3, [r7, #0]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d020      	beq.n	801c8ea <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	2200      	movs	r2, #0
 801c8ac:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c8ae:	4b11      	ldr	r3, [pc, #68]	; (801c8f4 <UTIL_TIMER_Create+0x68>)
 801c8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8b2:	68b8      	ldr	r0, [r7, #8]
 801c8b4:	4798      	blx	r3
 801c8b6:	4602      	mov	r2, r0
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	2200      	movs	r2, #0
 801c8c0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	2200      	movs	r2, #0
 801c8c6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	2200      	movs	r2, #0
 801c8cc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	683a      	ldr	r2, [r7, #0]
 801c8d2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	69ba      	ldr	r2, [r7, #24]
 801c8d8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	79fa      	ldrb	r2, [r7, #7]
 801c8de:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	2200      	movs	r2, #0
 801c8e4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	e000      	b.n	801c8ec <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c8ea:	2301      	movs	r3, #1
  }
}
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	3710      	adds	r7, #16
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	bd80      	pop	{r7, pc}
 801c8f4:	0801dae4 	.word	0x0801dae4

0801c8f8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c8f8:	b580      	push	{r7, lr}
 801c8fa:	b08a      	sub	sp, #40	; 0x28
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c900:	2300      	movs	r3, #0
 801c902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d056      	beq.n	801c9ba <UTIL_TIMER_Start+0xc2>
 801c90c:	6878      	ldr	r0, [r7, #4]
 801c90e:	f000 f9a9 	bl	801cc64 <TimerExists>
 801c912:	4603      	mov	r3, r0
 801c914:	f083 0301 	eor.w	r3, r3, #1
 801c918:	b2db      	uxtb	r3, r3
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d04d      	beq.n	801c9ba <UTIL_TIMER_Start+0xc2>
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	7a5b      	ldrb	r3, [r3, #9]
 801c922:	2b00      	cmp	r3, #0
 801c924:	d149      	bne.n	801c9ba <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c926:	f3ef 8310 	mrs	r3, PRIMASK
 801c92a:	613b      	str	r3, [r7, #16]
  return(result);
 801c92c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c92e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c930:	b672      	cpsid	i
}
 801c932:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	685b      	ldr	r3, [r3, #4]
 801c938:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c93a:	4b24      	ldr	r3, [pc, #144]	; (801c9cc <UTIL_TIMER_Start+0xd4>)
 801c93c:	6a1b      	ldr	r3, [r3, #32]
 801c93e:	4798      	blx	r3
 801c940:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c942:	6a3a      	ldr	r2, [r7, #32]
 801c944:	69bb      	ldr	r3, [r7, #24]
 801c946:	429a      	cmp	r2, r3
 801c948:	d201      	bcs.n	801c94e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c94a:	69bb      	ldr	r3, [r7, #24]
 801c94c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	6a3a      	ldr	r2, [r7, #32]
 801c952:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	2200      	movs	r2, #0
 801c958:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	2201      	movs	r2, #1
 801c95e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	2200      	movs	r2, #0
 801c964:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c966:	4b1a      	ldr	r3, [pc, #104]	; (801c9d0 <UTIL_TIMER_Start+0xd8>)
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d106      	bne.n	801c97c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c96e:	4b17      	ldr	r3, [pc, #92]	; (801c9cc <UTIL_TIMER_Start+0xd4>)
 801c970:	691b      	ldr	r3, [r3, #16]
 801c972:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c974:	6878      	ldr	r0, [r7, #4]
 801c976:	f000 f9eb 	bl	801cd50 <TimerInsertNewHeadTimer>
 801c97a:	e017      	b.n	801c9ac <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c97c:	4b13      	ldr	r3, [pc, #76]	; (801c9cc <UTIL_TIMER_Start+0xd4>)
 801c97e:	699b      	ldr	r3, [r3, #24]
 801c980:	4798      	blx	r3
 801c982:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	681a      	ldr	r2, [r3, #0]
 801c988:	697b      	ldr	r3, [r7, #20]
 801c98a:	441a      	add	r2, r3
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681a      	ldr	r2, [r3, #0]
 801c994:	4b0e      	ldr	r3, [pc, #56]	; (801c9d0 <UTIL_TIMER_Start+0xd8>)
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	429a      	cmp	r2, r3
 801c99c:	d203      	bcs.n	801c9a6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c99e:	6878      	ldr	r0, [r7, #4]
 801c9a0:	f000 f9d6 	bl	801cd50 <TimerInsertNewHeadTimer>
 801c9a4:	e002      	b.n	801c9ac <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c9a6:	6878      	ldr	r0, [r7, #4]
 801c9a8:	f000 f9a2 	bl	801ccf0 <TimerInsertTimer>
 801c9ac:	69fb      	ldr	r3, [r7, #28]
 801c9ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	f383 8810 	msr	PRIMASK, r3
}
 801c9b6:	bf00      	nop
  {
 801c9b8:	e002      	b.n	801c9c0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c9ba:	2301      	movs	r3, #1
 801c9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801c9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	3728      	adds	r7, #40	; 0x28
 801c9c8:	46bd      	mov	sp, r7
 801c9ca:	bd80      	pop	{r7, pc}
 801c9cc:	0801dae4 	.word	0x0801dae4
 801c9d0:	20002214 	.word	0x20002214

0801c9d4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b088      	sub	sp, #32
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c9dc:	2300      	movs	r3, #0
 801c9de:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d05b      	beq.n	801ca9e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9e6:	f3ef 8310 	mrs	r3, PRIMASK
 801c9ea:	60fb      	str	r3, [r7, #12]
  return(result);
 801c9ec:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c9ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9f0:	b672      	cpsid	i
}
 801c9f2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c9f4:	4b2d      	ldr	r3, [pc, #180]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c9fa:	4b2c      	ldr	r3, [pc, #176]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	2201      	movs	r2, #1
 801ca04:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ca06:	4b29      	ldr	r3, [pc, #164]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d041      	beq.n	801ca92 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	2200      	movs	r2, #0
 801ca12:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ca14:	4b25      	ldr	r3, [pc, #148]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	687a      	ldr	r2, [r7, #4]
 801ca1a:	429a      	cmp	r2, r3
 801ca1c:	d134      	bne.n	801ca88 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ca1e:	4b23      	ldr	r3, [pc, #140]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	2200      	movs	r2, #0
 801ca24:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ca26:	4b21      	ldr	r3, [pc, #132]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	695b      	ldr	r3, [r3, #20]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d00a      	beq.n	801ca46 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ca30:	4b1e      	ldr	r3, [pc, #120]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	695b      	ldr	r3, [r3, #20]
 801ca36:	4a1d      	ldr	r2, [pc, #116]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca38:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ca3a:	4b1c      	ldr	r3, [pc, #112]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	4618      	mov	r0, r3
 801ca40:	f000 f92c 	bl	801cc9c <TimerSetTimeout>
 801ca44:	e023      	b.n	801ca8e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ca46:	4b1a      	ldr	r3, [pc, #104]	; (801cab0 <UTIL_TIMER_Stop+0xdc>)
 801ca48:	68db      	ldr	r3, [r3, #12]
 801ca4a:	4798      	blx	r3
            TimerListHead = NULL;
 801ca4c:	4b17      	ldr	r3, [pc, #92]	; (801caac <UTIL_TIMER_Stop+0xd8>)
 801ca4e:	2200      	movs	r2, #0
 801ca50:	601a      	str	r2, [r3, #0]
 801ca52:	e01c      	b.n	801ca8e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ca54:	697a      	ldr	r2, [r7, #20]
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	d110      	bne.n	801ca7e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ca5c:	697b      	ldr	r3, [r7, #20]
 801ca5e:	695b      	ldr	r3, [r3, #20]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d006      	beq.n	801ca72 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ca64:	697b      	ldr	r3, [r7, #20]
 801ca66:	695b      	ldr	r3, [r3, #20]
 801ca68:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ca6a:	69bb      	ldr	r3, [r7, #24]
 801ca6c:	697a      	ldr	r2, [r7, #20]
 801ca6e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ca70:	e00d      	b.n	801ca8e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ca72:	2300      	movs	r3, #0
 801ca74:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ca76:	69bb      	ldr	r3, [r7, #24]
 801ca78:	697a      	ldr	r2, [r7, #20]
 801ca7a:	615a      	str	r2, [r3, #20]
            break;
 801ca7c:	e007      	b.n	801ca8e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ca7e:	697b      	ldr	r3, [r7, #20]
 801ca80:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ca82:	697b      	ldr	r3, [r7, #20]
 801ca84:	695b      	ldr	r3, [r3, #20]
 801ca86:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ca88:	697b      	ldr	r3, [r7, #20]
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d1e2      	bne.n	801ca54 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ca8e:	2300      	movs	r3, #0
 801ca90:	77fb      	strb	r3, [r7, #31]
 801ca92:	693b      	ldr	r3, [r7, #16]
 801ca94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca96:	68bb      	ldr	r3, [r7, #8]
 801ca98:	f383 8810 	msr	PRIMASK, r3
}
 801ca9c:	e001      	b.n	801caa2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ca9e:	2301      	movs	r3, #1
 801caa0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801caa2:	7ffb      	ldrb	r3, [r7, #31]
}
 801caa4:	4618      	mov	r0, r3
 801caa6:	3720      	adds	r7, #32
 801caa8:	46bd      	mov	sp, r7
 801caaa:	bd80      	pop	{r7, pc}
 801caac:	20002214 	.word	0x20002214
 801cab0:	0801dae4 	.word	0x0801dae4

0801cab4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cab4:	b580      	push	{r7, lr}
 801cab6:	b084      	sub	sp, #16
 801cab8:	af00      	add	r7, sp, #0
 801caba:	6078      	str	r0, [r7, #4]
 801cabc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cabe:	2300      	movs	r3, #0
 801cac0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d102      	bne.n	801cace <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801cac8:	2301      	movs	r3, #1
 801caca:	73fb      	strb	r3, [r7, #15]
 801cacc:	e014      	b.n	801caf8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cace:	4b0d      	ldr	r3, [pc, #52]	; (801cb04 <UTIL_TIMER_SetPeriod+0x50>)
 801cad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cad2:	6838      	ldr	r0, [r7, #0]
 801cad4:	4798      	blx	r3
 801cad6:	4602      	mov	r2, r0
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cadc:	6878      	ldr	r0, [r7, #4]
 801cade:	f000 f8c1 	bl	801cc64 <TimerExists>
 801cae2:	4603      	mov	r3, r0
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d007      	beq.n	801caf8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cae8:	6878      	ldr	r0, [r7, #4]
 801caea:	f7ff ff73 	bl	801c9d4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801caee:	6878      	ldr	r0, [r7, #4]
 801caf0:	f7ff ff02 	bl	801c8f8 <UTIL_TIMER_Start>
 801caf4:	4603      	mov	r3, r0
 801caf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801caf8:	7bfb      	ldrb	r3, [r7, #15]
}
 801cafa:	4618      	mov	r0, r3
 801cafc:	3710      	adds	r7, #16
 801cafe:	46bd      	mov	sp, r7
 801cb00:	bd80      	pop	{r7, pc}
 801cb02:	bf00      	nop
 801cb04:	0801dae4 	.word	0x0801dae4

0801cb08 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cb08:	b590      	push	{r4, r7, lr}
 801cb0a:	b089      	sub	sp, #36	; 0x24
 801cb0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb0e:	f3ef 8310 	mrs	r3, PRIMASK
 801cb12:	60bb      	str	r3, [r7, #8]
  return(result);
 801cb14:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cb16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb18:	b672      	cpsid	i
}
 801cb1a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cb1c:	4b38      	ldr	r3, [pc, #224]	; (801cc00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cb1e:	695b      	ldr	r3, [r3, #20]
 801cb20:	4798      	blx	r3
 801cb22:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cb24:	4b36      	ldr	r3, [pc, #216]	; (801cc00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cb26:	691b      	ldr	r3, [r3, #16]
 801cb28:	4798      	blx	r3
 801cb2a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cb2c:	693a      	ldr	r2, [r7, #16]
 801cb2e:	697b      	ldr	r3, [r7, #20]
 801cb30:	1ad3      	subs	r3, r2, r3
 801cb32:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cb34:	4b33      	ldr	r3, [pc, #204]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d037      	beq.n	801cbac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801cb3c:	4b31      	ldr	r3, [pc, #196]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cb42:	69fb      	ldr	r3, [r7, #28]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	68fa      	ldr	r2, [r7, #12]
 801cb48:	429a      	cmp	r2, r3
 801cb4a:	d206      	bcs.n	801cb5a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801cb4c:	69fb      	ldr	r3, [r7, #28]
 801cb4e:	681a      	ldr	r2, [r3, #0]
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	1ad2      	subs	r2, r2, r3
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	601a      	str	r2, [r3, #0]
 801cb58:	e002      	b.n	801cb60 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801cb5a:	69fb      	ldr	r3, [r7, #28]
 801cb5c:	2200      	movs	r2, #0
 801cb5e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801cb60:	69fb      	ldr	r3, [r7, #28]
 801cb62:	695b      	ldr	r3, [r3, #20]
 801cb64:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801cb66:	69fb      	ldr	r3, [r7, #28]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d1ea      	bne.n	801cb42 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cb6c:	e01e      	b.n	801cbac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801cb6e:	4b25      	ldr	r3, [pc, #148]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cb74:	4b23      	ldr	r3, [pc, #140]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	695b      	ldr	r3, [r3, #20]
 801cb7a:	4a22      	ldr	r2, [pc, #136]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb7c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801cb7e:	69fb      	ldr	r3, [r7, #28]
 801cb80:	2200      	movs	r2, #0
 801cb82:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cb84:	69fb      	ldr	r3, [r7, #28]
 801cb86:	2200      	movs	r2, #0
 801cb88:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cb8a:	69fb      	ldr	r3, [r7, #28]
 801cb8c:	68db      	ldr	r3, [r3, #12]
 801cb8e:	69fa      	ldr	r2, [r7, #28]
 801cb90:	6912      	ldr	r2, [r2, #16]
 801cb92:	4610      	mov	r0, r2
 801cb94:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cb96:	69fb      	ldr	r3, [r7, #28]
 801cb98:	7adb      	ldrb	r3, [r3, #11]
 801cb9a:	2b01      	cmp	r3, #1
 801cb9c:	d106      	bne.n	801cbac <UTIL_TIMER_IRQ_Handler+0xa4>
 801cb9e:	69fb      	ldr	r3, [r7, #28]
 801cba0:	7a9b      	ldrb	r3, [r3, #10]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d102      	bne.n	801cbac <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801cba6:	69f8      	ldr	r0, [r7, #28]
 801cba8:	f7ff fea6 	bl	801c8f8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cbac:	4b15      	ldr	r3, [pc, #84]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d00d      	beq.n	801cbd0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801cbb4:	4b13      	ldr	r3, [pc, #76]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d0d7      	beq.n	801cb6e <UTIL_TIMER_IRQ_Handler+0x66>
 801cbbe:	4b11      	ldr	r3, [pc, #68]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cbc0:	681b      	ldr	r3, [r3, #0]
 801cbc2:	681c      	ldr	r4, [r3, #0]
 801cbc4:	4b0e      	ldr	r3, [pc, #56]	; (801cc00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cbc6:	699b      	ldr	r3, [r3, #24]
 801cbc8:	4798      	blx	r3
 801cbca:	4603      	mov	r3, r0
 801cbcc:	429c      	cmp	r4, r3
 801cbce:	d3ce      	bcc.n	801cb6e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cbd0:	4b0c      	ldr	r3, [pc, #48]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d009      	beq.n	801cbec <UTIL_TIMER_IRQ_Handler+0xe4>
 801cbd8:	4b0a      	ldr	r3, [pc, #40]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	7a1b      	ldrb	r3, [r3, #8]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d104      	bne.n	801cbec <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801cbe2:	4b08      	ldr	r3, [pc, #32]	; (801cc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f000 f858 	bl	801cc9c <TimerSetTimeout>
 801cbec:	69bb      	ldr	r3, [r7, #24]
 801cbee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	f383 8810 	msr	PRIMASK, r3
}
 801cbf6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cbf8:	bf00      	nop
 801cbfa:	3724      	adds	r7, #36	; 0x24
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	bd90      	pop	{r4, r7, pc}
 801cc00:	0801dae4 	.word	0x0801dae4
 801cc04:	20002214 	.word	0x20002214

0801cc08 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b082      	sub	sp, #8
 801cc0c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cc0e:	4b06      	ldr	r3, [pc, #24]	; (801cc28 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cc10:	69db      	ldr	r3, [r3, #28]
 801cc12:	4798      	blx	r3
 801cc14:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cc16:	4b04      	ldr	r3, [pc, #16]	; (801cc28 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc1a:	6878      	ldr	r0, [r7, #4]
 801cc1c:	4798      	blx	r3
 801cc1e:	4603      	mov	r3, r0
}
 801cc20:	4618      	mov	r0, r3
 801cc22:	3708      	adds	r7, #8
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bd80      	pop	{r7, pc}
 801cc28:	0801dae4 	.word	0x0801dae4

0801cc2c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b084      	sub	sp, #16
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cc34:	4b0a      	ldr	r3, [pc, #40]	; (801cc60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cc36:	69db      	ldr	r3, [r3, #28]
 801cc38:	4798      	blx	r3
 801cc3a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cc3c:	4b08      	ldr	r3, [pc, #32]	; (801cc60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc40:	6878      	ldr	r0, [r7, #4]
 801cc42:	4798      	blx	r3
 801cc44:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cc46:	4b06      	ldr	r3, [pc, #24]	; (801cc60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc4a:	68f9      	ldr	r1, [r7, #12]
 801cc4c:	68ba      	ldr	r2, [r7, #8]
 801cc4e:	1a8a      	subs	r2, r1, r2
 801cc50:	4610      	mov	r0, r2
 801cc52:	4798      	blx	r3
 801cc54:	4603      	mov	r3, r0
}
 801cc56:	4618      	mov	r0, r3
 801cc58:	3710      	adds	r7, #16
 801cc5a:	46bd      	mov	sp, r7
 801cc5c:	bd80      	pop	{r7, pc}
 801cc5e:	bf00      	nop
 801cc60:	0801dae4 	.word	0x0801dae4

0801cc64 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cc64:	b480      	push	{r7}
 801cc66:	b085      	sub	sp, #20
 801cc68:	af00      	add	r7, sp, #0
 801cc6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cc6c:	4b0a      	ldr	r3, [pc, #40]	; (801cc98 <TimerExists+0x34>)
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cc72:	e008      	b.n	801cc86 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cc74:	68fa      	ldr	r2, [r7, #12]
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	429a      	cmp	r2, r3
 801cc7a:	d101      	bne.n	801cc80 <TimerExists+0x1c>
    {
      return true;
 801cc7c:	2301      	movs	r3, #1
 801cc7e:	e006      	b.n	801cc8e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	695b      	ldr	r3, [r3, #20]
 801cc84:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d1f3      	bne.n	801cc74 <TimerExists+0x10>
  }
  return false;
 801cc8c:	2300      	movs	r3, #0
}
 801cc8e:	4618      	mov	r0, r3
 801cc90:	3714      	adds	r7, #20
 801cc92:	46bd      	mov	sp, r7
 801cc94:	bc80      	pop	{r7}
 801cc96:	4770      	bx	lr
 801cc98:	20002214 	.word	0x20002214

0801cc9c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cc9c:	b590      	push	{r4, r7, lr}
 801cc9e:	b085      	sub	sp, #20
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cca4:	4b11      	ldr	r3, [pc, #68]	; (801ccec <TimerSetTimeout+0x50>)
 801cca6:	6a1b      	ldr	r3, [r3, #32]
 801cca8:	4798      	blx	r3
 801ccaa:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2201      	movs	r2, #1
 801ccb0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	681c      	ldr	r4, [r3, #0]
 801ccb6:	4b0d      	ldr	r3, [pc, #52]	; (801ccec <TimerSetTimeout+0x50>)
 801ccb8:	699b      	ldr	r3, [r3, #24]
 801ccba:	4798      	blx	r3
 801ccbc:	4602      	mov	r2, r0
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	4413      	add	r3, r2
 801ccc2:	429c      	cmp	r4, r3
 801ccc4:	d207      	bcs.n	801ccd6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ccc6:	4b09      	ldr	r3, [pc, #36]	; (801ccec <TimerSetTimeout+0x50>)
 801ccc8:	699b      	ldr	r3, [r3, #24]
 801ccca:	4798      	blx	r3
 801cccc:	4602      	mov	r2, r0
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	441a      	add	r2, r3
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801ccd6:	4b05      	ldr	r3, [pc, #20]	; (801ccec <TimerSetTimeout+0x50>)
 801ccd8:	689b      	ldr	r3, [r3, #8]
 801ccda:	687a      	ldr	r2, [r7, #4]
 801ccdc:	6812      	ldr	r2, [r2, #0]
 801ccde:	4610      	mov	r0, r2
 801cce0:	4798      	blx	r3
}
 801cce2:	bf00      	nop
 801cce4:	3714      	adds	r7, #20
 801cce6:	46bd      	mov	sp, r7
 801cce8:	bd90      	pop	{r4, r7, pc}
 801ccea:	bf00      	nop
 801ccec:	0801dae4 	.word	0x0801dae4

0801ccf0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801ccf0:	b480      	push	{r7}
 801ccf2:	b085      	sub	sp, #20
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ccf8:	4b14      	ldr	r3, [pc, #80]	; (801cd4c <TimerInsertTimer+0x5c>)
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801ccfe:	4b13      	ldr	r3, [pc, #76]	; (801cd4c <TimerInsertTimer+0x5c>)
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	695b      	ldr	r3, [r3, #20]
 801cd04:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cd06:	e012      	b.n	801cd2e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	681a      	ldr	r2, [r3, #0]
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	429a      	cmp	r2, r3
 801cd12:	d905      	bls.n	801cd20 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cd14:	68bb      	ldr	r3, [r7, #8]
 801cd16:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	695b      	ldr	r3, [r3, #20]
 801cd1c:	60bb      	str	r3, [r7, #8]
 801cd1e:	e006      	b.n	801cd2e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	687a      	ldr	r2, [r7, #4]
 801cd24:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	68ba      	ldr	r2, [r7, #8]
 801cd2a:	615a      	str	r2, [r3, #20]
        return;
 801cd2c:	e009      	b.n	801cd42 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	695b      	ldr	r3, [r3, #20]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d1e8      	bne.n	801cd08 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	687a      	ldr	r2, [r7, #4]
 801cd3a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	615a      	str	r2, [r3, #20]
}
 801cd42:	3714      	adds	r7, #20
 801cd44:	46bd      	mov	sp, r7
 801cd46:	bc80      	pop	{r7}
 801cd48:	4770      	bx	lr
 801cd4a:	bf00      	nop
 801cd4c:	20002214 	.word	0x20002214

0801cd50 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b084      	sub	sp, #16
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cd58:	4b0b      	ldr	r3, [pc, #44]	; (801cd88 <TimerInsertNewHeadTimer+0x38>)
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801cd5e:	68fb      	ldr	r3, [r7, #12]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d002      	beq.n	801cd6a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801cd64:	68fb      	ldr	r3, [r7, #12]
 801cd66:	2200      	movs	r2, #0
 801cd68:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	68fa      	ldr	r2, [r7, #12]
 801cd6e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801cd70:	4a05      	ldr	r2, [pc, #20]	; (801cd88 <TimerInsertNewHeadTimer+0x38>)
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801cd76:	4b04      	ldr	r3, [pc, #16]	; (801cd88 <TimerInsertNewHeadTimer+0x38>)
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	4618      	mov	r0, r3
 801cd7c:	f7ff ff8e 	bl	801cc9c <TimerSetTimeout>
}
 801cd80:	bf00      	nop
 801cd82:	3710      	adds	r7, #16
 801cd84:	46bd      	mov	sp, r7
 801cd86:	bd80      	pop	{r7, pc}
 801cd88:	20002214 	.word	0x20002214

0801cd8c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801cd90:	2218      	movs	r2, #24
 801cd92:	2100      	movs	r1, #0
 801cd94:	4807      	ldr	r0, [pc, #28]	; (801cdb4 <UTIL_ADV_TRACE_Init+0x28>)
 801cd96:	f7fe fff6 	bl	801bd86 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801cd9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cd9e:	2100      	movs	r1, #0
 801cda0:	4805      	ldr	r0, [pc, #20]	; (801cdb8 <UTIL_ADV_TRACE_Init+0x2c>)
 801cda2:	f7fe fff0 	bl	801bd86 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801cda6:	4b05      	ldr	r3, [pc, #20]	; (801cdbc <UTIL_ADV_TRACE_Init+0x30>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	4805      	ldr	r0, [pc, #20]	; (801cdc0 <UTIL_ADV_TRACE_Init+0x34>)
 801cdac:	4798      	blx	r3
 801cdae:	4603      	mov	r3, r0
}
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	bd80      	pop	{r7, pc}
 801cdb4:	20002218 	.word	0x20002218
 801cdb8:	20002230 	.word	0x20002230
 801cdbc:	0801db24 	.word	0x0801db24
 801cdc0:	0801d02d 	.word	0x0801d02d

0801cdc4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801cdc4:	b480      	push	{r7}
 801cdc6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cdc8:	4b06      	ldr	r3, [pc, #24]	; (801cde4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cdca:	8a5a      	ldrh	r2, [r3, #18]
 801cdcc:	4b05      	ldr	r3, [pc, #20]	; (801cde4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cdce:	8a1b      	ldrh	r3, [r3, #16]
 801cdd0:	429a      	cmp	r2, r3
 801cdd2:	d101      	bne.n	801cdd8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801cdd4:	2301      	movs	r3, #1
 801cdd6:	e000      	b.n	801cdda <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801cdd8:	2300      	movs	r3, #0
}
 801cdda:	4618      	mov	r0, r3
 801cddc:	46bd      	mov	sp, r7
 801cdde:	bc80      	pop	{r7}
 801cde0:	4770      	bx	lr
 801cde2:	bf00      	nop
 801cde4:	20002218 	.word	0x20002218

0801cde8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801cde8:	b408      	push	{r3}
 801cdea:	b580      	push	{r7, lr}
 801cdec:	b08d      	sub	sp, #52	; 0x34
 801cdee:	af00      	add	r7, sp, #0
 801cdf0:	60f8      	str	r0, [r7, #12]
 801cdf2:	60b9      	str	r1, [r7, #8]
 801cdf4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801cdf6:	2300      	movs	r3, #0
 801cdf8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801cdfe:	4b37      	ldr	r3, [pc, #220]	; (801cedc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ce00:	7a1b      	ldrb	r3, [r3, #8]
 801ce02:	461a      	mov	r2, r3
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	4293      	cmp	r3, r2
 801ce08:	d902      	bls.n	801ce10 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801ce0a:	f06f 0304 	mvn.w	r3, #4
 801ce0e:	e05e      	b.n	801cece <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801ce10:	4b32      	ldr	r3, [pc, #200]	; (801cedc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ce12:	68da      	ldr	r2, [r3, #12]
 801ce14:	68bb      	ldr	r3, [r7, #8]
 801ce16:	4013      	ands	r3, r2
 801ce18:	68ba      	ldr	r2, [r7, #8]
 801ce1a:	429a      	cmp	r2, r3
 801ce1c:	d002      	beq.n	801ce24 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801ce1e:	f06f 0305 	mvn.w	r3, #5
 801ce22:	e054      	b.n	801cece <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801ce24:	4b2d      	ldr	r3, [pc, #180]	; (801cedc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ce26:	685b      	ldr	r3, [r3, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d00a      	beq.n	801ce42 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d007      	beq.n	801ce42 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801ce32:	4b2a      	ldr	r3, [pc, #168]	; (801cedc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ce34:	685b      	ldr	r3, [r3, #4]
 801ce36:	f107 0116 	add.w	r1, r7, #22
 801ce3a:	f107 0218 	add.w	r2, r7, #24
 801ce3e:	4610      	mov	r0, r2
 801ce40:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801ce42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ce46:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ce4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ce50:	4823      	ldr	r0, [pc, #140]	; (801cee0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ce52:	f7ff fa25 	bl	801c2a0 <tiny_vsnprintf_like>
 801ce56:	4603      	mov	r3, r0
 801ce58:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801ce5a:	f000 f9f1 	bl	801d240 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801ce5e:	8afa      	ldrh	r2, [r7, #22]
 801ce60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ce62:	4413      	add	r3, r2
 801ce64:	b29b      	uxth	r3, r3
 801ce66:	f107 0214 	add.w	r2, r7, #20
 801ce6a:	4611      	mov	r1, r2
 801ce6c:	4618      	mov	r0, r3
 801ce6e:	f000 f969 	bl	801d144 <TRACE_AllocateBufer>
 801ce72:	4603      	mov	r3, r0
 801ce74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce78:	d025      	beq.n	801cec6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ce7e:	e00e      	b.n	801ce9e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ce80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ce82:	8aba      	ldrh	r2, [r7, #20]
 801ce84:	3330      	adds	r3, #48	; 0x30
 801ce86:	443b      	add	r3, r7
 801ce88:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ce8c:	4b15      	ldr	r3, [pc, #84]	; (801cee4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ce8e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ce90:	8abb      	ldrh	r3, [r7, #20]
 801ce92:	3301      	adds	r3, #1
 801ce94:	b29b      	uxth	r3, r3
 801ce96:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ce98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ce9a:	3301      	adds	r3, #1
 801ce9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ce9e:	8afb      	ldrh	r3, [r7, #22]
 801cea0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801cea2:	429a      	cmp	r2, r3
 801cea4:	d3ec      	bcc.n	801ce80 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cea6:	8abb      	ldrh	r3, [r7, #20]
 801cea8:	461a      	mov	r2, r3
 801ceaa:	4b0e      	ldr	r3, [pc, #56]	; (801cee4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ceac:	18d0      	adds	r0, r2, r3
 801ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ceb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ceb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ceb6:	f7ff f9f3 	bl	801c2a0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ceba:	f000 f9df 	bl	801d27c <TRACE_UnLock>

    return TRACE_Send();
 801cebe:	f000 f831 	bl	801cf24 <TRACE_Send>
 801cec2:	4603      	mov	r3, r0
 801cec4:	e003      	b.n	801cece <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801cec6:	f000 f9d9 	bl	801d27c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ceca:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801cece:	4618      	mov	r0, r3
 801ced0:	3734      	adds	r7, #52	; 0x34
 801ced2:	46bd      	mov	sp, r7
 801ced4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ced8:	b001      	add	sp, #4
 801ceda:	4770      	bx	lr
 801cedc:	20002218 	.word	0x20002218
 801cee0:	20002630 	.word	0x20002630
 801cee4:	20002230 	.word	0x20002230

0801cee8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801cee8:	b480      	push	{r7}
 801ceea:	b083      	sub	sp, #12
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801cef0:	4a03      	ldr	r2, [pc, #12]	; (801cf00 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	6053      	str	r3, [r2, #4]
}
 801cef6:	bf00      	nop
 801cef8:	370c      	adds	r7, #12
 801cefa:	46bd      	mov	sp, r7
 801cefc:	bc80      	pop	{r7}
 801cefe:	4770      	bx	lr
 801cf00:	20002218 	.word	0x20002218

0801cf04 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801cf04:	b480      	push	{r7}
 801cf06:	b083      	sub	sp, #12
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801cf0e:	4a04      	ldr	r2, [pc, #16]	; (801cf20 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801cf10:	79fb      	ldrb	r3, [r7, #7]
 801cf12:	7213      	strb	r3, [r2, #8]
}
 801cf14:	bf00      	nop
 801cf16:	370c      	adds	r7, #12
 801cf18:	46bd      	mov	sp, r7
 801cf1a:	bc80      	pop	{r7}
 801cf1c:	4770      	bx	lr
 801cf1e:	bf00      	nop
 801cf20:	20002218 	.word	0x20002218

0801cf24 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b088      	sub	sp, #32
 801cf28:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801cf2e:	2300      	movs	r3, #0
 801cf30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf32:	f3ef 8310 	mrs	r3, PRIMASK
 801cf36:	613b      	str	r3, [r7, #16]
  return(result);
 801cf38:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cf3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf3c:	b672      	cpsid	i
}
 801cf3e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801cf40:	f000 f9ba 	bl	801d2b8 <TRACE_IsLocked>
 801cf44:	4603      	mov	r3, r0
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d15d      	bne.n	801d006 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801cf4a:	f000 f979 	bl	801d240 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801cf4e:	4b34      	ldr	r3, [pc, #208]	; (801d020 <TRACE_Send+0xfc>)
 801cf50:	8a1a      	ldrh	r2, [r3, #16]
 801cf52:	4b33      	ldr	r3, [pc, #204]	; (801d020 <TRACE_Send+0xfc>)
 801cf54:	8a5b      	ldrh	r3, [r3, #18]
 801cf56:	429a      	cmp	r2, r3
 801cf58:	d04d      	beq.n	801cff6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cf5a:	4b31      	ldr	r3, [pc, #196]	; (801d020 <TRACE_Send+0xfc>)
 801cf5c:	789b      	ldrb	r3, [r3, #2]
 801cf5e:	2b01      	cmp	r3, #1
 801cf60:	d117      	bne.n	801cf92 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801cf62:	4b2f      	ldr	r3, [pc, #188]	; (801d020 <TRACE_Send+0xfc>)
 801cf64:	881a      	ldrh	r2, [r3, #0]
 801cf66:	4b2e      	ldr	r3, [pc, #184]	; (801d020 <TRACE_Send+0xfc>)
 801cf68:	8a1b      	ldrh	r3, [r3, #16]
 801cf6a:	1ad3      	subs	r3, r2, r3
 801cf6c:	b29a      	uxth	r2, r3
 801cf6e:	4b2c      	ldr	r3, [pc, #176]	; (801d020 <TRACE_Send+0xfc>)
 801cf70:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cf72:	4b2b      	ldr	r3, [pc, #172]	; (801d020 <TRACE_Send+0xfc>)
 801cf74:	2202      	movs	r2, #2
 801cf76:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cf78:	4b29      	ldr	r3, [pc, #164]	; (801d020 <TRACE_Send+0xfc>)
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cf7e:	4b28      	ldr	r3, [pc, #160]	; (801d020 <TRACE_Send+0xfc>)
 801cf80:	8a9b      	ldrh	r3, [r3, #20]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d105      	bne.n	801cf92 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cf86:	4b26      	ldr	r3, [pc, #152]	; (801d020 <TRACE_Send+0xfc>)
 801cf88:	2200      	movs	r2, #0
 801cf8a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cf8c:	4b24      	ldr	r3, [pc, #144]	; (801d020 <TRACE_Send+0xfc>)
 801cf8e:	2200      	movs	r2, #0
 801cf90:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cf92:	4b23      	ldr	r3, [pc, #140]	; (801d020 <TRACE_Send+0xfc>)
 801cf94:	789b      	ldrb	r3, [r3, #2]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d115      	bne.n	801cfc6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cf9a:	4b21      	ldr	r3, [pc, #132]	; (801d020 <TRACE_Send+0xfc>)
 801cf9c:	8a5a      	ldrh	r2, [r3, #18]
 801cf9e:	4b20      	ldr	r3, [pc, #128]	; (801d020 <TRACE_Send+0xfc>)
 801cfa0:	8a1b      	ldrh	r3, [r3, #16]
 801cfa2:	429a      	cmp	r2, r3
 801cfa4:	d908      	bls.n	801cfb8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cfa6:	4b1e      	ldr	r3, [pc, #120]	; (801d020 <TRACE_Send+0xfc>)
 801cfa8:	8a5a      	ldrh	r2, [r3, #18]
 801cfaa:	4b1d      	ldr	r3, [pc, #116]	; (801d020 <TRACE_Send+0xfc>)
 801cfac:	8a1b      	ldrh	r3, [r3, #16]
 801cfae:	1ad3      	subs	r3, r2, r3
 801cfb0:	b29a      	uxth	r2, r3
 801cfb2:	4b1b      	ldr	r3, [pc, #108]	; (801d020 <TRACE_Send+0xfc>)
 801cfb4:	829a      	strh	r2, [r3, #20]
 801cfb6:	e006      	b.n	801cfc6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cfb8:	4b19      	ldr	r3, [pc, #100]	; (801d020 <TRACE_Send+0xfc>)
 801cfba:	8a1b      	ldrh	r3, [r3, #16]
 801cfbc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cfc0:	b29a      	uxth	r2, r3
 801cfc2:	4b17      	ldr	r3, [pc, #92]	; (801d020 <TRACE_Send+0xfc>)
 801cfc4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cfc6:	4b16      	ldr	r3, [pc, #88]	; (801d020 <TRACE_Send+0xfc>)
 801cfc8:	8a1b      	ldrh	r3, [r3, #16]
 801cfca:	461a      	mov	r2, r3
 801cfcc:	4b15      	ldr	r3, [pc, #84]	; (801d024 <TRACE_Send+0x100>)
 801cfce:	4413      	add	r3, r2
 801cfd0:	61bb      	str	r3, [r7, #24]
 801cfd2:	697b      	ldr	r3, [r7, #20]
 801cfd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	f383 8810 	msr	PRIMASK, r3
}
 801cfdc:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801cfde:	f7e5 fa73 	bl	80024c8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cfe2:	4b11      	ldr	r3, [pc, #68]	; (801d028 <TRACE_Send+0x104>)
 801cfe4:	68db      	ldr	r3, [r3, #12]
 801cfe6:	4a0e      	ldr	r2, [pc, #56]	; (801d020 <TRACE_Send+0xfc>)
 801cfe8:	8a92      	ldrh	r2, [r2, #20]
 801cfea:	4611      	mov	r1, r2
 801cfec:	69b8      	ldr	r0, [r7, #24]
 801cfee:	4798      	blx	r3
 801cff0:	4603      	mov	r3, r0
 801cff2:	77fb      	strb	r3, [r7, #31]
 801cff4:	e00d      	b.n	801d012 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801cff6:	f000 f941 	bl	801d27c <TRACE_UnLock>
 801cffa:	697b      	ldr	r3, [r7, #20]
 801cffc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cffe:	68bb      	ldr	r3, [r7, #8]
 801d000:	f383 8810 	msr	PRIMASK, r3
}
 801d004:	e005      	b.n	801d012 <TRACE_Send+0xee>
 801d006:	697b      	ldr	r3, [r7, #20]
 801d008:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	f383 8810 	msr	PRIMASK, r3
}
 801d010:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d012:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d016:	4618      	mov	r0, r3
 801d018:	3720      	adds	r7, #32
 801d01a:	46bd      	mov	sp, r7
 801d01c:	bd80      	pop	{r7, pc}
 801d01e:	bf00      	nop
 801d020:	20002218 	.word	0x20002218
 801d024:	20002230 	.word	0x20002230
 801d028:	0801db24 	.word	0x0801db24

0801d02c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b088      	sub	sp, #32
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d034:	2300      	movs	r3, #0
 801d036:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d038:	f3ef 8310 	mrs	r3, PRIMASK
 801d03c:	617b      	str	r3, [r7, #20]
  return(result);
 801d03e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d040:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d042:	b672      	cpsid	i
}
 801d044:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d046:	4b3c      	ldr	r3, [pc, #240]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d048:	789b      	ldrb	r3, [r3, #2]
 801d04a:	2b02      	cmp	r3, #2
 801d04c:	d106      	bne.n	801d05c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d04e:	4b3a      	ldr	r3, [pc, #232]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d050:	2200      	movs	r2, #0
 801d052:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d054:	4b38      	ldr	r3, [pc, #224]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d056:	2200      	movs	r2, #0
 801d058:	821a      	strh	r2, [r3, #16]
 801d05a:	e00a      	b.n	801d072 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d05c:	4b36      	ldr	r3, [pc, #216]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d05e:	8a1a      	ldrh	r2, [r3, #16]
 801d060:	4b35      	ldr	r3, [pc, #212]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d062:	8a9b      	ldrh	r3, [r3, #20]
 801d064:	4413      	add	r3, r2
 801d066:	b29b      	uxth	r3, r3
 801d068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d06c:	b29a      	uxth	r2, r3
 801d06e:	4b32      	ldr	r3, [pc, #200]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d070:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d072:	4b31      	ldr	r3, [pc, #196]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d074:	8a1a      	ldrh	r2, [r3, #16]
 801d076:	4b30      	ldr	r3, [pc, #192]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d078:	8a5b      	ldrh	r3, [r3, #18]
 801d07a:	429a      	cmp	r2, r3
 801d07c:	d04d      	beq.n	801d11a <TRACE_TxCpltCallback+0xee>
 801d07e:	4b2e      	ldr	r3, [pc, #184]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d080:	8adb      	ldrh	r3, [r3, #22]
 801d082:	2b01      	cmp	r3, #1
 801d084:	d149      	bne.n	801d11a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d086:	4b2c      	ldr	r3, [pc, #176]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d088:	789b      	ldrb	r3, [r3, #2]
 801d08a:	2b01      	cmp	r3, #1
 801d08c:	d117      	bne.n	801d0be <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d08e:	4b2a      	ldr	r3, [pc, #168]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d090:	881a      	ldrh	r2, [r3, #0]
 801d092:	4b29      	ldr	r3, [pc, #164]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d094:	8a1b      	ldrh	r3, [r3, #16]
 801d096:	1ad3      	subs	r3, r2, r3
 801d098:	b29a      	uxth	r2, r3
 801d09a:	4b27      	ldr	r3, [pc, #156]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d09c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d09e:	4b26      	ldr	r3, [pc, #152]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0a0:	2202      	movs	r2, #2
 801d0a2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d0a4:	4b24      	ldr	r3, [pc, #144]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0a6:	2200      	movs	r2, #0
 801d0a8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d0aa:	4b23      	ldr	r3, [pc, #140]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0ac:	8a9b      	ldrh	r3, [r3, #20]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d105      	bne.n	801d0be <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d0b2:	4b21      	ldr	r3, [pc, #132]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0b4:	2200      	movs	r2, #0
 801d0b6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d0b8:	4b1f      	ldr	r3, [pc, #124]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d0be:	4b1e      	ldr	r3, [pc, #120]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0c0:	789b      	ldrb	r3, [r3, #2]
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d115      	bne.n	801d0f2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d0c6:	4b1c      	ldr	r3, [pc, #112]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0c8:	8a5a      	ldrh	r2, [r3, #18]
 801d0ca:	4b1b      	ldr	r3, [pc, #108]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0cc:	8a1b      	ldrh	r3, [r3, #16]
 801d0ce:	429a      	cmp	r2, r3
 801d0d0:	d908      	bls.n	801d0e4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d0d2:	4b19      	ldr	r3, [pc, #100]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0d4:	8a5a      	ldrh	r2, [r3, #18]
 801d0d6:	4b18      	ldr	r3, [pc, #96]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0d8:	8a1b      	ldrh	r3, [r3, #16]
 801d0da:	1ad3      	subs	r3, r2, r3
 801d0dc:	b29a      	uxth	r2, r3
 801d0de:	4b16      	ldr	r3, [pc, #88]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0e0:	829a      	strh	r2, [r3, #20]
 801d0e2:	e006      	b.n	801d0f2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d0e4:	4b14      	ldr	r3, [pc, #80]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0e6:	8a1b      	ldrh	r3, [r3, #16]
 801d0e8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d0ec:	b29a      	uxth	r2, r3
 801d0ee:	4b12      	ldr	r3, [pc, #72]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0f0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d0f2:	4b11      	ldr	r3, [pc, #68]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d0f4:	8a1b      	ldrh	r3, [r3, #16]
 801d0f6:	461a      	mov	r2, r3
 801d0f8:	4b10      	ldr	r3, [pc, #64]	; (801d13c <TRACE_TxCpltCallback+0x110>)
 801d0fa:	4413      	add	r3, r2
 801d0fc:	61fb      	str	r3, [r7, #28]
 801d0fe:	69bb      	ldr	r3, [r7, #24]
 801d100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d102:	693b      	ldr	r3, [r7, #16]
 801d104:	f383 8810 	msr	PRIMASK, r3
}
 801d108:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d10a:	4b0d      	ldr	r3, [pc, #52]	; (801d140 <TRACE_TxCpltCallback+0x114>)
 801d10c:	68db      	ldr	r3, [r3, #12]
 801d10e:	4a0a      	ldr	r2, [pc, #40]	; (801d138 <TRACE_TxCpltCallback+0x10c>)
 801d110:	8a92      	ldrh	r2, [r2, #20]
 801d112:	4611      	mov	r1, r2
 801d114:	69f8      	ldr	r0, [r7, #28]
 801d116:	4798      	blx	r3
 801d118:	e00a      	b.n	801d130 <TRACE_TxCpltCallback+0x104>
 801d11a:	69bb      	ldr	r3, [r7, #24]
 801d11c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	f383 8810 	msr	PRIMASK, r3
}
 801d124:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d126:	f7e5 f9d7 	bl	80024d8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d12a:	f000 f8a7 	bl	801d27c <TRACE_UnLock>
  }
}
 801d12e:	bf00      	nop
 801d130:	bf00      	nop
 801d132:	3720      	adds	r7, #32
 801d134:	46bd      	mov	sp, r7
 801d136:	bd80      	pop	{r7, pc}
 801d138:	20002218 	.word	0x20002218
 801d13c:	20002230 	.word	0x20002230
 801d140:	0801db24 	.word	0x0801db24

0801d144 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d144:	b480      	push	{r7}
 801d146:	b087      	sub	sp, #28
 801d148:	af00      	add	r7, sp, #0
 801d14a:	4603      	mov	r3, r0
 801d14c:	6039      	str	r1, [r7, #0]
 801d14e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d154:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d156:	f3ef 8310 	mrs	r3, PRIMASK
 801d15a:	60fb      	str	r3, [r7, #12]
  return(result);
 801d15c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d15e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d160:	b672      	cpsid	i
}
 801d162:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d164:	4b35      	ldr	r3, [pc, #212]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d166:	8a5a      	ldrh	r2, [r3, #18]
 801d168:	4b34      	ldr	r3, [pc, #208]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d16a:	8a1b      	ldrh	r3, [r3, #16]
 801d16c:	429a      	cmp	r2, r3
 801d16e:	d11b      	bne.n	801d1a8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d170:	4b32      	ldr	r3, [pc, #200]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d172:	8a5b      	ldrh	r3, [r3, #18]
 801d174:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d178:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d17a:	88fa      	ldrh	r2, [r7, #6]
 801d17c:	8afb      	ldrh	r3, [r7, #22]
 801d17e:	429a      	cmp	r2, r3
 801d180:	d33a      	bcc.n	801d1f8 <TRACE_AllocateBufer+0xb4>
 801d182:	4b2e      	ldr	r3, [pc, #184]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d184:	8a1b      	ldrh	r3, [r3, #16]
 801d186:	88fa      	ldrh	r2, [r7, #6]
 801d188:	429a      	cmp	r2, r3
 801d18a:	d235      	bcs.n	801d1f8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d18c:	4b2b      	ldr	r3, [pc, #172]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d18e:	2201      	movs	r2, #1
 801d190:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d192:	4b2a      	ldr	r3, [pc, #168]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d194:	8a5a      	ldrh	r2, [r3, #18]
 801d196:	4b29      	ldr	r3, [pc, #164]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d198:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d19a:	4b28      	ldr	r3, [pc, #160]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d19c:	8a1b      	ldrh	r3, [r3, #16]
 801d19e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d1a0:	4b26      	ldr	r3, [pc, #152]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	825a      	strh	r2, [r3, #18]
 801d1a6:	e027      	b.n	801d1f8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d1a8:	4b24      	ldr	r3, [pc, #144]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1aa:	8a5a      	ldrh	r2, [r3, #18]
 801d1ac:	4b23      	ldr	r3, [pc, #140]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1ae:	8a1b      	ldrh	r3, [r3, #16]
 801d1b0:	429a      	cmp	r2, r3
 801d1b2:	d91b      	bls.n	801d1ec <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d1b4:	4b21      	ldr	r3, [pc, #132]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1b6:	8a5b      	ldrh	r3, [r3, #18]
 801d1b8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d1bc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d1be:	88fa      	ldrh	r2, [r7, #6]
 801d1c0:	8afb      	ldrh	r3, [r7, #22]
 801d1c2:	429a      	cmp	r2, r3
 801d1c4:	d318      	bcc.n	801d1f8 <TRACE_AllocateBufer+0xb4>
 801d1c6:	4b1d      	ldr	r3, [pc, #116]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1c8:	8a1b      	ldrh	r3, [r3, #16]
 801d1ca:	88fa      	ldrh	r2, [r7, #6]
 801d1cc:	429a      	cmp	r2, r3
 801d1ce:	d213      	bcs.n	801d1f8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d1d0:	4b1a      	ldr	r3, [pc, #104]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d1d6:	4b19      	ldr	r3, [pc, #100]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1d8:	8a5a      	ldrh	r2, [r3, #18]
 801d1da:	4b18      	ldr	r3, [pc, #96]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1dc:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d1de:	4b17      	ldr	r3, [pc, #92]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1e0:	8a1b      	ldrh	r3, [r3, #16]
 801d1e2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d1e4:	4b15      	ldr	r3, [pc, #84]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1e6:	2200      	movs	r2, #0
 801d1e8:	825a      	strh	r2, [r3, #18]
 801d1ea:	e005      	b.n	801d1f8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d1ec:	4b13      	ldr	r3, [pc, #76]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1ee:	8a1a      	ldrh	r2, [r3, #16]
 801d1f0:	4b12      	ldr	r3, [pc, #72]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d1f2:	8a5b      	ldrh	r3, [r3, #18]
 801d1f4:	1ad3      	subs	r3, r2, r3
 801d1f6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d1f8:	8afa      	ldrh	r2, [r7, #22]
 801d1fa:	88fb      	ldrh	r3, [r7, #6]
 801d1fc:	429a      	cmp	r2, r3
 801d1fe:	d90f      	bls.n	801d220 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d200:	4b0e      	ldr	r3, [pc, #56]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d202:	8a5a      	ldrh	r2, [r3, #18]
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d208:	4b0c      	ldr	r3, [pc, #48]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d20a:	8a5a      	ldrh	r2, [r3, #18]
 801d20c:	88fb      	ldrh	r3, [r7, #6]
 801d20e:	4413      	add	r3, r2
 801d210:	b29b      	uxth	r3, r3
 801d212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d216:	b29a      	uxth	r2, r3
 801d218:	4b08      	ldr	r3, [pc, #32]	; (801d23c <TRACE_AllocateBufer+0xf8>)
 801d21a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d21c:	2300      	movs	r3, #0
 801d21e:	82bb      	strh	r3, [r7, #20]
 801d220:	693b      	ldr	r3, [r7, #16]
 801d222:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d224:	68bb      	ldr	r3, [r7, #8]
 801d226:	f383 8810 	msr	PRIMASK, r3
}
 801d22a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d22c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d230:	4618      	mov	r0, r3
 801d232:	371c      	adds	r7, #28
 801d234:	46bd      	mov	sp, r7
 801d236:	bc80      	pop	{r7}
 801d238:	4770      	bx	lr
 801d23a:	bf00      	nop
 801d23c:	20002218 	.word	0x20002218

0801d240 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d240:	b480      	push	{r7}
 801d242:	b085      	sub	sp, #20
 801d244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d246:	f3ef 8310 	mrs	r3, PRIMASK
 801d24a:	607b      	str	r3, [r7, #4]
  return(result);
 801d24c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d24e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d250:	b672      	cpsid	i
}
 801d252:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d254:	4b08      	ldr	r3, [pc, #32]	; (801d278 <TRACE_Lock+0x38>)
 801d256:	8adb      	ldrh	r3, [r3, #22]
 801d258:	3301      	adds	r3, #1
 801d25a:	b29a      	uxth	r2, r3
 801d25c:	4b06      	ldr	r3, [pc, #24]	; (801d278 <TRACE_Lock+0x38>)
 801d25e:	82da      	strh	r2, [r3, #22]
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d264:	68bb      	ldr	r3, [r7, #8]
 801d266:	f383 8810 	msr	PRIMASK, r3
}
 801d26a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d26c:	bf00      	nop
 801d26e:	3714      	adds	r7, #20
 801d270:	46bd      	mov	sp, r7
 801d272:	bc80      	pop	{r7}
 801d274:	4770      	bx	lr
 801d276:	bf00      	nop
 801d278:	20002218 	.word	0x20002218

0801d27c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d27c:	b480      	push	{r7}
 801d27e:	b085      	sub	sp, #20
 801d280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d282:	f3ef 8310 	mrs	r3, PRIMASK
 801d286:	607b      	str	r3, [r7, #4]
  return(result);
 801d288:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d28a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d28c:	b672      	cpsid	i
}
 801d28e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d290:	4b08      	ldr	r3, [pc, #32]	; (801d2b4 <TRACE_UnLock+0x38>)
 801d292:	8adb      	ldrh	r3, [r3, #22]
 801d294:	3b01      	subs	r3, #1
 801d296:	b29a      	uxth	r2, r3
 801d298:	4b06      	ldr	r3, [pc, #24]	; (801d2b4 <TRACE_UnLock+0x38>)
 801d29a:	82da      	strh	r2, [r3, #22]
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2a0:	68bb      	ldr	r3, [r7, #8]
 801d2a2:	f383 8810 	msr	PRIMASK, r3
}
 801d2a6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d2a8:	bf00      	nop
 801d2aa:	3714      	adds	r7, #20
 801d2ac:	46bd      	mov	sp, r7
 801d2ae:	bc80      	pop	{r7}
 801d2b0:	4770      	bx	lr
 801d2b2:	bf00      	nop
 801d2b4:	20002218 	.word	0x20002218

0801d2b8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d2b8:	b480      	push	{r7}
 801d2ba:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d2bc:	4b05      	ldr	r3, [pc, #20]	; (801d2d4 <TRACE_IsLocked+0x1c>)
 801d2be:	8adb      	ldrh	r3, [r3, #22]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	bf14      	ite	ne
 801d2c4:	2301      	movne	r3, #1
 801d2c6:	2300      	moveq	r3, #0
 801d2c8:	b2db      	uxtb	r3, r3
}
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	bc80      	pop	{r7}
 801d2d0:	4770      	bx	lr
 801d2d2:	bf00      	nop
 801d2d4:	20002218 	.word	0x20002218

0801d2d8 <__libc_init_array>:
 801d2d8:	b570      	push	{r4, r5, r6, lr}
 801d2da:	4d0d      	ldr	r5, [pc, #52]	; (801d310 <__libc_init_array+0x38>)
 801d2dc:	4c0d      	ldr	r4, [pc, #52]	; (801d314 <__libc_init_array+0x3c>)
 801d2de:	1b64      	subs	r4, r4, r5
 801d2e0:	10a4      	asrs	r4, r4, #2
 801d2e2:	2600      	movs	r6, #0
 801d2e4:	42a6      	cmp	r6, r4
 801d2e6:	d109      	bne.n	801d2fc <__libc_init_array+0x24>
 801d2e8:	4d0b      	ldr	r5, [pc, #44]	; (801d318 <__libc_init_array+0x40>)
 801d2ea:	4c0c      	ldr	r4, [pc, #48]	; (801d31c <__libc_init_array+0x44>)
 801d2ec:	f000 f918 	bl	801d520 <_init>
 801d2f0:	1b64      	subs	r4, r4, r5
 801d2f2:	10a4      	asrs	r4, r4, #2
 801d2f4:	2600      	movs	r6, #0
 801d2f6:	42a6      	cmp	r6, r4
 801d2f8:	d105      	bne.n	801d306 <__libc_init_array+0x2e>
 801d2fa:	bd70      	pop	{r4, r5, r6, pc}
 801d2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801d300:	4798      	blx	r3
 801d302:	3601      	adds	r6, #1
 801d304:	e7ee      	b.n	801d2e4 <__libc_init_array+0xc>
 801d306:	f855 3b04 	ldr.w	r3, [r5], #4
 801d30a:	4798      	blx	r3
 801d30c:	3601      	adds	r6, #1
 801d30e:	e7f2      	b.n	801d2f6 <__libc_init_array+0x1e>
 801d310:	0801e0b8 	.word	0x0801e0b8
 801d314:	0801e0b8 	.word	0x0801e0b8
 801d318:	0801e0b8 	.word	0x0801e0b8
 801d31c:	0801e0c0 	.word	0x0801e0c0

0801d320 <memcpy>:
 801d320:	440a      	add	r2, r1
 801d322:	4291      	cmp	r1, r2
 801d324:	f100 33ff 	add.w	r3, r0, #4294967295
 801d328:	d100      	bne.n	801d32c <memcpy+0xc>
 801d32a:	4770      	bx	lr
 801d32c:	b510      	push	{r4, lr}
 801d32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d332:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d336:	4291      	cmp	r1, r2
 801d338:	d1f9      	bne.n	801d32e <memcpy+0xe>
 801d33a:	bd10      	pop	{r4, pc}

0801d33c <memset>:
 801d33c:	4402      	add	r2, r0
 801d33e:	4603      	mov	r3, r0
 801d340:	4293      	cmp	r3, r2
 801d342:	d100      	bne.n	801d346 <memset+0xa>
 801d344:	4770      	bx	lr
 801d346:	f803 1b01 	strb.w	r1, [r3], #1
 801d34a:	e7f9      	b.n	801d340 <memset+0x4>

0801d34c <register_fini>:
 801d34c:	4b02      	ldr	r3, [pc, #8]	; (801d358 <register_fini+0xc>)
 801d34e:	b113      	cbz	r3, 801d356 <register_fini+0xa>
 801d350:	4802      	ldr	r0, [pc, #8]	; (801d35c <register_fini+0x10>)
 801d352:	f000 b805 	b.w	801d360 <atexit>
 801d356:	4770      	bx	lr
 801d358:	00000000 	.word	0x00000000
 801d35c:	0801d36d 	.word	0x0801d36d

0801d360 <atexit>:
 801d360:	2300      	movs	r3, #0
 801d362:	4601      	mov	r1, r0
 801d364:	461a      	mov	r2, r3
 801d366:	4618      	mov	r0, r3
 801d368:	f000 b816 	b.w	801d398 <__register_exitproc>

0801d36c <__libc_fini_array>:
 801d36c:	b538      	push	{r3, r4, r5, lr}
 801d36e:	4d07      	ldr	r5, [pc, #28]	; (801d38c <__libc_fini_array+0x20>)
 801d370:	4c07      	ldr	r4, [pc, #28]	; (801d390 <__libc_fini_array+0x24>)
 801d372:	1b64      	subs	r4, r4, r5
 801d374:	10a4      	asrs	r4, r4, #2
 801d376:	b91c      	cbnz	r4, 801d380 <__libc_fini_array+0x14>
 801d378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d37c:	f000 b8d6 	b.w	801d52c <_fini>
 801d380:	3c01      	subs	r4, #1
 801d382:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801d386:	4798      	blx	r3
 801d388:	e7f5      	b.n	801d376 <__libc_fini_array+0xa>
 801d38a:	bf00      	nop
 801d38c:	0801e0c0 	.word	0x0801e0c0
 801d390:	0801e0c4 	.word	0x0801e0c4

0801d394 <__retarget_lock_acquire_recursive>:
 801d394:	4770      	bx	lr

0801d396 <__retarget_lock_release_recursive>:
 801d396:	4770      	bx	lr

0801d398 <__register_exitproc>:
 801d398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d39c:	f8df a074 	ldr.w	sl, [pc, #116]	; 801d414 <__register_exitproc+0x7c>
 801d3a0:	4606      	mov	r6, r0
 801d3a2:	f8da 0000 	ldr.w	r0, [sl]
 801d3a6:	4698      	mov	r8, r3
 801d3a8:	460f      	mov	r7, r1
 801d3aa:	4691      	mov	r9, r2
 801d3ac:	f7ff fff2 	bl	801d394 <__retarget_lock_acquire_recursive>
 801d3b0:	4b19      	ldr	r3, [pc, #100]	; (801d418 <__register_exitproc+0x80>)
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801d3b8:	b91c      	cbnz	r4, 801d3c2 <__register_exitproc+0x2a>
 801d3ba:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801d3be:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801d3c2:	6865      	ldr	r5, [r4, #4]
 801d3c4:	f8da 0000 	ldr.w	r0, [sl]
 801d3c8:	2d1f      	cmp	r5, #31
 801d3ca:	dd05      	ble.n	801d3d8 <__register_exitproc+0x40>
 801d3cc:	f7ff ffe3 	bl	801d396 <__retarget_lock_release_recursive>
 801d3d0:	f04f 30ff 	mov.w	r0, #4294967295
 801d3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3d8:	b19e      	cbz	r6, 801d402 <__register_exitproc+0x6a>
 801d3da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801d3de:	2201      	movs	r2, #1
 801d3e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801d3e4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801d3e8:	40aa      	lsls	r2, r5
 801d3ea:	4313      	orrs	r3, r2
 801d3ec:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801d3f0:	2e02      	cmp	r6, #2
 801d3f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801d3f6:	bf02      	ittt	eq
 801d3f8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801d3fc:	4313      	orreq	r3, r2
 801d3fe:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801d402:	1c6b      	adds	r3, r5, #1
 801d404:	3502      	adds	r5, #2
 801d406:	6063      	str	r3, [r4, #4]
 801d408:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801d40c:	f7ff ffc3 	bl	801d396 <__retarget_lock_release_recursive>
 801d410:	2000      	movs	r0, #0
 801d412:	e7df      	b.n	801d3d4 <__register_exitproc+0x3c>
 801d414:	20000570 	.word	0x20000570
 801d418:	0801dfec 	.word	0x0801dfec
 801d41c:	00000000 	.word	0x00000000

0801d420 <floor>:
 801d420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d424:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801d428:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801d42c:	2e13      	cmp	r6, #19
 801d42e:	4602      	mov	r2, r0
 801d430:	460b      	mov	r3, r1
 801d432:	4607      	mov	r7, r0
 801d434:	460c      	mov	r4, r1
 801d436:	4605      	mov	r5, r0
 801d438:	dc33      	bgt.n	801d4a2 <floor+0x82>
 801d43a:	2e00      	cmp	r6, #0
 801d43c:	da14      	bge.n	801d468 <floor+0x48>
 801d43e:	a334      	add	r3, pc, #208	; (adr r3, 801d510 <floor+0xf0>)
 801d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d444:	f7e2 fea6 	bl	8000194 <__adddf3>
 801d448:	2200      	movs	r2, #0
 801d44a:	2300      	movs	r3, #0
 801d44c:	f7e3 fae8 	bl	8000a20 <__aeabi_dcmpgt>
 801d450:	b138      	cbz	r0, 801d462 <floor+0x42>
 801d452:	2c00      	cmp	r4, #0
 801d454:	da58      	bge.n	801d508 <floor+0xe8>
 801d456:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d45a:	431d      	orrs	r5, r3
 801d45c:	d001      	beq.n	801d462 <floor+0x42>
 801d45e:	4c2e      	ldr	r4, [pc, #184]	; (801d518 <floor+0xf8>)
 801d460:	2500      	movs	r5, #0
 801d462:	4623      	mov	r3, r4
 801d464:	462f      	mov	r7, r5
 801d466:	e025      	b.n	801d4b4 <floor+0x94>
 801d468:	4a2c      	ldr	r2, [pc, #176]	; (801d51c <floor+0xfc>)
 801d46a:	fa42 f806 	asr.w	r8, r2, r6
 801d46e:	ea01 0208 	and.w	r2, r1, r8
 801d472:	4302      	orrs	r2, r0
 801d474:	d01e      	beq.n	801d4b4 <floor+0x94>
 801d476:	a326      	add	r3, pc, #152	; (adr r3, 801d510 <floor+0xf0>)
 801d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d47c:	f7e2 fe8a 	bl	8000194 <__adddf3>
 801d480:	2200      	movs	r2, #0
 801d482:	2300      	movs	r3, #0
 801d484:	f7e3 facc 	bl	8000a20 <__aeabi_dcmpgt>
 801d488:	2800      	cmp	r0, #0
 801d48a:	d0ea      	beq.n	801d462 <floor+0x42>
 801d48c:	2c00      	cmp	r4, #0
 801d48e:	bfbe      	ittt	lt
 801d490:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d494:	fa43 f606 	asrlt.w	r6, r3, r6
 801d498:	19a4      	addlt	r4, r4, r6
 801d49a:	ea24 0408 	bic.w	r4, r4, r8
 801d49e:	2500      	movs	r5, #0
 801d4a0:	e7df      	b.n	801d462 <floor+0x42>
 801d4a2:	2e33      	cmp	r6, #51	; 0x33
 801d4a4:	dd0a      	ble.n	801d4bc <floor+0x9c>
 801d4a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d4aa:	d103      	bne.n	801d4b4 <floor+0x94>
 801d4ac:	f7e2 fe72 	bl	8000194 <__adddf3>
 801d4b0:	4607      	mov	r7, r0
 801d4b2:	460b      	mov	r3, r1
 801d4b4:	4638      	mov	r0, r7
 801d4b6:	4619      	mov	r1, r3
 801d4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4bc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801d4c0:	f04f 32ff 	mov.w	r2, #4294967295
 801d4c4:	fa22 f808 	lsr.w	r8, r2, r8
 801d4c8:	ea18 0f00 	tst.w	r8, r0
 801d4cc:	d0f2      	beq.n	801d4b4 <floor+0x94>
 801d4ce:	a310      	add	r3, pc, #64	; (adr r3, 801d510 <floor+0xf0>)
 801d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d4:	f7e2 fe5e 	bl	8000194 <__adddf3>
 801d4d8:	2200      	movs	r2, #0
 801d4da:	2300      	movs	r3, #0
 801d4dc:	f7e3 faa0 	bl	8000a20 <__aeabi_dcmpgt>
 801d4e0:	2800      	cmp	r0, #0
 801d4e2:	d0be      	beq.n	801d462 <floor+0x42>
 801d4e4:	2c00      	cmp	r4, #0
 801d4e6:	da02      	bge.n	801d4ee <floor+0xce>
 801d4e8:	2e14      	cmp	r6, #20
 801d4ea:	d103      	bne.n	801d4f4 <floor+0xd4>
 801d4ec:	3401      	adds	r4, #1
 801d4ee:	ea25 0508 	bic.w	r5, r5, r8
 801d4f2:	e7b6      	b.n	801d462 <floor+0x42>
 801d4f4:	2301      	movs	r3, #1
 801d4f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d4fa:	fa03 f606 	lsl.w	r6, r3, r6
 801d4fe:	4435      	add	r5, r6
 801d500:	42bd      	cmp	r5, r7
 801d502:	bf38      	it	cc
 801d504:	18e4      	addcc	r4, r4, r3
 801d506:	e7f2      	b.n	801d4ee <floor+0xce>
 801d508:	2500      	movs	r5, #0
 801d50a:	462c      	mov	r4, r5
 801d50c:	e7a9      	b.n	801d462 <floor+0x42>
 801d50e:	bf00      	nop
 801d510:	8800759c 	.word	0x8800759c
 801d514:	7e37e43c 	.word	0x7e37e43c
 801d518:	bff00000 	.word	0xbff00000
 801d51c:	000fffff 	.word	0x000fffff

0801d520 <_init>:
 801d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d522:	bf00      	nop
 801d524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d526:	bc08      	pop	{r3}
 801d528:	469e      	mov	lr, r3
 801d52a:	4770      	bx	lr

0801d52c <_fini>:
 801d52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d52e:	bf00      	nop
 801d530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d532:	bc08      	pop	{r3}
 801d534:	469e      	mov	lr, r3
 801d536:	4770      	bx	lr
