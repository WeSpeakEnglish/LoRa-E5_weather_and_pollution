
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6f0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0801b828  0801b828  0002b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801c2b0  0801c2b0  0002c2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801c370  0801c370  00030150  2**0
                  CONTENTS
  5 .ARM          00000008  0801c370  0801c370  0002c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801c378  0801c378  00030150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801c378  0801c378  0002c378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801c37c  0801c37c  0002c37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0801c380  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000023d4  20000150  0801c4d0  00030150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002524  0801c4d0  00032524  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042b98  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a0e5  00000000  00000000  00072d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032f0  00000000  00000000  0007cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ee8  00000000  00000000  000800e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e7e  00000000  00000000  00082fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c20b  00000000  00000000  000aae4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9cb5  00000000  00000000  000e7059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b0d0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d0ec  00000000  00000000  001b0d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000150 	.word	0x20000150
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b810 	.word	0x0801b810

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000154 	.word	0x20000154
 8000174:	0801b810 	.word	0x0801b810

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_fmul>:
 8000188:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800018c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000190:	bf1e      	ittt	ne
 8000192:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000196:	ea92 0f0c 	teqne	r2, ip
 800019a:	ea93 0f0c 	teqne	r3, ip
 800019e:	d06f      	beq.n	8000280 <__aeabi_fmul+0xf8>
 80001a0:	441a      	add	r2, r3
 80001a2:	ea80 0c01 	eor.w	ip, r0, r1
 80001a6:	0240      	lsls	r0, r0, #9
 80001a8:	bf18      	it	ne
 80001aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ae:	d01e      	beq.n	80001ee <__aeabi_fmul+0x66>
 80001b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001bc:	fba0 3101 	umull	r3, r1, r0, r1
 80001c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001c8:	bf3e      	ittt	cc
 80001ca:	0049      	lslcc	r1, r1, #1
 80001cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d0:	005b      	lslcc	r3, r3, #1
 80001d2:	ea40 0001 	orr.w	r0, r0, r1
 80001d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001da:	2afd      	cmp	r2, #253	; 0xfd
 80001dc:	d81d      	bhi.n	800021a <__aeabi_fmul+0x92>
 80001de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001e6:	bf08      	it	eq
 80001e8:	f020 0001 	biceq.w	r0, r0, #1
 80001ec:	4770      	bx	lr
 80001ee:	f090 0f00 	teq	r0, #0
 80001f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001f6:	bf08      	it	eq
 80001f8:	0249      	lsleq	r1, r1, #9
 80001fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000202:	3a7f      	subs	r2, #127	; 0x7f
 8000204:	bfc2      	ittt	gt
 8000206:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800020a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800020e:	4770      	bxgt	lr
 8000210:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000214:	f04f 0300 	mov.w	r3, #0
 8000218:	3a01      	subs	r2, #1
 800021a:	dc5d      	bgt.n	80002d8 <__aeabi_fmul+0x150>
 800021c:	f112 0f19 	cmn.w	r2, #25
 8000220:	bfdc      	itt	le
 8000222:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000226:	4770      	bxle	lr
 8000228:	f1c2 0200 	rsb	r2, r2, #0
 800022c:	0041      	lsls	r1, r0, #1
 800022e:	fa21 f102 	lsr.w	r1, r1, r2
 8000232:	f1c2 0220 	rsb	r2, r2, #32
 8000236:	fa00 fc02 	lsl.w	ip, r0, r2
 800023a:	ea5f 0031 	movs.w	r0, r1, rrx
 800023e:	f140 0000 	adc.w	r0, r0, #0
 8000242:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000246:	bf08      	it	eq
 8000248:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800024c:	4770      	bx	lr
 800024e:	f092 0f00 	teq	r2, #0
 8000252:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0040      	lsleq	r0, r0, #1
 800025a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800025e:	3a01      	subeq	r2, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xce>
 8000262:	ea40 000c 	orr.w	r0, r0, ip
 8000266:	f093 0f00 	teq	r3, #0
 800026a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800026e:	bf02      	ittt	eq
 8000270:	0049      	lsleq	r1, r1, #1
 8000272:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000276:	3b01      	subeq	r3, #1
 8000278:	d0f9      	beq.n	800026e <__aeabi_fmul+0xe6>
 800027a:	ea41 010c 	orr.w	r1, r1, ip
 800027e:	e78f      	b.n	80001a0 <__aeabi_fmul+0x18>
 8000280:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	bf18      	it	ne
 800028a:	ea93 0f0c 	teqne	r3, ip
 800028e:	d00a      	beq.n	80002a6 <__aeabi_fmul+0x11e>
 8000290:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000294:	bf18      	it	ne
 8000296:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800029a:	d1d8      	bne.n	800024e <__aeabi_fmul+0xc6>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	bf17      	itett	ne
 80002ac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002b0:	4608      	moveq	r0, r1
 80002b2:	f091 0f00 	teqne	r1, #0
 80002b6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ba:	d014      	beq.n	80002e6 <__aeabi_fmul+0x15e>
 80002bc:	ea92 0f0c 	teq	r2, ip
 80002c0:	d101      	bne.n	80002c6 <__aeabi_fmul+0x13e>
 80002c2:	0242      	lsls	r2, r0, #9
 80002c4:	d10f      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002c6:	ea93 0f0c 	teq	r3, ip
 80002ca:	d103      	bne.n	80002d4 <__aeabi_fmul+0x14c>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	bf18      	it	ne
 80002d0:	4608      	movne	r0, r1
 80002d2:	d108      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002d4:	ea80 0001 	eor.w	r0, r0, r1
 80002d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002e4:	4770      	bx	lr
 80002e6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__gedf2>:
 8000668:	f04f 3cff 	mov.w	ip, #4294967295
 800066c:	e006      	b.n	800067c <__cmpdf2+0x4>
 800066e:	bf00      	nop

08000670 <__ledf2>:
 8000670:	f04f 0c01 	mov.w	ip, #1
 8000674:	e002      	b.n	800067c <__cmpdf2+0x4>
 8000676:	bf00      	nop

08000678 <__cmpdf2>:
 8000678:	f04f 0c01 	mov.w	ip, #1
 800067c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000688:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800068c:	bf18      	it	ne
 800068e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000692:	d01b      	beq.n	80006cc <__cmpdf2+0x54>
 8000694:	b001      	add	sp, #4
 8000696:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800069a:	bf0c      	ite	eq
 800069c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006a0:	ea91 0f03 	teqne	r1, r3
 80006a4:	bf02      	ittt	eq
 80006a6:	ea90 0f02 	teqeq	r0, r2
 80006aa:	2000      	moveq	r0, #0
 80006ac:	4770      	bxeq	lr
 80006ae:	f110 0f00 	cmn.w	r0, #0
 80006b2:	ea91 0f03 	teq	r1, r3
 80006b6:	bf58      	it	pl
 80006b8:	4299      	cmppl	r1, r3
 80006ba:	bf08      	it	eq
 80006bc:	4290      	cmpeq	r0, r2
 80006be:	bf2c      	ite	cs
 80006c0:	17d8      	asrcs	r0, r3, #31
 80006c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006c6:	f040 0001 	orr.w	r0, r0, #1
 80006ca:	4770      	bx	lr
 80006cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006d4:	d102      	bne.n	80006dc <__cmpdf2+0x64>
 80006d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006da:	d107      	bne.n	80006ec <__cmpdf2+0x74>
 80006dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d1d6      	bne.n	8000694 <__cmpdf2+0x1c>
 80006e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ea:	d0d3      	beq.n	8000694 <__cmpdf2+0x1c>
 80006ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <__aeabi_cdrcmple>:
 80006f4:	4684      	mov	ip, r0
 80006f6:	4610      	mov	r0, r2
 80006f8:	4662      	mov	r2, ip
 80006fa:	468c      	mov	ip, r1
 80006fc:	4619      	mov	r1, r3
 80006fe:	4663      	mov	r3, ip
 8000700:	e000      	b.n	8000704 <__aeabi_cdcmpeq>
 8000702:	bf00      	nop

08000704 <__aeabi_cdcmpeq>:
 8000704:	b501      	push	{r0, lr}
 8000706:	f7ff ffb7 	bl	8000678 <__cmpdf2>
 800070a:	2800      	cmp	r0, #0
 800070c:	bf48      	it	mi
 800070e:	f110 0f00 	cmnmi.w	r0, #0
 8000712:	bd01      	pop	{r0, pc}

08000714 <__aeabi_dcmpeq>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff fff4 	bl	8000704 <__aeabi_cdcmpeq>
 800071c:	bf0c      	ite	eq
 800071e:	2001      	moveq	r0, #1
 8000720:	2000      	movne	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <__aeabi_dcmplt>:
 8000728:	f84d ed08 	str.w	lr, [sp, #-8]!
 800072c:	f7ff ffea 	bl	8000704 <__aeabi_cdcmpeq>
 8000730:	bf34      	ite	cc
 8000732:	2001      	movcc	r0, #1
 8000734:	2000      	movcs	r0, #0
 8000736:	f85d fb08 	ldr.w	pc, [sp], #8
 800073a:	bf00      	nop

0800073c <__aeabi_dcmple>:
 800073c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000740:	f7ff ffe0 	bl	8000704 <__aeabi_cdcmpeq>
 8000744:	bf94      	ite	ls
 8000746:	2001      	movls	r0, #1
 8000748:	2000      	movhi	r0, #0
 800074a:	f85d fb08 	ldr.w	pc, [sp], #8
 800074e:	bf00      	nop

08000750 <__aeabi_dcmpge>:
 8000750:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000754:	f7ff ffce 	bl	80006f4 <__aeabi_cdrcmple>
 8000758:	bf94      	ite	ls
 800075a:	2001      	movls	r0, #1
 800075c:	2000      	movhi	r0, #0
 800075e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000762:	bf00      	nop

08000764 <__aeabi_dcmpgt>:
 8000764:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000768:	f7ff ffc4 	bl	80006f4 <__aeabi_cdrcmple>
 800076c:	bf34      	ite	cc
 800076e:	2001      	movcc	r0, #1
 8000770:	2000      	movcs	r0, #0
 8000772:	f85d fb08 	ldr.w	pc, [sp], #8
 8000776:	bf00      	nop

08000778 <__aeabi_d2iz>:
 8000778:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800077c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000780:	d215      	bcs.n	80007ae <__aeabi_d2iz+0x36>
 8000782:	d511      	bpl.n	80007a8 <__aeabi_d2iz+0x30>
 8000784:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000788:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800078c:	d912      	bls.n	80007b4 <__aeabi_d2iz+0x3c>
 800078e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000796:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800079a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800079e:	fa23 f002 	lsr.w	r0, r3, r2
 80007a2:	bf18      	it	ne
 80007a4:	4240      	negne	r0, r0
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007b2:	d105      	bne.n	80007c0 <__aeabi_d2iz+0x48>
 80007b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007b8:	bf08      	it	eq
 80007ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007be:	4770      	bx	lr
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <__aeabi_frsub>:
 80007c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007cc:	e002      	b.n	80007d4 <__addsf3>
 80007ce:	bf00      	nop

080007d0 <__aeabi_fsub>:
 80007d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007d4 <__addsf3>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	bf1f      	itttt	ne
 80007d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007dc:	ea92 0f03 	teqne	r2, r3
 80007e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007e8:	d06a      	beq.n	80008c0 <__addsf3+0xec>
 80007ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f2:	bfc1      	itttt	gt
 80007f4:	18d2      	addgt	r2, r2, r3
 80007f6:	4041      	eorgt	r1, r0
 80007f8:	4048      	eorgt	r0, r1
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	bfb8      	it	lt
 80007fe:	425b      	neglt	r3, r3
 8000800:	2b19      	cmp	r3, #25
 8000802:	bf88      	it	hi
 8000804:	4770      	bxhi	lr
 8000806:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800080a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800080e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000812:	bf18      	it	ne
 8000814:	4240      	negne	r0, r0
 8000816:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800081a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800081e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000822:	bf18      	it	ne
 8000824:	4249      	negne	r1, r1
 8000826:	ea92 0f03 	teq	r2, r3
 800082a:	d03f      	beq.n	80008ac <__addsf3+0xd8>
 800082c:	f1a2 0201 	sub.w	r2, r2, #1
 8000830:	fa41 fc03 	asr.w	ip, r1, r3
 8000834:	eb10 000c 	adds.w	r0, r0, ip
 8000838:	f1c3 0320 	rsb	r3, r3, #32
 800083c:	fa01 f103 	lsl.w	r1, r1, r3
 8000840:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000844:	d502      	bpl.n	800084c <__addsf3+0x78>
 8000846:	4249      	negs	r1, r1
 8000848:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800084c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000850:	d313      	bcc.n	800087a <__addsf3+0xa6>
 8000852:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000856:	d306      	bcc.n	8000866 <__addsf3+0x92>
 8000858:	0840      	lsrs	r0, r0, #1
 800085a:	ea4f 0131 	mov.w	r1, r1, rrx
 800085e:	f102 0201 	add.w	r2, r2, #1
 8000862:	2afe      	cmp	r2, #254	; 0xfe
 8000864:	d251      	bcs.n	800090a <__addsf3+0x136>
 8000866:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800086a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800086e:	bf08      	it	eq
 8000870:	f020 0001 	biceq.w	r0, r0, #1
 8000874:	ea40 0003 	orr.w	r0, r0, r3
 8000878:	4770      	bx	lr
 800087a:	0049      	lsls	r1, r1, #1
 800087c:	eb40 0000 	adc.w	r0, r0, r0
 8000880:	3a01      	subs	r2, #1
 8000882:	bf28      	it	cs
 8000884:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000888:	d2ed      	bcs.n	8000866 <__addsf3+0x92>
 800088a:	fab0 fc80 	clz	ip, r0
 800088e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000892:	ebb2 020c 	subs.w	r2, r2, ip
 8000896:	fa00 f00c 	lsl.w	r0, r0, ip
 800089a:	bfaa      	itet	ge
 800089c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a0:	4252      	neglt	r2, r2
 80008a2:	4318      	orrge	r0, r3
 80008a4:	bfbc      	itt	lt
 80008a6:	40d0      	lsrlt	r0, r2
 80008a8:	4318      	orrlt	r0, r3
 80008aa:	4770      	bx	lr
 80008ac:	f092 0f00 	teq	r2, #0
 80008b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008b4:	bf06      	itte	eq
 80008b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ba:	3201      	addeq	r2, #1
 80008bc:	3b01      	subne	r3, #1
 80008be:	e7b5      	b.n	800082c <__addsf3+0x58>
 80008c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008c8:	bf18      	it	ne
 80008ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ce:	d021      	beq.n	8000914 <__addsf3+0x140>
 80008d0:	ea92 0f03 	teq	r2, r3
 80008d4:	d004      	beq.n	80008e0 <__addsf3+0x10c>
 80008d6:	f092 0f00 	teq	r2, #0
 80008da:	bf08      	it	eq
 80008dc:	4608      	moveq	r0, r1
 80008de:	4770      	bx	lr
 80008e0:	ea90 0f01 	teq	r0, r1
 80008e4:	bf1c      	itt	ne
 80008e6:	2000      	movne	r0, #0
 80008e8:	4770      	bxne	lr
 80008ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008ee:	d104      	bne.n	80008fa <__addsf3+0x126>
 80008f0:	0040      	lsls	r0, r0, #1
 80008f2:	bf28      	it	cs
 80008f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008f8:	4770      	bx	lr
 80008fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008fe:	bf3c      	itt	cc
 8000900:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000904:	4770      	bxcc	lr
 8000906:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800090a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800090e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000912:	4770      	bx	lr
 8000914:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000918:	bf16      	itet	ne
 800091a:	4608      	movne	r0, r1
 800091c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000920:	4601      	movne	r1, r0
 8000922:	0242      	lsls	r2, r0, #9
 8000924:	bf06      	itte	eq
 8000926:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092a:	ea90 0f01 	teqeq	r0, r1
 800092e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000932:	4770      	bx	lr

08000934 <__aeabi_ui2f>:
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	e004      	b.n	8000944 <__aeabi_i2f+0x8>
 800093a:	bf00      	nop

0800093c <__aeabi_i2f>:
 800093c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000940:	bf48      	it	mi
 8000942:	4240      	negmi	r0, r0
 8000944:	ea5f 0c00 	movs.w	ip, r0
 8000948:	bf08      	it	eq
 800094a:	4770      	bxeq	lr
 800094c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000950:	4601      	mov	r1, r0
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	e01c      	b.n	8000992 <__aeabi_l2f+0x2a>

08000958 <__aeabi_ul2f>:
 8000958:	ea50 0201 	orrs.w	r2, r0, r1
 800095c:	bf08      	it	eq
 800095e:	4770      	bxeq	lr
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	e00a      	b.n	800097c <__aeabi_l2f+0x14>
 8000966:	bf00      	nop

08000968 <__aeabi_l2f>:
 8000968:	ea50 0201 	orrs.w	r2, r0, r1
 800096c:	bf08      	it	eq
 800096e:	4770      	bxeq	lr
 8000970:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000974:	d502      	bpl.n	800097c <__aeabi_l2f+0x14>
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	ea5f 0c01 	movs.w	ip, r1
 8000980:	bf02      	ittt	eq
 8000982:	4684      	moveq	ip, r0
 8000984:	4601      	moveq	r1, r0
 8000986:	2000      	moveq	r0, #0
 8000988:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800098c:	bf08      	it	eq
 800098e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000992:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000996:	fabc f28c 	clz	r2, ip
 800099a:	3a08      	subs	r2, #8
 800099c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a0:	db10      	blt.n	80009c4 <__aeabi_l2f+0x5c>
 80009a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80009a6:	4463      	add	r3, ip
 80009a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80009ac:	f1c2 0220 	rsb	r2, r2, #32
 80009b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009b4:	fa20 f202 	lsr.w	r2, r0, r2
 80009b8:	eb43 0002 	adc.w	r0, r3, r2
 80009bc:	bf08      	it	eq
 80009be:	f020 0001 	biceq.w	r0, r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	f102 0220 	add.w	r2, r2, #32
 80009c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009cc:	f1c2 0220 	rsb	r2, r2, #32
 80009d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d4:	fa21 f202 	lsr.w	r2, r1, r2
 80009d8:	eb43 0002 	adc.w	r0, r3, r2
 80009dc:	bf08      	it	eq
 80009de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_f2iz>:
 80009e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009ec:	d30f      	bcc.n	8000a0e <__aeabi_f2iz+0x2a>
 80009ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_f2iz+0x30>
 80009f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a04:	fa23 f002 	lsr.w	r0, r3, r2
 8000a08:	bf18      	it	ne
 8000a0a:	4240      	negne	r0, r0
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr
 8000a14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a18:	d101      	bne.n	8000a1e <__aeabi_f2iz+0x3a>
 8000a1a:	0242      	lsls	r2, r0, #9
 8000a1c:	d105      	bne.n	8000a2a <__aeabi_f2iz+0x46>
 8000a1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a22:	bf08      	it	eq
 8000a24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0000 	mov.w	r0, #0
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_f2uiz>:
 8000a30:	0042      	lsls	r2, r0, #1
 8000a32:	d20e      	bcs.n	8000a52 <__aeabi_f2uiz+0x22>
 8000a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a38:	d30b      	bcc.n	8000a52 <__aeabi_f2uiz+0x22>
 8000a3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a42:	d409      	bmi.n	8000a58 <__aeabi_f2uiz+0x28>
 8000a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	4770      	bx	lr
 8000a58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_f2uiz+0x32>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d102      	bne.n	8000a68 <__aeabi_f2uiz+0x38>
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_uldivmod>:
 8000a70:	b953      	cbnz	r3, 8000a88 <__aeabi_uldivmod+0x18>
 8000a72:	b94a      	cbnz	r2, 8000a88 <__aeabi_uldivmod+0x18>
 8000a74:	2900      	cmp	r1, #0
 8000a76:	bf08      	it	eq
 8000a78:	2800      	cmpeq	r0, #0
 8000a7a:	bf1c      	itt	ne
 8000a7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a80:	f04f 30ff 	movne.w	r0, #4294967295
 8000a84:	f000 b974 	b.w	8000d70 <__aeabi_idiv0>
 8000a88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a90:	f000 f806 	bl	8000aa0 <__udivmoddi4>
 8000a94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9c:	b004      	add	sp, #16
 8000a9e:	4770      	bx	lr

08000aa0 <__udivmoddi4>:
 8000aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa4:	9e08      	ldr	r6, [sp, #32]
 8000aa6:	460d      	mov	r5, r1
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	4688      	mov	r8, r1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d14d      	bne.n	8000b4c <__udivmoddi4+0xac>
 8000ab0:	428a      	cmp	r2, r1
 8000ab2:	4694      	mov	ip, r2
 8000ab4:	d968      	bls.n	8000b88 <__udivmoddi4+0xe8>
 8000ab6:	fab2 f282 	clz	r2, r2
 8000aba:	b152      	cbz	r2, 8000ad2 <__udivmoddi4+0x32>
 8000abc:	fa01 f302 	lsl.w	r3, r1, r2
 8000ac0:	f1c2 0120 	rsb	r1, r2, #32
 8000ac4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	ea41 0803 	orr.w	r8, r1, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000ad6:	0c21      	lsrs	r1, r4, #16
 8000ad8:	fbb8 fef5 	udiv	lr, r8, r5
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fb05 831e 	mls	r3, r5, lr, r8
 8000ae4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae8:	fb0e f107 	mul.w	r1, lr, r7
 8000aec:	4299      	cmp	r1, r3
 8000aee:	d90b      	bls.n	8000b08 <__udivmoddi4+0x68>
 8000af0:	eb1c 0303 	adds.w	r3, ip, r3
 8000af4:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000af8:	f080 811e 	bcs.w	8000d38 <__udivmoddi4+0x298>
 8000afc:	4299      	cmp	r1, r3
 8000afe:	f240 811b 	bls.w	8000d38 <__udivmoddi4+0x298>
 8000b02:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000b10:	fb05 3310 	mls	r3, r5, r0, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb00 f707 	mul.w	r7, r0, r7
 8000b1c:	42a7      	cmp	r7, r4
 8000b1e:	d90a      	bls.n	8000b36 <__udivmoddi4+0x96>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b28:	f080 8108 	bcs.w	8000d3c <__udivmoddi4+0x29c>
 8000b2c:	42a7      	cmp	r7, r4
 8000b2e:	f240 8105 	bls.w	8000d3c <__udivmoddi4+0x29c>
 8000b32:	4464      	add	r4, ip
 8000b34:	3802      	subs	r0, #2
 8000b36:	1be4      	subs	r4, r4, r7
 8000b38:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	b11e      	cbz	r6, 8000b48 <__udivmoddi4+0xa8>
 8000b40:	40d4      	lsrs	r4, r2
 8000b42:	2300      	movs	r3, #0
 8000b44:	e9c6 4300 	strd	r4, r3, [r6]
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0xc2>
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	f000 80ee 	beq.w	8000d32 <__udivmoddi4+0x292>
 8000b56:	2100      	movs	r1, #0
 8000b58:	e9c6 0500 	strd	r0, r5, [r6]
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x160>
 8000b6a:	42ab      	cmp	r3, r5
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xd4>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80f9 	bhi.w	8000d66 <__udivmoddi4+0x2c6>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb65 0303 	sbc.w	r3, r5, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0e2      	beq.n	8000b48 <__udivmoddi4+0xa8>
 8000b82:	e9c6 4800 	strd	r4, r8, [r6]
 8000b86:	e7df      	b.n	8000b48 <__udivmoddi4+0xa8>
 8000b88:	b902      	cbnz	r2, 8000b8c <__udivmoddi4+0xec>
 8000b8a:	deff      	udf	#255	; 0xff
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	f040 8091 	bne.w	8000cb8 <__udivmoddi4+0x218>
 8000b96:	eba1 050c 	sub.w	r5, r1, ip
 8000b9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ba8:	fb07 5013 	mls	r0, r7, r3, r5
 8000bac:	0c25      	lsrs	r5, r4, #16
 8000bae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bb2:	fb0e f003 	mul.w	r0, lr, r3
 8000bb6:	42a8      	cmp	r0, r5
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x12c>
 8000bba:	eb1c 0505 	adds.w	r5, ip, r5
 8000bbe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x12a>
 8000bc4:	42a8      	cmp	r0, r5
 8000bc6:	f200 80cb 	bhi.w	8000d60 <__udivmoddi4+0x2c0>
 8000bca:	4643      	mov	r3, r8
 8000bcc:	1a2d      	subs	r5, r5, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb5 f0f7 	udiv	r0, r5, r7
 8000bd4:	fb07 5510 	mls	r5, r7, r0, r5
 8000bd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x156>
 8000be4:	eb1c 0404 	adds.w	r4, ip, r4
 8000be8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000bec:	d202      	bcs.n	8000bf4 <__udivmoddi4+0x154>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	f200 80bb 	bhi.w	8000d6a <__udivmoddi4+0x2ca>
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	eba4 040e 	sub.w	r4, r4, lr
 8000bfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfe:	e79e      	b.n	8000b3e <__udivmoddi4+0x9e>
 8000c00:	f1c1 0720 	rsb	r7, r1, #32
 8000c04:	408b      	lsls	r3, r1
 8000c06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c12:	fa05 f301 	lsl.w	r3, r5, r1
 8000c16:	431c      	orrs	r4, r3
 8000c18:	40fd      	lsrs	r5, r7
 8000c1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1e:	fa00 f301 	lsl.w	r3, r0, r1
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	0c20      	lsrs	r0, r4, #16
 8000c28:	fa1f fe8c 	uxth.w	lr, ip
 8000c2c:	fb09 5518 	mls	r5, r9, r8, r5
 8000c30:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000c34:	fb08 f00e 	mul.w	r0, r8, lr
 8000c38:	42a8      	cmp	r0, r5
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	d90b      	bls.n	8000c58 <__udivmoddi4+0x1b8>
 8000c40:	eb1c 0505 	adds.w	r5, ip, r5
 8000c44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c48:	f080 8088 	bcs.w	8000d5c <__udivmoddi4+0x2bc>
 8000c4c:	42a8      	cmp	r0, r5
 8000c4e:	f240 8085 	bls.w	8000d5c <__udivmoddi4+0x2bc>
 8000c52:	f1a8 0802 	sub.w	r8, r8, #2
 8000c56:	4465      	add	r5, ip
 8000c58:	1a2d      	subs	r5, r5, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000c60:	fb09 5510 	mls	r5, r9, r0, r5
 8000c64:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45ae      	cmp	lr, r5
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x1e2>
 8000c70:	eb1c 0505 	adds.w	r5, ip, r5
 8000c74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c78:	d26c      	bcs.n	8000d54 <__udivmoddi4+0x2b4>
 8000c7a:	45ae      	cmp	lr, r5
 8000c7c:	d96a      	bls.n	8000d54 <__udivmoddi4+0x2b4>
 8000c7e:	3802      	subs	r0, #2
 8000c80:	4465      	add	r5, ip
 8000c82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c86:	fba0 9402 	umull	r9, r4, r0, r2
 8000c8a:	eba5 050e 	sub.w	r5, r5, lr
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	46c8      	mov	r8, r9
 8000c92:	46a6      	mov	lr, r4
 8000c94:	d356      	bcc.n	8000d44 <__udivmoddi4+0x2a4>
 8000c96:	d053      	beq.n	8000d40 <__udivmoddi4+0x2a0>
 8000c98:	b15e      	cbz	r6, 8000cb2 <__udivmoddi4+0x212>
 8000c9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9e:	eb65 050e 	sbc.w	r5, r5, lr
 8000ca2:	fa05 f707 	lsl.w	r7, r5, r7
 8000ca6:	fa22 f301 	lsr.w	r3, r2, r1
 8000caa:	40cd      	lsrs	r5, r1
 8000cac:	431f      	orrs	r7, r3
 8000cae:	e9c6 7500 	strd	r7, r5, [r6]
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	f1c2 0320 	rsb	r3, r2, #32
 8000cbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc4:	fa25 f303 	lsr.w	r3, r5, r3
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	430d      	orrs	r5, r1
 8000ccc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd0:	fa1f fe8c 	uxth.w	lr, ip
 8000cd4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000cd8:	fb07 3011 	mls	r0, r7, r1, r3
 8000cdc:	0c2b      	lsrs	r3, r5, #16
 8000cde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ce2:	fb01 f00e 	mul.w	r0, r1, lr
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	fa04 f402 	lsl.w	r4, r4, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x260>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000cf6:	d22f      	bcs.n	8000d58 <__udivmoddi4+0x2b8>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d92d      	bls.n	8000d58 <__udivmoddi4+0x2b8>
 8000cfc:	3902      	subs	r1, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a1b      	subs	r3, r3, r0
 8000d02:	b2ad      	uxth	r5, r5
 8000d04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d08:	fb07 3310 	mls	r3, r7, r0, r3
 8000d0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d10:	fb00 f30e 	mul.w	r3, r0, lr
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x28a>
 8000d18:	eb1c 0505 	adds.w	r5, ip, r5
 8000d1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d20:	d216      	bcs.n	8000d50 <__udivmoddi4+0x2b0>
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d914      	bls.n	8000d50 <__udivmoddi4+0x2b0>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4465      	add	r5, ip
 8000d2a:	1aed      	subs	r5, r5, r3
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	e738      	b.n	8000ba4 <__udivmoddi4+0x104>
 8000d32:	4631      	mov	r1, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e707      	b.n	8000b48 <__udivmoddi4+0xa8>
 8000d38:	4686      	mov	lr, r0
 8000d3a:	e6e5      	b.n	8000b08 <__udivmoddi4+0x68>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fa      	b.n	8000b36 <__udivmoddi4+0x96>
 8000d40:	454b      	cmp	r3, r9
 8000d42:	d2a9      	bcs.n	8000c98 <__udivmoddi4+0x1f8>
 8000d44:	ebb9 0802 	subs.w	r8, r9, r2
 8000d48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	e7a3      	b.n	8000c98 <__udivmoddi4+0x1f8>
 8000d50:	4640      	mov	r0, r8
 8000d52:	e7ea      	b.n	8000d2a <__udivmoddi4+0x28a>
 8000d54:	4620      	mov	r0, r4
 8000d56:	e794      	b.n	8000c82 <__udivmoddi4+0x1e2>
 8000d58:	4641      	mov	r1, r8
 8000d5a:	e7d1      	b.n	8000d00 <__udivmoddi4+0x260>
 8000d5c:	46d0      	mov	r8, sl
 8000d5e:	e77b      	b.n	8000c58 <__udivmoddi4+0x1b8>
 8000d60:	3b02      	subs	r3, #2
 8000d62:	4465      	add	r5, ip
 8000d64:	e732      	b.n	8000bcc <__udivmoddi4+0x12c>
 8000d66:	4608      	mov	r0, r1
 8000d68:	e709      	b.n	8000b7e <__udivmoddi4+0xde>
 8000d6a:	4464      	add	r4, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e742      	b.n	8000bf6 <__udivmoddi4+0x156>

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dba:	4013      	ands	r3, r2
 8000dbc:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_ADC_Init+0x94>)
 8000dce:	4a24      	ldr	r2, [pc, #144]	; (8000e60 <MX_ADC_Init+0x98>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_ADC_Init+0x94>)
 8000dd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dd8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_ADC_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_ADC_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_ADC_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_ADC_Init+0x94>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_ADC_Init+0x94>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_ADC_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e36:	2207      	movs	r2, #7
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_ADC_Init+0x94>)
 8000e4a:	f002 f91b 	bl	8003084 <HAL_ADC_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000e54:	f000 fc00 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000016c 	.word	0x2000016c
 8000e60:	40012400 	.word	0x40012400

08000e64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_ADC_MspInit+0x24>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d103      	bne.n	8000e7e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e7a:	f7ff ff7b 	bl	8000d74 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012400 	.word	0x40012400

08000e8c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_ADC_MspDeInit+0x24>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d103      	bne.n	8000ea6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000e9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ea2:	f7ff ff7f 	bl	8000da4 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40012400 	.word	0x40012400

08000eb4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <SYS_InitMeasurement+0x14>)
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <SYS_InitMeasurement+0x18>)
 8000ebc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2000016c 	.word	0x2000016c
 8000ecc:	40012400 	.word	0x40012400

08000ed0 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000ede:	4813      	ldr	r0, [pc, #76]	; (8000f2c <SYS_GetBatteryLevel+0x5c>)
 8000ee0:	f000 f82a 	bl	8000f38 <ADC_ReadChannels>
 8000ee4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	e016      	b.n	8000f20 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <SYS_GetBatteryLevel+0x60>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00b      	beq.n	8000f16 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <SYS_GetBatteryLevel+0x60>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000f08:	fb03 f202 	mul.w	r2, r3, r2
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	80fb      	strh	r3, [r7, #6]
 8000f14:	e004      	b.n	8000f20 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <SYS_GetBatteryLevel+0x64>)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000f20:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	b4002000 	.word	0xb4002000
 8000f30:	1fff75aa 	.word	0x1fff75aa
 8000f34:	004c08d8 	.word	0x004c08d8

08000f38 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000f50:	f7ff ff3a 	bl	8000dc8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <ADC_ReadChannels+0x88>)
 8000f56:	f002 fec4 	bl	8003ce2 <HAL_ADCEx_Calibration_Start>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000f60:	f000 fb7a 	bl	8001658 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4619      	mov	r1, r3
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <ADC_ReadChannels+0x88>)
 8000f78:	f002 fbd0 	bl	800371c <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000f82:	f000 fb69 	bl	8001658 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <ADC_ReadChannels+0x88>)
 8000f88:	f002 faac 	bl	80034e4 <HAL_ADC_Start>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000f92:	f000 fb61 	bl	8001658 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f96:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <ADC_ReadChannels+0x88>)
 8000f9c:	f002 fb1a 	bl	80035d4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <ADC_ReadChannels+0x88>)
 8000fa2:	f002 fae5 	bl	8003570 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <ADC_ReadChannels+0x88>)
 8000fa8:	f002 fbab 	bl	8003702 <HAL_ADC_GetValue>
 8000fac:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <ADC_ReadChannels+0x88>)
 8000fb0:	f002 fa1c 	bl	80033ec <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000fb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000016c 	.word	0x2000016c

08000fc4 <LL_AHB1_GRP1_EnableClock>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f7ff ffe3 	bl	8000fc4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	2001      	movs	r0, #1
 8001000:	f7ff ffe0 	bl	8000fc4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2102      	movs	r1, #2
 8001008:	200b      	movs	r0, #11
 800100a:	f003 f810 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800100e:	200b      	movs	r0, #11
 8001010:	f003 f827 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	200c      	movs	r0, #12
 800101a:	f003 f808 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800101e:	200c      	movs	r0, #12
 8001020:	f003 f81f 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	200d      	movs	r0, #13
 800102a:	f003 f800 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800102e:	200d      	movs	r0, #13
 8001030:	f003 f817 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	203d      	movs	r0, #61	; 0x3d
 800103a:	f002 fff8 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800103e:	203d      	movs	r0, #61	; 0x3d
 8001040:	f003 f80f 	bl	8004062 <HAL_NVIC_EnableIRQ>

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001054:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001058:	d101      	bne.n	800105e <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800105e:	2300      	movs	r3, #0
#endif
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	58004000 	.word	0x58004000

0800106c <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001084:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <FLASH_IF_Write+0x174>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0299      	lsls	r1, r3, #10
 800108a:	4b56      	ldr	r3, [pc, #344]	; (80011e4 <FLASH_IF_Write+0x178>)
 800108c:	400b      	ands	r3, r1
 800108e:	fbb2 f1f3 	udiv	r1, r2, r3
 8001092:	fb01 f303 	mul.w	r3, r1, r3
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	0adb      	lsrs	r3, r3, #11
 800109a:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80010a6:	3b01      	subs	r3, #1
 80010a8:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <FLASH_IF_Write+0x174>)
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	0291      	lsls	r1, r2, #10
 80010ae:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <FLASH_IF_Write+0x178>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80010b6:	fb01 f202 	mul.w	r2, r1, r2
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	0adb      	lsrs	r3, r3, #11
 80010be:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <FLASH_IF_Write+0x7a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <FLASH_IF_Write+0x7a>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80010e6:	f06f 0304 	mvn.w	r3, #4
 80010ea:	e074      	b.n	80011d6 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <FLASH_IF_Write+0x17c>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da02      	bge.n	80010fa <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80010f4:	f06f 0303 	mvn.w	r3, #3
 80010f8:	e06d      	b.n	80011d6 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d005      	beq.n	800110e <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001108:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e05b      	b.n	80011cc <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f8f8 	bl	800130e <FLASH_IF_IsEmpty>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d037      	beq.n	8001194 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 800112a:	f06f 0304 	mvn.w	r3, #4
 800112e:	e052      	b.n	80011d6 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001136:	02db      	lsls	r3, r3, #11
 8001138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800113c:	4619      	mov	r1, r3
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f018 ffe4 	bl	801a10c <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	6a39      	ldr	r1, [r7, #32]
 8001150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001152:	b292      	uxth	r2, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f018 ffd9 	bl	801a10c <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800115a:	2200      	movs	r2, #0
 800115c:	2101      	movs	r1, #1
 800115e:	69f8      	ldr	r0, [r7, #28]
 8001160:	f000 f865 	bl	800122e <FLASH_IF_EraseByPages>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800116a:	f06f 0301 	mvn.w	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001170:	e030      	b.n	80011d4 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001178:	02db      	lsls	r3, r3, #11
 800117a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f88a 	bl	800129a <FLASH_IF_Write_Buffer>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d010      	beq.n	80011ae <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 800118c:	f06f 0302 	mvn.w	r3, #2
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001192:	e01f      	b.n	80011d4 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001198:	4619      	mov	r1, r3
 800119a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119c:	f000 f87d 	bl	800129a <FLASH_IF_Write_Buffer>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80011a6:	f06f 0302 	mvn.w	r3, #2
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80011ac:	e012      	b.n	80011d4 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	4413      	add	r3, r2
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80011b6:	6a3a      	ldr	r2, [r7, #32]
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	4413      	add	r3, r2
 80011bc:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d99f      	bls.n	8001114 <FLASH_IF_Write+0xa8>
  }

  return status;
 80011d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3730      	adds	r7, #48	; 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	1fff75e0 	.word	0x1fff75e0
 80011e4:	03fffc00 	.word	0x03fffc00
 80011e8:	58004000 	.word	0x58004000

080011ec <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80011f8:	e00b      	b.n	8001212 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80011fa:	bf00      	nop
 80011fc:	f7ff ff24 	bl	8001048 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1fa      	bne.n	80011fc <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	2001      	movs	r0, #1
 800120e:	f003 fbc1 	bl	8004994 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121c:	4299      	cmp	r1, r3
 800121e:	bf08      	it	eq
 8001220:	4290      	cmpeq	r0, r2
 8001222:	d1ea      	bne.n	80011fa <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001224:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b08a      	sub	sp, #40	; 0x28
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	460b      	mov	r3, r1
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001244:	897b      	ldrh	r3, [r7, #10]
 8001246:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fd3c 	bl	8004cd0 <HAL_FLASHEx_Erase_IT>
 8001258:	4603      	mov	r3, r0
 800125a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125e:	e00a      	b.n	8001276 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001260:	f107 0214 	add.w	r2, r7, #20
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fcd8 	bl	8004c20 <HAL_FLASHEx_Erase>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800127a:	2b00      	cmp	r3, #0
 800127c:	d008      	beq.n	8001290 <FLASH_IF_EraseByPages+0x62>
 800127e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001282:	2b02      	cmp	r3, #2
 8001284:	d101      	bne.n	800128a <FLASH_IF_EraseByPages+0x5c>
 8001286:	2301      	movs	r3, #1
 8001288:	e003      	b.n	8001292 <FLASH_IF_EraseByPages+0x64>
 800128a:	f06f 0301 	mvn.w	r3, #1
 800128e:	e000      	b.n	8001292 <FLASH_IF_EraseByPages+0x64>
 8001290:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001292:	4618      	mov	r0, r3
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b08a      	sub	sp, #40	; 0x28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e020      	b.n	80012f6 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2208      	movs	r2, #8
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	4618      	mov	r0, r3
 80012be:	f018 ff25 	bl	801a10c <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80012c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ca:	bf08      	it	eq
 80012cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80012d0:	d005      	beq.n	80012de <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80012d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff ff88 	bl	80011ec <FLASH_IF_Write64>
 80012dc:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3308      	adds	r3, #8
 80012e2:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	3308      	adds	r3, #8
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d108      	bne.n	8001302 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3d9      	bcc.n	80012b4 <FLASH_IF_Write_Buffer+0x1a>
 8001300:	e000      	b.n	8001304 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 8001302:	bf00      	nop
    }
  }

  return status;
 8001304:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001306:	4618      	mov	r0, r3
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001318:	e00a      	b.n	8001330 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2bff      	cmp	r3, #255	; 0xff
 8001324:	d001      	beq.n	800132a <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001326:	2301      	movs	r3, #1
 8001328:	e039      	b.n	800139e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ef      	bne.n	800131a <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	e010      	b.n	8001366 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f103 0208 	add.w	r2, r3, #8
 800134a:	60fa      	str	r2, [r7, #12]
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	bf08      	it	eq
 8001356:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800135a:	d001      	beq.n	8001360 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 800135c:	2301      	movs	r3, #1
 800135e:	e01e      	b.n	800139e <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3301      	adds	r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3e9      	bcc.n	8001344 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800137e:	e00a      	b.n	8001396 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d001      	beq.n	8001390 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 800138c:	2301      	movs	r3, #1
 800138e:	e006      	b.n	800139e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3b01      	subs	r3, #1
 8001394:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f1      	bne.n	8001380 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 800139c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <LL_AHB2_GRP1_EnableClock>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff ffdb 	bl	80013a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2004      	movs	r0, #4
 80013f4:	f7ff ffd8 	bl	80013a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	2002      	movs	r0, #2
 80013fa:	f7ff ffd5 	bl	80013a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001404:	4821      	ldr	r0, [pc, #132]	; (800148c <MX_GPIO_Init+0xb4>)
 8001406:	f003 ff55 	bl	80052b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2120      	movs	r1, #32
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <MX_GPIO_Init+0xb4>)
 8001410:	f003 ff50 	bl	80052b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2131      	movs	r1, #49	; 0x31
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f003 ff4a 	bl	80052b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001420:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_GPIO_Init+0xb4>)
 8001438:	f003 fd0e 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800143c:	2331      	movs	r3, #49	; 0x31
 800143e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001454:	f003 fd00 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800145e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001464:	2301      	movs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_GPIO_Init+0xb4>)
 800146e:	f003 fcf3 	bl	8004e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2029      	movs	r0, #41	; 0x29
 8001478:	f002 fdd9 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800147c:	2029      	movs	r0, #41	; 0x29
 800147e:	f002 fdf0 	bl	8004062 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	48000400 	.word	0x48000400

08001490 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a0:	f023 0218 	bic.w	r2, r3, #24
 80014a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
	...

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f001 fbf2 	bl	8002ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f846 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f7ff ff86 	bl	80013d8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80014cc:	f008 ffec 	bl	800a4a8 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 80014d0:	f001 f810 	bl	80024f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART2_SET =0;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <main+0x80>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80014da:	2214      	movs	r2, #20
 80014dc:	4918      	ldr	r1, [pc, #96]	; (8001540 <main+0x84>)
 80014de:	4819      	ldr	r0, [pc, #100]	; (8001544 <main+0x88>)
 80014e0:	f008 fd9d 	bl	800a01e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <main+0x8c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <main+0x8c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0204 	bic.w	r2, r2, #4
 80014f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80014f4:	f008 ffe0 	bl	800a4b8 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
    if(UART2_SET){
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <main+0x80>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f9      	beq.n	80014f4 <main+0x38>
    	UART2_SET = 0;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <main+0x80>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001506:	2214      	movs	r2, #20
 8001508:	490d      	ldr	r1, [pc, #52]	; (8001540 <main+0x84>)
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <main+0x88>)
 800150c:	f008 fd87 	bl	800a01e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001510:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <main+0x8c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <main+0x8c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0204 	bic.w	r2, r2, #4
 800151e:	601a      	str	r2, [r3, #0]
	PM2_5 = mainBuffer[6]*256+mainBuffer[7];
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <main+0x90>)
 8001522:	799b      	ldrb	r3, [r3, #6]
 8001524:	b29b      	uxth	r3, r3
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <main+0x90>)
 800152c:	79db      	ldrb	r3, [r3, #7]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <main+0x94>)
 8001536:	801a      	strh	r2, [r3, #0]
    MX_LoRaWAN_Process();
 8001538:	e7dc      	b.n	80014f4 <main+0x38>
 800153a:	bf00      	nop
 800153c:	20000004 	.word	0x20000004
 8001540:	200001d0 	.word	0x200001d0
 8001544:	200002d8 	.word	0x200002d8
 8001548:	20000428 	.word	0x20000428
 800154c:	200001e4 	.word	0x200001e4
 8001550:	200001f8 	.word	0x200001f8

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b09a      	sub	sp, #104	; 0x68
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2248      	movs	r2, #72	; 0x48
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f01a f8cc 	bl	801b700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800157a:	f003 fecb 	bl	8005314 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ff86 	bl	8001490 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <SystemClock_Config+0xb0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <SystemClock_Config+0xb0>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <SystemClock_Config+0xb0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015a0:	2324      	movs	r3, #36	; 0x24
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015a4:	2381      	movs	r3, #129	; 0x81
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015a8:	2301      	movs	r3, #1
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015b0:	23b0      	movs	r3, #176	; 0xb0
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 f9f5 	bl	80059ac <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80015c8:	f000 f846 	bl	8001658 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80015cc:	234f      	movs	r3, #79	; 0x4f
 80015ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2102      	movs	r1, #2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 fd7a 	bl	80060e4 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015f6:	f000 f82f 	bl	8001658 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3768      	adds	r7, #104	; 0x68
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	58000400 	.word	0x58000400

08001608 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_UARTEx_RxEventCallback+0x40>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d110      	bne.n	8001640 <HAL_UARTEx_RxEventCallback+0x38>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_UARTEx_RxEventCallback+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b42      	cmp	r3, #66	; 0x42
 8001624:	d109      	bne.n	800163a <HAL_UARTEx_RxEventCallback+0x32>
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_UARTEx_RxEventCallback+0x44>)
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	2b4d      	cmp	r3, #77	; 0x4d
 800162c:	d105      	bne.n	800163a <HAL_UARTEx_RxEventCallback+0x32>
		memcpy(mainBuffer,aRXBufferUser,Size);
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	461a      	mov	r2, r3
 8001632:	4906      	ldr	r1, [pc, #24]	; (800164c <HAL_UARTEx_RxEventCallback+0x44>)
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <HAL_UARTEx_RxEventCallback+0x48>)
 8001636:	f01a f855 	bl	801b6e4 <memcpy>


		}
		UART2_SET =1;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_UARTEx_RxEventCallback+0x4c>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]

	}
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	200001d0 	.word	0x200001d0
 8001650:	200001e4 	.word	0x200001e4
 8001654:	20000004 	.word	0x20000004

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>

08001662 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <LL_APB1_GRP1_EnableClock>:
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4313      	orrs	r3, r2
 8001698:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800169a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4013      	ands	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	222c      	movs	r2, #44	; 0x2c
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f01a f81d 	bl	801b700 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_RTC_Init+0x9c>)
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <MX_RTC_Init+0xa0>)
 80016ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_RTC_Init+0x9c>)
 80016ce:	221f      	movs	r2, #31
 80016d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_RTC_Init+0x9c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_RTC_Init+0x9c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_RTC_Init+0x9c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_RTC_Init+0x9c>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_RTC_Init+0x9c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_RTC_Init+0x9c>)
 80016f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016fa:	4815      	ldr	r0, [pc, #84]	; (8001750 <MX_RTC_Init+0x9c>)
 80016fc:	f005 f9ae 	bl	8006a5c <HAL_RTC_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001706:	f7ff ffa7 	bl	8001658 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800170a:	4811      	ldr	r0, [pc, #68]	; (8001750 <MX_RTC_Init+0x9c>)
 800170c:	f005 fc9c 	bl	8007048 <HAL_RTCEx_SetSSRU_IT>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001716:	f7ff ff9f 	bl	8001658 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001726:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800172a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800172c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_RTC_Init+0x9c>)
 800173a:	f005 fa09 	bl	8006b50 <HAL_RTC_SetAlarm_IT>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001744:	f7ff ff88 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3730      	adds	r7, #48	; 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200001fc 	.word	0x200001fc
 8001754:	40002800 	.word	0x40002800

08001758 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b090      	sub	sp, #64	; 0x40
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	2238      	movs	r2, #56	; 0x38
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f019 ffc9 	bl	801b700 <memset>
  if(rtcHandle->Instance==RTC)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_RTC_MspInit+0x74>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d125      	bne.n	80017c4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4618      	mov	r0, r3
 800178a:	f005 f84d 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001794:	f7ff ff60 	bl	8001658 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001798:	f7ff ff63 	bl	8001662 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800179c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017a0:	f7ff ff6f 	bl	8001682 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2002      	movs	r0, #2
 80017aa:	f002 fc40 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017ae:	2002      	movs	r0, #2
 80017b0:	f002 fc57 	bl	8004062 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	202a      	movs	r0, #42	; 0x2a
 80017ba:	f002 fc38 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017be:	202a      	movs	r0, #42	; 0x2a
 80017c0:	f002 fc4f 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017c4:	bf00      	nop
 80017c6:	3740      	adds	r7, #64	; 0x40
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40002800 	.word	0x40002800

080017d0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	58000400 	.word	0x58000400

080017e8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001804:	f001 fa70 	bl	8002ce8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001808:	f7ff ffe2 	bl	80017d0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800180c:	2001      	movs	r0, #1
 800180e:	f003 fe13 	bl	8005438 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800181a:	f001 fa73 	bl	8002d04 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800181e:	f001 f8e1 	bl	80029e4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}

08001826 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800182a:	f001 fa5d 	bl	8002ce8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800182e:	2101      	movs	r1, #1
 8001830:	2000      	movs	r0, #0
 8001832:	f003 fd7d 	bl	8005330 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}

0800183a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800183e:	f001 fa61 	bl	8002d04 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <HardFault_Handler+0x4>

0800185e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <MemManage_Handler+0x4>

08001864 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <BusFault_Handler+0x4>

0800186a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80018a6:	f005 fc0b 	bl	80070c0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001fc 	.word	0x200001fc

080018b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <DMA1_Channel1_IRQHandler+0x10>)
 80018ba:	f002 fe69 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000368 	.word	0x20000368

080018c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA1_Channel2_IRQHandler+0x10>)
 80018ce:	f002 fe5f 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200003c8 	.word	0x200003c8

080018dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA1_Channel3_IRQHandler+0x10>)
 80018e2:	f002 fe55 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000428 	.word	0x20000428

080018f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <USART1_IRQHandler+0x10>)
 80018f6:	f006 fa43 	bl	8007d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000248 	.word	0x20000248

08001904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <USART2_IRQHandler+0x10>)
 800190a:	f006 fa39 	bl	8007d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002d8 	.word	0x200002d8

08001918 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800191c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001920:	f003 fce0 	bl	80052e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <RTC_Alarm_IRQHandler+0x10>)
 800192e:	f005 fa77 	bl	8006e20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001fc 	.word	0x200001fc

0800193c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001942:	f005 ff25 	bl	8007790 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000234 	.word	0x20000234

08001950 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <DMAMUX1_OVR_IRQHandler+0x10>)
 8001956:	f002 ffcb 	bl	80048f0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200003c8 	.word	0x200003c8

08001964 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4313      	orrs	r3, r2
 800197a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001988:	68fb      	ldr	r3, [r7, #12]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_SUBGHZ_Init+0x20>)
 800199a:	2208      	movs	r2, #8
 800199c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_SUBGHZ_Init+0x20>)
 80019a0:	f005 fc7a 	bl	8007298 <HAL_SUBGHZ_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80019aa:	f7ff fe55 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000234 	.word	0x20000234

080019b8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff ffcf 	bl	8001964 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2032      	movs	r0, #50	; 0x32
 80019cc:	f002 fb2f 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019d0:	2032      	movs	r0, #50	; 0x32
 80019d2:	f002 fb46 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <LL_RCC_SetClkAfterWakeFromStop>:
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80019f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <LL_FLASH_GetUDN+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	1fff7580 	.word	0x1fff7580

08001a18 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <LL_FLASH_GetDeviceID+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	1fff7584 	.word	0x1fff7584

08001a30 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <LL_FLASH_GetSTCompanyID+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0a1b      	lsrs	r3, r3, #8
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	1fff7584 	.word	0x1fff7584

08001a48 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff ffc6 	bl	80019de <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001a52:	f019 f8ed 	bl	801ac30 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <SystemApp_Init+0x50>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001a5c:	f000 f9a0 	bl	8001da0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001a60:	f019 fb76 	bl	801b150 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <SystemApp_Init+0x54>)
 8001a66:	f019 fc21 	bl	801b2ac <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <SystemApp_Init+0x58>)
 8001a6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a70:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001a72:	2002      	movs	r0, #2
 8001a74:	f019 fc28 	bl	801b2c8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001a78:	f7ff fa1c 	bl	8000eb4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001a7c:	f000 fa1a 	bl	8001eb4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001a80:	f018 fa9e 	bl	8019fc0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a84:	2101      	movs	r1, #1
 8001a86:	2001      	movs	r0, #1
 8001a88:	f018 fada 	bl	801a040 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f018 faa6 	bl	8019fe0 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000240 	.word	0x20000240
 8001a9c:	08001c69 	.word	0x08001c69
 8001aa0:	58004000 	.word	0x58004000

08001aa4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001aa8:	f018 fafa 	bl	801a0a0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001aba:	f7ff fa09 	bl	8000ed0 <SYS_GetBatteryLevel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d902      	bls.n	8001ad2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001acc:	23fe      	movs	r3, #254	; 0xfe
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	e014      	b.n	8001afc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001ad2:	88bb      	ldrh	r3, [r7, #4]
 8001ad4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001ad8:	d202      	bcs.n	8001ae0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e00d      	b.n	8001afc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ae0:	88bb      	ldrh	r3, [r7, #4]
 8001ae2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4613      	mov	r3, r2
 8001aea:	01db      	lsls	r3, r3, #7
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <GetBatteryLevel+0x58>)
 8001af4:	fba3 2302 	umull	r2, r3, r3, r2
 8001af8:	09db      	lsrs	r3, r3, #7
 8001afa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001afc:	79fb      	ldrb	r3, [r7, #7]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	1b4e81b5 	.word	0x1b4e81b5

08001b0c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f9a1 	bl	8001e60 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe ff5f 	bl	80009e4 <__aeabi_f2iz>
 8001b26:	4603      	mov	r3, r0
 8001b28:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001b2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001b36:	b590      	push	{r4, r7, lr}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001b42:	f7ff ff5f 	bl	8001a04 <LL_FLASH_GetUDN>
 8001b46:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4e:	d138      	bne.n	8001bc2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b50:	f001 f8e6 	bl	8002d20 <HAL_GetUIDw0>
 8001b54:	4604      	mov	r4, r0
 8001b56:	f001 f8f7 	bl	8002d48 <HAL_GetUIDw2>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4423      	add	r3, r4
 8001b5e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b60:	f001 f8e8 	bl	8002d34 <HAL_GetUIDw1>
 8001b64:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	0e1a      	lsrs	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3307      	adds	r3, #7
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	0c1a      	lsrs	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3306      	adds	r3, #6
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	0a1a      	lsrs	r2, r3, #8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3305      	adds	r3, #5
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0e1a      	lsrs	r2, r3, #24
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	0c1a      	lsrs	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	0a1a      	lsrs	r2, r3, #8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001bc0:	e031      	b.n	8001c26 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3307      	adds	r3, #7
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	0a1a      	lsrs	r2, r3, #8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3306      	adds	r3, #6
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	0c1a      	lsrs	r2, r3, #16
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3305      	adds	r3, #5
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	0e1a      	lsrs	r2, r3, #24
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3304      	adds	r3, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001bf0:	f7ff ff12 	bl	8001a18 <LL_FLASH_GetDeviceID>
 8001bf4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001c00:	f7ff ff16 	bl	8001a30 <LL_FLASH_GetSTCompanyID>
 8001c04:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3302      	adds	r3, #2
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	0a1a      	lsrs	r2, r3, #8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	701a      	strb	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}

08001c2e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001c2e:	b590      	push	{r4, r7, lr}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001c38:	f7ff fee4 	bl	8001a04 <LL_FLASH_GetUDN>
 8001c3c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d10b      	bne.n	8001c5e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c46:	f001 f86b 	bl	8002d20 <HAL_GetUIDw0>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	f001 f872 	bl	8002d34 <HAL_GetUIDw1>
 8001c50:	4603      	mov	r3, r0
 8001c52:	405c      	eors	r4, r3
 8001c54:	f001 f878 	bl	8002d48 <HAL_GetUIDw2>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4063      	eors	r3, r4
 8001c5c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001c5e:	687b      	ldr	r3, [r7, #4]

}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}

08001c68 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4618      	mov	r0, r3
 8001c78:	f018 fb22 	bl	801a2c0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c82:	9200      	str	r2, [sp, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <TimestampNow+0x3c>)
 8001c86:	2110      	movs	r1, #16
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f81d 	bl	8001cc8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe fa72 	bl	8000178 <strlen>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	0801b828 	.word	0x0801b828

08001ca8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001cac:	2101      	movs	r1, #1
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f018 f996 	bl	8019fe0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f018 f98e 	bl	8019fe0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001cc8:	b40c      	push	{r2, r3}
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f018 fcbf 	bl	801a664 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cf0:	b002      	add	sp, #8
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_GetTick+0x24>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001d1a:	f000 f997 	bl	800204c <TIMER_IF_GetTimerValue>
 8001d1e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000240 	.word	0x20000240

08001d30 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fa0d 	bl	800215a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <LL_AHB2_GRP1_EnableClock>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <LL_EXTI_EnableIT_32_63+0x24>)
 8001d82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001d86:	4905      	ldr	r1, [pc, #20]	; (8001d9c <LL_EXTI_EnableIT_32_63+0x24>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	58000800 	.word	0x58000800

08001da0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001da6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001daa:	f7ff ffe5 	bl	8001d78 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001dae:	f000 ffd5 	bl	8002d5c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001db2:	f000 ffd9 	bl	8002d68 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001db6:	f000 ffdd 	bl	8002d74 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff ffb7 	bl	8001d48 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f7ff ffb4 	bl	8001d48 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff ffb1 	bl	8001d48 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001de6:	2002      	movs	r0, #2
 8001de8:	f7ff ffae 	bl	8001d48 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001dec:	2301      	movs	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f003 f82e 	bl	8004e58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e00:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4815      	ldr	r0, [pc, #84]	; (8001e5c <DBG_Init+0xbc>)
 8001e08:	f003 f826 	bl	8004e58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4811      	ldr	r0, [pc, #68]	; (8001e5c <DBG_Init+0xbc>)
 8001e16:	f003 f81f 	bl	8004e58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	480e      	ldr	r0, [pc, #56]	; (8001e5c <DBG_Init+0xbc>)
 8001e24:	f003 f818 	bl	8004e58 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e30:	f003 fa40 	bl	80052b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e3a:	4808      	ldr	r0, [pc, #32]	; (8001e5c <DBG_Init+0xbc>)
 8001e3c:	f003 fa3a 	bl	80052b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2108      	movs	r1, #8
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <DBG_Init+0xbc>)
 8001e46:	f003 fa35 	bl	80052b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	4803      	ldr	r0, [pc, #12]	; (8001e5c <DBG_Init+0xbc>)
 8001e50:	f003 fa30 	bl	80052b4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	48000400 	.word	0x48000400

08001e60 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <EnvSensors_Read+0x40>)
 8001e6a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <EnvSensors_Read+0x44>)
 8001e6e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <EnvSensors_Read+0x48>)
 8001e72:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <EnvSensors_Read+0x4c>)
 8001e8a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <EnvSensors_Read+0x50>)
 8001e90:	611a      	str	r2, [r3, #16]

  return 0;
 8001e92:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	42480000 	.word	0x42480000
 8001ea4:	41900000 	.word	0x41900000
 8001ea8:	447a0000 	.word	0x447a0000
 8001eac:	003e090d 	.word	0x003e090d
 8001eb0:	000503ab 	.word	0x000503ab

08001eb4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001ebe:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <TIMER_IF_Init+0x5c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <TIMER_IF_Init+0x60>)
 8001f06:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001f0c:	f7ff fbd2 	bl	80016b4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001f10:	f000 f856 	bl	8001fc0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <TIMER_IF_Init+0x60>)
 8001f1a:	f004 ff25 	bl	8006d68 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <TIMER_IF_Init+0x60>)
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001f26:	4809      	ldr	r0, [pc, #36]	; (8001f4c <TIMER_IF_Init+0x60>)
 8001f28:	f005 f85c 	bl	8006fe4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 f9d3 	bl	80022d8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001f32:	f000 f85f 	bl	8001ff4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <TIMER_IF_Init+0x5c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000241 	.word	0x20000241
 8001f4c:	200001fc 	.word	0x200001fc

08001f50 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	222c      	movs	r2, #44	; 0x2c
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f019 fbca 	bl	801b700 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f6c:	f000 f828 	bl	8001fc0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <TIMER_IF_StartTimer+0x68>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f8c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <TIMER_IF_StartTimer+0x6c>)
 8001f9e:	f004 fdd7 	bl	8006b50 <HAL_RTC_SetAlarm_IT>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001fa8:	f7ff fb56 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001fac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3738      	adds	r7, #56	; 0x38
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000244 	.word	0x20000244
 8001fbc:	200001fc 	.word	0x200001fc

08001fc0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <TIMER_IF_StopTimer+0x2c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <TIMER_IF_StopTimer+0x30>)
 8001fd6:	f004 fec7 	bl	8006d68 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <TIMER_IF_StopTimer+0x30>)
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40002800 	.word	0x40002800
 8001ff0:	200001fc 	.word	0x200001fc

08001ff4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001ff8:	f000 f98e 	bl	8002318 <GetTimerTicks>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a03      	ldr	r2, [pc, #12]	; (800200c <TIMER_IF_SetTimerContext+0x18>)
 8002000:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002002:	4b02      	ldr	r3, [pc, #8]	; (800200c <TIMER_IF_SetTimerContext+0x18>)
 8002004:	681b      	ldr	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000244 	.word	0x20000244

08002010 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <TIMER_IF_GetTimerContext+0x10>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	20000244 	.word	0x20000244

08002024 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800202e:	f000 f973 	bl	8002318 <GetTimerTicks>
 8002032:	4602      	mov	r2, r0
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800203c:	687b      	ldr	r3, [r7, #4]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000244 	.word	0x20000244

0800204c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <TIMER_IF_GetTimerValue+0x24>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800205e:	f000 f95b 	bl	8002318 <GetTimerTicks>
 8002062:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000241 	.word	0x20000241

08002074 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800207e:	2303      	movs	r3, #3
 8002080:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800208e:	b5b0      	push	{r4, r5, r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002096:	2100      	movs	r1, #0
 8002098:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	2000      	movs	r0, #0
 800209e:	460a      	mov	r2, r1
 80020a0:	4603      	mov	r3, r0
 80020a2:	0d95      	lsrs	r5, r2, #22
 80020a4:	0294      	lsls	r4, r2, #10
 80020a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	4620      	mov	r0, r4
 80020b0:	4629      	mov	r1, r5
 80020b2:	f7fe fcdd 	bl	8000a70 <__aeabi_uldivmod>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4613      	mov	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdb0      	pop	{r4, r5, r7, pc}

080020c8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80020c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80020d2:	2100      	movs	r1, #0
 80020d4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	2000      	movs	r0, #0
 80020da:	460c      	mov	r4, r1
 80020dc:	4605      	mov	r5, r0
 80020de:	4620      	mov	r0, r4
 80020e0:	4629      	mov	r1, r5
 80020e2:	f04f 0a00 	mov.w	sl, #0
 80020e6:	f04f 0b00 	mov.w	fp, #0
 80020ea:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80020ee:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80020f2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80020f6:	4650      	mov	r0, sl
 80020f8:	4659      	mov	r1, fp
 80020fa:	1b02      	subs	r2, r0, r4
 80020fc:	eb61 0305 	sbc.w	r3, r1, r5
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0099      	lsls	r1, r3, #2
 800210a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800210e:	0090      	lsls	r0, r2, #2
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	eb12 0804 	adds.w	r8, r2, r4
 8002118:	eb43 0905 	adc.w	r9, r3, r5
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002128:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800212c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002130:	4690      	mov	r8, r2
 8002132:	4699      	mov	r9, r3
 8002134:	4640      	mov	r0, r8
 8002136:	4649      	mov	r1, r9
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	0a82      	lsrs	r2, r0, #10
 8002142:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002146:	0a8b      	lsrs	r3, r1, #10
 8002148:	4613      	mov	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800214c:	68fb      	ldr	r3, [r7, #12]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002158:	4770      	bx	lr

0800215a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff93 	bl	800208e <TIMER_IF_Convert_ms2Tick>
 8002168:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800216a:	f000 f8d5 	bl	8002318 <GetTimerTicks>
 800216e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002170:	e000      	b.n	8002174 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002172:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002174:	f000 f8d0 	bl	8002318 <GetTimerTicks>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f6      	bhi.n	8002172 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002196:	f018 fe99 	bl	801aecc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80021aa:	f000 f8a5 	bl	80022f8 <TIMER_IF_BkUp_Read_MSBticks>
 80021ae:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f88f 	bl	80022d8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80021c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80021d0:	f000 f8a2 	bl	8002318 <GetTimerTicks>
 80021d4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80021d6:	f000 f88f 	bl	80022f8 <TIMER_IF_BkUp_Read_MSBticks>
 80021da:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	2200      	movs	r2, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	60fa      	str	r2, [r7, #12]
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	000b      	movs	r3, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f4:	2000      	movs	r0, #0
 80021f6:	460c      	mov	r4, r1
 80021f8:	4605      	mov	r5, r0
 80021fa:	eb12 0804 	adds.w	r8, r2, r4
 80021fe:	eb43 0905 	adc.w	r9, r3, r5
 8002202:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002206:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	0a82      	lsrs	r2, r0, #10
 8002214:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002218:	0a8b      	lsrs	r3, r1, #10
 800221a:	4613      	mov	r3, r2
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2200      	movs	r2, #0
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800222c:	f04f 0b00 	mov.w	fp, #0
 8002230:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff46 	bl	80020c8 <TIMER_IF_Convert_Tick2ms>
 800223c:	4603      	mov	r3, r0
 800223e:	b29a      	uxth	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002246:	4618      	mov	r0, r3
 8002248:	3730      	adds	r7, #48	; 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002250 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	2100      	movs	r1, #0
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800225e:	f004 ff53 	bl	8007108 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200001fc 	.word	0x200001fc

08002270 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	2101      	movs	r1, #1
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800227e:	f004 ff43 	bl	8007108 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200001fc 	.word	0x200001fc

08002290 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800229a:	2100      	movs	r1, #0
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800229e:	f004 ff4b 	bl	8007138 <HAL_RTCEx_BKUPRead>
 80022a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200001fc 	.word	0x200001fc

080022b4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80022be:	2101      	movs	r1, #1
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80022c2:	f004 ff39 	bl	8007138 <HAL_RTCEx_BKUPRead>
 80022c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001fc 	.word	0x200001fc

080022d8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	2102      	movs	r1, #2
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80022e6:	f004 ff0f 	bl	8007108 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200001fc 	.word	0x200001fc

080022f8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80022fe:	2102      	movs	r1, #2
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002302:	f004 ff19 	bl	8007138 <HAL_RTCEx_BKUPRead>
 8002306:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002308:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200001fc 	.word	0x200001fc

08002318 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800231e:	480b      	ldr	r0, [pc, #44]	; (800234c <GetTimerTicks+0x34>)
 8002320:	f7ff fdd9 	bl	8001ed6 <LL_RTC_TIME_GetSubSecond>
 8002324:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002326:	e003      	b.n	8002330 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002328:	4808      	ldr	r0, [pc, #32]	; (800234c <GetTimerTicks+0x34>)
 800232a:	f7ff fdd4 	bl	8001ed6 <LL_RTC_TIME_GetSubSecond>
 800232e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <GetTimerTicks+0x34>)
 8002332:	f7ff fdd0 	bl	8001ed6 <LL_RTC_TIME_GetSubSecond>
 8002336:	4602      	mov	r2, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4293      	cmp	r3, r2
 800233c:	d1f4      	bne.n	8002328 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40002800 	.word	0x40002800

08002350 <LL_AHB2_GRP1_EnableClock>:
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800235e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4313      	orrs	r3, r2
 8002366:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4013      	ands	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002374:	68fb      	ldr	r3, [r7, #12]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <LL_APB1_GRP1_EnableClock>:
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800238e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a4:	68fb      	ldr	r3, [r7, #12]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <LL_APB1_GRP1_DisableClock>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c6:	4013      	ands	r3, r2
 80023c8:	658b      	str	r3, [r1, #88]	; 0x58
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <LL_APB2_GRP1_EnableClock>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023f8:	68fb      	ldr	r3, [r7, #12]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <LL_APB2_GRP1_DisableClock>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	43db      	mvns	r3, r3
 8002416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241a:	4013      	ands	r3, r2
 800241c:	660b      	str	r3, [r1, #96]	; 0x60
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <LL_SYSCFG_EnableFastModePlus>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4904      	ldr	r1, [pc, #16]	; (8002448 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40010000 	.word	0x40010000

0800244c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002452:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <MX_USART1_UART_Init+0xa4>)
 8002454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002456:	4b25      	ldr	r3, [pc, #148]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800245c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002470:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002472:	220c      	movs	r2, #12
 8002474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 8002496:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800249a:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a2:	4812      	ldr	r0, [pc, #72]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 80024a4:	f005 fb33 	bl	8007b0e <HAL_UART_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 80024ae:	f7ff f8d3 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b2:	2100      	movs	r1, #0
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 80024b6:	f007 fd36 	bl	8009f26 <HAL_UARTEx_SetTxFifoThreshold>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80024c0:	f7ff f8ca 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c4:	2100      	movs	r1, #0
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 80024c8:	f007 fd6b 	bl	8009fa2 <HAL_UARTEx_SetRxFifoThreshold>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80024d2:	f7ff f8c1 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_USART1_UART_Init+0xa0>)
 80024d8:	f007 fcb2 	bl	8009e40 <HAL_UARTEx_EnableFifoMode>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 80024e2:	f7ff f8b9 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000248 	.word	0x20000248
 80024f0:	40013800 	.word	0x40013800

080024f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <MX_USART2_UART_Init+0x90>)
 80024fa:	4a23      	ldr	r2, [pc, #140]	; (8002588 <MX_USART2_UART_Init+0x94>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_USART2_UART_Init+0x90>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_USART2_UART_Init+0x90>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_USART2_UART_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253c:	4811      	ldr	r0, [pc, #68]	; (8002584 <MX_USART2_UART_Init+0x90>)
 800253e:	f005 fae6 	bl	8007b0e <HAL_UART_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002548:	f7ff f886 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800254c:	2100      	movs	r1, #0
 800254e:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002550:	f007 fce9 	bl	8009f26 <HAL_UARTEx_SetTxFifoThreshold>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800255a:	f7ff f87d 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255e:	2100      	movs	r1, #0
 8002560:	4808      	ldr	r0, [pc, #32]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002562:	f007 fd1e 	bl	8009fa2 <HAL_UARTEx_SetRxFifoThreshold>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800256c:	f7ff f874 	bl	8001658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	; (8002584 <MX_USART2_UART_Init+0x90>)
 8002572:	f007 fca0 	bl	8009eb6 <HAL_UARTEx_DisableFifoMode>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800257c:	f7ff f86c 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200002d8 	.word	0x200002d8
 8002588:	40004400 	.word	0x40004400

0800258c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b09a      	sub	sp, #104	; 0x68
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80025a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2238      	movs	r2, #56	; 0x38
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f019 f8a0 	bl	801b700 <memset>
  if(uartHandle->Instance==USART1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a83      	ldr	r2, [pc, #524]	; (80027d4 <HAL_UART_MspInit+0x248>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f040 80a3 	bne.w	8002712 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025cc:	2301      	movs	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80025d4:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 f924 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 80025e6:	f7ff f837 	bl	8001658 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025ee:	f7ff fef1 	bl	80023d4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	2002      	movs	r0, #2
 80025f4:	f7ff feac 	bl	8002350 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80025f8:	23c0      	movs	r3, #192	; 0xc0
 80025fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002600:	2301      	movs	r3, #1
 8002602:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002608:	2307      	movs	r3, #7
 800260a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002610:	4619      	mov	r1, r3
 8002612:	4871      	ldr	r0, [pc, #452]	; (80027d8 <HAL_UART_MspInit+0x24c>)
 8002614:	f002 fc20 	bl	8004e58 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002618:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800261c:	f7ff ff04 	bl	8002428 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002620:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002624:	f7ff ff00 	bl	8002428 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002628:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <HAL_UART_MspInit+0x250>)
 800262a:	4a6d      	ldr	r2, [pc, #436]	; (80027e0 <HAL_UART_MspInit+0x254>)
 800262c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800262e:	4b6b      	ldr	r3, [pc, #428]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002630:	2212      	movs	r2, #18
 8002632:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002634:	4b69      	ldr	r3, [pc, #420]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002636:	2210      	movs	r2, #16
 8002638:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263a:	4b68      	ldr	r3, [pc, #416]	; (80027dc <HAL_UART_MspInit+0x250>)
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002640:	4b66      	ldr	r3, [pc, #408]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002648:	2200      	movs	r2, #0
 800264a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800264c:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_UART_MspInit+0x250>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002652:	4b62      	ldr	r3, [pc, #392]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002658:	4b60      	ldr	r3, [pc, #384]	; (80027dc <HAL_UART_MspInit+0x250>)
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800265e:	485f      	ldr	r0, [pc, #380]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002660:	f001 fd1c 	bl	800409c <HAL_DMA_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800266a:	f7fe fff5 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a5a      	ldr	r2, [pc, #360]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002672:	679a      	str	r2, [r3, #120]	; 0x78
 8002674:	4a59      	ldr	r2, [pc, #356]	; (80027dc <HAL_UART_MspInit+0x250>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800267a:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <HAL_UART_MspInit+0x258>)
 800267c:	4a5a      	ldr	r2, [pc, #360]	; (80027e8 <HAL_UART_MspInit+0x25c>)
 800267e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_UART_MspInit+0x258>)
 8002682:	2211      	movs	r2, #17
 8002684:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002686:	4b57      	ldr	r3, [pc, #348]	; (80027e4 <HAL_UART_MspInit+0x258>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800268c:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_UART_MspInit+0x258>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002692:	4b54      	ldr	r3, [pc, #336]	; (80027e4 <HAL_UART_MspInit+0x258>)
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002698:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <HAL_UART_MspInit+0x258>)
 800269a:	2200      	movs	r2, #0
 800269c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269e:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <HAL_UART_MspInit+0x258>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026a4:	4b4f      	ldr	r3, [pc, #316]	; (80027e4 <HAL_UART_MspInit+0x258>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026aa:	4b4e      	ldr	r3, [pc, #312]	; (80027e4 <HAL_UART_MspInit+0x258>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026b0:	484c      	ldr	r0, [pc, #304]	; (80027e4 <HAL_UART_MspInit+0x258>)
 80026b2:	f001 fcf3 	bl	800409c <HAL_DMA_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80026bc:	f7fe ffcc 	bl	8001658 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 80026d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026dc:	4619      	mov	r1, r3
 80026de:	4841      	ldr	r0, [pc, #260]	; (80027e4 <HAL_UART_MspInit+0x258>)
 80026e0:	f002 f8c6 	bl	8004870 <HAL_DMAEx_ConfigMuxSync>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80026ea:	f7fe ffb5 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a3c      	ldr	r2, [pc, #240]	; (80027e4 <HAL_UART_MspInit+0x258>)
 80026f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80026f4:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <HAL_UART_MspInit+0x258>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2102      	movs	r1, #2
 80026fe:	2024      	movs	r0, #36	; 0x24
 8002700:	f001 fc95 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002704:	2024      	movs	r0, #36	; 0x24
 8002706:	f001 fcac 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800270a:	200c      	movs	r0, #12
 800270c:	f001 fca9 	bl	8004062 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002710:	e05c      	b.n	80027cc <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a35      	ldr	r2, [pc, #212]	; (80027ec <HAL_UART_MspInit+0x260>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d157      	bne.n	80027cc <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800271c:	2302      	movs	r3, #2
 800271e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002720:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002724:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002726:	f107 030c 	add.w	r3, r7, #12
 800272a:	4618      	mov	r0, r3
 800272c:	f004 f87c 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8002736:	f7fe ff8f 	bl	8001658 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800273a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800273e:	f7ff fe1f 	bl	8002380 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff fe04 	bl	8002350 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002748:	230c      	movs	r3, #12
 800274a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002758:	2307      	movs	r3, #7
 800275a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002766:	f002 fb77 	bl	8004e58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_UART_MspInit+0x264>)
 800276c:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <HAL_UART_MspInit+0x268>)
 800276e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_UART_MspInit+0x264>)
 8002772:	2213      	movs	r2, #19
 8002774:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <HAL_UART_MspInit+0x264>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_UART_MspInit+0x264>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_UART_MspInit+0x264>)
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_UART_MspInit+0x264>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_UART_MspInit+0x264>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_UART_MspInit+0x264>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_UART_MspInit+0x264>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027a0:	4813      	ldr	r0, [pc, #76]	; (80027f0 <HAL_UART_MspInit+0x264>)
 80027a2:	f001 fc7b 	bl	800409c <HAL_DMA_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_UART_MspInit+0x224>
      Error_Handler();
 80027ac:	f7fe ff54 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_UART_MspInit+0x264>)
 80027b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_UART_MspInit+0x264>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	2025      	movs	r0, #37	; 0x25
 80027c2:	f001 fc34 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027c6:	2025      	movs	r0, #37	; 0x25
 80027c8:	f001 fc4b 	bl	8004062 <HAL_NVIC_EnableIRQ>
}
 80027cc:	bf00      	nop
 80027ce:	3768      	adds	r7, #104	; 0x68
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40013800 	.word	0x40013800
 80027d8:	48000400 	.word	0x48000400
 80027dc:	20000368 	.word	0x20000368
 80027e0:	40020008 	.word	0x40020008
 80027e4:	200003c8 	.word	0x200003c8
 80027e8:	4002001c 	.word	0x4002001c
 80027ec:	40004400 	.word	0x40004400
 80027f0:	20000428 	.word	0x20000428
 80027f4:	40020030 	.word	0x40020030

080027f8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a19      	ldr	r2, [pc, #100]	; (800286c <HAL_UART_MspDeInit+0x74>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d115      	bne.n	8002836 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800280a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800280e:	f7ff fdf9 	bl	8002404 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002812:	21c0      	movs	r1, #192	; 0xc0
 8002814:	4816      	ldr	r0, [pc, #88]	; (8002870 <HAL_UART_MspDeInit+0x78>)
 8002816:	f002 fc7f 	bl	8005118 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fce4 	bl	80041ec <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fcdf 	bl	80041ec <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800282e:	2024      	movs	r0, #36	; 0x24
 8002830:	f001 fc25 	bl	800407e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002834:	e015      	b.n	8002862 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <HAL_UART_MspDeInit+0x7c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d110      	bne.n	8002862 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002840:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002844:	f7ff fdb4 	bl	80023b0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002848:	210c      	movs	r1, #12
 800284a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284e:	f002 fc63 	bl	8005118 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002856:	4618      	mov	r0, r3
 8002858:	f001 fcc8 	bl	80041ec <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800285c:	2025      	movs	r0, #37	; 0x25
 800285e:	f001 fc0e 	bl	800407e <HAL_NVIC_DisableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40013800 	.word	0x40013800
 8002870:	48000400 	.word	0x48000400
 8002874:	40004400 	.word	0x40004400

08002878 <LL_APB2_GRP1_ForceReset>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_APB2_GRP1_ReleaseReset>:
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b0:	4013      	ands	r3, r2
 80028b2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <LL_EXTI_EnableIT_0_31>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80028ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80028ce:	4905      	ldr	r1, [pc, #20]	; (80028e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	58000800 	.word	0x58000800

080028e8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80028f0:	4a07      	ldr	r2, [pc, #28]	; (8002910 <vcom_Init+0x28>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80028f6:	f7fe fb7d 	bl	8000ff4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80028fa:	f7ff fda7 	bl	800244c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80028fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002902:	f7ff ffdd 	bl	80028c0 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002906:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000048c 	.word	0x2000048c

08002914 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002918:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800291c:	f7ff ffac 	bl	8002878 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002920:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002924:	f7ff ffb9 	bl	800289a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <vcom_DeInit+0x28>)
 800292a:	f7ff ff65 	bl	80027f8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800292e:	200f      	movs	r0, #15
 8002930:	f001 fba5 	bl	800407e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002934:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000248 	.word	0x20000248

08002940 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	461a      	mov	r2, r3
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4804      	ldr	r0, [pc, #16]	; (8002964 <vcom_Trace_DMA+0x24>)
 8002954:	f005 f982 	bl	8007c5c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002958:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000248 	.word	0x20000248

08002968 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <vcom_ReceiveInit+0x70>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002976:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800297a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800297c:	f107 0308 	add.w	r3, r7, #8
 8002980:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002984:	4815      	ldr	r0, [pc, #84]	; (80029dc <vcom_ReceiveInit+0x74>)
 8002986:	f007 f9ce 	bl	8009d26 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800298a:	bf00      	nop
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <vcom_ReceiveInit+0x74>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d0f7      	beq.n	800298c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800299c:	bf00      	nop
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <vcom_ReceiveInit+0x74>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ac:	d1f7      	bne.n	800299e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <vcom_ReceiveInit+0x74>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <vcom_ReceiveInit+0x74>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80029bc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80029be:	4807      	ldr	r0, [pc, #28]	; (80029dc <vcom_ReceiveInit+0x74>)
 80029c0:	f007 fa0c 	bl	8009ddc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80029c4:	2201      	movs	r2, #1
 80029c6:	4906      	ldr	r1, [pc, #24]	; (80029e0 <vcom_ReceiveInit+0x78>)
 80029c8:	4804      	ldr	r0, [pc, #16]	; (80029dc <vcom_ReceiveInit+0x74>)
 80029ca:	f005 f8f1 	bl	8007bb0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80029ce:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000490 	.word	0x20000490
 80029dc:	20000248 	.word	0x20000248
 80029e0:	20000488 	.word	0x20000488

080029e4 <vcom_Resume>:

void vcom_Resume(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <vcom_Resume+0x28>)
 80029ea:	f005 f890 	bl	8007b0e <HAL_UART_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80029f4:	f7fe fe30 	bl	8001658 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <vcom_Resume+0x2c>)
 80029fa:	f001 fb4f 	bl	800409c <HAL_DMA_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002a04:	f7fe fe28 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000248 	.word	0x20000248
 8002a10:	20000368 	.word	0x20000368

08002a14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <HAL_UART_TxCpltCallback+0x24>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d103      	bne.n	8002a2e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_UART_TxCpltCallback+0x28>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	2000048c 	.word	0x2000048c

08002a40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <HAL_UART_RxCpltCallback+0x5c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d113      	bne.n	8002a7a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_UART_RxCpltCallback+0x60>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_UART_RxCpltCallback+0x30>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_UART_RxCpltCallback+0x60>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <HAL_UART_RxCpltCallback+0x64>)
 8002a6e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002a70:	2201      	movs	r2, #1
 8002a72:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <HAL_UART_RxCpltCallback+0x64>)
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f005 f89b 	bl	8007bb0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_UART_RxCpltCallback+0x68>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d106      	bne.n	8002a92 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_UART_RxCpltCallback+0x6c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_UART_RxCpltCallback+0x70>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40013800 	.word	0x40013800
 8002aa0:	20000490 	.word	0x20000490
 8002aa4:	20000488 	.word	0x20000488
 8002aa8:	40004400 	.word	0x40004400
 8002aac:	200002d8 	.word	0x200002d8
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ab4:	480d      	ldr	r0, [pc, #52]	; (8002aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ab8:	f7ff fa07 	bl	8001eca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002abe:	490d      	ldr	r1, [pc, #52]	; (8002af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <LoopForever+0xe>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ad4:	4c0a      	ldr	r4, [pc, #40]	; (8002b00 <LoopForever+0x16>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ae2:	f018 fddb 	bl	801b69c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ae6:	f7fe fce9 	bl	80014bc <main>

08002aea <LoopForever>:

LoopForever:
    b LoopForever
 8002aea:	e7fe      	b.n	8002aea <LoopForever>
  ldr   r0, =_estack
 8002aec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8002af8:	0801c380 	.word	0x0801c380
  ldr r2, =_sbss
 8002afc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002b00:	20002524 	.word	0x20002524

08002b04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC_IRQHandler>

08002b06 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
 8002b18:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b32:	f002 f991 	bl	8004e58 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002b36:	2320      	movs	r3, #32
 8002b38:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b42:	f002 f989 	bl	8004e58 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002b46:	2200      	movs	r2, #0
 8002b48:	2120      	movs	r1, #32
 8002b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4e:	f002 fbb1 	bl	80052b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002b52:	2200      	movs	r2, #0
 8002b54:	2110      	movs	r1, #16
 8002b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5a:	f002 fbab 	bl	80052b4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d83f      	bhi.n	8002bf8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002b78:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002bab 	.word	0x08002bab
 8002b88:	08002bc5 	.word	0x08002bc5
 8002b8c:	08002bdf 	.word	0x08002bdf
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2110      	movs	r1, #16
 8002b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b98:	f002 fb8c 	bl	80052b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f002 fb86 	bl	80052b4 <HAL_GPIO_WritePin>
      break;      
 8002ba8:	e027      	b.n	8002bfa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002baa:	2201      	movs	r2, #1
 8002bac:	2110      	movs	r1, #16
 8002bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb2:	f002 fb7f 	bl	80052b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2120      	movs	r1, #32
 8002bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bbe:	f002 fb79 	bl	80052b4 <HAL_GPIO_WritePin>
      break;
 8002bc2:	e01a      	b.n	8002bfa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bcc:	f002 fb72 	bl	80052b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	2120      	movs	r1, #32
 8002bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd8:	f002 fb6c 	bl	80052b4 <HAL_GPIO_WritePin>
      break;
 8002bdc:	e00d      	b.n	8002bfa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002bde:	2200      	movs	r2, #0
 8002be0:	2110      	movs	r1, #16
 8002be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be6:	f002 fb65 	bl	80052b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002bea:	2201      	movs	r2, #1
 8002bec:	2120      	movs	r1, #32
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf2:	f002 fb5f 	bl	80052b4 <HAL_GPIO_WritePin>
      break;
 8002bf6:	e000      	b.n	8002bfa <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002bf8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002c08:	2302      	movs	r3, #2
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002c3e:	230f      	movs	r3, #15
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e001      	b.n	8002c48 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002c44:	2316      	movs	r3, #22
 8002c46:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c48:	68fb      	ldr	r3, [r7, #12]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a03      	ldr	r2, [pc, #12]	; (8002c6c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6053      	str	r3, [r2, #4]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	e0042000 	.word	0xe0042000

08002c70 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	6053      	str	r3, [r2, #4]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	e0042000 	.word	0xe0042000

08002c8c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a03      	ldr	r2, [pc, #12]	; (8002ca4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6053      	str	r3, [r2, #4]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	e0042000 	.word	0xe0042000

08002ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb2:	2003      	movs	r0, #3
 8002cb4:	f001 f9b0 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002cb8:	f003 fbd8 	bl	800646c <HAL_RCC_GetHCLKFreq>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <HAL_Init+0x3c>)
 8002cc0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc2:	200f      	movs	r0, #15
 8002cc4:	f7ff f816 	bl	8001cf4 <HAL_InitTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	71fb      	strb	r3, [r7, #7]
 8002cd2:	e001      	b.n	8002cd8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cd4:	f7fe fdb7 	bl	8001846 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000000 	.word	0x20000000

08002ce8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_SuspendTick+0x18>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_SuspendTick+0x18>)
 8002cf2:	f023 0302 	bic.w	r3, r3, #2
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_ResumeTick+0x18>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <HAL_ResumeTick+0x18>)
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <HAL_GetUIDw0+0x10>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	1fff7590 	.word	0x1fff7590

08002d34 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002d38:	4b02      	ldr	r3, [pc, #8]	; (8002d44 <HAL_GetUIDw1+0x10>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	1fff7594 	.word	0x1fff7594

08002d48 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002d4c:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <HAL_GetUIDw2+0x10>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	1fff7598 	.word	0x1fff7598

08002d5c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002d60:	f7ff ff78 	bl	8002c54 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002d6c:	f7ff ff80 	bl	8002c70 <LL_DBGMCU_EnableDBGStopMode>
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002d78:	f7ff ff88 	bl	8002c8c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2107      	movs	r1, #7
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	401a      	ands	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2107      	movs	r1, #7
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	210f      	movs	r1, #15
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	f003 010f 	and.w	r1, r3, #15
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	0219      	lsls	r1, r3, #8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	400b      	ands	r3, r1
 8002efa:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002efe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f02:	431a      	orrs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f22:	f023 0317 	bic.w	r3, r3, #23
 8002f26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f48:	f023 0317 	bic.w	r3, r3, #23
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6093      	str	r3, [r2, #8]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f6e:	d101      	bne.n	8002f74 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f90:	f023 0317 	bic.w	r3, r3, #23
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fb6:	f023 0317 	bic.w	r3, r3, #23
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <LL_ADC_IsEnabled+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_ADC_IsEnabled+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d101      	bne.n	8003008 <LL_ADC_IsDisableOngoing+0x18>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <LL_ADC_IsDisableOngoing+0x1a>
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003024:	f023 0317 	bic.w	r3, r3, #23
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800304a:	f023 0317 	bic.w	r3, r3, #23
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b04      	cmp	r3, #4
 8003072:	d101      	bne.n	8003078 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e19e      	b.n	80033e4 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7fd fed5 	bl	8000e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff44 	bl	8002f5a <LL_ADC_IsInternalRegulatorEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff18 	bl	8002f12 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e2:	4b99      	ldr	r3, [pc, #612]	; (8003348 <HAL_ADC_Init+0x2c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	4a98      	ldr	r2, [pc, #608]	; (800334c <HAL_ADC_Init+0x2c8>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	099b      	lsrs	r3, r3, #6
 80030f0:	3301      	adds	r3, #1
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f6:	e002      	b.n	80030fe <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff26 	bl	8002f5a <LL_ADC_IsInternalRegulatorEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f043 0210 	orr.w	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	f043 0201 	orr.w	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff93 	bl	8003060 <LL_ADC_REG_IsConversionOngoing>
 800313a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 8144 	bne.w	80033d2 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 8140 	bne.w	80033d2 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800315a:	f043 0202 	orr.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff30 	bl	8002fcc <LL_ADC_IsEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 80a7 	bne.w	80032c2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7e1b      	ldrb	r3, [r3, #24]
 800317c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800317e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e5b      	ldrb	r3, [r3, #25]
 8003184:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003186:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7e9b      	ldrb	r3, [r3, #26]
 800318c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800318e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003194:	2a00      	cmp	r2, #0
 8003196:	d002      	beq.n	800319e <HAL_ADC_Init+0x11a>
 8003198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800319c:	e000      	b.n	80031a0 <HAL_ADC_Init+0x11c>
 800319e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80031a0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80031a6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da04      	bge.n	80031ba <HAL_ADC_Init+0x136>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031b8:	e001      	b.n	80031be <HAL_ADC_Init+0x13a>
 80031ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80031be:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031c6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031c8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d114      	bne.n	8003204 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7e9b      	ldrb	r3, [r3, #26]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e00b      	b.n	8003204 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003218:	4313      	orrs	r3, r2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800322a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	430b      	orrs	r3, r1
 8003236:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003244:	4313      	orrs	r3, r2
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d111      	bne.n	800327a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003262:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003268:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800326e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_ADC_Init+0x2cc>)
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	6979      	ldr	r1, [r7, #20]
 800328a:	430b      	orrs	r3, r1
 800328c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003296:	d014      	beq.n	80032c2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d00f      	beq.n	80032c2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80032a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032aa:	d00a      	beq.n	80032c2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_ADC_Init+0x2d0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032bc:	4925      	ldr	r1, [pc, #148]	; (8003354 <HAL_ADC_Init+0x2d0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	461a      	mov	r2, r3
 80032cc:	2100      	movs	r1, #0
 80032ce:	f7ff fd76 	bl	8002dbe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	461a      	mov	r2, r3
 80032dc:	491e      	ldr	r1, [pc, #120]	; (8003358 <HAL_ADC_Init+0x2d4>)
 80032de:	f7ff fd6e 	bl	8002dbe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f062 020f 	orn	r2, r2, #15
 80032f8:	629a      	str	r2, [r3, #40]	; 0x28
 80032fa:	e042      	b.n	8003382 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003304:	d13d      	bne.n	8003382 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	e00c      	b.n	8003326 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d006      	beq.n	800332e <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	3301      	adds	r3, #1
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b07      	cmp	r3, #7
 800332a:	d9ef      	bls.n	800330c <HAL_ADC_Init+0x288>
 800332c:	e000      	b.n	8003330 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800332e:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d112      	bne.n	800335c <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f062 020f 	orn	r2, r2, #15
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
 8003346:	e01c      	b.n	8003382 <HAL_ADC_Init+0x2fe>
 8003348:	20000000 	.word	0x20000000
 800334c:	053e2d63 	.word	0x053e2d63
 8003350:	1ffffc02 	.word	0x1ffffc02
 8003354:	40012708 	.word	0x40012708
 8003358:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	3b01      	subs	r3, #1
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	f003 031c 	and.w	r3, r3, #28
 800336e:	f06f 020f 	mvn.w	r2, #15
 8003372:	fa02 f103 	lsl.w	r1, r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fd36 	bl	8002dfa <LL_ADC_GetSamplingTimeCommonChannels>
 800338e:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003394:	429a      	cmp	r2, r3
 8003396:	d10b      	bne.n	80033b0 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80033ae:	e018      	b.n	80033e2 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f023 0312 	bic.w	r3, r3, #18
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80033d0:	e007      	b.n	80033e2 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f043 0210 	orr.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06a      	b.n	80034d4 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fabe 	bl	800398c <ADC_ConversionStop>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10f      	bne.n	800343a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fb82 	bl	8003b24 <ADC_Disable>
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fd7f 	bl	8002f38 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003448:	f023 0303 	bic.w	r3, r3, #3
 800344c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f240 329f 	movw	r2, #927	; 0x39f
 8003456:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_ADC_DeInit+0xf0>)
 8003464:	400b      	ands	r3, r1
 8003466:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003476:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0207 	bic.w	r2, r2, #7
 8003486:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003496:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_ADC_DeInit+0xf4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <HAL_ADC_DeInit+0xf4>)
 80034ac:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80034b0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fcea 	bl	8000e8c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	833e0200 	.word	0x833e0200
 80034e0:	40012708 	.word	0x40012708

080034e4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fdb5 	bl	8003060 <LL_ADC_REG_IsConversionOngoing>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d132      	bne.n	8003562 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_ADC_Start+0x26>
 8003506:	2302      	movs	r3, #2
 8003508:	e02e      	b.n	8003568 <HAL_ADC_Start+0x84>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa80 	bl	8003a18 <ADC_Enable>
 8003518:	4603      	mov	r3, r0
 800351a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11a      	bne.n	8003558 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	221c      	movs	r2, #28
 8003542:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fd5f 	bl	8003014 <LL_ADC_REG_StartConversion>
 8003556:	e006      	b.n	8003566 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003560:	e001      	b.n	8003566 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Stop+0x16>
 8003582:	2302      	movs	r3, #2
 8003584:	e022      	b.n	80035cc <HAL_ADC_Stop+0x5c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9fc 	bl	800398c <ADC_ConversionStop>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d111      	bne.n	80035c2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fac0 	bl	8003b24 <ADC_Disable>
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d102      	bne.n	80035ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80035e6:	2308      	movs	r3, #8
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e010      	b.n	800360e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e077      	b.n	80036fa <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800360a:	2304      	movs	r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800360e:	f7fe fb7b 	bl	8001d08 <HAL_GetTick>
 8003612:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003614:	e021      	b.n	800365a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d01d      	beq.n	800365a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800361e:	f7fe fb73 	bl	8001d08 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <HAL_ADC_PollForConversion+0x60>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d112      	bne.n	800365a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04f      	b.n	80036fa <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0d6      	beq.n	8003616 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fbd6 	bl	8002e2a <LL_ADC_REG_IsTriggerSourceSWStart>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d031      	beq.n	80036e8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7e9b      	ldrb	r3, [r3, #26]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d12d      	bne.n	80036e8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b08      	cmp	r3, #8
 8003698:	d126      	bne.n	80036e8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fcde 	bl	8003060 <LL_ADC_REG_IsConversionOngoing>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d112      	bne.n	80036d0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 020c 	bic.w	r2, r2, #12
 80036b8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	659a      	str	r2, [r3, #88]	; 0x58
 80036ce:	e00b      	b.n	80036e8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7e1b      	ldrb	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	220c      	movs	r2, #12
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
	...

0800371c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x28>
 8003740:	2302      	movs	r3, #2
 8003742:	e110      	b.n	8003966 <HAL_ADC_ConfigChannel+0x24a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fc85 	bl	8003060 <LL_ADC_REG_IsConversionOngoing>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 80f7 	bne.w	800394c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	f000 80b1 	beq.w	80038ca <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003770:	d004      	beq.n	800377c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003776:	4a7e      	ldr	r2, [pc, #504]	; (8003970 <HAL_ADC_ConfigChannel+0x254>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7ff fb82 	bl	8002e90 <LL_ADC_REG_SetSequencerChAdd>
 800378c:	e041      	b.n	8003812 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	210f      	movs	r1, #15
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	401a      	ands	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_ADC_ConfigChannel+0xa0>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e9b      	lsrs	r3, r3, #26
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	e011      	b.n	80037e0 <HAL_ADC_ConfigChannel+0xc4>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80037d4:	2320      	movs	r3, #32
 80037d6:	e003      	b.n	80037e0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	6849      	ldr	r1, [r1, #4]
 80037e4:	f001 011f 	and.w	r1, r1, #31
 80037e8:	408b      	lsls	r3, r1
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d808      	bhi.n	8003812 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	f7ff fb1e 	bl	8002e4e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	461a      	mov	r2, r3
 8003820:	f7ff fb5b 	bl	8002eda <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f280 8097 	bge.w	800395c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800382e:	4851      	ldr	r0, [pc, #324]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 8003830:	f7ff fab8 	bl	8002da4 <LL_ADC_GetCommonPathInternalCh>
 8003834:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <HAL_ADC_ConfigChannel+0x25c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d120      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11b      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003850:	4619      	mov	r1, r3
 8003852:	4848      	ldr	r0, [pc, #288]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 8003854:	f7ff fa94 	bl	8002d80 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003858:	4b48      	ldr	r3, [pc, #288]	; (800397c <HAL_ADC_ConfigChannel+0x260>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	4a48      	ldr	r2, [pc, #288]	; (8003980 <HAL_ADC_ConfigChannel+0x264>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003872:	e002      	b.n	800387a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f9      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003880:	e06c      	b.n	800395c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a3f      	ldr	r2, [pc, #252]	; (8003984 <HAL_ADC_ConfigChannel+0x268>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d10c      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x18a>
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389c:	4619      	mov	r1, r3
 800389e:	4835      	ldr	r0, [pc, #212]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 80038a0:	f7ff fa6e 	bl	8002d80 <LL_ADC_SetCommonPathInternalCh>
 80038a4:	e05a      	b.n	800395c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a37      	ldr	r2, [pc, #220]	; (8003988 <HAL_ADC_ConfigChannel+0x26c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d155      	bne.n	800395c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d150      	bne.n	800395c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038c0:	4619      	mov	r1, r3
 80038c2:	482c      	ldr	r0, [pc, #176]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 80038c4:	f7ff fa5c 	bl	8002d80 <LL_ADC_SetCommonPathInternalCh>
 80038c8:	e048      	b.n	800395c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038d2:	d004      	beq.n	80038de <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80038d8:	4a25      	ldr	r2, [pc, #148]	; (8003970 <HAL_ADC_ConfigChannel+0x254>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d107      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7ff fae3 	bl	8002eb4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da32      	bge.n	800395c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f6:	481f      	ldr	r0, [pc, #124]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 80038f8:	f7ff fa54 	bl	8002da4 <LL_ADC_GetCommonPathInternalCh>
 80038fc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_ADC_ConfigChannel+0x25c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d107      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800390e:	4619      	mov	r1, r3
 8003910:	4818      	ldr	r0, [pc, #96]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 8003912:	f7ff fa35 	bl	8002d80 <LL_ADC_SetCommonPathInternalCh>
 8003916:	e021      	b.n	800395c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_ADC_ConfigChannel+0x268>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d107      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003928:	4619      	mov	r1, r3
 800392a:	4812      	ldr	r0, [pc, #72]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 800392c:	f7ff fa28 	bl	8002d80 <LL_ADC_SetCommonPathInternalCh>
 8003930:	e014      	b.n	800395c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a14      	ldr	r2, [pc, #80]	; (8003988 <HAL_ADC_ConfigChannel+0x26c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10f      	bne.n	800395c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003942:	4619      	mov	r1, r3
 8003944:	480b      	ldr	r0, [pc, #44]	; (8003974 <HAL_ADC_ConfigChannel+0x258>)
 8003946:	f7ff fa1b 	bl	8002d80 <LL_ADC_SetCommonPathInternalCh>
 800394a:	e007      	b.n	800395c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003964:	7ffb      	ldrb	r3, [r7, #31]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	80000004 	.word	0x80000004
 8003974:	40012708 	.word	0x40012708
 8003978:	b0001000 	.word	0xb0001000
 800397c:	20000000 	.word	0x20000000
 8003980:	053e2d63 	.word	0x053e2d63
 8003984:	b8004000 	.word	0xb8004000
 8003988:	b4002000 	.word	0xb4002000

0800398c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fb61 	bl	8003060 <LL_ADC_REG_IsConversionOngoing>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d033      	beq.n	8003a0c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fb21 	bl	8002ff0 <LL_ADC_IsDisableOngoing>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fb3e 	bl	800303a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039be:	f7fe f9a3 	bl	8001d08 <HAL_GetTick>
 80039c2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80039c4:	e01b      	b.n	80039fe <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039c6:	f7fe f99f 	bl	8001d08 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d914      	bls.n	80039fe <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e007      	b.n	8003a0e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1dc      	bne.n	80039c6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff facf 	bl	8002fcc <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d169      	bne.n	8003b08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <ADC_Enable+0xfc>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e055      	b.n	8003b0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fa8c 	bl	8002f80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a68:	482b      	ldr	r0, [pc, #172]	; (8003b18 <ADC_Enable+0x100>)
 8003a6a:	f7ff f99b 	bl	8002da4 <LL_ADC_GetCommonPathInternalCh>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00f      	beq.n	8003a98 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <ADC_Enable+0x104>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <ADC_Enable+0x108>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	3301      	adds	r3, #1
 8003a88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a8a:	e002      	b.n	8003a92 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f9      	bne.n	8003a8c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7e5b      	ldrb	r3, [r3, #25]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d033      	beq.n	8003b08 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003aa0:	f7fe f932 	bl	8001d08 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa6:	e028      	b.n	8003afa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fa8d 	bl	8002fcc <LL_ADC_IsEnabled>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fa5f 	bl	8002f80 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ac2:	f7fe f921 	bl	8001d08 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d914      	bls.n	8003afa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d00d      	beq.n	8003afa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d1cf      	bne.n	8003aa8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	80000017 	.word	0x80000017
 8003b18:	40012708 	.word	0x40012708
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	053e2d63 	.word	0x053e2d63

08003b24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fa5d 	bl	8002ff0 <LL_ADC_IsDisableOngoing>
 8003b36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fa45 	bl	8002fcc <LL_ADC_IsEnabled>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d047      	beq.n	8003bd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d144      	bne.n	8003bd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0305 	and.w	r3, r3, #5
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10c      	bne.n	8003b76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fa20 	bl	8002fa6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b6e:	f7fe f8cb 	bl	8001d08 <HAL_GetTick>
 8003b72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b74:	e029      	b.n	8003bca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	f043 0210 	orr.w	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e023      	b.n	8003bda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b92:	f7fe f8b9 	bl	8001d08 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d914      	bls.n	8003bca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1dc      	bne.n	8003b92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <LL_ADC_SetCalibrationFactor>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bf2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <LL_ADC_GetCalibrationFactor>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_Enable>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c36:	f023 0317 	bic.w	r3, r3, #23
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_Disable>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c5c:	f023 0317 	bic.w	r3, r3, #23
 8003c60:	f043 0202 	orr.w	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_IsEnabled>:
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <LL_ADC_IsEnabled+0x18>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <LL_ADC_IsEnabled+0x1a>
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <LL_ADC_StartCalibration>:
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca6:	f023 0317 	bic.w	r3, r3, #23
 8003caa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_IsCalibrationOnGoing>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cd0:	d101      	bne.n	8003cd6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b088      	sub	sp, #32
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADCEx_Calibration_Start+0x1e>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0b9      	b.n	8003e74 <HAL_ADCEx_Calibration_Start+0x192>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff0b 	bl	8003b24 <ADC_Disable>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ffab 	bl	8003c72 <LL_ADC_IsEnabled>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 809d 	bne.w	8003e5e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d2c:	f043 0202 	orr.w	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	f248 0303 	movw	r3, #32771	; 0x8003
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d50:	f023 0303 	bic.w	r3, r3, #3
 8003d54:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e02e      	b.n	8003dba <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff98 	bl	8003c96 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d66:	e014      	b.n	8003d92 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003d74:	d30d      	bcc.n	8003d92 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	f023 0312 	bic.w	r3, r3, #18
 8003d7e:	f043 0210 	orr.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e070      	b.n	8003e74 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ff90 	bl	8003cbc <LL_ADC_IsCalibrationOnGoing>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e2      	bne.n	8003d68 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff2f 	bl	8003c0a <LL_ADC_GetCalibrationFactor>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4413      	add	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b07      	cmp	r3, #7
 8003dbe:	d9cd      	bls.n	8003d5c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff29 	bl	8003c26 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff01 	bl	8003be2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff31 	bl	8003c4c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dea:	f7fd ff8d 	bl	8001d08 <HAL_GetTick>
 8003dee:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003df0:	e01c      	b.n	8003e2c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003df2:	f7fd ff89 	bl	8001d08 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d915      	bls.n	8003e2c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff34 	bl	8003c72 <LL_ADC_IsEnabled>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	f043 0210 	orr.w	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e023      	b.n	8003e74 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff1e 	bl	8003c72 <LL_ADC_IsEnabled>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1da      	bne.n	8003df2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68d9      	ldr	r1, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f023 0303 	bic.w	r3, r3, #3
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e5c:	e005      	b.n	8003e6a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	f043 0210 	orr.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <__NVIC_GetPriorityGrouping+0x18>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 0307 	and.w	r3, r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0b      	blt.n	8003f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4906      	ldr	r1, [pc, #24]	; (8003f14 <__NVIC_EnableIRQ+0x34>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	e000e100 	.word	0xe000e100

08003f18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	db12      	blt.n	8003f50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	f003 021f 	and.w	r2, r3, #31
 8003f30:	490a      	ldr	r1, [pc, #40]	; (8003f5c <__NVIC_DisableIRQ+0x44>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2001      	movs	r0, #1
 8003f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3e:	3320      	adds	r3, #32
 8003f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f44:	f3bf 8f4f 	dsb	sy
}
 8003f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f4a:	f3bf 8f6f 	isb	sy
}
 8003f4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	e000e100 	.word	0xe000e100

08003f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	db0a      	blt.n	8003f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	490c      	ldr	r1, [pc, #48]	; (8003fac <__NVIC_SetPriority+0x4c>)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	0112      	lsls	r2, r2, #4
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	440b      	add	r3, r1
 8003f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f88:	e00a      	b.n	8003fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4908      	ldr	r1, [pc, #32]	; (8003fb0 <__NVIC_SetPriority+0x50>)
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	3b04      	subs	r3, #4
 8003f98:	0112      	lsls	r2, r2, #4
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	761a      	strb	r2, [r3, #24]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000e100 	.word	0xe000e100
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f1c3 0307 	rsb	r3, r3, #7
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	bf28      	it	cs
 8003fd2:	2304      	movcs	r3, #4
 8003fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d902      	bls.n	8003fe4 <NVIC_EncodePriority+0x30>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3b03      	subs	r3, #3
 8003fe2:	e000      	b.n	8003fe6 <NVIC_EncodePriority+0x32>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	43d9      	mvns	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800400c:	4313      	orrs	r3, r2
         );
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff2b 	bl	8003e7c <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800403c:	f7ff ff42 	bl	8003ec4 <__NVIC_GetPriorityGrouping>
 8004040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ffb4 	bl	8003fb4 <NVIC_EncodePriority>
 800404c:	4602      	mov	r2, r0
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff83 	bl	8003f60 <__NVIC_SetPriority>
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff35 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff43 	bl	8003f18 <__NVIC_DisableIRQ>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e08e      	b.n	80041cc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_DMA_Init+0x138>)
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d80f      	bhi.n	80040da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <HAL_DMA_Init+0x13c>)
 80040c2:	4413      	add	r3, r2
 80040c4:	4a45      	ldr	r2, [pc, #276]	; (80041dc <HAL_DMA_Init+0x140>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	009a      	lsls	r2, r3, #2
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a42      	ldr	r2, [pc, #264]	; (80041e0 <HAL_DMA_Init+0x144>)
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
 80040d8:	e00e      	b.n	80040f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4b40      	ldr	r3, [pc, #256]	; (80041e4 <HAL_DMA_Init+0x148>)
 80040e2:	4413      	add	r3, r2
 80040e4:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <HAL_DMA_Init+0x140>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	009a      	lsls	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a3c      	ldr	r2, [pc, #240]	; (80041e8 <HAL_DMA_Init+0x14c>)
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb24 	bl	8004798 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004158:	d102      	bne.n	8004160 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004168:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800416c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004176:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_DMA_Init+0x106>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d80c      	bhi.n	80041a2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb4d 	bl	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e008      	b.n	80041b4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40020407 	.word	0x40020407
 80041d8:	bffdfff8 	.word	0xbffdfff8
 80041dc:	cccccccd 	.word	0xcccccccd
 80041e0:	40020000 	.word	0x40020000
 80041e4:	bffdfbf8 	.word	0xbffdfbf8
 80041e8:	40020400 	.word	0x40020400

080041ec <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e07b      	b.n	80042f6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <HAL_DMA_DeInit+0x114>)
 8004216:	429a      	cmp	r2, r3
 8004218:	d80f      	bhi.n	800423a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_DMA_DeInit+0x118>)
 8004222:	4413      	add	r3, r2
 8004224:	4a38      	ldr	r2, [pc, #224]	; (8004308 <HAL_DMA_DeInit+0x11c>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	009a      	lsls	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a35      	ldr	r2, [pc, #212]	; (800430c <HAL_DMA_DeInit+0x120>)
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
 8004238:	e00e      	b.n	8004258 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	4b33      	ldr	r3, [pc, #204]	; (8004310 <HAL_DMA_DeInit+0x124>)
 8004242:	4413      	add	r3, r2
 8004244:	4a30      	ldr	r2, [pc, #192]	; (8004308 <HAL_DMA_DeInit+0x11c>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	009a      	lsls	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <HAL_DMA_DeInit+0x128>)
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f003 021c 	and.w	r2, r3, #28
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fa8f 	bl	8004798 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800428a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00f      	beq.n	80042b4 <HAL_DMA_DeInit+0xc8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d80b      	bhi.n	80042b4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fac3 	bl	8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042b2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40020407 	.word	0x40020407
 8004304:	bffdfff8 	.word	0xbffdfff8
 8004308:	cccccccd 	.word	0xcccccccd
 800430c:	40020000 	.word	0x40020000
 8004310:	bffdfbf8 	.word	0xbffdfbf8
 8004314:	40020400 	.word	0x40020400

08004318 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Start_IT+0x20>
 8004334:	2302      	movs	r3, #2
 8004336:	e069      	b.n	800440c <HAL_DMA_Start_IT+0xf4>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d155      	bne.n	80043f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0201 	bic.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f9d3 	bl	800471c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 020e 	orr.w	r2, r2, #14
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e00f      	b.n	80043b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 020a 	orr.w	r2, r2, #10
 80043ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e008      	b.n	800440a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e04f      	b.n	80044c6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d008      	beq.n	8004444 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e040      	b.n	80044c6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 020e 	bic.w	r2, r2, #14
 8004452:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004462:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f003 021c 	and.w	r2, r3, #28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f202 	lsl.w	r2, r1, r2
 8004486:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004490:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d005      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2204      	movs	r2, #4
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e047      	b.n	8004584 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020e 	bic.w	r2, r2, #14
 8004502:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	f003 021c 	and.w	r2, r3, #28
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f202 	lsl.w	r2, r1, r2
 8004536:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004540:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004562:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4798      	blx	r3
    }
  }
  return status;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f003 031c 	and.w	r3, r3, #28
 80045b0:	2204      	movs	r2, #4
 80045b2:	409a      	lsls	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d027      	beq.n	800460c <HAL_DMA_IRQHandler+0x7c>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d022      	beq.n	800460c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d107      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0204 	bic.w	r2, r2, #4
 80045e2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	f003 021c 	and.w	r2, r3, #28
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	2104      	movs	r1, #4
 80045f2:	fa01 f202 	lsl.w	r2, r1, r2
 80045f6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8081 	beq.w	8004704 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800460a:	e07b      	b.n	8004704 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	f003 031c 	and.w	r3, r3, #28
 8004614:	2202      	movs	r2, #2
 8004616:	409a      	lsls	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03d      	beq.n	800469c <HAL_DMA_IRQHandler+0x10c>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d038      	beq.n	800469c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10b      	bne.n	8004650 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 020a 	bic.w	r2, r2, #10
 8004646:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_DMA_IRQHandler+0x180>)
 8004658:	429a      	cmp	r2, r3
 800465a:	d909      	bls.n	8004670 <HAL_DMA_IRQHandler+0xe0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	f003 031c 	and.w	r3, r3, #28
 8004664:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <HAL_DMA_IRQHandler+0x184>)
 8004666:	2102      	movs	r1, #2
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	6053      	str	r3, [r2, #4]
 800466e:	e008      	b.n	8004682 <HAL_DMA_IRQHandler+0xf2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	f003 031c 	and.w	r3, r3, #28
 8004678:	4a27      	ldr	r2, [pc, #156]	; (8004718 <HAL_DMA_IRQHandler+0x188>)
 800467a:	2102      	movs	r1, #2
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d038      	beq.n	8004704 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800469a:	e033      	b.n	8004704 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	f003 031c 	and.w	r3, r3, #28
 80046a4:	2208      	movs	r2, #8
 80046a6:	409a      	lsls	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02a      	beq.n	8004706 <HAL_DMA_IRQHandler+0x176>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d025      	beq.n	8004706 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 020e 	bic.w	r2, r2, #14
 80046c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f003 021c 	and.w	r2, r3, #28
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2101      	movs	r1, #1
 80046d8:	fa01 f202 	lsl.w	r2, r1, r2
 80046dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004704:	bf00      	nop
 8004706:	bf00      	nop
}
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40020080 	.word	0x40020080
 8004714:	40020400 	.word	0x40020400
 8004718:	40020000 	.word	0x40020000

0800471c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004732:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f003 021c 	and.w	r2, r3, #28
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f202 	lsl.w	r2, r1, r2
 8004758:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b10      	cmp	r3, #16
 8004768:	d108      	bne.n	800477c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800477a:	e007      	b.n	800478c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
	...

08004798 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d813      	bhi.n	80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047b8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	3b08      	subs	r3, #8
 80047c8:	4a14      	ldr	r2, [pc, #80]	; (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e011      	b.n	80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	089b      	lsrs	r3, r3, #2
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80047de:	4413      	add	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	3b08      	subs	r3, #8
 80047ec:	4a0b      	ldr	r2, [pc, #44]	; (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	3307      	adds	r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80047fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40020407 	.word	0x40020407
 800481c:	cccccccd 	.word	0xcccccccd
 8004820:	4002081c 	.word	0x4002081c
 8004824:	40020880 	.word	0x40020880

08004828 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004838:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800484c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b01      	subs	r3, #1
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2201      	movs	r2, #1
 8004858:	409a      	lsls	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	1000823f 	.word	0x1000823f
 800486c:	40020940 	.word	0x40020940

08004870 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d12b      	bne.n	80048de <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004890:	2302      	movs	r3, #2
 8004892:	e028      	b.n	80048e6 <HAL_DMAEx_ConfigMuxSync+0x76>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	04db      	lsls	r3, r3, #19
 80048b2:	431a      	orrs	r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	7a1b      	ldrb	r3, [r3, #8]
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	431a      	orrs	r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	7a5b      	ldrb	r3, [r3, #9]
 80048c6:	025b      	lsls	r3, r3, #9
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e003      	b.n	80048e6 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2280      	movs	r2, #128	; 0x80
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01a      	beq.n	800493e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004916:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004920:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	2b00      	cmp	r3, #0
 8004944:	d022      	beq.n	800498c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01a      	beq.n	800498c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800496e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
      }
    }
  }
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <HAL_FLASH_Program+0x80>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_FLASH_Program+0x1a>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e02d      	b.n	8004a0a <HAL_FLASH_Program+0x76>
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_FLASH_Program+0x80>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_FLASH_Program+0x80>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049be:	f000 f869 	bl	8004a94 <FLASH_WaitForLastOperation>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d11a      	bne.n	8004a02 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80049d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f000 f8be 	bl	8004b58 <FLASH_Program_DoubleWord>
 80049dc:	e004      	b.n	80049e8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	4619      	mov	r1, r3
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f000 f8de 	bl	8004ba4 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ec:	f000 f852 	bl	8004a94 <FLASH_WaitForLastOperation>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_FLASH_Program+0x84>)
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	4906      	ldr	r1, [pc, #24]	; (8004a18 <HAL_FLASH_Program+0x84>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <HAL_FLASH_Program+0x80>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000494 	.word	0x20000494
 8004a18:	58004000 	.word	0x58004000

08004a1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_FLASH_Unlock+0x38>)
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	da0b      	bge.n	8004a46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_FLASH_Unlock+0x38>)
 8004a30:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_FLASH_Unlock+0x3c>)
 8004a32:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <HAL_FLASH_Unlock+0x38>)
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_FLASH_Unlock+0x40>)
 8004a38:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_FLASH_Unlock+0x38>)
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da01      	bge.n	8004a46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a46:	79fb      	ldrb	r3, [r7, #7]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	58004000 	.word	0x58004000
 8004a58:	45670123 	.word	0x45670123
 8004a5c:	cdef89ab 	.word	0xcdef89ab

08004a60 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HAL_FLASH_Lock+0x30>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <HAL_FLASH_Lock+0x30>)
 8004a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a74:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_FLASH_Lock+0x30>)
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	db01      	blt.n	8004a82 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004a82:	79fb      	ldrb	r3, [r7, #7]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	58004000 	.word	0x58004000

08004a94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004a9c:	f7fd f934 	bl	8001d08 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004aa2:	e009      	b.n	8004ab8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004aa4:	f7fd f930 	bl	8001d08 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d801      	bhi.n	8004ab8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e047      	b.n	8004b48 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <FLASH_WaitForLastOperation+0xbc>)
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d0ee      	beq.n	8004aa4 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <FLASH_WaitForLastOperation+0xbc>)
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ad6:	4b1e      	ldr	r3, [pc, #120]	; (8004b50 <FLASH_WaitForLastOperation+0xbc>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <FLASH_WaitForLastOperation+0x6c>
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <FLASH_WaitForLastOperation+0xbc>)
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004afa:	4915      	ldr	r1, [pc, #84]	; (8004b50 <FLASH_WaitForLastOperation+0xbc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	618b      	str	r3, [r1, #24]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d004      	beq.n	8004b14 <FLASH_WaitForLastOperation+0x80>
 8004b0a:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <FLASH_WaitForLastOperation+0xbc>)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004b12:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00e      	beq.n	8004b38 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004b1a:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <FLASH_WaitForLastOperation+0xc0>)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e011      	b.n	8004b48 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004b24:	f7fd f8f0 	bl	8001d08 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d801      	bhi.n	8004b38 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e007      	b.n	8004b48 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <FLASH_WaitForLastOperation+0xbc>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b44:	d0ee      	beq.n	8004b24 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	58004000 	.word	0x58004000
 8004b54:	20000494 	.word	0x20000494

08004b58 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <FLASH_Program_DoubleWord+0x48>)
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <FLASH_Program_DoubleWord+0x48>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b76:	f3bf 8f6f 	isb	sy
}
 8004b7a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	000a      	movs	r2, r1
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	3104      	adds	r1, #4
 8004b90:	4613      	mov	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	58004000 	.word	0x58004000

08004ba4 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004bba:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <FLASH_Program_Fast+0x78>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <FLASH_Program_Fast+0x78>)
 8004bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd0:	b672      	cpsid	i
}
 8004bd2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	3304      	adds	r3, #4
 8004be0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	3304      	adds	r3, #4
 8004be6:	617b      	str	r3, [r7, #20]
    row_index--;
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ef      	bne.n	8004bd4 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004bf4:	bf00      	nop
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <FLASH_Program_Fast+0x78>)
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c02:	d0f8      	beq.n	8004bf6 <FLASH_Program_Fast+0x52>
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004c10:	bf00      	nop
 8004c12:	3724      	adds	r7, #36	; 0x24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	58004000 	.word	0x58004000

08004c20 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <HAL_FLASHEx_Erase+0xac>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_FLASHEx_Erase+0x16>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e046      	b.n	8004cc4 <HAL_FLASHEx_Erase+0xa4>
 8004c36:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <HAL_FLASHEx_Erase+0xac>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_FLASHEx_Erase+0xac>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c46:	f7ff ff25 	bl	8004a94 <FLASH_WaitForLastOperation>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d133      	bne.n	8004cbc <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d108      	bne.n	8004c6e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004c5c:	f000 f880 	bl	8004d60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c64:	f7ff ff16 	bl	8004a94 <FLASH_WaitForLastOperation>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
 8004c6c:	e024      	b.n	8004cb8 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	f04f 32ff 	mov.w	r2, #4294967295
 8004c74:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	e012      	b.n	8004ca4 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004c7e:	68b8      	ldr	r0, [r7, #8]
 8004c80:	f000 f87e 	bl	8004d80 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c88:	f7ff ff04 	bl	8004a94 <FLASH_WaitForLastOperation>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	601a      	str	r2, [r3, #0]
          break;
 8004c9c:	e00a      	b.n	8004cb4 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d3e4      	bcc.n	8004c7e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004cb4:	f000 f8c0 	bl	8004e38 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004cb8:	f000 f87a 	bl	8004db0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <HAL_FLASHEx_Erase+0xac>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]

  return status;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000494 	.word	0x20000494

08004cd0 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004cd8:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_FLASHEx_Erase_IT+0x14>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e034      	b.n	8004d4e <HAL_FLASHEx_Erase_IT+0x7e>
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004cf6:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cfc:	f7ff feca 	bl	8004a94 <FLASH_WaitForLastOperation>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	e01c      	b.n	8004d4c <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_FLASHEx_Erase_IT+0x8c>)
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <HAL_FLASHEx_Erase_IT+0x8c>)
 8004d18:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004d1c:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d105      	bne.n	8004d32 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004d2c:	f000 f818 	bl	8004d60 <FLASH_MassErase>
 8004d30:	e00c      	b.n	8004d4c <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004d38:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4a06      	ldr	r2, [pc, #24]	; (8004d58 <HAL_FLASHEx_Erase_IT+0x88>)
 8004d40:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f81a 	bl	8004d80 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000494 	.word	0x20000494
 8004d5c:	58004000 	.word	0x58004000

08004d60 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <FLASH_MassErase+0x1c>)
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <FLASH_MassErase+0x1c>)
 8004d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6e:	f043 0304 	orr.w	r3, r3, #4
 8004d72:	6153      	str	r3, [r2, #20]
#endif
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr
 8004d7c:	58004000 	.word	0x58004000

08004d80 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <FLASH_PageErase+0x2c>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4313      	orrs	r3, r2
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <FLASH_PageErase+0x2c>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	6153      	str	r3, [r2, #20]
#endif
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	58004000 	.word	0x58004000

08004db0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004db4:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d117      	bne.n	8004df0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004dc0:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b16      	ldr	r3, [pc, #88]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004de2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dee:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004df0:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d117      	bne.n	8004e2c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a06      	ldr	r2, [pc, #24]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a03      	ldr	r2, [pc, #12]	; (8004e34 <FLASH_FlushCaches+0x84>)
 8004e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e2a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	58004000 	.word	0x58004000

08004e38 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <FLASH_AcknowledgePageErase+0x1c>)
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <FLASH_AcknowledgePageErase+0x1c>)
 8004e42:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004e46:	f023 0302 	bic.w	r3, r3, #2
 8004e4a:	6153      	str	r3, [r2, #20]
#endif
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	58004000 	.word	0x58004000

08004e58 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e66:	e140      	b.n	80050ea <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	4013      	ands	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8132 	beq.w	80050e4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d005      	beq.n	8004e98 <HAL_GPIO_Init+0x40>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d130      	bne.n	8004efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ece:	2201      	movs	r2, #1
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 0201 	and.w	r2, r3, #1
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d017      	beq.n	8004f36 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	2203      	movs	r2, #3
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43db      	mvns	r3, r3
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d123      	bne.n	8004f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	08da      	lsrs	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3208      	adds	r2, #8
 8004f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	220f      	movs	r2, #15
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	08da      	lsrs	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3208      	adds	r2, #8
 8004f84:	6939      	ldr	r1, [r7, #16]
 8004f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	2203      	movs	r2, #3
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 0203 	and.w	r2, r3, #3
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 808c 	beq.w	80050e4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004fcc:	4a4e      	ldr	r2, [pc, #312]	; (8005108 <HAL_GPIO_Init+0x2b0>)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	089b      	lsrs	r3, r3, #2
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	2207      	movs	r2, #7
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4013      	ands	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ff6:	d00d      	beq.n	8005014 <HAL_GPIO_Init+0x1bc>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a44      	ldr	r2, [pc, #272]	; (800510c <HAL_GPIO_Init+0x2b4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <HAL_GPIO_Init+0x1b8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a43      	ldr	r2, [pc, #268]	; (8005110 <HAL_GPIO_Init+0x2b8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_GPIO_Init+0x1b4>
 8005008:	2302      	movs	r3, #2
 800500a:	e004      	b.n	8005016 <HAL_GPIO_Init+0x1be>
 800500c:	2307      	movs	r3, #7
 800500e:	e002      	b.n	8005016 <HAL_GPIO_Init+0x1be>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <HAL_GPIO_Init+0x1be>
 8005014:	2300      	movs	r3, #0
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	f002 0203 	and.w	r2, r2, #3
 800501c:	0092      	lsls	r2, r2, #2
 800501e:	4093      	lsls	r3, r2
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005026:	4938      	ldr	r1, [pc, #224]	; (8005108 <HAL_GPIO_Init+0x2b0>)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	089b      	lsrs	r3, r3, #2
 800502c:	3302      	adds	r3, #2
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005034:	4b37      	ldr	r3, [pc, #220]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	43db      	mvns	r3, r3
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4013      	ands	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005058:	4a2e      	ldr	r2, [pc, #184]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800505e:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	43db      	mvns	r3, r3
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4013      	ands	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005082:	4a24      	ldr	r2, [pc, #144]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005088:	4b22      	ldr	r3, [pc, #136]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43db      	mvns	r3, r3
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4013      	ands	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80050ae:	4a19      	ldr	r2, [pc, #100]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80050b6:	4b17      	ldr	r3, [pc, #92]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 80050b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050bc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <HAL_GPIO_Init+0x2bc>)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3301      	adds	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f47f aeb7 	bne.w	8004e68 <HAL_GPIO_Init+0x10>
  }
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	48000400 	.word	0x48000400
 8005110:	48000800 	.word	0x48000800
 8005114:	58000800 	.word	0x58000800

08005118 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005126:	e0af      	b.n	8005288 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005128:	2201      	movs	r2, #1
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80a2 	beq.w	8005282 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800513e:	4a59      	ldr	r2, [pc, #356]	; (80052a4 <HAL_GPIO_DeInit+0x18c>)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	3302      	adds	r3, #2
 8005146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	2207      	movs	r2, #7
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005166:	d00d      	beq.n	8005184 <HAL_GPIO_DeInit+0x6c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a4f      	ldr	r2, [pc, #316]	; (80052a8 <HAL_GPIO_DeInit+0x190>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <HAL_GPIO_DeInit+0x68>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a4e      	ldr	r2, [pc, #312]	; (80052ac <HAL_GPIO_DeInit+0x194>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d101      	bne.n	800517c <HAL_GPIO_DeInit+0x64>
 8005178:	2302      	movs	r3, #2
 800517a:	e004      	b.n	8005186 <HAL_GPIO_DeInit+0x6e>
 800517c:	2307      	movs	r3, #7
 800517e:	e002      	b.n	8005186 <HAL_GPIO_DeInit+0x6e>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_GPIO_DeInit+0x6e>
 8005184:	2300      	movs	r3, #0
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	f002 0203 	and.w	r2, r2, #3
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	4093      	lsls	r3, r2
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	429a      	cmp	r2, r3
 8005194:	d136      	bne.n	8005204 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005196:	4b46      	ldr	r3, [pc, #280]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 8005198:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	43db      	mvns	r3, r3
 80051a0:	4943      	ldr	r1, [pc, #268]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80051a8:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 80051aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	493f      	ldr	r1, [pc, #252]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80051ba:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	493b      	ldr	r1, [pc, #236]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80051c8:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	43db      	mvns	r3, r3
 80051d0:	4937      	ldr	r1, [pc, #220]	; (80052b0 <HAL_GPIO_DeInit+0x198>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	2207      	movs	r2, #7
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80051e6:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <HAL_GPIO_DeInit+0x18c>)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	089b      	lsrs	r3, r3, #2
 80051ec:	3302      	adds	r3, #2
 80051ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	43da      	mvns	r2, r3
 80051f6:	482b      	ldr	r0, [pc, #172]	; (80052a4 <HAL_GPIO_DeInit+0x18c>)
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	400a      	ands	r2, r1
 80051fe:	3302      	adds	r3, #2
 8005200:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	2103      	movs	r1, #3
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	08da      	lsrs	r2, r3, #3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3208      	adds	r2, #8
 8005220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	08d2      	lsrs	r2, r2, #3
 8005238:	4019      	ands	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3208      	adds	r2, #8
 800523e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	2103      	movs	r1, #3
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	401a      	ands	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	2101      	movs	r1, #1
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	401a      	ands	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	2103      	movs	r1, #3
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	401a      	ands	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3301      	adds	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	f47f af49 	bne.w	8005128 <HAL_GPIO_DeInit+0x10>
  }
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	48000400 	.word	0x48000400
 80052ac:	48000800 	.word	0x48000800
 80052b0:	58000800 	.word	0x58000800

080052b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	807b      	strh	r3, [r7, #2]
 80052c0:	4613      	mov	r3, r2
 80052c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052c4:	787b      	ldrb	r3, [r7, #1]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052ca:	887a      	ldrh	r2, [r7, #2]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052d0:	e002      	b.n	80052d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052fa:	4a05      	ldr	r2, [pc, #20]	; (8005310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	4618      	mov	r0, r3
 8005304:	f005 f98e 	bl	800a624 <HAL_GPIO_EXTI_Callback>
  }
}
 8005308:	bf00      	nop
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	58000800 	.word	0x58000800

08005314 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005318:	4b04      	ldr	r3, [pc, #16]	; (800532c <HAL_PWR_EnableBkUpAccess+0x18>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a03      	ldr	r2, [pc, #12]	; (800532c <HAL_PWR_EnableBkUpAccess+0x18>)
 800531e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	58000400 	.word	0x58000400

08005330 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534e:	d10d      	bne.n	800536c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005350:	f000 f83c 	bl	80053cc <HAL_PWREx_DisableLowPowerRunMode>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800535a:	e015      	b.n	8005388 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <HAL_PWR_EnterSLEEPMode+0x60>)
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005368:	f000 f822 	bl	80053b0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800536c:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_PWR_EnterSLEEPMode+0x64>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800537e:	bf30      	wfi
 8005380:	e002      	b.n	8005388 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005382:	bf40      	sev
    __WFE();
 8005384:	bf20      	wfe
    __WFE();
 8005386:	bf20      	wfe
  }
}
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	58000400 	.word	0x58000400
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_PWREx_GetVoltageRange+0x14>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	58000400 	.word	0x58000400

080053b0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a03      	ldr	r2, [pc, #12]	; (80053c8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80053ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053be:	6013      	str	r3, [r2, #0]
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	58000400 	.word	0x58000400

080053cc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80053d2:	4b16      	ldr	r3, [pc, #88]	; (800542c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053dc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2232      	movs	r2, #50	; 0x32
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	0c9b      	lsrs	r3, r3, #18
 80053f0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80053f2:	e002      	b.n	80053fa <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005406:	d102      	bne.n	800540e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f2      	bne.n	80053f4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800540e:	4b07      	ldr	r3, [pc, #28]	; (800542c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541a:	d101      	bne.n	8005420 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e000      	b.n	8005422 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	58000400 	.word	0x58000400
 8005430:	20000000 	.word	0x20000000
 8005434:	431bde83 	.word	0x431bde83

08005438 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005458:	f043 0304 	orr.w	r3, r3, #4
 800545c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005464:	bf30      	wfi
 8005466:	e002      	b.n	800546e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005468:	bf40      	sev
    __WFE();
 800546a:	bf20      	wfe
    __WFE();
 800546c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	4a05      	ldr	r2, [pc, #20]	; (8005488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005474:	f023 0304 	bic.w	r3, r3, #4
 8005478:	6113      	str	r3, [r2, #16]
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	58000400 	.word	0x58000400
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <LL_PWR_IsEnabledBkUpAccess>:
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549c:	d101      	bne.n	80054a2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	58000400 	.word	0x58000400

080054b0 <LL_RCC_HSE_EnableTcxo>:
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054c2:	6013      	str	r3, [r2, #0]
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <LL_RCC_HSE_DisableTcxo>:
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054de:	6013      	str	r3, [r2, #0]
}
 80054e0:	bf00      	nop
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fa:	d101      	bne.n	8005500 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <LL_RCC_HSE_Enable>:
{
 800550a:	b480      	push	{r7}
 800550c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800550e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551c:	6013      	str	r3, [r2, #0]
}
 800551e:	bf00      	nop
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <LL_RCC_HSE_Disable>:
{
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800552a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005538:	6013      	str	r3, [r2, #0]
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <LL_RCC_HSE_IsReady>:
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005554:	d101      	bne.n	800555a <LL_RCC_HSE_IsReady+0x18>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <LL_RCC_HSE_IsReady+0x1a>
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <LL_RCC_HSI_Enable>:
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005576:	6013      	str	r3, [r2, #0]
}
 8005578:	bf00      	nop
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <LL_RCC_HSI_Disable>:
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800558e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <LL_RCC_HSI_IsReady>:
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ae:	d101      	bne.n	80055b4 <LL_RCC_HSI_IsReady+0x18>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <LL_RCC_HSI_IsReady+0x1a>
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <LL_RCC_HSI_SetCalibTrimming>:
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d8:	4313      	orrs	r3, r2
 80055da:	604b      	str	r3, [r1, #4]
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <LL_RCC_LSE_IsReady>:
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d101      	bne.n	80055fe <LL_RCC_LSE_IsReady+0x18>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <LL_RCC_LSE_IsReady+0x1a>
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr

08005608 <LL_RCC_LSI_Enable>:
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <LL_RCC_LSI_Disable>:
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800562c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <LL_RCC_LSI_IsReady>:
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d101      	bne.n	8005660 <LL_RCC_LSI_IsReady+0x18>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <LL_RCC_LSI_IsReady+0x1a>
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <LL_RCC_MSI_Enable>:
{
 800566a:	b480      	push	{r7}
 800566c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6013      	str	r3, [r2, #0]
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <LL_RCC_MSI_Disable>:
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6013      	str	r3, [r2, #0]
}
 800569a:	bf00      	nop
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <LL_RCC_MSI_IsReady>:
{
 80056a2:	b480      	push	{r7}
 80056a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d101      	bne.n	80056b8 <LL_RCC_MSI_IsReady+0x16>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <LL_RCC_MSI_IsReady+0x18>
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80056c2:	b480      	push	{r7}
 80056c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80056c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d101      	bne.n	80056d8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <LL_RCC_MSI_GetRange>:
{
 80056e2:	b480      	push	{r7}
 80056e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80056e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005704:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800572a:	4313      	orrs	r3, r2
 800572c:	604b      	str	r3, [r1, #4]
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <LL_RCC_SetSysClkSource>:
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 0203 	bic.w	r2, r3, #3
 800574a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4313      	orrs	r3, r2
 8005752:	608b      	str	r3, [r1, #8]
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <LL_RCC_GetSysClkSource>:
{
 800575e:	b480      	push	{r7}
 8005760:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030c 	and.w	r3, r3, #12
}
 800576c:	4618      	mov	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <LL_RCC_SetAHBPrescaler>:
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr

0800579a <LL_RCC_SetAHB3Prescaler>:
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80057a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057aa:	f023 020f 	bic.w	r2, r3, #15
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <LL_RCC_SetAPB1Prescaler>:
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80057ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_SetAPB2Prescaler>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4313      	orrs	r3, r2
 8005806:	608b      	str	r3, [r1, #8]
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <LL_RCC_GetAHBPrescaler>:
{
 8005812:	b480      	push	{r7}
 8005814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005820:	4618      	mov	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <LL_RCC_GetAHB3Prescaler>:
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005830:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800583a:	4618      	mov	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <LL_RCC_GetAPB1Prescaler>:
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <LL_RCC_GetAPB2Prescaler>:
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800585c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005866:	4618      	mov	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800587c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005880:	6013      	str	r3, [r2, #0]
}
 8005882:	bf00      	nop
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589c:	6013      	str	r3, [r2, #0]
}
 800589e:	bf00      	nop
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b8:	d101      	bne.n	80058be <LL_RCC_PLL_IsReady+0x18>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <LL_RCC_PLL_IsReady+0x1a>
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80058e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr

080058f6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80058f6:	b480      	push	{r7}
 80058f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
}
 800591a:	4618      	mov	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005922:	b480      	push	{r7}
 8005924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d101      	bne.n	800593a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d101      	bne.n	800595e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800597a:	d101      	bne.n	8005980 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800599c:	d101      	bne.n	80059a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e38b      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059be:	f7ff fece 	bl	800575e <LL_RCC_GetSysClkSource>
 80059c2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c4:	f7ff ffa2 	bl	800590c <LL_RCC_PLL_GetMainSource>
 80059c8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80c9 	beq.w	8005b6a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_RCC_OscConfig+0x3e>
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	d17b      	bne.n	8005adc <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d178      	bne.n	8005adc <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059ea:	f7ff fe5a 	bl	80056a2 <LL_RCC_MSI_IsReady>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_OscConfig+0x54>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e36a      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_RCC_OscConfig+0x72>
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1c:	e006      	b.n	8005a2c <HAL_RCC_OscConfig+0x80>
 8005a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d222      	bcs.n	8005a76 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fd51 	bl	80064dc <RCC_SetFlashLatencyFromMSIRange>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e348      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4e:	f043 0308 	orr.w	r3, r3, #8
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fe4e 	bl	8005710 <LL_RCC_MSI_SetCalibTrimming>
 8005a74:	e021      	b.n	8005aba <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a80:	f043 0308 	orr.w	r3, r3, #8
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fe35 	bl	8005710 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fd16 	bl	80064dc <RCC_SetFlashLatencyFromMSIRange>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e30d      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005aba:	f000 fcd7 	bl	800646c <HAL_RCC_GetHCLKFreq>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4aa1      	ldr	r2, [pc, #644]	; (8005d48 <HAL_RCC_OscConfig+0x39c>)
 8005ac2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ac4:	4ba1      	ldr	r3, [pc, #644]	; (8005d4c <HAL_RCC_OscConfig+0x3a0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc f913 	bl	8001cf4 <HAL_InitTick>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005ad2:	7cfb      	ldrb	r3, [r7, #19]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d047      	beq.n	8005b68 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005ad8:	7cfb      	ldrb	r3, [r7, #19]
 8005ada:	e2fc      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d02c      	beq.n	8005b3e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ae4:	f7ff fdc1 	bl	800566a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ae8:	f7fc f90e 	bl	8001d08 <HAL_GetTick>
 8005aec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005af0:	f7fc f90a 	bl	8001d08 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e2e9      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b02:	f7ff fdce 	bl	80056a2 <LL_RCC_MSI_IsReady>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f1      	beq.n	8005af0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b16:	f043 0308 	orr.w	r3, r3, #8
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fdea 	bl	8005710 <LL_RCC_MSI_SetCalibTrimming>
 8005b3c:	e015      	b.n	8005b6a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b3e:	f7ff fda2 	bl	8005686 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b42:	f7fc f8e1 	bl	8001d08 <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b4a:	f7fc f8dd 	bl	8001d08 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e2bc      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b5c:	f7ff fda1 	bl	80056a2 <LL_RCC_MSI_IsReady>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f1      	bne.n	8005b4a <HAL_RCC_OscConfig+0x19e>
 8005b66:	e000      	b.n	8005b6a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b68:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d05f      	beq.n	8005c36 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_OscConfig+0x1dc>
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d10d      	bne.n	8005b9e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d10a      	bne.n	8005b9e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b88:	f7ff fcdb 	bl	8005542 <LL_RCC_HSE_IsReady>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d050      	beq.n	8005c34 <HAL_RCC_OscConfig+0x288>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d14c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e29b      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x218>
 8005bbe:	f7ff fca4 	bl	800550a <LL_RCC_HSE_Enable>
 8005bc2:	e00d      	b.n	8005be0 <HAL_RCC_OscConfig+0x234>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005bcc:	d104      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x22c>
 8005bce:	f7ff fc6f 	bl	80054b0 <LL_RCC_HSE_EnableTcxo>
 8005bd2:	f7ff fc9a 	bl	800550a <LL_RCC_HSE_Enable>
 8005bd6:	e003      	b.n	8005be0 <HAL_RCC_OscConfig+0x234>
 8005bd8:	f7ff fca5 	bl	8005526 <LL_RCC_HSE_Disable>
 8005bdc:	f7ff fc76 	bl	80054cc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fc f88e 	bl	8001d08 <HAL_GetTick>
 8005bec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fc f88a 	bl	8001d08 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	; 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e269      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c02:	f7ff fc9e 	bl	8005542 <LL_RCC_HSE_IsReady>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f1      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x244>
 8005c0c:	e013      	b.n	8005c36 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fc f87b 	bl	8001d08 <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c16:	f7fc f877 	bl	8001d08 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b64      	cmp	r3, #100	; 0x64
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e256      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c28:	f7ff fc8b 	bl	8005542 <LL_RCC_HSE_IsReady>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f1      	bne.n	8005c16 <HAL_RCC_OscConfig+0x26a>
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d04b      	beq.n	8005cda <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_OscConfig+0x2a8>
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d113      	bne.n	8005c76 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d110      	bne.n	8005c76 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c54:	f7ff fca2 	bl	800559c <LL_RCC_HSI_IsReady>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_RCC_OscConfig+0x2be>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e235      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fca5 	bl	80055be <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c74:	e031      	b.n	8005cda <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d019      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c7e:	f7ff fc71 	bl	8005564 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fc f841 	bl	8001d08 <HAL_GetTick>
 8005c86:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fc f83d 	bl	8001d08 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e21c      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c9c:	f7ff fc7e 	bl	800559c <LL_RCC_HSI_IsReady>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f1      	beq.n	8005c8a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fc87 	bl	80055be <LL_RCC_HSI_SetCalibTrimming>
 8005cb0:	e013      	b.n	8005cda <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cb2:	f7ff fc65 	bl	8005580 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fc f827 	bl	8001d08 <HAL_GetTick>
 8005cba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cbe:	f7fc f823 	bl	8001d08 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e202      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005cd0:	f7ff fc64 	bl	800559c <LL_RCC_HSI_IsReady>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f1      	bne.n	8005cbe <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d06f      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d057      	beq.n	8005d9e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d036      	beq.n	8005d74 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d006      	beq.n	8005d1e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e1db      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d018      	beq.n	8005d5a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005d28:	f7ff fc7e 	bl	8005628 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d2c:	f7fb ffec 	bl	8001d08 <HAL_GetTick>
 8005d30:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d32:	e00d      	b.n	8005d50 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d34:	f7fb ffe8 	bl	8001d08 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b11      	cmp	r3, #17
 8005d40:	d906      	bls.n	8005d50 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e1c7      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
 8005d46:	bf00      	nop
 8005d48:	20000000 	.word	0x20000000
 8005d4c:	20000008 	.word	0x20000008
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d50:	f7ff fc7a 	bl	8005648 <LL_RCC_LSI_IsReady>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ec      	bne.n	8005d34 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d62:	f023 0210 	bic.w	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d74:	f7ff fc48 	bl	8005608 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d78:	f7fb ffc6 	bl	8001d08 <HAL_GetTick>
 8005d7c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d80:	f7fb ffc2 	bl	8001d08 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b11      	cmp	r3, #17
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e1a1      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d92:	f7ff fc59 	bl	8005648 <LL_RCC_LSI_IsReady>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f1      	beq.n	8005d80 <HAL_RCC_OscConfig+0x3d4>
 8005d9c:	e013      	b.n	8005dc6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d9e:	f7ff fc43 	bl	8005628 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fb ffb1 	bl	8001d08 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005daa:	f7fb ffad 	bl	8001d08 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b11      	cmp	r3, #17
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e18c      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005dbc:	f7ff fc44 	bl	8005648 <LL_RCC_LSI_IsReady>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f1      	bne.n	8005daa <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 80d8 	beq.w	8005f84 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005dd4:	f7ff fb5a 	bl	800548c <LL_PWR_IsEnabledBkUpAccess>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d113      	bne.n	8005e06 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005dde:	f7ff fa99 	bl	8005314 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005de2:	f7fb ff91 	bl	8001d08 <HAL_GetTick>
 8005de6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dea:	f7fb ff8d 	bl	8001d08 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e16c      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005dfc:	f7ff fb46 	bl	800548c <LL_PWR_IsEnabledBkUpAccess>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f1      	beq.n	8005dea <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d07b      	beq.n	8005f06 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b85      	cmp	r3, #133	; 0x85
 8005e14:	d003      	beq.n	8005e1e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d109      	bne.n	8005e32 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2a:	f043 0304 	orr.w	r3, r3, #4
 8005e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e32:	f7fb ff69 	bl	8001d08 <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e4c:	e00a      	b.n	8005e64 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4e:	f7fb ff5b 	bl	8001d08 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e138      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e64:	f7ff fbbf 	bl	80055e6 <LL_RCC_LSE_IsReady>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0ef      	beq.n	8005e4e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b81      	cmp	r3, #129	; 0x81
 8005e74:	d003      	beq.n	8005e7e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b85      	cmp	r3, #133	; 0x85
 8005e7c:	d121      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fb ff43 	bl	8001d08 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e98:	e00a      	b.n	8005eb0 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9a:	f7fb ff35 	bl	8001d08 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e112      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0ec      	beq.n	8005e9a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ec0:	e060      	b.n	8005f84 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec2:	f7fb ff21 	bl	8001d08 <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fb ff13 	bl	8001d08 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0f0      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ec      	bne.n	8005ede <HAL_RCC_OscConfig+0x532>
 8005f04:	e03e      	b.n	8005f84 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f06:	f7fb feff 	bl	8001d08 <HAL_GetTick>
 8005f0a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f20:	e00a      	b.n	8005f38 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f22:	f7fb fef1 	bl	8001d08 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e0ce      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ec      	bne.n	8005f22 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f48:	f7fb fede 	bl	8001d08 <HAL_GetTick>
 8005f4c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5a:	f023 0301 	bic.w	r3, r3, #1
 8005f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f62:	e00a      	b.n	8005f7a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fb fed0 	bl	8001d08 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0ad      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f7a:	f7ff fb34 	bl	80055e6 <LL_RCC_LSE_IsReady>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1ef      	bne.n	8005f64 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80a3 	beq.w	80060d4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	d076      	beq.n	8006082 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d14b      	bne.n	8006034 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f9c:	f7ff fc75 	bl	800588a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fb feb2 	bl	8001d08 <HAL_GetTick>
 8005fa4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa8:	f7fb feae 	bl	8001d08 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b0a      	cmp	r3, #10
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e08d      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fba:	f7ff fc74 	bl	80058a6 <LL_RCC_PLL_IsReady>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f1      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	4b45      	ldr	r3, [pc, #276]	; (80060e0 <HAL_RCC_OscConfig+0x734>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fd6:	4311      	orrs	r1, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fdc:	0212      	lsls	r2, r2, #8
 8005fde:	4311      	orrs	r1, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fe4:	4311      	orrs	r1, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fea:	4311      	orrs	r1, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ffa:	f7ff fc38 	bl	800586e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600e:	f7fb fe7b 	bl	8001d08 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006016:	f7fb fe77 	bl	8001d08 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b0a      	cmp	r3, #10
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e056      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006028:	f7ff fc3d 	bl	80058a6 <LL_RCC_PLL_IsReady>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f1      	beq.n	8006016 <HAL_RCC_OscConfig+0x66a>
 8006032:	e04f      	b.n	80060d4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006034:	f7ff fc29 	bl	800588a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006052:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fb fe54 	bl	8001d08 <HAL_GetTick>
 8006060:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006064:	f7fb fe50 	bl	8001d08 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b0a      	cmp	r3, #10
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e02f      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006076:	f7ff fc16 	bl	80058a6 <LL_RCC_PLL_IsReady>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f1      	bne.n	8006064 <HAL_RCC_OscConfig+0x6b8>
 8006080:	e028      	b.n	80060d4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e023      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800608e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f003 0203 	and.w	r2, r3, #3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d115      	bne.n	80060d0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d10e      	bne.n	80060d0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	429a      	cmp	r2, r3
 80060c0:	d106      	bne.n	80060d0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d001      	beq.n	80060d4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	11c1808c 	.word	0x11c1808c

080060e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e10f      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060f8:	4b89      	ldr	r3, [pc, #548]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d91b      	bls.n	800613e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006106:	4b86      	ldr	r3, [pc, #536]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f023 0207 	bic.w	r2, r3, #7
 800610e:	4984      	ldr	r1, [pc, #528]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	4313      	orrs	r3, r2
 8006114:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006116:	f7fb fdf7 	bl	8001d08 <HAL_GetTick>
 800611a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611c:	e008      	b.n	8006130 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800611e:	f7fb fdf3 	bl	8001d08 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e0f3      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006130:	4b7b      	ldr	r3, [pc, #492]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d1ef      	bne.n	800611e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fb10 	bl	8005774 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006154:	f7fb fdd8 	bl	8001d08 <HAL_GetTick>
 8006158:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800615a:	e008      	b.n	800616e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800615c:	f7fb fdd4 	bl	8001d08 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e0d4      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800616e:	f7ff fbd8 	bl	8005922 <LL_RCC_IsActiveFlag_HPRE>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f1      	beq.n	800615c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d016      	beq.n	80061b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fb06 	bl	800579a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800618e:	f7fb fdbb 	bl	8001d08 <HAL_GetTick>
 8006192:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006196:	f7fb fdb7 	bl	8001d08 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e0b7      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80061a8:	f7ff fbcc 	bl	8005944 <LL_RCC_IsActiveFlag_SHDHPRE>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f1      	beq.n	8006196 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff faff 	bl	80057c6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061c8:	f7fb fd9e 	bl	8001d08 <HAL_GetTick>
 80061cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061d0:	f7fb fd9a 	bl	8001d08 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e09a      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061e2:	f7ff fbc1 	bl	8005968 <LL_RCC_IsActiveFlag_PPRE1>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f1      	beq.n	80061d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d017      	beq.n	8006228 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff faf4 	bl	80057ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006204:	f7fb fd80 	bl	8001d08 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800620c:	f7fb fd7c 	bl	8001d08 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e07c      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800621e:	f7ff fbb4 	bl	800598a <LL_RCC_IsActiveFlag_PPRE2>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f1      	beq.n	800620c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d043      	beq.n	80062bc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d106      	bne.n	800624a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800623c:	f7ff f981 	bl	8005542 <LL_RCC_HSE_IsReady>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d11e      	bne.n	8006284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e066      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d106      	bne.n	8006260 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006252:	f7ff fb28 	bl	80058a6 <LL_RCC_PLL_IsReady>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d113      	bne.n	8006284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e05b      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006268:	f7ff fa1b 	bl	80056a2 <LL_RCC_MSI_IsReady>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e050      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006276:	f7ff f991 	bl	800559c <LL_RCC_HSI_IsReady>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e049      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fa55 	bl	8005738 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628e:	f7fb fd3b 	bl	8001d08 <HAL_GetTick>
 8006292:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006294:	e00a      	b.n	80062ac <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006296:	f7fb fd37 	bl	8001d08 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e035      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ac:	f7ff fa57 	bl	800575e <LL_RCC_GetSysClkSource>
 80062b0:	4602      	mov	r2, r0
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d1ec      	bne.n	8006296 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062bc:	4b18      	ldr	r3, [pc, #96]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d21b      	bcs.n	8006302 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4b15      	ldr	r3, [pc, #84]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f023 0207 	bic.w	r2, r3, #7
 80062d2:	4913      	ldr	r1, [pc, #76]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062da:	f7fb fd15 	bl	8001d08 <HAL_GetTick>
 80062de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062e2:	f7fb fd11 	bl	8001d08 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e011      	b.n	8006318 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <HAL_RCC_ClockConfig+0x23c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d1ef      	bne.n	80062e2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006302:	f000 f8b3 	bl	800646c <HAL_RCC_GetHCLKFreq>
 8006306:	4603      	mov	r3, r0
 8006308:	4a06      	ldr	r2, [pc, #24]	; (8006324 <HAL_RCC_ClockConfig+0x240>)
 800630a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <HAL_RCC_ClockConfig+0x244>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f7fb fcef 	bl	8001cf4 <HAL_InitTick>
 8006316:	4603      	mov	r3, r0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	58004000 	.word	0x58004000
 8006324:	20000000 	.word	0x20000000
 8006328:	20000008 	.word	0x20000008

0800632c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800633a:	f7ff fa10 	bl	800575e <LL_RCC_GetSysClkSource>
 800633e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006340:	f7ff fae4 	bl	800590c <LL_RCC_PLL_GetMainSource>
 8006344:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x2c>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b0c      	cmp	r3, #12
 8006350:	d139      	bne.n	80063c6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d136      	bne.n	80063c6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006358:	f7ff f9b3 	bl	80056c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d115      	bne.n	800638e <HAL_RCC_GetSysClockFreq+0x62>
 8006362:	f7ff f9ae 	bl	80056c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d106      	bne.n	800637a <HAL_RCC_GetSysClockFreq+0x4e>
 800636c:	f7ff f9b9 	bl	80056e2 <LL_RCC_MSI_GetRange>
 8006370:	4603      	mov	r3, r0
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	e005      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x5a>
 800637a:	f7ff f9bd 	bl	80056f8 <LL_RCC_MSI_GetRangeAfterStandby>
 800637e:	4603      	mov	r3, r0
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	4a36      	ldr	r2, [pc, #216]	; (8006460 <HAL_RCC_GetSysClockFreq+0x134>)
 8006388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638c:	e014      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x8c>
 800638e:	f7ff f998 	bl	80056c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006392:	4603      	mov	r3, r0
 8006394:	2b01      	cmp	r3, #1
 8006396:	d106      	bne.n	80063a6 <HAL_RCC_GetSysClockFreq+0x7a>
 8006398:	f7ff f9a3 	bl	80056e2 <LL_RCC_MSI_GetRange>
 800639c:	4603      	mov	r3, r0
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	e005      	b.n	80063b2 <HAL_RCC_GetSysClockFreq+0x86>
 80063a6:	f7ff f9a7 	bl	80056f8 <LL_RCC_MSI_GetRangeAfterStandby>
 80063aa:	4603      	mov	r3, r0
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	4a2b      	ldr	r2, [pc, #172]	; (8006460 <HAL_RCC_GetSysClockFreq+0x134>)
 80063b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d115      	bne.n	80063ec <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063c4:	e012      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d102      	bne.n	80063d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063cc:	4b25      	ldr	r3, [pc, #148]	; (8006464 <HAL_RCC_GetSysClockFreq+0x138>)
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e00c      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d109      	bne.n	80063ec <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80063d8:	f7ff f886 	bl	80054e8 <LL_RCC_HSE_IsEnabledDiv2>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d102      	bne.n	80063e8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80063e2:	4b20      	ldr	r3, [pc, #128]	; (8006464 <HAL_RCC_GetSysClockFreq+0x138>)
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e001      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80063e8:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063ea:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ec:	f7ff f9b7 	bl	800575e <LL_RCC_GetSysClkSource>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b0c      	cmp	r3, #12
 80063f4:	d12f      	bne.n	8006456 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80063f6:	f7ff fa89 	bl	800590c <LL_RCC_PLL_GetMainSource>
 80063fa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d003      	beq.n	800640a <HAL_RCC_GetSysClockFreq+0xde>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d003      	beq.n	8006410 <HAL_RCC_GetSysClockFreq+0xe4>
 8006408:	e00d      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800640a:	4b16      	ldr	r3, [pc, #88]	; (8006464 <HAL_RCC_GetSysClockFreq+0x138>)
 800640c:	60fb      	str	r3, [r7, #12]
        break;
 800640e:	e00d      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006410:	f7ff f86a 	bl	80054e8 <LL_RCC_HSE_IsEnabledDiv2>
 8006414:	4603      	mov	r3, r0
 8006416:	2b01      	cmp	r3, #1
 8006418:	d102      	bne.n	8006420 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800641a:	4b12      	ldr	r3, [pc, #72]	; (8006464 <HAL_RCC_GetSysClockFreq+0x138>)
 800641c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800641e:	e005      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006420:	4b11      	ldr	r3, [pc, #68]	; (8006468 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006422:	60fb      	str	r3, [r7, #12]
        break;
 8006424:	e002      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	60fb      	str	r3, [r7, #12]
        break;
 800642a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800642c:	f7ff fa4c 	bl	80058c8 <LL_RCC_PLL_GetN>
 8006430:	4602      	mov	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	fb03 f402 	mul.w	r4, r3, r2
 8006438:	f7ff fa5d 	bl	80058f6 <LL_RCC_PLL_GetDivider>
 800643c:	4603      	mov	r3, r0
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	3301      	adds	r3, #1
 8006442:	fbb4 f4f3 	udiv	r4, r4, r3
 8006446:	f7ff fa4b 	bl	80058e0 <LL_RCC_PLL_GetR>
 800644a:	4603      	mov	r3, r0
 800644c:	0f5b      	lsrs	r3, r3, #29
 800644e:	3301      	adds	r3, #1
 8006450:	fbb4 f3f3 	udiv	r3, r4, r3
 8006454:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006456:	697b      	ldr	r3, [r7, #20]
}
 8006458:	4618      	mov	r0, r3
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd90      	pop	{r4, r7, pc}
 8006460:	0801bd68 	.word	0x0801bd68
 8006464:	00f42400 	.word	0x00f42400
 8006468:	01e84800 	.word	0x01e84800

0800646c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800646c:	b598      	push	{r3, r4, r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006470:	f7ff ff5c 	bl	800632c <HAL_RCC_GetSysClockFreq>
 8006474:	4604      	mov	r4, r0
 8006476:	f7ff f9cc 	bl	8005812 <LL_RCC_GetAHBPrescaler>
 800647a:	4603      	mov	r3, r0
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	4a03      	ldr	r2, [pc, #12]	; (8006490 <HAL_RCC_GetHCLKFreq+0x24>)
 8006484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006488:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd98      	pop	{r3, r4, r7, pc}
 8006490:	0801bd08 	.word	0x0801bd08

08006494 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006494:	b598      	push	{r3, r4, r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006498:	f7ff ffe8 	bl	800646c <HAL_RCC_GetHCLKFreq>
 800649c:	4604      	mov	r4, r0
 800649e:	f7ff f9d0 	bl	8005842 <LL_RCC_GetAPB1Prescaler>
 80064a2:	4603      	mov	r3, r0
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	4a03      	ldr	r2, [pc, #12]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	bd98      	pop	{r3, r4, r7, pc}
 80064b4:	0801bd48 	.word	0x0801bd48

080064b8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b8:	b598      	push	{r3, r4, r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80064bc:	f7ff ffd6 	bl	800646c <HAL_RCC_GetHCLKFreq>
 80064c0:	4604      	mov	r4, r0
 80064c2:	f7ff f9c9 	bl	8005858 <LL_RCC_GetAPB2Prescaler>
 80064c6:	4603      	mov	r3, r0
 80064c8:	0adb      	lsrs	r3, r3, #11
 80064ca:	4a03      	ldr	r2, [pc, #12]	; (80064d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd98      	pop	{r3, r4, r7, pc}
 80064d8:	0801bd48 	.word	0x0801bd48

080064dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	091b      	lsrs	r3, r3, #4
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	4a10      	ldr	r2, [pc, #64]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80064ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80064f4:	f7ff f998 	bl	8005828 <LL_RCC_GetAHB3Prescaler>
 80064f8:	4603      	mov	r3, r0
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	4a0c      	ldr	r2, [pc, #48]	; (8006534 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4a09      	ldr	r2, [pc, #36]	; (8006538 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	0c9c      	lsrs	r4, r3, #18
 8006518:	f7fe ff3e 	bl	8005398 <HAL_PWREx_GetVoltageRange>
 800651c:	4603      	mov	r3, r0
 800651e:	4619      	mov	r1, r3
 8006520:	4620      	mov	r0, r4
 8006522:	f000 f80b 	bl	800653c <RCC_SetFlashLatency>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	bd90      	pop	{r4, r7, pc}
 8006530:	0801bd68 	.word	0x0801bd68
 8006534:	0801bd08 	.word	0x0801bd08
 8006538:	431bde83 	.word	0x431bde83

0800653c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08e      	sub	sp, #56	; 0x38
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006546:	4a3a      	ldr	r2, [pc, #232]	; (8006630 <RCC_SetFlashLatency+0xf4>)
 8006548:	f107 0320 	add.w	r3, r7, #32
 800654c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006550:	6018      	str	r0, [r3, #0]
 8006552:	3304      	adds	r3, #4
 8006554:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006556:	4a37      	ldr	r2, [pc, #220]	; (8006634 <RCC_SetFlashLatency+0xf8>)
 8006558:	f107 0318 	add.w	r3, r7, #24
 800655c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006560:	6018      	str	r0, [r3, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006566:	4a34      	ldr	r2, [pc, #208]	; (8006638 <RCC_SetFlashLatency+0xfc>)
 8006568:	f107 030c 	add.w	r3, r7, #12
 800656c:	ca07      	ldmia	r2, {r0, r1, r2}
 800656e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006572:	2300      	movs	r3, #0
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d11b      	bne.n	80065b6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800657e:	2300      	movs	r3, #0
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
 8006582:	e014      	b.n	80065ae <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	3338      	adds	r3, #56	; 0x38
 800658a:	443b      	add	r3, r7
 800658c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006590:	461a      	mov	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4293      	cmp	r3, r2
 8006596:	d807      	bhi.n	80065a8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	3338      	adds	r3, #56	; 0x38
 800659e:	443b      	add	r3, r7
 80065a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a6:	e021      	b.n	80065ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	3301      	adds	r3, #1
 80065ac:	633b      	str	r3, [r7, #48]	; 0x30
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d9e7      	bls.n	8006584 <RCC_SetFlashLatency+0x48>
 80065b4:	e01a      	b.n	80065ec <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065b6:	2300      	movs	r3, #0
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ba:	e014      	b.n	80065e6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	3338      	adds	r3, #56	; 0x38
 80065c2:	443b      	add	r3, r7
 80065c4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d807      	bhi.n	80065e0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	3338      	adds	r3, #56	; 0x38
 80065d6:	443b      	add	r3, r7
 80065d8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065de:	e005      	b.n	80065ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	3301      	adds	r3, #1
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d9e7      	bls.n	80065bc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <RCC_SetFlashLatency+0x100>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f023 0207 	bic.w	r2, r3, #7
 80065f4:	4911      	ldr	r1, [pc, #68]	; (800663c <RCC_SetFlashLatency+0x100>)
 80065f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f8:	4313      	orrs	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065fc:	f7fb fb84 	bl	8001d08 <HAL_GetTick>
 8006600:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006602:	e008      	b.n	8006616 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006604:	f7fb fb80 	bl	8001d08 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e007      	b.n	8006626 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <RCC_SetFlashLatency+0x100>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006620:	429a      	cmp	r2, r3
 8006622:	d1ef      	bne.n	8006604 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3738      	adds	r7, #56	; 0x38
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	0801b834 	.word	0x0801b834
 8006634:	0801b83c 	.word	0x0801b83c
 8006638:	0801b844 	.word	0x0801b844
 800663c:	58004000 	.word	0x58004000

08006640 <LL_RCC_LSE_IsReady>:
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d101      	bne.n	8006658 <LL_RCC_LSE_IsReady+0x18>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <LL_RCC_LSE_IsReady+0x1a>
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <LL_RCC_SetUSARTClockSource>:
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800666a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	43db      	mvns	r3, r3
 8006678:	401a      	ands	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <LL_RCC_SetI2SClockSource>:
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr

080066bc <LL_RCC_SetLPUARTClockSource>:
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80066c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <LL_RCC_SetI2CClockSource>:
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80066fe:	43db      	mvns	r3, r3
 8006700:	401a      	ands	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800670a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr

0800671e <LL_RCC_SetLPTIMClockSource>:
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	43db      	mvns	r3, r3
 8006736:	401a      	ands	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006740:	4313      	orrs	r3, r2
 8006742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <LL_RCC_SetRNGClockSource>:
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <LL_RCC_SetADCClockSource>:
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800678e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr

080067a4 <LL_RCC_SetRTCClockSource>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80067ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <LL_RCC_GetRTCClockSource>:
{
 80067ce:	b480      	push	{r7}
 80067d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80067d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067da:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80067de:	4618      	mov	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr

080067e6 <LL_RCC_ForceBackupDomainReset>:
{
 80067e6:	b480      	push	{r7}
 80067e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80067ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80067fe:	bf00      	nop
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006806:	b480      	push	{r7}
 8006808:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800680a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800681e:	bf00      	nop
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
	...

08006828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006834:	2300      	movs	r3, #0
 8006836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006838:	2300      	movs	r3, #0
 800683a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d058      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006848:	f7fe fd64 	bl	8005314 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800684c:	f7fb fa5c 	bl	8001d08 <HAL_GetTick>
 8006850:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006852:	e009      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006854:	f7fb fa58 	bl	8001d08 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d902      	bls.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	74fb      	strb	r3, [r7, #19]
        break;
 8006866:	e006      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006868:	4b7b      	ldr	r3, [pc, #492]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006874:	d1ee      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006876:	7cfb      	ldrb	r3, [r7, #19]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d13c      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800687c:	f7ff ffa7 	bl	80067ce <LL_RCC_GetRTCClockSource>
 8006880:	4602      	mov	r2, r0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	429a      	cmp	r2, r3
 8006888:	d00f      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006898:	f7ff ffa5 	bl	80067e6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800689c:	f7ff ffb3 	bl	8006806 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d014      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b4:	f7fb fa28 	bl	8001d08 <HAL_GetTick>
 80068b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80068ba:	e00b      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068bc:	f7fb fa24 	bl	8001d08 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d902      	bls.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	74fb      	strb	r3, [r7, #19]
            break;
 80068d2:	e004      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80068d4:	f7ff feb4 	bl	8006640 <LL_RCC_LSE_IsReady>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d1ee      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80068de:	7cfb      	ldrb	r3, [r7, #19]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff ff5b 	bl	80067a4 <LL_RCC_SetRTCClockSource>
 80068ee:	e004      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068f0:	7cfb      	ldrb	r3, [r7, #19]
 80068f2:	74bb      	strb	r3, [r7, #18]
 80068f4:	e001      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	7cfb      	ldrb	r3, [r7, #19]
 80068f8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fea9 	bl	8006662 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d004      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fe9e 	bl	8006662 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff fec0 	bl	80066bc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006944:	2b00      	cmp	r3, #0
 8006946:	d004      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fee6 	bl	800671e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fedb 	bl	800671e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fed0 	bl	800671e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fea9 	bl	80066e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff fe9e 	bl	80066e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d004      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff fe93 	bl	80066e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d011      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fe5e 	bl	8006692 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069de:	d107      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d010      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fea5 	bl	8006750 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d011      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fea3 	bl	800677a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006a4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	58000400 	.word	0x58000400

08006a5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d068      	beq.n	8006b40 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fa fe68 	bl	8001758 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a90:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006a92:	22ca      	movs	r2, #202	; 0xca
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
 8006a96:	4b2d      	ldr	r3, [pc, #180]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006a98:	2253      	movs	r2, #83	; 0x53
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fa0f 	bl	8006ec0 <RTC_EnterInitMode>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d13f      	bne.n	8006b2c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006aac:	4b27      	ldr	r3, [pc, #156]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	4a26      	ldr	r2, [pc, #152]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006ab2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aba:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6859      	ldr	r1, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	4319      	orrs	r1, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	491e      	ldr	r1, [pc, #120]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	491a      	ldr	r1, [pc, #104]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006ae6:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	430b      	orrs	r3, r1
 8006af8:	4914      	ldr	r1, [pc, #80]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa12 	bl	8006f28 <RTC_ExitInitMode>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10e      	bne.n	8006b2c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006b0e:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a19      	ldr	r1, [r3, #32]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4319      	orrs	r1, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	4909      	ldr	r1, [pc, #36]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b2c:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <HAL_RTC_Init+0xf0>)
 8006b2e:	22ff      	movs	r2, #255	; 0xff
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40002800 	.word	0x40002800

08006b50 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006b50:	b590      	push	{r4, r7, lr}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_RTC_SetAlarm_IT+0x1e>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e0f3      	b.n	8006d56 <HAL_RTC_SetAlarm_IT+0x206>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006b7e:	4b78      	ldr	r3, [pc, #480]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b86:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	d06a      	beq.n	8006c66 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d13a      	bne.n	8006c0c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006b96:	4b72      	ldr	r3, [pc, #456]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f9f5 	bl	8006fa4 <RTC_ByteToBcd2>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f9ee 	bl	8006fa4 <RTC_ByteToBcd2>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bcc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	789b      	ldrb	r3, [r3, #2]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f9e6 	bl	8006fa4 <RTC_ByteToBcd2>
 8006bd8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bda:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	78db      	ldrb	r3, [r3, #3]
 8006be2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006be4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 f9d8 	bl	8006fa4 <RTC_ByteToBcd2>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bf8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c00:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e02c      	b.n	8006c66 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006c14:	d00d      	beq.n	8006c32 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c1e:	d008      	beq.n	8006c32 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c20:	4b4f      	ldr	r3, [pc, #316]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c3e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c44:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	78db      	ldrb	r3, [r3, #3]
 8006c4a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c4c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c54:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c56:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c5c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c66:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c68:	22ca      	movs	r2, #202	; 0xca
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c6c:	4b3c      	ldr	r3, [pc, #240]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c6e:	2253      	movs	r2, #83	; 0x53
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7a:	d12c      	bne.n	8006cd6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c7c:	4b38      	ldr	r3, [pc, #224]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	4a37      	ldr	r2, [pc, #220]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c86:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c88:	4b35      	ldr	r3, [pc, #212]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c94:	d107      	bne.n	8006ca6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	4930      	ldr	r1, [pc, #192]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	644b      	str	r3, [r1, #68]	; 0x44
 8006ca4:	e006      	b.n	8006cb4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006ca6:	4a2e      	ldr	r2, [pc, #184]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006cac:	4a2c      	ldr	r2, [pc, #176]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006cb4:	4a2a      	ldr	r2, [pc, #168]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	f043 0201 	orr.w	r2, r3, #1
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006cc8:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	4a24      	ldr	r2, [pc, #144]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cce:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006cd2:	6193      	str	r3, [r2, #24]
 8006cd4:	e02b      	b.n	8006d2e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006cd6:	4b22      	ldr	r3, [pc, #136]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	4a21      	ldr	r2, [pc, #132]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cdc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006ce0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cee:	d107      	bne.n	8006d00 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	4919      	ldr	r1, [pc, #100]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cfe:	e006      	b.n	8006d0e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006d06:	4a16      	ldr	r2, [pc, #88]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006d0e:	4a14      	ldr	r2, [pc, #80]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	f043 0202 	orr.w	r2, r3, #2
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d22:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	4a0e      	ldr	r2, [pc, #56]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d28:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006d2c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d34:	4a0b      	ldr	r2, [pc, #44]	; (8006d64 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d3e:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d40:	22ff      	movs	r2, #255	; 0xff
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd90      	pop	{r4, r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40002800 	.word	0x40002800
 8006d64:	58000800 	.word	0x58000800

08006d68 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_RTC_DeactivateAlarm+0x18>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e048      	b.n	8006e12 <HAL_RTC_DeactivateAlarm+0xaa>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d90:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d92:	22ca      	movs	r2, #202	; 0xca
 8006d94:	625a      	str	r2, [r3, #36]	; 0x24
 8006d96:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d98:	2253      	movs	r2, #83	; 0x53
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da2:	d115      	bne.n	8006dd0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006da4:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dae:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dba:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	f023 0201 	bic.w	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006dc8:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dce:	e014      	b.n	8006dfa <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006dd0:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dd6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006dda:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de0:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	f023 0202 	bic.w	r2, r3, #2
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006df4:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006df6:	2202      	movs	r2, #2
 8006df8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfa:	4b08      	ldr	r3, [pc, #32]	; (8006e1c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dfc:	22ff      	movs	r2, #255	; 0xff
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr
 8006e1c:	40002800 	.word	0x40002800

08006e20 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	4013      	ands	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7fb f9a2 	bl	800218e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e56:	2202      	movs	r2, #2
 8006e58:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f94a 	bl	80070f4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40002800 	.word	0x40002800

08006e74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <HAL_RTC_WaitForSynchro+0x48>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4a0e      	ldr	r2, [pc, #56]	; (8006ebc <HAL_RTC_WaitForSynchro+0x48>)
 8006e82:	f023 0320 	bic.w	r3, r3, #32
 8006e86:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006e88:	f7fa ff3e 	bl	8001d08 <HAL_GetTick>
 8006e8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e8e:	e009      	b.n	8006ea4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e90:	f7fa ff3a 	bl	8001d08 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e006      	b.n	8006eb2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_RTC_WaitForSynchro+0x48>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0ef      	beq.n	8006e90 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40002800 	.word	0x40002800

08006ec0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ecc:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <RTC_EnterInitMode+0x64>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d120      	bne.n	8006f1a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ed8:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <RTC_EnterInitMode+0x64>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4a11      	ldr	r2, [pc, #68]	; (8006f24 <RTC_EnterInitMode+0x64>)
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006ee4:	f7fa ff10 	bl	8001d08 <HAL_GetTick>
 8006ee8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006eea:	e00d      	b.n	8006f08 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006eec:	f7fa ff0c 	bl	8001d08 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006efa:	d905      	bls.n	8006f08 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2203      	movs	r2, #3
 8006f04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <RTC_EnterInitMode+0x64>)
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <RTC_EnterInitMode+0x5a>
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d1e8      	bne.n	8006eec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40002800 	.word	0x40002800

08006f28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <RTC_ExitInitMode+0x78>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <RTC_ExitInitMode+0x78>)
 8006f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006f40:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <RTC_ExitInitMode+0x78>)
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff ff91 	bl	8006e74 <HAL_RTC_WaitForSynchro>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01e      	beq.n	8006f96 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	73fb      	strb	r3, [r7, #15]
 8006f64:	e017      	b.n	8006f96 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <RTC_ExitInitMode+0x78>)
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	4a0d      	ldr	r2, [pc, #52]	; (8006fa0 <RTC_ExitInitMode+0x78>)
 8006f6c:	f023 0320 	bic.w	r3, r3, #32
 8006f70:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff ff7e 	bl	8006e74 <HAL_RTC_WaitForSynchro>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2203      	movs	r2, #3
 8006f82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <RTC_ExitInitMode+0x78>)
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <RTC_ExitInitMode+0x78>)
 8006f90:	f043 0320 	orr.w	r3, r3, #32
 8006f94:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40002800 	.word	0x40002800

08006fa4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006fb6:	e005      	b.n	8006fc4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	3b0a      	subs	r3, #10
 8006fc2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	2b09      	cmp	r3, #9
 8006fc8:	d8f6      	bhi.n	8006fb8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	b2db      	uxtb	r3, r3
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
	...

08006fe4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_RTCEx_EnableBypassShadow+0x16>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e01f      	b.n	800703a <HAL_RTCEx_EnableBypassShadow+0x56>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2202      	movs	r2, #2
 8007006:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800700c:	22ca      	movs	r2, #202	; 0xca
 800700e:	625a      	str	r2, [r3, #36]	; 0x24
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007012:	2253      	movs	r2, #83	; 0x53
 8007014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	4a0a      	ldr	r2, [pc, #40]	; (8007044 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800701c:	f043 0320 	orr.w	r3, r3, #32
 8007020:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr
 8007044:	40002800 	.word	0x40002800

08007048 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_RTCEx_SetSSRU_IT+0x16>
 800705a:	2302      	movs	r3, #2
 800705c:	e027      	b.n	80070ae <HAL_RTCEx_SetSSRU_IT+0x66>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007070:	22ca      	movs	r2, #202	; 0xca
 8007072:	625a      	str	r2, [r3, #36]	; 0x24
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007076:	2253      	movs	r2, #83	; 0x53
 8007078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	4a0e      	ldr	r2, [pc, #56]	; (80070b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007084:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007086:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708c:	4a0b      	ldr	r2, [pc, #44]	; (80070bc <HAL_RTCEx_SetSSRU_IT+0x74>)
 800708e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007092:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007098:	22ff      	movs	r2, #255	; 0xff
 800709a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr
 80070b8:	40002800 	.word	0x40002800
 80070bc:	58000800 	.word	0x58000800

080070c0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070d6:	2240      	movs	r2, #64	; 0x40
 80070d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fb f861 	bl	80021a2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	40002800 	.word	0x40002800

080070f4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr
	...

08007108 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007114:	4b07      	ldr	r3, [pc, #28]	; (8007134 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007116:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	601a      	str	r2, [r3, #0]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	4000b100 	.word	0x4000b100

08007138 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007142:	4b07      	ldr	r3, [pc, #28]	; (8007160 <HAL_RTCEx_BKUPRead+0x28>)
 8007144:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	4000b100 	.word	0x4000b100

08007164 <LL_PWR_SetRadioBusyTrigger>:
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007174:	4904      	ldr	r1, [pc, #16]	; (8007188 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4313      	orrs	r3, r2
 800717a:	608b      	str	r3, [r1, #8]
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	58000400 	.word	0x58000400

0800718c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007190:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	58000400 	.word	0x58000400

080071ac <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b6:	4a04      	ldr	r2, [pc, #16]	; (80071c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071c0:	bf00      	nop
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr
 80071c8:	58000400 	.word	0x58000400

080071cc <LL_PWR_ClearFlag_RFBUSY>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80071d0:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80071d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d6:	619a      	str	r2, [r3, #24]
}
 80071d8:	bf00      	nop
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr
 80071e0:	58000400 	.word	0x58000400

080071e4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d101      	bne.n	80071f8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	58000400 	.word	0x58000400

08007208 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800720c:	4b06      	ldr	r3, [pc, #24]	; (8007228 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b04      	cmp	r3, #4
 8007216:	d101      	bne.n	800721c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	58000400 	.word	0x58000400

0800722c <LL_RCC_RF_DisableReset>:
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800723c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007240:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007244:	bf00      	nop
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <LL_RCC_IsRFUnderReset>:
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800725c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007260:	d101      	bne.n	8007266 <LL_RCC_IsRFUnderReset+0x1a>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <LL_RCC_IsRFUnderReset+0x1c>
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <LL_EXTI_EnableIT_32_63>:
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <LL_EXTI_EnableIT_32_63+0x24>)
 800727a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800727e:	4905      	ldr	r1, [pc, #20]	; (8007294 <LL_EXTI_EnableIT_32_63+0x24>)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	58000800 	.word	0x58000800

08007298 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
    return status;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	e04b      	b.n	8007346 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	799b      	ldrb	r3, [r3, #6]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fa fb78 	bl	80019b8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80072ce:	f7ff ffad 	bl	800722c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80072d2:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <HAL_SUBGHZ_Init+0xb8>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	1a9b      	subs	r3, r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	0cdb      	lsrs	r3, r3, #19
 80072e0:	2264      	movs	r2, #100	; 0x64
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	609a      	str	r2, [r3, #8]
      break;
 80072f8:	e007      	b.n	800730a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007300:	f7ff ffa4 	bl	800724c <LL_RCC_IsRFUnderReset>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1ee      	bne.n	80072e8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800730a:	f7ff ff3f 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800730e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007312:	f7ff ffad 	bl	8007270 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007316:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800731a:	f7ff ff23 	bl	8007164 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800731e:	f7ff ff55 	bl	80071cc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f000 faad 	bl	800788c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	719a      	strb	r2, [r3, #6]

  return status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000000 	.word	0x20000000

08007354 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	461a      	mov	r2, r3
 8007360:	460b      	mov	r3, r1
 8007362:	817b      	strh	r3, [r7, #10]
 8007364:	4613      	mov	r3, r2
 8007366:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	799b      	ldrb	r3, [r3, #6]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d14a      	bne.n	8007408 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	795b      	ldrb	r3, [r3, #5]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800737a:	2302      	movs	r3, #2
 800737c:	e045      	b.n	800740a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2202      	movs	r2, #2
 8007388:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 fb4c 	bl	8007a28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007390:	f7ff ff0c 	bl	80071ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007394:	210d      	movs	r1, #13
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 fa98 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800739c:	897b      	ldrh	r3, [r7, #10]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	4619      	mov	r1, r3
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fa90 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80073ac:	897b      	ldrh	r3, [r7, #10]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	4619      	mov	r1, r3
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fa8a 	bl	80078cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80073b8:	2300      	movs	r3, #0
 80073ba:	82bb      	strh	r3, [r7, #20]
 80073bc:	e00a      	b.n	80073d4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80073be:	8abb      	ldrh	r3, [r7, #20]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	4619      	mov	r1, r3
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fa7f 	bl	80078cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80073ce:	8abb      	ldrh	r3, [r7, #20]
 80073d0:	3301      	adds	r3, #1
 80073d2:	82bb      	strh	r3, [r7, #20]
 80073d4:	8aba      	ldrh	r2, [r7, #20]
 80073d6:	893b      	ldrh	r3, [r7, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d3f0      	bcc.n	80073be <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073dc:	f7ff fed6 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fb45 	bl	8007a70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
 80073f2:	e001      	b.n	80073f8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	715a      	strb	r2, [r3, #5]

    return status;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	e000      	b.n	800740a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b088      	sub	sp, #32
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	461a      	mov	r2, r3
 800741e:	460b      	mov	r3, r1
 8007420:	817b      	strh	r3, [r7, #10]
 8007422:	4613      	mov	r3, r2
 8007424:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	799b      	ldrb	r3, [r3, #6]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b01      	cmp	r3, #1
 8007432:	d14a      	bne.n	80074ca <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	795b      	ldrb	r3, [r3, #5]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800743c:	2302      	movs	r3, #2
 800743e:	e045      	b.n	80074cc <HAL_SUBGHZ_ReadRegisters+0xba>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 faee 	bl	8007a28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800744c:	f7ff feae 	bl	80071ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007450:	211d      	movs	r1, #29
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fa3a 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007458:	897b      	ldrh	r3, [r7, #10]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	b29b      	uxth	r3, r3
 800745e:	b2db      	uxtb	r3, r3
 8007460:	4619      	mov	r1, r3
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fa32 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007468:	897b      	ldrh	r3, [r7, #10]
 800746a:	b2db      	uxtb	r3, r3
 800746c:	4619      	mov	r1, r3
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fa2c 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fa28 	bl	80078cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800747c:	2300      	movs	r3, #0
 800747e:	82fb      	strh	r3, [r7, #22]
 8007480:	e009      	b.n	8007496 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007482:	69b9      	ldr	r1, [r7, #24]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fa77 	bl	8007978 <SUBGHZSPI_Receive>
      pData++;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	3301      	adds	r3, #1
 800748e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007490:	8afb      	ldrh	r3, [r7, #22]
 8007492:	3301      	adds	r3, #1
 8007494:	82fb      	strh	r3, [r7, #22]
 8007496:	8afa      	ldrh	r2, [r7, #22]
 8007498:	893b      	ldrh	r3, [r7, #8]
 800749a:	429a      	cmp	r2, r3
 800749c:	d3f1      	bcc.n	8007482 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800749e:	f7ff fe75 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fae4 	bl	8007a70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	77fb      	strb	r3, [r7, #31]
 80074b4:	e001      	b.n	80074ba <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	715a      	strb	r2, [r3, #5]

    return status;
 80074c6:	7ffb      	ldrb	r3, [r7, #31]
 80074c8:	e000      	b.n	80074cc <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80074ca:	2302      	movs	r3, #2
  }
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3720      	adds	r7, #32
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	461a      	mov	r2, r3
 80074e0:	460b      	mov	r3, r1
 80074e2:	72fb      	strb	r3, [r7, #11]
 80074e4:	4613      	mov	r3, r2
 80074e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	799b      	ldrb	r3, [r3, #6]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d14a      	bne.n	8007588 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	795b      	ldrb	r3, [r3, #5]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e045      	b.n	800758a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fa8f 	bl	8007a28 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800750a:	7afb      	ldrb	r3, [r7, #11]
 800750c:	2b84      	cmp	r3, #132	; 0x84
 800750e:	d002      	beq.n	8007516 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	2b94      	cmp	r3, #148	; 0x94
 8007514:	d103      	bne.n	800751e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	711a      	strb	r2, [r3, #4]
 800751c:	e002      	b.n	8007524 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007524:	f7ff fe42 	bl	80071ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	4619      	mov	r1, r3
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f9cd 	bl	80078cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007532:	2300      	movs	r3, #0
 8007534:	82bb      	strh	r3, [r7, #20]
 8007536:	e00a      	b.n	800754e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007538:	8abb      	ldrh	r3, [r7, #20]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	4619      	mov	r1, r3
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f9c2 	bl	80078cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007548:	8abb      	ldrh	r3, [r7, #20]
 800754a:	3301      	adds	r3, #1
 800754c:	82bb      	strh	r3, [r7, #20]
 800754e:	8aba      	ldrh	r2, [r7, #20]
 8007550:	893b      	ldrh	r3, [r7, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	d3f0      	bcc.n	8007538 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007556:	f7ff fe19 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	2b84      	cmp	r3, #132	; 0x84
 800755e:	d002      	beq.n	8007566 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fa85 	bl	8007a70 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
 8007572:	e001      	b.n	8007578 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	715a      	strb	r2, [r3, #5]

    return status;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	e000      	b.n	800758a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007588:	2302      	movs	r3, #2
  }
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b088      	sub	sp, #32
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	461a      	mov	r2, r3
 800759e:	460b      	mov	r3, r1
 80075a0:	72fb      	strb	r3, [r7, #11]
 80075a2:	4613      	mov	r3, r2
 80075a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	799b      	ldrb	r3, [r3, #6]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d13d      	bne.n	8007630 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	795b      	ldrb	r3, [r3, #5]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80075bc:	2302      	movs	r3, #2
 80075be:	e038      	b.n	8007632 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fa2e 	bl	8007a28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075cc:	f7ff fdee 	bl	80071ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f979 	bl	80078cc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80075da:	2100      	movs	r1, #0
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f975 	bl	80078cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80075e2:	2300      	movs	r3, #0
 80075e4:	82fb      	strh	r3, [r7, #22]
 80075e6:	e009      	b.n	80075fc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80075e8:	69b9      	ldr	r1, [r7, #24]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f9c4 	bl	8007978 <SUBGHZSPI_Receive>
      pData++;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	3301      	adds	r3, #1
 80075f4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80075f6:	8afb      	ldrh	r3, [r7, #22]
 80075f8:	3301      	adds	r3, #1
 80075fa:	82fb      	strh	r3, [r7, #22]
 80075fc:	8afa      	ldrh	r2, [r7, #22]
 80075fe:	893b      	ldrh	r3, [r7, #8]
 8007600:	429a      	cmp	r2, r3
 8007602:	d3f1      	bcc.n	80075e8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007604:	f7ff fdc2 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fa31 	bl	8007a70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e001      	b.n	8007620 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	715a      	strb	r2, [r3, #5]

    return status;
 800762c:	7ffb      	ldrb	r3, [r7, #31]
 800762e:	e000      	b.n	8007632 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007630:	2302      	movs	r3, #2
  }
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	461a      	mov	r2, r3
 8007646:	460b      	mov	r3, r1
 8007648:	72fb      	strb	r3, [r7, #11]
 800764a:	4613      	mov	r3, r2
 800764c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	799b      	ldrb	r3, [r3, #6]
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d13e      	bne.n	80076d6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	795b      	ldrb	r3, [r3, #5]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007660:	2302      	movs	r3, #2
 8007662:	e039      	b.n	80076d8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 f9dc 	bl	8007a28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007670:	f7ff fd9c 	bl	80071ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007674:	210e      	movs	r1, #14
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f928 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	4619      	mov	r1, r3
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f923 	bl	80078cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007686:	2300      	movs	r3, #0
 8007688:	82bb      	strh	r3, [r7, #20]
 800768a:	e00a      	b.n	80076a2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800768c:	8abb      	ldrh	r3, [r7, #20]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	4619      	mov	r1, r3
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f918 	bl	80078cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800769c:	8abb      	ldrh	r3, [r7, #20]
 800769e:	3301      	adds	r3, #1
 80076a0:	82bb      	strh	r3, [r7, #20]
 80076a2:	8aba      	ldrh	r2, [r7, #20]
 80076a4:	893b      	ldrh	r3, [r7, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d3f0      	bcc.n	800768c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076aa:	f7ff fd6f 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f9de 	bl	8007a70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	75fb      	strb	r3, [r7, #23]
 80076c0:	e001      	b.n	80076c6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	715a      	strb	r2, [r3, #5]

    return status;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	e000      	b.n	80076d8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80076d6:	2302      	movs	r3, #2
  }
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	461a      	mov	r2, r3
 80076ec:	460b      	mov	r3, r1
 80076ee:	72fb      	strb	r3, [r7, #11]
 80076f0:	4613      	mov	r3, r2
 80076f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	799b      	ldrb	r3, [r3, #6]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d141      	bne.n	8007786 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	795b      	ldrb	r3, [r3, #5]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800770a:	2302      	movs	r3, #2
 800770c:	e03c      	b.n	8007788 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f987 	bl	8007a28 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800771a:	f7ff fd47 	bl	80071ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800771e:	211e      	movs	r1, #30
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f8d3 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	4619      	mov	r1, r3
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f8ce 	bl	80078cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007730:	2100      	movs	r1, #0
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f8ca 	bl	80078cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007738:	2300      	movs	r3, #0
 800773a:	82fb      	strh	r3, [r7, #22]
 800773c:	e009      	b.n	8007752 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800773e:	69b9      	ldr	r1, [r7, #24]
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f919 	bl	8007978 <SUBGHZSPI_Receive>
      pData++;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	3301      	adds	r3, #1
 800774a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800774c:	8afb      	ldrh	r3, [r7, #22]
 800774e:	3301      	adds	r3, #1
 8007750:	82fb      	strh	r3, [r7, #22]
 8007752:	8afa      	ldrh	r2, [r7, #22]
 8007754:	893b      	ldrh	r3, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	d3f1      	bcc.n	800773e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800775a:	f7ff fd17 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f986 	bl	8007a70 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e001      	b.n	8007776 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	715a      	strb	r2, [r3, #5]

    return status;
 8007782:	7ffb      	ldrb	r3, [r7, #31]
 8007784:	e000      	b.n	8007788 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007798:	2300      	movs	r3, #0
 800779a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800779c:	f107 020c 	add.w	r2, r7, #12
 80077a0:	2302      	movs	r3, #2
 80077a2:	2112      	movs	r1, #18
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff fef4 	bl	8007592 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80077aa:	7b3b      	ldrb	r3, [r7, #12]
 80077ac:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80077ae:	89fb      	ldrh	r3, [r7, #14]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	b21a      	sxth	r2, r3
 80077b4:	7b7b      	ldrb	r3, [r7, #13]
 80077b6:	b21b      	sxth	r3, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80077be:	89fb      	ldrh	r3, [r7, #14]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f012 fa2d 	bl	8019c28 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80077ce:	89fb      	ldrh	r3, [r7, #14]
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f012 fa32 	bl	8019c44 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80077e0:	89fb      	ldrh	r3, [r7, #14]
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f012 fa81 	bl	8019cf4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80077f2:	89fb      	ldrh	r3, [r7, #14]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f012 fa86 	bl	8019d10 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007804:	89fb      	ldrh	r3, [r7, #14]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f012 fa8b 	bl	8019d2c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007816:	89fb      	ldrh	r3, [r7, #14]
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f012 fa58 	bl	8019cd8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007828:	89fb      	ldrh	r3, [r7, #14]
 800782a:	099b      	lsrs	r3, r3, #6
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f012 fa13 	bl	8019c60 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800783a:	89fb      	ldrh	r3, [r7, #14]
 800783c:	09db      	lsrs	r3, r3, #7
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00e      	beq.n	8007864 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007846:	89fb      	ldrh	r3, [r7, #14]
 8007848:	0a1b      	lsrs	r3, r3, #8
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007852:	2101      	movs	r1, #1
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f012 fa11 	bl	8019c7c <HAL_SUBGHZ_CADStatusCallback>
 800785a:	e003      	b.n	8007864 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f012 fa0c 	bl	8019c7c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007864:	89fb      	ldrh	r3, [r7, #14]
 8007866:	0a5b      	lsrs	r3, r3, #9
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f012 fa21 	bl	8019cb8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007876:	f107 020c 	add.w	r2, r7, #12
 800787a:	2302      	movs	r3, #2
 800787c:	2102      	movs	r1, #2
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fe28 	bl	80074d4 <HAL_SUBGHZ_ExecSetCmd>
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007894:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <SUBGHZSPI_Init+0x3c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a0b      	ldr	r2, [pc, #44]	; (80078c8 <SUBGHZSPI_Init+0x3c>)
 800789a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80078a0:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <SUBGHZSPI_Init+0x3c>)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80078a8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <SUBGHZSPI_Init+0x3c>)
 80078ac:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80078b0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <SUBGHZSPI_Init+0x3c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a04      	ldr	r2, [pc, #16]	; (80078c8 <SUBGHZSPI_Init+0x3c>)
 80078b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078bc:	6013      	str	r3, [r2, #0]
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr
 80078c8:	58010000 	.word	0x58010000

080078cc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80078dc:	4b23      	ldr	r3, [pc, #140]	; (800796c <SUBGHZSPI_Transmit+0xa0>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	4613      	mov	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	0cdb      	lsrs	r3, r3, #19
 80078ea:	2264      	movs	r2, #100	; 0x64
 80078ec:	fb02 f303 	mul.w	r3, r2, r3
 80078f0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d105      	bne.n	8007904 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	609a      	str	r2, [r3, #8]
      break;
 8007902:	e008      	b.n	8007916 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3b01      	subs	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800790a:	4b19      	ldr	r3, [pc, #100]	; (8007970 <SUBGHZSPI_Transmit+0xa4>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b02      	cmp	r3, #2
 8007914:	d1ed      	bne.n	80078f2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007916:	4b17      	ldr	r3, [pc, #92]	; (8007974 <SUBGHZSPI_Transmit+0xa8>)
 8007918:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	78fa      	ldrb	r2, [r7, #3]
 800791e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007920:	4b12      	ldr	r3, [pc, #72]	; (800796c <SUBGHZSPI_Transmit+0xa0>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	4613      	mov	r3, r2
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	0cdb      	lsrs	r3, r3, #19
 800792e:	2264      	movs	r2, #100	; 0x64
 8007930:	fb02 f303 	mul.w	r3, r2, r3
 8007934:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d105      	bne.n	8007948 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	609a      	str	r2, [r3, #8]
      break;
 8007946:	e008      	b.n	800795a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3b01      	subs	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800794e:	4b08      	ldr	r3, [pc, #32]	; (8007970 <SUBGHZSPI_Transmit+0xa4>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d1ed      	bne.n	8007936 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <SUBGHZSPI_Transmit+0xa4>)
 800795c:	68db      	ldr	r3, [r3, #12]

  return status;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007960:	4618      	mov	r0, r3
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000000 	.word	0x20000000
 8007970:	58010000 	.word	0x58010000
 8007974:	5801000c 	.word	0x5801000c

08007978 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007986:	4b25      	ldr	r3, [pc, #148]	; (8007a1c <SUBGHZSPI_Receive+0xa4>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4613      	mov	r3, r2
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	1a9b      	subs	r3, r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	0cdb      	lsrs	r3, r3, #19
 8007994:	2264      	movs	r2, #100	; 0x64
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d105      	bne.n	80079ae <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	609a      	str	r2, [r3, #8]
      break;
 80079ac:	e008      	b.n	80079c0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80079b4:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <SUBGHZSPI_Receive+0xa8>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d1ed      	bne.n	800799c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80079c0:	4b18      	ldr	r3, [pc, #96]	; (8007a24 <SUBGHZSPI_Receive+0xac>)
 80079c2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	22ff      	movs	r2, #255	; 0xff
 80079c8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079ca:	4b14      	ldr	r3, [pc, #80]	; (8007a1c <SUBGHZSPI_Receive+0xa4>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	0cdb      	lsrs	r3, r3, #19
 80079d8:	2264      	movs	r2, #100	; 0x64
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	609a      	str	r2, [r3, #8]
      break;
 80079f0:	e008      	b.n	8007a04 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <SUBGHZSPI_Receive+0xa8>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d1ed      	bne.n	80079e0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <SUBGHZSPI_Receive+0xa8>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	701a      	strb	r2, [r3, #0]

  return status;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc80      	pop	{r7}
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000000 	.word	0x20000000
 8007a20:	58010000 	.word	0x58010000
 8007a24:	5801000c 	.word	0x5801000c

08007a28 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	791b      	ldrb	r3, [r3, #4]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d111      	bne.n	8007a5c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <SUBGHZ_CheckDeviceReady+0x44>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a48:	f7ff fbb0 	bl	80071ac <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1f9      	bne.n	8007a4c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a58:	f7ff fb98 	bl	800718c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f807 	bl	8007a70 <SUBGHZ_WaitOnBusy>
 8007a62:	4603      	mov	r3, r0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20000000 	.word	0x20000000

08007a70 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007a7c:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <SUBGHZ_WaitOnBusy+0x58>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	4413      	add	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	0d1b      	lsrs	r3, r3, #20
 8007a8a:	2264      	movs	r2, #100	; 0x64
 8007a8c:	fb02 f303 	mul.w	r3, r2, r3
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007a92:	f7ff fbb9 	bl	8007208 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007a96:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	609a      	str	r2, [r3, #8]
      break;
 8007aa8:	e009      	b.n	8007abe <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007ab0:	f7ff fb98 	bl	80071e4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d0e9      	beq.n	8007a92 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000000 	.word	0x20000000

08007acc <LL_RCC_GetUSARTClockSource>:
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	401a      	ands	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	041b      	lsls	r3, r3, #16
 8007ae4:	4313      	orrs	r3, r2
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr

08007af0 <LL_RCC_GetLPUARTClockSource>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4013      	ands	r3, r2
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e042      	b.n	8007ba6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fa fd2a 	bl	800258c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2224      	movs	r2, #36	; 0x24
 8007b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc49 	bl	80083e8 <UART_SetConfig>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e022      	b.n	8007ba6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 feb1 	bl	80088d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0201 	orr.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 ff37 	bl	8008a12 <UART_CheckIdleState>
 8007ba4:	4603      	mov	r3, r0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d142      	bne.n	8007c4e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_UART_Receive_IT+0x24>
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e03b      	b.n	8007c50 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_UART_Receive_IT+0x36>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e034      	b.n	8007c50 <HAL_UART_Receive_IT+0xa0>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <HAL_UART_Receive_IT+0xa8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01f      	beq.n	8007c3e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d018      	beq.n	8007c3e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	623b      	str	r3, [r7, #32]
 8007c2c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	69f9      	ldr	r1, [r7, #28]
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e6      	bne.n	8007c0c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	461a      	mov	r2, r3
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fff7 	bl	8008c38 <UART_Start_Receive_IT>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	e000      	b.n	8007c50 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c4e:	2302      	movs	r3, #2
  }
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3728      	adds	r7, #40	; 0x28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40008000 	.word	0x40008000

08007c5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	; 0x28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d17a      	bne.n	8007d6a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_UART_Transmit_DMA+0x24>
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e073      	b.n	8007d6c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_UART_Transmit_DMA+0x36>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e06c      	b.n	8007d6c <HAL_UART_Transmit_DMA+0x110>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	88fa      	ldrh	r2, [r7, #6]
 8007cac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2221      	movs	r2, #33	; 0x21
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02c      	beq.n	8007d22 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ccc:	4a29      	ldr	r2, [pc, #164]	; (8007d74 <HAL_UART_Transmit_DMA+0x118>)
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd4:	4a28      	ldr	r2, [pc, #160]	; (8007d78 <HAL_UART_Transmit_DMA+0x11c>)
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cdc:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <HAL_UART_Transmit_DMA+0x120>)
 8007cde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3328      	adds	r3, #40	; 0x28
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	88fb      	ldrh	r3, [r7, #6]
 8007cfc:	f7fc fb0c 	bl	8004318 <HAL_DMA_Start_IT>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2210      	movs	r2, #16
 8007d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e024      	b.n	8007d6c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2240      	movs	r2, #64	; 0x40
 8007d28:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	613b      	str	r3, [r7, #16]
   return(result);
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	623a      	str	r2, [r7, #32]
 8007d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	69f9      	ldr	r1, [r7, #28]
 8007d58:	6a3a      	ldr	r2, [r7, #32]
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e5      	bne.n	8007d32 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e000      	b.n	8007d6c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007d6a:	2302      	movs	r3, #2
  }
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3728      	adds	r7, #40	; 0x28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	08009123 	.word	0x08009123
 8007d78:	080091bd 	.word	0x080091bd
 8007d7c:	08009337 	.word	0x08009337

08007d80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b0ba      	sub	sp, #232	; 0xe8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007da6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007daa:	f640 030f 	movw	r3, #2063	; 0x80f
 8007dae:	4013      	ands	r3, r2
 8007db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11b      	bne.n	8007df4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc0:	f003 0320 	and.w	r3, r3, #32
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d015      	beq.n	8007df4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d105      	bne.n	8007de0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d009      	beq.n	8007df4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 82d6 	beq.w	8008396 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
      }
      return;
 8007df2:	e2d0      	b.n	8008396 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 811f 	beq.w	800803c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e02:	4b8b      	ldr	r3, [pc, #556]	; (8008030 <HAL_UART_IRQHandler+0x2b0>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d106      	bne.n	8007e18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e0e:	4b89      	ldr	r3, [pc, #548]	; (8008034 <HAL_UART_IRQHandler+0x2b4>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8112 	beq.w	800803c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d011      	beq.n	8007e48 <HAL_UART_IRQHandler+0xc8>
 8007e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2201      	movs	r2, #1
 8007e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e3e:	f043 0201 	orr.w	r2, r3, #1
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d011      	beq.n	8007e78 <HAL_UART_IRQHandler+0xf8>
 8007e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2202      	movs	r2, #2
 8007e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6e:	f043 0204 	orr.w	r2, r3, #4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d011      	beq.n	8007ea8 <HAL_UART_IRQHandler+0x128>
 8007e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2204      	movs	r2, #4
 8007e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e9e:	f043 0202 	orr.w	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d017      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ec0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ec4:	4b5a      	ldr	r3, [pc, #360]	; (8008030 <HAL_UART_IRQHandler+0x2b0>)
 8007ec6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eda:	f043 0208 	orr.w	r2, r3, #8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d012      	beq.n	8007f16 <HAL_UART_IRQHandler+0x196>
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00c      	beq.n	8007f16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0c:	f043 0220 	orr.w	r2, r3, #32
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 823c 	beq.w	800839a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d013      	beq.n	8007f56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d105      	bne.n	8007f46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d007      	beq.n	8007f56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	d005      	beq.n	8007f7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d04f      	beq.n	800801a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 f86c 	bl	8009058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d141      	bne.n	8008012 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1d9      	bne.n	8007f8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe6:	4a14      	ldr	r2, [pc, #80]	; (8008038 <HAL_UART_IRQHandler+0x2b8>)
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fc fa6e 	bl	80044d0 <HAL_DMA_Abort_IT>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d017      	beq.n	800802a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008008:	e00f      	b.n	800802a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f9e2 	bl	80083d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	e00b      	b.n	800802a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f9de 	bl	80083d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	e007      	b.n	800802a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9da 	bl	80083d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008028:	e1b7      	b.n	800839a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802a:	bf00      	nop
    return;
 800802c:	e1b5      	b.n	800839a <HAL_UART_IRQHandler+0x61a>
 800802e:	bf00      	nop
 8008030:	10000001 	.word	0x10000001
 8008034:	04000120 	.word	0x04000120
 8008038:	080093b7 	.word	0x080093b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008040:	2b01      	cmp	r3, #1
 8008042:	f040 814a 	bne.w	80082da <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	f003 0310 	and.w	r3, r3, #16
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 8143 	beq.w	80082da <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 813c 	beq.w	80082da <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2210      	movs	r2, #16
 8008068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	f040 80b5 	bne.w	80081e4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008086:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8187 	beq.w	800839e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800809a:	429a      	cmp	r2, r3
 800809c:	f080 817f 	bcs.w	800839e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f040 8086 	bne.w	80081c8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1da      	bne.n	80080bc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800812a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800812e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800813c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e1      	bne.n	8008106 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008166:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800816c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e3      	bne.n	8008142 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008198:	f023 0310 	bic.w	r3, r3, #16
 800819c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e4      	bne.n	8008188 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fc f926 	bl	8004414 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7f9 fa13 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081e2:	e0dc      	b.n	800839e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 80ce 	beq.w	80083a2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008206:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80c9 	beq.w	80083a2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008224:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008232:	647b      	str	r3, [r7, #68]	; 0x44
 8008234:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008238:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e4      	bne.n	8008210 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	623b      	str	r3, [r7, #32]
   return(result);
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800826e:	633a      	str	r2, [r7, #48]	; 0x30
 8008270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e1      	bne.n	8008246 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0310 	bic.w	r3, r3, #16
 80082aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	69b9      	ldr	r1, [r7, #24]
 80082be:	69fa      	ldr	r2, [r7, #28]
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	617b      	str	r3, [r7, #20]
   return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e4      	bne.n	8008296 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7f9 f998 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082d8:	e063      	b.n	80083a2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00e      	beq.n	8008304 <HAL_UART_IRQHandler+0x584>
 80082e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 fcf7 	bl	8009cf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008302:	e051      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830c:	2b00      	cmp	r3, #0
 800830e:	d014      	beq.n	800833a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800831c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832c:	2b00      	cmp	r3, #0
 800832e:	d03a      	beq.n	80083a6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
    }
    return;
 8008338:	e035      	b.n	80083a6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800833a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <HAL_UART_IRQHandler+0x5da>
 8008346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f845 	bl	80093e2 <UART_EndTransmit_IT>
    return;
 8008358:	e026      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <HAL_UART_IRQHandler+0x5fa>
 8008366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fcce 	bl	8009d14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008378:	e016      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d010      	beq.n	80083a8 <HAL_UART_IRQHandler+0x628>
 8008386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800838a:	2b00      	cmp	r3, #0
 800838c:	da0c      	bge.n	80083a8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fcb7 	bl	8009d02 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008394:	e008      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
      return;
 8008396:	bf00      	nop
 8008398:	e006      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
    return;
 800839a:	bf00      	nop
 800839c:	e004      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
      return;
 800839e:	bf00      	nop
 80083a0:	e002      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
      return;
 80083a2:	bf00      	nop
 80083a4:	e000      	b.n	80083a8 <HAL_UART_IRQHandler+0x628>
    return;
 80083a6:	bf00      	nop
  }
}
 80083a8:	37e8      	adds	r7, #232	; 0xe8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop

080083b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr

080083c2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr
	...

080083e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083ec:	b08c      	sub	sp, #48	; 0x30
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	431a      	orrs	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	431a      	orrs	r2, r3
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	4313      	orrs	r3, r2
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b94      	ldr	r3, [pc, #592]	; (8008668 <UART_SetConfig+0x280>)
 8008418:	4013      	ands	r3, r2
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	6812      	ldr	r2, [r2, #0]
 800841e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008420:	430b      	orrs	r3, r1
 8008422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a89      	ldr	r2, [pc, #548]	; (800866c <UART_SetConfig+0x284>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d004      	beq.n	8008454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008450:	4313      	orrs	r3, r2
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800845e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008468:	430b      	orrs	r3, r1
 800846a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	f023 010f 	bic.w	r1, r3, #15
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a7a      	ldr	r2, [pc, #488]	; (8008670 <UART_SetConfig+0x288>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d127      	bne.n	80084dc <UART_SetConfig+0xf4>
 800848c:	2003      	movs	r0, #3
 800848e:	f7ff fb1d 	bl	8007acc <LL_RCC_GetUSARTClockSource>
 8008492:	4603      	mov	r3, r0
 8008494:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008498:	2b03      	cmp	r3, #3
 800849a:	d81b      	bhi.n	80084d4 <UART_SetConfig+0xec>
 800849c:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0xbc>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084c5 	.word	0x080084c5
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ba:	e080      	b.n	80085be <UART_SetConfig+0x1d6>
 80084bc:	2302      	movs	r3, #2
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e07c      	b.n	80085be <UART_SetConfig+0x1d6>
 80084c4:	2304      	movs	r3, #4
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e078      	b.n	80085be <UART_SetConfig+0x1d6>
 80084cc:	2308      	movs	r3, #8
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d2:	e074      	b.n	80085be <UART_SetConfig+0x1d6>
 80084d4:	2310      	movs	r3, #16
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084da:	e070      	b.n	80085be <UART_SetConfig+0x1d6>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a64      	ldr	r2, [pc, #400]	; (8008674 <UART_SetConfig+0x28c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d138      	bne.n	8008558 <UART_SetConfig+0x170>
 80084e6:	200c      	movs	r0, #12
 80084e8:	f7ff faf0 	bl	8007acc <LL_RCC_GetUSARTClockSource>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80084f2:	2b0c      	cmp	r3, #12
 80084f4:	d82c      	bhi.n	8008550 <UART_SetConfig+0x168>
 80084f6:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <UART_SetConfig+0x114>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008551 	.word	0x08008551
 8008504:	08008551 	.word	0x08008551
 8008508:	08008551 	.word	0x08008551
 800850c:	08008541 	.word	0x08008541
 8008510:	08008551 	.word	0x08008551
 8008514:	08008551 	.word	0x08008551
 8008518:	08008551 	.word	0x08008551
 800851c:	08008539 	.word	0x08008539
 8008520:	08008551 	.word	0x08008551
 8008524:	08008551 	.word	0x08008551
 8008528:	08008551 	.word	0x08008551
 800852c:	08008549 	.word	0x08008549
 8008530:	2300      	movs	r3, #0
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008536:	e042      	b.n	80085be <UART_SetConfig+0x1d6>
 8008538:	2302      	movs	r3, #2
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853e:	e03e      	b.n	80085be <UART_SetConfig+0x1d6>
 8008540:	2304      	movs	r3, #4
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008546:	e03a      	b.n	80085be <UART_SetConfig+0x1d6>
 8008548:	2308      	movs	r3, #8
 800854a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800854e:	e036      	b.n	80085be <UART_SetConfig+0x1d6>
 8008550:	2310      	movs	r3, #16
 8008552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008556:	e032      	b.n	80085be <UART_SetConfig+0x1d6>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a43      	ldr	r2, [pc, #268]	; (800866c <UART_SetConfig+0x284>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d12a      	bne.n	80085b8 <UART_SetConfig+0x1d0>
 8008562:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008566:	f7ff fac3 	bl	8007af0 <LL_RCC_GetLPUARTClockSource>
 800856a:	4603      	mov	r3, r0
 800856c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008570:	d01a      	beq.n	80085a8 <UART_SetConfig+0x1c0>
 8008572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008576:	d81b      	bhi.n	80085b0 <UART_SetConfig+0x1c8>
 8008578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800857c:	d00c      	beq.n	8008598 <UART_SetConfig+0x1b0>
 800857e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008582:	d815      	bhi.n	80085b0 <UART_SetConfig+0x1c8>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <UART_SetConfig+0x1a8>
 8008588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800858c:	d008      	beq.n	80085a0 <UART_SetConfig+0x1b8>
 800858e:	e00f      	b.n	80085b0 <UART_SetConfig+0x1c8>
 8008590:	2300      	movs	r3, #0
 8008592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008596:	e012      	b.n	80085be <UART_SetConfig+0x1d6>
 8008598:	2302      	movs	r3, #2
 800859a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859e:	e00e      	b.n	80085be <UART_SetConfig+0x1d6>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a6:	e00a      	b.n	80085be <UART_SetConfig+0x1d6>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ae:	e006      	b.n	80085be <UART_SetConfig+0x1d6>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b6:	e002      	b.n	80085be <UART_SetConfig+0x1d6>
 80085b8:	2310      	movs	r3, #16
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2a      	ldr	r2, [pc, #168]	; (800866c <UART_SetConfig+0x284>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	f040 80a4 	bne.w	8008712 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d823      	bhi.n	800861a <UART_SetConfig+0x232>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <UART_SetConfig+0x1f0>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085fd 	.word	0x080085fd
 80085dc:	0800861b 	.word	0x0800861b
 80085e0:	08008605 	.word	0x08008605
 80085e4:	0800861b 	.word	0x0800861b
 80085e8:	0800860b 	.word	0x0800860b
 80085ec:	0800861b 	.word	0x0800861b
 80085f0:	0800861b 	.word	0x0800861b
 80085f4:	0800861b 	.word	0x0800861b
 80085f8:	08008613 	.word	0x08008613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085fc:	f7fd ff4a 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 8008600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008602:	e010      	b.n	8008626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008604:	4b1c      	ldr	r3, [pc, #112]	; (8008678 <UART_SetConfig+0x290>)
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008608:	e00d      	b.n	8008626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800860a:	f7fd fe8f 	bl	800632c <HAL_RCC_GetSysClockFreq>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008610:	e009      	b.n	8008626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008618:	e005      	b.n	8008626 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 8137 	beq.w	800889c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	4a12      	ldr	r2, [pc, #72]	; (800867c <UART_SetConfig+0x294>)
 8008634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008638:	461a      	mov	r2, r3
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008640:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	4413      	add	r3, r2
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	429a      	cmp	r2, r3
 8008650:	d305      	bcc.n	800865e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	429a      	cmp	r2, r3
 800865c:	d910      	bls.n	8008680 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008664:	e11a      	b.n	800889c <UART_SetConfig+0x4b4>
 8008666:	bf00      	nop
 8008668:	cfff69f3 	.word	0xcfff69f3
 800866c:	40008000 	.word	0x40008000
 8008670:	40013800 	.word	0x40013800
 8008674:	40004400 	.word	0x40004400
 8008678:	00f42400 	.word	0x00f42400
 800867c:	0801bdf8 	.word	0x0801bdf8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	2200      	movs	r2, #0
 8008684:	60bb      	str	r3, [r7, #8]
 8008686:	60fa      	str	r2, [r7, #12]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	4a8e      	ldr	r2, [pc, #568]	; (80088c8 <UART_SetConfig+0x4e0>)
 800868e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008692:	b29b      	uxth	r3, r3
 8008694:	2200      	movs	r2, #0
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086a2:	f7f8 f9e5 	bl	8000a70 <__aeabi_uldivmod>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4610      	mov	r0, r2
 80086ac:	4619      	mov	r1, r3
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	020b      	lsls	r3, r1, #8
 80086b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086bc:	0202      	lsls	r2, r0, #8
 80086be:	6979      	ldr	r1, [r7, #20]
 80086c0:	6849      	ldr	r1, [r1, #4]
 80086c2:	0849      	lsrs	r1, r1, #1
 80086c4:	2000      	movs	r0, #0
 80086c6:	460c      	mov	r4, r1
 80086c8:	4605      	mov	r5, r0
 80086ca:	eb12 0804 	adds.w	r8, r2, r4
 80086ce:	eb43 0905 	adc.w	r9, r3, r5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	469a      	mov	sl, r3
 80086da:	4693      	mov	fp, r2
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	f7f8 f9c4 	bl	8000a70 <__aeabi_uldivmod>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4613      	mov	r3, r2
 80086ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086f6:	d308      	bcc.n	800870a <UART_SetConfig+0x322>
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086fe:	d204      	bcs.n	800870a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6a3a      	ldr	r2, [r7, #32]
 8008706:	60da      	str	r2, [r3, #12]
 8008708:	e0c8      	b.n	800889c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008710:	e0c4      	b.n	800889c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871a:	d168      	bne.n	80087ee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800871c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008720:	2b08      	cmp	r3, #8
 8008722:	d828      	bhi.n	8008776 <UART_SetConfig+0x38e>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0x344>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	08008777 	.word	0x08008777
 800873c:	08008767 	.word	0x08008767
 8008740:	08008777 	.word	0x08008777
 8008744:	08008777 	.word	0x08008777
 8008748:	08008777 	.word	0x08008777
 800874c:	0800876f 	.word	0x0800876f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008750:	f7fd fea0 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 8008754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008756:	e014      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008758:	f7fd feae 	bl	80064b8 <HAL_RCC_GetPCLK2Freq>
 800875c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800875e:	e010      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008760:	4b5a      	ldr	r3, [pc, #360]	; (80088cc <UART_SetConfig+0x4e4>)
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008764:	e00d      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008766:	f7fd fde1 	bl	800632c <HAL_RCC_GetSysClockFreq>
 800876a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800876c:	e009      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008774:	e005      	b.n	8008782 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8089 	beq.w	800889c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	4a4e      	ldr	r2, [pc, #312]	; (80088c8 <UART_SetConfig+0x4e0>)
 8008790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008794:	461a      	mov	r2, r3
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	fbb3 f3f2 	udiv	r3, r3, r2
 800879c:	005a      	lsls	r2, r3, #1
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	441a      	add	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	2b0f      	cmp	r3, #15
 80087b6:	d916      	bls.n	80087e6 <UART_SetConfig+0x3fe>
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087be:	d212      	bcs.n	80087e6 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	f023 030f 	bic.w	r3, r3, #15
 80087c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f003 0307 	and.w	r3, r3, #7
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	8bfb      	ldrh	r3, [r7, #30]
 80087d8:	4313      	orrs	r3, r2
 80087da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	8bfa      	ldrh	r2, [r7, #30]
 80087e2:	60da      	str	r2, [r3, #12]
 80087e4:	e05a      	b.n	800889c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087ec:	e056      	b.n	800889c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d827      	bhi.n	8008846 <UART_SetConfig+0x45e>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <UART_SetConfig+0x414>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008821 	.word	0x08008821
 8008800:	08008829 	.word	0x08008829
 8008804:	08008831 	.word	0x08008831
 8008808:	08008847 	.word	0x08008847
 800880c:	08008837 	.word	0x08008837
 8008810:	08008847 	.word	0x08008847
 8008814:	08008847 	.word	0x08008847
 8008818:	08008847 	.word	0x08008847
 800881c:	0800883f 	.word	0x0800883f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008820:	f7fd fe38 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 8008824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008826:	e014      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008828:	f7fd fe46 	bl	80064b8 <HAL_RCC_GetPCLK2Freq>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800882e:	e010      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008830:	4b26      	ldr	r3, [pc, #152]	; (80088cc <UART_SetConfig+0x4e4>)
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008834:	e00d      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008836:	f7fd fd79 	bl	800632c <HAL_RCC_GetSysClockFreq>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800883c:	e009      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800883e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008844:	e005      	b.n	8008852 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008850:	bf00      	nop
    }

    if (pclk != 0U)
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d021      	beq.n	800889c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <UART_SetConfig+0x4e0>)
 800885e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008862:	461a      	mov	r2, r3
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	fbb3 f2f2 	udiv	r2, r3, r2
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	441a      	add	r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	fbb2 f3f3 	udiv	r3, r2, r3
 800887a:	b29b      	uxth	r3, r3
 800887c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d908      	bls.n	8008896 <UART_SetConfig+0x4ae>
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d204      	bcs.n	8008896 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6a3a      	ldr	r2, [r7, #32]
 8008892:	60da      	str	r2, [r3, #12]
 8008894:	e002      	b.n	800889c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2200      	movs	r2, #0
 80088b0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2200      	movs	r2, #0
 80088b6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3730      	adds	r7, #48	; 0x30
 80088c0:	46bd      	mov	sp, r7
 80088c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088c6:	bf00      	nop
 80088c8:	0801bdf8 	.word	0x0801bdf8
 80088cc:	00f42400 	.word	0x00f42400

080088d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00a      	beq.n	80088fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f003 0308 	and.w	r3, r3, #8
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01a      	beq.n	80089e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ce:	d10a      	bne.n	80089e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr

08008a12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b086      	sub	sp, #24
 8008a16:	af02      	add	r7, sp, #8
 8008a18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a22:	f7f9 f971 	bl	8001d08 <HAL_GetTick>
 8008a26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d10e      	bne.n	8008a54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f82f 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e025      	b.n	8008aa0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d10e      	bne.n	8008a80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f819 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e00f      	b.n	8008aa0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b09c      	sub	sp, #112	; 0x70
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab8:	e0a9      	b.n	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	f000 80a5 	beq.w	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac4:	f7f9 f920 	bl	8001d08 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d302      	bcc.n	8008ada <UART_WaitOnFlagUntilTimeout+0x32>
 8008ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d140      	bne.n	8008b5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008aee:	667b      	str	r3, [r7, #100]	; 0x64
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	461a      	mov	r2, r3
 8008af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008afa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008afe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e6      	bne.n	8008ada <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3308      	adds	r3, #8
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e5      	bne.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e069      	b.n	8008c30 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0304 	and.w	r3, r3, #4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d051      	beq.n	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b78:	d149      	bne.n	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bd6:	623a      	str	r2, [r7, #32]
 8008bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	69f9      	ldr	r1, [r7, #28]
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e010      	b.n	8008c30 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69da      	ldr	r2, [r3, #28]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	4013      	ands	r3, r2
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2301      	moveq	r3, #1
 8008c20:	2300      	movne	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	f43f af46 	beq.w	8008aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3770      	adds	r7, #112	; 0x70
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b0a3      	sub	sp, #140	; 0x8c
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6a:	d10e      	bne.n	8008c8a <UART_Start_Receive_IT+0x52>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d105      	bne.n	8008c80 <UART_Start_Receive_IT+0x48>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c7e:	e02d      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	22ff      	movs	r2, #255	; 0xff
 8008c84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c88:	e028      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10d      	bne.n	8008cae <UART_Start_Receive_IT+0x76>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <UART_Start_Receive_IT+0x6c>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	22ff      	movs	r2, #255	; 0xff
 8008c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ca2:	e01b      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	227f      	movs	r2, #127	; 0x7f
 8008ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cac:	e016      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb6:	d10d      	bne.n	8008cd4 <UART_Start_Receive_IT+0x9c>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <UART_Start_Receive_IT+0x92>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	227f      	movs	r2, #127	; 0x7f
 8008cc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc8:	e008      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	223f      	movs	r2, #63	; 0x3f
 8008cce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cd2:	e003      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2222      	movs	r2, #34	; 0x22
 8008ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d10:	673a      	str	r2, [r7, #112]	; 0x70
 8008d12:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e3      	bne.n	8008cec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2c:	d153      	bne.n	8008dd6 <UART_Start_Receive_IT+0x19e>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d34d      	bcc.n	8008dd6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d42:	d107      	bne.n	8008d54 <UART_Start_Receive_IT+0x11c>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a4a      	ldr	r2, [pc, #296]	; (8008e78 <UART_Start_Receive_IT+0x240>)
 8008d50:	671a      	str	r2, [r3, #112]	; 0x70
 8008d52:	e002      	b.n	8008d5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4a49      	ldr	r2, [pc, #292]	; (8008e7c <UART_Start_Receive_IT+0x244>)
 8008d58:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d01a      	beq.n	8008da0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e4      	bne.n	8008d6a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008db6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008dc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_Start_Receive_IT+0x168>
 8008dd4:	e04a      	b.n	8008e6c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dde:	d107      	bne.n	8008df0 <UART_Start_Receive_IT+0x1b8>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a25      	ldr	r2, [pc, #148]	; (8008e80 <UART_Start_Receive_IT+0x248>)
 8008dec:	671a      	str	r2, [r3, #112]	; 0x70
 8008dee:	e002      	b.n	8008df6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4a24      	ldr	r2, [pc, #144]	; (8008e84 <UART_Start_Receive_IT+0x24c>)
 8008df4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d019      	beq.n	8008e3a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e1a:	677b      	str	r3, [r7, #116]	; 0x74
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
 8008e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e6      	bne.n	8008e06 <UART_Start_Receive_IT+0x1ce>
 8008e38:	e018      	b.n	8008e6c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	613b      	str	r3, [r7, #16]
   return(result);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f043 0320 	orr.w	r3, r3, #32
 8008e4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	6a3a      	ldr	r2, [r7, #32]
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	378c      	adds	r7, #140	; 0x8c
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr
 8008e78:	080099f1 	.word	0x080099f1
 8008e7c:	080096f9 	.word	0x080096f9
 8008e80:	08009599 	.word	0x08009599
 8008e84:	08009439 	.word	0x08009439

08008e88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b096      	sub	sp, #88	; 0x58
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	88fa      	ldrh	r2, [r7, #6]
 8008ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2222      	movs	r2, #34	; 0x22
 8008eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d02c      	beq.n	8008f16 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec0:	4a42      	ldr	r2, [pc, #264]	; (8008fcc <UART_Start_Receive_DMA+0x144>)
 8008ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec8:	4a41      	ldr	r2, [pc, #260]	; (8008fd0 <UART_Start_Receive_DMA+0x148>)
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed0:	4a40      	ldr	r2, [pc, #256]	; (8008fd4 <UART_Start_Receive_DMA+0x14c>)
 8008ed2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed8:	2200      	movs	r2, #0
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3324      	adds	r3, #36	; 0x24
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eec:	461a      	mov	r2, r3
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	f7fb fa12 	bl	8004318 <HAL_DMA_Start_IT>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00d      	beq.n	8008f16 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2210      	movs	r2, #16
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e055      	b.n	8008fc2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d018      	beq.n	8008f58 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f46:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e6      	bne.n	8008f26 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3308      	adds	r3, #8
 8008f76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f78:	637a      	str	r2, [r7, #52]	; 0x34
 8008f7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e5      	bne.n	8008f58 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fac:	623a      	str	r2, [r7, #32]
 8008fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	69f9      	ldr	r1, [r7, #28]
 8008fb2:	6a3a      	ldr	r2, [r7, #32]
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e5      	bne.n	8008f8c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3758      	adds	r7, #88	; 0x58
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	080091d9 	.word	0x080091d9
 8008fd0:	080092ff 	.word	0x080092ff
 8008fd4:	08009337 	.word	0x08009337

08008fd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b08f      	sub	sp, #60	; 0x3c
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009000:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e6      	bne.n	8008fe0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3308      	adds	r3, #8
 8009018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	60bb      	str	r3, [r7, #8]
   return(result);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009028:	633b      	str	r3, [r7, #48]	; 0x30
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3308      	adds	r3, #8
 8009030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009032:	61ba      	str	r2, [r7, #24]
 8009034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	6979      	ldr	r1, [r7, #20]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	613b      	str	r3, [r7, #16]
   return(result);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e5      	bne.n	8009012 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800904e:	bf00      	nop
 8009050:	373c      	adds	r7, #60	; 0x3c
 8009052:	46bd      	mov	sp, r7
 8009054:	bc80      	pop	{r7}
 8009056:	4770      	bx	lr

08009058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b095      	sub	sp, #84	; 0x54
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009074:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907e:	643b      	str	r3, [r7, #64]	; 0x40
 8009080:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e6      	bne.n	8009060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3308      	adds	r3, #8
 8009098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e3      	bne.n	8009092 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d118      	bne.n	8009104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f023 0310 	bic.w	r3, r3, #16
 80090e6:	647b      	str	r3, [r7, #68]	; 0x44
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f0:	61bb      	str	r3, [r7, #24]
 80090f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6979      	ldr	r1, [r7, #20]
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	613b      	str	r3, [r7, #16]
   return(result);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e6      	bne.n	80090d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009118:	bf00      	nop
 800911a:	3754      	adds	r7, #84	; 0x54
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr

08009122 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b090      	sub	sp, #64	; 0x40
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0320 	and.w	r3, r3, #32
 800913a:	2b00      	cmp	r3, #0
 800913c:	d137      	bne.n	80091ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800913e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009140:	2200      	movs	r2, #0
 8009142:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3308      	adds	r3, #8
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	623b      	str	r3, [r7, #32]
   return(result);
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800915c:	63bb      	str	r3, [r7, #56]	; 0x38
 800915e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009166:	633a      	str	r2, [r7, #48]	; 0x30
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800916c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e5      	bne.n	8009146 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	60fb      	str	r3, [r7, #12]
   return(result);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
 8009190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009198:	61fb      	str	r3, [r7, #28]
 800919a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	69b9      	ldr	r1, [r7, #24]
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	617b      	str	r3, [r7, #20]
   return(result);
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e6      	bne.n	800917a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091ac:	e002      	b.n	80091b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80091ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80091b0:	f7f9 fc30 	bl	8002a14 <HAL_UART_TxCpltCallback>
}
 80091b4:	bf00      	nop
 80091b6:	3740      	adds	r7, #64	; 0x40
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff f8f0 	bl	80083b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d0:	bf00      	nop
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b09c      	sub	sp, #112	; 0x70
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d171      	bne.n	80092d8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80091f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800920a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800920c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009210:	66bb      	str	r3, [r7, #104]	; 0x68
 8009212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800921a:	65bb      	str	r3, [r7, #88]	; 0x58
 800921c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e6      	bne.n	80091fc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	667b      	str	r3, [r7, #100]	; 0x64
 8009246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800924e:	647a      	str	r2, [r7, #68]	; 0x44
 8009250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800925c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e5      	bne.n	800922e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3308      	adds	r3, #8
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	623b      	str	r3, [r7, #32]
   return(result);
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009278:	663b      	str	r3, [r7, #96]	; 0x60
 800927a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009282:	633a      	str	r2, [r7, #48]	; 0x30
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e5      	bne.n	8009262 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800929e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d118      	bne.n	80092d8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0310 	bic.w	r3, r3, #16
 80092ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c4:	61fb      	str	r3, [r7, #28]
 80092c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	69b9      	ldr	r1, [r7, #24]
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	617b      	str	r3, [r7, #20]
   return(result);
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e6      	bne.n	80092a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d107      	bne.n	80092f0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092e6:	4619      	mov	r1, r3
 80092e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092ea:	f7f8 f98d 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092ee:	e002      	b.n	80092f6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80092f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092f2:	f7f9 fba5 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 80092f6:	bf00      	nop
 80092f8:	3770      	adds	r7, #112	; 0x70
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d109      	bne.n	8009328 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	b29b      	uxth	r3, r3
 800931e:	4619      	mov	r1, r3
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f7f8 f971 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009326:	e002      	b.n	800932e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7ff f84a 	bl	80083c2 <HAL_UART_RxHalfCpltCallback>
}
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009342:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800934a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009352:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800935e:	2b80      	cmp	r3, #128	; 0x80
 8009360:	d109      	bne.n	8009376 <UART_DMAError+0x40>
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b21      	cmp	r3, #33	; 0x21
 8009366:	d106      	bne.n	8009376 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2200      	movs	r2, #0
 800936c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009370:	6978      	ldr	r0, [r7, #20]
 8009372:	f7ff fe31 	bl	8008fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009380:	2b40      	cmp	r3, #64	; 0x40
 8009382:	d109      	bne.n	8009398 <UART_DMAError+0x62>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b22      	cmp	r3, #34	; 0x22
 8009388:	d106      	bne.n	8009398 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009392:	6978      	ldr	r0, [r7, #20]
 8009394:	f7ff fe60 	bl	8009058 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800939e:	f043 0210 	orr.w	r2, r3, #16
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093a8:	6978      	ldr	r0, [r7, #20]
 80093aa:	f7ff f813 	bl	80083d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ae:	bf00      	nop
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7fe fffd 	bl	80083d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	e853 3f00 	ldrex	r3, [r3]
 80093f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	61bb      	str	r3, [r7, #24]
 800940a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6979      	ldr	r1, [r7, #20]
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	613b      	str	r3, [r7, #16]
   return(result);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e6      	bne.n	80093ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2220      	movs	r2, #32
 8009420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f9 faf2 	bl	8002a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009430:	bf00      	nop
 8009432:	3720      	adds	r7, #32
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b096      	sub	sp, #88	; 0x58
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009446:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009450:	2b22      	cmp	r3, #34	; 0x22
 8009452:	f040 8095 	bne.w	8009580 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009460:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009464:	b2d9      	uxtb	r1, r3
 8009466:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800946a:	b2da      	uxtb	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009470:	400a      	ands	r2, r1
 8009472:	b2d2      	uxtb	r2, r2
 8009474:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009486:	b29b      	uxth	r3, r3
 8009488:	3b01      	subs	r3, #1
 800948a:	b29a      	uxth	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d178      	bne.n	8009590 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094b2:	653b      	str	r3, [r7, #80]	; 0x50
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	461a      	mov	r2, r3
 80094ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094bc:	647b      	str	r3, [r7, #68]	; 0x44
 80094be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e6      	bne.n	800949e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3308      	adds	r3, #8
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	623b      	str	r3, [r7, #32]
   return(result);
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	f023 0301 	bic.w	r3, r3, #1
 80094e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3308      	adds	r3, #8
 80094ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094f0:	633a      	str	r2, [r7, #48]	; 0x30
 80094f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e5      	bne.n	80094d0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009516:	2b01      	cmp	r3, #1
 8009518:	d12e      	bne.n	8009578 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	60fb      	str	r3, [r7, #12]
   return(result);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f023 0310 	bic.w	r3, r3, #16
 8009534:	64bb      	str	r3, [r7, #72]	; 0x48
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953e:	61fb      	str	r3, [r7, #28]
 8009540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	69b9      	ldr	r1, [r7, #24]
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	617b      	str	r3, [r7, #20]
   return(result);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e6      	bne.n	8009520 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b10      	cmp	r3, #16
 800955e:	d103      	bne.n	8009568 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2210      	movs	r2, #16
 8009566:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7f8 f849 	bl	8001608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009576:	e00b      	b.n	8009590 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7f9 fa61 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 800957e:	e007      	b.n	8009590 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0208 	orr.w	r2, r2, #8
 800958e:	619a      	str	r2, [r3, #24]
}
 8009590:	bf00      	nop
 8009592:	3758      	adds	r7, #88	; 0x58
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b096      	sub	sp, #88	; 0x58
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b0:	2b22      	cmp	r3, #34	; 0x22
 80095b2:	f040 8095 	bne.w	80096e0 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80095c6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80095ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095ce:	4013      	ands	r3, r2
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095da:	1c9a      	adds	r2, r3, #2
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d178      	bne.n	80096f0 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	e853 3f00 	ldrex	r3, [r3]
 800960a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	461a      	mov	r2, r3
 800961a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800961c:	643b      	str	r3, [r7, #64]	; 0x40
 800961e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009624:	e841 2300 	strex	r3, r2, [r1]
 8009628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e6      	bne.n	80095fe <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3308      	adds	r3, #8
 8009636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f023 0301 	bic.w	r3, r3, #1
 8009646:	64bb      	str	r3, [r7, #72]	; 0x48
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e5      	bne.n	8009630 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2220      	movs	r2, #32
 8009668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009676:	2b01      	cmp	r3, #1
 8009678:	d12e      	bne.n	80096d8 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	60bb      	str	r3, [r7, #8]
   return(result);
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f023 0310 	bic.w	r3, r3, #16
 8009694:	647b      	str	r3, [r7, #68]	; 0x44
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6979      	ldr	r1, [r7, #20]
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	613b      	str	r3, [r7, #16]
   return(result);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e6      	bne.n	8009680 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b10      	cmp	r3, #16
 80096be:	d103      	bne.n	80096c8 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2210      	movs	r2, #16
 80096c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7f7 ff99 	bl	8001608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096d6:	e00b      	b.n	80096f0 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7f9 f9b1 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 80096de:	e007      	b.n	80096f0 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699a      	ldr	r2, [r3, #24]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0208 	orr.w	r2, r2, #8
 80096ee:	619a      	str	r2, [r3, #24]
}
 80096f0:	bf00      	nop
 80096f2:	3758      	adds	r7, #88	; 0x58
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b0a6      	sub	sp, #152	; 0x98
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009706:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972e:	2b22      	cmp	r3, #34	; 0x22
 8009730:	f040 814f 	bne.w	80099d2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800973a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800973e:	e0f6      	b.n	800992e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800974a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800974e:	b2d9      	uxtb	r1, r3
 8009750:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975a:	400a      	ands	r2, r1
 800975c:	b2d2      	uxtb	r2, r2
 800975e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009770:	b29b      	uxth	r3, r3
 8009772:	3b01      	subs	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	2b00      	cmp	r3, #0
 8009790:	d053      	beq.n	800983a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d011      	beq.n	80097c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800979e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00b      	beq.n	80097c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2201      	movs	r2, #1
 80097b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b8:	f043 0201 	orr.w	r2, r3, #1
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d011      	beq.n	80097f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80097ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00b      	beq.n	80097f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2202      	movs	r2, #2
 80097e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e8:	f043 0204 	orr.w	r2, r3, #4
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d011      	beq.n	8009822 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80097fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00b      	beq.n	8009822 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2204      	movs	r2, #4
 8009810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009818:	f043 0202 	orr.w	r2, r3, #2
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009828:	2b00      	cmp	r3, #0
 800982a:	d006      	beq.n	800983a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7fe fdd1 	bl	80083d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009840:	b29b      	uxth	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d173      	bne.n	800992e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800984e:	e853 3f00 	ldrex	r3, [r3]
 8009852:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800985a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009868:	66bb      	str	r3, [r7, #104]	; 0x68
 800986a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800986e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009870:	e841 2300 	strex	r3, r2, [r1]
 8009874:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e4      	bne.n	8009846 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3308      	adds	r3, #8
 8009882:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800988c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800988e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009892:	f023 0301 	bic.w	r3, r3, #1
 8009896:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3308      	adds	r3, #8
 800989e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098a0:	657a      	str	r2, [r7, #84]	; 0x54
 80098a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098a8:	e841 2300 	strex	r3, r2, [r1]
 80098ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e3      	bne.n	800987c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d12e      	bne.n	8009928 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	f023 0310 	bic.w	r3, r3, #16
 80098e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ee:	643b      	str	r3, [r7, #64]	; 0x40
 80098f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e6      	bne.n	80098d0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	f003 0310 	and.w	r3, r3, #16
 800990c:	2b10      	cmp	r3, #16
 800990e:	d103      	bne.n	8009918 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2210      	movs	r2, #16
 8009916:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7f7 fe71 	bl	8001608 <HAL_UARTEx_RxEventCallback>
 8009926:	e002      	b.n	800992e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7f9 f889 	bl	8002a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800992e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009932:	2b00      	cmp	r3, #0
 8009934:	d006      	beq.n	8009944 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009936:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800993a:	f003 0320 	and.w	r3, r3, #32
 800993e:	2b00      	cmp	r3, #0
 8009940:	f47f aefe 	bne.w	8009740 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800994a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800994e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009952:	2b00      	cmp	r3, #0
 8009954:	d045      	beq.n	80099e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800995c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009960:	429a      	cmp	r2, r3
 8009962:	d23e      	bcs.n	80099e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3308      	adds	r3, #8
 800996a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	61fb      	str	r3, [r7, #28]
   return(result);
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800997a:	673b      	str	r3, [r7, #112]	; 0x70
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3308      	adds	r3, #8
 8009982:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800998a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e5      	bne.n	8009964 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a14      	ldr	r2, [pc, #80]	; (80099ec <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800999c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f043 0320 	orr.w	r3, r3, #32
 80099b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	461a      	mov	r2, r3
 80099ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099bc:	61bb      	str	r3, [r7, #24]
 80099be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6979      	ldr	r1, [r7, #20]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	e841 2300 	strex	r3, r2, [r1]
 80099c8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e6      	bne.n	800999e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099d0:	e007      	b.n	80099e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 0208 	orr.w	r2, r2, #8
 80099e0:	619a      	str	r2, [r3, #24]
}
 80099e2:	bf00      	nop
 80099e4:	3798      	adds	r7, #152	; 0x98
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	08009439 	.word	0x08009439

080099f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b0a8      	sub	sp, #160	; 0xa0
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099fe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a26:	2b22      	cmp	r3, #34	; 0x22
 8009a28:	f040 8153 	bne.w	8009cd2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a32:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a36:	e0fa      	b.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a4a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a52:	4013      	ands	r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a60:	1c9a      	adds	r2, r3, #2
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a86:	f003 0307 	and.w	r3, r3, #7
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d053      	beq.n	8009b36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d011      	beq.n	8009abe <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00b      	beq.n	8009abe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab4:	f043 0201 	orr.w	r2, r3, #1
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009abe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d011      	beq.n	8009aee <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2202      	movs	r2, #2
 8009adc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae4:	f043 0204 	orr.w	r2, r3, #4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009af2:	f003 0304 	and.w	r3, r3, #4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d011      	beq.n	8009b1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2204      	movs	r2, #4
 8009b0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b14:	f043 0202 	orr.w	r2, r3, #2
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7fe fc53 	bl	80083d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d175      	bne.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b4a:	e853 3f00 	ldrex	r3, [r3]
 8009b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b66:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b6c:	e841 2300 	strex	r3, r2, [r1]
 8009b70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e4      	bne.n	8009b42 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b8e:	f023 0301 	bic.w	r3, r3, #1
 8009b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ba0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ba2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e1      	bne.n	8009b78 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d12e      	bne.n	8009c28 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be0:	f023 0310 	bic.w	r3, r3, #16
 8009be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bee:	647b      	str	r3, [r7, #68]	; 0x44
 8009bf0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bf6:	e841 2300 	strex	r3, r2, [r1]
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e6      	bne.n	8009bd0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b10      	cmp	r3, #16
 8009c0e:	d103      	bne.n	8009c18 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2210      	movs	r2, #16
 8009c16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f7 fcf1 	bl	8001608 <HAL_UARTEx_RxEventCallback>
 8009c26:	e002      	b.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7f8 ff09 	bl	8002a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d006      	beq.n	8009c44 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f47f aefa 	bne.w	8009a38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c4a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d045      	beq.n	8009ce2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c5c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d23e      	bcs.n	8009ce2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3308      	adds	r3, #8
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	623b      	str	r3, [r7, #32]
   return(result);
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c7a:	677b      	str	r3, [r7, #116]	; 0x74
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3308      	adds	r3, #8
 8009c82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c84:	633a      	str	r2, [r7, #48]	; 0x30
 8009c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e5      	bne.n	8009c64 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a14      	ldr	r2, [pc, #80]	; (8009cec <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009c9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f043 0320 	orr.w	r3, r3, #32
 8009cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	69b9      	ldr	r1, [r7, #24]
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	e841 2300 	strex	r3, r2, [r1]
 8009cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e6      	bne.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cd0:	e007      	b.n	8009ce2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699a      	ldr	r2, [r3, #24]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f042 0208 	orr.w	r2, r2, #8
 8009ce0:	619a      	str	r2, [r3, #24]
}
 8009ce2:	bf00      	nop
 8009ce4:	37a0      	adds	r7, #160	; 0xa0
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	08009599 	.word	0x08009599

08009cf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bc80      	pop	{r7}
 8009d00:	4770      	bx	lr

08009d02 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr

08009d14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bc80      	pop	{r7}
 8009d24:	4770      	bx	lr

08009d26 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b088      	sub	sp, #32
 8009d2a:	af02      	add	r7, sp, #8
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	1d3b      	adds	r3, r7, #4
 8009d30:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e046      	b.n	8009dd4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2224      	movs	r2, #36	; 0x24
 8009d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 0201 	bic.w	r2, r2, #1
 8009d64:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d105      	bne.n	8009d8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009d80:	1d3b      	adds	r3, r7, #4
 8009d82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 f9a5 	bl	800a0d6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f042 0201 	orr.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d9c:	f7f7 ffb4 	bl	8001d08 <HAL_GetTick>
 8009da0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009da2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7fe fe79 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	75fb      	strb	r3, [r7, #23]
 8009dc0:	e003      	b.n	8009dca <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b089      	sub	sp, #36	; 0x24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_UARTEx_EnableStopMode+0x16>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e021      	b.n	8009e36 <HAL_UARTEx_EnableStopMode+0x5a>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	e853 3f00 	ldrex	r3, [r3]
 8009e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f043 0302 	orr.w	r3, r3, #2
 8009e0e:	61fb      	str	r3, [r7, #28]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	61bb      	str	r3, [r7, #24]
 8009e1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6979      	ldr	r1, [r7, #20]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	613b      	str	r3, [r7, #16]
   return(result);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e6      	bne.n	8009dfa <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3724      	adds	r7, #36	; 0x24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bc80      	pop	{r7}
 8009e3e:	4770      	bx	lr

08009e40 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <HAL_UARTEx_EnableFifoMode+0x16>
 8009e52:	2302      	movs	r3, #2
 8009e54:	e02b      	b.n	8009eae <HAL_UARTEx_EnableFifoMode+0x6e>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2224      	movs	r2, #36	; 0x24
 8009e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0201 	bic.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009e8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f940 	bl	800a11c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b085      	sub	sp, #20
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <HAL_UARTEx_DisableFifoMode+0x16>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e027      	b.n	8009f1c <HAL_UARTEx_DisableFifoMode+0x66>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2224      	movs	r2, #36	; 0x24
 8009ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f022 0201 	bic.w	r2, r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009efa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bc80      	pop	{r7}
 8009f24:	4770      	bx	lr

08009f26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d101      	bne.n	8009f3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	e02d      	b.n	8009f9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2224      	movs	r2, #36	; 0x24
 8009f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 0201 	bic.w	r2, r2, #1
 8009f64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f8ce 	bl	800a11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d101      	bne.n	8009fba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	e02d      	b.n	800a016 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2224      	movs	r2, #36	; 0x24
 8009fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0201 	bic.w	r2, r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f890 	bl	800a11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2220      	movs	r2, #32
 800a008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b08c      	sub	sp, #48	; 0x30
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	4613      	mov	r3, r2
 800a02a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a032:	2b20      	cmp	r3, #32
 800a034:	d14a      	bne.n	800a0cc <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e043      	b.n	800a0ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800a050:	2302      	movs	r3, #2
 800a052:	e03c      	b.n	800a0ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a062:	88fb      	ldrh	r3, [r7, #6]
 800a064:	461a      	mov	r2, r3
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7fe ff0d 	bl	8008e88 <UART_Start_Receive_DMA>
 800a06e:	4603      	mov	r3, r0
 800a070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d124      	bne.n	800a0c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a080:	2b01      	cmp	r3, #1
 800a082:	d11d      	bne.n	800a0c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2210      	movs	r2, #16
 800a08a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	617b      	str	r3, [r7, #20]
   return(result);
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f043 0310 	orr.w	r3, r3, #16
 800a0a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ac:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6a39      	ldr	r1, [r7, #32]
 800a0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e6      	bne.n	800a08c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a0be:	e002      	b.n	800a0c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0ca:	e000      	b.n	800a0ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800a0cc:	2302      	movs	r3, #2
  }
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3730      	adds	r7, #48	; 0x30
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	1d3b      	adds	r3, r7, #4
 800a0e0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f023 0210 	bic.w	r2, r3, #16
 800a0ee:	893b      	ldrh	r3, [r7, #8]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a104:	7abb      	ldrb	r3, [r7, #10]
 800a106:	061a      	lsls	r2, r3, #24
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	605a      	str	r2, [r3, #4]
}
 800a110:	bf00      	nop
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	bc80      	pop	{r7}
 800a118:	4770      	bx	lr
	...

0800a11c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d108      	bne.n	800a13e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a13c:	e031      	b.n	800a1a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a13e:	2308      	movs	r3, #8
 800a140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a142:	2308      	movs	r3, #8
 800a144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	0e5b      	lsrs	r3, r3, #25
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	f003 0307 	and.w	r3, r3, #7
 800a154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	0f5b      	lsrs	r3, r3, #29
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	f003 0307 	and.w	r3, r3, #7
 800a164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	7b3a      	ldrb	r2, [r7, #12]
 800a16a:	4910      	ldr	r1, [pc, #64]	; (800a1ac <UARTEx_SetNbDataToProcess+0x90>)
 800a16c:	5c8a      	ldrb	r2, [r1, r2]
 800a16e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a172:	7b3a      	ldrb	r2, [r7, #12]
 800a174:	490e      	ldr	r1, [pc, #56]	; (800a1b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a178:	fb93 f3f2 	sdiv	r3, r3, r2
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	7b7a      	ldrb	r2, [r7, #13]
 800a188:	4908      	ldr	r1, [pc, #32]	; (800a1ac <UARTEx_SetNbDataToProcess+0x90>)
 800a18a:	5c8a      	ldrb	r2, [r1, r2]
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a190:	7b7a      	ldrb	r2, [r7, #13]
 800a192:	4907      	ldr	r1, [pc, #28]	; (800a1b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a196:	fb93 f3f2 	sdiv	r3, r3, r2
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1a2:	bf00      	nop
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bc80      	pop	{r7}
 800a1aa:	4770      	bx	lr
 800a1ac:	0801be10 	.word	0x0801be10
 800a1b0:	0801be18 	.word	0x0801be18

0800a1b4 <CayenneLppReset>:

  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	af00      	add	r7, sp, #0
  CayenneLppCursor = 0;
 800a1b8:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <CayenneLppReset+0x14>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 800a1be:	bf00      	nop
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	2000059e 	.word	0x2000059e

0800a1cc <CayenneLppGetSize>:

uint8_t CayenneLppGetSize(void)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <CayenneLppGetSize+0x10>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr
 800a1dc:	2000059e 	.word	0x2000059e

0800a1e0 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <CayenneLppCopy+0x24>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	4905      	ldr	r1, [pc, #20]	; (800a208 <CayenneLppCopy+0x28>)
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f00f ff8a 	bl	801a10c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <CayenneLppCopy+0x24>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	2000059e 	.word	0x2000059e
 800a208:	200004ac 	.word	0x200004ac

0800a20c <CayenneLppAddDigitalInput>:

uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	460a      	mov	r2, r1
 800a216:	71fb      	strb	r3, [r7, #7]
 800a218:	4613      	mov	r3, r2
 800a21a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a21c:	4b15      	ldr	r3, [pc, #84]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2bef      	cmp	r3, #239	; 0xef
 800a222:	d901      	bls.n	800a228 <CayenneLppAddDigitalInput+0x1c>
  {
    return 0;
 800a224:	2300      	movs	r3, #0
 800a226:	e01f      	b.n	800a268 <CayenneLppAddDigitalInput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a228:	4b12      	ldr	r3, [pc, #72]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	b2d1      	uxtb	r1, r2
 800a230:	4a10      	ldr	r2, [pc, #64]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a232:	7011      	strb	r1, [r2, #0]
 800a234:	4619      	mov	r1, r3
 800a236:	4a10      	ldr	r2, [pc, #64]	; (800a278 <CayenneLppAddDigitalInput+0x6c>)
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 800a23c:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	b2d1      	uxtb	r1, r2
 800a244:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a246:	7011      	strb	r1, [r2, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <CayenneLppAddDigitalInput+0x6c>)
 800a24c:	2100      	movs	r1, #0
 800a24e:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a250:	4b08      	ldr	r3, [pc, #32]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	b2d1      	uxtb	r1, r2
 800a258:	4a06      	ldr	r2, [pc, #24]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a25a:	7011      	strb	r1, [r2, #0]
 800a25c:	4619      	mov	r1, r3
 800a25e:	4a06      	ldr	r2, [pc, #24]	; (800a278 <CayenneLppAddDigitalInput+0x6c>)
 800a260:	79bb      	ldrb	r3, [r7, #6]
 800a262:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
 800a264:	4b03      	ldr	r3, [pc, #12]	; (800a274 <CayenneLppAddDigitalInput+0x68>)
 800a266:	781b      	ldrb	r3, [r3, #0]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bc80      	pop	{r7}
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	2000059e 	.word	0x2000059e
 800a278:	200004ac 	.word	0x200004ac

0800a27c <CayenneLppAddDigitalOutput>:

uint8_t CayenneLppAddDigitalOutput(uint8_t channel, uint8_t value)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	460a      	mov	r2, r1
 800a286:	71fb      	strb	r3, [r7, #7]
 800a288:	4613      	mov	r3, r2
 800a28a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_1 */

  /* USER CODE END CayenneLppAddDigitalOutput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a28c:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2bef      	cmp	r3, #239	; 0xef
 800a292:	d901      	bls.n	800a298 <CayenneLppAddDigitalOutput+0x1c>
  {
    return 0;
 800a294:	2300      	movs	r3, #0
 800a296:	e01f      	b.n	800a2d8 <CayenneLppAddDigitalOutput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a298:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	b2d1      	uxtb	r1, r2
 800a2a0:	4a10      	ldr	r2, [pc, #64]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a2a2:	7011      	strb	r1, [r2, #0]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4a10      	ldr	r2, [pc, #64]	; (800a2e8 <CayenneLppAddDigitalOutput+0x6c>)
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_OUTPUT;
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	b2d1      	uxtb	r1, r2
 800a2b4:	4a0b      	ldr	r2, [pc, #44]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a2b6:	7011      	strb	r1, [r2, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <CayenneLppAddDigitalOutput+0x6c>)
 800a2bc:	2101      	movs	r1, #1
 800a2be:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a2c0:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	b2d1      	uxtb	r1, r2
 800a2c8:	4a06      	ldr	r2, [pc, #24]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a2ca:	7011      	strb	r1, [r2, #0]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4a06      	ldr	r2, [pc, #24]	; (800a2e8 <CayenneLppAddDigitalOutput+0x6c>)
 800a2d0:	79bb      	ldrb	r3, [r7, #6]
 800a2d2:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_2 */

  /* USER CODE END CayenneLppAddDigitalOutput_2 */
  return CayenneLppCursor;
 800a2d4:	4b03      	ldr	r3, [pc, #12]	; (800a2e4 <CayenneLppAddDigitalOutput+0x68>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	2000059e 	.word	0x2000059e
 800a2e8:	200004ac 	.word	0x200004ac

0800a2ec <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, float celsius)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a2f8:	4b21      	ldr	r3, [pc, #132]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2bee      	cmp	r3, #238	; 0xee
 800a2fe:	d901      	bls.n	800a304 <CayenneLppAddTemperature+0x18>
  {
    return 0;
 800a300:	2300      	movs	r3, #0
 800a302:	e038      	b.n	800a376 <CayenneLppAddTemperature+0x8a>
  }
  int16_t val = (int16_t)(celsius * 10);
 800a304:	491f      	ldr	r1, [pc, #124]	; (800a384 <CayenneLppAddTemperature+0x98>)
 800a306:	6838      	ldr	r0, [r7, #0]
 800a308:	f7f5 ff3e 	bl	8000188 <__aeabi_fmul>
 800a30c:	4603      	mov	r3, r0
 800a30e:	4618      	mov	r0, r3
 800a310:	f7f6 fb68 	bl	80009e4 <__aeabi_f2iz>
 800a314:	4603      	mov	r3, r0
 800a316:	81fb      	strh	r3, [r7, #14]
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a318:	4b19      	ldr	r3, [pc, #100]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	b2d1      	uxtb	r1, r2
 800a320:	4a17      	ldr	r2, [pc, #92]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a322:	7011      	strb	r1, [r2, #0]
 800a324:	4619      	mov	r1, r3
 800a326:	4a18      	ldr	r2, [pc, #96]	; (800a388 <CayenneLppAddTemperature+0x9c>)
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 800a32c:	4b14      	ldr	r3, [pc, #80]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	b2d1      	uxtb	r1, r2
 800a334:	4a12      	ldr	r2, [pc, #72]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a336:	7011      	strb	r1, [r2, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <CayenneLppAddTemperature+0x9c>)
 800a33c:	2167      	movs	r1, #103	; 0x67
 800a33e:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800a340:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a344:	121b      	asrs	r3, r3, #8
 800a346:	b219      	sxth	r1, r3
 800a348:	4b0d      	ldr	r3, [pc, #52]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	b2d0      	uxtb	r0, r2
 800a350:	4a0b      	ldr	r2, [pc, #44]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a352:	7010      	strb	r0, [r2, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	b2c9      	uxtb	r1, r1
 800a358:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <CayenneLppAddTemperature+0x9c>)
 800a35a:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 800a35c:	4b08      	ldr	r3, [pc, #32]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	b2d1      	uxtb	r1, r2
 800a364:	4a06      	ldr	r2, [pc, #24]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a366:	7011      	strb	r1, [r2, #0]
 800a368:	461a      	mov	r2, r3
 800a36a:	89fb      	ldrh	r3, [r7, #14]
 800a36c:	b2d9      	uxtb	r1, r3
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <CayenneLppAddTemperature+0x9c>)
 800a370:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <CayenneLppAddTemperature+0x94>)
 800a374:	781b      	ldrb	r3, [r3, #0]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	2000059e 	.word	0x2000059e
 800a384:	41200000 	.word	0x41200000
 800a388:	200004ac 	.word	0x200004ac

0800a38c <CayenneLppAddRelativeHumidity>:

uint8_t CayenneLppAddRelativeHumidity(uint8_t channel, float rh)
{
 800a38c:	b590      	push	{r4, r7, lr}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_1 */

  /* USER CODE END CayenneLppAddRelativeHumidity_1 */
  if ((CayenneLppCursor + LPP_RELATIVE_HUMIDITY_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a398:	4b19      	ldr	r3, [pc, #100]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2bef      	cmp	r3, #239	; 0xef
 800a39e:	d901      	bls.n	800a3a4 <CayenneLppAddRelativeHumidity+0x18>
  {
    return 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e029      	b.n	800a3f8 <CayenneLppAddRelativeHumidity+0x6c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a3a4:	4b16      	ldr	r3, [pc, #88]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	b2d1      	uxtb	r1, r2
 800a3ac:	4a14      	ldr	r2, [pc, #80]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a3ae:	7011      	strb	r1, [r2, #0]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4a14      	ldr	r2, [pc, #80]	; (800a404 <CayenneLppAddRelativeHumidity+0x78>)
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_RELATIVE_HUMIDITY;
 800a3b8:	4b11      	ldr	r3, [pc, #68]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	b2d1      	uxtb	r1, r2
 800a3c0:	4a0f      	ldr	r2, [pc, #60]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a3c2:	7011      	strb	r1, [r2, #0]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <CayenneLppAddRelativeHumidity+0x78>)
 800a3c8:	2168      	movs	r1, #104	; 0x68
 800a3ca:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = (uint8_t)(rh * 2);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f6 f9ff 	bl	80007d4 <__addsf3>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4618      	mov	r0, r3
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	1c5a      	adds	r2, r3, #1
 800a3e0:	b2d1      	uxtb	r1, r2
 800a3e2:	4a07      	ldr	r2, [pc, #28]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a3e4:	7011      	strb	r1, [r2, #0]
 800a3e6:	461c      	mov	r4, r3
 800a3e8:	f7f6 fb22 	bl	8000a30 <__aeabi_f2uiz>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <CayenneLppAddRelativeHumidity+0x78>)
 800a3f2:	551a      	strb	r2, [r3, r4]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_2 */

  /* USER CODE END CayenneLppAddRelativeHumidity_2 */
  return CayenneLppCursor;
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <CayenneLppAddRelativeHumidity+0x74>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd90      	pop	{r4, r7, pc}
 800a400:	2000059e 	.word	0x2000059e
 800a404:	200004ac 	.word	0x200004ac

0800a408 <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, float hpa)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a414:	4b21      	ldr	r3, [pc, #132]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2bee      	cmp	r3, #238	; 0xee
 800a41a:	d901      	bls.n	800a420 <CayenneLppAddBarometricPressure+0x18>
  {
    return 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	e038      	b.n	800a492 <CayenneLppAddBarometricPressure+0x8a>
  }
  int16_t val = (int16_t)(hpa * 10);
 800a420:	491f      	ldr	r1, [pc, #124]	; (800a4a0 <CayenneLppAddBarometricPressure+0x98>)
 800a422:	6838      	ldr	r0, [r7, #0]
 800a424:	f7f5 feb0 	bl	8000188 <__aeabi_fmul>
 800a428:	4603      	mov	r3, r0
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7f6 fada 	bl	80009e4 <__aeabi_f2iz>
 800a430:	4603      	mov	r3, r0
 800a432:	81fb      	strh	r3, [r7, #14]

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a434:	4b19      	ldr	r3, [pc, #100]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	b2d1      	uxtb	r1, r2
 800a43c:	4a17      	ldr	r2, [pc, #92]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a43e:	7011      	strb	r1, [r2, #0]
 800a440:	4619      	mov	r1, r3
 800a442:	4a18      	ldr	r2, [pc, #96]	; (800a4a4 <CayenneLppAddBarometricPressure+0x9c>)
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 800a448:	4b14      	ldr	r3, [pc, #80]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	b2d1      	uxtb	r1, r2
 800a450:	4a12      	ldr	r2, [pc, #72]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a452:	7011      	strb	r1, [r2, #0]
 800a454:	461a      	mov	r2, r3
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <CayenneLppAddBarometricPressure+0x9c>)
 800a458:	2173      	movs	r1, #115	; 0x73
 800a45a:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800a45c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a460:	121b      	asrs	r3, r3, #8
 800a462:	b219      	sxth	r1, r3
 800a464:	4b0d      	ldr	r3, [pc, #52]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	b2d0      	uxtb	r0, r2
 800a46c:	4a0b      	ldr	r2, [pc, #44]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a46e:	7010      	strb	r0, [r2, #0]
 800a470:	461a      	mov	r2, r3
 800a472:	b2c9      	uxtb	r1, r1
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <CayenneLppAddBarometricPressure+0x9c>)
 800a476:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 800a478:	4b08      	ldr	r3, [pc, #32]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	b2d1      	uxtb	r1, r2
 800a480:	4a06      	ldr	r2, [pc, #24]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a482:	7011      	strb	r1, [r2, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	89fb      	ldrh	r3, [r7, #14]
 800a488:	b2d9      	uxtb	r1, r3
 800a48a:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <CayenneLppAddBarometricPressure+0x9c>)
 800a48c:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
 800a48e:	4b03      	ldr	r3, [pc, #12]	; (800a49c <CayenneLppAddBarometricPressure+0x94>)
 800a490:	781b      	ldrb	r3, [r3, #0]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	2000059e 	.word	0x2000059e
 800a4a0:	41200000 	.word	0x41200000
 800a4a4:	200004ac 	.word	0x200004ac

0800a4a8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a4ac:	f7f7 facc 	bl	8001a48 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a4b0:	f000 f820 	bl	800a4f4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a4b4:	bf00      	nop
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	f010 fa26 	bl	801a910 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a4c4:	bf00      	nop
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a4cc:	f3bf 8f4f 	dsb	sy
}
 800a4d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a4d2:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <__NVIC_SystemReset+0x24>)
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a4da:	4904      	ldr	r1, [pc, #16]	; (800a4ec <__NVIC_SystemReset+0x24>)
 800a4dc:	4b04      	ldr	r3, [pc, #16]	; (800a4f0 <__NVIC_SystemReset+0x28>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4e2:	f3bf 8f4f 	dsb	sy
}
 800a4e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a4e8:	bf00      	nop
 800a4ea:	e7fd      	b.n	800a4e8 <__NVIC_SystemReset+0x20>
 800a4ec:	e000ed00 	.word	0xe000ed00
 800a4f0:	05fa0004 	.word	0x05fa0004

0800a4f4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	607b      	str	r3, [r7, #4]
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a4fe:	1d3b      	adds	r3, r7, #4
 800a500:	4619      	mov	r1, r3
 800a502:	2000      	movs	r0, #0
 800a504:	f002 fef8 	bl	800d2f8 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a508:	1d3b      	adds	r3, r7, #4
 800a50a:	4619      	mov	r1, r3
 800a50c:	2001      	movs	r0, #1
 800a50e:	f002 fef3 	bl	800d2f8 <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a512:	2300      	movs	r3, #0
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	4b2f      	ldr	r3, [pc, #188]	; (800a5d4 <LoRaWAN_Init+0xe0>)
 800a518:	2200      	movs	r2, #0
 800a51a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a51e:	482e      	ldr	r0, [pc, #184]	; (800a5d8 <LoRaWAN_Init+0xe4>)
 800a520:	f010 fb96 	bl	801ac50 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a524:	2300      	movs	r3, #0
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	4b2c      	ldr	r3, [pc, #176]	; (800a5dc <LoRaWAN_Init+0xe8>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a530:	482b      	ldr	r0, [pc, #172]	; (800a5e0 <LoRaWAN_Init+0xec>)
 800a532:	f010 fb8d 	bl	801ac50 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a536:	2300      	movs	r3, #0
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	4b2a      	ldr	r3, [pc, #168]	; (800a5e4 <LoRaWAN_Init+0xf0>)
 800a53c:	2201      	movs	r2, #1
 800a53e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a542:	4829      	ldr	r0, [pc, #164]	; (800a5e8 <LoRaWAN_Init+0xf4>)
 800a544:	f010 fb84 	bl	801ac50 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a548:	2300      	movs	r3, #0
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	4b27      	ldr	r3, [pc, #156]	; (800a5ec <LoRaWAN_Init+0xf8>)
 800a54e:	2200      	movs	r2, #0
 800a550:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a554:	4826      	ldr	r0, [pc, #152]	; (800a5f0 <LoRaWAN_Init+0xfc>)
 800a556:	f010 fb7b 	bl	801ac50 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a55a:	4a26      	ldr	r2, [pc, #152]	; (800a5f4 <LoRaWAN_Init+0x100>)
 800a55c:	2100      	movs	r1, #0
 800a55e:	2001      	movs	r0, #1
 800a560:	f010 fad2 	bl	801ab08 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a564:	4a24      	ldr	r2, [pc, #144]	; (800a5f8 <LoRaWAN_Init+0x104>)
 800a566:	2100      	movs	r1, #0
 800a568:	2002      	movs	r0, #2
 800a56a:	f010 facd 	bl	801ab08 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a56e:	4a23      	ldr	r2, [pc, #140]	; (800a5fc <LoRaWAN_Init+0x108>)
 800a570:	2100      	movs	r1, #0
 800a572:	2004      	movs	r0, #4
 800a574:	f010 fac8 	bl	801ab08 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a578:	4a21      	ldr	r2, [pc, #132]	; (800a600 <LoRaWAN_Init+0x10c>)
 800a57a:	2100      	movs	r1, #0
 800a57c:	2008      	movs	r0, #8
 800a57e:	f010 fac3 	bl	801ab08 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a582:	f000 faf3 	bl	800ab6c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a586:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800a58a:	481e      	ldr	r0, [pc, #120]	; (800a604 <LoRaWAN_Init+0x110>)
 800a58c:	f001 ffbe 	bl	800c50c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a590:	481d      	ldr	r0, [pc, #116]	; (800a608 <LoRaWAN_Init+0x114>)
 800a592:	f002 f807 	bl	800c5a4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a596:	4814      	ldr	r0, [pc, #80]	; (800a5e8 <LoRaWAN_Init+0xf4>)
 800a598:	f010 fb90 	bl	801acbc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a59c:	4b1b      	ldr	r3, [pc, #108]	; (800a60c <LoRaWAN_Init+0x118>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	4a1b      	ldr	r2, [pc, #108]	; (800a610 <LoRaWAN_Init+0x11c>)
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f002 f94e 	bl	800c848 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a5ac:	4b19      	ldr	r3, [pc, #100]	; (800a614 <LoRaWAN_Init+0x120>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10b      	bne.n	800a5cc <LoRaWAN_Init+0xd8>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a5b4:	4b18      	ldr	r3, [pc, #96]	; (800a618 <LoRaWAN_Init+0x124>)
 800a5b6:	6819      	ldr	r1, [r3, #0]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	4b17      	ldr	r3, [pc, #92]	; (800a61c <LoRaWAN_Init+0x128>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4817      	ldr	r0, [pc, #92]	; (800a620 <LoRaWAN_Init+0x12c>)
 800a5c2:	f010 fb45 	bl	801ac50 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a5c6:	4816      	ldr	r0, [pc, #88]	; (800a620 <LoRaWAN_Init+0x12c>)
 800a5c8:	f010 fb78 	bl	801acbc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	0800a8a9 	.word	0x0800a8a9
 800a5d8:	200006c4 	.word	0x200006c4
 800a5dc:	0800a8bb 	.word	0x0800a8bb
 800a5e0:	200006dc 	.word	0x200006dc
 800a5e4:	0800a8cd 	.word	0x0800a8cd
 800a5e8:	200006f4 	.word	0x200006f4
 800a5ec:	0800aa91 	.word	0x0800aa91
 800a5f0:	200005b8 	.word	0x200005b8
 800a5f4:	0800c825 	.word	0x0800c825
 800a5f8:	0800a725 	.word	0x0800a725
 800a5fc:	0800aab5 	.word	0x0800aab5
 800a600:	0800aa45 	.word	0x0800aa45
 800a604:	20000010 	.word	0x20000010
 800a608:	2000005c 	.word	0x2000005c
 800a60c:	2000000c 	.word	0x2000000c
 800a610:	2000000d 	.word	0x2000000d
 800a614:	2000059f 	.word	0x2000059f
 800a618:	20000070 	.word	0x20000070
 800a61c:	0800a885 	.word	0x0800a885
 800a620:	200005a0 	.word	0x200005a0

0800a624 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a634:	d104      	bne.n	800a640 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a636:	2100      	movs	r1, #0
 800a638:	2002      	movs	r0, #2
 800a63a:	f010 fa87 	bl	801ab4c <UTIL_SEQ_SetTask>
      }
      break;
 800a63e:	e000      	b.n	800a642 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a640:	bf00      	nop
  }
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d057      	beq.n	800a710 <OnRxData+0xc4>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a660:	482d      	ldr	r0, [pc, #180]	; (800a718 <OnRxData+0xcc>)
 800a662:	f010 fb2b 	bl	801acbc <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d04b      	beq.n	800a706 <OnRxData+0xba>
    {
      if (appData != NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d048      	beq.n	800a706 <OnRxData+0xba>
      {
        RxPort = appData->Port;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d041      	beq.n	800a706 <OnRxData+0xba>
        {
    switch (appData->Port)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b02      	cmp	r3, #2
 800a688:	d021      	beq.n	800a6ce <OnRxData+0x82>
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d13d      	bne.n	800a70a <OnRxData+0xbe>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d117      	bne.n	800a6c6 <OnRxData+0x7a>
        {
          switch (appData->Buffer[0])
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d00e      	beq.n	800a6be <OnRxData+0x72>
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	dc12      	bgt.n	800a6ca <OnRxData+0x7e>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <OnRxData+0x62>
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d004      	beq.n	800a6b6 <OnRxData+0x6a>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a6ac:	e00d      	b.n	800a6ca <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_A);
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f002 fa66 	bl	800cb80 <LmHandlerRequestClass>
              break;
 800a6b4:	e00a      	b.n	800a6cc <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_B);
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	f002 fa62 	bl	800cb80 <LmHandlerRequestClass>
              break;
 800a6bc:	e006      	b.n	800a6cc <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_C);
 800a6be:	2002      	movs	r0, #2
 800a6c0:	f002 fa5e 	bl	800cb80 <LmHandlerRequestClass>
              break;
 800a6c4:	e002      	b.n	800a6cc <OnRxData+0x80>
          }
        }
 800a6c6:	bf00      	nop
 800a6c8:	e022      	b.n	800a710 <OnRxData+0xc4>
              break;
 800a6ca:	bf00      	nop
        break;
 800a6cc:	e020      	b.n	800a710 <OnRxData+0xc4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	785b      	ldrb	r3, [r3, #1]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d11b      	bne.n	800a70e <OnRxData+0xc2>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	4b0e      	ldr	r3, [pc, #56]	; (800a71c <OnRxData+0xd0>)
 800a6e4:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <OnRxData+0xd0>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d105      	bne.n	800a6fa <OnRxData+0xae>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	2120      	movs	r1, #32
 800a6f2:	480b      	ldr	r0, [pc, #44]	; (800a720 <OnRxData+0xd4>)
 800a6f4:	f7fa fdde 	bl	80052b4 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800a6f8:	e009      	b.n	800a70e <OnRxData+0xc2>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2120      	movs	r1, #32
 800a6fe:	4808      	ldr	r0, [pc, #32]	; (800a720 <OnRxData+0xd4>)
 800a700:	f7fa fdd8 	bl	80052b4 <HAL_GPIO_WritePin>
        break;
 800a704:	e003      	b.n	800a70e <OnRxData+0xc2>

      default:

        break;
    }
  }
 800a706:	bf00      	nop
 800a708:	e002      	b.n	800a710 <OnRxData+0xc4>
        break;
 800a70a:	bf00      	nop
 800a70c:	e000      	b.n	800a710 <OnRxData+0xc4>
        break;
 800a70e:	bf00      	nop
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a710:	bf00      	nop
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	200006dc 	.word	0x200006dc
 800a71c:	200006c2 	.word	0x200006c2
 800a720:	48000400 	.word	0x48000400

0800a724 <SendTxData>:

static void SendTxData(void)
{
 800a724:	b590      	push	{r4, r7, lr}
 800a726:	b089      	sub	sp, #36	; 0x24
 800a728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a72a:	23ff      	movs	r3, #255	; 0xff
 800a72c:	76fb      	strb	r3, [r7, #27]
  uint8_t batteryLevel = GetBatteryLevel();
 800a72e:	f7f7 f9bf 	bl	8001ab0 <GetBatteryLevel>
 800a732:	4603      	mov	r3, r0
 800a734:	76bb      	strb	r3, [r7, #26]
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	61fb      	str	r3, [r7, #28]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	767b      	strb	r3, [r7, #25]
  int32_t latitude = 0;
  int32_t longitude = 0;
  uint16_t altitudeGps = 0;
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a73e:	463b      	mov	r3, r7
 800a740:	4618      	mov	r0, r3
 800a742:	f7f7 fb8d 	bl	8001e60 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a746:	4b47      	ldr	r3, [pc, #284]	; (800a864 <SendTxData+0x140>)
 800a748:	2202      	movs	r2, #2
 800a74a:	701a      	strb	r2, [r3, #0]

#ifdef CAYENNE_LPP
  CayenneLppReset();
 800a74c:	f7ff fd32 	bl	800a1b4 <CayenneLppReset>
  CayenneLppAddBarometricPressure(channel++, sensor_data.pressure);
 800a750:	7e7b      	ldrb	r3, [r7, #25]
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	767a      	strb	r2, [r7, #25]
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff fe54 	bl	800a408 <CayenneLppAddBarometricPressure>
  CayenneLppAddTemperature(channel++, PM2_5);// sensor_data.temperature);
 800a760:	7e7c      	ldrb	r4, [r7, #25]
 800a762:	1c63      	adds	r3, r4, #1
 800a764:	767b      	strb	r3, [r7, #25]
 800a766:	4b40      	ldr	r3, [pc, #256]	; (800a868 <SendTxData+0x144>)
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7f6 f8e2 	bl	8000934 <__aeabi_ui2f>
 800a770:	4603      	mov	r3, r0
 800a772:	4619      	mov	r1, r3
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff fdb9 	bl	800a2ec <CayenneLppAddTemperature>
  CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));
 800a77a:	7e7c      	ldrb	r4, [r7, #25]
 800a77c:	1c63      	adds	r3, r4, #1
 800a77e:	767b      	strb	r3, [r7, #25]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4618      	mov	r0, r3
 800a784:	f7f6 f954 	bl	8000a30 <__aeabi_f2uiz>
 800a788:	4603      	mov	r3, r0
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f6 f8d1 	bl	8000934 <__aeabi_ui2f>
 800a792:	4603      	mov	r3, r0
 800a794:	4619      	mov	r1, r3
 800a796:	4620      	mov	r0, r4
 800a798:	f7ff fdf8 	bl	800a38c <CayenneLppAddRelativeHumidity>

  if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 800a79c:	4b33      	ldr	r3, [pc, #204]	; (800a86c <SendTxData+0x148>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b08      	cmp	r3, #8
 800a7a2:	d01a      	beq.n	800a7da <SendTxData+0xb6>
 800a7a4:	4b31      	ldr	r3, [pc, #196]	; (800a86c <SendTxData+0x148>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d016      	beq.n	800a7da <SendTxData+0xb6>
      && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 800a7ac:	4b2f      	ldr	r3, [pc, #188]	; (800a86c <SendTxData+0x148>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d012      	beq.n	800a7da <SendTxData+0xb6>
  {
    CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 800a7b4:	7e7c      	ldrb	r4, [r7, #25]
 800a7b6:	1c63      	adds	r3, r4, #1
 800a7b8:	767b      	strb	r3, [r7, #25]
 800a7ba:	f7f7 f979 	bl	8001ab0 <GetBatteryLevel>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff fd22 	bl	800a20c <CayenneLppAddDigitalInput>
    CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
 800a7c8:	7e7b      	ldrb	r3, [r7, #25]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	767a      	strb	r2, [r7, #25]
 800a7ce:	4a28      	ldr	r2, [pc, #160]	; (800a870 <SendTxData+0x14c>)
 800a7d0:	7812      	ldrb	r2, [r2, #0]
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fd51 	bl	800a27c <CayenneLppAddDigitalOutput>
  }

  CayenneLppCopy(AppData.Buffer);
 800a7da:	4b22      	ldr	r3, [pc, #136]	; (800a864 <SendTxData+0x140>)
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fcfe 	bl	800a1e0 <CayenneLppCopy>
  AppData.BufferSize = CayenneLppGetSize();
 800a7e4:	f7ff fcf2 	bl	800a1cc <CayenneLppGetSize>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	4b1d      	ldr	r3, [pc, #116]	; (800a864 <SendTxData+0x140>)
 800a7ee:	705a      	strb	r2, [r3, #1]
  }

  AppData.BufferSize = i;
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a7f0:	4b20      	ldr	r3, [pc, #128]	; (800a874 <SendTxData+0x150>)
 800a7f2:	7a5b      	ldrb	r3, [r3, #9]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d007      	beq.n	800a808 <SendTxData+0xe4>
 800a7f8:	f002 f8a6 	bl	800c948 <LmHandlerJoinStatus>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d102      	bne.n	800a808 <SendTxData+0xe4>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a802:	481c      	ldr	r0, [pc, #112]	; (800a874 <SendTxData+0x150>)
 800a804:	f010 fac8 	bl	801ad98 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a808:	4b18      	ldr	r3, [pc, #96]	; (800a86c <SendTxData+0x148>)
 800a80a:	78db      	ldrb	r3, [r3, #3]
 800a80c:	2200      	movs	r2, #0
 800a80e:	4619      	mov	r1, r3
 800a810:	4814      	ldr	r0, [pc, #80]	; (800a864 <SendTxData+0x140>)
 800a812:	f002 f8b5 	bl	800c980 <LmHandlerSend>
 800a816:	4603      	mov	r3, r0
 800a818:	76fb      	strb	r3, [r7, #27]
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a81a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d007      	beq.n	800a832 <SendTxData+0x10e>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a822:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a826:	f113 0f06 	cmn.w	r3, #6
 800a82a:	d102      	bne.n	800a832 <SendTxData+0x10e>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a82c:	f002 f802 	bl	800c834 <LmHandlerGetDutyCycleWaitTime>
 800a830:	61f8      	str	r0, [r7, #28]
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  }

  if (EventType == TX_ON_TIMER)
 800a832:	4b11      	ldr	r3, [pc, #68]	; (800a878 <SendTxData+0x154>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10f      	bne.n	800a85a <SendTxData+0x136>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a83a:	4810      	ldr	r0, [pc, #64]	; (800a87c <SendTxData+0x158>)
 800a83c:	f010 faac 	bl	801ad98 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a840:	4b0f      	ldr	r3, [pc, #60]	; (800a880 <SendTxData+0x15c>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	4293      	cmp	r3, r2
 800a848:	bf38      	it	cc
 800a84a:	4613      	movcc	r3, r2
 800a84c:	4619      	mov	r1, r3
 800a84e:	480b      	ldr	r0, [pc, #44]	; (800a87c <SendTxData+0x158>)
 800a850:	f010 fb12 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a854:	4809      	ldr	r0, [pc, #36]	; (800a87c <SendTxData+0x158>)
 800a856:	f010 fa31 	bl	801acbc <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a85a:	bf00      	nop
 800a85c:	3724      	adds	r7, #36	; 0x24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd90      	pop	{r4, r7, pc}
 800a862:	bf00      	nop
 800a864:	20000074 	.word	0x20000074
 800a868:	200001f8 	.word	0x200001f8
 800a86c:	2000005c 	.word	0x2000005c
 800a870:	200006c2 	.word	0x200006c2
 800a874:	200006f4 	.word	0x200006f4
 800a878:	2000059f 	.word	0x2000059f
 800a87c:	200005a0 	.word	0x200005a0
 800a880:	20000070 	.word	0x20000070

0800a884 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a88c:	2100      	movs	r1, #0
 800a88e:	2002      	movs	r0, #2
 800a890:	f010 f95c 	bl	801ab4c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a894:	4803      	ldr	r0, [pc, #12]	; (800a8a4 <OnTxTimerEvent+0x20>)
 800a896:	f010 fa11 	bl	801acbc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200005a0 	.word	0x200005a0

0800a8a8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bc80      	pop	{r7}
 800a8b8:	4770      	bx	lr

0800a8ba <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a8c2:	bf00      	nop
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bc80      	pop	{r7}
 800a8ca:	4770      	bx	lr

0800a8cc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d006      	beq.n	800a8fc <OnTxData+0x1c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <OnTxData+0x1c>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a8f6:	4803      	ldr	r0, [pc, #12]	; (800a904 <OnTxData+0x24>)
 800a8f8:	f010 f9e0 	bl	801acbc <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	200006c4 	.word	0x200006c4

0800a908 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d012      	beq.n	800a93c <OnJoinRequest+0x34>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d103      	bne.n	800a928 <OnJoinRequest+0x20>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a920:	4808      	ldr	r0, [pc, #32]	; (800a944 <OnJoinRequest+0x3c>)
 800a922:	f010 fa39 	bl	801ad98 <UTIL_TIMER_Stop>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a926:	e009      	b.n	800a93c <OnJoinRequest+0x34>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	799b      	ldrb	r3, [r3, #6]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d105      	bne.n	800a93c <OnJoinRequest+0x34>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <OnJoinRequest+0x40>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2101      	movs	r1, #1
 800a936:	4618      	mov	r0, r3
 800a938:	f001 ff86 	bl	800c848 <LmHandlerJoin>
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	200006f4 	.word	0x200006f4
 800a948:	2000000c 	.word	0x2000000c

0800a94c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d005      	beq.n	800a966 <OnBeaconStatusChange+0x1a>
  {
    switch (params->State)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	785b      	ldrb	r3, [r3, #1]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d003      	beq.n	800a96a <OnBeaconStatusChange+0x1e>
 800a962:	2b03      	cmp	r3, #3
        break;
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
        break;
 800a964:	e002      	b.n	800a96c <OnBeaconStatusChange+0x20>
      }
    }
  }
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <OnBeaconStatusChange+0x20>
        break;
 800a96a:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	bc80      	pop	{r7}
 800a974:	4770      	bx	lr

0800a976 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	4603      	mov	r3, r0
 800a97e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	bc80      	pop	{r7}
 800a988:	4770      	bx	lr

0800a98a <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a98e:	2100      	movs	r1, #0
 800a990:	2001      	movs	r0, #1
 800a992:	f010 f8db 	bl	801ab4c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a996:	bf00      	nop
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a9a4:	4a0d      	ldr	r2, [pc, #52]	; (800a9dc <OnTxPeriodicityChanged+0x40>)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <OnTxPeriodicityChanged+0x40>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d103      	bne.n	800a9ba <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <OnTxPeriodicityChanged+0x40>)
 800a9b4:	f242 7210 	movw	r2, #10000	; 0x2710
 800a9b8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a9ba:	4809      	ldr	r0, [pc, #36]	; (800a9e0 <OnTxPeriodicityChanged+0x44>)
 800a9bc:	f010 f9ec 	bl	801ad98 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a9c0:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <OnTxPeriodicityChanged+0x40>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4806      	ldr	r0, [pc, #24]	; (800a9e0 <OnTxPeriodicityChanged+0x44>)
 800a9c8:	f010 fa56 	bl	801ae78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a9cc:	4804      	ldr	r0, [pc, #16]	; (800a9e0 <OnTxPeriodicityChanged+0x44>)
 800a9ce:	f010 f975 	bl	801acbc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a9d2:	bf00      	nop
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20000070 	.word	0x20000070
 800a9e0:	200005a0 	.word	0x200005a0

0800a9e4 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a9ee:	4a04      	ldr	r2, [pc, #16]	; (800aa00 <OnTxFrameCtrlChanged+0x1c>)
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bc80      	pop	{r7}
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	2000005c 	.word	0x2000005c

0800aa04 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800aa0e:	4a04      	ldr	r2, [pc, #16]	; (800aa20 <OnPingSlotPeriodicityChanged+0x1c>)
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bc80      	pop	{r7}
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	2000005c 	.word	0x2000005c

0800aa24 <OnSystemReset>:

static void OnSystemReset(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800aa28:	f002 fc97 	bl	800d35a <LmHandlerHalt>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <OnSystemReset+0x1c>
 800aa32:	f001 ff89 	bl	800c948 <LmHandlerJoinStatus>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d101      	bne.n	800aa40 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800aa3c:	f7ff fd44 	bl	800a4c8 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800aa40:	bf00      	nop
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <StopJoin>:

static void StopJoin(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800aa48:	480d      	ldr	r0, [pc, #52]	; (800aa80 <StopJoin+0x3c>)
 800aa4a:	f010 f9a5 	bl	801ad98 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800aa4e:	f002 fc77 	bl	800d340 <LmHandlerStop>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10e      	bne.n	800aa76 <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <StopJoin+0x40>)
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800aa5e:	480a      	ldr	r0, [pc, #40]	; (800aa88 <StopJoin+0x44>)
 800aa60:	f001 fda0 	bl	800c5a4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <StopJoin+0x40>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2101      	movs	r1, #1
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f001 feec 	bl	800c848 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800aa70:	4803      	ldr	r0, [pc, #12]	; (800aa80 <StopJoin+0x3c>)
 800aa72:	f010 f923 	bl	801acbc <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800aa76:	4805      	ldr	r0, [pc, #20]	; (800aa8c <StopJoin+0x48>)
 800aa78:	f010 f920 	bl	801acbc <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800aa7c:	bf00      	nop
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	200005a0 	.word	0x200005a0
 800aa84:	2000000c 	.word	0x2000000c
 800aa88:	2000005c 	.word	0x2000005c
 800aa8c:	200005b8 	.word	0x200005b8

0800aa90 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <OnStopJoinTimerEvent+0x20>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d103      	bne.n	800aaa8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	2008      	movs	r0, #8
 800aaa4:	f010 f852 	bl	801ab4c <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	2000000c 	.word	0x2000000c

0800aab4 <StoreContext>:

static void StoreContext(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800aaba:	23ff      	movs	r3, #255	; 0xff
 800aabc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800aabe:	f002 fc59 	bl	800d374 <LmHandlerNvmDataStore>
 800aac2:	4603      	mov	r3, r0
 800aac4:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	4603      	mov	r3, r0
 800aad6:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc80      	pop	{r7}
 800aae0:	4770      	bx	lr
	...

0800aae4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800aaee:	f7f9 ff95 	bl	8004a1c <HAL_FLASH_Unlock>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d11c      	bne.n	800ab32 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800aaf8:	4b10      	ldr	r3, [pc, #64]	; (800ab3c <OnStoreContextRequest+0x58>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	029a      	lsls	r2, r3, #10
 800aafe:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <OnStoreContextRequest+0x5c>)
 800ab00:	4013      	ands	r3, r2
 800ab02:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800ab06:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab0a:	fb01 f303 	mul.w	r3, r1, r3
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	0adb      	lsrs	r3, r3, #11
 800ab12:	2200      	movs	r2, #0
 800ab14:	2101      	movs	r1, #1
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7f6 fb89 	bl	800122e <FLASH_IF_EraseByPages>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d105      	bne.n	800ab2e <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800ab22:	2300      	movs	r3, #0
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	4806      	ldr	r0, [pc, #24]	; (800ab44 <OnStoreContextRequest+0x60>)
 800ab2a:	f7f6 fa9f 	bl	800106c <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800ab2e:	f7f9 ff97 	bl	8004a60 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ab32:	bf00      	nop
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	1fff75e0 	.word	0x1fff75e0
 800ab40:	03fffc00 	.word	0x03fffc00
 800ab44:	0803f000 	.word	0x0803f000

0800ab48 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	4903      	ldr	r1, [pc, #12]	; (800ab68 <OnRestoreContextRequest+0x20>)
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f00f fad6 	bl	801a10c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	0803f000 	.word	0x0803f000

0800ab6c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800ab70:	4b15      	ldr	r3, [pc, #84]	; (800abc8 <LoraInfo_Init+0x5c>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ab76:	4b14      	ldr	r3, [pc, #80]	; (800abc8 <LoraInfo_Init+0x5c>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ab7c:	4b12      	ldr	r3, [pc, #72]	; (800abc8 <LoraInfo_Init+0x5c>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <LoraInfo_Init+0x5c>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800ab88:	4b0f      	ldr	r3, [pc, #60]	; (800abc8 <LoraInfo_Init+0x5c>)
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	f043 0320 	orr.w	r3, r3, #32
 800ab90:	4a0d      	ldr	r2, [pc, #52]	; (800abc8 <LoraInfo_Init+0x5c>)
 800ab92:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ab94:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <LoraInfo_Init+0x5c>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10c      	bne.n	800abb6 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ab9c:	4b0b      	ldr	r3, [pc, #44]	; (800abcc <LoraInfo_Init+0x60>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2100      	movs	r1, #0
 800aba2:	2000      	movs	r0, #0
 800aba4:	f010 fb02 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800aba8:	bf00      	nop
 800abaa:	f010 faed 	bl	801b188 <UTIL_ADV_TRACE_IsBufferEmpty>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d1fa      	bne.n	800abaa <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800abb4:	e7fe      	b.n	800abb4 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800abb6:	4b04      	ldr	r3, [pc, #16]	; (800abc8 <LoraInfo_Init+0x5c>)
 800abb8:	2200      	movs	r2, #0
 800abba:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <LoraInfo_Init+0x5c>)
 800abbe:	2203      	movs	r2, #3
 800abc0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800abc2:	bf00      	nop
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	2000070c 	.word	0x2000070c
 800abcc:	0801b850 	.word	0x0801b850

0800abd0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <LoraInfo_GetPtr+0x10>)
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	46bd      	mov	sp, r7
 800abda:	bc80      	pop	{r7}
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	2000070c 	.word	0x2000070c

0800abe4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800abe8:	f7f7 ff8d 	bl	8002b06 <BSP_RADIO_Init>
 800abec:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800abee:	4618      	mov	r0, r3
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	4603      	mov	r3, r0
 800abfa:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f7 ffb2 	bl	8002b68 <BSP_RADIO_ConfigRFSwitch>
 800ac04:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ac12:	f7f7 fff7 	bl	8002c04 <BSP_RADIO_GetTxConfig>
 800ac16:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ac20:	f7f7 fff7 	bl	8002c12 <BSP_RADIO_IsTCXO>
 800ac24:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ac2e:	f7f7 fff7 	bl	8002c20 <BSP_RADIO_IsDCDC>
 800ac32:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	4603      	mov	r3, r0
 800ac40:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7f7 fff2 	bl	8002c2e <BSP_RADIO_GetRFOMaxPowerConfig>
 800ac4a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	33f1      	adds	r3, #241	; 0xf1
 800ac60:	2210      	movs	r2, #16
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f00b ff87 	bl	8016b78 <memset1>
    ctx->M_n = 0;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	22f0      	movs	r2, #240	; 0xf0
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f00b ff7d 	bl	8016b78 <memset1>
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	461a      	mov	r2, r3
 800ac94:	2110      	movs	r1, #16
 800ac96:	6838      	ldr	r0, [r7, #0]
 800ac98:	f000 fe5c 	bl	800b954 <lorawan_aes_set_key>
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08c      	sub	sp, #48	; 0x30
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80a1 	beq.w	800adfe <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800acc2:	f1c3 0310 	rsb	r3, r3, #16
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4293      	cmp	r3, r2
 800acca:	bf28      	it	cs
 800accc:	4613      	movcs	r3, r2
 800acce:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f203 1201 	addw	r2, r3, #257	; 0x101
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800acdc:	4413      	add	r3, r2
 800acde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace0:	b292      	uxth	r2, r2
 800ace2:	68b9      	ldr	r1, [r7, #8]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f00b ff0c 	bl	8016b02 <memcpy1>
        ctx->M_n += mlen;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	441a      	add	r2, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad00:	2b0f      	cmp	r3, #15
 800ad02:	f240 808d 	bls.w	800ae20 <AES_CMAC_Update+0x17c>
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	f000 8088 	beq.w	800ae20 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad10:	2300      	movs	r3, #0
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad14:	e015      	b.n	800ad42 <AES_CMAC_Update+0x9e>
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	4413      	add	r3, r2
 800ad1c:	33f1      	adds	r3, #241	; 0xf1
 800ad1e:	781a      	ldrb	r2, [r3, #0]
 800ad20:	68f9      	ldr	r1, [r7, #12]
 800ad22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad24:	440b      	add	r3, r1
 800ad26:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	4053      	eors	r3, r2
 800ad2e:	b2d9      	uxtb	r1, r3
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	4413      	add	r3, r2
 800ad36:	33f1      	adds	r3, #241	; 0xf1
 800ad38:	460a      	mov	r2, r1
 800ad3a:	701a      	strb	r2, [r3, #0]
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	3301      	adds	r3, #1
 800ad40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	2b0f      	cmp	r3, #15
 800ad46:	dde6      	ble.n	800ad16 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	2210      	movs	r2, #16
 800ad54:	4618      	mov	r0, r3
 800ad56:	f00b fed4 	bl	8016b02 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f107 0114 	add.w	r1, r7, #20
 800ad60:	f107 0314 	add.w	r3, r7, #20
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 fed3 	bl	800bb10 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	33f1      	adds	r3, #241	; 0xf1
 800ad6e:	f107 0114 	add.w	r1, r7, #20
 800ad72:	2210      	movs	r2, #16
 800ad74:	4618      	mov	r0, r3
 800ad76:	f00b fec4 	bl	8016b02 <memcpy1>

        data += mlen;
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	4413      	add	r3, r2
 800ad80:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ad8a:	e038      	b.n	800adfe <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad90:	e013      	b.n	800adba <AES_CMAC_Update+0x116>
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad96:	4413      	add	r3, r2
 800ad98:	33f1      	adds	r3, #241	; 0xf1
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	68b9      	ldr	r1, [r7, #8]
 800ada0:	440b      	add	r3, r1
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	4053      	eors	r3, r2
 800ada6:	b2d9      	uxtb	r1, r3
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adac:	4413      	add	r3, r2
 800adae:	33f1      	adds	r3, #241	; 0xf1
 800adb0:	460a      	mov	r2, r1
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	3301      	adds	r3, #1
 800adb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	2b0f      	cmp	r3, #15
 800adbe:	dde8      	ble.n	800ad92 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800adc6:	f107 0314 	add.w	r3, r7, #20
 800adca:	2210      	movs	r2, #16
 800adcc:	4618      	mov	r0, r3
 800adce:	f00b fe98 	bl	8016b02 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	f107 0114 	add.w	r1, r7, #20
 800add8:	f107 0314 	add.w	r3, r7, #20
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fe97 	bl	800bb10 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	33f1      	adds	r3, #241	; 0xf1
 800ade6:	f107 0114 	add.w	r1, r7, #20
 800adea:	2210      	movs	r2, #16
 800adec:	4618      	mov	r0, r3
 800adee:	f00b fe88 	bl	8016b02 <memcpy1>

        data += 16;
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	3310      	adds	r3, #16
 800adf6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3b10      	subs	r3, #16
 800adfc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b10      	cmp	r3, #16
 800ae02:	d8c3      	bhi.n	800ad8c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	b292      	uxth	r2, r2
 800ae0e:	68b9      	ldr	r1, [r7, #8]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f00b fe76 	bl	8016b02 <memcpy1>
    ctx->M_n = len;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae1e:	e000      	b.n	800ae22 <AES_CMAC_Update+0x17e>
            return;
 800ae20:	bf00      	nop
}
 800ae22:	3730      	adds	r7, #48	; 0x30
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b092      	sub	sp, #72	; 0x48
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ae32:	f107 031c 	add.w	r3, r7, #28
 800ae36:	2210      	movs	r2, #16
 800ae38:	2100      	movs	r1, #0
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f00b fe9c 	bl	8016b78 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	f107 011c 	add.w	r1, r7, #28
 800ae46:	f107 031c 	add.w	r3, r7, #28
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 fe60 	bl	800bb10 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ae50:	7f3b      	ldrb	r3, [r7, #28]
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	da30      	bge.n	800aeba <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ae58:	2300      	movs	r3, #0
 800ae5a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae5c:	e01b      	b.n	800ae96 <AES_CMAC_Final+0x6e>
 800ae5e:	f107 021c 	add.w	r2, r7, #28
 800ae62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae64:	4413      	add	r3, r2
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	b25a      	sxtb	r2, r3
 800ae6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae6e:	3301      	adds	r3, #1
 800ae70:	3348      	adds	r3, #72	; 0x48
 800ae72:	443b      	add	r3, r7
 800ae74:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ae78:	09db      	lsrs	r3, r3, #7
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	b25b      	sxtb	r3, r3
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	b2d9      	uxtb	r1, r3
 800ae84:	f107 021c 	add.w	r2, r7, #28
 800ae88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae8a:	4413      	add	r3, r2
 800ae8c:	460a      	mov	r2, r1
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae92:	3301      	adds	r3, #1
 800ae94:	647b      	str	r3, [r7, #68]	; 0x44
 800ae96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae98:	2b0e      	cmp	r3, #14
 800ae9a:	dde0      	ble.n	800ae5e <AES_CMAC_Final+0x36>
 800ae9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800aea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aeac:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800aeb0:	43db      	mvns	r3, r3
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeb8:	e027      	b.n	800af0a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800aeba:	2300      	movs	r3, #0
 800aebc:	643b      	str	r3, [r7, #64]	; 0x40
 800aebe:	e01b      	b.n	800aef8 <AES_CMAC_Final+0xd0>
 800aec0:	f107 021c 	add.w	r2, r7, #28
 800aec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec6:	4413      	add	r3, r2
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	b25a      	sxtb	r2, r3
 800aece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed0:	3301      	adds	r3, #1
 800aed2:	3348      	adds	r3, #72	; 0x48
 800aed4:	443b      	add	r3, r7
 800aed6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aeda:	09db      	lsrs	r3, r3, #7
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	4313      	orrs	r3, r2
 800aee2:	b25b      	sxtb	r3, r3
 800aee4:	b2d9      	uxtb	r1, r3
 800aee6:	f107 021c 	add.w	r2, r7, #28
 800aeea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeec:	4413      	add	r3, r2
 800aeee:	460a      	mov	r2, r1
 800aef0:	701a      	strb	r2, [r3, #0]
 800aef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef4:	3301      	adds	r3, #1
 800aef6:	643b      	str	r3, [r7, #64]	; 0x40
 800aef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefa:	2b0e      	cmp	r3, #14
 800aefc:	dde0      	ble.n	800aec0 <AES_CMAC_Final+0x98>
 800aefe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	b2db      	uxtb	r3, r3
 800af06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af10:	2b10      	cmp	r3, #16
 800af12:	d11d      	bne.n	800af50 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af14:	2300      	movs	r3, #0
 800af16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af18:	e016      	b.n	800af48 <AES_CMAC_Final+0x120>
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af1e:	4413      	add	r3, r2
 800af20:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	f107 011c 	add.w	r1, r7, #28
 800af2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2c:	440b      	add	r3, r1
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	4053      	eors	r3, r2
 800af32:	b2d9      	uxtb	r1, r3
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af38:	4413      	add	r3, r2
 800af3a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af3e:	460a      	mov	r2, r1
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af44:	3301      	adds	r3, #1
 800af46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4a:	2b0f      	cmp	r3, #15
 800af4c:	dde5      	ble.n	800af1a <AES_CMAC_Final+0xf2>
 800af4e:	e096      	b.n	800b07e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800af50:	7f3b      	ldrb	r3, [r7, #28]
 800af52:	b25b      	sxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	da30      	bge.n	800afba <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800af58:	2300      	movs	r3, #0
 800af5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800af5c:	e01b      	b.n	800af96 <AES_CMAC_Final+0x16e>
 800af5e:	f107 021c 	add.w	r2, r7, #28
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	4413      	add	r3, r2
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	b25a      	sxtb	r2, r3
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	3301      	adds	r3, #1
 800af70:	3348      	adds	r3, #72	; 0x48
 800af72:	443b      	add	r3, r7
 800af74:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af78:	09db      	lsrs	r3, r3, #7
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	b25b      	sxtb	r3, r3
 800af7e:	4313      	orrs	r3, r2
 800af80:	b25b      	sxtb	r3, r3
 800af82:	b2d9      	uxtb	r1, r3
 800af84:	f107 021c 	add.w	r2, r7, #28
 800af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8a:	4413      	add	r3, r2
 800af8c:	460a      	mov	r2, r1
 800af8e:	701a      	strb	r2, [r3, #0]
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	3301      	adds	r3, #1
 800af94:	63bb      	str	r3, [r7, #56]	; 0x38
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	2b0e      	cmp	r3, #14
 800af9a:	dde0      	ble.n	800af5e <AES_CMAC_Final+0x136>
 800af9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afa0:	005b      	lsls	r3, r3, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800afa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afac:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800afb0:	43db      	mvns	r3, r3
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afb8:	e027      	b.n	800b00a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800afba:	2300      	movs	r3, #0
 800afbc:	637b      	str	r3, [r7, #52]	; 0x34
 800afbe:	e01b      	b.n	800aff8 <AES_CMAC_Final+0x1d0>
 800afc0:	f107 021c 	add.w	r2, r7, #28
 800afc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc6:	4413      	add	r3, r2
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	b25a      	sxtb	r2, r3
 800afce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd0:	3301      	adds	r3, #1
 800afd2:	3348      	adds	r3, #72	; 0x48
 800afd4:	443b      	add	r3, r7
 800afd6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afda:	09db      	lsrs	r3, r3, #7
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	b25b      	sxtb	r3, r3
 800afe0:	4313      	orrs	r3, r2
 800afe2:	b25b      	sxtb	r3, r3
 800afe4:	b2d9      	uxtb	r1, r3
 800afe6:	f107 021c 	add.w	r2, r7, #28
 800afea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afec:	4413      	add	r3, r2
 800afee:	460a      	mov	r2, r1
 800aff0:	701a      	strb	r2, [r3, #0]
 800aff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff4:	3301      	adds	r3, #1
 800aff6:	637b      	str	r3, [r7, #52]	; 0x34
 800aff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affa:	2b0e      	cmp	r3, #14
 800affc:	dde0      	ble.n	800afc0 <AES_CMAC_Final+0x198>
 800affe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	4413      	add	r3, r2
 800b014:	2280      	movs	r2, #128	; 0x80
 800b016:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b01a:	e007      	b.n	800b02c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	4413      	add	r3, r2
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b040:	2b0f      	cmp	r3, #15
 800b042:	d9eb      	bls.n	800b01c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b044:	2300      	movs	r3, #0
 800b046:	633b      	str	r3, [r7, #48]	; 0x30
 800b048:	e016      	b.n	800b078 <AES_CMAC_Final+0x250>
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	4413      	add	r3, r2
 800b050:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b054:	781a      	ldrb	r2, [r3, #0]
 800b056:	f107 011c 	add.w	r1, r7, #28
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	440b      	add	r3, r1
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	4053      	eors	r3, r2
 800b062:	b2d9      	uxtb	r1, r3
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	4413      	add	r3, r2
 800b06a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b06e:	460a      	mov	r2, r1
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	3301      	adds	r3, #1
 800b076:	633b      	str	r3, [r7, #48]	; 0x30
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	2b0f      	cmp	r3, #15
 800b07c:	dde5      	ble.n	800b04a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b07e:	2300      	movs	r3, #0
 800b080:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b082:	e015      	b.n	800b0b0 <AES_CMAC_Final+0x288>
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	4413      	add	r3, r2
 800b08a:	33f1      	adds	r3, #241	; 0xf1
 800b08c:	781a      	ldrb	r2, [r3, #0]
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	440b      	add	r3, r1
 800b094:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	4053      	eors	r3, r2
 800b09c:	b2d9      	uxtb	r1, r3
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a2:	4413      	add	r3, r2
 800b0a4:	33f1      	adds	r3, #241	; 0xf1
 800b0a6:	460a      	mov	r2, r1
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b2:	2b0f      	cmp	r3, #15
 800b0b4:	dde6      	ble.n	800b084 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b0bc:	f107 030c 	add.w	r3, r7, #12
 800b0c0:	2210      	movs	r2, #16
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f00b fd1d 	bl	8016b02 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	f107 030c 	add.w	r3, r7, #12
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 fd1d 	bl	800bb10 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b0d6:	f107 031c 	add.w	r3, r7, #28
 800b0da:	2210      	movs	r2, #16
 800b0dc:	2100      	movs	r1, #0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f00b fd4a 	bl	8016b78 <memset1>
}
 800b0e4:	bf00      	nop
 800b0e6:	3748      	adds	r7, #72	; 0x48
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781a      	ldrb	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3301      	adds	r3, #1
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	7852      	ldrb	r2, [r2, #1]
 800b106:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3302      	adds	r3, #2
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	7892      	ldrb	r2, [r2, #2]
 800b110:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3303      	adds	r3, #3
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	78d2      	ldrb	r2, [r2, #3]
 800b11a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3304      	adds	r3, #4
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	7912      	ldrb	r2, [r2, #4]
 800b124:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3305      	adds	r3, #5
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	7952      	ldrb	r2, [r2, #5]
 800b12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3306      	adds	r3, #6
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	7992      	ldrb	r2, [r2, #6]
 800b138:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3307      	adds	r3, #7
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	79d2      	ldrb	r2, [r2, #7]
 800b142:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3308      	adds	r3, #8
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	7a12      	ldrb	r2, [r2, #8]
 800b14c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3309      	adds	r3, #9
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	7a52      	ldrb	r2, [r2, #9]
 800b156:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	330a      	adds	r3, #10
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	7a92      	ldrb	r2, [r2, #10]
 800b160:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	330b      	adds	r3, #11
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	7ad2      	ldrb	r2, [r2, #11]
 800b16a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	330c      	adds	r3, #12
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	7b12      	ldrb	r2, [r2, #12]
 800b174:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	330d      	adds	r3, #13
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	7b52      	ldrb	r2, [r2, #13]
 800b17e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	330e      	adds	r3, #14
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	7b92      	ldrb	r2, [r2, #14]
 800b188:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	330f      	adds	r3, #15
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	7bd2      	ldrb	r2, [r2, #15]
 800b192:	701a      	strb	r2, [r3, #0]
#endif
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	bc80      	pop	{r7}
 800b19c:	4770      	bx	lr

0800b19e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b1ac:	e007      	b.n	800b1be <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	1c53      	adds	r3, r2, #1
 800b1b2:	60bb      	str	r3, [r7, #8]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	1c59      	adds	r1, r3, #1
 800b1b8:	60f9      	str	r1, [r7, #12]
 800b1ba:	7812      	ldrb	r2, [r2, #0]
 800b1bc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	1e5a      	subs	r2, r3, #1
 800b1c2:	71fa      	strb	r2, [r7, #7]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f2      	bne.n	800b1ae <copy_block_nn+0x10>
}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bc80      	pop	{r7}
 800b1d2:	4770      	bx	lr

0800b1d4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	4053      	eors	r3, r2
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	7819      	ldrb	r1, [r3, #0]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	781a      	ldrb	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	404a      	eors	r2, r1
 800b200:	b2d2      	uxtb	r2, r2
 800b202:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3302      	adds	r3, #2
 800b208:	7819      	ldrb	r1, [r3, #0]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	3302      	adds	r3, #2
 800b20e:	781a      	ldrb	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	3302      	adds	r3, #2
 800b214:	404a      	eors	r2, r1
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3303      	adds	r3, #3
 800b21e:	7819      	ldrb	r1, [r3, #0]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	3303      	adds	r3, #3
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3303      	adds	r3, #3
 800b22a:	404a      	eors	r2, r1
 800b22c:	b2d2      	uxtb	r2, r2
 800b22e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3304      	adds	r3, #4
 800b234:	7819      	ldrb	r1, [r3, #0]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	3304      	adds	r3, #4
 800b23a:	781a      	ldrb	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3304      	adds	r3, #4
 800b240:	404a      	eors	r2, r1
 800b242:	b2d2      	uxtb	r2, r2
 800b244:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3305      	adds	r3, #5
 800b24a:	7819      	ldrb	r1, [r3, #0]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	3305      	adds	r3, #5
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	3305      	adds	r3, #5
 800b256:	404a      	eors	r2, r1
 800b258:	b2d2      	uxtb	r2, r2
 800b25a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3306      	adds	r3, #6
 800b260:	7819      	ldrb	r1, [r3, #0]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	3306      	adds	r3, #6
 800b266:	781a      	ldrb	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3306      	adds	r3, #6
 800b26c:	404a      	eors	r2, r1
 800b26e:	b2d2      	uxtb	r2, r2
 800b270:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3307      	adds	r3, #7
 800b276:	7819      	ldrb	r1, [r3, #0]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	3307      	adds	r3, #7
 800b27c:	781a      	ldrb	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3307      	adds	r3, #7
 800b282:	404a      	eors	r2, r1
 800b284:	b2d2      	uxtb	r2, r2
 800b286:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3308      	adds	r3, #8
 800b28c:	7819      	ldrb	r1, [r3, #0]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	781a      	ldrb	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3308      	adds	r3, #8
 800b298:	404a      	eors	r2, r1
 800b29a:	b2d2      	uxtb	r2, r2
 800b29c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3309      	adds	r3, #9
 800b2a2:	7819      	ldrb	r1, [r3, #0]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	3309      	adds	r3, #9
 800b2a8:	781a      	ldrb	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3309      	adds	r3, #9
 800b2ae:	404a      	eors	r2, r1
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	330a      	adds	r3, #10
 800b2b8:	7819      	ldrb	r1, [r3, #0]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	330a      	adds	r3, #10
 800b2be:	781a      	ldrb	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	330a      	adds	r3, #10
 800b2c4:	404a      	eors	r2, r1
 800b2c6:	b2d2      	uxtb	r2, r2
 800b2c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	330b      	adds	r3, #11
 800b2ce:	7819      	ldrb	r1, [r3, #0]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	330b      	adds	r3, #11
 800b2d4:	781a      	ldrb	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	330b      	adds	r3, #11
 800b2da:	404a      	eors	r2, r1
 800b2dc:	b2d2      	uxtb	r2, r2
 800b2de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	330c      	adds	r3, #12
 800b2e4:	7819      	ldrb	r1, [r3, #0]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	330c      	adds	r3, #12
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	330c      	adds	r3, #12
 800b2f0:	404a      	eors	r2, r1
 800b2f2:	b2d2      	uxtb	r2, r2
 800b2f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	330d      	adds	r3, #13
 800b2fa:	7819      	ldrb	r1, [r3, #0]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	330d      	adds	r3, #13
 800b300:	781a      	ldrb	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	330d      	adds	r3, #13
 800b306:	404a      	eors	r2, r1
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	330e      	adds	r3, #14
 800b310:	7819      	ldrb	r1, [r3, #0]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	330e      	adds	r3, #14
 800b316:	781a      	ldrb	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	330e      	adds	r3, #14
 800b31c:	404a      	eors	r2, r1
 800b31e:	b2d2      	uxtb	r2, r2
 800b320:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	330f      	adds	r3, #15
 800b326:	7819      	ldrb	r1, [r3, #0]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	330f      	adds	r3, #15
 800b32c:	781a      	ldrb	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	330f      	adds	r3, #15
 800b332:	404a      	eors	r2, r1
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	701a      	strb	r2, [r3, #0]
#endif
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bc80      	pop	{r7}
 800b340:	4770      	bx	lr

0800b342 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	60f8      	str	r0, [r7, #12]
 800b34a:	60b9      	str	r1, [r7, #8]
 800b34c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	781a      	ldrb	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	4053      	eors	r3, r2
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	3301      	adds	r3, #1
 800b362:	7819      	ldrb	r1, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	781a      	ldrb	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3301      	adds	r3, #1
 800b36e:	404a      	eors	r2, r1
 800b370:	b2d2      	uxtb	r2, r2
 800b372:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	3302      	adds	r3, #2
 800b378:	7819      	ldrb	r1, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3302      	adds	r3, #2
 800b37e:	781a      	ldrb	r2, [r3, #0]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3302      	adds	r3, #2
 800b384:	404a      	eors	r2, r1
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	3303      	adds	r3, #3
 800b38e:	7819      	ldrb	r1, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3303      	adds	r3, #3
 800b394:	781a      	ldrb	r2, [r3, #0]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3303      	adds	r3, #3
 800b39a:	404a      	eors	r2, r1
 800b39c:	b2d2      	uxtb	r2, r2
 800b39e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	7819      	ldrb	r1, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	781a      	ldrb	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	404a      	eors	r2, r1
 800b3b2:	b2d2      	uxtb	r2, r2
 800b3b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	3305      	adds	r3, #5
 800b3ba:	7819      	ldrb	r1, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3305      	adds	r3, #5
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3305      	adds	r3, #5
 800b3c6:	404a      	eors	r2, r1
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	3306      	adds	r3, #6
 800b3d0:	7819      	ldrb	r1, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3306      	adds	r3, #6
 800b3d6:	781a      	ldrb	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3306      	adds	r3, #6
 800b3dc:	404a      	eors	r2, r1
 800b3de:	b2d2      	uxtb	r2, r2
 800b3e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	3307      	adds	r3, #7
 800b3e6:	7819      	ldrb	r1, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3307      	adds	r3, #7
 800b3ec:	781a      	ldrb	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3307      	adds	r3, #7
 800b3f2:	404a      	eors	r2, r1
 800b3f4:	b2d2      	uxtb	r2, r2
 800b3f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	7819      	ldrb	r1, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3308      	adds	r3, #8
 800b402:	781a      	ldrb	r2, [r3, #0]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3308      	adds	r3, #8
 800b408:	404a      	eors	r2, r1
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	3309      	adds	r3, #9
 800b412:	7819      	ldrb	r1, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3309      	adds	r3, #9
 800b418:	781a      	ldrb	r2, [r3, #0]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3309      	adds	r3, #9
 800b41e:	404a      	eors	r2, r1
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	330a      	adds	r3, #10
 800b428:	7819      	ldrb	r1, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	330a      	adds	r3, #10
 800b42e:	781a      	ldrb	r2, [r3, #0]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	330a      	adds	r3, #10
 800b434:	404a      	eors	r2, r1
 800b436:	b2d2      	uxtb	r2, r2
 800b438:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	330b      	adds	r3, #11
 800b43e:	7819      	ldrb	r1, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	330b      	adds	r3, #11
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	330b      	adds	r3, #11
 800b44a:	404a      	eors	r2, r1
 800b44c:	b2d2      	uxtb	r2, r2
 800b44e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	330c      	adds	r3, #12
 800b454:	7819      	ldrb	r1, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	330c      	adds	r3, #12
 800b45a:	781a      	ldrb	r2, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	330c      	adds	r3, #12
 800b460:	404a      	eors	r2, r1
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	330d      	adds	r3, #13
 800b46a:	7819      	ldrb	r1, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	330d      	adds	r3, #13
 800b470:	781a      	ldrb	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	330d      	adds	r3, #13
 800b476:	404a      	eors	r2, r1
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	330e      	adds	r3, #14
 800b480:	7819      	ldrb	r1, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	330e      	adds	r3, #14
 800b486:	781a      	ldrb	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	330e      	adds	r3, #14
 800b48c:	404a      	eors	r2, r1
 800b48e:	b2d2      	uxtb	r2, r2
 800b490:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	330f      	adds	r3, #15
 800b496:	7819      	ldrb	r1, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	330f      	adds	r3, #15
 800b49c:	781a      	ldrb	r2, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	330f      	adds	r3, #15
 800b4a2:	404a      	eors	r2, r1
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b4a8:	bf00      	nop
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bc80      	pop	{r7}
 800b4b0:	4770      	bx	lr

0800b4b2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fe88 	bl	800b1d4 <xor_block>
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	4b48      	ldr	r3, [pc, #288]	; (800b5fc <shift_sub_rows+0x130>)
 800b4dc:	5c9a      	ldrb	r2, [r3, r2]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	701a      	strb	r2, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	4a43      	ldr	r2, [pc, #268]	; (800b5fc <shift_sub_rows+0x130>)
 800b4f0:	5c52      	ldrb	r2, [r2, r1]
 800b4f2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3308      	adds	r3, #8
 800b500:	4a3e      	ldr	r2, [pc, #248]	; (800b5fc <shift_sub_rows+0x130>)
 800b502:	5c52      	ldrb	r2, [r2, r1]
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	330c      	adds	r3, #12
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	4619      	mov	r1, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	330c      	adds	r3, #12
 800b512:	4a3a      	ldr	r2, [pc, #232]	; (800b5fc <shift_sub_rows+0x130>)
 800b514:	5c52      	ldrb	r2, [r2, r1]
 800b516:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	785b      	ldrb	r3, [r3, #1]
 800b51c:	73fb      	strb	r3, [r7, #15]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	3305      	adds	r3, #5
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	4619      	mov	r1, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3301      	adds	r3, #1
 800b52a:	4a34      	ldr	r2, [pc, #208]	; (800b5fc <shift_sub_rows+0x130>)
 800b52c:	5c52      	ldrb	r2, [r2, r1]
 800b52e:	701a      	strb	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3309      	adds	r3, #9
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	4619      	mov	r1, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	3305      	adds	r3, #5
 800b53c:	4a2f      	ldr	r2, [pc, #188]	; (800b5fc <shift_sub_rows+0x130>)
 800b53e:	5c52      	ldrb	r2, [r2, r1]
 800b540:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	330d      	adds	r3, #13
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	4619      	mov	r1, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3309      	adds	r3, #9
 800b54e:	4a2b      	ldr	r2, [pc, #172]	; (800b5fc <shift_sub_rows+0x130>)
 800b550:	5c52      	ldrb	r2, [r2, r1]
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	7bfa      	ldrb	r2, [r7, #15]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	330d      	adds	r3, #13
 800b55a:	4928      	ldr	r1, [pc, #160]	; (800b5fc <shift_sub_rows+0x130>)
 800b55c:	5c8a      	ldrb	r2, [r1, r2]
 800b55e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	789b      	ldrb	r3, [r3, #2]
 800b564:	73fb      	strb	r3, [r7, #15]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	330a      	adds	r3, #10
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3302      	adds	r3, #2
 800b572:	4a22      	ldr	r2, [pc, #136]	; (800b5fc <shift_sub_rows+0x130>)
 800b574:	5c52      	ldrb	r2, [r2, r1]
 800b576:	701a      	strb	r2, [r3, #0]
 800b578:	7bfa      	ldrb	r2, [r7, #15]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	330a      	adds	r3, #10
 800b57e:	491f      	ldr	r1, [pc, #124]	; (800b5fc <shift_sub_rows+0x130>)
 800b580:	5c8a      	ldrb	r2, [r1, r2]
 800b582:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	799b      	ldrb	r3, [r3, #6]
 800b588:	73fb      	strb	r3, [r7, #15]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	330e      	adds	r3, #14
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	4619      	mov	r1, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3306      	adds	r3, #6
 800b596:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <shift_sub_rows+0x130>)
 800b598:	5c52      	ldrb	r2, [r2, r1]
 800b59a:	701a      	strb	r2, [r3, #0]
 800b59c:	7bfa      	ldrb	r2, [r7, #15]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	330e      	adds	r3, #14
 800b5a2:	4916      	ldr	r1, [pc, #88]	; (800b5fc <shift_sub_rows+0x130>)
 800b5a4:	5c8a      	ldrb	r2, [r1, r2]
 800b5a6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	7bdb      	ldrb	r3, [r3, #15]
 800b5ac:	73fb      	strb	r3, [r7, #15]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	330b      	adds	r3, #11
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	330f      	adds	r3, #15
 800b5ba:	4a10      	ldr	r2, [pc, #64]	; (800b5fc <shift_sub_rows+0x130>)
 800b5bc:	5c52      	ldrb	r2, [r2, r1]
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3307      	adds	r3, #7
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	330b      	adds	r3, #11
 800b5cc:	4a0b      	ldr	r2, [pc, #44]	; (800b5fc <shift_sub_rows+0x130>)
 800b5ce:	5c52      	ldrb	r2, [r2, r1]
 800b5d0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3307      	adds	r3, #7
 800b5de:	4a07      	ldr	r2, [pc, #28]	; (800b5fc <shift_sub_rows+0x130>)
 800b5e0:	5c52      	ldrb	r2, [r2, r1]
 800b5e2:	701a      	strb	r2, [r3, #0]
 800b5e4:	7bfa      	ldrb	r2, [r7, #15]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3303      	adds	r3, #3
 800b5ea:	4904      	ldr	r1, [pc, #16]	; (800b5fc <shift_sub_rows+0x130>)
 800b5ec:	5c8a      	ldrb	r2, [r1, r2]
 800b5ee:	701a      	strb	r2, [r3, #0]
}
 800b5f0:	bf00      	nop
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bc80      	pop	{r7}
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	0801be20 	.word	0x0801be20

0800b600 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	6879      	ldr	r1, [r7, #4]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fd6c 	bl	800b0ec <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b614:	7a3b      	ldrb	r3, [r7, #8]
 800b616:	461a      	mov	r2, r3
 800b618:	4b9a      	ldr	r3, [pc, #616]	; (800b884 <mix_sub_columns+0x284>)
 800b61a:	5c9a      	ldrb	r2, [r3, r2]
 800b61c:	7b7b      	ldrb	r3, [r7, #13]
 800b61e:	4619      	mov	r1, r3
 800b620:	4b99      	ldr	r3, [pc, #612]	; (800b888 <mix_sub_columns+0x288>)
 800b622:	5c5b      	ldrb	r3, [r3, r1]
 800b624:	4053      	eors	r3, r2
 800b626:	b2da      	uxtb	r2, r3
 800b628:	7cbb      	ldrb	r3, [r7, #18]
 800b62a:	4619      	mov	r1, r3
 800b62c:	4b97      	ldr	r3, [pc, #604]	; (800b88c <mix_sub_columns+0x28c>)
 800b62e:	5c5b      	ldrb	r3, [r3, r1]
 800b630:	4053      	eors	r3, r2
 800b632:	b2da      	uxtb	r2, r3
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	4619      	mov	r1, r3
 800b638:	4b94      	ldr	r3, [pc, #592]	; (800b88c <mix_sub_columns+0x28c>)
 800b63a:	5c5b      	ldrb	r3, [r3, r1]
 800b63c:	4053      	eors	r3, r2
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b644:	7a3b      	ldrb	r3, [r7, #8]
 800b646:	461a      	mov	r2, r3
 800b648:	4b90      	ldr	r3, [pc, #576]	; (800b88c <mix_sub_columns+0x28c>)
 800b64a:	5c9a      	ldrb	r2, [r3, r2]
 800b64c:	7b7b      	ldrb	r3, [r7, #13]
 800b64e:	4619      	mov	r1, r3
 800b650:	4b8c      	ldr	r3, [pc, #560]	; (800b884 <mix_sub_columns+0x284>)
 800b652:	5c5b      	ldrb	r3, [r3, r1]
 800b654:	4053      	eors	r3, r2
 800b656:	b2da      	uxtb	r2, r3
 800b658:	7cbb      	ldrb	r3, [r7, #18]
 800b65a:	4619      	mov	r1, r3
 800b65c:	4b8a      	ldr	r3, [pc, #552]	; (800b888 <mix_sub_columns+0x288>)
 800b65e:	5c5b      	ldrb	r3, [r3, r1]
 800b660:	4053      	eors	r3, r2
 800b662:	b2d9      	uxtb	r1, r3
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	461a      	mov	r2, r3
 800b668:	4b88      	ldr	r3, [pc, #544]	; (800b88c <mix_sub_columns+0x28c>)
 800b66a:	5c9a      	ldrb	r2, [r3, r2]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3301      	adds	r3, #1
 800b670:	404a      	eors	r2, r1
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b676:	7a3b      	ldrb	r3, [r7, #8]
 800b678:	461a      	mov	r2, r3
 800b67a:	4b84      	ldr	r3, [pc, #528]	; (800b88c <mix_sub_columns+0x28c>)
 800b67c:	5c9a      	ldrb	r2, [r3, r2]
 800b67e:	7b7b      	ldrb	r3, [r7, #13]
 800b680:	4619      	mov	r1, r3
 800b682:	4b82      	ldr	r3, [pc, #520]	; (800b88c <mix_sub_columns+0x28c>)
 800b684:	5c5b      	ldrb	r3, [r3, r1]
 800b686:	4053      	eors	r3, r2
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	7cbb      	ldrb	r3, [r7, #18]
 800b68c:	4619      	mov	r1, r3
 800b68e:	4b7d      	ldr	r3, [pc, #500]	; (800b884 <mix_sub_columns+0x284>)
 800b690:	5c5b      	ldrb	r3, [r3, r1]
 800b692:	4053      	eors	r3, r2
 800b694:	b2d9      	uxtb	r1, r3
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	461a      	mov	r2, r3
 800b69a:	4b7b      	ldr	r3, [pc, #492]	; (800b888 <mix_sub_columns+0x288>)
 800b69c:	5c9a      	ldrb	r2, [r3, r2]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3302      	adds	r3, #2
 800b6a2:	404a      	eors	r2, r1
 800b6a4:	b2d2      	uxtb	r2, r2
 800b6a6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b6a8:	7a3b      	ldrb	r3, [r7, #8]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4b76      	ldr	r3, [pc, #472]	; (800b888 <mix_sub_columns+0x288>)
 800b6ae:	5c9a      	ldrb	r2, [r3, r2]
 800b6b0:	7b7b      	ldrb	r3, [r7, #13]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4b75      	ldr	r3, [pc, #468]	; (800b88c <mix_sub_columns+0x28c>)
 800b6b6:	5c5b      	ldrb	r3, [r3, r1]
 800b6b8:	4053      	eors	r3, r2
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	7cbb      	ldrb	r3, [r7, #18]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4b72      	ldr	r3, [pc, #456]	; (800b88c <mix_sub_columns+0x28c>)
 800b6c2:	5c5b      	ldrb	r3, [r3, r1]
 800b6c4:	4053      	eors	r3, r2
 800b6c6:	b2d9      	uxtb	r1, r3
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	4b6d      	ldr	r3, [pc, #436]	; (800b884 <mix_sub_columns+0x284>)
 800b6ce:	5c9a      	ldrb	r2, [r3, r2]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3303      	adds	r3, #3
 800b6d4:	404a      	eors	r2, r1
 800b6d6:	b2d2      	uxtb	r2, r2
 800b6d8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b6da:	7b3b      	ldrb	r3, [r7, #12]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	4b69      	ldr	r3, [pc, #420]	; (800b884 <mix_sub_columns+0x284>)
 800b6e0:	5c9a      	ldrb	r2, [r3, r2]
 800b6e2:	7c7b      	ldrb	r3, [r7, #17]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4b68      	ldr	r3, [pc, #416]	; (800b888 <mix_sub_columns+0x288>)
 800b6e8:	5c5b      	ldrb	r3, [r3, r1]
 800b6ea:	4053      	eors	r3, r2
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	7dbb      	ldrb	r3, [r7, #22]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4b66      	ldr	r3, [pc, #408]	; (800b88c <mix_sub_columns+0x28c>)
 800b6f4:	5c5b      	ldrb	r3, [r3, r1]
 800b6f6:	4053      	eors	r3, r2
 800b6f8:	b2d9      	uxtb	r1, r3
 800b6fa:	7afb      	ldrb	r3, [r7, #11]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4b63      	ldr	r3, [pc, #396]	; (800b88c <mix_sub_columns+0x28c>)
 800b700:	5c9a      	ldrb	r2, [r3, r2]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3304      	adds	r3, #4
 800b706:	404a      	eors	r2, r1
 800b708:	b2d2      	uxtb	r2, r2
 800b70a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b70c:	7b3b      	ldrb	r3, [r7, #12]
 800b70e:	461a      	mov	r2, r3
 800b710:	4b5e      	ldr	r3, [pc, #376]	; (800b88c <mix_sub_columns+0x28c>)
 800b712:	5c9a      	ldrb	r2, [r3, r2]
 800b714:	7c7b      	ldrb	r3, [r7, #17]
 800b716:	4619      	mov	r1, r3
 800b718:	4b5a      	ldr	r3, [pc, #360]	; (800b884 <mix_sub_columns+0x284>)
 800b71a:	5c5b      	ldrb	r3, [r3, r1]
 800b71c:	4053      	eors	r3, r2
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	7dbb      	ldrb	r3, [r7, #22]
 800b722:	4619      	mov	r1, r3
 800b724:	4b58      	ldr	r3, [pc, #352]	; (800b888 <mix_sub_columns+0x288>)
 800b726:	5c5b      	ldrb	r3, [r3, r1]
 800b728:	4053      	eors	r3, r2
 800b72a:	b2d9      	uxtb	r1, r3
 800b72c:	7afb      	ldrb	r3, [r7, #11]
 800b72e:	461a      	mov	r2, r3
 800b730:	4b56      	ldr	r3, [pc, #344]	; (800b88c <mix_sub_columns+0x28c>)
 800b732:	5c9a      	ldrb	r2, [r3, r2]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3305      	adds	r3, #5
 800b738:	404a      	eors	r2, r1
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b73e:	7b3b      	ldrb	r3, [r7, #12]
 800b740:	461a      	mov	r2, r3
 800b742:	4b52      	ldr	r3, [pc, #328]	; (800b88c <mix_sub_columns+0x28c>)
 800b744:	5c9a      	ldrb	r2, [r3, r2]
 800b746:	7c7b      	ldrb	r3, [r7, #17]
 800b748:	4619      	mov	r1, r3
 800b74a:	4b50      	ldr	r3, [pc, #320]	; (800b88c <mix_sub_columns+0x28c>)
 800b74c:	5c5b      	ldrb	r3, [r3, r1]
 800b74e:	4053      	eors	r3, r2
 800b750:	b2da      	uxtb	r2, r3
 800b752:	7dbb      	ldrb	r3, [r7, #22]
 800b754:	4619      	mov	r1, r3
 800b756:	4b4b      	ldr	r3, [pc, #300]	; (800b884 <mix_sub_columns+0x284>)
 800b758:	5c5b      	ldrb	r3, [r3, r1]
 800b75a:	4053      	eors	r3, r2
 800b75c:	b2d9      	uxtb	r1, r3
 800b75e:	7afb      	ldrb	r3, [r7, #11]
 800b760:	461a      	mov	r2, r3
 800b762:	4b49      	ldr	r3, [pc, #292]	; (800b888 <mix_sub_columns+0x288>)
 800b764:	5c9a      	ldrb	r2, [r3, r2]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3306      	adds	r3, #6
 800b76a:	404a      	eors	r2, r1
 800b76c:	b2d2      	uxtb	r2, r2
 800b76e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b770:	7b3b      	ldrb	r3, [r7, #12]
 800b772:	461a      	mov	r2, r3
 800b774:	4b44      	ldr	r3, [pc, #272]	; (800b888 <mix_sub_columns+0x288>)
 800b776:	5c9a      	ldrb	r2, [r3, r2]
 800b778:	7c7b      	ldrb	r3, [r7, #17]
 800b77a:	4619      	mov	r1, r3
 800b77c:	4b43      	ldr	r3, [pc, #268]	; (800b88c <mix_sub_columns+0x28c>)
 800b77e:	5c5b      	ldrb	r3, [r3, r1]
 800b780:	4053      	eors	r3, r2
 800b782:	b2da      	uxtb	r2, r3
 800b784:	7dbb      	ldrb	r3, [r7, #22]
 800b786:	4619      	mov	r1, r3
 800b788:	4b40      	ldr	r3, [pc, #256]	; (800b88c <mix_sub_columns+0x28c>)
 800b78a:	5c5b      	ldrb	r3, [r3, r1]
 800b78c:	4053      	eors	r3, r2
 800b78e:	b2d9      	uxtb	r1, r3
 800b790:	7afb      	ldrb	r3, [r7, #11]
 800b792:	461a      	mov	r2, r3
 800b794:	4b3b      	ldr	r3, [pc, #236]	; (800b884 <mix_sub_columns+0x284>)
 800b796:	5c9a      	ldrb	r2, [r3, r2]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3307      	adds	r3, #7
 800b79c:	404a      	eors	r2, r1
 800b79e:	b2d2      	uxtb	r2, r2
 800b7a0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b7a2:	7c3b      	ldrb	r3, [r7, #16]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	4b37      	ldr	r3, [pc, #220]	; (800b884 <mix_sub_columns+0x284>)
 800b7a8:	5c9a      	ldrb	r2, [r3, r2]
 800b7aa:	7d7b      	ldrb	r3, [r7, #21]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4b36      	ldr	r3, [pc, #216]	; (800b888 <mix_sub_columns+0x288>)
 800b7b0:	5c5b      	ldrb	r3, [r3, r1]
 800b7b2:	4053      	eors	r3, r2
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	7abb      	ldrb	r3, [r7, #10]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4b34      	ldr	r3, [pc, #208]	; (800b88c <mix_sub_columns+0x28c>)
 800b7bc:	5c5b      	ldrb	r3, [r3, r1]
 800b7be:	4053      	eors	r3, r2
 800b7c0:	b2d9      	uxtb	r1, r3
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	4b31      	ldr	r3, [pc, #196]	; (800b88c <mix_sub_columns+0x28c>)
 800b7c8:	5c9a      	ldrb	r2, [r3, r2]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	404a      	eors	r2, r1
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b7d4:	7c3b      	ldrb	r3, [r7, #16]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	4b2c      	ldr	r3, [pc, #176]	; (800b88c <mix_sub_columns+0x28c>)
 800b7da:	5c9a      	ldrb	r2, [r3, r2]
 800b7dc:	7d7b      	ldrb	r3, [r7, #21]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4b28      	ldr	r3, [pc, #160]	; (800b884 <mix_sub_columns+0x284>)
 800b7e2:	5c5b      	ldrb	r3, [r3, r1]
 800b7e4:	4053      	eors	r3, r2
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	7abb      	ldrb	r3, [r7, #10]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4b26      	ldr	r3, [pc, #152]	; (800b888 <mix_sub_columns+0x288>)
 800b7ee:	5c5b      	ldrb	r3, [r3, r1]
 800b7f0:	4053      	eors	r3, r2
 800b7f2:	b2d9      	uxtb	r1, r3
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	4b24      	ldr	r3, [pc, #144]	; (800b88c <mix_sub_columns+0x28c>)
 800b7fa:	5c9a      	ldrb	r2, [r3, r2]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3309      	adds	r3, #9
 800b800:	404a      	eors	r2, r1
 800b802:	b2d2      	uxtb	r2, r2
 800b804:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b806:	7c3b      	ldrb	r3, [r7, #16]
 800b808:	461a      	mov	r2, r3
 800b80a:	4b20      	ldr	r3, [pc, #128]	; (800b88c <mix_sub_columns+0x28c>)
 800b80c:	5c9a      	ldrb	r2, [r3, r2]
 800b80e:	7d7b      	ldrb	r3, [r7, #21]
 800b810:	4619      	mov	r1, r3
 800b812:	4b1e      	ldr	r3, [pc, #120]	; (800b88c <mix_sub_columns+0x28c>)
 800b814:	5c5b      	ldrb	r3, [r3, r1]
 800b816:	4053      	eors	r3, r2
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	7abb      	ldrb	r3, [r7, #10]
 800b81c:	4619      	mov	r1, r3
 800b81e:	4b19      	ldr	r3, [pc, #100]	; (800b884 <mix_sub_columns+0x284>)
 800b820:	5c5b      	ldrb	r3, [r3, r1]
 800b822:	4053      	eors	r3, r2
 800b824:	b2d9      	uxtb	r1, r3
 800b826:	7bfb      	ldrb	r3, [r7, #15]
 800b828:	461a      	mov	r2, r3
 800b82a:	4b17      	ldr	r3, [pc, #92]	; (800b888 <mix_sub_columns+0x288>)
 800b82c:	5c9a      	ldrb	r2, [r3, r2]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	330a      	adds	r3, #10
 800b832:	404a      	eors	r2, r1
 800b834:	b2d2      	uxtb	r2, r2
 800b836:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b838:	7c3b      	ldrb	r3, [r7, #16]
 800b83a:	461a      	mov	r2, r3
 800b83c:	4b12      	ldr	r3, [pc, #72]	; (800b888 <mix_sub_columns+0x288>)
 800b83e:	5c9a      	ldrb	r2, [r3, r2]
 800b840:	7d7b      	ldrb	r3, [r7, #21]
 800b842:	4619      	mov	r1, r3
 800b844:	4b11      	ldr	r3, [pc, #68]	; (800b88c <mix_sub_columns+0x28c>)
 800b846:	5c5b      	ldrb	r3, [r3, r1]
 800b848:	4053      	eors	r3, r2
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	7abb      	ldrb	r3, [r7, #10]
 800b84e:	4619      	mov	r1, r3
 800b850:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <mix_sub_columns+0x28c>)
 800b852:	5c5b      	ldrb	r3, [r3, r1]
 800b854:	4053      	eors	r3, r2
 800b856:	b2d9      	uxtb	r1, r3
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	461a      	mov	r2, r3
 800b85c:	4b09      	ldr	r3, [pc, #36]	; (800b884 <mix_sub_columns+0x284>)
 800b85e:	5c9a      	ldrb	r2, [r3, r2]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	330b      	adds	r3, #11
 800b864:	404a      	eors	r2, r1
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b86a:	7d3b      	ldrb	r3, [r7, #20]
 800b86c:	461a      	mov	r2, r3
 800b86e:	4b05      	ldr	r3, [pc, #20]	; (800b884 <mix_sub_columns+0x284>)
 800b870:	5c9a      	ldrb	r2, [r3, r2]
 800b872:	7a7b      	ldrb	r3, [r7, #9]
 800b874:	4619      	mov	r1, r3
 800b876:	4b04      	ldr	r3, [pc, #16]	; (800b888 <mix_sub_columns+0x288>)
 800b878:	5c5b      	ldrb	r3, [r3, r1]
 800b87a:	4053      	eors	r3, r2
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	7bbb      	ldrb	r3, [r7, #14]
 800b880:	4619      	mov	r1, r3
 800b882:	e005      	b.n	800b890 <mix_sub_columns+0x290>
 800b884:	0801bf20 	.word	0x0801bf20
 800b888:	0801c020 	.word	0x0801c020
 800b88c:	0801be20 	.word	0x0801be20
 800b890:	4b2d      	ldr	r3, [pc, #180]	; (800b948 <mix_sub_columns+0x348>)
 800b892:	5c5b      	ldrb	r3, [r3, r1]
 800b894:	4053      	eors	r3, r2
 800b896:	b2d9      	uxtb	r1, r3
 800b898:	7cfb      	ldrb	r3, [r7, #19]
 800b89a:	461a      	mov	r2, r3
 800b89c:	4b2a      	ldr	r3, [pc, #168]	; (800b948 <mix_sub_columns+0x348>)
 800b89e:	5c9a      	ldrb	r2, [r3, r2]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	330c      	adds	r3, #12
 800b8a4:	404a      	eors	r2, r1
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b8aa:	7d3b      	ldrb	r3, [r7, #20]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	4b26      	ldr	r3, [pc, #152]	; (800b948 <mix_sub_columns+0x348>)
 800b8b0:	5c9a      	ldrb	r2, [r3, r2]
 800b8b2:	7a7b      	ldrb	r3, [r7, #9]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4b25      	ldr	r3, [pc, #148]	; (800b94c <mix_sub_columns+0x34c>)
 800b8b8:	5c5b      	ldrb	r3, [r3, r1]
 800b8ba:	4053      	eors	r3, r2
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	4b23      	ldr	r3, [pc, #140]	; (800b950 <mix_sub_columns+0x350>)
 800b8c4:	5c5b      	ldrb	r3, [r3, r1]
 800b8c6:	4053      	eors	r3, r2
 800b8c8:	b2d9      	uxtb	r1, r3
 800b8ca:	7cfb      	ldrb	r3, [r7, #19]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4b1e      	ldr	r3, [pc, #120]	; (800b948 <mix_sub_columns+0x348>)
 800b8d0:	5c9a      	ldrb	r2, [r3, r2]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	330d      	adds	r3, #13
 800b8d6:	404a      	eors	r2, r1
 800b8d8:	b2d2      	uxtb	r2, r2
 800b8da:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b8dc:	7d3b      	ldrb	r3, [r7, #20]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4b19      	ldr	r3, [pc, #100]	; (800b948 <mix_sub_columns+0x348>)
 800b8e2:	5c9a      	ldrb	r2, [r3, r2]
 800b8e4:	7a7b      	ldrb	r3, [r7, #9]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4b17      	ldr	r3, [pc, #92]	; (800b948 <mix_sub_columns+0x348>)
 800b8ea:	5c5b      	ldrb	r3, [r3, r1]
 800b8ec:	4053      	eors	r3, r2
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	4b15      	ldr	r3, [pc, #84]	; (800b94c <mix_sub_columns+0x34c>)
 800b8f6:	5c5b      	ldrb	r3, [r3, r1]
 800b8f8:	4053      	eors	r3, r2
 800b8fa:	b2d9      	uxtb	r1, r3
 800b8fc:	7cfb      	ldrb	r3, [r7, #19]
 800b8fe:	461a      	mov	r2, r3
 800b900:	4b13      	ldr	r3, [pc, #76]	; (800b950 <mix_sub_columns+0x350>)
 800b902:	5c9a      	ldrb	r2, [r3, r2]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	330e      	adds	r3, #14
 800b908:	404a      	eors	r2, r1
 800b90a:	b2d2      	uxtb	r2, r2
 800b90c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b90e:	7d3b      	ldrb	r3, [r7, #20]
 800b910:	461a      	mov	r2, r3
 800b912:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <mix_sub_columns+0x350>)
 800b914:	5c9a      	ldrb	r2, [r3, r2]
 800b916:	7a7b      	ldrb	r3, [r7, #9]
 800b918:	4619      	mov	r1, r3
 800b91a:	4b0b      	ldr	r3, [pc, #44]	; (800b948 <mix_sub_columns+0x348>)
 800b91c:	5c5b      	ldrb	r3, [r3, r1]
 800b91e:	4053      	eors	r3, r2
 800b920:	b2da      	uxtb	r2, r3
 800b922:	7bbb      	ldrb	r3, [r7, #14]
 800b924:	4619      	mov	r1, r3
 800b926:	4b08      	ldr	r3, [pc, #32]	; (800b948 <mix_sub_columns+0x348>)
 800b928:	5c5b      	ldrb	r3, [r3, r1]
 800b92a:	4053      	eors	r3, r2
 800b92c:	b2d9      	uxtb	r1, r3
 800b92e:	7cfb      	ldrb	r3, [r7, #19]
 800b930:	461a      	mov	r2, r3
 800b932:	4b06      	ldr	r3, [pc, #24]	; (800b94c <mix_sub_columns+0x34c>)
 800b934:	5c9a      	ldrb	r2, [r3, r2]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	330f      	adds	r3, #15
 800b93a:	404a      	eors	r2, r1
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	701a      	strb	r2, [r3, #0]
  }
 800b940:	bf00      	nop
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	0801be20 	.word	0x0801be20
 800b94c:	0801bf20 	.word	0x0801bf20
 800b950:	0801c020 	.word	0x0801c020

0800b954 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	460b      	mov	r3, r1
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b962:	7afb      	ldrb	r3, [r7, #11]
 800b964:	3b10      	subs	r3, #16
 800b966:	2b10      	cmp	r3, #16
 800b968:	bf8c      	ite	hi
 800b96a:	2201      	movhi	r2, #1
 800b96c:	2200      	movls	r2, #0
 800b96e:	b2d2      	uxtb	r2, r2
 800b970:	2a00      	cmp	r2, #0
 800b972:	d10d      	bne.n	800b990 <lorawan_aes_set_key+0x3c>
 800b974:	2201      	movs	r2, #1
 800b976:	fa02 f303 	lsl.w	r3, r2, r3
 800b97a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b97e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b982:	2b00      	cmp	r3, #0
 800b984:	bf14      	ite	ne
 800b986:	2301      	movne	r3, #1
 800b988:	2300      	moveq	r3, #0
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d105      	bne.n	800b99c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b998:	23ff      	movs	r3, #255	; 0xff
 800b99a:	e0b2      	b.n	800bb02 <lorawan_aes_set_key+0x1ae>
        break;
 800b99c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7afa      	ldrb	r2, [r7, #11]
 800b9a2:	68f9      	ldr	r1, [r7, #12]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fbfa 	bl	800b19e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b9aa:	7afb      	ldrb	r3, [r7, #11]
 800b9ac:	331c      	adds	r3, #28
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b9b4:	7c7b      	ldrb	r3, [r7, #17]
 800b9b6:	091b      	lsrs	r3, r3, #4
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	75fb      	strb	r3, [r7, #23]
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	75bb      	strb	r3, [r7, #22]
 800b9cc:	e093      	b.n	800baf6 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	3b04      	subs	r3, #4
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	5cd3      	ldrb	r3, [r2, r3]
 800b9d6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	3b03      	subs	r3, #3
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	5cd3      	ldrb	r3, [r2, r3]
 800b9e0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	3b02      	subs	r3, #2
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	5cd3      	ldrb	r3, [r2, r3]
 800b9ea:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	5cd3      	ldrb	r3, [r2, r3]
 800b9f4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
 800b9f8:	7afa      	ldrb	r2, [r7, #11]
 800b9fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9fe:	fb01 f202 	mul.w	r2, r1, r2
 800ba02:	1a9b      	subs	r3, r3, r2
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d127      	bne.n	800ba5a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ba0a:	7d7b      	ldrb	r3, [r7, #21]
 800ba0c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba0e:	7d3b      	ldrb	r3, [r7, #20]
 800ba10:	4a3e      	ldr	r2, [pc, #248]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba12:	5cd2      	ldrb	r2, [r2, r3]
 800ba14:	7dbb      	ldrb	r3, [r7, #22]
 800ba16:	4053      	eors	r3, r2
 800ba18:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba1a:	7cfb      	ldrb	r3, [r7, #19]
 800ba1c:	4a3b      	ldr	r2, [pc, #236]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba1e:	5cd3      	ldrb	r3, [r2, r3]
 800ba20:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba22:	7cbb      	ldrb	r3, [r7, #18]
 800ba24:	4a39      	ldr	r2, [pc, #228]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba26:	5cd3      	ldrb	r3, [r2, r3]
 800ba28:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ba2a:	7c3b      	ldrb	r3, [r7, #16]
 800ba2c:	4a37      	ldr	r2, [pc, #220]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba2e:	5cd3      	ldrb	r3, [r2, r3]
 800ba30:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ba32:	7dbb      	ldrb	r3, [r7, #22]
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	b25a      	sxtb	r2, r3
 800ba38:	7dbb      	ldrb	r3, [r7, #22]
 800ba3a:	09db      	lsrs	r3, r3, #7
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	4619      	mov	r1, r3
 800ba40:	0049      	lsls	r1, r1, #1
 800ba42:	440b      	add	r3, r1
 800ba44:	4619      	mov	r1, r3
 800ba46:	00c8      	lsls	r0, r1, #3
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	440b      	add	r3, r1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	b25b      	sxtb	r3, r3
 800ba52:	4053      	eors	r3, r2
 800ba54:	b25b      	sxtb	r3, r3
 800ba56:	75bb      	strb	r3, [r7, #22]
 800ba58:	e01c      	b.n	800ba94 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ba5a:	7afb      	ldrb	r3, [r7, #11]
 800ba5c:	2b18      	cmp	r3, #24
 800ba5e:	d919      	bls.n	800ba94 <lorawan_aes_set_key+0x140>
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	7afa      	ldrb	r2, [r7, #11]
 800ba64:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba68:	fb01 f202 	mul.w	r2, r1, r2
 800ba6c:	1a9b      	subs	r3, r3, r2
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b10      	cmp	r3, #16
 800ba72:	d10f      	bne.n	800ba94 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800ba74:	7d7b      	ldrb	r3, [r7, #21]
 800ba76:	4a25      	ldr	r2, [pc, #148]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba78:	5cd3      	ldrb	r3, [r2, r3]
 800ba7a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ba7c:	7d3b      	ldrb	r3, [r7, #20]
 800ba7e:	4a23      	ldr	r2, [pc, #140]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba80:	5cd3      	ldrb	r3, [r2, r3]
 800ba82:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ba84:	7cfb      	ldrb	r3, [r7, #19]
 800ba86:	4a21      	ldr	r2, [pc, #132]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba88:	5cd3      	ldrb	r3, [r2, r3]
 800ba8a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ba8c:	7cbb      	ldrb	r3, [r7, #18]
 800ba8e:	4a1f      	ldr	r2, [pc, #124]	; (800bb0c <lorawan_aes_set_key+0x1b8>)
 800ba90:	5cd3      	ldrb	r3, [r2, r3]
 800ba92:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ba94:	7dfa      	ldrb	r2, [r7, #23]
 800ba96:	7afb      	ldrb	r3, [r7, #11]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ba9c:	7c3b      	ldrb	r3, [r7, #16]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	5cd1      	ldrb	r1, [r2, r3]
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
 800baa4:	7d7a      	ldrb	r2, [r7, #21]
 800baa6:	404a      	eors	r2, r1
 800baa8:	b2d1      	uxtb	r1, r2
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800baae:	7c3b      	ldrb	r3, [r7, #16]
 800bab0:	3301      	adds	r3, #1
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	5cd1      	ldrb	r1, [r2, r3]
 800bab6:	7dfb      	ldrb	r3, [r7, #23]
 800bab8:	3301      	adds	r3, #1
 800baba:	7d3a      	ldrb	r2, [r7, #20]
 800babc:	404a      	eors	r2, r1
 800babe:	b2d1      	uxtb	r1, r2
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bac4:	7c3b      	ldrb	r3, [r7, #16]
 800bac6:	3302      	adds	r3, #2
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	5cd1      	ldrb	r1, [r2, r3]
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	3302      	adds	r3, #2
 800bad0:	7cfa      	ldrb	r2, [r7, #19]
 800bad2:	404a      	eors	r2, r1
 800bad4:	b2d1      	uxtb	r1, r2
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bada:	7c3b      	ldrb	r3, [r7, #16]
 800badc:	3303      	adds	r3, #3
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	5cd1      	ldrb	r1, [r2, r3]
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	3303      	adds	r3, #3
 800bae6:	7cba      	ldrb	r2, [r7, #18]
 800bae8:	404a      	eors	r2, r1
 800baea:	b2d1      	uxtb	r1, r2
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	3304      	adds	r3, #4
 800baf4:	75fb      	strb	r3, [r7, #23]
 800baf6:	7dfa      	ldrb	r2, [r7, #23]
 800baf8:	7c7b      	ldrb	r3, [r7, #17]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	f4ff af67 	bcc.w	800b9ce <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	0801be20 	.word	0x0801be20

0800bb10 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b08a      	sub	sp, #40	; 0x28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d038      	beq.n	800bb98 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	f107 0314 	add.w	r3, r7, #20
 800bb2c:	68f9      	ldr	r1, [r7, #12]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fc07 	bl	800b342 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb3a:	e014      	b.n	800bb66 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bb3c:	f107 0314 	add.w	r3, r7, #20
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff fd5d 	bl	800b600 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb4c:	0112      	lsls	r2, r2, #4
 800bb4e:	441a      	add	r2, r3
 800bb50:	f107 0314 	add.w	r3, r7, #20
 800bb54:	4611      	mov	r1, r2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff fcab 	bl	800b4b2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb60:	3301      	adds	r3, #1
 800bb62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d3e3      	bcc.n	800bb3c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bb74:	f107 0314 	add.w	r3, r7, #20
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fca7 	bl	800b4cc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb84:	0112      	lsls	r2, r2, #4
 800bb86:	441a      	add	r2, r3
 800bb88:	f107 0314 	add.w	r3, r7, #20
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	68b8      	ldr	r0, [r7, #8]
 800bb90:	f7ff fbd7 	bl	800b342 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	e000      	b.n	800bb9a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bb98:	23ff      	movs	r3, #255	; 0xff
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3728      	adds	r7, #40	; 0x28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
	...

0800bba4 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800bba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba6:	b09d      	sub	sp, #116	; 0x74
 800bba8:	af10      	add	r7, sp, #64	; 0x40
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bbb0:	2306      	movs	r3, #6
 800bbb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bbb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 f9a7 	bl	800bf14 <SecureElementGetKeyByID>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bbcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f040 80b0 	bne.w	800bd36 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bbd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bbde:	4b58      	ldr	r3, [pc, #352]	; (800bd40 <PrintKey+0x19c>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	2002      	movs	r0, #2
 800bbe6:	f00f fae1 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bbea:	e056      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bbec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d106      	bne.n	800bc02 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bbf4:	4b53      	ldr	r3, [pc, #332]	; (800bd44 <PrintKey+0x1a0>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	2002      	movs	r0, #2
 800bbfc:	f00f fad6 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bc00:	e04b      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bc02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d106      	bne.n	800bc18 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bc0a:	4b4f      	ldr	r3, [pc, #316]	; (800bd48 <PrintKey+0x1a4>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2100      	movs	r1, #0
 800bc10:	2002      	movs	r0, #2
 800bc12:	f00f facb 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bc16:	e040      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d106      	bne.n	800bc2e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bc20:	4b4a      	ldr	r3, [pc, #296]	; (800bd4c <PrintKey+0x1a8>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	2100      	movs	r1, #0
 800bc26:	2002      	movs	r0, #2
 800bc28:	f00f fac0 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bc2c:	e035      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bc2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d106      	bne.n	800bc44 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bc36:	4b46      	ldr	r3, [pc, #280]	; (800bd50 <PrintKey+0x1ac>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	2002      	movs	r0, #2
 800bc3e:	f00f fab5 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bc42:	e02a      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc48:	2b7f      	cmp	r3, #127	; 0x7f
 800bc4a:	d106      	bne.n	800bc5a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bc4c:	4b41      	ldr	r3, [pc, #260]	; (800bd54 <PrintKey+0x1b0>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	2100      	movs	r1, #0
 800bc52:	2002      	movs	r0, #2
 800bc54:	f00f faaa 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bc58:	e01f      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bc5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc5e:	2b80      	cmp	r3, #128	; 0x80
 800bc60:	d106      	bne.n	800bc70 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bc62:	4b3d      	ldr	r3, [pc, #244]	; (800bd58 <PrintKey+0x1b4>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	2100      	movs	r1, #0
 800bc68:	2002      	movs	r0, #2
 800bc6a:	f00f fa9f 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bc6e:	e014      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bc70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc74:	2b81      	cmp	r3, #129	; 0x81
 800bc76:	d106      	bne.n	800bc86 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bc78:	4b38      	ldr	r3, [pc, #224]	; (800bd5c <PrintKey+0x1b8>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	2002      	movs	r0, #2
 800bc80:	f00f fa94 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800bc84:	e009      	b.n	800bc9a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bc86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc8a:	2b82      	cmp	r3, #130	; 0x82
 800bc8c:	d105      	bne.n	800bc9a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bc8e:	4b34      	ldr	r3, [pc, #208]	; (800bd60 <PrintKey+0x1bc>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	2100      	movs	r1, #0
 800bc94:	2002      	movs	r0, #2
 800bc96:	f00f fa89 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	789b      	ldrb	r3, [r3, #2]
 800bca4:	461c      	mov	r4, r3
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	78db      	ldrb	r3, [r3, #3]
 800bcaa:	461d      	mov	r5, r3
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	791b      	ldrb	r3, [r3, #4]
 800bcb0:	461e      	mov	r6, r3
 800bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb4:	795b      	ldrb	r3, [r3, #5]
 800bcb6:	623b      	str	r3, [r7, #32]
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	799b      	ldrb	r3, [r3, #6]
 800bcbc:	61fb      	str	r3, [r7, #28]
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	79db      	ldrb	r3, [r3, #7]
 800bcc2:	61bb      	str	r3, [r7, #24]
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	7a1b      	ldrb	r3, [r3, #8]
 800bcc8:	617b      	str	r3, [r7, #20]
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	7a5b      	ldrb	r3, [r3, #9]
 800bcce:	613b      	str	r3, [r7, #16]
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	7a9b      	ldrb	r3, [r3, #10]
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	7adb      	ldrb	r3, [r3, #11]
 800bcda:	60bb      	str	r3, [r7, #8]
 800bcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcde:	7b1b      	ldrb	r3, [r3, #12]
 800bce0:	607b      	str	r3, [r7, #4]
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	7b5b      	ldrb	r3, [r3, #13]
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	7b9b      	ldrb	r3, [r3, #14]
 800bcec:	4619      	mov	r1, r3
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	7bdb      	ldrb	r3, [r3, #15]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	7c1b      	ldrb	r3, [r3, #16]
 800bcf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcfa:	920e      	str	r2, [sp, #56]	; 0x38
 800bcfc:	910d      	str	r1, [sp, #52]	; 0x34
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	920c      	str	r2, [sp, #48]	; 0x30
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	920a      	str	r2, [sp, #40]	; 0x28
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	9208      	str	r2, [sp, #32]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	9207      	str	r2, [sp, #28]
 800bd16:	69ba      	ldr	r2, [r7, #24]
 800bd18:	9206      	str	r2, [sp, #24]
 800bd1a:	69fa      	ldr	r2, [r7, #28]
 800bd1c:	9205      	str	r2, [sp, #20]
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	9603      	str	r6, [sp, #12]
 800bd24:	9502      	str	r5, [sp, #8]
 800bd26:	9401      	str	r4, [sp, #4]
 800bd28:	9000      	str	r0, [sp, #0]
 800bd2a:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <PrintKey+0x1c0>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2100      	movs	r1, #0
 800bd30:	2002      	movs	r0, #2
 800bd32:	f00f fa3b 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800bd36:	bf00      	nop
 800bd38:	3734      	adds	r7, #52	; 0x34
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	0801b8a0 	.word	0x0801b8a0
 800bd44:	0801b8b8 	.word	0x0801b8b8
 800bd48:	0801b8d0 	.word	0x0801b8d0
 800bd4c:	0801b8e8 	.word	0x0801b8e8
 800bd50:	0801b900 	.word	0x0801b900
 800bd54:	0801b918 	.word	0x0801b918
 800bd58:	0801b930 	.word	0x0801b930
 800bd5c:	0801b948 	.word	0x0801b948
 800bd60:	0801b960 	.word	0x0801b960
 800bd64:	0801b978 	.word	0x0801b978

0800bd68 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6039      	str	r1, [r7, #0]
 800bd72:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bd74:	2300      	movs	r3, #0
 800bd76:	73fb      	strb	r3, [r7, #15]
 800bd78:	e01a      	b.n	800bdb0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bd7a:	4b12      	ldr	r3, [pc, #72]	; (800bdc4 <GetKeyByID+0x5c>)
 800bd7c:	6819      	ldr	r1, [r3, #0]
 800bd7e:	7bfa      	ldrb	r2, [r7, #15]
 800bd80:	4613      	mov	r3, r2
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	4413      	add	r3, r2
 800bd86:	440b      	add	r3, r1
 800bd88:	3310      	adds	r3, #16
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	79fa      	ldrb	r2, [r7, #7]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d10b      	bne.n	800bdaa <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bd92:	4b0c      	ldr	r3, [pc, #48]	; (800bdc4 <GetKeyByID+0x5c>)
 800bd94:	6819      	ldr	r1, [r3, #0]
 800bd96:	7bfa      	ldrb	r2, [r7, #15]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	011b      	lsls	r3, r3, #4
 800bd9c:	4413      	add	r3, r2
 800bd9e:	3310      	adds	r3, #16
 800bda0:	18ca      	adds	r2, r1, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bda6:	2300      	movs	r3, #0
 800bda8:	e006      	b.n	800bdb8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
 800bdac:	3301      	adds	r3, #1
 800bdae:	73fb      	strb	r3, [r7, #15]
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	2b09      	cmp	r3, #9
 800bdb4:	d9e1      	bls.n	800bd7a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bdb6:	2303      	movs	r3, #3
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bc80      	pop	{r7}
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	2000071c 	.word	0x2000071c

0800bdc8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bdc8:	b590      	push	{r4, r7, lr}
 800bdca:	b0d1      	sub	sp, #324	; 0x144
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800bdd2:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800bdd6:	6020      	str	r0, [r4, #0]
 800bdd8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800bddc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800bde0:	6001      	str	r1, [r0, #0]
 800bde2:	4619      	mov	r1, r3
 800bde4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bde8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bdec:	801a      	strh	r2, [r3, #0]
 800bdee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bdf2:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800bdf6:	460a      	mov	r2, r1
 800bdf8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bdfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bdfe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <ComputeCmac+0x48>
 800be08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be10:	2302      	movs	r3, #2
 800be12:	e05c      	b.n	800bece <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800be14:	f107 0314 	add.w	r3, r7, #20
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe ff1b 	bl	800ac54 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800be1e:	f107 0210 	add.w	r2, r7, #16
 800be22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be26:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	4611      	mov	r1, r2
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff ff9a 	bl	800bd68 <GetKeyByID>
 800be34:	4603      	mov	r3, r0
 800be36:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be3a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d143      	bne.n	800beca <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800be42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	f107 0314 	add.w	r3, r7, #20
 800be52:	4611      	mov	r1, r2
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe ff16 	bl	800ac86 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800be5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d009      	beq.n	800be7c <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800be68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800be70:	f107 0014 	add.w	r0, r7, #20
 800be74:	2210      	movs	r2, #16
 800be76:	6819      	ldr	r1, [r3, #0]
 800be78:	f7fe ff14 	bl	800aca4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800be7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be80:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800be84:	881a      	ldrh	r2, [r3, #0]
 800be86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800be8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800be8e:	f107 0014 	add.w	r0, r7, #20
 800be92:	6819      	ldr	r1, [r3, #0]
 800be94:	f7fe ff06 	bl	800aca4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800be98:	f107 0214 	add.w	r2, r7, #20
 800be9c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bea0:	4611      	mov	r1, r2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe ffc0 	bl	800ae28 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bea8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800beac:	061a      	lsls	r2, r3, #24
 800beae:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800beb2:	041b      	lsls	r3, r3, #16
 800beb4:	431a      	orrs	r2, r3
 800beb6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800beba:	021b      	lsls	r3, r3, #8
 800bebc:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bebe:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bec2:	431a      	orrs	r2, r3
 800bec4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bec8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800beca:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bece:	4618      	mov	r0, r3
 800bed0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd90      	pop	{r4, r7, pc}

0800bed8 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bee8:	2302      	movs	r3, #2
 800beea:	e00a      	b.n	800bf02 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800beec:	4a07      	ldr	r2, [pc, #28]	; (800bf0c <SecureElementInit+0x34>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bef2:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <SecureElementInit+0x34>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	22c0      	movs	r2, #192	; 0xc0
 800bef8:	4905      	ldr	r1, [pc, #20]	; (800bf10 <SecureElementInit+0x38>)
 800befa:	4618      	mov	r0, r3
 800befc:	f00a fe01 	bl	8016b02 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	2000071c 	.word	0x2000071c
 800bf10:	0801c2b0 	.word	0x0801c2b0

0800bf14 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
 800bf24:	e01a      	b.n	800bf5c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bf26:	4b12      	ldr	r3, [pc, #72]	; (800bf70 <SecureElementGetKeyByID+0x5c>)
 800bf28:	6819      	ldr	r1, [r3, #0]
 800bf2a:	7bfa      	ldrb	r2, [r7, #15]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	4413      	add	r3, r2
 800bf32:	440b      	add	r3, r1
 800bf34:	3310      	adds	r3, #16
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	79fa      	ldrb	r2, [r7, #7]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d10b      	bne.n	800bf56 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bf3e:	4b0c      	ldr	r3, [pc, #48]	; (800bf70 <SecureElementGetKeyByID+0x5c>)
 800bf40:	6819      	ldr	r1, [r3, #0]
 800bf42:	7bfa      	ldrb	r2, [r7, #15]
 800bf44:	4613      	mov	r3, r2
 800bf46:	011b      	lsls	r3, r3, #4
 800bf48:	4413      	add	r3, r2
 800bf4a:	3310      	adds	r3, #16
 800bf4c:	18ca      	adds	r2, r1, r3
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bf52:	2300      	movs	r3, #0
 800bf54:	e006      	b.n	800bf64 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	73fb      	strb	r3, [r7, #15]
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	2b09      	cmp	r3, #9
 800bf60:	d9e1      	bls.n	800bf26 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bf62:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bc80      	pop	{r7}
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	2000071c 	.word	0x2000071c

0800bf74 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800bf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf76:	b08b      	sub	sp, #44	; 0x2c
 800bf78:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bf7a:	4b3f      	ldr	r3, [pc, #252]	; (800c078 <SecureElementPrintKeys+0x104>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2100      	movs	r1, #0
 800bf80:	2002      	movs	r0, #2
 800bf82:	f00f f913 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bf86:	2000      	movs	r0, #0
 800bf88:	f7ff fe0c 	bl	800bba4 <PrintKey>
    PrintKey(NWK_KEY);
 800bf8c:	2001      	movs	r0, #1
 800bf8e:	f7ff fe09 	bl	800bba4 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bf92:	4b3a      	ldr	r3, [pc, #232]	; (800c07c <SecureElementPrintKeys+0x108>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	2100      	movs	r1, #0
 800bf98:	2002      	movs	r0, #2
 800bf9a:	f00f f907 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bf9e:	2003      	movs	r0, #3
 800bfa0:	f7ff fe00 	bl	800bba4 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bfa4:	2002      	movs	r0, #2
 800bfa6:	f7ff fdfd 	bl	800bba4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800bfaa:	4b35      	ldr	r3, [pc, #212]	; (800c080 <SecureElementPrintKeys+0x10c>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	2100      	movs	r1, #0
 800bfb0:	2002      	movs	r0, #2
 800bfb2:	f00f f8fb 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bfb6:	4b33      	ldr	r3, [pc, #204]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4b31      	ldr	r3, [pc, #196]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	785b      	ldrb	r3, [r3, #1]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4b2f      	ldr	r3, [pc, #188]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	789b      	ldrb	r3, [r3, #2]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	4b2d      	ldr	r3, [pc, #180]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	78db      	ldrb	r3, [r3, #3]
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	4b2b      	ldr	r3, [pc, #172]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	791b      	ldrb	r3, [r3, #4]
 800bfdc:	461d      	mov	r5, r3
 800bfde:	4b29      	ldr	r3, [pc, #164]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	795b      	ldrb	r3, [r3, #5]
 800bfe4:	461e      	mov	r6, r3
 800bfe6:	4b27      	ldr	r3, [pc, #156]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	799b      	ldrb	r3, [r3, #6]
 800bfec:	607b      	str	r3, [r7, #4]
 800bfee:	4b25      	ldr	r3, [pc, #148]	; (800c084 <SecureElementPrintKeys+0x110>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	79db      	ldrb	r3, [r3, #7]
 800bff4:	9307      	str	r3, [sp, #28]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	9306      	str	r3, [sp, #24]
 800bffa:	9605      	str	r6, [sp, #20]
 800bffc:	9504      	str	r5, [sp, #16]
 800bffe:	9403      	str	r4, [sp, #12]
 800c000:	9002      	str	r0, [sp, #8]
 800c002:	9101      	str	r1, [sp, #4]
 800c004:	9200      	str	r2, [sp, #0]
 800c006:	4b20      	ldr	r3, [pc, #128]	; (800c088 <SecureElementPrintKeys+0x114>)
 800c008:	2200      	movs	r2, #0
 800c00a:	2100      	movs	r1, #0
 800c00c:	2002      	movs	r0, #2
 800c00e:	f00f f8cd 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c012:	4b1c      	ldr	r3, [pc, #112]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	7a1b      	ldrb	r3, [r3, #8]
 800c018:	461a      	mov	r2, r3
 800c01a:	4b1a      	ldr	r3, [pc, #104]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	7a5b      	ldrb	r3, [r3, #9]
 800c020:	4619      	mov	r1, r3
 800c022:	4b18      	ldr	r3, [pc, #96]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	7a9b      	ldrb	r3, [r3, #10]
 800c028:	4618      	mov	r0, r3
 800c02a:	4b16      	ldr	r3, [pc, #88]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	7adb      	ldrb	r3, [r3, #11]
 800c030:	461c      	mov	r4, r3
 800c032:	4b14      	ldr	r3, [pc, #80]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	7b1b      	ldrb	r3, [r3, #12]
 800c038:	461d      	mov	r5, r3
 800c03a:	4b12      	ldr	r3, [pc, #72]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	7b5b      	ldrb	r3, [r3, #13]
 800c040:	461e      	mov	r6, r3
 800c042:	4b10      	ldr	r3, [pc, #64]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	7b9b      	ldrb	r3, [r3, #14]
 800c048:	607b      	str	r3, [r7, #4]
 800c04a:	4b0e      	ldr	r3, [pc, #56]	; (800c084 <SecureElementPrintKeys+0x110>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	7bdb      	ldrb	r3, [r3, #15]
 800c050:	9307      	str	r3, [sp, #28]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	9306      	str	r3, [sp, #24]
 800c056:	9605      	str	r6, [sp, #20]
 800c058:	9504      	str	r5, [sp, #16]
 800c05a:	9403      	str	r4, [sp, #12]
 800c05c:	9002      	str	r0, [sp, #8]
 800c05e:	9101      	str	r1, [sp, #4]
 800c060:	9200      	str	r2, [sp, #0]
 800c062:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <SecureElementPrintKeys+0x118>)
 800c064:	2200      	movs	r2, #0
 800c066:	2100      	movs	r1, #0
 800c068:	2002      	movs	r0, #2
 800c06a:	f00f f89f 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c078:	0801b9cc 	.word	0x0801b9cc
 800c07c:	0801b9e4 	.word	0x0801b9e4
 800c080:	0801b9fc 	.word	0x0801b9fc
 800c084:	2000071c 	.word	0x2000071c
 800c088:	0801ba14 	.word	0x0801ba14
 800c08c:	0801ba54 	.word	0x0801ba54

0800c090 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800c094:	2004      	movs	r0, #4
 800c096:	f7ff fd85 	bl	800bba4 <PrintKey>
    PrintKey(MC_KE_KEY);
 800c09a:	207f      	movs	r0, #127	; 0x7f
 800c09c:	f7ff fd82 	bl	800bba4 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800c0a0:	2002      	movs	r0, #2
 800c0a2:	f7ff fd7f 	bl	800bba4 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800c0a6:	2003      	movs	r0, #3
 800c0a8:	f7ff fd7c 	bl	800bba4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	6039      	str	r1, [r7, #0]
 800c0be:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d101      	bne.n	800c0ca <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	e04c      	b.n	800c164 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	77fb      	strb	r3, [r7, #31]
 800c0ce:	e045      	b.n	800c15c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c0d0:	4b26      	ldr	r3, [pc, #152]	; (800c16c <SecureElementSetKey+0xb8>)
 800c0d2:	6819      	ldr	r1, [r3, #0]
 800c0d4:	7ffa      	ldrb	r2, [r7, #31]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	011b      	lsls	r3, r3, #4
 800c0da:	4413      	add	r3, r2
 800c0dc:	440b      	add	r3, r1
 800c0de:	3310      	adds	r3, #16
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	79fa      	ldrb	r2, [r7, #7]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d136      	bne.n	800c156 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c0e8:	79fb      	ldrb	r3, [r7, #7]
 800c0ea:	2b80      	cmp	r3, #128	; 0x80
 800c0ec:	d123      	bne.n	800c136 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c0ee:	2306      	movs	r3, #6
 800c0f0:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	f107 0310 	add.w	r3, r7, #16
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	605a      	str	r2, [r3, #4]
 800c100:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c102:	f107 030c 	add.w	r3, r7, #12
 800c106:	227f      	movs	r2, #127	; 0x7f
 800c108:	2110      	movs	r1, #16
 800c10a:	6838      	ldr	r0, [r7, #0]
 800c10c:	f000 f87d 	bl	800c20a <SecureElementAesEncrypt>
 800c110:	4603      	mov	r3, r0
 800c112:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c114:	4b15      	ldr	r3, [pc, #84]	; (800c16c <SecureElementSetKey+0xb8>)
 800c116:	6819      	ldr	r1, [r3, #0]
 800c118:	7ffa      	ldrb	r2, [r7, #31]
 800c11a:	4613      	mov	r3, r2
 800c11c:	011b      	lsls	r3, r3, #4
 800c11e:	4413      	add	r3, r2
 800c120:	3310      	adds	r3, #16
 800c122:	440b      	add	r3, r1
 800c124:	3301      	adds	r3, #1
 800c126:	f107 010c 	add.w	r1, r7, #12
 800c12a:	2210      	movs	r2, #16
 800c12c:	4618      	mov	r0, r3
 800c12e:	f00a fce8 	bl	8016b02 <memcpy1>
                return retval;
 800c132:	7fbb      	ldrb	r3, [r7, #30]
 800c134:	e016      	b.n	800c164 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c136:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <SecureElementSetKey+0xb8>)
 800c138:	6819      	ldr	r1, [r3, #0]
 800c13a:	7ffa      	ldrb	r2, [r7, #31]
 800c13c:	4613      	mov	r3, r2
 800c13e:	011b      	lsls	r3, r3, #4
 800c140:	4413      	add	r3, r2
 800c142:	3310      	adds	r3, #16
 800c144:	440b      	add	r3, r1
 800c146:	3301      	adds	r3, #1
 800c148:	2210      	movs	r2, #16
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f00a fcd8 	bl	8016b02 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c152:	2300      	movs	r3, #0
 800c154:	e006      	b.n	800c164 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c156:	7ffb      	ldrb	r3, [r7, #31]
 800c158:	3301      	adds	r3, #1
 800c15a:	77fb      	strb	r3, [r7, #31]
 800c15c:	7ffb      	ldrb	r3, [r7, #31]
 800c15e:	2b09      	cmp	r3, #9
 800c160:	d9b6      	bls.n	800c0d0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c162:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c164:	4618      	mov	r0, r3
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	2000071c 	.word	0x2000071c

0800c170 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af02      	add	r7, sp, #8
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4611      	mov	r1, r2
 800c17c:	461a      	mov	r2, r3
 800c17e:	460b      	mov	r3, r1
 800c180:	80fb      	strh	r3, [r7, #6]
 800c182:	4613      	mov	r3, r2
 800c184:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c186:	797b      	ldrb	r3, [r7, #5]
 800c188:	2b7e      	cmp	r3, #126	; 0x7e
 800c18a:	d901      	bls.n	800c190 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e009      	b.n	800c1a4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c190:	7979      	ldrb	r1, [r7, #5]
 800c192:	88fa      	ldrh	r2, [r7, #6]
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	460b      	mov	r3, r1
 800c19a:	68b9      	ldr	r1, [r7, #8]
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f7ff fe13 	bl	800bdc8 <ComputeCmac>
 800c1a2:	4603      	mov	r3, r0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af02      	add	r7, sp, #8
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	607a      	str	r2, [r7, #4]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	817b      	strh	r3, [r7, #10]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e01b      	b.n	800c202 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c1ca:	2306      	movs	r3, #6
 800c1cc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c1d2:	7a79      	ldrb	r1, [r7, #9]
 800c1d4:	897a      	ldrh	r2, [r7, #10]
 800c1d6:	f107 0310 	add.w	r3, r7, #16
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	68f9      	ldr	r1, [r7, #12]
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	f7ff fdf1 	bl	800bdc8 <ComputeCmac>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d001      	beq.n	800c1f4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c1f0:	7dfb      	ldrb	r3, [r7, #23]
 800c1f2:	e006      	b.n	800c202 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d001      	beq.n	800c200 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c200:	7dfb      	ldrb	r3, [r7, #23]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b0c2      	sub	sp, #264	; 0x108
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	4608      	mov	r0, r1
 800c214:	4611      	mov	r1, r2
 800c216:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c21a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	4603      	mov	r3, r0
 800c222:	817b      	strh	r3, [r7, #10]
 800c224:	460b      	mov	r3, r1
 800c226:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d006      	beq.n	800c23c <SecureElementAesEncrypt+0x32>
 800c22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d101      	bne.n	800c240 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c23c:	2302      	movs	r3, #2
 800c23e:	e046      	b.n	800c2ce <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c240:	897b      	ldrh	r3, [r7, #10]
 800c242:	f003 030f 	and.w	r3, r3, #15
 800c246:	b29b      	uxth	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c24c:	2305      	movs	r3, #5
 800c24e:	e03e      	b.n	800c2ce <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c250:	f107 0314 	add.w	r3, r7, #20
 800c254:	22f0      	movs	r2, #240	; 0xf0
 800c256:	2100      	movs	r1, #0
 800c258:	4618      	mov	r0, r3
 800c25a:	f00a fc8d 	bl	8016b78 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c25e:	f107 0210 	add.w	r2, r7, #16
 800c262:	7a7b      	ldrb	r3, [r7, #9]
 800c264:	4611      	mov	r1, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff fd7e 	bl	800bd68 <GetKeyByID>
 800c26c:	4603      	mov	r3, r0
 800c26e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c272:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c276:	2b00      	cmp	r3, #0
 800c278:	d127      	bne.n	800c2ca <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	3301      	adds	r3, #1
 800c27e:	f107 0214 	add.w	r2, r7, #20
 800c282:	2110      	movs	r1, #16
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff fb65 	bl	800b954 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c290:	e018      	b.n	800c2c4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c292:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	18d0      	adds	r0, r2, r3
 800c29a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c29e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c2a2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800c2a6:	6812      	ldr	r2, [r2, #0]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	f107 0214 	add.w	r2, r7, #20
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	f7ff fc2e 	bl	800bb10 <lorawan_aes_encrypt>
            block = block + 16;
 800c2b4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c2b8:	3310      	adds	r3, #16
 800c2ba:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c2be:	897b      	ldrh	r3, [r7, #10]
 800c2c0:	3b10      	subs	r3, #16
 800c2c2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c2c4:	897b      	ldrh	r3, [r7, #10]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1e3      	bne.n	800c292 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c2ca:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b088      	sub	sp, #32
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70fb      	strb	r3, [r7, #3]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	e02e      	b.n	800c350 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c2f2:	2306      	movs	r3, #6
 800c2f4:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c2f6:	78bb      	ldrb	r3, [r7, #2]
 800c2f8:	2b7f      	cmp	r3, #127	; 0x7f
 800c2fa:	d104      	bne.n	800c306 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c2fc:	78fb      	ldrb	r3, [r7, #3]
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	d001      	beq.n	800c306 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c302:	2303      	movs	r3, #3
 800c304:	e024      	b.n	800c350 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	f107 0310 	add.w	r3, r7, #16
 800c30e:	2200      	movs	r2, #0
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	605a      	str	r2, [r3, #4]
 800c314:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c316:	f107 030c 	add.w	r3, r7, #12
 800c31a:	78fa      	ldrb	r2, [r7, #3]
 800c31c:	2110      	movs	r1, #16
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff ff73 	bl	800c20a <SecureElementAesEncrypt>
 800c324:	4603      	mov	r3, r0
 800c326:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c328:	7ffb      	ldrb	r3, [r7, #31]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c32e:	7ffb      	ldrb	r3, [r7, #31]
 800c330:	e00e      	b.n	800c350 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c332:	f107 020c 	add.w	r2, r7, #12
 800c336:	78bb      	ldrb	r3, [r7, #2]
 800c338:	4611      	mov	r1, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff feba 	bl	800c0b4 <SecureElementSetKey>
 800c340:	4603      	mov	r3, r0
 800c342:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c344:	7ffb      	ldrb	r3, [r7, #31]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c34a:	7ffb      	ldrb	r3, [r7, #31]
 800c34c:	e000      	b.n	800c350 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c34e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c350:	4618      	mov	r0, r3
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	607b      	str	r3, [r7, #4]
 800c362:	4603      	mov	r3, r0
 800c364:	73fb      	strb	r3, [r7, #15]
 800c366:	4613      	mov	r3, r2
 800c368:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d005      	beq.n	800c37c <SecureElementProcessJoinAccept+0x24>
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <SecureElementProcessJoinAccept+0x24>
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c37c:	2302      	movs	r3, #2
 800c37e:	e064      	b.n	800c44a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c380:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c384:	2b21      	cmp	r3, #33	; 0x21
 800c386:	d901      	bls.n	800c38c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c388:	2305      	movs	r3, #5
 800c38a:	e05e      	b.n	800c44a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c38c:	2301      	movs	r3, #1
 800c38e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c390:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c394:	b29b      	uxth	r3, r3
 800c396:	461a      	mov	r2, r3
 800c398:	6879      	ldr	r1, [r7, #4]
 800c39a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c39c:	f00a fbb1 	bl	8016b02 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	1c58      	adds	r0, r3, #1
 800c3a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	b299      	uxth	r1, r3
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	7dfa      	ldrb	r2, [r7, #23]
 800c3b4:	f7ff ff29 	bl	800c20a <SecureElementAesEncrypt>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c3be:	2307      	movs	r3, #7
 800c3c0:	e043      	b.n	800c44a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	330b      	adds	r3, #11
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	09db      	lsrs	r3, r3, #7
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c3d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3d8:	3b04      	subs	r3, #4
 800c3da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3dc:	4413      	add	r3, r2
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c3e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3e6:	3b03      	subs	r3, #3
 800c3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ea:	4413      	add	r3, r2
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	021b      	lsls	r3, r3, #8
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c3f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3fa:	3b02      	subs	r3, #2
 800c3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fe:	4413      	add	r3, r2
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	041b      	lsls	r3, r3, #16
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	4313      	orrs	r3, r2
 800c408:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c40a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c40e:	3b01      	subs	r3, #1
 800c410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c412:	4413      	add	r3, r2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	061b      	lsls	r3, r3, #24
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10e      	bne.n	800c444 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c426:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	3b04      	subs	r3, #4
 800c42e:	b299      	uxth	r1, r3
 800c430:	2301      	movs	r3, #1
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c436:	f7ff feb9 	bl	800c1ac <SecureElementVerifyAesCmac>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d003      	beq.n	800c448 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c440:	2301      	movs	r3, #1
 800c442:	e002      	b.n	800c44a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c444:	2304      	movs	r3, #4
 800c446:	e000      	b.n	800c44a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c462:	2302      	movs	r3, #2
 800c464:	e006      	b.n	800c474 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <SecureElementRandomNumber+0x28>)
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	4798      	blx	r3
 800c46c:	4602      	mov	r2, r0
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	0801c168 	.word	0x0801c168

0800c480 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c48e:	2302      	movs	r3, #2
 800c490:	e007      	b.n	800c4a2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c492:	4b06      	ldr	r3, [pc, #24]	; (800c4ac <SecureElementSetDevEui+0x2c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2208      	movs	r2, #8
 800c498:	6879      	ldr	r1, [r7, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f00a fb31 	bl	8016b02 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	2000071c 	.word	0x2000071c

0800c4b0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c4b4:	4b02      	ldr	r3, [pc, #8]	; (800c4c0 <SecureElementGetDevEui+0x10>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bc80      	pop	{r7}
 800c4be:	4770      	bx	lr
 800c4c0:	2000071c 	.word	0x2000071c

0800c4c4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d101      	bne.n	800c4d6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	e008      	b.n	800c4e8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c4d6:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <SecureElementSetJoinEui+0x2c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	2208      	movs	r2, #8
 800c4de:	6879      	ldr	r1, [r7, #4]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f00a fb0e 	bl	8016b02 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	2000071c 	.word	0x2000071c

0800c4f4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c4f8:	4b03      	ldr	r3, [pc, #12]	; (800c508 <SecureElementGetJoinEui+0x14>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3308      	adds	r3, #8
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	bc80      	pop	{r7}
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	2000071c 	.word	0x2000071c

0800c50c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c516:	4a1a      	ldr	r2, [pc, #104]	; (800c580 <LmHandlerInit+0x74>)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c51c:	4b19      	ldr	r3, [pc, #100]	; (800c584 <LmHandlerInit+0x78>)
 800c51e:	4a1a      	ldr	r2, [pc, #104]	; (800c588 <LmHandlerInit+0x7c>)
 800c520:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c522:	4b18      	ldr	r3, [pc, #96]	; (800c584 <LmHandlerInit+0x78>)
 800c524:	4a19      	ldr	r2, [pc, #100]	; (800c58c <LmHandlerInit+0x80>)
 800c526:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c528:	4b16      	ldr	r3, [pc, #88]	; (800c584 <LmHandlerInit+0x78>)
 800c52a:	4a19      	ldr	r2, [pc, #100]	; (800c590 <LmHandlerInit+0x84>)
 800c52c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c52e:	4b15      	ldr	r3, [pc, #84]	; (800c584 <LmHandlerInit+0x78>)
 800c530:	4a18      	ldr	r2, [pc, #96]	; (800c594 <LmHandlerInit+0x88>)
 800c532:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c534:	4b12      	ldr	r3, [pc, #72]	; (800c580 <LmHandlerInit+0x74>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a17      	ldr	r2, [pc, #92]	; (800c598 <LmHandlerInit+0x8c>)
 800c53c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c53e:	4b10      	ldr	r3, [pc, #64]	; (800c580 <LmHandlerInit+0x74>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	4a14      	ldr	r2, [pc, #80]	; (800c598 <LmHandlerInit+0x8c>)
 800c546:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c548:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <LmHandlerInit+0x74>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	4a12      	ldr	r2, [pc, #72]	; (800c598 <LmHandlerInit+0x8c>)
 800c550:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c552:	4b11      	ldr	r3, [pc, #68]	; (800c598 <LmHandlerInit+0x8c>)
 800c554:	4a11      	ldr	r2, [pc, #68]	; (800c59c <LmHandlerInit+0x90>)
 800c556:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c558:	4b09      	ldr	r3, [pc, #36]	; (800c580 <LmHandlerInit+0x74>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	4a0e      	ldr	r2, [pc, #56]	; (800c598 <LmHandlerInit+0x8c>)
 800c560:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c562:	490f      	ldr	r1, [pc, #60]	; (800c5a0 <LmHandlerInit+0x94>)
 800c564:	2000      	movs	r0, #0
 800c566:	f000 fd8f 	bl	800d088 <LmHandlerPackageRegister>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c570:	f04f 33ff 	mov.w	r3, #4294967295
 800c574:	e000      	b.n	800c578 <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20000748 	.word	0x20000748
 800c584:	2000074c 	.word	0x2000074c
 800c588:	0800cd55 	.word	0x0800cd55
 800c58c:	0800cdbd 	.word	0x0800cdbd
 800c590:	0800ce99 	.word	0x0800ce99
 800c594:	0800cfb5 	.word	0x0800cfb5
 800c598:	2000075c 	.word	0x2000075c
 800c59c:	0800d425 	.word	0x0800d425
 800c5a0:	20000094 	.word	0x20000094

0800c5a4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b094      	sub	sp, #80	; 0x50
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c5ac:	2214      	movs	r2, #20
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	488f      	ldr	r0, [pc, #572]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c5b2:	f00d fdab 	bl	801a10c <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c5b6:	f7fe fb0b 	bl	800abd0 <LoraInfo_GetPtr>
 800c5ba:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c5bc:	4b8c      	ldr	r3, [pc, #560]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	4093      	lsls	r3, r2
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c5d2:	4b88      	ldr	r3, [pc, #544]	; (800c7f4 <LmHandlerConfigure+0x250>)
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	2000      	movs	r0, #0
 800c5da:	f00e fde7 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c5de:	e7fe      	b.n	800c5de <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c5e0:	4b83      	ldr	r3, [pc, #524]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	4984      	ldr	r1, [pc, #528]	; (800c7f8 <LmHandlerConfigure+0x254>)
 800c5e8:	4884      	ldr	r0, [pc, #528]	; (800c7fc <LmHandlerConfigure+0x258>)
 800c5ea:	f004 fc01 	bl	8010df0 <LoRaMacInitialization>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d002      	beq.n	800c5fa <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f8:	e0f5      	b.n	800c7e6 <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c5fa:	2326      	movs	r3, #38	; 0x26
 800c5fc:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c5fe:	f107 0318 	add.w	r3, r7, #24
 800c602:	4618      	mov	r0, r3
 800c604:	f005 f918 	bl	8011838 <LoRaMacMibSetRequestConfirm>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d103      	bne.n	800c616 <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800c60e:	4b7c      	ldr	r3, [pc, #496]	; (800c800 <LmHandlerConfigure+0x25c>)
 800c610:	2201      	movs	r2, #1
 800c612:	701a      	strb	r2, [r3, #0]
 800c614:	e02a      	b.n	800c66c <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c616:	2327      	movs	r3, #39	; 0x27
 800c618:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c61a:	4b7a      	ldr	r3, [pc, #488]	; (800c804 <LmHandlerConfigure+0x260>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00c      	beq.n	800c63e <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c624:	f107 0318 	add.w	r3, r7, #24
 800c628:	4618      	mov	r0, r3
 800c62a:	f004 ff7f 	bl	801152c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c62e:	4b75      	ldr	r3, [pc, #468]	; (800c804 <LmHandlerConfigure+0x260>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	69fa      	ldr	r2, [r7, #28]
 800c636:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800c63a:	4610      	mov	r0, r2
 800c63c:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c63e:	2326      	movs	r3, #38	; 0x26
 800c640:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c642:	f107 0318 	add.w	r3, r7, #24
 800c646:	4618      	mov	r0, r3
 800c648:	f005 f8f6 	bl	8011838 <LoRaMacMibSetRequestConfirm>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10c      	bne.n	800c66c <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c652:	2301      	movs	r3, #1
 800c654:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c656:	f107 0318 	add.w	r3, r7, #24
 800c65a:	4618      	mov	r0, r3
 800c65c:	f004 ff66 	bl	801152c <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c660:	7f3b      	ldrb	r3, [r7, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800c666:	4b66      	ldr	r3, [pc, #408]	; (800c800 <LmHandlerConfigure+0x25c>)
 800c668:	2201      	movs	r2, #1
 800c66a:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c66c:	4b64      	ldr	r3, [pc, #400]	; (800c800 <LmHandlerConfigure+0x25c>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d02a      	beq.n	800c6ca <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c674:	4b63      	ldr	r3, [pc, #396]	; (800c804 <LmHandlerConfigure+0x260>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	69db      	ldr	r3, [r3, #28]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d004      	beq.n	800c688 <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c67e:	4b61      	ldr	r3, [pc, #388]	; (800c804 <LmHandlerConfigure+0x260>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	69db      	ldr	r3, [r3, #28]
 800c684:	2000      	movs	r0, #0
 800c686:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c688:	2306      	movs	r3, #6
 800c68a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c68c:	f107 0318 	add.w	r3, r7, #24
 800c690:	4618      	mov	r0, r3
 800c692:	f004 ff4b 	bl	801152c <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	4a5b      	ldr	r2, [pc, #364]	; (800c808 <LmHandlerConfigure+0x264>)
 800c69a:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c69c:	2326      	movs	r3, #38	; 0x26
 800c69e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c6a0:	f107 0318 	add.w	r3, r7, #24
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f004 ff41 	bl	801152c <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c6b0:	4b4f      	ldr	r3, [pc, #316]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c6b2:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800c6ba:	4b4d      	ldr	r3, [pc, #308]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c6bc:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800c6c4:	4b4a      	ldr	r3, [pc, #296]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c6c6:	709a      	strb	r2, [r3, #2]
 800c6c8:	e019      	b.n	800c6fe <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c6ca:	2305      	movs	r3, #5
 800c6cc:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c6d2:	f107 0318 	add.w	r3, r7, #24
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f005 f8ae 	bl	8011838 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c6dc:	4b49      	ldr	r3, [pc, #292]	; (800c804 <LmHandlerConfigure+0x260>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	4798      	blx	r3
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	4a48      	ldr	r2, [pc, #288]	; (800c808 <LmHandlerConfigure+0x264>)
 800c6e8:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c6ea:	2306      	movs	r3, #6
 800c6ec:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c6ee:	4b46      	ldr	r3, [pc, #280]	; (800c808 <LmHandlerConfigure+0x264>)
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c6f4:	f107 0318 	add.w	r3, r7, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f005 f89d 	bl	8011838 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c6fe:	2302      	movs	r3, #2
 800c700:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c702:	f107 0318 	add.w	r3, r7, #24
 800c706:	4618      	mov	r0, r3
 800c708:	f004 ff10 	bl	801152c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	2208      	movs	r2, #8
 800c710:	4619      	mov	r1, r3
 800c712:	483d      	ldr	r0, [pc, #244]	; (800c808 <LmHandlerConfigure+0x264>)
 800c714:	f00a f9f5 	bl	8016b02 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c718:	2303      	movs	r3, #3
 800c71a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c71c:	f107 0318 	add.w	r3, r7, #24
 800c720:	4618      	mov	r0, r3
 800c722:	f004 ff03 	bl	801152c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	2208      	movs	r2, #8
 800c72a:	4619      	mov	r1, r3
 800c72c:	4837      	ldr	r0, [pc, #220]	; (800c80c <LmHandlerConfigure+0x268>)
 800c72e:	f00a f9e8 	bl	8016b02 <memcpy1>

    SecureElementPrintKeys();
 800c732:	f7ff fc1f 	bl	800bf74 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c736:	4b36      	ldr	r3, [pc, #216]	; (800c810 <LmHandlerConfigure+0x26c>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	4b35      	ldr	r3, [pc, #212]	; (800c814 <LmHandlerConfigure+0x270>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	4619      	mov	r1, r3
 800c742:	4b35      	ldr	r3, [pc, #212]	; (800c818 <LmHandlerConfigure+0x274>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	4618      	mov	r0, r3
 800c748:	4b34      	ldr	r3, [pc, #208]	; (800c81c <LmHandlerConfigure+0x278>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	9002      	str	r0, [sp, #8]
 800c750:	9101      	str	r1, [sp, #4]
 800c752:	9200      	str	r2, [sp, #0]
 800c754:	4b32      	ldr	r3, [pc, #200]	; (800c820 <LmHandlerConfigure+0x27c>)
 800c756:	2200      	movs	r2, #0
 800c758:	2100      	movs	r1, #0
 800c75a:	2002      	movs	r0, #2
 800c75c:	f00e fd26 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c760:	230f      	movs	r3, #15
 800c762:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c764:	2301      	movs	r3, #1
 800c766:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c768:	f107 0318 	add.w	r3, r7, #24
 800c76c:	4618      	mov	r0, r3
 800c76e:	f005 f863 	bl	8011838 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c772:	2310      	movs	r3, #16
 800c774:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c776:	2300      	movs	r3, #0
 800c778:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c77a:	f107 0318 	add.w	r3, r7, #24
 800c77e:	4618      	mov	r0, r3
 800c780:	f005 f85a 	bl	8011838 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c784:	2304      	movs	r3, #4
 800c786:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c788:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c78a:	789b      	ldrb	r3, [r3, #2]
 800c78c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c78e:	f107 0318 	add.w	r3, r7, #24
 800c792:	4618      	mov	r0, r3
 800c794:	f005 f850 	bl	8011838 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c798:	2337      	movs	r3, #55	; 0x37
 800c79a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c79c:	4b14      	ldr	r3, [pc, #80]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7a2:	f107 0318 	add.w	r3, r7, #24
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f005 f846 	bl	8011838 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c7ac:	230f      	movs	r3, #15
 800c7ae:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c7b0:	4b0f      	ldr	r3, [pc, #60]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	f107 0210 	add.w	r2, r7, #16
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f007 fe8e 	bl	80144dc <RegionGetPhyParam>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bf14      	ite	ne
 800c7ca:	2301      	movne	r3, #1
 800c7cc:	2300      	moveq	r3, #0
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c7d2:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c7d4:	2014      	movs	r0, #20
 800c7d6:	f000 faa5 	bl	800cd24 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c7da:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <LmHandlerConfigure+0x24c>)
 800c7dc:	799b      	ldrb	r3, [r3, #6]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f005 fdba 	bl	8012358 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3740      	adds	r7, #64	; 0x40
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000734 	.word	0x20000734
 800c7f4:	0801ba94 	.word	0x0801ba94
 800c7f8:	2000075c 	.word	0x2000075c
 800c7fc:	2000074c 	.word	0x2000074c
 800c800:	20000866 	.word	0x20000866
 800c804:	20000748 	.word	0x20000748
 800c808:	2000007c 	.word	0x2000007c
 800c80c:	20000084 	.word	0x20000084
 800c810:	20000093 	.word	0x20000093
 800c814:	20000092 	.word	0x20000092
 800c818:	20000091 	.word	0x20000091
 800c81c:	20000090 	.word	0x20000090
 800c820:	0801bae0 	.word	0x0801bae0

0800c824 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c828:	f002 fab4 	bl	800ed94 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c82c:	f000 fd30 	bl	800d290 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c830:	bf00      	nop
 800c832:	bd80      	pop	{r7, pc}

0800c834 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c834:	b480      	push	{r7}
 800c836:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c838:	4b02      	ldr	r3, [pc, #8]	; (800c844 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c83a:	681b      	ldr	r3, [r3, #0]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr
 800c844:	20000770 	.word	0x20000770

0800c848 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b090      	sub	sp, #64	; 0x40
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	460a      	mov	r2, r1
 800c852:	71fb      	strb	r3, [r7, #7]
 800c854:	4613      	mov	r3, r2
 800c856:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c85e:	4b35      	ldr	r3, [pc, #212]	; (800c934 <LmHandlerJoin+0xec>)
 800c860:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c864:	b2db      	uxtb	r3, r3
 800c866:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d110      	bne.n	800c892 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c870:	2302      	movs	r3, #2
 800c872:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c876:	4b30      	ldr	r3, [pc, #192]	; (800c938 <LmHandlerJoin+0xf0>)
 800c878:	2202      	movs	r2, #2
 800c87a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c87c:	4a2e      	ldr	r2, [pc, #184]	; (800c938 <LmHandlerJoin+0xf0>)
 800c87e:	79bb      	ldrb	r3, [r7, #6]
 800c880:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c882:	f004 fd69 	bl	8011358 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c88a:	4618      	mov	r0, r3
 800c88c:	f005 fb2e 	bl	8011eec <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800c890:	e04b      	b.n	800c92a <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c892:	2301      	movs	r3, #1
 800c894:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c898:	4b27      	ldr	r3, [pc, #156]	; (800c938 <LmHandlerJoin+0xf0>)
 800c89a:	2201      	movs	r2, #1
 800c89c:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c89e:	4b25      	ldr	r3, [pc, #148]	; (800c934 <LmHandlerJoin+0xec>)
 800c8a0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c8a4:	4b24      	ldr	r3, [pc, #144]	; (800c938 <LmHandlerJoin+0xf0>)
 800c8a6:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c8a8:	4b23      	ldr	r3, [pc, #140]	; (800c938 <LmHandlerJoin+0xf0>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c8ae:	4a22      	ldr	r2, [pc, #136]	; (800c938 <LmHandlerJoin+0xf0>)
 800c8b0:	79bb      	ldrb	r3, [r7, #6]
 800c8b2:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800c8b4:	4b21      	ldr	r3, [pc, #132]	; (800c93c <LmHandlerJoin+0xf4>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	f083 0301 	eor.w	r3, r3, #1
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d01e      	beq.n	800c900 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c8c2:	231e      	movs	r3, #30
 800c8c4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c8c6:	4b1b      	ldr	r3, [pc, #108]	; (800c934 <LmHandlerJoin+0xec>)
 800c8c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c8cc:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c8ce:	f107 0308 	add.w	r3, r7, #8
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f004 ffb0 	bl	8011838 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c8d8:	231f      	movs	r3, #31
 800c8da:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c8dc:	4b15      	ldr	r3, [pc, #84]	; (800c934 <LmHandlerJoin+0xec>)
 800c8de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c8e2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c8e4:	f107 0308 	add.w	r3, r7, #8
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f004 ffa5 	bl	8011838 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c8ee:	2328      	movs	r3, #40	; 0x28
 800c8f0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c8f2:	4b13      	ldr	r3, [pc, #76]	; (800c940 <LmHandlerJoin+0xf8>)
 800c8f4:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c8f6:	f107 0308 	add.w	r3, r7, #8
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f004 ff9c 	bl	8011838 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c900:	f004 fd2a 	bl	8011358 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c904:	2301      	movs	r3, #1
 800c906:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c908:	2301      	movs	r3, #1
 800c90a:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c90c:	f107 0308 	add.w	r3, r7, #8
 800c910:	4618      	mov	r0, r3
 800c912:	f004 ff91 	bl	8011838 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c916:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <LmHandlerJoin+0xfc>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91c:	4806      	ldr	r0, [pc, #24]	; (800c938 <LmHandlerJoin+0xf0>)
 800c91e:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c920:	4b04      	ldr	r3, [pc, #16]	; (800c934 <LmHandlerJoin+0xec>)
 800c922:	785b      	ldrb	r3, [r3, #1]
 800c924:	4618      	mov	r0, r3
 800c926:	f000 f92b 	bl	800cb80 <LmHandlerRequestClass>
}
 800c92a:	bf00      	nop
 800c92c:	3740      	adds	r7, #64	; 0x40
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	20000734 	.word	0x20000734
 800c938:	200000a0 	.word	0x200000a0
 800c93c:	20000866 	.word	0x20000866
 800c940:	01000300 	.word	0x01000300
 800c944:	20000748 	.word	0x20000748

0800c948 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	; 0x28
 800c94c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c94e:	2301      	movs	r3, #1
 800c950:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c952:	463b      	mov	r3, r7
 800c954:	4618      	mov	r0, r3
 800c956:	f004 fde9 	bl	801152c <LoRaMacMibGetRequestConfirm>
 800c95a:	4603      	mov	r3, r0
 800c95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c968:	793b      	ldrb	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c96e:	2300      	movs	r3, #0
 800c970:	e002      	b.n	800c978 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c972:	2301      	movs	r3, #1
 800c974:	e000      	b.n	800c978 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c976:	2300      	movs	r3, #0
    }
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3728      	adds	r7, #40	; 0x28
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08a      	sub	sp, #40	; 0x28
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	70fb      	strb	r3, [r7, #3]
 800c98c:	4613      	mov	r3, r2
 800c98e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c990:	23ff      	movs	r3, #255	; 0xff
 800c992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c996:	f001 ff8b 	bl	800e8b0 <LoRaMacIsBusy>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c9a0:	f06f 0301 	mvn.w	r3, #1
 800c9a4:	e0b6      	b.n	800cb14 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c9a6:	f7ff ffcf 	bl	800c948 <LmHandlerJoinStatus>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d00a      	beq.n	800c9c6 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c9b0:	4b5a      	ldr	r3, [pc, #360]	; (800cb1c <LmHandlerSend+0x19c>)
 800c9b2:	799b      	ldrb	r3, [r3, #6]
 800c9b4:	4a59      	ldr	r2, [pc, #356]	; (800cb1c <LmHandlerSend+0x19c>)
 800c9b6:	79d2      	ldrb	r2, [r2, #7]
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff ff44 	bl	800c848 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c9c0:	f06f 0302 	mvn.w	r3, #2
 800c9c4:	e0a6      	b.n	800cb14 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c9c6:	4b56      	ldr	r3, [pc, #344]	; (800cb20 <LmHandlerSend+0x1a0>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	4798      	blx	r3
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00d      	beq.n	800c9f0 <LmHandlerSend+0x70>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	4b51      	ldr	r3, [pc, #324]	; (800cb20 <LmHandlerSend+0x1a0>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d006      	beq.n	800c9f0 <LmHandlerSend+0x70>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c9ea:	f06f 0303 	mvn.w	r3, #3
 800c9ee:	e091      	b.n	800cb14 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c9f0:	4a4c      	ldr	r2, [pc, #304]	; (800cb24 <LmHandlerSend+0x1a4>)
 800c9f2:	78fb      	ldrb	r3, [r7, #3]
 800c9f4:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c9f6:	78fb      	ldrb	r3, [r7, #3]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bf14      	ite	ne
 800c9fc:	2301      	movne	r3, #1
 800c9fe:	2300      	moveq	r3, #0
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ca04:	4b48      	ldr	r3, [pc, #288]	; (800cb28 <LmHandlerSend+0x1a8>)
 800ca06:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ca0a:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	f107 020c 	add.w	r2, r7, #12
 800ca14:	4611      	mov	r1, r2
 800ca16:	4618      	mov	r0, r3
 800ca18:	f004 fd00 	bl	801141c <LoRaMacQueryTxPossible>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d009      	beq.n	800ca36 <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ca22:	2300      	movs	r3, #0
 800ca24:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ca2e:	23f9      	movs	r3, #249	; 0xf9
 800ca30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca34:	e009      	b.n	800ca4a <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	785b      	ldrb	r3, [r3, #1]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ca4a:	4b36      	ldr	r3, [pc, #216]	; (800cb24 <LmHandlerSend+0x1a4>)
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	3310      	adds	r3, #16
 800ca50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca54:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ca58:	4b33      	ldr	r3, [pc, #204]	; (800cb28 <LmHandlerSend+0x1a8>)
 800ca5a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ca5e:	4b31      	ldr	r3, [pc, #196]	; (800cb24 <LmHandlerSend+0x1a4>)
 800ca60:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800ca62:	78ba      	ldrb	r2, [r7, #2]
 800ca64:	f107 0310 	add.w	r3, r7, #16
 800ca68:	4611      	mov	r1, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f005 fb7e 	bl	801216c <LoRaMacMcpsRequest>
 800ca70:	4603      	mov	r3, r0
 800ca72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	4a2c      	ldr	r2, [pc, #176]	; (800cb2c <LmHandlerSend+0x1ac>)
 800ca7a:	6013      	str	r3, [r2, #0]

    switch (status)
 800ca7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca80:	2b11      	cmp	r3, #17
 800ca82:	d840      	bhi.n	800cb06 <LmHandlerSend+0x186>
 800ca84:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <LmHandlerSend+0x10c>)
 800ca86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8a:	bf00      	nop
 800ca8c:	0800cad5 	.word	0x0800cad5
 800ca90:	0800cae7 	.word	0x0800cae7
 800ca94:	0800cb07 	.word	0x0800cb07
 800ca98:	0800cb07 	.word	0x0800cb07
 800ca9c:	0800cb07 	.word	0x0800cb07
 800caa0:	0800cb07 	.word	0x0800cb07
 800caa4:	0800cb07 	.word	0x0800cb07
 800caa8:	0800caef 	.word	0x0800caef
 800caac:	0800cb07 	.word	0x0800cb07
 800cab0:	0800cb07 	.word	0x0800cb07
 800cab4:	0800cb07 	.word	0x0800cb07
 800cab8:	0800caff 	.word	0x0800caff
 800cabc:	0800cb07 	.word	0x0800cb07
 800cac0:	0800cb07 	.word	0x0800cb07
 800cac4:	0800cae7 	.word	0x0800cae7
 800cac8:	0800cae7 	.word	0x0800cae7
 800cacc:	0800cae7 	.word	0x0800cae7
 800cad0:	0800caf7 	.word	0x0800caf7
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800cad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cad8:	f113 0f07 	cmn.w	r3, #7
 800cadc:	d017      	beq.n	800cb0e <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cade:	2300      	movs	r3, #0
 800cae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800cae4:	e013      	b.n	800cb0e <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800cae6:	23fe      	movs	r3, #254	; 0xfe
 800cae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800caec:	e010      	b.n	800cb10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800caee:	23fd      	movs	r3, #253	; 0xfd
 800caf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800caf4:	e00c      	b.n	800cb10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800caf6:	23fb      	movs	r3, #251	; 0xfb
 800caf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cafc:	e008      	b.n	800cb10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cafe:	23fa      	movs	r3, #250	; 0xfa
 800cb00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cb04:	e004      	b.n	800cb10 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cb06:	23ff      	movs	r3, #255	; 0xff
 800cb08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cb0c:	e000      	b.n	800cb10 <LmHandlerSend+0x190>
            break;
 800cb0e:	bf00      	nop
    }

    return lmhStatus;
 800cb10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3728      	adds	r7, #40	; 0x28
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200000a0 	.word	0x200000a0
 800cb20:	20000720 	.word	0x20000720
 800cb24:	200000a8 	.word	0x200000a8
 800cb28:	20000734 	.word	0x20000734
 800cb2c:	20000770 	.word	0x20000770

0800cb30 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800cb36:	230a      	movs	r3, #10
 800cb38:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cb3a:	463b      	mov	r3, r7
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f005 f9d5 	bl	8011eec <LoRaMacMlmeRequest>
 800cb42:	4603      	mov	r3, r0
 800cb44:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	4a06      	ldr	r2, [pc, #24]	; (800cb64 <LmHandlerDeviceTimeReq+0x34>)
 800cb4a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cb4c:	7dfb      	ldrb	r3, [r7, #23]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cb52:	2300      	movs	r3, #0
 800cb54:	e001      	b.n	800cb5a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cb56:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20000770 	.word	0x20000770

0800cb68 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800cb72:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bc80      	pop	{r7}
 800cb7e:	4770      	bx	lr

0800cb80 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08c      	sub	sp, #48	; 0x30
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800cb90:	f001 fe8e 	bl	800e8b0 <LoRaMacIsBusy>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d002      	beq.n	800cba0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cb9a:	f06f 0301 	mvn.w	r3, #1
 800cb9e:	e073      	b.n	800cc88 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800cba0:	f7ff fed2 	bl	800c948 <LmHandlerJoinStatus>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d002      	beq.n	800cbb0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cbaa:	f06f 0302 	mvn.w	r3, #2
 800cbae:	e06b      	b.n	800cc88 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cbb4:	f107 0308 	add.w	r3, r7, #8
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f004 fcb7 	bl	801152c <LoRaMacMibGetRequestConfirm>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc8:	e05e      	b.n	800cc88 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800cbca:	7b3b      	ldrb	r3, [r7, #12]
 800cbcc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cbd0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d04d      	beq.n	800cc76 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800cbda:	79fb      	ldrb	r3, [r7, #7]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d028      	beq.n	800cc32 <LmHandlerRequestClass+0xb2>
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	dc4a      	bgt.n	800cc7a <LmHandlerRequestClass+0xfa>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <LmHandlerRequestClass+0x6e>
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d01e      	beq.n	800cc2a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800cbec:	e045      	b.n	800cc7a <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800cbee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d043      	beq.n	800cc7e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cbfa:	f107 0308 	add.w	r3, r7, #8
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f004 fe1a 	bl	8011838 <LoRaMacMibSetRequestConfirm>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10b      	bne.n	800cc22 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cc0a:	4b21      	ldr	r3, [pc, #132]	; (800cc90 <LmHandlerRequestClass+0x110>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d034      	beq.n	800cc7e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cc14:	4b1e      	ldr	r3, [pc, #120]	; (800cc90 <LmHandlerRequestClass+0x110>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1a:	79fa      	ldrb	r2, [r7, #7]
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	4798      	blx	r3
            break;
 800cc20:	e02d      	b.n	800cc7e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cc22:	23ff      	movs	r3, #255	; 0xff
 800cc24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cc28:	e029      	b.n	800cc7e <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cc2a:	23ff      	movs	r3, #255	; 0xff
 800cc2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cc30:	e028      	b.n	800cc84 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800cc32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cc3a:	23ff      	movs	r3, #255	; 0xff
 800cc3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cc40:	e01f      	b.n	800cc82 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cc46:	f107 0308 	add.w	r3, r7, #8
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f004 fdf4 	bl	8011838 <LoRaMacMibSetRequestConfirm>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10b      	bne.n	800cc6e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cc56:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <LmHandlerRequestClass+0x110>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d010      	beq.n	800cc82 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cc60:	4b0b      	ldr	r3, [pc, #44]	; (800cc90 <LmHandlerRequestClass+0x110>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc66:	79fa      	ldrb	r2, [r7, #7]
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4798      	blx	r3
            break;
 800cc6c:	e009      	b.n	800cc82 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cc6e:	23ff      	movs	r3, #255	; 0xff
 800cc70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cc74:	e005      	b.n	800cc82 <LmHandlerRequestClass+0x102>
        }
    }
 800cc76:	bf00      	nop
 800cc78:	e004      	b.n	800cc84 <LmHandlerRequestClass+0x104>
            break;
 800cc7a:	bf00      	nop
 800cc7c:	e002      	b.n	800cc84 <LmHandlerRequestClass+0x104>
            break;
 800cc7e:	bf00      	nop
 800cc80:	e000      	b.n	800cc84 <LmHandlerRequestClass+0x104>
            break;
 800cc82:	bf00      	nop
    return errorStatus;
 800cc84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3730      	adds	r7, #48	; 0x30
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	20000748 	.word	0x20000748

0800cc94 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08c      	sub	sp, #48	; 0x30
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cca2:	f04f 33ff 	mov.w	r3, #4294967295
 800cca6:	e010      	b.n	800ccca <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800ccac:	f107 030c 	add.w	r3, r7, #12
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f004 fc3b 	bl	801152c <LoRaMacMibGetRequestConfirm>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ccbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc0:	e003      	b.n	800ccca <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ccc2:	7c3a      	ldrb	r2, [r7, #16]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3730      	adds	r7, #48	; 0x30
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08c      	sub	sp, #48	; 0x30
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d102      	bne.n	800cce8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cce2:	f04f 33ff 	mov.w	r3, #4294967295
 800cce6:	e016      	b.n	800cd16 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cce8:	231f      	movs	r3, #31
 800ccea:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800ccec:	f107 030c 	add.w	r3, r7, #12
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f004 fc1b 	bl	801152c <LoRaMacMibGetRequestConfirm>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ccfc:	f04f 33ff 	mov.w	r3, #4294967295
 800cd00:	e009      	b.n	800cd16 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cd02:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f993 2000 	ldrsb.w	r2, [r3]
 800cd10:	4b03      	ldr	r3, [pc, #12]	; (800cd20 <LmHandlerGetTxDatarate+0x4c>)
 800cd12:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3730      	adds	r7, #48	; 0x30
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20000734 	.word	0x20000734

0800cd24 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08c      	sub	sp, #48	; 0x30
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cd2c:	2322      	movs	r3, #34	; 0x22
 800cd2e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cd34:	f107 030c 	add.w	r3, r7, #12
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f004 fd7d 	bl	8011838 <LoRaMacMibSetRequestConfirm>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd44:	f04f 33ff 	mov.w	r3, #4294967295
 800cd48:	e000      	b.n	800cd4c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3730      	adds	r7, #48	; 0x30
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cd5c:	4b15      	ldr	r3, [pc, #84]	; (800cdb4 <McpsConfirm+0x60>)
 800cd5e:	2201      	movs	r2, #1
 800cd60:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	785a      	ldrb	r2, [r3, #1]
 800cd66:	4b13      	ldr	r3, [pc, #76]	; (800cdb4 <McpsConfirm+0x60>)
 800cd68:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	789b      	ldrb	r3, [r3, #2]
 800cd6e:	b25a      	sxtb	r2, r3
 800cd70:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <McpsConfirm+0x60>)
 800cd72:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	4a0e      	ldr	r2, [pc, #56]	; (800cdb4 <McpsConfirm+0x60>)
 800cd7a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cd82:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <McpsConfirm+0x60>)
 800cd84:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <McpsConfirm+0x60>)
 800cd8e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	791b      	ldrb	r3, [r3, #4]
 800cd94:	461a      	mov	r2, r3
 800cd96:	4b07      	ldr	r3, [pc, #28]	; (800cdb4 <McpsConfirm+0x60>)
 800cd98:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800cd9a:	4b07      	ldr	r3, [pc, #28]	; (800cdb8 <McpsConfirm+0x64>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda0:	4804      	ldr	r0, [pc, #16]	; (800cdb4 <McpsConfirm+0x60>)
 800cda2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cda4:	6879      	ldr	r1, [r7, #4]
 800cda6:	2000      	movs	r0, #0
 800cda8:	f000 f9de 	bl	800d168 <LmHandlerPackagesNotify>
}
 800cdac:	bf00      	nop
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	200000a8 	.word	0x200000a8
 800cdb8:	20000748 	.word	0x20000748

0800cdbc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800cdca:	4b31      	ldr	r3, [pc, #196]	; (800ce90 <McpsIndication+0xd4>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	785a      	ldrb	r2, [r3, #1]
 800cdd4:	4b2e      	ldr	r3, [pc, #184]	; (800ce90 <McpsIndication+0xd4>)
 800cdd6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800cdd8:	4b2d      	ldr	r3, [pc, #180]	; (800ce90 <McpsIndication+0xd4>)
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d153      	bne.n	800ce88 <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	791b      	ldrb	r3, [r3, #4]
 800cde4:	b25a      	sxtb	r2, r3
 800cde6:	4b2a      	ldr	r3, [pc, #168]	; (800ce90 <McpsIndication+0xd4>)
 800cde8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdf0:	b25a      	sxtb	r2, r3
 800cdf2:	4b27      	ldr	r3, [pc, #156]	; (800ce90 <McpsIndication+0xd4>)
 800cdf4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cdfc:	4b24      	ldr	r3, [pc, #144]	; (800ce90 <McpsIndication+0xd4>)
 800cdfe:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	78da      	ldrb	r2, [r3, #3]
 800ce04:	4b22      	ldr	r3, [pc, #136]	; (800ce90 <McpsIndication+0xd4>)
 800ce06:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	4a20      	ldr	r2, [pc, #128]	; (800ce90 <McpsIndication+0xd4>)
 800ce0e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	78db      	ldrb	r3, [r3, #3]
 800ce14:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	7b1b      	ldrb	r3, [r3, #12]
 800ce1a:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ce22:	4b1c      	ldr	r3, [pc, #112]	; (800ce94 <McpsIndication+0xd8>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce28:	f107 0218 	add.w	r2, r7, #24
 800ce2c:	4918      	ldr	r1, [pc, #96]	; (800ce90 <McpsIndication+0xd4>)
 800ce2e:	4610      	mov	r0, r2
 800ce30:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ce32:	4b18      	ldr	r3, [pc, #96]	; (800ce94 <McpsIndication+0xd8>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d007      	beq.n	800ce4c <McpsIndication+0x90>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	7e1b      	ldrb	r3, [r3, #24]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d003      	beq.n	800ce4c <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ce44:	4b13      	ldr	r3, [pc, #76]	; (800ce94 <McpsIndication+0xd8>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4a:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	2001      	movs	r0, #1
 800ce50:	f000 f98a 	bl	800d168 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ce54:	f107 0317 	add.w	r3, r7, #23
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7ff ff1b 	bl	800cc94 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	795b      	ldrb	r3, [r3, #5]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d111      	bne.n	800ce8a <McpsIndication+0xce>
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10e      	bne.n	800ce8a <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	733b      	strb	r3, [r7, #12]
 800ce70:	2300      	movs	r3, #0
 800ce72:	737b      	strb	r3, [r7, #13]
 800ce74:	2300      	movs	r3, #0
 800ce76:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800ce78:	f107 030c 	add.w	r3, r7, #12
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	2100      	movs	r1, #0
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7ff fd7d 	bl	800c980 <LmHandlerSend>
 800ce86:	e000      	b.n	800ce8a <McpsIndication+0xce>
        return;
 800ce88:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800ce8a:	3720      	adds	r7, #32
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	200000c4 	.word	0x200000c4
 800ce94:	20000748 	.word	0x20000748

0800ce98 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08c      	sub	sp, #48	; 0x30
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cea0:	4b3d      	ldr	r3, [pc, #244]	; (800cf98 <MlmeConfirm+0x100>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	785a      	ldrb	r2, [r3, #1]
 800ceaa:	4b3b      	ldr	r3, [pc, #236]	; (800cf98 <MlmeConfirm+0x100>)
 800ceac:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800ceae:	4b3b      	ldr	r3, [pc, #236]	; (800cf9c <MlmeConfirm+0x104>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb4:	4838      	ldr	r0, [pc, #224]	; (800cf98 <MlmeConfirm+0x100>)
 800ceb6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ceb8:	6879      	ldr	r1, [r7, #4]
 800ceba:	2002      	movs	r0, #2
 800cebc:	f000 f954 	bl	800d168 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	2b0c      	cmp	r3, #12
 800cec8:	d85e      	bhi.n	800cf88 <MlmeConfirm+0xf0>
 800ceca:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <MlmeConfirm+0x38>)
 800cecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced0:	0800cf05 	.word	0x0800cf05
 800ced4:	0800cf89 	.word	0x0800cf89
 800ced8:	0800cf89 	.word	0x0800cf89
 800cedc:	0800cf57 	.word	0x0800cf57
 800cee0:	0800cf89 	.word	0x0800cf89
 800cee4:	0800cf89 	.word	0x0800cf89
 800cee8:	0800cf89 	.word	0x0800cf89
 800ceec:	0800cf89 	.word	0x0800cf89
 800cef0:	0800cf89 	.word	0x0800cf89
 800cef4:	0800cf89 	.word	0x0800cf89
 800cef8:	0800cf89 	.word	0x0800cf89
 800cefc:	0800cf6f 	.word	0x0800cf6f
 800cf00:	0800cf89 	.word	0x0800cf89
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800cf04:	2306      	movs	r3, #6
 800cf06:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f004 fb0d 	bl	801152c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	4a22      	ldr	r2, [pc, #136]	; (800cfa0 <MlmeConfirm+0x108>)
 800cf16:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cf18:	4822      	ldr	r0, [pc, #136]	; (800cfa4 <MlmeConfirm+0x10c>)
 800cf1a:	f7ff fedb 	bl	800ccd4 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	785b      	ldrb	r3, [r3, #1]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d108      	bne.n	800cf38 <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cf26:	4b20      	ldr	r3, [pc, #128]	; (800cfa8 <MlmeConfirm+0x110>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cf2c:	4b1f      	ldr	r3, [pc, #124]	; (800cfac <MlmeConfirm+0x114>)
 800cf2e:	785b      	ldrb	r3, [r3, #1]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff fe25 	bl	800cb80 <LmHandlerRequestClass>
 800cf36:	e002      	b.n	800cf3e <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cf38:	4b1b      	ldr	r3, [pc, #108]	; (800cfa8 <MlmeConfirm+0x110>)
 800cf3a:	22ff      	movs	r2, #255	; 0xff
 800cf3c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cf3e:	4b17      	ldr	r3, [pc, #92]	; (800cf9c <MlmeConfirm+0x104>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf44:	4818      	ldr	r0, [pc, #96]	; (800cfa8 <MlmeConfirm+0x110>)
 800cf46:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	785b      	ldrb	r3, [r3, #1]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d11d      	bne.n	800cf8c <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800cf50:	f7ff f89e 	bl	800c090 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800cf54:	e01a      	b.n	800cf8c <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800cf56:	4b16      	ldr	r3, [pc, #88]	; (800cfb0 <MlmeConfirm+0x118>)
 800cf58:	2201      	movs	r2, #1
 800cf5a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	7a1a      	ldrb	r2, [r3, #8]
 800cf60:	4b13      	ldr	r3, [pc, #76]	; (800cfb0 <MlmeConfirm+0x118>)
 800cf62:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	7a5a      	ldrb	r2, [r3, #9]
 800cf68:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <MlmeConfirm+0x118>)
 800cf6a:	74da      	strb	r2, [r3, #19]
        }
        break;
 800cf6c:	e00f      	b.n	800cf8e <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	785b      	ldrb	r3, [r3, #1]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d105      	bne.n	800cf82 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800cf76:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <MlmeConfirm+0x114>)
 800cf78:	7b1b      	ldrb	r3, [r3, #12]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7ff fdf4 	bl	800cb68 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800cf80:	e005      	b.n	800cf8e <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800cf82:	f7ff fdd5 	bl	800cb30 <LmHandlerDeviceTimeReq>
        break;
 800cf86:	e002      	b.n	800cf8e <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <MlmeConfirm+0xf6>
        break;
 800cf8c:	bf00      	nop
    }
}
 800cf8e:	bf00      	nop
 800cf90:	3730      	adds	r7, #48	; 0x30
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	200000a8 	.word	0x200000a8
 800cf9c:	20000748 	.word	0x20000748
 800cfa0:	2000007c 	.word	0x2000007c
 800cfa4:	200000a4 	.word	0x200000a4
 800cfa8:	200000a0 	.word	0x200000a0
 800cfac:	20000734 	.word	0x20000734
 800cfb0:	200000c4 	.word	0x200000c4

0800cfb4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cfbe:	4b2f      	ldr	r3, [pc, #188]	; (800d07c <MlmeIndication+0xc8>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	785a      	ldrb	r2, [r3, #1]
 800cfc8:	4b2c      	ldr	r3, [pc, #176]	; (800d07c <MlmeIndication+0xc8>)
 800cfca:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	789b      	ldrb	r3, [r3, #2]
 800cfd0:	b25a      	sxtb	r2, r3
 800cfd2:	4b2a      	ldr	r3, [pc, #168]	; (800d07c <MlmeIndication+0xc8>)
 800cfd4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfdc:	b25a      	sxtb	r2, r3
 800cfde:	4b27      	ldr	r3, [pc, #156]	; (800d07c <MlmeIndication+0xc8>)
 800cfe0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cfe8:	4b24      	ldr	r3, [pc, #144]	; (800d07c <MlmeIndication+0xc8>)
 800cfea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	78da      	ldrb	r2, [r3, #3]
 800cff0:	4b22      	ldr	r3, [pc, #136]	; (800d07c <MlmeIndication+0xc8>)
 800cff2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	4a20      	ldr	r2, [pc, #128]	; (800d07c <MlmeIndication+0xc8>)
 800cffa:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	2b0b      	cmp	r3, #11
 800d002:	d009      	beq.n	800d018 <MlmeIndication+0x64>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b0f      	cmp	r3, #15
 800d00a:	d005      	beq.n	800d018 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d00c:	4b1c      	ldr	r3, [pc, #112]	; (800d080 <MlmeIndication+0xcc>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d012:	491a      	ldr	r1, [pc, #104]	; (800d07c <MlmeIndication+0xc8>)
 800d014:	2000      	movs	r0, #0
 800d016:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d018:	6879      	ldr	r1, [r7, #4]
 800d01a:	2003      	movs	r0, #3
 800d01c:	f000 f8a4 	bl	800d168 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2b0f      	cmp	r3, #15
 800d026:	d01e      	beq.n	800d066 <MlmeIndication+0xb2>
 800d028:	2b0f      	cmp	r3, #15
 800d02a:	dc1e      	bgt.n	800d06a <MlmeIndication+0xb6>
 800d02c:	2b07      	cmp	r3, #7
 800d02e:	d002      	beq.n	800d036 <MlmeIndication+0x82>
 800d030:	2b0b      	cmp	r3, #11
 800d032:	d01c      	beq.n	800d06e <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d034:	e019      	b.n	800d06a <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800d036:	2300      	movs	r3, #0
 800d038:	723b      	strb	r3, [r7, #8]
 800d03a:	2300      	movs	r3, #0
 800d03c:	727b      	strb	r3, [r7, #9]
 800d03e:	2300      	movs	r3, #0
 800d040:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800d042:	4b10      	ldr	r3, [pc, #64]	; (800d084 <MlmeIndication+0xd0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	4798      	blx	r3
 800d04a:	4603      	mov	r3, r0
 800d04c:	f083 0301 	eor.w	r3, r3, #1
 800d050:	b2db      	uxtb	r3, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00d      	beq.n	800d072 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800d056:	f107 0308 	add.w	r3, r7, #8
 800d05a:	2201      	movs	r2, #1
 800d05c:	2100      	movs	r1, #0
 800d05e:	4618      	mov	r0, r3
 800d060:	f7ff fc8e 	bl	800c980 <LmHandlerSend>
        break;
 800d064:	e005      	b.n	800d072 <MlmeIndication+0xbe>
        break;
 800d066:	bf00      	nop
 800d068:	e004      	b.n	800d074 <MlmeIndication+0xc0>
        break;
 800d06a:	bf00      	nop
 800d06c:	e002      	b.n	800d074 <MlmeIndication+0xc0>
        break;
 800d06e:	bf00      	nop
 800d070:	e000      	b.n	800d074 <MlmeIndication+0xc0>
        break;
 800d072:	bf00      	nop
    }
}
 800d074:	bf00      	nop
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	200000c4 	.word	0x200000c4
 800d080:	20000748 	.word	0x20000748
 800d084:	20000720 	.word	0x20000720

0800d088 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	6039      	str	r1, [r7, #0]
 800d092:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d094:	2300      	movs	r3, #0
 800d096:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d103      	bne.n	800d0a6 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d09e:	f000 f9db 	bl	800d458 <LmhpCompliancePackageFactory>
 800d0a2:	60f8      	str	r0, [r7, #12]
            break;
 800d0a4:	e000      	b.n	800d0a8 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d0a6:	bf00      	nop
        }
    }
    if( package != NULL )
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02b      	beq.n	800d106 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800d0ae:	79fb      	ldrb	r3, [r7, #7]
 800d0b0:	4918      	ldr	r1, [pc, #96]	; (800d114 <LmHandlerPackageRegister+0x8c>)
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d0b8:	79fb      	ldrb	r3, [r7, #7]
 800d0ba:	4a16      	ldr	r2, [pc, #88]	; (800d114 <LmHandlerPackageRegister+0x8c>)
 800d0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c0:	4a15      	ldr	r2, [pc, #84]	; (800d118 <LmHandlerPackageRegister+0x90>)
 800d0c2:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	4a13      	ldr	r2, [pc, #76]	; (800d114 <LmHandlerPackageRegister+0x8c>)
 800d0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0cc:	4a13      	ldr	r2, [pc, #76]	; (800d11c <LmHandlerPackageRegister+0x94>)
 800d0ce:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d0d0:	79fb      	ldrb	r3, [r7, #7]
 800d0d2:	4a10      	ldr	r2, [pc, #64]	; (800d114 <LmHandlerPackageRegister+0x8c>)
 800d0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0d8:	4a11      	ldr	r2, [pc, #68]	; (800d120 <LmHandlerPackageRegister+0x98>)
 800d0da:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d0dc:	4b11      	ldr	r3, [pc, #68]	; (800d124 <LmHandlerPackageRegister+0x9c>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	490c      	ldr	r1, [pc, #48]	; (800d114 <LmHandlerPackageRegister+0x8c>)
 800d0e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0e8:	6992      	ldr	r2, [r2, #24]
 800d0ea:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	4a09      	ldr	r2, [pc, #36]	; (800d114 <LmHandlerPackageRegister+0x8c>)
 800d0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	4a0c      	ldr	r2, [pc, #48]	; (800d128 <LmHandlerPackageRegister+0xa0>)
 800d0f8:	6851      	ldr	r1, [r2, #4]
 800d0fa:	4a0b      	ldr	r2, [pc, #44]	; (800d128 <LmHandlerPackageRegister+0xa0>)
 800d0fc:	7852      	ldrb	r2, [r2, #1]
 800d0fe:	6838      	ldr	r0, [r7, #0]
 800d100:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d102:	2300      	movs	r3, #0
 800d104:	e001      	b.n	800d10a <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d106:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	20000720 	.word	0x20000720
 800d118:	0800c849 	.word	0x0800c849
 800d11c:	0800c981 	.word	0x0800c981
 800d120:	0800cb31 	.word	0x0800cb31
 800d124:	20000748 	.word	0x20000748
 800d128:	200000d8 	.word	0x200000d8

0800d12c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	2b04      	cmp	r3, #4
 800d13a:	d80e      	bhi.n	800d15a <LmHandlerPackageIsInitialized+0x2e>
 800d13c:	79fb      	ldrb	r3, [r7, #7]
 800d13e:	4a09      	ldr	r2, [pc, #36]	; (800d164 <LmHandlerPackageIsInitialized+0x38>)
 800d140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d007      	beq.n	800d15a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d14a:	79fb      	ldrb	r3, [r7, #7]
 800d14c:	4a05      	ldr	r2, [pc, #20]	; (800d164 <LmHandlerPackageIsInitialized+0x38>)
 800d14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	4798      	blx	r3
 800d156:	4603      	mov	r3, r0
 800d158:	e000      	b.n	800d15c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d15a:	2300      	movs	r3, #0
    }
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	20000720 	.word	0x20000720

0800d168 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	6039      	str	r1, [r7, #0]
 800d172:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d174:	2300      	movs	r3, #0
 800d176:	73fb      	strb	r3, [r7, #15]
 800d178:	e07e      	b.n	800d278 <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800d17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d17e:	4a43      	ldr	r2, [pc, #268]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d066      	beq.n	800d256 <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800d188:	79fb      	ldrb	r3, [r7, #7]
 800d18a:	2b03      	cmp	r3, #3
 800d18c:	d865      	bhi.n	800d25a <LmHandlerPackagesNotify+0xf2>
 800d18e:	a201      	add	r2, pc, #4	; (adr r2, 800d194 <LmHandlerPackagesNotify+0x2c>)
 800d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d194:	0800d1a5 	.word	0x0800d1a5
 800d198:	0800d1c7 	.word	0x0800d1c7
 800d19c:	0800d213 	.word	0x0800d213
 800d1a0:	0800d235 	.word	0x0800d235
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d1a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1a8:	4a38      	ldr	r2, [pc, #224]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d054      	beq.n	800d25e <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d1b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1b8:	4a34      	ldr	r2, [pc, #208]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	6838      	ldr	r0, [r7, #0]
 800d1c2:	4798      	blx	r3
                    }
                    break;
 800d1c4:	e04b      	b.n	800d25e <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1ca:	4a30      	ldr	r2, [pc, #192]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1d0:	69db      	ldr	r3, [r3, #28]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d045      	beq.n	800d262 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1da:	4a2c      	ldr	r2, [pc, #176]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d00a      	beq.n	800d200 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d137      	bne.n	800d262 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800d1f2:	4b26      	ldr	r3, [pc, #152]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	4798      	blx	r3
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d030      	beq.n	800d262 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d204:	4a21      	ldr	r2, [pc, #132]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20a:	69db      	ldr	r3, [r3, #28]
 800d20c:	6838      	ldr	r0, [r7, #0]
 800d20e:	4798      	blx	r3
                    }
                    break;
 800d210:	e027      	b.n	800d262 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d216:	4a1d      	ldr	r2, [pc, #116]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d21c:	6a1b      	ldr	r3, [r3, #32]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d021      	beq.n	800d266 <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d226:	4a19      	ldr	r2, [pc, #100]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	6838      	ldr	r0, [r7, #0]
 800d230:	4798      	blx	r3
                    }
                    break;
 800d232:	e018      	b.n	800d266 <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d238:	4a14      	ldr	r2, [pc, #80]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d012      	beq.n	800d26a <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d248:	4a10      	ldr	r2, [pc, #64]	; (800d28c <LmHandlerPackagesNotify+0x124>)
 800d24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d250:	6838      	ldr	r0, [r7, #0]
 800d252:	4798      	blx	r3
                    }
                    break;
 800d254:	e009      	b.n	800d26a <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800d256:	bf00      	nop
 800d258:	e008      	b.n	800d26c <LmHandlerPackagesNotify+0x104>
                    break;
 800d25a:	bf00      	nop
 800d25c:	e006      	b.n	800d26c <LmHandlerPackagesNotify+0x104>
                    break;
 800d25e:	bf00      	nop
 800d260:	e004      	b.n	800d26c <LmHandlerPackagesNotify+0x104>
                    break;
 800d262:	bf00      	nop
 800d264:	e002      	b.n	800d26c <LmHandlerPackagesNotify+0x104>
                    break;
 800d266:	bf00      	nop
 800d268:	e000      	b.n	800d26c <LmHandlerPackagesNotify+0x104>
                    break;
 800d26a:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d270:	b2db      	uxtb	r3, r3
 800d272:	3301      	adds	r3, #1
 800d274:	b2db      	uxtb	r3, r3
 800d276:	73fb      	strb	r3, [r7, #15]
 800d278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d27c:	2b04      	cmp	r3, #4
 800d27e:	f77f af7c 	ble.w	800d17a <LmHandlerPackagesNotify+0x12>
    }
}
 800d282:	bf00      	nop
 800d284:	bf00      	nop
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	20000720 	.word	0x20000720

0800d290 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d296:	2300      	movs	r3, #0
 800d298:	71fb      	strb	r3, [r7, #7]
 800d29a:	e022      	b.n	800d2e2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d29c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a0:	4a14      	ldr	r2, [pc, #80]	; (800d2f4 <LmHandlerPackagesProcess+0x64>)
 800d2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d015      	beq.n	800d2d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2ae:	4a11      	ldr	r2, [pc, #68]	; (800d2f4 <LmHandlerPackagesProcess+0x64>)
 800d2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2b4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00d      	beq.n	800d2d6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff ff35 	bl	800d12c <LmHandlerPackageIsInitialized>
 800d2c2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d006      	beq.n	800d2d6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d2c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2cc:	4a09      	ldr	r2, [pc, #36]	; (800d2f4 <LmHandlerPackagesProcess+0x64>)
 800d2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d2d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	3301      	adds	r3, #1
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	71fb      	strb	r3, [r7, #7]
 800d2e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2e6:	2b04      	cmp	r3, #4
 800d2e8:	ddd8      	ble.n	800d29c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d2ea:	bf00      	nop
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	20000720 	.word	0x20000720

0800d2f8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d102      	bne.n	800d310 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d30a:	f04f 33ff 	mov.w	r3, #4294967295
 800d30e:	e00e      	b.n	800d32e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d310:	79fb      	ldrb	r3, [r7, #7]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d002      	beq.n	800d31c <LmHandlerGetVersion+0x24>
 800d316:	2b01      	cmp	r3, #1
 800d318:	d004      	beq.n	800d324 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d31a:	e007      	b.n	800d32c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	4a06      	ldr	r2, [pc, #24]	; (800d338 <LmHandlerGetVersion+0x40>)
 800d320:	601a      	str	r2, [r3, #0]
            break;
 800d322:	e003      	b.n	800d32c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	4a05      	ldr	r2, [pc, #20]	; (800d33c <LmHandlerGetVersion+0x44>)
 800d328:	601a      	str	r2, [r3, #0]
            break;
 800d32a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	bc80      	pop	{r7}
 800d336:	4770      	bx	lr
 800d338:	01000300 	.word	0x01000300
 800d33c:	01010003 	.word	0x01010003

0800d340 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d344:	f005 f826 	bl	8012394 <LoRaMacDeInitialization>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d34e:	2300      	movs	r3, #0
 800d350:	e001      	b.n	800d356 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d352:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d356:	4618      	mov	r0, r3
 800d358:	bd80      	pop	{r7, pc}

0800d35a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d35e:	f004 f825 	bl	80113ac <LoRaMacHalt>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d368:	2300      	movs	r3, #0
 800d36a:	e001      	b.n	800d370 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d36c:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d370:	4618      	mov	r0, r3
 800d372:	bd80      	pop	{r7, pc}

0800d374 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b08e      	sub	sp, #56	; 0x38
 800d378:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d37a:	2300      	movs	r3, #0
 800d37c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d384:	f7ff ffe9 	bl	800d35a <LmHandlerHalt>
 800d388:	4603      	mov	r3, r0
 800d38a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d38e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d392:	2b00      	cmp	r3, #0
 800d394:	d12f      	bne.n	800d3f6 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d396:	f000 f84f 	bl	800d438 <NvmDataMgmtStoreBegin>
 800d39a:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	f113 0f02 	cmn.w	r3, #2
 800d3a2:	d103      	bne.n	800d3ac <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d3a4:	23f8      	movs	r3, #248	; 0xf8
 800d3a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d3aa:	e01c      	b.n	800d3e6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d104      	bne.n	800d3bc <LmHandlerNvmDataStore+0x48>
 800d3b2:	4b1b      	ldr	r3, [pc, #108]	; (800d420 <LmHandlerNvmDataStore+0xac>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d103      	bne.n	800d3c4 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d3bc:	23ff      	movs	r3, #255	; 0xff
 800d3be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d3c2:	e010      	b.n	800d3e6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d3c4:	2326      	movs	r3, #38	; 0x26
 800d3c6:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d3c8:	1d3b      	adds	r3, r7, #4
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f004 f8ae 	bl	801152c <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d3d4:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800d3d8:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d3da:	4b11      	ldr	r3, [pc, #68]	; (800d420 <LmHandlerNvmDataStore+0xac>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	695b      	ldr	r3, [r3, #20]
 800d3e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3e4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d3e6:	f000 f82f 	bl	800d448 <NvmDataMgmtStoreEnd>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d3f0:	23ff      	movs	r3, #255	; 0xff
 800d3f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d3f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d109      	bne.n	800d412 <LmHandlerNvmDataStore+0x9e>
 800d3fe:	4b08      	ldr	r3, [pc, #32]	; (800d420 <LmHandlerNvmDataStore+0xac>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69db      	ldr	r3, [r3, #28]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d004      	beq.n	800d412 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d408:	4b05      	ldr	r3, [pc, #20]	; (800d420 <LmHandlerNvmDataStore+0xac>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	69db      	ldr	r3, [r3, #28]
 800d40e:	2001      	movs	r0, #1
 800d410:	4798      	blx	r3
    }

    return lmhStatus;
 800d412:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d416:	4618      	mov	r0, r3
 800d418:	3738      	adds	r7, #56	; 0x38
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20000748 	.word	0x20000748

0800d424 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d42e:	bf00      	nop
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	bc80      	pop	{r7}
 800d436:	4770      	bx	lr

0800d438 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800d43c:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d440:	4618      	mov	r0, r3
 800d442:	46bd      	mov	sp, r7
 800d444:	bc80      	pop	{r7}
 800d446:	4770      	bx	lr

0800d448 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d448:	b480      	push	{r7}
 800d44a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800d44c:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d450:	4618      	mov	r0, r3
 800d452:	46bd      	mov	sp, r7
 800d454:	bc80      	pop	{r7}
 800d456:	4770      	bx	lr

0800d458 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d458:	b480      	push	{r7}
 800d45a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d45c:	4b02      	ldr	r3, [pc, #8]	; (800d468 <LmhpCompliancePackageFactory+0x10>)
}
 800d45e:	4618      	mov	r0, r3
 800d460:	46bd      	mov	sp, r7
 800d462:	bc80      	pop	{r7}
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	200000e0 	.word	0x200000e0

0800d46c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	4613      	mov	r3, r2
 800d478:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00f      	beq.n	800d4a0 <LmhpComplianceInit+0x34>
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00c      	beq.n	800d4a0 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800d486:	4a0c      	ldr	r2, [pc, #48]	; (800d4b8 <LmhpComplianceInit+0x4c>)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d48c:	4a0b      	ldr	r2, [pc, #44]	; (800d4bc <LmhpComplianceInit+0x50>)
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d492:	4a0a      	ldr	r2, [pc, #40]	; (800d4bc <LmhpComplianceInit+0x50>)
 800d494:	79fb      	ldrb	r3, [r7, #7]
 800d496:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d498:	4b08      	ldr	r3, [pc, #32]	; (800d4bc <LmhpComplianceInit+0x50>)
 800d49a:	2201      	movs	r2, #1
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	e006      	b.n	800d4ae <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d4a0:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <LmhpComplianceInit+0x4c>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <LmhpComplianceInit+0x50>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	701a      	strb	r2, [r3, #0]
    }
}
 800d4ac:	bf00      	nop
 800d4ae:	bf00      	nop
 800d4b0:	3714      	adds	r7, #20
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bc80      	pop	{r7}
 800d4b6:	4770      	bx	lr
 800d4b8:	20000894 	.word	0x20000894
 800d4bc:	20000880 	.word	0x20000880

0800d4c0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <LmhpComplianceIsInitialized+0x10>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bc80      	pop	{r7}
 800d4ce:	4770      	bx	lr
 800d4d0:	20000880 	.word	0x20000880

0800d4d4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d4d8:	4b07      	ldr	r3, [pc, #28]	; (800d4f8 <LmhpComplianceIsRunning+0x24>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	f083 0301 	eor.w	r3, r3, #1
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	e001      	b.n	800d4ee <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d4ea:	4b03      	ldr	r3, [pc, #12]	; (800d4f8 <LmhpComplianceIsRunning+0x24>)
 800d4ec:	785b      	ldrb	r3, [r3, #1]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bc80      	pop	{r7}
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	20000880 	.word	0x20000880

0800d4fc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800d504:	4b0f      	ldr	r3, [pc, #60]	; (800d544 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	f083 0301 	eor.w	r3, r3, #1
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d112      	bne.n	800d538 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d512:	4b0c      	ldr	r3, [pc, #48]	; (800d544 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d514:	785b      	ldrb	r3, [r3, #1]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00f      	beq.n	800d53a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d10b      	bne.n	800d53a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d526:	2b00      	cmp	r3, #0
 800d528:	d007      	beq.n	800d53a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d52a:	4b06      	ldr	r3, [pc, #24]	; (800d544 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d52c:	899b      	ldrh	r3, [r3, #12]
 800d52e:	3301      	adds	r3, #1
 800d530:	b29a      	uxth	r2, r3
 800d532:	4b04      	ldr	r3, [pc, #16]	; (800d544 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d534:	819a      	strh	r2, [r3, #12]
 800d536:	e000      	b.n	800d53a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d538:	bf00      	nop
    }
}
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bc80      	pop	{r7}
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	20000880 	.word	0x20000880

0800d548 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d550:	4b12      	ldr	r3, [pc, #72]	; (800d59c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	f083 0301 	eor.w	r3, r3, #1
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d116      	bne.n	800d58c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d560:	785b      	ldrb	r3, [r3, #1]
 800d562:	f083 0301 	eor.w	r3, r3, #1
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d111      	bne.n	800d590 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b04      	cmp	r3, #4
 800d572:	d10e      	bne.n	800d592 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d574:	4b09      	ldr	r3, [pc, #36]	; (800d59c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d576:	2201      	movs	r2, #1
 800d578:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	7a1a      	ldrb	r2, [r3, #8]
 800d57e:	4b07      	ldr	r3, [pc, #28]	; (800d59c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d580:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	7a5a      	ldrb	r2, [r3, #9]
 800d586:	4b05      	ldr	r3, [pc, #20]	; (800d59c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d588:	741a      	strb	r2, [r3, #16]
 800d58a:	e002      	b.n	800d592 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d58c:	bf00      	nop
 800d58e:	e000      	b.n	800d592 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d590:	bf00      	nop
    }
}
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	bc80      	pop	{r7}
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20000880 	.word	0x20000880

0800d5a0 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d5a6:	4b33      	ldr	r3, [pc, #204]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	f083 0301 	eor.w	r3, r3, #1
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d002      	beq.n	800d5ba <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b8:	e057      	b.n	800d66a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800d5ba:	4b2e      	ldr	r3, [pc, #184]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5bc:	785b      	ldrb	r3, [r3, #1]
 800d5be:	f083 0301 	eor.w	r3, r3, #1
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	e04e      	b.n	800d66a <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d5cc:	4b29      	ldr	r3, [pc, #164]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5ce:	7b9b      	ldrb	r3, [r3, #14]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d019      	beq.n	800d608 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d5d4:	4b27      	ldr	r3, [pc, #156]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d5da:	4b26      	ldr	r3, [pc, #152]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5dc:	2203      	movs	r2, #3
 800d5de:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d5e0:	4b24      	ldr	r3, [pc, #144]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	2205      	movs	r2, #5
 800d5e6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d5e8:	4b22      	ldr	r3, [pc, #136]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	4a21      	ldr	r2, [pc, #132]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5f0:	7bd2      	ldrb	r2, [r2, #15]
 800d5f2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d5f4:	4b1f      	ldr	r3, [pc, #124]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	3302      	adds	r3, #2
 800d5fa:	4a1e      	ldr	r2, [pc, #120]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d5fc:	7c12      	ldrb	r2, [r2, #16]
 800d5fe:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d600:	4b1c      	ldr	r3, [pc, #112]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d602:	2201      	movs	r2, #1
 800d604:	709a      	strb	r2, [r3, #2]
 800d606:	e01c      	b.n	800d642 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d608:	4b1a      	ldr	r3, [pc, #104]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d60a:	789b      	ldrb	r3, [r3, #2]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d005      	beq.n	800d61c <LmhpComplianceTxProcess+0x7c>
 800d610:	2b04      	cmp	r3, #4
 800d612:	d116      	bne.n	800d642 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d614:	4b17      	ldr	r3, [pc, #92]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d616:	2201      	movs	r2, #1
 800d618:	709a      	strb	r2, [r3, #2]
            break;
 800d61a:	e012      	b.n	800d642 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d61c:	4b15      	ldr	r3, [pc, #84]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d61e:	2202      	movs	r2, #2
 800d620:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d622:	4b14      	ldr	r3, [pc, #80]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d624:	899b      	ldrh	r3, [r3, #12]
 800d626:	0a1b      	lsrs	r3, r3, #8
 800d628:	b29a      	uxth	r2, r3
 800d62a:	4b12      	ldr	r3, [pc, #72]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	b2d2      	uxtb	r2, r2
 800d630:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d632:	4b10      	ldr	r3, [pc, #64]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d634:	899a      	ldrh	r2, [r3, #12]
 800d636:	4b0f      	ldr	r3, [pc, #60]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	3301      	adds	r3, #1
 800d63c:	b2d2      	uxtb	r2, r2
 800d63e:	701a      	strb	r2, [r3, #0]
            break;
 800d640:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d642:	23e0      	movs	r3, #224	; 0xe0
 800d644:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d648:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d64a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d64c:	4b09      	ldr	r3, [pc, #36]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d64e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d650:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d652:	4809      	ldr	r0, [pc, #36]	; (800d678 <LmhpComplianceTxProcess+0xd8>)
 800d654:	f00d fb32 	bl	801acbc <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800d658:	4b08      	ldr	r3, [pc, #32]	; (800d67c <LmhpComplianceTxProcess+0xdc>)
 800d65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65c:	4a05      	ldr	r2, [pc, #20]	; (800d674 <LmhpComplianceTxProcess+0xd4>)
 800d65e:	78d2      	ldrb	r2, [r2, #3]
 800d660:	4611      	mov	r1, r2
 800d662:	4638      	mov	r0, r7
 800d664:	2201      	movs	r2, #1
 800d666:	4798      	blx	r3
 800d668:	4603      	mov	r3, r0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000880 	.word	0x20000880
 800d678:	20000868 	.word	0x20000868
 800d67c:	200000e0 	.word	0x200000e0

0800d680 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b0a2      	sub	sp, #136	; 0x88
 800d684:	af02      	add	r7, sp, #8
 800d686:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d688:	4ba3      	ldr	r3, [pc, #652]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	f083 0301 	eor.w	r3, r3, #1
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	f040 81c2 	bne.w	800da1c <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7b5b      	ldrb	r3, [r3, #13]
 800d69c:	f083 0301 	eor.w	r3, r3, #1
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f040 81bc 	bne.w	800da20 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d6a8:	4b9b      	ldr	r3, [pc, #620]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d6aa:	785b      	ldrb	r3, [r3, #1]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00c      	beq.n	800d6ca <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	7b9b      	ldrb	r3, [r3, #14]
 800d6b4:	f083 0301 	eor.w	r3, r3, #1
 800d6b8:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d005      	beq.n	800d6ca <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d6be:	4b96      	ldr	r3, [pc, #600]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d6c0:	899b      	ldrh	r3, [r3, #12]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	4b94      	ldr	r3, [pc, #592]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d6c8:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	78db      	ldrb	r3, [r3, #3]
 800d6ce:	2be0      	cmp	r3, #224	; 0xe0
 800d6d0:	f040 81a8 	bne.w	800da24 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d6d4:	4b90      	ldr	r3, [pc, #576]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d6d6:	785b      	ldrb	r3, [r3, #1]
 800d6d8:	f083 0301 	eor.w	r3, r3, #1
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d060      	beq.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	7b1b      	ldrb	r3, [r3, #12]
 800d6e6:	2b04      	cmp	r3, #4
 800d6e8:	f040 81a1 	bne.w	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	f040 819b 	bne.w	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d700:	2b01      	cmp	r3, #1
 800d702:	f040 8194 	bne.w	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	3302      	adds	r3, #2
 800d70c:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d70e:	2b01      	cmp	r3, #1
 800d710:	f040 818d 	bne.w	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	3303      	adds	r3, #3
 800d71a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	f040 8186 	bne.w	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d722:	4b7d      	ldr	r3, [pc, #500]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d724:	2200      	movs	r2, #0
 800d726:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d728:	4b7b      	ldr	r3, [pc, #492]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d72a:	22e0      	movs	r2, #224	; 0xe0
 800d72c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d72e:	4b7a      	ldr	r3, [pc, #488]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d730:	2202      	movs	r2, #2
 800d732:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d734:	4b78      	ldr	r3, [pc, #480]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d736:	2200      	movs	r2, #0
 800d738:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d73a:	4b77      	ldr	r3, [pc, #476]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d740:	4b75      	ldr	r3, [pc, #468]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d742:	2200      	movs	r2, #0
 800d744:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d746:	4b74      	ldr	r3, [pc, #464]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d748:	2200      	movs	r2, #0
 800d74a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d74c:	4b72      	ldr	r3, [pc, #456]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d74e:	2201      	movs	r2, #1
 800d750:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d752:	4b71      	ldr	r3, [pc, #452]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d754:	2201      	movs	r2, #1
 800d756:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d758:	2304      	movs	r3, #4
 800d75a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d75c:	2301      	movs	r3, #1
 800d75e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d760:	f107 0308 	add.w	r3, r7, #8
 800d764:	4618      	mov	r0, r3
 800d766:	f004 f867 	bl	8011838 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d76a:	2000      	movs	r0, #0
 800d76c:	f004 fdf4 	bl	8012358 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d770:	4b6a      	ldr	r3, [pc, #424]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d77a:	4b68      	ldr	r3, [pc, #416]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d782:	2300      	movs	r3, #0
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	4b66      	ldr	r3, [pc, #408]	; (800d920 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d788:	2200      	movs	r2, #0
 800d78a:	f04f 31ff 	mov.w	r1, #4294967295
 800d78e:	4865      	ldr	r0, [pc, #404]	; (800d924 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d790:	f00d fa5e 	bl	801ac50 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d794:	f241 3188 	movw	r1, #5000	; 0x1388
 800d798:	4862      	ldr	r0, [pc, #392]	; (800d924 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d79a:	f00d fb6d 	bl	801ae78 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d79e:	f7ff feff 	bl	800d5a0 <LmhpComplianceTxProcess>
 800d7a2:	e144      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	781a      	ldrb	r2, [r3, #0]
 800d7aa:	4b5b      	ldr	r3, [pc, #364]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d7ac:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d7ae:	4b5a      	ldr	r3, [pc, #360]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d7b0:	789b      	ldrb	r3, [r3, #2]
 800d7b2:	2b0a      	cmp	r3, #10
 800d7b4:	f200 8138 	bhi.w	800da28 <LmhpComplianceOnMcpsIndication+0x3a8>
 800d7b8:	a201      	add	r2, pc, #4	; (adr r2, 800d7c0 <LmhpComplianceOnMcpsIndication+0x140>)
 800d7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7be:	bf00      	nop
 800d7c0:	0800d7ed 	.word	0x0800d7ed
 800d7c4:	0800d837 	.word	0x0800d837
 800d7c8:	0800d83f 	.word	0x0800d83f
 800d7cc:	0800d84d 	.word	0x0800d84d
 800d7d0:	0800d85b 	.word	0x0800d85b
 800d7d4:	0800d8b3 	.word	0x0800d8b3
 800d7d8:	0800d8c5 	.word	0x0800d8c5
 800d7dc:	0800d92d 	.word	0x0800d92d
 800d7e0:	0800d9d5 	.word	0x0800d9d5
 800d7e4:	0800d9e7 	.word	0x0800d9e7
 800d7e8:	0800da01 	.word	0x0800da01
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d7ec:	484d      	ldr	r0, [pc, #308]	; (800d924 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d7ee:	f00d fad3 	bl	801ad98 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d7f2:	4b49      	ldr	r3, [pc, #292]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d7f8:	4b47      	ldr	r3, [pc, #284]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800d7fe:	2304      	movs	r3, #4
 800d800:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d802:	4b46      	ldr	r3, [pc, #280]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d80a:	f107 0308 	add.w	r3, r7, #8
 800d80e:	4618      	mov	r0, r3
 800d810:	f004 f812 	bl	8011838 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d814:	4b41      	ldr	r3, [pc, #260]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	785b      	ldrb	r3, [r3, #1]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f004 fd9c 	bl	8012358 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d820:	4b3e      	ldr	r3, [pc, #248]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 8100 	beq.w	800da2c <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d82c:	4b3b      	ldr	r3, [pc, #236]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	4798      	blx	r3
                }
            }
            break;
 800d834:	e0fa      	b.n	800da2c <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d836:	4b38      	ldr	r3, [pc, #224]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d838:	2202      	movs	r2, #2
 800d83a:	719a      	strb	r2, [r3, #6]
            break;
 800d83c:	e0f7      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d83e:	4b36      	ldr	r3, [pc, #216]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d840:	2201      	movs	r2, #1
 800d842:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d844:	4b34      	ldr	r3, [pc, #208]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d846:	2201      	movs	r2, #1
 800d848:	709a      	strb	r2, [r3, #2]
            break;
 800d84a:	e0f0      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d84c:	4b32      	ldr	r3, [pc, #200]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d84e:	2200      	movs	r2, #0
 800d850:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d852:	4b31      	ldr	r3, [pc, #196]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d854:	2201      	movs	r2, #1
 800d856:	709a      	strb	r2, [r3, #2]
            break;
 800d858:	e0e9      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	7b1a      	ldrb	r2, [r3, #12]
 800d85e:	4b2e      	ldr	r3, [pc, #184]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d860:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d862:	4b2d      	ldr	r3, [pc, #180]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	2204      	movs	r2, #4
 800d868:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d86a:	2301      	movs	r3, #1
 800d86c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d870:	e012      	b.n	800d898 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	689a      	ldr	r2, [r3, #8]
 800d876:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d87a:	4413      	add	r3, r2
 800d87c:	781a      	ldrb	r2, [r3, #0]
 800d87e:	4b26      	ldr	r3, [pc, #152]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d880:	6899      	ldr	r1, [r3, #8]
 800d882:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d886:	440b      	add	r3, r1
 800d888:	3201      	adds	r2, #1
 800d88a:	b2d2      	uxtb	r2, r2
 800d88c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d88e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d892:	3301      	adds	r3, #1
 800d894:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d898:	4b1f      	ldr	r3, [pc, #124]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d89a:	795a      	ldrb	r2, [r3, #5]
 800d89c:	4b1e      	ldr	r3, [pc, #120]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d89e:	799b      	ldrb	r3, [r3, #6]
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	bf28      	it	cs
 800d8a4:	4613      	movcs	r3, r2
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d3e0      	bcc.n	800d872 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d8b0:	e0bd      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d8b2:	2304      	movs	r3, #4
 800d8b4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d8b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f004 fb15 	bl	8011eec <LoRaMacMlmeRequest>
            }
            break;
 800d8c2:	e0b4      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d8c4:	4817      	ldr	r0, [pc, #92]	; (800d924 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d8c6:	f00d fa67 	bl	801ad98 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d8ca:	4b13      	ldr	r3, [pc, #76]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d8d0:	4b11      	ldr	r3, [pc, #68]	; (800d918 <LmhpComplianceOnMcpsIndication+0x298>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800d8d6:	2304      	movs	r3, #4
 800d8d8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d8da:	4b10      	ldr	r3, [pc, #64]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d8e2:	f107 0308 	add.w	r3, r7, #8
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f003 ffa6 	bl	8011838 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d8ec:	4b0b      	ldr	r3, [pc, #44]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	785b      	ldrb	r3, [r3, #1]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f004 fd30 	bl	8012358 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d8f8:	4b08      	ldr	r3, [pc, #32]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d902:	4b06      	ldr	r3, [pc, #24]	; (800d91c <LmhpComplianceOnMcpsIndication+0x29c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d90a:	4b07      	ldr	r3, [pc, #28]	; (800d928 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800d90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d90e:	2101      	movs	r1, #1
 800d910:	2002      	movs	r0, #2
 800d912:	4798      	blx	r3
            }
            break;
 800d914:	e08b      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
 800d916:	bf00      	nop
 800d918:	20000880 	.word	0x20000880
 800d91c:	20000894 	.word	0x20000894
 800d920:	0800da45 	.word	0x0800da45
 800d924:	20000868 	.word	0x20000868
 800d928:	200000e0 	.word	0x200000e0
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7b1b      	ldrb	r3, [r3, #12]
 800d930:	2b03      	cmp	r3, #3
 800d932:	d113      	bne.n	800d95c <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d934:	2305      	movs	r3, #5
 800d936:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	3301      	adds	r3, #1
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	021b      	lsls	r3, r3, #8
 800d944:	b21a      	sxth	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	3302      	adds	r3, #2
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	b21b      	sxth	r3, r3
 800d950:	4313      	orrs	r3, r2
 800d952:	b21b      	sxth	r3, r3
 800d954:	b29b      	uxth	r3, r3
 800d956:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d95a:	e032      	b.n	800d9c2 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	7b1b      	ldrb	r3, [r3, #12]
 800d960:	2b07      	cmp	r3, #7
 800d962:	d12e      	bne.n	800d9c2 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d964:	2306      	movs	r3, #6
 800d966:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	3301      	adds	r3, #1
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	021b      	lsls	r3, r3, #8
 800d974:	b21a      	sxth	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	3302      	adds	r3, #2
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	b21b      	sxth	r3, r3
 800d980:	4313      	orrs	r3, r2
 800d982:	b21b      	sxth	r3, r3
 800d984:	b29b      	uxth	r3, r3
 800d986:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	3303      	adds	r3, #3
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	041a      	lsls	r2, r3, #16
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	3304      	adds	r3, #4
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	021b      	lsls	r3, r3, #8
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	6892      	ldr	r2, [r2, #8]
 800d9a4:	3205      	adds	r2, #5
 800d9a6:	7812      	ldrb	r2, [r2, #0]
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	2364      	movs	r3, #100	; 0x64
 800d9ae:	fb02 f303 	mul.w	r3, r2, r3
 800d9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	3306      	adds	r3, #6
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	b25b      	sxtb	r3, r3
 800d9be:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d9c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f004 fa90 	bl	8011eec <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d9cc:	4b19      	ldr	r3, [pc, #100]	; (800da34 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d9d2:	e02c      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d9d4:	230a      	movs	r3, #10
 800d9d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d9da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f004 fa84 	bl	8011eec <LoRaMacMlmeRequest>
            }
            break;
 800d9e4:	e023      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d9f4:	f107 0308 	add.w	r3, r7, #8
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f003 ff1d 	bl	8011838 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d9fe:	e016      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800da00:	230d      	movs	r3, #13
 800da02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	785b      	ldrb	r3, [r3, #1]
 800da0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800da10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da14:	4618      	mov	r0, r3
 800da16:	f004 fa69 	bl	8011eec <LoRaMacMlmeRequest>
            }
            break;
 800da1a:	e008      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800da1c:	bf00      	nop
 800da1e:	e006      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800da20:	bf00      	nop
 800da22:	e004      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800da24:	bf00      	nop
 800da26:	e002      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800da28:	bf00      	nop
 800da2a:	e000      	b.n	800da2e <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800da2c:	bf00      	nop
        }
    }
}
 800da2e:	3780      	adds	r7, #128	; 0x80
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	20000880 	.word	0x20000880

0800da38 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800da38:	b480      	push	{r7}
 800da3a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800da3c:	bf00      	nop
 800da3e:	46bd      	mov	sp, r7
 800da40:	bc80      	pop	{r7}
 800da42:	4770      	bx	lr

0800da44 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800da4c:	f7ff fda8 	bl	800d5a0 <LmhpComplianceTxProcess>
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800da58:	b590      	push	{r4, r7, lr}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800da5e:	f00d fab5 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 800da62:	4603      	mov	r3, r0
 800da64:	4a16      	ldr	r2, [pc, #88]	; (800dac0 <OnRadioTxDone+0x68>)
 800da66:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800da68:	4c16      	ldr	r4, [pc, #88]	; (800dac4 <OnRadioTxDone+0x6c>)
 800da6a:	463b      	mov	r3, r7
 800da6c:	4618      	mov	r0, r3
 800da6e:	f00c fc27 	bl	801a2c0 <SysTimeGet>
 800da72:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800da76:	463a      	mov	r2, r7
 800da78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da7c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800da80:	4a11      	ldr	r2, [pc, #68]	; (800dac8 <OnRadioTxDone+0x70>)
 800da82:	7813      	ldrb	r3, [r2, #0]
 800da84:	f043 0310 	orr.w	r3, r3, #16
 800da88:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800da8a:	4b0e      	ldr	r3, [pc, #56]	; (800dac4 <OnRadioTxDone+0x6c>)
 800da8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00a      	beq.n	800daaa <OnRadioTxDone+0x52>
 800da94:	4b0b      	ldr	r3, [pc, #44]	; (800dac4 <OnRadioTxDone+0x6c>)
 800da96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d004      	beq.n	800daaa <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800daa0:	4b08      	ldr	r3, [pc, #32]	; (800dac4 <OnRadioTxDone+0x6c>)
 800daa2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800daaa:	4b08      	ldr	r3, [pc, #32]	; (800dacc <OnRadioTxDone+0x74>)
 800daac:	2201      	movs	r2, #1
 800daae:	2100      	movs	r1, #0
 800dab0:	2002      	movs	r0, #2
 800dab2:	f00d fb7b 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800dab6:	bf00      	nop
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd90      	pop	{r4, r7, pc}
 800dabe:	bf00      	nop
 800dac0:	20001bf8 	.word	0x20001bf8
 800dac4:	20000898 	.word	0x20000898
 800dac8:	20001bf4 	.word	0x20001bf4
 800dacc:	0801bb0c 	.word	0x0801bb0c

0800dad0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	4608      	mov	r0, r1
 800dada:	4611      	mov	r1, r2
 800dadc:	461a      	mov	r2, r3
 800dade:	4603      	mov	r3, r0
 800dae0:	817b      	strh	r3, [r7, #10]
 800dae2:	460b      	mov	r3, r1
 800dae4:	813b      	strh	r3, [r7, #8]
 800dae6:	4613      	mov	r3, r2
 800dae8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800daea:	f00d fa6f 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 800daee:	4603      	mov	r3, r0
 800daf0:	4a16      	ldr	r2, [pc, #88]	; (800db4c <OnRadioRxDone+0x7c>)
 800daf2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800daf4:	4a15      	ldr	r2, [pc, #84]	; (800db4c <OnRadioRxDone+0x7c>)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800dafa:	4a14      	ldr	r2, [pc, #80]	; (800db4c <OnRadioRxDone+0x7c>)
 800dafc:	897b      	ldrh	r3, [r7, #10]
 800dafe:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800db00:	4a12      	ldr	r2, [pc, #72]	; (800db4c <OnRadioRxDone+0x7c>)
 800db02:	893b      	ldrh	r3, [r7, #8]
 800db04:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800db06:	4a11      	ldr	r2, [pc, #68]	; (800db4c <OnRadioRxDone+0x7c>)
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800db0c:	4a10      	ldr	r2, [pc, #64]	; (800db50 <OnRadioRxDone+0x80>)
 800db0e:	7813      	ldrb	r3, [r2, #0]
 800db10:	f043 0308 	orr.w	r3, r3, #8
 800db14:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800db16:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <OnRadioRxDone+0x84>)
 800db18:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00a      	beq.n	800db36 <OnRadioRxDone+0x66>
 800db20:	4b0c      	ldr	r3, [pc, #48]	; (800db54 <OnRadioRxDone+0x84>)
 800db22:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d004      	beq.n	800db36 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800db2c:	4b09      	ldr	r3, [pc, #36]	; (800db54 <OnRadioRxDone+0x84>)
 800db2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800db36:	4b08      	ldr	r3, [pc, #32]	; (800db58 <OnRadioRxDone+0x88>)
 800db38:	2201      	movs	r2, #1
 800db3a:	2100      	movs	r1, #0
 800db3c:	2002      	movs	r0, #2
 800db3e:	f00d fb35 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	20001bfc 	.word	0x20001bfc
 800db50:	20001bf4 	.word	0x20001bf4
 800db54:	20000898 	.word	0x20000898
 800db58:	0801bb1c 	.word	0x0801bb1c

0800db5c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800db60:	4a0e      	ldr	r2, [pc, #56]	; (800db9c <OnRadioTxTimeout+0x40>)
 800db62:	7813      	ldrb	r3, [r2, #0]
 800db64:	f043 0304 	orr.w	r3, r3, #4
 800db68:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800db6a:	4b0d      	ldr	r3, [pc, #52]	; (800dba0 <OnRadioTxTimeout+0x44>)
 800db6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00a      	beq.n	800db8a <OnRadioTxTimeout+0x2e>
 800db74:	4b0a      	ldr	r3, [pc, #40]	; (800dba0 <OnRadioTxTimeout+0x44>)
 800db76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d004      	beq.n	800db8a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800db80:	4b07      	ldr	r3, [pc, #28]	; (800dba0 <OnRadioTxTimeout+0x44>)
 800db82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800db8a:	4b06      	ldr	r3, [pc, #24]	; (800dba4 <OnRadioTxTimeout+0x48>)
 800db8c:	2201      	movs	r2, #1
 800db8e:	2100      	movs	r1, #0
 800db90:	2002      	movs	r0, #2
 800db92:	f00d fb0b 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800db96:	bf00      	nop
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	20001bf4 	.word	0x20001bf4
 800dba0:	20000898 	.word	0x20000898
 800dba4:	0801bb2c 	.word	0x0801bb2c

0800dba8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800dbac:	4a0b      	ldr	r2, [pc, #44]	; (800dbdc <OnRadioRxError+0x34>)
 800dbae:	7813      	ldrb	r3, [r2, #0]
 800dbb0:	f043 0302 	orr.w	r3, r3, #2
 800dbb4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dbb6:	4b0a      	ldr	r3, [pc, #40]	; (800dbe0 <OnRadioRxError+0x38>)
 800dbb8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00a      	beq.n	800dbd6 <OnRadioRxError+0x2e>
 800dbc0:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <OnRadioRxError+0x38>)
 800dbc2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dbcc:	4b04      	ldr	r3, [pc, #16]	; (800dbe0 <OnRadioRxError+0x38>)
 800dbce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	4798      	blx	r3
    }
}
 800dbd6:	bf00      	nop
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20001bf4 	.word	0x20001bf4
 800dbe0:	20000898 	.word	0x20000898

0800dbe4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800dbe8:	4a0e      	ldr	r2, [pc, #56]	; (800dc24 <OnRadioRxTimeout+0x40>)
 800dbea:	7813      	ldrb	r3, [r2, #0]
 800dbec:	f043 0301 	orr.w	r3, r3, #1
 800dbf0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dbf2:	4b0d      	ldr	r3, [pc, #52]	; (800dc28 <OnRadioRxTimeout+0x44>)
 800dbf4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00a      	beq.n	800dc12 <OnRadioRxTimeout+0x2e>
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	; (800dc28 <OnRadioRxTimeout+0x44>)
 800dbfe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dc08:	4b07      	ldr	r3, [pc, #28]	; (800dc28 <OnRadioRxTimeout+0x44>)
 800dc0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc0e:	691b      	ldr	r3, [r3, #16]
 800dc10:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800dc12:	4b06      	ldr	r3, [pc, #24]	; (800dc2c <OnRadioRxTimeout+0x48>)
 800dc14:	2201      	movs	r2, #1
 800dc16:	2100      	movs	r1, #0
 800dc18:	2002      	movs	r0, #2
 800dc1a:	f00d fac7 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800dc1e:	bf00      	nop
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	20001bf4 	.word	0x20001bf4
 800dc28:	20000898 	.word	0x20000898
 800dc2c:	0801bb3c 	.word	0x0801bb3c

0800dc30 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800dc30:	b480      	push	{r7}
 800dc32:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dc34:	4b08      	ldr	r3, [pc, #32]	; (800dc58 <UpdateRxSlotIdleState+0x28>)
 800dc36:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d004      	beq.n	800dc48 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800dc3e:	4b07      	ldr	r3, [pc, #28]	; (800dc5c <UpdateRxSlotIdleState+0x2c>)
 800dc40:	2206      	movs	r2, #6
 800dc42:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800dc46:	e003      	b.n	800dc50 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dc48:	4b04      	ldr	r3, [pc, #16]	; (800dc5c <UpdateRxSlotIdleState+0x2c>)
 800dc4a:	2202      	movs	r2, #2
 800dc4c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800dc50:	bf00      	nop
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bc80      	pop	{r7}
 800dc56:	4770      	bx	lr
 800dc58:	20000da4 	.word	0x20000da4
 800dc5c:	20000898 	.word	0x20000898

0800dc60 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b08e      	sub	sp, #56	; 0x38
 800dc64:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dc66:	4b44      	ldr	r3, [pc, #272]	; (800dd78 <ProcessRadioTxDone+0x118>)
 800dc68:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	d002      	beq.n	800dc76 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800dc70:	4b42      	ldr	r3, [pc, #264]	; (800dd7c <ProcessRadioTxDone+0x11c>)
 800dc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc74:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800dc76:	4b42      	ldr	r3, [pc, #264]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dc78:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4841      	ldr	r0, [pc, #260]	; (800dd84 <ProcessRadioTxDone+0x124>)
 800dc80:	f00d f8fa 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800dc84:	483f      	ldr	r0, [pc, #252]	; (800dd84 <ProcessRadioTxDone+0x124>)
 800dc86:	f00d f819 	bl	801acbc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800dc8a:	4b3d      	ldr	r3, [pc, #244]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dc8c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800dc90:	4619      	mov	r1, r3
 800dc92:	483d      	ldr	r0, [pc, #244]	; (800dd88 <ProcessRadioTxDone+0x128>)
 800dc94:	f00d f8f0 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800dc98:	483b      	ldr	r0, [pc, #236]	; (800dd88 <ProcessRadioTxDone+0x128>)
 800dc9a:	f00d f80f 	bl	801acbc <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800dc9e:	4b36      	ldr	r3, [pc, #216]	; (800dd78 <ProcessRadioTxDone+0x118>)
 800dca0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d004      	beq.n	800dcb2 <ProcessRadioTxDone+0x52>
 800dca8:	4b35      	ldr	r3, [pc, #212]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dcaa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d019      	beq.n	800dce6 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800dcb2:	2316      	movs	r3, #22
 800dcb4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dcb8:	4b2f      	ldr	r3, [pc, #188]	; (800dd78 <ProcessRadioTxDone+0x118>)
 800dcba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcbe:	f107 0220 	add.w	r2, r7, #32
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f006 fc09 	bl	80144dc <RegionGetPhyParam>
 800dcca:	4603      	mov	r3, r0
 800dccc:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dcce:	4b2c      	ldr	r3, [pc, #176]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dcd0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	4619      	mov	r1, r3
 800dcda:	482c      	ldr	r0, [pc, #176]	; (800dd8c <ProcessRadioTxDone+0x12c>)
 800dcdc:	f00d f8cc 	bl	801ae78 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800dce0:	482a      	ldr	r0, [pc, #168]	; (800dd8c <ProcessRadioTxDone+0x12c>)
 800dce2:	f00c ffeb 	bl	801acbc <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800dce6:	4b2a      	ldr	r3, [pc, #168]	; (800dd90 <ProcessRadioTxDone+0x130>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a23      	ldr	r2, [pc, #140]	; (800dd78 <ProcessRadioTxDone+0x118>)
 800dcec:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800dcee:	4b24      	ldr	r3, [pc, #144]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dcf0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800dcf4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800dcf6:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <ProcessRadioTxDone+0x130>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dcfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd00:	4618      	mov	r0, r3
 800dd02:	f00c fb15 	bl	801a330 <SysTimeGetMcuTime>
 800dd06:	4638      	mov	r0, r7
 800dd08:	4b1b      	ldr	r3, [pc, #108]	; (800dd78 <ProcessRadioTxDone+0x118>)
 800dd0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800dd0e:	9200      	str	r2, [sp, #0]
 800dd10:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800dd14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800dd18:	ca06      	ldmia	r2, {r1, r2}
 800dd1a:	f00c fa6a 	bl	801a1f2 <SysTimeSub>
 800dd1e:	f107 0314 	add.w	r3, r7, #20
 800dd22:	463a      	mov	r2, r7
 800dd24:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd28:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800dd2c:	4b14      	ldr	r3, [pc, #80]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dd2e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800dd32:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800dd34:	2301      	movs	r3, #1
 800dd36:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dd38:	4b0f      	ldr	r3, [pc, #60]	; (800dd78 <ProcessRadioTxDone+0x118>)
 800dd3a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800dd42:	2300      	movs	r3, #0
 800dd44:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <ProcessRadioTxDone+0x118>)
 800dd48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd4c:	f107 0208 	add.w	r2, r7, #8
 800dd50:	4611      	mov	r1, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f006 fbda 	bl	801450c <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800dd58:	4b09      	ldr	r3, [pc, #36]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dd5a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dd5e:	f083 0301 	eor.w	r3, r3, #1
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d003      	beq.n	800dd70 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dd68:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <ProcessRadioTxDone+0x120>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800dd70:	bf00      	nop
 800dd72:	3730      	adds	r7, #48	; 0x30
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	20000da4 	.word	0x20000da4
 800dd7c:	0801c168 	.word	0x0801c168
 800dd80:	20000898 	.word	0x20000898
 800dd84:	20000c18 	.word	0x20000c18
 800dd88:	20000c30 	.word	0x20000c30
 800dd8c:	20000c90 	.word	0x20000c90
 800dd90:	20001bf8 	.word	0x20001bf8

0800dd94 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dd98:	4b10      	ldr	r3, [pc, #64]	; (800dddc <PrepareRxDoneAbort+0x48>)
 800dd9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dd9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dda2:	4a0e      	ldr	r2, [pc, #56]	; (800dddc <PrepareRxDoneAbort+0x48>)
 800dda4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800dda8:	4b0c      	ldr	r3, [pc, #48]	; (800dddc <PrepareRxDoneAbort+0x48>)
 800ddaa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	f001 f8f2 	bl	800ef9c <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ddb8:	4a08      	ldr	r2, [pc, #32]	; (800dddc <PrepareRxDoneAbort+0x48>)
 800ddba:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ddbe:	f043 0302 	orr.w	r3, r3, #2
 800ddc2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ddc6:	4a05      	ldr	r2, [pc, #20]	; (800dddc <PrepareRxDoneAbort+0x48>)
 800ddc8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ddcc:	f043 0320 	orr.w	r3, r3, #32
 800ddd0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800ddd4:	f7ff ff2c 	bl	800dc30 <UpdateRxSlotIdleState>
}
 800ddd8:	bf00      	nop
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	20000898 	.word	0x20000898

0800dde0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800dde0:	b5b0      	push	{r4, r5, r7, lr}
 800dde2:	b0a6      	sub	sp, #152	; 0x98
 800dde4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800dde6:	2313      	movs	r3, #19
 800dde8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800ddec:	4bb9      	ldr	r3, [pc, #740]	; (800e0d4 <ProcessRadioRxDone+0x2f4>)
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800ddf2:	4bb8      	ldr	r3, [pc, #736]	; (800e0d4 <ProcessRadioRxDone+0x2f4>)
 800ddf4:	891b      	ldrh	r3, [r3, #8]
 800ddf6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800ddfa:	4bb6      	ldr	r3, [pc, #728]	; (800e0d4 <ProcessRadioRxDone+0x2f4>)
 800ddfc:	895b      	ldrh	r3, [r3, #10]
 800ddfe:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800de02:	4bb4      	ldr	r3, [pc, #720]	; (800e0d4 <ProcessRadioRxDone+0x2f4>)
 800de04:	7b1b      	ldrb	r3, [r3, #12]
 800de06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800de14:	4bb0      	ldr	r3, [pc, #704]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800de16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800de1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800de24:	2301      	movs	r3, #1
 800de26:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800de2a:	4bac      	ldr	r3, [pc, #688]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800de32:	4aaa      	ldr	r2, [pc, #680]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de34:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800de38:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800de3c:	4aa7      	ldr	r2, [pc, #668]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de42:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800de46:	4ba5      	ldr	r3, [pc, #660]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de48:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800de4c:	4ba3      	ldr	r3, [pc, #652]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de4e:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800de52:	4ba2      	ldr	r3, [pc, #648]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de54:	2200      	movs	r2, #0
 800de56:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800de5a:	4ba0      	ldr	r3, [pc, #640]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800de62:	4b9e      	ldr	r3, [pc, #632]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de64:	2200      	movs	r2, #0
 800de66:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800de6a:	4b9c      	ldr	r3, [pc, #624]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800de72:	4b9a      	ldr	r3, [pc, #616]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de74:	2200      	movs	r2, #0
 800de76:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800de7a:	4b98      	ldr	r3, [pc, #608]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800de82:	4b96      	ldr	r3, [pc, #600]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de84:	2200      	movs	r2, #0
 800de86:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800de8a:	4b94      	ldr	r3, [pc, #592]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800de92:	4b92      	ldr	r3, [pc, #584]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de94:	2200      	movs	r2, #0
 800de96:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800de9a:	4b90      	ldr	r3, [pc, #576]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dea2:	4b8e      	ldr	r3, [pc, #568]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800deaa:	4b8d      	ldr	r3, [pc, #564]	; (800e0e0 <ProcessRadioRxDone+0x300>)
 800deac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deae:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800deb0:	488c      	ldr	r0, [pc, #560]	; (800e0e4 <ProcessRadioRxDone+0x304>)
 800deb2:	f00c ff71 	bl	801ad98 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800deb6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800deba:	4619      	mov	r1, r3
 800debc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800debe:	f004 fbaa 	bl	8012616 <LoRaMacClassBRxBeacon>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00a      	beq.n	800dede <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dec8:	4a84      	ldr	r2, [pc, #528]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800deca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800dece:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ded2:	4a82      	ldr	r2, [pc, #520]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800ded4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ded8:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800dedc:	e3c7      	b.n	800e66e <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dede:	4b7e      	ldr	r3, [pc, #504]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800dee0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d11e      	bne.n	800df26 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dee8:	f004 fba8 	bl	801263c <LoRaMacClassBIsPingExpected>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00a      	beq.n	800df08 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800def2:	2000      	movs	r0, #0
 800def4:	f004 fb59 	bl	80125aa <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800def8:	2000      	movs	r0, #0
 800defa:	f004 fb7a 	bl	80125f2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800defe:	4b77      	ldr	r3, [pc, #476]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800df00:	2204      	movs	r2, #4
 800df02:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800df06:	e00e      	b.n	800df26 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800df08:	f004 fb9f 	bl	801264a <LoRaMacClassBIsMulticastExpected>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d009      	beq.n	800df26 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800df12:	2000      	movs	r0, #0
 800df14:	f004 fb53 	bl	80125be <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800df18:	2000      	movs	r0, #0
 800df1a:	f004 fb73 	bl	8012604 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800df1e:	4b6f      	ldr	r3, [pc, #444]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800df20:	2205      	movs	r2, #5
 800df22:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800df26:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800df30:	461a      	mov	r2, r3
 800df32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df34:	4413      	add	r3, r2
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800df3c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800df40:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800df44:	b2db      	uxtb	r3, r3
 800df46:	3b01      	subs	r3, #1
 800df48:	2b06      	cmp	r3, #6
 800df4a:	f200 836a 	bhi.w	800e622 <ProcessRadioRxDone+0x842>
 800df4e:	a201      	add	r2, pc, #4	; (adr r2, 800df54 <ProcessRadioRxDone+0x174>)
 800df50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df54:	0800df71 	.word	0x0800df71
 800df58:	0800e623 	.word	0x0800e623
 800df5c:	0800e0f1 	.word	0x0800e0f1
 800df60:	0800e623 	.word	0x0800e623
 800df64:	0800e0e9 	.word	0x0800e0e9
 800df68:	0800e623 	.word	0x0800e623
 800df6c:	0800e5c9 	.word	0x0800e5c9
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800df70:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800df74:	2b10      	cmp	r3, #16
 800df76:	d806      	bhi.n	800df86 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df78:	4b58      	ldr	r3, [pc, #352]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800df80:	f7ff ff08 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800df84:	e373      	b.n	800e66e <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800df86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df88:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800df8a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800df92:	4b51      	ldr	r3, [pc, #324]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800df94:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d006      	beq.n	800dfaa <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df9c:	4b4f      	ldr	r3, [pc, #316]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dfa4:	f7ff fef6 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800dfa8:	e361      	b.n	800e66e <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800dfaa:	f7fe faa3 	bl	800c4f4 <SecureElementGetJoinEui>
 800dfae:	4601      	mov	r1, r0
 800dfb0:	f107 0308 	add.w	r3, r7, #8
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	20ff      	movs	r0, #255	; 0xff
 800dfb8:	f005 fd14 	bl	80139e4 <LoRaMacCryptoHandleJoinAccept>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dfc2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d172      	bne.n	800e0b0 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dfca:	7c7b      	ldrb	r3, [r7, #17]
 800dfcc:	461a      	mov	r2, r3
 800dfce:	4b42      	ldr	r3, [pc, #264]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800dfd0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dfd4:	4b40      	ldr	r3, [pc, #256]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800dfd6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800dfda:	7cbb      	ldrb	r3, [r7, #18]
 800dfdc:	021b      	lsls	r3, r3, #8
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	4a3d      	ldr	r2, [pc, #244]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800dfe2:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dfe6:	4b3c      	ldr	r3, [pc, #240]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800dfe8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800dfec:	7cfb      	ldrb	r3, [r7, #19]
 800dfee:	041b      	lsls	r3, r3, #16
 800dff0:	4313      	orrs	r3, r2
 800dff2:	4a39      	ldr	r2, [pc, #228]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800dff4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	4a37      	ldr	r2, [pc, #220]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800dffc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e000:	7e3b      	ldrb	r3, [r7, #24]
 800e002:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e006:	b2db      	uxtb	r3, r3
 800e008:	461a      	mov	r2, r3
 800e00a:	4b33      	ldr	r3, [pc, #204]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e00c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e010:	7e3b      	ldrb	r3, [r7, #24]
 800e012:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e016:	b2db      	uxtb	r3, r3
 800e018:	461a      	mov	r2, r3
 800e01a:	4b2f      	ldr	r3, [pc, #188]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e01c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e020:	7e3b      	ldrb	r3, [r7, #24]
 800e022:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e026:	b2db      	uxtb	r3, r3
 800e028:	461a      	mov	r2, r3
 800e02a:	4b2b      	ldr	r3, [pc, #172]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e02c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e030:	7e7b      	ldrb	r3, [r7, #25]
 800e032:	461a      	mov	r2, r3
 800e034:	4b28      	ldr	r3, [pc, #160]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e036:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e038:	4b27      	ldr	r3, [pc, #156]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d102      	bne.n	800e046 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e040:	4b25      	ldr	r3, [pc, #148]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e042:	2201      	movs	r2, #1
 800e044:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e046:	4b24      	ldr	r3, [pc, #144]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e04a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e04e:	fb02 f303 	mul.w	r3, r2, r3
 800e052:	4a21      	ldr	r2, [pc, #132]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e054:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e056:	4b20      	ldr	r3, [pc, #128]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e05a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e05e:	4a1e      	ldr	r2, [pc, #120]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e060:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e062:	4b1d      	ldr	r3, [pc, #116]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e06a:	f107 0308 	add.w	r3, r7, #8
 800e06e:	3312      	adds	r3, #18
 800e070:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e072:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e076:	b2db      	uxtb	r3, r3
 800e078:	3b11      	subs	r3, #17
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e080:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e086:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800e08a:	4611      	mov	r1, r2
 800e08c:	4618      	mov	r0, r3
 800e08e:	f006 fa77 	bl	8014580 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e092:	4b11      	ldr	r3, [pc, #68]	; (800e0d8 <ProcessRadioRxDone+0x2f8>)
 800e094:	2202      	movs	r2, #2
 800e096:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e09a:	2001      	movs	r0, #1
 800e09c:	f004 ff9a 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00e      	beq.n	800e0c4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e0a6:	2101      	movs	r1, #1
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	f004 ff07 	bl	8012ebc <LoRaMacConfirmQueueSetStatus>
 800e0ae:	e009      	b.n	800e0c4 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	f004 ff8f 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d003      	beq.n	800e0c4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e0bc:	2101      	movs	r1, #1
 800e0be:	2007      	movs	r0, #7
 800e0c0:	f004 fefc 	bl	8012ebc <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e0c4:	4a05      	ldr	r2, [pc, #20]	; (800e0dc <ProcessRadioRxDone+0x2fc>)
 800e0c6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e0ca:	f043 0308 	orr.w	r3, r3, #8
 800e0ce:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800e0d2:	e2ad      	b.n	800e630 <ProcessRadioRxDone+0x850>
 800e0d4:	20001bfc 	.word	0x20001bfc
 800e0d8:	20000da4 	.word	0x20000da4
 800e0dc:	20000898 	.word	0x20000898
 800e0e0:	0801c168 	.word	0x0801c168
 800e0e4:	20000c30 	.word	0x20000c30
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e0e8:	4bb0      	ldr	r3, [pc, #704]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e0f0:	4baf      	ldr	r3, [pc, #700]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e0f2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800e0f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e0fa:	4bac      	ldr	r3, [pc, #688]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e0fc:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800e100:	b25b      	sxtb	r3, r3
 800e102:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e106:	230d      	movs	r3, #13
 800e108:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e10c:	4ba8      	ldr	r3, [pc, #672]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e10e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e112:	2b00      	cmp	r3, #0
 800e114:	d002      	beq.n	800e11c <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e116:	230e      	movs	r3, #14
 800e118:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e11c:	4ba4      	ldr	r3, [pc, #656]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e11e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e122:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f006 f9d7 	bl	80144dc <RegionGetPhyParam>
 800e12e:	4603      	mov	r3, r0
 800e130:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e132:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e136:	3b0d      	subs	r3, #13
 800e138:	b29b      	uxth	r3, r3
 800e13a:	b21b      	sxth	r3, r3
 800e13c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e140:	b21a      	sxth	r2, r3
 800e142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e144:	b21b      	sxth	r3, r3
 800e146:	429a      	cmp	r2, r3
 800e148:	dc03      	bgt.n	800e152 <ProcessRadioRxDone+0x372>
 800e14a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e14e:	2b0b      	cmp	r3, #11
 800e150:	d806      	bhi.n	800e160 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e152:	4b96      	ldr	r3, [pc, #600]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e154:	2201      	movs	r2, #1
 800e156:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800e15a:	f7ff fe1b 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800e15e:	e286      	b.n	800e66e <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800e160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e162:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800e164:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e16e:	4b91      	ldr	r3, [pc, #580]	; (800e3b4 <ProcessRadioRxDone+0x5d4>)
 800e170:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e172:	23ff      	movs	r3, #255	; 0xff
 800e174:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e17c:	4618      	mov	r0, r3
 800e17e:	f005 ff30 	bl	8013fe2 <LoRaMacParserData>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d006      	beq.n	800e196 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e188:	4b88      	ldr	r3, [pc, #544]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800e190:	f7ff fe00 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800e194:	e26b      	b.n	800e66e <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	4a84      	ldr	r2, [pc, #528]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e19a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e19e:	1cba      	adds	r2, r7, #2
 800e1a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f002 fc9e 	bl	8010ae8 <DetermineFrameType>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d006      	beq.n	800e1c0 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e1b2:	4b7e      	ldr	r3, [pc, #504]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800e1ba:	f7ff fdeb 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800e1be:	e256      	b.n	800e66e <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800e1d0:	e049      	b.n	800e266 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e1d2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800e1d6:	4a76      	ldr	r2, [pc, #472]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e1d8:	212c      	movs	r1, #44	; 0x2c
 800e1da:	fb01 f303 	mul.w	r3, r1, r3
 800e1de:	4413      	add	r3, r2
 800e1e0:	33dc      	adds	r3, #220	; 0xdc
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d138      	bne.n	800e25c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e1ea:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800e1ee:	4a70      	ldr	r2, [pc, #448]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e1f0:	212c      	movs	r1, #44	; 0x2c
 800e1f2:	fb01 f303 	mul.w	r3, r1, r3
 800e1f6:	4413      	add	r3, r2
 800e1f8:	33da      	adds	r3, #218	; 0xda
 800e1fa:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d02d      	beq.n	800e25c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800e200:	2301      	movs	r3, #1
 800e202:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e206:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800e20a:	4a69      	ldr	r2, [pc, #420]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e20c:	212c      	movs	r1, #44	; 0x2c
 800e20e:	fb01 f303 	mul.w	r3, r1, r3
 800e212:	4413      	add	r3, r2
 800e214:	33db      	adds	r3, #219	; 0xdb
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e21c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800e220:	4a63      	ldr	r2, [pc, #396]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e222:	212c      	movs	r1, #44	; 0x2c
 800e224:	fb01 f303 	mul.w	r3, r1, r3
 800e228:	4413      	add	r3, r2
 800e22a:	33f8      	adds	r3, #248	; 0xf8
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e232:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800e236:	4a5e      	ldr	r2, [pc, #376]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e238:	212c      	movs	r1, #44	; 0x2c
 800e23a:	fb01 f303 	mul.w	r3, r1, r3
 800e23e:	4413      	add	r3, r2
 800e240:	33dc      	adds	r3, #220	; 0xdc
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e248:	4b59      	ldr	r3, [pc, #356]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e24a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d10e      	bne.n	800e270 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e252:	4b56      	ldr	r3, [pc, #344]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e254:	2203      	movs	r2, #3
 800e256:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800e25a:	e009      	b.n	800e270 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e25c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800e260:	3301      	adds	r3, #1
 800e262:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800e266:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d0b1      	beq.n	800e1d2 <ProcessRadioRxDone+0x3f2>
 800e26e:	e000      	b.n	800e272 <ProcessRadioRxDone+0x492>
                    break;
 800e270:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e272:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e276:	2b01      	cmp	r3, #1
 800e278:	d117      	bne.n	800e2aa <ProcessRadioRxDone+0x4ca>
 800e27a:	78bb      	ldrb	r3, [r7, #2]
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d10d      	bne.n	800e29c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e280:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e284:	f003 0320 	and.w	r3, r3, #32
 800e288:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d106      	bne.n	800e29c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e28e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e296:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d006      	beq.n	800e2aa <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e29c:	4b43      	ldr	r3, [pc, #268]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800e2a4:	f7ff fd76 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800e2a8:	e1e1      	b.n	800e66e <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800e2aa:	2315      	movs	r3, #21
 800e2ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2b0:	4b3f      	ldr	r3, [pc, #252]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e2b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2b6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f006 f90d 	bl	80144dc <RegionGetPhyParam>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e2c6:	78b9      	ldrb	r1, [r7, #2]
 800e2c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	4d38      	ldr	r5, [pc, #224]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e2ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e2d2:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e2d6:	1d3a      	adds	r2, r7, #4
 800e2d8:	9202      	str	r2, [sp, #8]
 800e2da:	1cfa      	adds	r2, r7, #3
 800e2dc:	9201      	str	r2, [sp, #4]
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800e2e4:	4622      	mov	r2, r4
 800e2e6:	f000 fe8f 	bl	800f008 <GetFCntDown>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e2f0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d035      	beq.n	800e364 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e2f8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e2fc:	2b07      	cmp	r3, #7
 800e2fe:	d119      	bne.n	800e334 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e300:	4b2a      	ldr	r3, [pc, #168]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e302:	2208      	movs	r2, #8
 800e304:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e308:	4b29      	ldr	r3, [pc, #164]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e30a:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d11d      	bne.n	800e34e <ProcessRadioRxDone+0x56e>
 800e312:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e316:	f023 031f 	bic.w	r3, r3, #31
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	2ba0      	cmp	r3, #160	; 0xa0
 800e31e:	d116      	bne.n	800e34e <ProcessRadioRxDone+0x56e>
 800e320:	4b23      	ldr	r3, [pc, #140]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e326:	429a      	cmp	r2, r3
 800e328:	d111      	bne.n	800e34e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e32a:	4b21      	ldr	r3, [pc, #132]	; (800e3b0 <ProcessRadioRxDone+0x5d0>)
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e332:	e00c      	b.n	800e34e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e334:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e338:	2b08      	cmp	r3, #8
 800e33a:	d104      	bne.n	800e346 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e33c:	4b1b      	ldr	r3, [pc, #108]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e33e:	220a      	movs	r2, #10
 800e340:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e344:	e003      	b.n	800e34e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e346:	4b19      	ldr	r3, [pc, #100]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e348:	2201      	movs	r2, #1
 800e34a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a16      	ldr	r2, [pc, #88]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e352:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a14      	ldr	r2, [pc, #80]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e35a:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800e35e:	f7ff fd19 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800e362:	e184      	b.n	800e66e <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e364:	78fa      	ldrb	r2, [r7, #3]
 800e366:	6879      	ldr	r1, [r7, #4]
 800e368:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e36c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	460b      	mov	r3, r1
 800e374:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e378:	f005 fc80 	bl	8013c7c <LoRaMacCryptoUnsecureMessage>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e382:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e386:	2b00      	cmp	r3, #0
 800e388:	d016      	beq.n	800e3b8 <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e38a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d104      	bne.n	800e39c <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e392:	4b06      	ldr	r3, [pc, #24]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e394:	220b      	movs	r2, #11
 800e396:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e39a:	e003      	b.n	800e3a4 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e39c:	4b03      	ldr	r3, [pc, #12]	; (800e3ac <ProcessRadioRxDone+0x5cc>)
 800e39e:	220c      	movs	r2, #12
 800e3a0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800e3a4:	f7ff fcf6 	bl	800dd94 <PrepareRxDoneAbort>
                return;
 800e3a8:	e161      	b.n	800e66e <ProcessRadioRxDone+0x88e>
 800e3aa:	bf00      	nop
 800e3ac:	20000898 	.word	0x20000898
 800e3b0:	20000da4 	.word	0x20000da4
 800e3b4:	20000ad0 	.word	0x20000ad0
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e3b8:	4bae      	ldr	r3, [pc, #696]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800e3c0:	4aac      	ldr	r2, [pc, #688]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e3c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e3c6:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e3ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e3ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4ba7      	ldr	r3, [pc, #668]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e3d8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800e3dc:	4ba5      	ldr	r3, [pc, #660]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800e3e4:	4ba3      	ldr	r3, [pc, #652]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	4aa1      	ldr	r2, [pc, #644]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e3f0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4a9f      	ldr	r2, [pc, #636]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e3f8:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e3fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e400:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e404:	b2db      	uxtb	r3, r3
 800e406:	2b00      	cmp	r3, #0
 800e408:	bf14      	ite	ne
 800e40a:	2301      	movne	r3, #1
 800e40c:	2300      	moveq	r3, #0
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	4b98      	ldr	r3, [pc, #608]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e412:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e416:	4b97      	ldr	r3, [pc, #604]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e41e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e422:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bf14      	ite	ne
 800e42c:	2301      	movne	r3, #1
 800e42e:	2300      	moveq	r3, #0
 800e430:	b2da      	uxtb	r2, r3
 800e432:	4b90      	ldr	r3, [pc, #576]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e434:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e438:	4b8e      	ldr	r3, [pc, #568]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e43a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d004      	beq.n	800e44c <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e442:	4b8c      	ldr	r3, [pc, #560]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e444:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d102      	bne.n	800e452 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e44c:	4b8a      	ldr	r3, [pc, #552]	; (800e678 <ProcessRadioRxDone+0x898>)
 800e44e:	2200      	movs	r2, #0
 800e450:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e452:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e456:	2b01      	cmp	r3, #1
 800e458:	d104      	bne.n	800e464 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e45a:	4b86      	ldr	r3, [pc, #536]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e45c:	2202      	movs	r2, #2
 800e45e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e462:	e01f      	b.n	800e4a4 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e464:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e468:	f023 031f 	bic.w	r3, r3, #31
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2ba0      	cmp	r3, #160	; 0xa0
 800e470:	d110      	bne.n	800e494 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e472:	4b81      	ldr	r3, [pc, #516]	; (800e678 <ProcessRadioRxDone+0x898>)
 800e474:	2201      	movs	r2, #1
 800e476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e47a:	4b7f      	ldr	r3, [pc, #508]	; (800e678 <ProcessRadioRxDone+0x898>)
 800e47c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800e480:	2b00      	cmp	r3, #0
 800e482:	d102      	bne.n	800e48a <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e486:	4a7c      	ldr	r2, [pc, #496]	; (800e678 <ProcessRadioRxDone+0x898>)
 800e488:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e48a:	4b7a      	ldr	r3, [pc, #488]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e48c:	2201      	movs	r2, #1
 800e48e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e492:	e007      	b.n	800e4a4 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e494:	4b78      	ldr	r3, [pc, #480]	; (800e678 <ProcessRadioRxDone+0x898>)
 800e496:	2200      	movs	r2, #0
 800e498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e49c:	4b75      	ldr	r3, [pc, #468]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e4a4:	4b73      	ldr	r3, [pc, #460]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e4a6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e4aa:	4a72      	ldr	r2, [pc, #456]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e4ac:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800e4b0:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f001 fee9 	bl	801028c <RemoveMacCommands>

            switch( fType )
 800e4ba:	78bb      	ldrb	r3, [r7, #2]
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d874      	bhi.n	800e5aa <ProcessRadioRxDone+0x7ca>
 800e4c0:	a201      	add	r2, pc, #4	; (adr r2, 800e4c8 <ProcessRadioRxDone+0x6e8>)
 800e4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c6:	bf00      	nop
 800e4c8:	0800e4d9 	.word	0x0800e4d9
 800e4cc:	0800e529 	.word	0x0800e529
 800e4d0:	0800e55f 	.word	0x0800e55f
 800e4d4:	0800e585 	.word	0x0800e585
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e4d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e4dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	461c      	mov	r4, r3
 800e4e4:	4b63      	ldr	r3, [pc, #396]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e4e6:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e4ea:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e4ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e4f2:	f102 0010 	add.w	r0, r2, #16
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	4622      	mov	r2, r4
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	f000 fee5 	bl	800f2cc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e502:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e506:	4b5b      	ldr	r3, [pc, #364]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e508:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e50e:	4a59      	ldr	r2, [pc, #356]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e510:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e514:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e518:	4b56      	ldr	r3, [pc, #344]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e51a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e51e:	4b55      	ldr	r3, [pc, #340]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e520:	2201      	movs	r2, #1
 800e522:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e526:	e047      	b.n	800e5b8 <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e528:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e52c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e530:	b2db      	uxtb	r3, r3
 800e532:	461c      	mov	r4, r3
 800e534:	4b4f      	ldr	r3, [pc, #316]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e536:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e53a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e53e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e542:	f102 0010 	add.w	r0, r2, #16
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	460b      	mov	r3, r1
 800e54a:	4622      	mov	r2, r4
 800e54c:	2100      	movs	r1, #0
 800e54e:	f000 febd 	bl	800f2cc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e552:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e556:	4b47      	ldr	r3, [pc, #284]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e558:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e55c:	e02c      	b.n	800e5b8 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e55e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e560:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e564:	4b43      	ldr	r3, [pc, #268]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e566:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800e56a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	460b      	mov	r3, r1
 800e572:	2100      	movs	r1, #0
 800e574:	f000 feaa 	bl	800f2cc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e578:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e57c:	4b3d      	ldr	r3, [pc, #244]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e57e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e582:	e019      	b.n	800e5b8 <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e584:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e588:	4b3a      	ldr	r3, [pc, #232]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e58a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e590:	4a38      	ldr	r2, [pc, #224]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e592:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e596:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e59a:	4b36      	ldr	r3, [pc, #216]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e59c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e5a0:	4b34      	ldr	r3, [pc, #208]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e5a8:	e006      	b.n	800e5b8 <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5aa:	4b32      	ldr	r3, [pc, #200]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e5b2:	f7ff fbef 	bl	800dd94 <PrepareRxDoneAbort>
                    break;
 800e5b6:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e5b8:	4a2e      	ldr	r2, [pc, #184]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e5ba:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e5be:	f043 0302 	orr.w	r3, r3, #2
 800e5c2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 800e5c6:	e033      	b.n	800e630 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e5c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e5cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e5ce:	18d1      	adds	r1, r2, r3
 800e5d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	461a      	mov	r2, r3
 800e5e0:	4826      	ldr	r0, [pc, #152]	; (800e67c <ProcessRadioRxDone+0x89c>)
 800e5e2:	f008 fa8e 	bl	8016b02 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e5e6:	4b23      	ldr	r3, [pc, #140]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e5e8:	2203      	movs	r2, #3
 800e5ea:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e5ee:	4b21      	ldr	r3, [pc, #132]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e5f6:	4b1f      	ldr	r3, [pc, #124]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e5f8:	4a20      	ldr	r2, [pc, #128]	; (800e67c <ProcessRadioRxDone+0x89c>)
 800e5fa:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e5fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e602:	b2da      	uxtb	r2, r3
 800e604:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	4b19      	ldr	r3, [pc, #100]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e60e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e612:	4a18      	ldr	r2, [pc, #96]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e614:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e618:	f043 0302 	orr.w	r3, r3, #2
 800e61c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800e620:	e006      	b.n	800e630 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e622:	4b14      	ldr	r3, [pc, #80]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e624:	2201      	movs	r2, #1
 800e626:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e62a:	f7ff fbb3 	bl	800dd94 <PrepareRxDoneAbort>
            break;
 800e62e:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e630:	4b10      	ldr	r3, [pc, #64]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e632:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e636:	2b00      	cmp	r3, #0
 800e638:	d008      	beq.n	800e64c <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e63a:	4b0e      	ldr	r3, [pc, #56]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e63c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00b      	beq.n	800e65c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e644:	2000      	movs	r0, #0
 800e646:	f000 fca9 	bl	800ef9c <OnAckTimeoutTimerEvent>
 800e64a:	e007      	b.n	800e65c <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <ProcessRadioRxDone+0x898>)
 800e64e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e652:	2b02      	cmp	r3, #2
 800e654:	d102      	bne.n	800e65c <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e656:	2000      	movs	r0, #0
 800e658:	f000 fca0 	bl	800ef9c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e65c:	4a05      	ldr	r2, [pc, #20]	; (800e674 <ProcessRadioRxDone+0x894>)
 800e65e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e662:	f043 0320 	orr.w	r3, r3, #32
 800e666:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e66a:	f7ff fae1 	bl	800dc30 <UpdateRxSlotIdleState>
}
 800e66e:	3788      	adds	r7, #136	; 0x88
 800e670:	46bd      	mov	sp, r7
 800e672:	bdb0      	pop	{r4, r5, r7, pc}
 800e674:	20000898 	.word	0x20000898
 800e678:	20000da4 	.word	0x20000da4
 800e67c:	20000ad0 	.word	0x20000ad0

0800e680 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e684:	4b11      	ldr	r3, [pc, #68]	; (800e6cc <ProcessRadioTxTimeout+0x4c>)
 800e686:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d002      	beq.n	800e694 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e68e:	4b10      	ldr	r3, [pc, #64]	; (800e6d0 <ProcessRadioTxTimeout+0x50>)
 800e690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e692:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e694:	f7ff facc 	bl	800dc30 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e698:	4b0e      	ldr	r3, [pc, #56]	; (800e6d4 <ProcessRadioTxTimeout+0x54>)
 800e69a:	2202      	movs	r2, #2
 800e69c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e6a0:	2002      	movs	r0, #2
 800e6a2:	f004 fc63 	bl	8012f6c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <ProcessRadioTxTimeout+0x54>)
 800e6a8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d003      	beq.n	800e6b8 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800e6b0:	4b08      	ldr	r3, [pc, #32]	; (800e6d4 <ProcessRadioTxTimeout+0x54>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e6b8:	4a06      	ldr	r2, [pc, #24]	; (800e6d4 <ProcessRadioTxTimeout+0x54>)
 800e6ba:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e6be:	f043 0320 	orr.w	r3, r3, #32
 800e6c2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800e6c6:	bf00      	nop
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20000da4 	.word	0x20000da4
 800e6d0:	0801c168 	.word	0x0801c168
 800e6d4:	20000898 	.word	0x20000898

0800e6d8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	4603      	mov	r3, r0
 800e6e0:	460a      	mov	r2, r1
 800e6e2:	71fb      	strb	r3, [r7, #7]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e6ec:	4b40      	ldr	r3, [pc, #256]	; (800e7f0 <HandleRadioRxErrorTimeout+0x118>)
 800e6ee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d002      	beq.n	800e6fc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e6f6:	4b3f      	ldr	r3, [pc, #252]	; (800e7f4 <HandleRadioRxErrorTimeout+0x11c>)
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e6fc:	f003 ff97 	bl	801262e <LoRaMacClassBIsBeaconExpected>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d007      	beq.n	800e716 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e706:	2002      	movs	r0, #2
 800e708:	f003 ff45 	bl	8012596 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e70c:	2000      	movs	r0, #0
 800e70e:	f003 ff67 	bl	80125e0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e712:	2301      	movs	r3, #1
 800e714:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e716:	4b36      	ldr	r3, [pc, #216]	; (800e7f0 <HandleRadioRxErrorTimeout+0x118>)
 800e718:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d119      	bne.n	800e754 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e720:	f003 ff8c 	bl	801263c <LoRaMacClassBIsPingExpected>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d007      	beq.n	800e73a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e72a:	2000      	movs	r0, #0
 800e72c:	f003 ff3d 	bl	80125aa <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e730:	2000      	movs	r0, #0
 800e732:	f003 ff5e 	bl	80125f2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e736:	2301      	movs	r3, #1
 800e738:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e73a:	f003 ff86 	bl	801264a <LoRaMacClassBIsMulticastExpected>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d007      	beq.n	800e754 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e744:	2000      	movs	r0, #0
 800e746:	f003 ff3a 	bl	80125be <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e74a:	2000      	movs	r0, #0
 800e74c:	f003 ff5a 	bl	8012604 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e750:	2301      	movs	r3, #1
 800e752:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e754:	7bfb      	ldrb	r3, [r7, #15]
 800e756:	f083 0301 	eor.w	r3, r3, #1
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d040      	beq.n	800e7e2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e760:	4b25      	ldr	r3, [pc, #148]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e762:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800e766:	2b00      	cmp	r3, #0
 800e768:	d122      	bne.n	800e7b0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e76a:	4b23      	ldr	r3, [pc, #140]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e76c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e774:	4a20      	ldr	r2, [pc, #128]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e776:	79fb      	ldrb	r3, [r7, #7]
 800e778:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	4618      	mov	r0, r3
 800e780:	f004 fbf4 	bl	8012f6c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e784:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <HandleRadioRxErrorTimeout+0x118>)
 800e786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e788:	4618      	mov	r0, r3
 800e78a:	f00c fc31 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 800e78e:	4602      	mov	r2, r0
 800e790:	4b19      	ldr	r3, [pc, #100]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e792:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e796:	429a      	cmp	r2, r3
 800e798:	d323      	bcc.n	800e7e2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e79a:	4818      	ldr	r0, [pc, #96]	; (800e7fc <HandleRadioRxErrorTimeout+0x124>)
 800e79c:	f00c fafc 	bl	801ad98 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e7a0:	4a15      	ldr	r2, [pc, #84]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e7a2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e7a6:	f043 0320 	orr.w	r3, r3, #32
 800e7aa:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800e7ae:	e018      	b.n	800e7e2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e7b0:	4b11      	ldr	r3, [pc, #68]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e7b2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d003      	beq.n	800e7c2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e7ba:	4a0f      	ldr	r2, [pc, #60]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e7bc:	79bb      	ldrb	r3, [r7, #6]
 800e7be:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e7c2:	79bb      	ldrb	r3, [r7, #6]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f004 fbd1 	bl	8012f6c <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e7ca:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <HandleRadioRxErrorTimeout+0x118>)
 800e7cc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d006      	beq.n	800e7e2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e7d4:	4a08      	ldr	r2, [pc, #32]	; (800e7f8 <HandleRadioRxErrorTimeout+0x120>)
 800e7d6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e7da:	f043 0320 	orr.w	r3, r3, #32
 800e7de:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e7e2:	f7ff fa25 	bl	800dc30 <UpdateRxSlotIdleState>
}
 800e7e6:	bf00      	nop
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20000da4 	.word	0x20000da4
 800e7f4:	0801c168 	.word	0x0801c168
 800e7f8:	20000898 	.word	0x20000898
 800e7fc:	20000c30 	.word	0x20000c30

0800e800 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e804:	2106      	movs	r1, #6
 800e806:	2005      	movs	r0, #5
 800e808:	f7ff ff66 	bl	800e6d8 <HandleRadioRxErrorTimeout>
}
 800e80c:	bf00      	nop
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e814:	2104      	movs	r1, #4
 800e816:	2003      	movs	r0, #3
 800e818:	f7ff ff5e 	bl	800e6d8 <HandleRadioRxErrorTimeout>
}
 800e81c:	bf00      	nop
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e826:	f3ef 8310 	mrs	r3, PRIMASK
 800e82a:	607b      	str	r3, [r7, #4]
  return(result);
 800e82c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e82e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e830:	b672      	cpsid	i
}
 800e832:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e834:	4b1d      	ldr	r3, [pc, #116]	; (800e8ac <LoRaMacHandleIrqEvents+0x8c>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e83a:	4b1c      	ldr	r3, [pc, #112]	; (800e8ac <LoRaMacHandleIrqEvents+0x8c>)
 800e83c:	2200      	movs	r2, #0
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	f383 8810 	msr	PRIMASK, r3
}
 800e84a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d027      	beq.n	800e8a2 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e852:	783b      	ldrb	r3, [r7, #0]
 800e854:	f003 0310 	and.w	r3, r3, #16
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e85e:	f7ff f9ff 	bl	800dc60 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e862:	783b      	ldrb	r3, [r7, #0]
 800e864:	f003 0308 	and.w	r3, r3, #8
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d001      	beq.n	800e872 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e86e:	f7ff fab7 	bl	800dde0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e872:	783b      	ldrb	r3, [r7, #0]
 800e874:	f003 0304 	and.w	r3, r3, #4
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e87e:	f7ff feff 	bl	800e680 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e882:	783b      	ldrb	r3, [r7, #0]
 800e884:	f003 0302 	and.w	r3, r3, #2
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e88e:	f7ff ffb7 	bl	800e800 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e892:	783b      	ldrb	r3, [r7, #0]
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e89e:	f7ff ffb7 	bl	800e810 <ProcessRadioRxTimeout>
        }
    }
}
 800e8a2:	bf00      	nop
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20001bf4 	.word	0x20001bf4

0800e8b0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e8b4:	4b08      	ldr	r3, [pc, #32]	; (800e8d8 <LoRaMacIsBusy+0x28>)
 800e8b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e8be:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <LoRaMacIsBusy+0x28>)
 800e8c0:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d101      	bne.n	800e8cc <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e000      	b.n	800e8ce <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e8cc:	2301      	movs	r3, #1
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bc80      	pop	{r7}
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	20000898 	.word	0x20000898

0800e8dc <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e8e6:	4a04      	ldr	r2, [pc, #16]	; (800e8f8 <LoRaMacEnableRequests+0x1c>)
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 800e8ee:	bf00      	nop
 800e8f0:	370c      	adds	r7, #12
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bc80      	pop	{r7}
 800e8f6:	4770      	bx	lr
 800e8f8:	20000898 	.word	0x20000898

0800e8fc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e902:	4b2c      	ldr	r3, [pc, #176]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e904:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e908:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e90a:	4b2a      	ldr	r3, [pc, #168]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e90c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e910:	2b00      	cmp	r3, #0
 800e912:	d14a      	bne.n	800e9aa <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e914:	4b27      	ldr	r3, [pc, #156]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e916:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e91a:	f003 0301 	and.w	r3, r3, #1
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b00      	cmp	r3, #0
 800e922:	d006      	beq.n	800e932 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e924:	4a23      	ldr	r2, [pc, #140]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e926:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e92a:	f36f 0300 	bfc	r3, #0, #1
 800e92e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e932:	4b20      	ldr	r3, [pc, #128]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e934:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e938:	f003 0304 	and.w	r3, r3, #4
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d006      	beq.n	800e950 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e942:	4a1c      	ldr	r2, [pc, #112]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e944:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e948:	f36f 0382 	bfc	r3, #2, #1
 800e94c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e950:	2001      	movs	r0, #1
 800e952:	f7ff ffc3 	bl	800e8dc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e956:	793b      	ldrb	r3, [r7, #4]
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e962:	4b14      	ldr	r3, [pc, #80]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e964:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4813      	ldr	r0, [pc, #76]	; (800e9b8 <LoRaMacHandleRequestEvents+0xbc>)
 800e96c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e96e:	793b      	ldrb	r3, [r7, #4]
 800e970:	f003 0304 	and.w	r3, r3, #4
 800e974:	b2db      	uxtb	r3, r3
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00e      	beq.n	800e998 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e97a:	4810      	ldr	r0, [pc, #64]	; (800e9bc <LoRaMacHandleRequestEvents+0xc0>)
 800e97c:	f004 fb44 	bl	8013008 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e980:	f004 fb8e 	bl	80130a0 <LoRaMacConfirmQueueGetCnt>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d006      	beq.n	800e998 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e98a:	4a0a      	ldr	r2, [pc, #40]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e98c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e990:	f043 0304 	orr.w	r3, r3, #4
 800e994:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e998:	f003 fe75 	bl	8012686 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e99c:	4a05      	ldr	r2, [pc, #20]	; (800e9b4 <LoRaMacHandleRequestEvents+0xb8>)
 800e99e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800e9a2:	f36f 1345 	bfc	r3, #5, #1
 800e9a6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	20000898 	.word	0x20000898
 800e9b8:	20000cd0 	.word	0x20000cd0
 800e9bc:	20000ce4 	.word	0x20000ce4

0800e9c0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e9c6:	4b07      	ldr	r3, [pc, #28]	; (800e9e4 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e9c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d105      	bne.n	800e9dc <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e9d4:	1dfb      	adds	r3, r7, #7
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f004 f8fc 	bl	8012bd4 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e9dc:	bf00      	nop
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20000898 	.word	0x20000898

0800e9e8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e9ec:	4b16      	ldr	r3, [pc, #88]	; (800ea48 <LoRaMacHandleIndicationEvents+0x60>)
 800e9ee:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800e9f2:	f003 0308 	and.w	r3, r3, #8
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00d      	beq.n	800ea18 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e9fc:	4a12      	ldr	r2, [pc, #72]	; (800ea48 <LoRaMacHandleIndicationEvents+0x60>)
 800e9fe:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ea02:	f36f 03c3 	bfc	r3, #3, #1
 800ea06:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ea0a:	4b0f      	ldr	r3, [pc, #60]	; (800ea48 <LoRaMacHandleIndicationEvents+0x60>)
 800ea0c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	490e      	ldr	r1, [pc, #56]	; (800ea4c <LoRaMacHandleIndicationEvents+0x64>)
 800ea14:	480e      	ldr	r0, [pc, #56]	; (800ea50 <LoRaMacHandleIndicationEvents+0x68>)
 800ea16:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ea18:	4b0b      	ldr	r3, [pc, #44]	; (800ea48 <LoRaMacHandleIndicationEvents+0x60>)
 800ea1a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ea1e:	f003 0302 	and.w	r3, r3, #2
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00d      	beq.n	800ea44 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ea28:	4a07      	ldr	r2, [pc, #28]	; (800ea48 <LoRaMacHandleIndicationEvents+0x60>)
 800ea2a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ea2e:	f36f 0341 	bfc	r3, #1, #1
 800ea32:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ea36:	4b04      	ldr	r3, [pc, #16]	; (800ea48 <LoRaMacHandleIndicationEvents+0x60>)
 800ea38:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	4903      	ldr	r1, [pc, #12]	; (800ea4c <LoRaMacHandleIndicationEvents+0x64>)
 800ea40:	4804      	ldr	r0, [pc, #16]	; (800ea54 <LoRaMacHandleIndicationEvents+0x6c>)
 800ea42:	4798      	blx	r3
    }
}
 800ea44:	bf00      	nop
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20000898 	.word	0x20000898
 800ea4c:	20000d18 	.word	0x20000d18
 800ea50:	20000cf8 	.word	0x20000cf8
 800ea54:	20000cb4 	.word	0x20000cb4

0800ea58 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ea5e:	4b32      	ldr	r3, [pc, #200]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800ea60:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ea64:	f003 0301 	and.w	r3, r3, #1
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d058      	beq.n	800eb20 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ea72:	2300      	movs	r3, #0
 800ea74:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ea76:	4b2c      	ldr	r3, [pc, #176]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800ea78:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d004      	beq.n	800ea8a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ea80:	4b29      	ldr	r3, [pc, #164]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800ea82:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ea86:	2b03      	cmp	r3, #3
 800ea88:	d104      	bne.n	800ea94 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ea8a:	f002 f87b 	bl	8010b84 <CheckRetransUnconfirmedUplink>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	71fb      	strb	r3, [r7, #7]
 800ea92:	e020      	b.n	800ead6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ea94:	4b24      	ldr	r3, [pc, #144]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800ea96:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d11b      	bne.n	800ead6 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800ea9e:	4b22      	ldr	r3, [pc, #136]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800eaa0:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d014      	beq.n	800ead2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800eaa8:	f002 f898 	bl	8010bdc <CheckRetransConfirmedUplink>
 800eaac:	4603      	mov	r3, r0
 800eaae:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800eab0:	4b1e      	ldr	r3, [pc, #120]	; (800eb2c <LoRaMacHandleMcpsRequest+0xd4>)
 800eab2:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d10d      	bne.n	800ead6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800eaba:	79fb      	ldrb	r3, [r7, #7]
 800eabc:	f083 0301 	eor.w	r3, r3, #1
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d002      	beq.n	800eacc <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800eac6:	f002 f905 	bl	8010cd4 <AckTimeoutRetriesProcess>
 800eaca:	e004      	b.n	800ead6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800eacc:	f002 f940 	bl	8010d50 <AckTimeoutRetriesFinalize>
 800ead0:	e001      	b.n	800ead6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800ead2:	2301      	movs	r3, #1
 800ead4:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800ead6:	79fb      	ldrb	r3, [r7, #7]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00d      	beq.n	800eaf8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800eadc:	4814      	ldr	r0, [pc, #80]	; (800eb30 <LoRaMacHandleMcpsRequest+0xd8>)
 800eade:	f00c f95b 	bl	801ad98 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800eae2:	4b11      	ldr	r3, [pc, #68]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800eae4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eae8:	f023 0320 	bic.w	r3, r3, #32
 800eaec:	4a0e      	ldr	r2, [pc, #56]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800eaee:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800eaf2:	f002 f895 	bl	8010c20 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800eaf6:	e013      	b.n	800eb20 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800eaf8:	79bb      	ldrb	r3, [r7, #6]
 800eafa:	f083 0301 	eor.w	r3, r3, #1
 800eafe:	b2db      	uxtb	r3, r3
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00d      	beq.n	800eb20 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800eb04:	4a08      	ldr	r2, [pc, #32]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800eb06:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800eb0a:	f36f 1345 	bfc	r3, #5, #1
 800eb0e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 800eb12:	4b05      	ldr	r3, [pc, #20]	; (800eb28 <LoRaMacHandleMcpsRequest+0xd0>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800eb1a:	2000      	movs	r0, #0
 800eb1c:	f000 f994 	bl	800ee48 <OnTxDelayedTimerEvent>
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	20000898 	.word	0x20000898
 800eb2c:	20000da4 	.word	0x20000da4
 800eb30:	20000c00 	.word	0x20000c00

0800eb34 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800eb38:	4b1b      	ldr	r3, [pc, #108]	; (800eba8 <LoRaMacHandleMlmeRequest+0x74>)
 800eb3a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800eb3e:	f003 0304 	and.w	r3, r3, #4
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d02c      	beq.n	800eba2 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eb48:	2001      	movs	r0, #1
 800eb4a:	f004 fa43 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d012      	beq.n	800eb7a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800eb54:	2001      	movs	r0, #1
 800eb56:	f004 f9df 	bl	8012f18 <LoRaMacConfirmQueueGetStatus>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d103      	bne.n	800eb68 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800eb60:	4b11      	ldr	r3, [pc, #68]	; (800eba8 <LoRaMacHandleMlmeRequest+0x74>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <LoRaMacHandleMlmeRequest+0x74>)
 800eb6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb6e:	f023 0302 	bic.w	r3, r3, #2
 800eb72:	4a0d      	ldr	r2, [pc, #52]	; (800eba8 <LoRaMacHandleMlmeRequest+0x74>)
 800eb74:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800eb78:	e013      	b.n	800eba2 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800eb7a:	2005      	movs	r0, #5
 800eb7c:	f004 fa2a 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d105      	bne.n	800eb92 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800eb86:	2006      	movs	r0, #6
 800eb88:	f004 fa24 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800eb8c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d007      	beq.n	800eba2 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eb92:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <LoRaMacHandleMlmeRequest+0x74>)
 800eb94:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb98:	f023 0302 	bic.w	r3, r3, #2
 800eb9c:	4a02      	ldr	r2, [pc, #8]	; (800eba8 <LoRaMacHandleMlmeRequest+0x74>)
 800eb9e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800eba2:	bf00      	nop
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20000898 	.word	0x20000898

0800ebac <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ebb0:	200c      	movs	r0, #12
 800ebb2:	f004 fa0f 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d019      	beq.n	800ebf0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ebbc:	4b0e      	ldr	r3, [pc, #56]	; (800ebf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ebbe:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ebc2:	f003 0301 	and.w	r3, r3, #1
 800ebc6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d111      	bne.n	800ebf0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ebcc:	4b0a      	ldr	r3, [pc, #40]	; (800ebf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ebce:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ebd2:	f003 0304 	and.w	r3, r3, #4
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d009      	beq.n	800ebf0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ebdc:	4b06      	ldr	r3, [pc, #24]	; (800ebf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ebde:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ebe2:	f023 0302 	bic.w	r3, r3, #2
 800ebe6:	4a04      	ldr	r2, [pc, #16]	; (800ebf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ebe8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800ebec:	2301      	movs	r3, #1
 800ebee:	e000      	b.n	800ebf2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20000898 	.word	0x20000898

0800ebfc <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800ec00:	4b0d      	ldr	r3, [pc, #52]	; (800ec38 <LoRaMacCheckForRxAbort+0x3c>)
 800ec02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00f      	beq.n	800ec2e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800ec0e:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <LoRaMacCheckForRxAbort+0x3c>)
 800ec10:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec18:	4a07      	ldr	r2, [pc, #28]	; (800ec38 <LoRaMacCheckForRxAbort+0x3c>)
 800ec1a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ec1e:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <LoRaMacCheckForRxAbort+0x3c>)
 800ec20:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec24:	f023 0302 	bic.w	r3, r3, #2
 800ec28:	4a03      	ldr	r2, [pc, #12]	; (800ec38 <LoRaMacCheckForRxAbort+0x3c>)
 800ec2a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800ec2e:	bf00      	nop
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bc80      	pop	{r7}
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	20000898 	.word	0x20000898

0800ec3c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800ec44:	2300      	movs	r3, #0
 800ec46:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800ec4c:	4b50      	ldr	r3, [pc, #320]	; (800ed90 <LoRaMacHandleNvm+0x154>)
 800ec4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f040 8098 	bne.w	800ed88 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2124      	movs	r1, #36	; 0x24
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f007 ffa5 	bl	8016bac <Crc32>
 800ec62:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec68:	68ba      	ldr	r2, [r7, #8]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d006      	beq.n	800ec7c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ec74:	89fb      	ldrh	r3, [r7, #14]
 800ec76:	f043 0301 	orr.w	r3, r3, #1
 800ec7a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	3328      	adds	r3, #40	; 0x28
 800ec80:	2114      	movs	r1, #20
 800ec82:	4618      	mov	r0, r3
 800ec84:	f007 ff92 	bl	8016bac <Crc32>
 800ec88:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d006      	beq.n	800eca2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ec9a:	89fb      	ldrh	r3, [r7, #14]
 800ec9c:	f043 0302 	orr.w	r3, r3, #2
 800eca0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	3340      	adds	r3, #64	; 0x40
 800eca6:	21dc      	movs	r1, #220	; 0xdc
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f007 ff7f 	bl	8016bac <Crc32>
 800ecae:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ecb6:	68ba      	ldr	r2, [r7, #8]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d007      	beq.n	800eccc <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ecc4:	89fb      	ldrh	r3, [r7, #14]
 800ecc6:	f043 0304 	orr.w	r3, r3, #4
 800ecca:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ecd2:	21bc      	movs	r1, #188	; 0xbc
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f007 ff69 	bl	8016bac <Crc32>
 800ecda:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d007      	beq.n	800ecf8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ecf0:	89fb      	ldrh	r3, [r7, #14]
 800ecf2:	f043 0308 	orr.w	r3, r3, #8
 800ecf6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800ecfe:	2190      	movs	r1, #144	; 0x90
 800ed00:	4618      	mov	r0, r3
 800ed02:	f007 ff53 	bl	8016bac <Crc32>
 800ed06:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ed0e:	68ba      	ldr	r2, [r7, #8]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d007      	beq.n	800ed24 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ed1c:	89fb      	ldrh	r3, [r7, #14]
 800ed1e:	f043 0310 	orr.w	r3, r3, #16
 800ed22:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800ed2a:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f007 ff3c 	bl	8016bac <Crc32>
 800ed34:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800ed3c:	68ba      	ldr	r2, [r7, #8]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d007      	beq.n	800ed52 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68ba      	ldr	r2, [r7, #8]
 800ed46:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ed4a:	89fb      	ldrh	r3, [r7, #14]
 800ed4c:	f043 0320 	orr.w	r3, r3, #32
 800ed50:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800ed58:	2114      	movs	r1, #20
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f007 ff26 	bl	8016bac <Crc32>
 800ed60:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d007      	beq.n	800ed7e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ed76:	89fb      	ldrh	r3, [r7, #14]
 800ed78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed7c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800ed7e:	89fb      	ldrh	r3, [r7, #14]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f001 ff89 	bl	8010c98 <CallNvmDataChangeCallback>
 800ed86:	e000      	b.n	800ed8a <LoRaMacHandleNvm+0x14e>
        return;
 800ed88:	bf00      	nop
}
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	20000898 	.word	0x20000898

0800ed94 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800ed9e:	f7ff fd3f 	bl	800e820 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800eda2:	f003 fcd4 	bl	801274e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eda6:	4b26      	ldr	r3, [pc, #152]	; (800ee40 <LoRaMacProcess+0xac>)
 800eda8:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800edac:	f003 0320 	and.w	r3, r3, #32
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d025      	beq.n	800ee02 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800edb6:	2000      	movs	r0, #0
 800edb8:	f7ff fd90 	bl	800e8dc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800edbc:	f7ff ff1e 	bl	800ebfc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800edc0:	f001 fffa 	bl	8010db8 <IsRequestPending>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d006      	beq.n	800edd8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800edca:	f7ff feef 	bl	800ebac <LoRaMacCheckForBeaconAcquisition>
 800edce:	4603      	mov	r3, r0
 800edd0:	461a      	mov	r2, r3
 800edd2:	79fb      	ldrb	r3, [r7, #7]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800edd8:	79fb      	ldrb	r3, [r7, #7]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d103      	bne.n	800ede6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800edde:	f7ff fea9 	bl	800eb34 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ede2:	f7ff fe39 	bl	800ea58 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ede6:	f7ff fd89 	bl	800e8fc <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800edea:	f7ff fde9 	bl	800e9c0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800edee:	2001      	movs	r0, #1
 800edf0:	f7ff fd74 	bl	800e8dc <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800edf4:	4a12      	ldr	r2, [pc, #72]	; (800ee40 <LoRaMacProcess+0xac>)
 800edf6:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800edfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edfe:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 800ee02:	f7ff fdf1 	bl	800e9e8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ee06:	4b0e      	ldr	r3, [pc, #56]	; (800ee40 <LoRaMacProcess+0xac>)
 800ee08:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d101      	bne.n	800ee14 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800ee10:	f001 fb7e 	bl	8010510 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ee14:	4b0a      	ldr	r3, [pc, #40]	; (800ee40 <LoRaMacProcess+0xac>)
 800ee16:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ee1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d009      	beq.n	800ee38 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ee24:	4a06      	ldr	r2, [pc, #24]	; (800ee40 <LoRaMacProcess+0xac>)
 800ee26:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800ee2a:	f36f 1386 	bfc	r3, #6, #1
 800ee2e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 800ee32:	4804      	ldr	r0, [pc, #16]	; (800ee44 <LoRaMacProcess+0xb0>)
 800ee34:	f7ff ff02 	bl	800ec3c <LoRaMacHandleNvm>
    }
}
 800ee38:	bf00      	nop
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	20000898 	.word	0x20000898
 800ee44:	20000da4 	.word	0x20000da4

0800ee48 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ee50:	4817      	ldr	r0, [pc, #92]	; (800eeb0 <OnTxDelayedTimerEvent+0x68>)
 800ee52:	f00b ffa1 	bl	801ad98 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ee56:	4b17      	ldr	r3, [pc, #92]	; (800eeb4 <OnTxDelayedTimerEvent+0x6c>)
 800ee58:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ee5c:	f023 0320 	bic.w	r3, r3, #32
 800ee60:	4a14      	ldr	r2, [pc, #80]	; (800eeb4 <OnTxDelayedTimerEvent+0x6c>)
 800ee62:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ee66:	2001      	movs	r0, #1
 800ee68:	f001 f8e6 	bl	8010038 <ScheduleTx>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d018      	beq.n	800eea4 <OnTxDelayedTimerEvent+0x5c>
 800ee72:	2b0b      	cmp	r3, #11
 800ee74:	d016      	beq.n	800eea4 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ee76:	4b10      	ldr	r3, [pc, #64]	; (800eeb8 <OnTxDelayedTimerEvent+0x70>)
 800ee78:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ee7c:	b2da      	uxtb	r2, r3
 800ee7e:	4b0d      	ldr	r3, [pc, #52]	; (800eeb4 <OnTxDelayedTimerEvent+0x6c>)
 800ee80:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ee84:	4b0b      	ldr	r3, [pc, #44]	; (800eeb4 <OnTxDelayedTimerEvent+0x6c>)
 800ee86:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ee8a:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <OnTxDelayedTimerEvent+0x6c>)
 800ee8c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ee90:	4b08      	ldr	r3, [pc, #32]	; (800eeb4 <OnTxDelayedTimerEvent+0x6c>)
 800ee92:	2209      	movs	r2, #9
 800ee94:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ee98:	2009      	movs	r0, #9
 800ee9a:	f004 f867 	bl	8012f6c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ee9e:	f001 febf 	bl	8010c20 <StopRetransmission>
            break;
 800eea2:	e000      	b.n	800eea6 <OnTxDelayedTimerEvent+0x5e>
            break;
 800eea4:	bf00      	nop
        }
    }
}
 800eea6:	bf00      	nop
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20000c00 	.word	0x20000c00
 800eeb4:	20000898 	.word	0x20000898
 800eeb8:	20000da4 	.word	0x20000da4

0800eebc <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800eec4:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <OnRxWindow1TimerEvent+0x5c>)
 800eec6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eeca:	4b13      	ldr	r3, [pc, #76]	; (800ef18 <OnRxWindow1TimerEvent+0x5c>)
 800eecc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800eed0:	4b12      	ldr	r3, [pc, #72]	; (800ef1c <OnRxWindow1TimerEvent+0x60>)
 800eed2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800eed6:	b25a      	sxtb	r2, r3
 800eed8:	4b0f      	ldr	r3, [pc, #60]	; (800ef18 <OnRxWindow1TimerEvent+0x5c>)
 800eeda:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eede:	4b0f      	ldr	r3, [pc, #60]	; (800ef1c <OnRxWindow1TimerEvent+0x60>)
 800eee0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eee4:	4b0c      	ldr	r3, [pc, #48]	; (800ef18 <OnRxWindow1TimerEvent+0x5c>)
 800eee6:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eeea:	4b0c      	ldr	r3, [pc, #48]	; (800ef1c <OnRxWindow1TimerEvent+0x60>)
 800eeec:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eef0:	4b09      	ldr	r3, [pc, #36]	; (800ef18 <OnRxWindow1TimerEvent+0x5c>)
 800eef2:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800eef6:	4b08      	ldr	r3, [pc, #32]	; (800ef18 <OnRxWindow1TimerEvent+0x5c>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800eefe:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <OnRxWindow1TimerEvent+0x5c>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ef06:	4906      	ldr	r1, [pc, #24]	; (800ef20 <OnRxWindow1TimerEvent+0x64>)
 800ef08:	4806      	ldr	r0, [pc, #24]	; (800ef24 <OnRxWindow1TimerEvent+0x68>)
 800ef0a:	f001 facd 	bl	80104a8 <RxWindowSetup>
}
 800ef0e:	bf00      	nop
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20000898 	.word	0x20000898
 800ef1c:	20000da4 	.word	0x20000da4
 800ef20:	20000c50 	.word	0x20000c50
 800ef24:	20000c18 	.word	0x20000c18

0800ef28 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ef30:	4b16      	ldr	r3, [pc, #88]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef32:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d023      	beq.n	800ef82 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ef3a:	4b14      	ldr	r3, [pc, #80]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef3c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ef40:	4b12      	ldr	r3, [pc, #72]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef42:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ef46:	4b12      	ldr	r3, [pc, #72]	; (800ef90 <OnRxWindow2TimerEvent+0x68>)
 800ef48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef4a:	4a10      	ldr	r2, [pc, #64]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef4c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ef50:	4b0f      	ldr	r3, [pc, #60]	; (800ef90 <OnRxWindow2TimerEvent+0x68>)
 800ef52:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ef56:	4b0d      	ldr	r3, [pc, #52]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef58:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ef5c:	4b0c      	ldr	r3, [pc, #48]	; (800ef90 <OnRxWindow2TimerEvent+0x68>)
 800ef5e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ef62:	4b0a      	ldr	r3, [pc, #40]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef64:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ef68:	4b08      	ldr	r3, [pc, #32]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ef70:	4b06      	ldr	r3, [pc, #24]	; (800ef8c <OnRxWindow2TimerEvent+0x64>)
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ef78:	4906      	ldr	r1, [pc, #24]	; (800ef94 <OnRxWindow2TimerEvent+0x6c>)
 800ef7a:	4807      	ldr	r0, [pc, #28]	; (800ef98 <OnRxWindow2TimerEvent+0x70>)
 800ef7c:	f001 fa94 	bl	80104a8 <RxWindowSetup>
 800ef80:	e000      	b.n	800ef84 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ef82:	bf00      	nop
}
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20000898 	.word	0x20000898
 800ef90:	20000da4 	.word	0x20000da4
 800ef94:	20000c64 	.word	0x20000c64
 800ef98:	20000c30 	.word	0x20000c30

0800ef9c <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800efa4:	4815      	ldr	r0, [pc, #84]	; (800effc <OnAckTimeoutTimerEvent+0x60>)
 800efa6:	f00b fef7 	bl	801ad98 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800efaa:	4b15      	ldr	r3, [pc, #84]	; (800f000 <OnAckTimeoutTimerEvent+0x64>)
 800efac:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d003      	beq.n	800efbc <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800efb4:	4b12      	ldr	r3, [pc, #72]	; (800f000 <OnAckTimeoutTimerEvent+0x64>)
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800efbc:	4b11      	ldr	r3, [pc, #68]	; (800f004 <OnAckTimeoutTimerEvent+0x68>)
 800efbe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800efc2:	2b02      	cmp	r3, #2
 800efc4:	d106      	bne.n	800efd4 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800efc6:	4a0e      	ldr	r2, [pc, #56]	; (800f000 <OnAckTimeoutTimerEvent+0x64>)
 800efc8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800efcc:	f043 0320 	orr.w	r3, r3, #32
 800efd0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800efd4:	4b0a      	ldr	r3, [pc, #40]	; (800f000 <OnAckTimeoutTimerEvent+0x64>)
 800efd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00a      	beq.n	800eff4 <OnAckTimeoutTimerEvent+0x58>
 800efde:	4b08      	ldr	r3, [pc, #32]	; (800f000 <OnAckTimeoutTimerEvent+0x64>)
 800efe0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d004      	beq.n	800eff4 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800efea:	4b05      	ldr	r3, [pc, #20]	; (800f000 <OnAckTimeoutTimerEvent+0x64>)
 800efec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	4798      	blx	r3
    }
}
 800eff4:	bf00      	nop
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	20000c90 	.word	0x20000c90
 800f000:	20000898 	.word	0x20000898
 800f004:	20000da4 	.word	0x20000da4

0800f008 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60ba      	str	r2, [r7, #8]
 800f010:	607b      	str	r3, [r7, #4]
 800f012:	4603      	mov	r3, r0
 800f014:	73fb      	strb	r3, [r7, #15]
 800f016:	460b      	mov	r3, r1
 800f018:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d005      	beq.n	800f02c <GetFCntDown+0x24>
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <GetFCntDown+0x24>
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d101      	bne.n	800f030 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f02c:	230a      	movs	r3, #10
 800f02e:	e029      	b.n	800f084 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f030:	7bfb      	ldrb	r3, [r7, #15]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d016      	beq.n	800f064 <GetFCntDown+0x5c>
 800f036:	2b01      	cmp	r3, #1
 800f038:	d118      	bne.n	800f06c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f03a:	79bb      	ldrb	r3, [r7, #6]
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d10d      	bne.n	800f05c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f040:	7bbb      	ldrb	r3, [r7, #14]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d002      	beq.n	800f04c <GetFCntDown+0x44>
 800f046:	7bbb      	ldrb	r3, [r7, #14]
 800f048:	2b03      	cmp	r3, #3
 800f04a:	d103      	bne.n	800f054 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	2202      	movs	r2, #2
 800f050:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f052:	e00d      	b.n	800f070 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	2201      	movs	r2, #1
 800f058:	701a      	strb	r2, [r3, #0]
            break;
 800f05a:	e009      	b.n	800f070 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	2203      	movs	r2, #3
 800f060:	701a      	strb	r2, [r3, #0]
            break;
 800f062:	e005      	b.n	800f070 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	2204      	movs	r2, #4
 800f068:	701a      	strb	r2, [r3, #0]
            break;
 800f06a:	e001      	b.n	800f070 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f06c:	2305      	movs	r3, #5
 800f06e:	e009      	b.n	800f084 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	7818      	ldrb	r0, [r3, #0]
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	89db      	ldrh	r3, [r3, #14]
 800f078:	461a      	mov	r2, r3
 800f07a:	8b39      	ldrh	r1, [r7, #24]
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	f004 fb9f 	bl	80137c0 <LoRaMacCryptoGetFCntDown>
 800f082:	4603      	mov	r3, r0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3710      	adds	r7, #16
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f08c:	b5b0      	push	{r4, r5, r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	4603      	mov	r3, r0
 800f094:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f096:	2303      	movs	r3, #3
 800f098:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f09a:	4b61      	ldr	r3, [pc, #388]	; (800f220 <SwitchClass+0x194>)
 800f09c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	f000 80a5 	beq.w	800f1f0 <SwitchClass+0x164>
 800f0a6:	2b02      	cmp	r3, #2
 800f0a8:	f300 80b4 	bgt.w	800f214 <SwitchClass+0x188>
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <SwitchClass+0x2c>
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	f000 808f 	beq.w	800f1d4 <SwitchClass+0x148>
 800f0b6:	e0ad      	b.n	800f214 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f0b8:	79fb      	ldrb	r3, [r7, #7]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d107      	bne.n	800f0ce <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f0be:	4b58      	ldr	r3, [pc, #352]	; (800f220 <SwitchClass+0x194>)
 800f0c0:	4a57      	ldr	r2, [pc, #348]	; (800f220 <SwitchClass+0x194>)
 800f0c2:	336c      	adds	r3, #108	; 0x6c
 800f0c4:	3264      	adds	r2, #100	; 0x64
 800f0c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0ca:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f0ce:	79fb      	ldrb	r3, [r7, #7]
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d10c      	bne.n	800f0ee <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f0d4:	79fb      	ldrb	r3, [r7, #7]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f003 fadb 	bl	8012692 <LoRaMacClassBSwitchClass>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d103      	bne.n	800f0ee <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f0e6:	4a4e      	ldr	r2, [pc, #312]	; (800f220 <SwitchClass+0x194>)
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f0ee:	79fb      	ldrb	r3, [r7, #7]
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	f040 808a 	bne.w	800f20a <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f0f6:	4a4a      	ldr	r2, [pc, #296]	; (800f220 <SwitchClass+0x194>)
 800f0f8:	79fb      	ldrb	r3, [r7, #7]
 800f0fa:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f0fe:	4a49      	ldr	r2, [pc, #292]	; (800f224 <SwitchClass+0x198>)
 800f100:	4b48      	ldr	r3, [pc, #288]	; (800f224 <SwitchClass+0x198>)
 800f102:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800f106:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800f10a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f10c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f10e:	682b      	ldr	r3, [r5, #0]
 800f110:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f112:	4b44      	ldr	r3, [pc, #272]	; (800f224 <SwitchClass+0x198>)
 800f114:	2202      	movs	r2, #2
 800f116:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f11a:	2300      	movs	r3, #0
 800f11c:	73bb      	strb	r3, [r7, #14]
 800f11e:	e049      	b.n	800f1b4 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f124:	4a3e      	ldr	r2, [pc, #248]	; (800f220 <SwitchClass+0x194>)
 800f126:	212c      	movs	r1, #44	; 0x2c
 800f128:	fb01 f303 	mul.w	r3, r1, r3
 800f12c:	4413      	add	r3, r2
 800f12e:	33da      	adds	r3, #218	; 0xda
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d038      	beq.n	800f1a8 <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f13a:	4a39      	ldr	r2, [pc, #228]	; (800f220 <SwitchClass+0x194>)
 800f13c:	212c      	movs	r1, #44	; 0x2c
 800f13e:	fb01 f303 	mul.w	r3, r1, r3
 800f142:	4413      	add	r3, r2
 800f144:	33f0      	adds	r3, #240	; 0xf0
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4a35      	ldr	r2, [pc, #212]	; (800f220 <SwitchClass+0x194>)
 800f14a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f14c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f150:	4a33      	ldr	r2, [pc, #204]	; (800f220 <SwitchClass+0x194>)
 800f152:	212c      	movs	r1, #44	; 0x2c
 800f154:	fb01 f303 	mul.w	r3, r1, r3
 800f158:	4413      	add	r3, r2
 800f15a:	33f4      	adds	r3, #244	; 0xf4
 800f15c:	f993 3000 	ldrsb.w	r3, [r3]
 800f160:	b2da      	uxtb	r2, r3
 800f162:	4b2f      	ldr	r3, [pc, #188]	; (800f220 <SwitchClass+0x194>)
 800f164:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f168:	4b2e      	ldr	r3, [pc, #184]	; (800f224 <SwitchClass+0x198>)
 800f16a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f16e:	4b2d      	ldr	r3, [pc, #180]	; (800f224 <SwitchClass+0x198>)
 800f170:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f174:	4b2a      	ldr	r3, [pc, #168]	; (800f220 <SwitchClass+0x194>)
 800f176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f178:	4a2a      	ldr	r2, [pc, #168]	; (800f224 <SwitchClass+0x198>)
 800f17a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f17e:	4b28      	ldr	r3, [pc, #160]	; (800f220 <SwitchClass+0x194>)
 800f180:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f184:	4b27      	ldr	r3, [pc, #156]	; (800f224 <SwitchClass+0x198>)
 800f186:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f18a:	4b25      	ldr	r3, [pc, #148]	; (800f220 <SwitchClass+0x194>)
 800f18c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f190:	4b24      	ldr	r3, [pc, #144]	; (800f224 <SwitchClass+0x198>)
 800f192:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f196:	4b23      	ldr	r3, [pc, #140]	; (800f224 <SwitchClass+0x198>)
 800f198:	2203      	movs	r2, #3
 800f19a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f19e:	4b21      	ldr	r3, [pc, #132]	; (800f224 <SwitchClass+0x198>)
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800f1a6:	e009      	b.n	800f1bc <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f1a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	73bb      	strb	r3, [r7, #14]
 800f1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	ddb1      	ble.n	800f120 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f1bc:	4b19      	ldr	r3, [pc, #100]	; (800f224 <SwitchClass+0x198>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f1c4:	4b18      	ldr	r3, [pc, #96]	; (800f228 <SwitchClass+0x19c>)
 800f1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f1ca:	f001 f9a1 	bl	8010510 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f1d2:	e01a      	b.n	800f20a <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f1d4:	79fb      	ldrb	r3, [r7, #7]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f003 fa5b 	bl	8012692 <LoRaMacClassBSwitchClass>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d113      	bne.n	800f20e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f1e6:	4a0e      	ldr	r2, [pc, #56]	; (800f220 <SwitchClass+0x194>)
 800f1e8:	79fb      	ldrb	r3, [r7, #7]
 800f1ea:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800f1ee:	e00e      	b.n	800f20e <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f1f0:	79fb      	ldrb	r3, [r7, #7]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10d      	bne.n	800f212 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f1f6:	4a0a      	ldr	r2, [pc, #40]	; (800f220 <SwitchClass+0x194>)
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f1fe:	4b0a      	ldr	r3, [pc, #40]	; (800f228 <SwitchClass+0x19c>)
 800f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f202:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f204:	2300      	movs	r3, #0
 800f206:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f208:	e003      	b.n	800f212 <SwitchClass+0x186>
            break;
 800f20a:	bf00      	nop
 800f20c:	e002      	b.n	800f214 <SwitchClass+0x188>
            break;
 800f20e:	bf00      	nop
 800f210:	e000      	b.n	800f214 <SwitchClass+0x188>
            break;
 800f212:	bf00      	nop
        }
    }

    return status;
 800f214:	7bfb      	ldrb	r3, [r7, #15]
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bdb0      	pop	{r4, r5, r7, pc}
 800f21e:	bf00      	nop
 800f220:	20000da4 	.word	0x20000da4
 800f224:	20000898 	.word	0x20000898
 800f228:	0801c168 	.word	0x0801c168

0800f22c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af00      	add	r7, sp, #0
 800f232:	4603      	mov	r3, r0
 800f234:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f236:	4b10      	ldr	r3, [pc, #64]	; (800f278 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f238:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f23c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f23e:	79fb      	ldrb	r3, [r7, #7]
 800f240:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f242:	230d      	movs	r3, #13
 800f244:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f246:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f250:	230e      	movs	r3, #14
 800f252:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f254:	4b08      	ldr	r3, [pc, #32]	; (800f278 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f25a:	f107 0210 	add.w	r2, r7, #16
 800f25e:	4611      	mov	r1, r2
 800f260:	4618      	mov	r0, r3
 800f262:	f005 f93b 	bl	80144dc <RegionGetPhyParam>
 800f266:	4603      	mov	r3, r0
 800f268:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	b2db      	uxtb	r3, r3
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3718      	adds	r7, #24
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	20000da4 	.word	0x20000da4

0800f27c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	71fb      	strb	r3, [r7, #7]
 800f286:	460b      	mov	r3, r1
 800f288:	71bb      	strb	r3, [r7, #6]
 800f28a:	4613      	mov	r3, r2
 800f28c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f292:	2300      	movs	r3, #0
 800f294:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f296:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff ffc6 	bl	800f22c <GetMaxAppPayloadWithoutFOptsLength>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	797b      	ldrb	r3, [r7, #5]
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	4413      	add	r3, r2
 800f2ae:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f2b0:	89ba      	ldrh	r2, [r7, #12]
 800f2b2:	89fb      	ldrh	r3, [r7, #14]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d804      	bhi.n	800f2c2 <ValidatePayloadLength+0x46>
 800f2b8:	89bb      	ldrh	r3, [r7, #12]
 800f2ba:	2bff      	cmp	r3, #255	; 0xff
 800f2bc:	d801      	bhi.n	800f2c2 <ValidatePayloadLength+0x46>
    {
        return true;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e000      	b.n	800f2c4 <ValidatePayloadLength+0x48>
    }
    return false;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f2cc:	b590      	push	{r4, r7, lr}
 800f2ce:	b0a5      	sub	sp, #148	; 0x94
 800f2d0:	af02      	add	r7, sp, #8
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	4608      	mov	r0, r1
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4603      	mov	r3, r0
 800f2dc:	70fb      	strb	r3, [r7, #3]
 800f2de:	460b      	mov	r3, r1
 800f2e0:	70bb      	strb	r3, [r7, #2]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f2f8:	f000 bc6d 	b.w	800fbd6 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f2fc:	78fb      	ldrb	r3, [r7, #3]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	4413      	add	r3, r2
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	4618      	mov	r0, r3
 800f306:	f003 fc8d 	bl	8012c24 <LoRaMacCommandsGetCmdSize>
 800f30a:	4603      	mov	r3, r0
 800f30c:	461a      	mov	r2, r3
 800f30e:	78fb      	ldrb	r3, [r7, #3]
 800f310:	441a      	add	r2, r3
 800f312:	78bb      	ldrb	r3, [r7, #2]
 800f314:	429a      	cmp	r2, r3
 800f316:	f300 8464 	bgt.w	800fbe2 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f31a:	78fb      	ldrb	r3, [r7, #3]
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	70fa      	strb	r2, [r7, #3]
 800f320:	461a      	mov	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4413      	add	r3, r2
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	3b02      	subs	r3, #2
 800f32a:	2b11      	cmp	r3, #17
 800f32c:	f200 845b 	bhi.w	800fbe6 <ProcessMacCommands+0x91a>
 800f330:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <ProcessMacCommands+0x6c>)
 800f332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f336:	bf00      	nop
 800f338:	0800f381 	.word	0x0800f381
 800f33c:	0800f3c3 	.word	0x0800f3c3
 800f340:	0800f4df 	.word	0x0800f4df
 800f344:	0800f51d 	.word	0x0800f51d
 800f348:	0800f609 	.word	0x0800f609
 800f34c:	0800f665 	.word	0x0800f665
 800f350:	0800f721 	.word	0x0800f721
 800f354:	0800f777 	.word	0x0800f777
 800f358:	0800f85b 	.word	0x0800f85b
 800f35c:	0800fbe7 	.word	0x0800fbe7
 800f360:	0800fbe7 	.word	0x0800fbe7
 800f364:	0800f901 	.word	0x0800f901
 800f368:	0800fbe7 	.word	0x0800fbe7
 800f36c:	0800fbe7 	.word	0x0800fbe7
 800f370:	0800fa17 	.word	0x0800fa17
 800f374:	0800fa4b 	.word	0x0800fa4b
 800f378:	0800fadb 	.word	0x0800fadb
 800f37c:	0800fb51 	.word	0x0800fb51
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f380:	2004      	movs	r0, #4
 800f382:	f003 fe27 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 8424 	beq.w	800fbd6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f38e:	2104      	movs	r1, #4
 800f390:	2000      	movs	r0, #0
 800f392:	f003 fd93 	bl	8012ebc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f396:	78fb      	ldrb	r3, [r7, #3]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	70fa      	strb	r2, [r7, #3]
 800f39c:	461a      	mov	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	781a      	ldrb	r2, [r3, #0]
 800f3a4:	4bac      	ldr	r3, [pc, #688]	; (800f658 <ProcessMacCommands+0x38c>)
 800f3a6:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f3aa:	78fb      	ldrb	r3, [r7, #3]
 800f3ac:	1c5a      	adds	r2, r3, #1
 800f3ae:	70fa      	strb	r2, [r7, #3]
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	781a      	ldrb	r2, [r3, #0]
 800f3b8:	4ba7      	ldr	r3, [pc, #668]	; (800f658 <ProcessMacCommands+0x38c>)
 800f3ba:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800f3be:	f000 bc0a 	b.w	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800f3da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f3de:	f083 0301 	eor.w	r3, r3, #1
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d078      	beq.n	800f4da <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f3ee:	78fb      	ldrb	r3, [r7, #3]
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f3f8:	78ba      	ldrb	r2, [r7, #2]
 800f3fa:	78fb      	ldrb	r3, [r7, #3]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	3301      	adds	r3, #1
 800f402:	b2db      	uxtb	r3, r3
 800f404:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f408:	4b94      	ldr	r3, [pc, #592]	; (800f65c <ProcessMacCommands+0x390>)
 800f40a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f40e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f412:	4b92      	ldr	r3, [pc, #584]	; (800f65c <ProcessMacCommands+0x390>)
 800f414:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f418:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f41c:	4b8f      	ldr	r3, [pc, #572]	; (800f65c <ProcessMacCommands+0x390>)
 800f41e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f422:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f426:	4b8d      	ldr	r3, [pc, #564]	; (800f65c <ProcessMacCommands+0x390>)
 800f428:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f42c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f430:	4b8a      	ldr	r3, [pc, #552]	; (800f65c <ProcessMacCommands+0x390>)
 800f432:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f436:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f43a:	4b88      	ldr	r3, [pc, #544]	; (800f65c <ProcessMacCommands+0x390>)
 800f43c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f440:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f442:	4b86      	ldr	r3, [pc, #536]	; (800f65c <ProcessMacCommands+0x390>)
 800f444:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f448:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f44c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f450:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f454:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f458:	9301      	str	r3, [sp, #4]
 800f45a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	4623      	mov	r3, r4
 800f462:	f005 f8f8 	bl	8014656 <RegionLinkAdrReq>
 800f466:	4603      	mov	r3, r0
 800f468:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f46c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f470:	f003 0307 	and.w	r3, r3, #7
 800f474:	2b07      	cmp	r3, #7
 800f476:	d10e      	bne.n	800f496 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f478:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f47c:	4b77      	ldr	r3, [pc, #476]	; (800f65c <ProcessMacCommands+0x390>)
 800f47e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f482:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f486:	4b75      	ldr	r3, [pc, #468]	; (800f65c <ProcessMacCommands+0x390>)
 800f488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f48c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f490:	4b72      	ldr	r3, [pc, #456]	; (800f65c <ProcessMacCommands+0x390>)
 800f492:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f496:	2300      	movs	r3, #0
 800f498:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f49c:	e00b      	b.n	800f4b6 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f49e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	2003      	movs	r0, #3
 800f4a8:	f003 fa6c 	bl	8012984 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f4ac:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f4b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f4ba:	4a69      	ldr	r2, [pc, #420]	; (800f660 <ProcessMacCommands+0x394>)
 800f4bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c0:	089b      	lsrs	r3, r3, #2
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d3e8      	bcc.n	800f49e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f4cc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f4d0:	78fb      	ldrb	r3, [r7, #3]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f4da:	bf00      	nop
 800f4dc:	e37b      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f4de:	78fb      	ldrb	r3, [r7, #3]
 800f4e0:	1c5a      	adds	r2, r3, #1
 800f4e2:	70fa      	strb	r2, [r7, #3]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 030f 	and.w	r3, r3, #15
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	4b5a      	ldr	r3, [pc, #360]	; (800f65c <ProcessMacCommands+0x390>)
 800f4f4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f4f8:	4b58      	ldr	r3, [pc, #352]	; (800f65c <ProcessMacCommands+0x390>)
 800f4fa:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800f4fe:	461a      	mov	r2, r3
 800f500:	2301      	movs	r3, #1
 800f502:	4093      	lsls	r3, r2
 800f504:	b29a      	uxth	r2, r3
 800f506:	4b55      	ldr	r3, [pc, #340]	; (800f65c <ProcessMacCommands+0x390>)
 800f508:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f50c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f510:	2200      	movs	r2, #0
 800f512:	4619      	mov	r1, r3
 800f514:	2004      	movs	r0, #4
 800f516:	f003 fa35 	bl	8012984 <LoRaMacCommandsAddCmd>
                break;
 800f51a:	e35c      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f51c:	2307      	movs	r3, #7
 800f51e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f522:	78fb      	ldrb	r3, [r7, #3]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	4413      	add	r3, r2
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	091b      	lsrs	r3, r3, #4
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	b25b      	sxtb	r3, r3
 800f530:	f003 0307 	and.w	r3, r3, #7
 800f534:	b25b      	sxtb	r3, r3
 800f536:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f53a:	78fb      	ldrb	r3, [r7, #3]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	4413      	add	r3, r2
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	b25b      	sxtb	r3, r3
 800f544:	f003 030f 	and.w	r3, r3, #15
 800f548:	b25b      	sxtb	r3, r3
 800f54a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f54e:	78fb      	ldrb	r3, [r7, #3]
 800f550:	3301      	adds	r3, #1
 800f552:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f554:	78fb      	ldrb	r3, [r7, #3]
 800f556:	1c5a      	adds	r2, r3, #1
 800f558:	70fa      	strb	r2, [r7, #3]
 800f55a:	461a      	mov	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4413      	add	r3, r2
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	70fa      	strb	r2, [r7, #3]
 800f56a:	461a      	mov	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4413      	add	r3, r2
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	021a      	lsls	r2, r3, #8
 800f574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f576:	4313      	orrs	r3, r2
 800f578:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f57a:	78fb      	ldrb	r3, [r7, #3]
 800f57c:	1c5a      	adds	r2, r3, #1
 800f57e:	70fa      	strb	r2, [r7, #3]
 800f580:	461a      	mov	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	4413      	add	r3, r2
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	041a      	lsls	r2, r3, #16
 800f58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f58c:	4313      	orrs	r3, r2
 800f58e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f592:	2264      	movs	r2, #100	; 0x64
 800f594:	fb02 f303 	mul.w	r3, r2, r3
 800f598:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f59a:	4b30      	ldr	r3, [pc, #192]	; (800f65c <ProcessMacCommands+0x390>)
 800f59c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f005 f86f 	bl	801468a <RegionRxParamSetupReq>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f5b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f5b6:	f003 0307 	and.w	r3, r3, #7
 800f5ba:	2b07      	cmp	r3, #7
 800f5bc:	d117      	bne.n	800f5ee <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f5be:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f5c2:	b2da      	uxtb	r2, r3
 800f5c4:	4b25      	ldr	r3, [pc, #148]	; (800f65c <ProcessMacCommands+0x390>)
 800f5c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f5ca:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	4b22      	ldr	r3, [pc, #136]	; (800f65c <ProcessMacCommands+0x390>)
 800f5d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d8:	4a20      	ldr	r2, [pc, #128]	; (800f65c <ProcessMacCommands+0x390>)
 800f5da:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5de:	4a1f      	ldr	r2, [pc, #124]	; (800f65c <ProcessMacCommands+0x390>)
 800f5e0:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f5e2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	4b1c      	ldr	r3, [pc, #112]	; (800f65c <ProcessMacCommands+0x390>)
 800f5ea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f5ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f5f2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f5f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	2005      	movs	r0, #5
 800f600:	f003 f9c0 	bl	8012984 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f604:	bf00      	nop
 800f606:	e2e6      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f608:	23ff      	movs	r3, #255	; 0xff
 800f60a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f60e:	4b12      	ldr	r3, [pc, #72]	; (800f658 <ProcessMacCommands+0x38c>)
 800f610:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00d      	beq.n	800f634 <ProcessMacCommands+0x368>
 800f618:	4b0f      	ldr	r3, [pc, #60]	; (800f658 <ProcessMacCommands+0x38c>)
 800f61a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d007      	beq.n	800f634 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f624:	4b0c      	ldr	r3, [pc, #48]	; (800f658 <ProcessMacCommands+0x38c>)
 800f626:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4798      	blx	r3
 800f62e:	4603      	mov	r3, r0
 800f630:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f634:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f638:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f63c:	787b      	ldrb	r3, [r7, #1]
 800f63e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f642:	b2db      	uxtb	r3, r3
 800f644:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f648:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f64c:	2202      	movs	r2, #2
 800f64e:	4619      	mov	r1, r3
 800f650:	2006      	movs	r0, #6
 800f652:	f003 f997 	bl	8012984 <LoRaMacCommandsAddCmd>
                break;
 800f656:	e2be      	b.n	800fbd6 <ProcessMacCommands+0x90a>
 800f658:	20000898 	.word	0x20000898
 800f65c:	20000da4 	.word	0x20000da4
 800f660:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f664:	2303      	movs	r3, #3
 800f666:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f66a:	78fb      	ldrb	r3, [r7, #3]
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	70fa      	strb	r2, [r7, #3]
 800f670:	461a      	mov	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4413      	add	r3, r2
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	b25b      	sxtb	r3, r3
 800f67a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f67e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f682:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	1c5a      	adds	r2, r3, #1
 800f688:	70fa      	strb	r2, [r7, #3]
 800f68a:	461a      	mov	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4413      	add	r3, r2
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f694:	78fb      	ldrb	r3, [r7, #3]
 800f696:	1c5a      	adds	r2, r3, #1
 800f698:	70fa      	strb	r2, [r7, #3]
 800f69a:	461a      	mov	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4413      	add	r3, r2
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	021a      	lsls	r2, r3, #8
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f6aa:	78fb      	ldrb	r3, [r7, #3]
 800f6ac:	1c5a      	adds	r2, r3, #1
 800f6ae:	70fa      	strb	r2, [r7, #3]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	041a      	lsls	r2, r3, #16
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c2:	2264      	movs	r2, #100	; 0x64
 800f6c4:	fb02 f303 	mul.w	r3, r2, r3
 800f6c8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f6ce:	78fb      	ldrb	r3, [r7, #3]
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	70fa      	strb	r2, [r7, #3]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4413      	add	r3, r2
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	b25b      	sxtb	r3, r3
 800f6de:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f6e2:	4b85      	ldr	r3, [pc, #532]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f6e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6e8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f004 ffde 	bl	80146b0 <RegionNewChannelReq>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f6fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f700:	b25b      	sxtb	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	db0a      	blt.n	800f71c <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 800f706:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f70a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f70e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f712:	2201      	movs	r2, #1
 800f714:	4619      	mov	r1, r3
 800f716:	2007      	movs	r0, #7
 800f718:	f003 f934 	bl	8012984 <LoRaMacCommandsAddCmd>
                }
                break;
 800f71c:	bf00      	nop
 800f71e:	e25a      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f720:	78fb      	ldrb	r3, [r7, #3]
 800f722:	1c5a      	adds	r2, r3, #1
 800f724:	70fa      	strb	r2, [r7, #3]
 800f726:	461a      	mov	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4413      	add	r3, r2
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	f003 030f 	and.w	r3, r3, #15
 800f732:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f736:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d104      	bne.n	800f748 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800f73e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f742:	3301      	adds	r3, #1
 800f744:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f748:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f74c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f750:	fb02 f303 	mul.w	r3, r2, r3
 800f754:	461a      	mov	r2, r3
 800f756:	4b68      	ldr	r3, [pc, #416]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f758:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f75a:	4b67      	ldr	r3, [pc, #412]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f75e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f762:	4a65      	ldr	r2, [pc, #404]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f764:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f766:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f76a:	2200      	movs	r2, #0
 800f76c:	4619      	mov	r1, r3
 800f76e:	2008      	movs	r0, #8
 800f770:	f003 f908 	bl	8012984 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f774:	e22f      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f776:	78fb      	ldrb	r3, [r7, #3]
 800f778:	1c5a      	adds	r2, r3, #1
 800f77a:	70fa      	strb	r2, [r7, #3]
 800f77c:	461a      	mov	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4413      	add	r3, r2
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f794:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f798:	f003 0320 	and.w	r3, r3, #32
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f7a6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f7aa:	f003 0310 	and.w	r3, r3, #16
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d002      	beq.n	800f7b8 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f7b8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f7bc:	f003 030f 	and.w	r3, r3, #15
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f7c6:	4b4c      	ldr	r3, [pc, #304]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f004 ff7f 	bl	80146d6 <RegionTxParamSetupReq>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7de:	d03a      	beq.n	800f856 <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f7e0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f7e4:	4b44      	ldr	r3, [pc, #272]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f7e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f7ea:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f7ee:	4b42      	ldr	r3, [pc, #264]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f7f0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f7f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	4b40      	ldr	r3, [pc, #256]	; (800f8fc <ProcessMacCommands+0x630>)
 800f7fc:	5c9b      	ldrb	r3, [r3, r2]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7f1 f898 	bl	8000934 <__aeabi_ui2f>
 800f804:	4603      	mov	r3, r0
 800f806:	4a3c      	ldr	r2, [pc, #240]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f808:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f80a:	2302      	movs	r3, #2
 800f80c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f810:	4b39      	ldr	r3, [pc, #228]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f812:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f816:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f81a:	4b37      	ldr	r3, [pc, #220]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f81c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f820:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f824:	4611      	mov	r1, r2
 800f826:	4618      	mov	r0, r3
 800f828:	f004 fe58 	bl	80144dc <RegionGetPhyParam>
 800f82c:	4603      	mov	r3, r0
 800f82e:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f832:	b25a      	sxtb	r2, r3
 800f834:	4b30      	ldr	r3, [pc, #192]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f836:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f83a:	4293      	cmp	r3, r2
 800f83c:	bfb8      	it	lt
 800f83e:	4613      	movlt	r3, r2
 800f840:	b25a      	sxtb	r2, r3
 800f842:	4b2d      	ldr	r3, [pc, #180]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f848:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f84c:	2200      	movs	r2, #0
 800f84e:	4619      	mov	r1, r3
 800f850:	2009      	movs	r0, #9
 800f852:	f003 f897 	bl	8012984 <LoRaMacCommandsAddCmd>
                }
                break;
 800f856:	bf00      	nop
 800f858:	e1bd      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f85a:	2303      	movs	r3, #3
 800f85c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f860:	78fb      	ldrb	r3, [r7, #3]
 800f862:	1c5a      	adds	r2, r3, #1
 800f864:	70fa      	strb	r2, [r7, #3]
 800f866:	461a      	mov	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4413      	add	r3, r2
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f872:	78fb      	ldrb	r3, [r7, #3]
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	70fa      	strb	r2, [r7, #3]
 800f878:	461a      	mov	r2, r3
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4413      	add	r3, r2
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f882:	78fb      	ldrb	r3, [r7, #3]
 800f884:	1c5a      	adds	r2, r3, #1
 800f886:	70fa      	strb	r2, [r7, #3]
 800f888:	461a      	mov	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4413      	add	r3, r2
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	021a      	lsls	r2, r3, #8
 800f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f894:	4313      	orrs	r3, r2
 800f896:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f898:	78fb      	ldrb	r3, [r7, #3]
 800f89a:	1c5a      	adds	r2, r3, #1
 800f89c:	70fa      	strb	r2, [r7, #3]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	041a      	lsls	r2, r3, #16
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	2264      	movs	r2, #100	; 0x64
 800f8b2:	fb02 f303 	mul.w	r3, r2, r3
 800f8b6:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f8b8:	4b0f      	ldr	r3, [pc, #60]	; (800f8f8 <ProcessMacCommands+0x62c>)
 800f8ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8be:	f107 0220 	add.w	r2, r7, #32
 800f8c2:	4611      	mov	r1, r2
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f004 ff19 	bl	80146fc <RegionDlChannelReq>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f8d2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f8d6:	b25b      	sxtb	r3, r3
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	db0a      	blt.n	800f8f2 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 800f8dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f8e0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f8e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	200a      	movs	r0, #10
 800f8ee:	f003 f849 	bl	8012984 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f8f2:	bf00      	nop
 800f8f4:	e16f      	b.n	800fbd6 <ProcessMacCommands+0x90a>
 800f8f6:	bf00      	nop
 800f8f8:	20000da4 	.word	0x20000da4
 800f8fc:	0801c120 	.word	0x0801c120
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f900:	200a      	movs	r0, #10
 800f902:	f003 fb67 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f000 8164 	beq.w	800fbd6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f90e:	210a      	movs	r1, #10
 800f910:	2000      	movs	r0, #0
 800f912:	f003 fad3 	bl	8012ebc <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f916:	f107 0318 	add.w	r3, r7, #24
 800f91a:	2200      	movs	r2, #0
 800f91c:	601a      	str	r2, [r3, #0]
 800f91e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f920:	f107 0310 	add.w	r3, r7, #16
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]
 800f928:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f92a:	f107 0308 	add.w	r3, r7, #8
 800f92e:	2200      	movs	r2, #0
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f934:	78fb      	ldrb	r3, [r7, #3]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	70fa      	strb	r2, [r7, #3]
 800f93a:	461a      	mov	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4413      	add	r3, r2
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f944:	78fb      	ldrb	r3, [r7, #3]
 800f946:	1c5a      	adds	r2, r3, #1
 800f948:	70fa      	strb	r2, [r7, #3]
 800f94a:	461a      	mov	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4413      	add	r3, r2
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	021a      	lsls	r2, r3, #8
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	4313      	orrs	r3, r2
 800f958:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f95a:	78fb      	ldrb	r3, [r7, #3]
 800f95c:	1c5a      	adds	r2, r3, #1
 800f95e:	70fa      	strb	r2, [r7, #3]
 800f960:	461a      	mov	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4413      	add	r3, r2
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	041a      	lsls	r2, r3, #16
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	4313      	orrs	r3, r2
 800f96e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f970:	78fb      	ldrb	r3, [r7, #3]
 800f972:	1c5a      	adds	r2, r3, #1
 800f974:	70fa      	strb	r2, [r7, #3]
 800f976:	461a      	mov	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4413      	add	r3, r2
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	061a      	lsls	r2, r3, #24
 800f980:	69bb      	ldr	r3, [r7, #24]
 800f982:	4313      	orrs	r3, r2
 800f984:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f986:	78fb      	ldrb	r3, [r7, #3]
 800f988:	1c5a      	adds	r2, r3, #1
 800f98a:	70fa      	strb	r2, [r7, #3]
 800f98c:	461a      	mov	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4413      	add	r3, r2
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	b21b      	sxth	r3, r3
 800f996:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f998:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f99c:	461a      	mov	r2, r3
 800f99e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9a2:	fb02 f303 	mul.w	r3, r2, r3
 800f9a6:	121b      	asrs	r3, r3, #8
 800f9a8:	b21b      	sxth	r3, r3
 800f9aa:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f9ac:	f107 0310 	add.w	r3, r7, #16
 800f9b0:	f107 0218 	add.w	r2, r7, #24
 800f9b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9b8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f9bc:	693a      	ldr	r2, [r7, #16]
 800f9be:	4b8c      	ldr	r3, [pc, #560]	; (800fbf0 <ProcessMacCommands+0x924>)
 800f9c0:	4413      	add	r3, r2
 800f9c2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f9c4:	f107 0308 	add.w	r3, r7, #8
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f00a fc79 	bl	801a2c0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f9ce:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f9d2:	4b88      	ldr	r3, [pc, #544]	; (800fbf4 <ProcessMacCommands+0x928>)
 800f9d4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f9d8:	9200      	str	r2, [sp, #0]
 800f9da:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f9de:	f107 0210 	add.w	r2, r7, #16
 800f9e2:	ca06      	ldmia	r2, {r1, r2}
 800f9e4:	f00a fc05 	bl	801a1f2 <SysTimeSub>
 800f9e8:	f107 0010 	add.w	r0, r7, #16
 800f9ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9f2:	f107 0208 	add.w	r2, r7, #8
 800f9f6:	ca06      	ldmia	r2, {r1, r2}
 800f9f8:	f00a fbc2 	bl	801a180 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f9fc:	f107 0310 	add.w	r3, r7, #16
 800fa00:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fa04:	f00a fc2e 	bl	801a264 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fa08:	f002 fe81 	bl	801270e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fa0c:	4b79      	ldr	r3, [pc, #484]	; (800fbf4 <ProcessMacCommands+0x928>)
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800fa14:	e0df      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800fa16:	200d      	movs	r0, #13
 800fa18:	f003 fadc 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f000 80d9 	beq.w	800fbd6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800fa24:	210d      	movs	r1, #13
 800fa26:	2000      	movs	r0, #0
 800fa28:	f003 fa48 	bl	8012ebc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800fa2c:	4b71      	ldr	r3, [pc, #452]	; (800fbf4 <ProcessMacCommands+0x928>)
 800fa2e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800fa32:	2b04      	cmp	r3, #4
 800fa34:	f000 80cf 	beq.w	800fbd6 <ProcessMacCommands+0x90a>
 800fa38:	4b6e      	ldr	r3, [pc, #440]	; (800fbf4 <ProcessMacCommands+0x928>)
 800fa3a:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800fa3e:	2b05      	cmp	r3, #5
 800fa40:	f000 80c9 	beq.w	800fbd6 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800fa44:	f002 fe44 	bl	80126d0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800fa48:	e0c5      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800fa50:	2300      	movs	r3, #0
 800fa52:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800fa54:	78fb      	ldrb	r3, [r7, #3]
 800fa56:	1c5a      	adds	r2, r3, #1
 800fa58:	70fa      	strb	r2, [r7, #3]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	4413      	add	r3, r2
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fa64:	78fb      	ldrb	r3, [r7, #3]
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	70fa      	strb	r2, [r7, #3]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4413      	add	r3, r2
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	021b      	lsls	r3, r3, #8
 800fa74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa76:	4313      	orrs	r3, r2
 800fa78:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fa7a:	78fb      	ldrb	r3, [r7, #3]
 800fa7c:	1c5a      	adds	r2, r3, #1
 800fa7e:	70fa      	strb	r2, [r7, #3]
 800fa80:	461a      	mov	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4413      	add	r3, r2
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	041b      	lsls	r3, r3, #16
 800fa8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800fa90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa92:	2264      	movs	r2, #100	; 0x64
 800fa94:	fb02 f303 	mul.w	r3, r2, r3
 800fa98:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	1c5a      	adds	r2, r3, #1
 800fa9e:	70fa      	strb	r2, [r7, #3]
 800faa0:	461a      	mov	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4413      	add	r3, r2
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	f003 030f 	and.w	r3, r3, #15
 800faac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fab0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fab4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fab6:	4618      	mov	r0, r3
 800fab8:	f002 fe10 	bl	80126dc <LoRaMacClassBPingSlotChannelReq>
 800fabc:	4603      	mov	r3, r0
 800fabe:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800fac2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fac6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800faca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800face:	2201      	movs	r2, #1
 800fad0:	4619      	mov	r1, r3
 800fad2:	2011      	movs	r0, #17
 800fad4:	f002 ff56 	bl	8012984 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800fad8:	e07d      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800fada:	200e      	movs	r0, #14
 800fadc:	f003 fa7a 	bl	8012fd4 <LoRaMacConfirmQueueIsCmdActive>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d077      	beq.n	800fbd6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800fae6:	210e      	movs	r1, #14
 800fae8:	2000      	movs	r0, #0
 800faea:	f003 f9e7 	bl	8012ebc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800faee:	2300      	movs	r3, #0
 800faf0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800faf4:	2300      	movs	r3, #0
 800faf6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	70fa      	strb	r2, [r7, #3]
 800fb00:	461a      	mov	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4413      	add	r3, r2
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800fb0c:	78fb      	ldrb	r3, [r7, #3]
 800fb0e:	1c5a      	adds	r2, r3, #1
 800fb10:	70fa      	strb	r2, [r7, #3]
 800fb12:	461a      	mov	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4413      	add	r3, r2
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	021b      	lsls	r3, r3, #8
 800fb1c:	b21a      	sxth	r2, r3
 800fb1e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800fb22:	4313      	orrs	r3, r2
 800fb24:	b21b      	sxth	r3, r3
 800fb26:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800fb2a:	78fb      	ldrb	r3, [r7, #3]
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	70fa      	strb	r2, [r7, #3]
 800fb30:	461a      	mov	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4413      	add	r3, r2
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800fb3c:	4b2e      	ldr	r3, [pc, #184]	; (800fbf8 <ProcessMacCommands+0x92c>)
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800fb44:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f002 fdd3 	bl	80126f4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800fb4e:	e042      	b.n	800fbd6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800fb50:	2300      	movs	r3, #0
 800fb52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800fb56:	78fb      	ldrb	r3, [r7, #3]
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	70fa      	strb	r2, [r7, #3]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	4413      	add	r3, r2
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fb68:	78fb      	ldrb	r3, [r7, #3]
 800fb6a:	1c5a      	adds	r2, r3, #1
 800fb6c:	70fa      	strb	r2, [r7, #3]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4413      	add	r3, r2
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	021b      	lsls	r3, r3, #8
 800fb78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fb82:	78fb      	ldrb	r3, [r7, #3]
 800fb84:	1c5a      	adds	r2, r3, #1
 800fb86:	70fa      	strb	r2, [r7, #3]
 800fb88:	461a      	mov	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	041b      	lsls	r3, r3, #16
 800fb92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb96:	4313      	orrs	r3, r2
 800fb98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800fb9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fba0:	2264      	movs	r2, #100	; 0x64
 800fba2:	fb02 f303 	mul.w	r3, r2, r3
 800fba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fbaa:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800fbae:	f002 fdb4 	bl	801271a <LoRaMacClassBBeaconFreqReq>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d003      	beq.n	800fbc0 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800fbbe:	e002      	b.n	800fbc6 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800fbc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fbca:	2201      	movs	r2, #1
 800fbcc:	4619      	mov	r1, r3
 800fbce:	2013      	movs	r0, #19
 800fbd0:	f002 fed8 	bl	8012984 <LoRaMacCommandsAddCmd>
                }
                break;
 800fbd4:	bf00      	nop
    while( macIndex < commandsSize )
 800fbd6:	78fa      	ldrb	r2, [r7, #3]
 800fbd8:	78bb      	ldrb	r3, [r7, #2]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	f4ff ab8e 	bcc.w	800f2fc <ProcessMacCommands+0x30>
 800fbe0:	e002      	b.n	800fbe8 <ProcessMacCommands+0x91c>
            return;
 800fbe2:	bf00      	nop
 800fbe4:	e000      	b.n	800fbe8 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800fbe6:	bf00      	nop
        }
    }
}
 800fbe8:	378c      	adds	r7, #140	; 0x8c
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd90      	pop	{r4, r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	12d53d80 	.word	0x12d53d80
 800fbf4:	20000898 	.word	0x20000898
 800fbf8:	20001bfc 	.word	0x20001bfc

0800fbfc <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b08e      	sub	sp, #56	; 0x38
 800fc00:	af02      	add	r7, sp, #8
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	607a      	str	r2, [r7, #4]
 800fc06:	461a      	mov	r2, r3
 800fc08:	460b      	mov	r3, r1
 800fc0a:	72fb      	strb	r3, [r7, #11]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc10:	2303      	movs	r3, #3
 800fc12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fc16:	4b65      	ldr	r3, [pc, #404]	; (800fdac <Send+0x1b0>)
 800fc18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fc1c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fc20:	4b62      	ldr	r3, [pc, #392]	; (800fdac <Send+0x1b0>)
 800fc22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fc26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fc2a:	4b60      	ldr	r3, [pc, #384]	; (800fdac <Send+0x1b0>)
 800fc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc2e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fc30:	4b5e      	ldr	r3, [pc, #376]	; (800fdac <Send+0x1b0>)
 800fc32:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d101      	bne.n	800fc3e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fc3a:	2307      	movs	r3, #7
 800fc3c:	e0b1      	b.n	800fda2 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fc3e:	4b5b      	ldr	r3, [pc, #364]	; (800fdac <Send+0x1b0>)
 800fc40:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d102      	bne.n	800fc4e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fc48:	4b58      	ldr	r3, [pc, #352]	; (800fdac <Send+0x1b0>)
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fc54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc58:	f36f 0303 	bfc	r3, #0, #4
 800fc5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fc60:	4b52      	ldr	r3, [pc, #328]	; (800fdac <Send+0x1b0>)
 800fc62:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800fc66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc6a:	f362 13c7 	bfi	r3, r2, #7, #1
 800fc6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc72:	4b4e      	ldr	r3, [pc, #312]	; (800fdac <Send+0x1b0>)
 800fc74:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d106      	bne.n	800fc8a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fc7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc80:	f043 0310 	orr.w	r3, r3, #16
 800fc84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800fc88:	e005      	b.n	800fc96 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fc8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fc8e:	f36f 1304 	bfc	r3, #4, #1
 800fc92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fc96:	4b45      	ldr	r3, [pc, #276]	; (800fdac <Send+0x1b0>)
 800fc98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d005      	beq.n	800fcac <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fca4:	f043 0320 	orr.w	r3, r3, #32
 800fca8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800fcac:	4b3f      	ldr	r3, [pc, #252]	; (800fdac <Send+0x1b0>)
 800fcae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800fcb2:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fcb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fcbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	bf14      	ite	ne
 800fcc6:	2301      	movne	r3, #1
 800fcc8:	2300      	moveq	r3, #0
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fcce:	4b37      	ldr	r3, [pc, #220]	; (800fdac <Send+0x1b0>)
 800fcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fcd4:	4b36      	ldr	r3, [pc, #216]	; (800fdb0 <Send+0x1b4>)
 800fcd6:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fcda:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fcdc:	4b34      	ldr	r3, [pc, #208]	; (800fdb0 <Send+0x1b4>)
 800fcde:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800fce2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fce4:	4b31      	ldr	r3, [pc, #196]	; (800fdac <Send+0x1b0>)
 800fce6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fcea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fcee:	4b2f      	ldr	r3, [pc, #188]	; (800fdac <Send+0x1b0>)
 800fcf0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fcf4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fcf8:	4b2c      	ldr	r3, [pc, #176]	; (800fdac <Send+0x1b0>)
 800fcfa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fcfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800fd02:	4b2a      	ldr	r3, [pc, #168]	; (800fdac <Send+0x1b0>)
 800fd04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fd0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd10:	f107 0014 	add.w	r0, r7, #20
 800fd14:	4a27      	ldr	r2, [pc, #156]	; (800fdb4 <Send+0x1b8>)
 800fd16:	4928      	ldr	r1, [pc, #160]	; (800fdb8 <Send+0x1bc>)
 800fd18:	f002 fc1a 	bl	8012550 <LoRaMacAdrCalcNext>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	461a      	mov	r2, r3
 800fd20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd24:	f362 1386 	bfi	r3, r2, #6, #1
 800fd28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fd2c:	7afa      	ldrb	r2, [r7, #11]
 800fd2e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fd32:	893b      	ldrh	r3, [r7, #8]
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 fc2d 	bl	8010598 <PrepareFrame>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fd44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d003      	beq.n	800fd54 <Send+0x158>
 800fd4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd50:	2b0a      	cmp	r3, #10
 800fd52:	d107      	bne.n	800fd64 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fd54:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f000 f96d 	bl	8010038 <ScheduleTx>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fd64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00a      	beq.n	800fd82 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fd6c:	4a0f      	ldr	r2, [pc, #60]	; (800fdac <Send+0x1b0>)
 800fd6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fd72:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fd76:	4a0d      	ldr	r2, [pc, #52]	; (800fdac <Send+0x1b0>)
 800fd78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fd7c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800fd80:	e00d      	b.n	800fd9e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fd82:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <Send+0x1b0>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	4a07      	ldr	r2, [pc, #28]	; (800fdac <Send+0x1b0>)
 800fd8e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fd90:	f002 fe70 	bl	8012a74 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd9a:	2313      	movs	r3, #19
 800fd9c:	e001      	b.n	800fda2 <Send+0x1a6>
        }
    }
    return status;
 800fd9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3730      	adds	r7, #48	; 0x30
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	20000da4 	.word	0x20000da4
 800fdb0:	20000898 	.word	0x20000898
 800fdb4:	20000ddc 	.word	0x20000ddc
 800fdb8:	20000ddd 	.word	0x20000ddd

0800fdbc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fdd2:	79fb      	ldrb	r3, [r7, #7]
 800fdd4:	2bff      	cmp	r3, #255	; 0xff
 800fdd6:	d129      	bne.n	800fe2c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fdd8:	2000      	movs	r0, #0
 800fdda:	f7ff f957 	bl	800f08c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fdde:	4b1a      	ldr	r3, [pc, #104]	; (800fe48 <SendReJoinReq+0x8c>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fde6:	4b18      	ldr	r3, [pc, #96]	; (800fe48 <SendReJoinReq+0x8c>)
 800fde8:	4a18      	ldr	r2, [pc, #96]	; (800fe4c <SendReJoinReq+0x90>)
 800fdea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fdee:	4b16      	ldr	r3, [pc, #88]	; (800fe48 <SendReJoinReq+0x8c>)
 800fdf0:	22ff      	movs	r2, #255	; 0xff
 800fdf2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fdf6:	7b3b      	ldrb	r3, [r7, #12]
 800fdf8:	f36f 1347 	bfc	r3, #5, #3
 800fdfc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fdfe:	7b3a      	ldrb	r2, [r7, #12]
 800fe00:	4b11      	ldr	r3, [pc, #68]	; (800fe48 <SendReJoinReq+0x8c>)
 800fe02:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fe06:	f7fc fb75 	bl	800c4f4 <SecureElementGetJoinEui>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2208      	movs	r2, #8
 800fe0e:	4619      	mov	r1, r3
 800fe10:	480f      	ldr	r0, [pc, #60]	; (800fe50 <SendReJoinReq+0x94>)
 800fe12:	f006 fe76 	bl	8016b02 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fe16:	f7fc fb4b 	bl	800c4b0 <SecureElementGetDevEui>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2208      	movs	r2, #8
 800fe1e:	4619      	mov	r1, r3
 800fe20:	480c      	ldr	r0, [pc, #48]	; (800fe54 <SendReJoinReq+0x98>)
 800fe22:	f006 fe6e 	bl	8016b02 <memcpy1>

            allowDelayedTx = false;
 800fe26:	2300      	movs	r3, #0
 800fe28:	73fb      	strb	r3, [r7, #15]

            break;
 800fe2a:	e002      	b.n	800fe32 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	73bb      	strb	r3, [r7, #14]
            break;
 800fe30:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f000 f8ff 	bl	8010038 <ScheduleTx>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	73bb      	strb	r3, [r7, #14]
    return status;
 800fe3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	20000898 	.word	0x20000898
 800fe4c:	2000089a 	.word	0x2000089a
 800fe50:	200009a6 	.word	0x200009a6
 800fe54:	200009ae 	.word	0x200009ae

0800fe58 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fe5c:	f002 fbe7 	bl	801262e <LoRaMacClassBIsBeaconExpected>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d001      	beq.n	800fe6a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fe66:	230e      	movs	r3, #14
 800fe68:	e013      	b.n	800fe92 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fe6a:	4b0b      	ldr	r3, [pc, #44]	; (800fe98 <CheckForClassBCollision+0x40>)
 800fe6c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d10d      	bne.n	800fe90 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fe74:	f002 fbe2 	bl	801263c <LoRaMacClassBIsPingExpected>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d001      	beq.n	800fe82 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe7e:	230f      	movs	r3, #15
 800fe80:	e007      	b.n	800fe92 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe82:	f002 fbe2 	bl	801264a <LoRaMacClassBIsMulticastExpected>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d001      	beq.n	800fe90 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe8c:	230f      	movs	r3, #15
 800fe8e:	e000      	b.n	800fe92 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20000da4 	.word	0x20000da4

0800fe9c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fe9c:	b590      	push	{r4, r7, lr}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fea2:	4b2d      	ldr	r3, [pc, #180]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800fea4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fea8:	4b2b      	ldr	r3, [pc, #172]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800feaa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800feae:	4b2a      	ldr	r3, [pc, #168]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800feb0:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800feb4:	4b28      	ldr	r3, [pc, #160]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800feb6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800feba:	4b27      	ldr	r3, [pc, #156]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800febc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fec0:	b25b      	sxtb	r3, r3
 800fec2:	f004 fc72 	bl	80147aa <RegionApplyDrOffset>
 800fec6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fec8:	b259      	sxtb	r1, r3
 800feca:	4b23      	ldr	r3, [pc, #140]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800fecc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fed0:	4b21      	ldr	r3, [pc, #132]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800fed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fed4:	4821      	ldr	r0, [pc, #132]	; (800ff5c <ComputeRxWindowParameters+0xc0>)
 800fed6:	9000      	str	r0, [sp, #0]
 800fed8:	4620      	mov	r0, r4
 800feda:	f004 fb76 	bl	80145ca <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fede:	4b1e      	ldr	r3, [pc, #120]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800fee0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fee4:	4b1c      	ldr	r3, [pc, #112]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800fee6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800feea:	b259      	sxtb	r1, r3
 800feec:	4b1a      	ldr	r3, [pc, #104]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800feee:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fef2:	4b19      	ldr	r3, [pc, #100]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800fef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fef6:	4c1a      	ldr	r4, [pc, #104]	; (800ff60 <ComputeRxWindowParameters+0xc4>)
 800fef8:	9400      	str	r4, [sp, #0]
 800fefa:	f004 fb66 	bl	80145ca <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fefe:	4b16      	ldr	r3, [pc, #88]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800ff00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff02:	4a18      	ldr	r2, [pc, #96]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff04:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ff08:	4413      	add	r3, r2
 800ff0a:	4a16      	ldr	r2, [pc, #88]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff0c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ff10:	4b11      	ldr	r3, [pc, #68]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800ff12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff14:	4a13      	ldr	r2, [pc, #76]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff16:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800ff1a:	4413      	add	r3, r2
 800ff1c:	4a11      	ldr	r2, [pc, #68]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff1e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ff22:	4b0d      	ldr	r3, [pc, #52]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800ff24:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d111      	bne.n	800ff50 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ff2c:	4b0a      	ldr	r3, [pc, #40]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800ff2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff30:	4a0c      	ldr	r2, [pc, #48]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff32:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ff36:	4413      	add	r3, r2
 800ff38:	4a0a      	ldr	r2, [pc, #40]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff3a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ff3e:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <ComputeRxWindowParameters+0xbc>)
 800ff40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff42:	4a08      	ldr	r2, [pc, #32]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff44:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800ff48:	4413      	add	r3, r2
 800ff4a:	4a06      	ldr	r2, [pc, #24]	; (800ff64 <ComputeRxWindowParameters+0xc8>)
 800ff4c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800ff50:	bf00      	nop
 800ff52:	3704      	adds	r7, #4
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd90      	pop	{r4, r7, pc}
 800ff58:	20000da4 	.word	0x20000da4
 800ff5c:	20000c50 	.word	0x20000c50
 800ff60:	20000c64 	.word	0x20000c64
 800ff64:	20000898 	.word	0x20000898

0800ff68 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ff72:	4b13      	ldr	r3, [pc, #76]	; (800ffc0 <VerifyTxFrame+0x58>)
 800ff74:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d01b      	beq.n	800ffb4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ff7c:	1d3b      	adds	r3, r7, #4
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f002 fdbe 	bl	8012b00 <LoRaMacCommandsGetSizeSerializedCmds>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d001      	beq.n	800ff8e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff8a:	2313      	movs	r3, #19
 800ff8c:	e013      	b.n	800ffb6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ff8e:	4b0d      	ldr	r3, [pc, #52]	; (800ffc4 <VerifyTxFrame+0x5c>)
 800ff90:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ff94:	4a0a      	ldr	r2, [pc, #40]	; (800ffc0 <VerifyTxFrame+0x58>)
 800ff96:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	b2d2      	uxtb	r2, r2
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff f96c 	bl	800f27c <ValidatePayloadLength>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	f083 0301 	eor.w	r3, r3, #1
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d001      	beq.n	800ffb4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ffb0:	2308      	movs	r3, #8
 800ffb2:	e000      	b.n	800ffb6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	20000da4 	.word	0x20000da4
 800ffc4:	20000898 	.word	0x20000898

0800ffc8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ffce:	4b18      	ldr	r3, [pc, #96]	; (8010030 <SerializeTxFrame+0x68>)
 800ffd0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d002      	beq.n	800ffde <SerializeTxFrame+0x16>
 800ffd8:	2b04      	cmp	r3, #4
 800ffda:	d011      	beq.n	8010000 <SerializeTxFrame+0x38>
 800ffdc:	e021      	b.n	8010022 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ffde:	4815      	ldr	r0, [pc, #84]	; (8010034 <SerializeTxFrame+0x6c>)
 800ffe0:	f004 f8f3 	bl	80141ca <LoRaMacSerializerJoinRequest>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d001      	beq.n	800fff2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffee:	2311      	movs	r3, #17
 800fff0:	e01a      	b.n	8010028 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fff2:	4b0f      	ldr	r3, [pc, #60]	; (8010030 <SerializeTxFrame+0x68>)
 800fff4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	4b0d      	ldr	r3, [pc, #52]	; (8010030 <SerializeTxFrame+0x68>)
 800fffc:	801a      	strh	r2, [r3, #0]
            break;
 800fffe:	e012      	b.n	8010026 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010000:	480c      	ldr	r0, [pc, #48]	; (8010034 <SerializeTxFrame+0x6c>)
 8010002:	f004 f964 	bl	80142ce <LoRaMacSerializerData>
 8010006:	4603      	mov	r3, r0
 8010008:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801000a:	79fb      	ldrb	r3, [r7, #7]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d001      	beq.n	8010014 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010010:	2311      	movs	r3, #17
 8010012:	e009      	b.n	8010028 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010014:	4b06      	ldr	r3, [pc, #24]	; (8010030 <SerializeTxFrame+0x68>)
 8010016:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801001a:	b29a      	uxth	r2, r3
 801001c:	4b04      	ldr	r3, [pc, #16]	; (8010030 <SerializeTxFrame+0x68>)
 801001e:	801a      	strh	r2, [r3, #0]
            break;
 8010020:	e001      	b.n	8010026 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010022:	2303      	movs	r3, #3
 8010024:	e000      	b.n	8010028 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	3708      	adds	r7, #8
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	20000898 	.word	0x20000898
 8010034:	200009a0 	.word	0x200009a0

08010038 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b090      	sub	sp, #64	; 0x40
 801003c:	af02      	add	r7, sp, #8
 801003e:	4603      	mov	r3, r0
 8010040:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010042:	2303      	movs	r3, #3
 8010044:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010048:	f7ff ff06 	bl	800fe58 <CheckForClassBCollision>
 801004c:	4603      	mov	r3, r0
 801004e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <ScheduleTx+0x28>
    {
        return status;
 801005a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801005e:	e08f      	b.n	8010180 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010060:	f000 f8fa 	bl	8010258 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010064:	f7ff ffb0 	bl	800ffc8 <SerializeTxFrame>
 8010068:	4603      	mov	r3, r0
 801006a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801006e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010072:	2b00      	cmp	r3, #0
 8010074:	d002      	beq.n	801007c <ScheduleTx+0x44>
    {
        return status;
 8010076:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801007a:	e081      	b.n	8010180 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801007c:	4b42      	ldr	r3, [pc, #264]	; (8010188 <ScheduleTx+0x150>)
 801007e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010080:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010082:	4b41      	ldr	r3, [pc, #260]	; (8010188 <ScheduleTx+0x150>)
 8010084:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010088:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801008a:	4b3f      	ldr	r3, [pc, #252]	; (8010188 <ScheduleTx+0x150>)
 801008c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010090:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010096:	4618      	mov	r0, r3
 8010098:	f00a f94a 	bl	801a330 <SysTimeGetMcuTime>
 801009c:	4638      	mov	r0, r7
 801009e:	4b3a      	ldr	r3, [pc, #232]	; (8010188 <ScheduleTx+0x150>)
 80100a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80100a4:	9200      	str	r2, [sp, #0]
 80100a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80100aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80100ae:	ca06      	ldmia	r2, {r1, r2}
 80100b0:	f00a f89f 	bl	801a1f2 <SysTimeSub>
 80100b4:	f107 0320 	add.w	r3, r7, #32
 80100b8:	463a      	mov	r2, r7
 80100ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100be:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80100c2:	4b31      	ldr	r3, [pc, #196]	; (8010188 <ScheduleTx+0x150>)
 80100c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80100c8:	2300      	movs	r3, #0
 80100ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80100ce:	2301      	movs	r3, #1
 80100d0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80100d2:	4b2e      	ldr	r3, [pc, #184]	; (801018c <ScheduleTx+0x154>)
 80100d4:	881b      	ldrh	r3, [r3, #0]
 80100d6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80100d8:	4b2b      	ldr	r3, [pc, #172]	; (8010188 <ScheduleTx+0x150>)
 80100da:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d104      	bne.n	80100ec <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80100e2:	2301      	movs	r3, #1
 80100e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80100e8:	2300      	movs	r3, #0
 80100ea:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80100ec:	4b26      	ldr	r3, [pc, #152]	; (8010188 <ScheduleTx+0x150>)
 80100ee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80100f2:	f107 0114 	add.w	r1, r7, #20
 80100f6:	4b26      	ldr	r3, [pc, #152]	; (8010190 <ScheduleTx+0x158>)
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	4b26      	ldr	r3, [pc, #152]	; (8010194 <ScheduleTx+0x15c>)
 80100fc:	4a26      	ldr	r2, [pc, #152]	; (8010198 <ScheduleTx+0x160>)
 80100fe:	f004 fb2a 	bl	8014756 <RegionNextChannel>
 8010102:	4603      	mov	r3, r0
 8010104:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801010c:	2b00      	cmp	r3, #0
 801010e:	d022      	beq.n	8010156 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010114:	2b0b      	cmp	r3, #11
 8010116:	d11b      	bne.n	8010150 <ScheduleTx+0x118>
 8010118:	7bfb      	ldrb	r3, [r7, #15]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d018      	beq.n	8010150 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801011e:	4b1b      	ldr	r3, [pc, #108]	; (801018c <ScheduleTx+0x154>)
 8010120:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8010124:	2b00      	cmp	r3, #0
 8010126:	d011      	beq.n	801014c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010128:	4b18      	ldr	r3, [pc, #96]	; (801018c <ScheduleTx+0x154>)
 801012a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801012e:	f043 0320 	orr.w	r3, r3, #32
 8010132:	4a16      	ldr	r2, [pc, #88]	; (801018c <ScheduleTx+0x154>)
 8010134:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010138:	4b14      	ldr	r3, [pc, #80]	; (801018c <ScheduleTx+0x154>)
 801013a:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 801013e:	4619      	mov	r1, r3
 8010140:	4816      	ldr	r0, [pc, #88]	; (801019c <ScheduleTx+0x164>)
 8010142:	f00a fe99 	bl	801ae78 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010146:	4815      	ldr	r0, [pc, #84]	; (801019c <ScheduleTx+0x164>)
 8010148:	f00a fdb8 	bl	801acbc <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	e017      	b.n	8010180 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010154:	e014      	b.n	8010180 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010156:	f7ff fea1 	bl	800fe9c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801015a:	f7ff ff05 	bl	800ff68 <VerifyTxFrame>
 801015e:	4603      	mov	r3, r0
 8010160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010168:	2b00      	cmp	r3, #0
 801016a:	d002      	beq.n	8010172 <ScheduleTx+0x13a>
    {
        return status;
 801016c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010170:	e006      	b.n	8010180 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010172:	4b06      	ldr	r3, [pc, #24]	; (801018c <ScheduleTx+0x154>)
 8010174:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010178:	4618      	mov	r0, r3
 801017a:	f000 fb29 	bl	80107d0 <SendFrameOnChannel>
 801017e:	4603      	mov	r3, r0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3738      	adds	r7, #56	; 0x38
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	20000da4 	.word	0x20000da4
 801018c:	20000898 	.word	0x20000898
 8010190:	20000dd4 	.word	0x20000dd4
 8010194:	20000d20 	.word	0x20000d20
 8010198:	20000cad 	.word	0x20000cad
 801019c:	20000c00 	.word	0x20000c00

080101a0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	4603      	mov	r3, r0
 80101a8:	460a      	mov	r2, r1
 80101aa:	71fb      	strb	r3, [r7, #7]
 80101ac:	4613      	mov	r3, r2
 80101ae:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80101b0:	2313      	movs	r3, #19
 80101b2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80101b4:	2300      	movs	r3, #0
 80101b6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80101b8:	4b25      	ldr	r3, [pc, #148]	; (8010250 <SecureFrame+0xb0>)
 80101ba:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d002      	beq.n	80101c8 <SecureFrame+0x28>
 80101c2:	2b04      	cmp	r3, #4
 80101c4:	d011      	beq.n	80101ea <SecureFrame+0x4a>
 80101c6:	e03b      	b.n	8010240 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80101c8:	4822      	ldr	r0, [pc, #136]	; (8010254 <SecureFrame+0xb4>)
 80101ca:	f003 fbc7 	bl	801395c <LoRaMacCryptoPrepareJoinRequest>
 80101ce:	4603      	mov	r3, r0
 80101d0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80101d2:	7bfb      	ldrb	r3, [r7, #15]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d001      	beq.n	80101dc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80101d8:	2311      	movs	r3, #17
 80101da:	e034      	b.n	8010246 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80101dc:	4b1c      	ldr	r3, [pc, #112]	; (8010250 <SecureFrame+0xb0>)
 80101de:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	4b1a      	ldr	r3, [pc, #104]	; (8010250 <SecureFrame+0xb0>)
 80101e6:	801a      	strh	r2, [r3, #0]
            break;
 80101e8:	e02c      	b.n	8010244 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80101ea:	f107 0308 	add.w	r3, r7, #8
 80101ee:	4618      	mov	r0, r3
 80101f0:	f003 face 	bl	8013790 <LoRaMacCryptoGetFCntUp>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d001      	beq.n	80101fe <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80101fa:	2312      	movs	r3, #18
 80101fc:	e023      	b.n	8010246 <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80101fe:	4b14      	ldr	r3, [pc, #80]	; (8010250 <SecureFrame+0xb0>)
 8010200:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010204:	2b00      	cmp	r3, #0
 8010206:	d104      	bne.n	8010212 <SecureFrame+0x72>
 8010208:	4b11      	ldr	r3, [pc, #68]	; (8010250 <SecureFrame+0xb0>)
 801020a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 801020e:	2b01      	cmp	r3, #1
 8010210:	d902      	bls.n	8010218 <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	3b01      	subs	r3, #1
 8010216:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	79ba      	ldrb	r2, [r7, #6]
 801021c:	79f9      	ldrb	r1, [r7, #7]
 801021e:	4b0d      	ldr	r3, [pc, #52]	; (8010254 <SecureFrame+0xb4>)
 8010220:	f003 fcb4 	bl	8013b8c <LoRaMacCryptoSecureMessage>
 8010224:	4603      	mov	r3, r0
 8010226:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010228:	7bfb      	ldrb	r3, [r7, #15]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d001      	beq.n	8010232 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801022e:	2311      	movs	r3, #17
 8010230:	e009      	b.n	8010246 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010232:	4b07      	ldr	r3, [pc, #28]	; (8010250 <SecureFrame+0xb0>)
 8010234:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010238:	b29a      	uxth	r2, r3
 801023a:	4b05      	ldr	r3, [pc, #20]	; (8010250 <SecureFrame+0xb0>)
 801023c:	801a      	strh	r2, [r3, #0]
            break;
 801023e:	e001      	b.n	8010244 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010240:	2303      	movs	r3, #3
 8010242:	e000      	b.n	8010246 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	20000898 	.word	0x20000898
 8010254:	200009a0 	.word	0x200009a0

08010258 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010258:	b480      	push	{r7}
 801025a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <CalculateBackOff+0x2c>)
 801025e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010260:	2b00      	cmp	r3, #0
 8010262:	d10a      	bne.n	801027a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010264:	4b07      	ldr	r3, [pc, #28]	; (8010284 <CalculateBackOff+0x2c>)
 8010266:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 801026a:	3b01      	subs	r3, #1
 801026c:	4a06      	ldr	r2, [pc, #24]	; (8010288 <CalculateBackOff+0x30>)
 801026e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8010272:	fb02 f303 	mul.w	r3, r2, r3
 8010276:	4a03      	ldr	r2, [pc, #12]	; (8010284 <CalculateBackOff+0x2c>)
 8010278:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801027a:	bf00      	nop
 801027c:	46bd      	mov	sp, r7
 801027e:	bc80      	pop	{r7}
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	20000da4 	.word	0x20000da4
 8010288:	20000898 	.word	0x20000898

0801028c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	7139      	strb	r1, [r7, #4]
 8010296:	71fb      	strb	r3, [r7, #7]
 8010298:	4613      	mov	r3, r2
 801029a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d002      	beq.n	80102a8 <RemoveMacCommands+0x1c>
 80102a2:	79fb      	ldrb	r3, [r7, #7]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d10d      	bne.n	80102c4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80102a8:	79bb      	ldrb	r3, [r7, #6]
 80102aa:	2b01      	cmp	r3, #1
 80102ac:	d108      	bne.n	80102c0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80102ae:	793b      	ldrb	r3, [r7, #4]
 80102b0:	f003 0320 	and.w	r3, r3, #32
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d004      	beq.n	80102c4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80102ba:	f002 fbff 	bl	8012abc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80102be:	e001      	b.n	80102c4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80102c0:	f002 fbfc 	bl	8012abc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80102c4:	bf00      	nop
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80102cc:	b5b0      	push	{r4, r5, r7, lr}
 80102ce:	b08e      	sub	sp, #56	; 0x38
 80102d0:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80102d2:	4b68      	ldr	r3, [pc, #416]	; (8010474 <ResetMacParameters+0x1a8>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80102da:	4b66      	ldr	r3, [pc, #408]	; (8010474 <ResetMacParameters+0x1a8>)
 80102dc:	2200      	movs	r2, #0
 80102de:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80102e0:	4b65      	ldr	r3, [pc, #404]	; (8010478 <ResetMacParameters+0x1ac>)
 80102e2:	2200      	movs	r2, #0
 80102e4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80102e8:	4b63      	ldr	r3, [pc, #396]	; (8010478 <ResetMacParameters+0x1ac>)
 80102ea:	2201      	movs	r2, #1
 80102ec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 80102f0:	4b61      	ldr	r3, [pc, #388]	; (8010478 <ResetMacParameters+0x1ac>)
 80102f2:	2201      	movs	r2, #1
 80102f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 80102f8:	4b5f      	ldr	r3, [pc, #380]	; (8010478 <ResetMacParameters+0x1ac>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010300:	4b5c      	ldr	r3, [pc, #368]	; (8010474 <ResetMacParameters+0x1a8>)
 8010302:	2200      	movs	r2, #0
 8010304:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010308:	4b5a      	ldr	r3, [pc, #360]	; (8010474 <ResetMacParameters+0x1a8>)
 801030a:	2201      	movs	r2, #1
 801030c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010310:	4b58      	ldr	r3, [pc, #352]	; (8010474 <ResetMacParameters+0x1a8>)
 8010312:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8010316:	4b57      	ldr	r3, [pc, #348]	; (8010474 <ResetMacParameters+0x1a8>)
 8010318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801031c:	4b55      	ldr	r3, [pc, #340]	; (8010474 <ResetMacParameters+0x1a8>)
 801031e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8010322:	4b54      	ldr	r3, [pc, #336]	; (8010474 <ResetMacParameters+0x1a8>)
 8010324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010328:	4b52      	ldr	r3, [pc, #328]	; (8010474 <ResetMacParameters+0x1a8>)
 801032a:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 801032e:	4b51      	ldr	r3, [pc, #324]	; (8010474 <ResetMacParameters+0x1a8>)
 8010330:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010334:	4b4f      	ldr	r3, [pc, #316]	; (8010474 <ResetMacParameters+0x1a8>)
 8010336:	4a4f      	ldr	r2, [pc, #316]	; (8010474 <ResetMacParameters+0x1a8>)
 8010338:	3364      	adds	r3, #100	; 0x64
 801033a:	32a8      	adds	r2, #168	; 0xa8
 801033c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010340:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010344:	4b4b      	ldr	r3, [pc, #300]	; (8010474 <ResetMacParameters+0x1a8>)
 8010346:	4a4b      	ldr	r2, [pc, #300]	; (8010474 <ResetMacParameters+0x1a8>)
 8010348:	336c      	adds	r3, #108	; 0x6c
 801034a:	32b0      	adds	r2, #176	; 0xb0
 801034c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010350:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010354:	4b47      	ldr	r3, [pc, #284]	; (8010474 <ResetMacParameters+0x1a8>)
 8010356:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 801035a:	4b46      	ldr	r3, [pc, #280]	; (8010474 <ResetMacParameters+0x1a8>)
 801035c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010360:	4b44      	ldr	r3, [pc, #272]	; (8010474 <ResetMacParameters+0x1a8>)
 8010362:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8010366:	4b43      	ldr	r3, [pc, #268]	; (8010474 <ResetMacParameters+0x1a8>)
 8010368:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801036c:	4b41      	ldr	r3, [pc, #260]	; (8010474 <ResetMacParameters+0x1a8>)
 801036e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010372:	4a40      	ldr	r2, [pc, #256]	; (8010474 <ResetMacParameters+0x1a8>)
 8010374:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010376:	4b3f      	ldr	r3, [pc, #252]	; (8010474 <ResetMacParameters+0x1a8>)
 8010378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801037c:	4a3d      	ldr	r2, [pc, #244]	; (8010474 <ResetMacParameters+0x1a8>)
 801037e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8010380:	4b3d      	ldr	r3, [pc, #244]	; (8010478 <ResetMacParameters+0x1ac>)
 8010382:	2200      	movs	r2, #0
 8010384:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8010388:	4b3a      	ldr	r3, [pc, #232]	; (8010474 <ResetMacParameters+0x1a8>)
 801038a:	2200      	movs	r2, #0
 801038c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010390:	2301      	movs	r3, #1
 8010392:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010394:	4b39      	ldr	r3, [pc, #228]	; (801047c <ResetMacParameters+0x1b0>)
 8010396:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010398:	4b39      	ldr	r3, [pc, #228]	; (8010480 <ResetMacParameters+0x1b4>)
 801039a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801039c:	4b35      	ldr	r3, [pc, #212]	; (8010474 <ResetMacParameters+0x1a8>)
 801039e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103a2:	1d3a      	adds	r2, r7, #4
 80103a4:	4611      	mov	r1, r2
 80103a6:	4618      	mov	r0, r3
 80103a8:	f004 f8c1 	bl	801452e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80103ac:	4b32      	ldr	r3, [pc, #200]	; (8010478 <ResetMacParameters+0x1ac>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80103b4:	4b30      	ldr	r3, [pc, #192]	; (8010478 <ResetMacParameters+0x1ac>)
 80103b6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80103ba:	4b2f      	ldr	r3, [pc, #188]	; (8010478 <ResetMacParameters+0x1ac>)
 80103bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80103c0:	4b2c      	ldr	r3, [pc, #176]	; (8010474 <ResetMacParameters+0x1a8>)
 80103c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103c4:	4a2c      	ldr	r2, [pc, #176]	; (8010478 <ResetMacParameters+0x1ac>)
 80103c6:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80103ca:	4b2a      	ldr	r3, [pc, #168]	; (8010474 <ResetMacParameters+0x1a8>)
 80103cc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80103d0:	4b29      	ldr	r3, [pc, #164]	; (8010478 <ResetMacParameters+0x1ac>)
 80103d2:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80103d6:	4b27      	ldr	r3, [pc, #156]	; (8010474 <ResetMacParameters+0x1a8>)
 80103d8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80103dc:	4b26      	ldr	r3, [pc, #152]	; (8010478 <ResetMacParameters+0x1ac>)
 80103de:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80103e2:	4b25      	ldr	r3, [pc, #148]	; (8010478 <ResetMacParameters+0x1ac>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80103ea:	4b23      	ldr	r3, [pc, #140]	; (8010478 <ResetMacParameters+0x1ac>)
 80103ec:	2201      	movs	r2, #1
 80103ee:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80103f2:	4a21      	ldr	r2, [pc, #132]	; (8010478 <ResetMacParameters+0x1ac>)
 80103f4:	4b20      	ldr	r3, [pc, #128]	; (8010478 <ResetMacParameters+0x1ac>)
 80103f6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80103fa:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80103fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010402:	682b      	ldr	r3, [r5, #0]
 8010404:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010406:	4b1c      	ldr	r3, [pc, #112]	; (8010478 <ResetMacParameters+0x1ac>)
 8010408:	2201      	movs	r2, #1
 801040a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801040e:	4b1a      	ldr	r3, [pc, #104]	; (8010478 <ResetMacParameters+0x1ac>)
 8010410:	2202      	movs	r2, #2
 8010412:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 801041a:	2300      	movs	r3, #0
 801041c:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 801041e:	4b16      	ldr	r3, [pc, #88]	; (8010478 <ResetMacParameters+0x1ac>)
 8010420:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010424:	2b00      	cmp	r3, #0
 8010426:	d009      	beq.n	801043c <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010428:	4b13      	ldr	r3, [pc, #76]	; (8010478 <ResetMacParameters+0x1ac>)
 801042a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010432:	4b11      	ldr	r3, [pc, #68]	; (8010478 <ResetMacParameters+0x1ac>)
 8010434:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010438:	691b      	ldr	r3, [r3, #16]
 801043a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801043c:	4b11      	ldr	r3, [pc, #68]	; (8010484 <ResetMacParameters+0x1b8>)
 801043e:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010440:	4b11      	ldr	r3, [pc, #68]	; (8010488 <ResetMacParameters+0x1bc>)
 8010442:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010444:	4b11      	ldr	r3, [pc, #68]	; (801048c <ResetMacParameters+0x1c0>)
 8010446:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010448:	4b11      	ldr	r3, [pc, #68]	; (8010490 <ResetMacParameters+0x1c4>)
 801044a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801044c:	4b11      	ldr	r3, [pc, #68]	; (8010494 <ResetMacParameters+0x1c8>)
 801044e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010450:	4b11      	ldr	r3, [pc, #68]	; (8010498 <ResetMacParameters+0x1cc>)
 8010452:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010454:	4b11      	ldr	r3, [pc, #68]	; (801049c <ResetMacParameters+0x1d0>)
 8010456:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010458:	4b11      	ldr	r3, [pc, #68]	; (80104a0 <ResetMacParameters+0x1d4>)
 801045a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801045c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010460:	f107 0310 	add.w	r3, r7, #16
 8010464:	4a0f      	ldr	r2, [pc, #60]	; (80104a4 <ResetMacParameters+0x1d8>)
 8010466:	4618      	mov	r0, r3
 8010468:	f002 f88a 	bl	8012580 <LoRaMacClassBInit>
}
 801046c:	bf00      	nop
 801046e:	3738      	adds	r7, #56	; 0x38
 8010470:	46bd      	mov	sp, r7
 8010472:	bdb0      	pop	{r4, r5, r7, pc}
 8010474:	20000da4 	.word	0x20000da4
 8010478:	20000898 	.word	0x20000898
 801047c:	20000f84 	.word	0x20000f84
 8010480:	20001018 	.word	0x20001018
 8010484:	20000cf8 	.word	0x20000cf8
 8010488:	20000cb4 	.word	0x20000cb4
 801048c:	20000ce4 	.word	0x20000ce4
 8010490:	20000d1d 	.word	0x20000d1d
 8010494:	20000e78 	.word	0x20000e78
 8010498:	20000de4 	.word	0x20000de4
 801049c:	20000de8 	.word	0x20000de8
 80104a0:	20000e7c 	.word	0x20000e7c
 80104a4:	200014b4 	.word	0x200014b4

080104a8 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f00a fc70 	bl	801ad98 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80104b8:	4b11      	ldr	r3, [pc, #68]	; (8010500 <RxWindowSetup+0x58>)
 80104ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104bc:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80104be:	4b11      	ldr	r3, [pc, #68]	; (8010504 <RxWindowSetup+0x5c>)
 80104c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104c4:	4a10      	ldr	r2, [pc, #64]	; (8010508 <RxWindowSetup+0x60>)
 80104c6:	6839      	ldr	r1, [r7, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f004 f898 	bl	80145fe <RegionRxConfig>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d010      	beq.n	80104f6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80104d4:	4b0d      	ldr	r3, [pc, #52]	; (801050c <RxWindowSetup+0x64>)
 80104d6:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 80104da:	4b0c      	ldr	r3, [pc, #48]	; (801050c <RxWindowSetup+0x64>)
 80104dc:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80104e0:	4b07      	ldr	r3, [pc, #28]	; (8010500 <RxWindowSetup+0x58>)
 80104e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104e4:	4a07      	ldr	r2, [pc, #28]	; (8010504 <RxWindowSetup+0x5c>)
 80104e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80104e8:	4610      	mov	r0, r2
 80104ea:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	7cda      	ldrb	r2, [r3, #19]
 80104f0:	4b06      	ldr	r3, [pc, #24]	; (801050c <RxWindowSetup+0x64>)
 80104f2:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 80104f6:	bf00      	nop
 80104f8:	3708      	adds	r7, #8
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	0801c168 	.word	0x0801c168
 8010504:	20000da4 	.word	0x20000da4
 8010508:	20000cb8 	.word	0x20000cb8
 801050c:	20000898 	.word	0x20000898

08010510 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010510:	b590      	push	{r4, r7, lr}
 8010512:	b083      	sub	sp, #12
 8010514:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010516:	4b1b      	ldr	r3, [pc, #108]	; (8010584 <OpenContinuousRxCWindow+0x74>)
 8010518:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801051c:	4b19      	ldr	r3, [pc, #100]	; (8010584 <OpenContinuousRxCWindow+0x74>)
 801051e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010522:	b259      	sxtb	r1, r3
 8010524:	4b17      	ldr	r3, [pc, #92]	; (8010584 <OpenContinuousRxCWindow+0x74>)
 8010526:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801052a:	4b16      	ldr	r3, [pc, #88]	; (8010584 <OpenContinuousRxCWindow+0x74>)
 801052c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801052e:	4c16      	ldr	r4, [pc, #88]	; (8010588 <OpenContinuousRxCWindow+0x78>)
 8010530:	9400      	str	r4, [sp, #0]
 8010532:	f004 f84a 	bl	80145ca <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010536:	4b15      	ldr	r3, [pc, #84]	; (801058c <OpenContinuousRxCWindow+0x7c>)
 8010538:	2202      	movs	r2, #2
 801053a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801053e:	4b13      	ldr	r3, [pc, #76]	; (801058c <OpenContinuousRxCWindow+0x7c>)
 8010540:	2201      	movs	r2, #1
 8010542:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010546:	4b0f      	ldr	r3, [pc, #60]	; (8010584 <OpenContinuousRxCWindow+0x74>)
 8010548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801054c:	4a10      	ldr	r2, [pc, #64]	; (8010590 <OpenContinuousRxCWindow+0x80>)
 801054e:	490e      	ldr	r1, [pc, #56]	; (8010588 <OpenContinuousRxCWindow+0x78>)
 8010550:	4618      	mov	r0, r3
 8010552:	f004 f854 	bl	80145fe <RegionRxConfig>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00f      	beq.n	801057c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801055c:	4b0b      	ldr	r3, [pc, #44]	; (801058c <OpenContinuousRxCWindow+0x7c>)
 801055e:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8010562:	4b0a      	ldr	r3, [pc, #40]	; (801058c <OpenContinuousRxCWindow+0x7c>)
 8010564:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8010568:	4b0a      	ldr	r3, [pc, #40]	; (8010594 <OpenContinuousRxCWindow+0x84>)
 801056a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801056c:	2000      	movs	r0, #0
 801056e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010570:	4b06      	ldr	r3, [pc, #24]	; (801058c <OpenContinuousRxCWindow+0x7c>)
 8010572:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8010576:	4b05      	ldr	r3, [pc, #20]	; (801058c <OpenContinuousRxCWindow+0x7c>)
 8010578:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 801057c:	bf00      	nop
 801057e:	3704      	adds	r7, #4
 8010580:	46bd      	mov	sp, r7
 8010582:	bd90      	pop	{r4, r7, pc}
 8010584:	20000da4 	.word	0x20000da4
 8010588:	20000c78 	.word	0x20000c78
 801058c:	20000898 	.word	0x20000898
 8010590:	20000cb8 	.word	0x20000cb8
 8010594:	0801c168 	.word	0x0801c168

08010598 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	603b      	str	r3, [r7, #0]
 80105a4:	4613      	mov	r3, r2
 80105a6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80105a8:	4b82      	ldr	r3, [pc, #520]	; (80107b4 <PrepareFrame+0x21c>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80105ae:	4b81      	ldr	r3, [pc, #516]	; (80107b4 <PrepareFrame+0x21c>)
 80105b0:	2200      	movs	r2, #0
 80105b2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d101      	bne.n	80105cc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80105cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105ce:	461a      	mov	r2, r3
 80105d0:	6839      	ldr	r1, [r7, #0]
 80105d2:	4879      	ldr	r0, [pc, #484]	; (80107b8 <PrepareFrame+0x220>)
 80105d4:	f006 fa95 	bl	8016b02 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80105d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	4b75      	ldr	r3, [pc, #468]	; (80107b4 <PrepareFrame+0x21c>)
 80105de:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	781a      	ldrb	r2, [r3, #0]
 80105e6:	4b73      	ldr	r3, [pc, #460]	; (80107b4 <PrepareFrame+0x21c>)
 80105e8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b07      	cmp	r3, #7
 80105f6:	f000 80b9 	beq.w	801076c <PrepareFrame+0x1d4>
 80105fa:	2b07      	cmp	r3, #7
 80105fc:	f300 80d0 	bgt.w	80107a0 <PrepareFrame+0x208>
 8010600:	2b02      	cmp	r3, #2
 8010602:	d006      	beq.n	8010612 <PrepareFrame+0x7a>
 8010604:	2b04      	cmp	r3, #4
 8010606:	f040 80cb 	bne.w	80107a0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801060a:	4b6a      	ldr	r3, [pc, #424]	; (80107b4 <PrepareFrame+0x21c>)
 801060c:	2201      	movs	r2, #1
 801060e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010612:	4b68      	ldr	r3, [pc, #416]	; (80107b4 <PrepareFrame+0x21c>)
 8010614:	2204      	movs	r2, #4
 8010616:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801061a:	4b66      	ldr	r3, [pc, #408]	; (80107b4 <PrepareFrame+0x21c>)
 801061c:	4a67      	ldr	r2, [pc, #412]	; (80107bc <PrepareFrame+0x224>)
 801061e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010622:	4b64      	ldr	r3, [pc, #400]	; (80107b4 <PrepareFrame+0x21c>)
 8010624:	22ff      	movs	r2, #255	; 0xff
 8010626:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	781a      	ldrb	r2, [r3, #0]
 801062e:	4b61      	ldr	r3, [pc, #388]	; (80107b4 <PrepareFrame+0x21c>)
 8010630:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010634:	4a5f      	ldr	r2, [pc, #380]	; (80107b4 <PrepareFrame+0x21c>)
 8010636:	79fb      	ldrb	r3, [r7, #7]
 8010638:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801063c:	4b60      	ldr	r3, [pc, #384]	; (80107c0 <PrepareFrame+0x228>)
 801063e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010642:	4a5c      	ldr	r2, [pc, #368]	; (80107b4 <PrepareFrame+0x21c>)
 8010644:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	781a      	ldrb	r2, [r3, #0]
 801064c:	4b59      	ldr	r3, [pc, #356]	; (80107b4 <PrepareFrame+0x21c>)
 801064e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010652:	4b58      	ldr	r3, [pc, #352]	; (80107b4 <PrepareFrame+0x21c>)
 8010654:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010658:	4b56      	ldr	r3, [pc, #344]	; (80107b4 <PrepareFrame+0x21c>)
 801065a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801065e:	4b55      	ldr	r3, [pc, #340]	; (80107b4 <PrepareFrame+0x21c>)
 8010660:	4a55      	ldr	r2, [pc, #340]	; (80107b8 <PrepareFrame+0x220>)
 8010662:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010666:	f107 0318 	add.w	r3, r7, #24
 801066a:	4618      	mov	r0, r3
 801066c:	f003 f890 	bl	8013790 <LoRaMacCryptoGetFCntUp>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010676:	2312      	movs	r3, #18
 8010678:	e098      	b.n	80107ac <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	b29a      	uxth	r2, r3
 801067e:	4b4d      	ldr	r3, [pc, #308]	; (80107b4 <PrepareFrame+0x21c>)
 8010680:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8010684:	4b4b      	ldr	r3, [pc, #300]	; (80107b4 <PrepareFrame+0x21c>)
 8010686:	2200      	movs	r2, #0
 8010688:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801068c:	4b49      	ldr	r3, [pc, #292]	; (80107b4 <PrepareFrame+0x21c>)
 801068e:	2200      	movs	r2, #0
 8010690:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	4a47      	ldr	r2, [pc, #284]	; (80107b4 <PrepareFrame+0x21c>)
 8010698:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801069c:	f107 0314 	add.w	r3, r7, #20
 80106a0:	4618      	mov	r0, r3
 80106a2:	f002 fa2d 	bl	8012b00 <LoRaMacCommandsGetSizeSerializedCmds>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d001      	beq.n	80106b0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106ac:	2313      	movs	r3, #19
 80106ae:	e07d      	b.n	80107ac <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d076      	beq.n	80107a4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80106b6:	4b42      	ldr	r3, [pc, #264]	; (80107c0 <PrepareFrame+0x228>)
 80106b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fe fdb5 	bl	800f22c <GetMaxAppPayloadWithoutFOptsLength>
 80106c2:	4603      	mov	r3, r0
 80106c4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80106c6:	4b3b      	ldr	r3, [pc, #236]	; (80107b4 <PrepareFrame+0x21c>)
 80106c8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01d      	beq.n	801070c <PrepareFrame+0x174>
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	2b0f      	cmp	r3, #15
 80106d4:	d81a      	bhi.n	801070c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80106d6:	f107 0314 	add.w	r3, r7, #20
 80106da:	4a3a      	ldr	r2, [pc, #232]	; (80107c4 <PrepareFrame+0x22c>)
 80106dc:	4619      	mov	r1, r3
 80106de:	200f      	movs	r0, #15
 80106e0:	f002 fa24 	bl	8012b2c <LoRaMacCommandsSerializeCmds>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106ea:	2313      	movs	r3, #19
 80106ec:	e05e      	b.n	80107ac <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	f003 030f 	and.w	r3, r3, #15
 80106f4:	b2d9      	uxtb	r1, r3
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	7813      	ldrb	r3, [r2, #0]
 80106fa:	f361 0303 	bfi	r3, r1, #0, #4
 80106fe:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	781a      	ldrb	r2, [r3, #0]
 8010704:	4b2b      	ldr	r3, [pc, #172]	; (80107b4 <PrepareFrame+0x21c>)
 8010706:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801070a:	e04b      	b.n	80107a4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801070c:	4b29      	ldr	r3, [pc, #164]	; (80107b4 <PrepareFrame+0x21c>)
 801070e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010712:	2b00      	cmp	r3, #0
 8010714:	d010      	beq.n	8010738 <PrepareFrame+0x1a0>
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	2b0f      	cmp	r3, #15
 801071a:	d90d      	bls.n	8010738 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801071c:	7ffb      	ldrb	r3, [r7, #31]
 801071e:	f107 0114 	add.w	r1, r7, #20
 8010722:	4a29      	ldr	r2, [pc, #164]	; (80107c8 <PrepareFrame+0x230>)
 8010724:	4618      	mov	r0, r3
 8010726:	f002 fa01 	bl	8012b2c <LoRaMacCommandsSerializeCmds>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010730:	2313      	movs	r3, #19
 8010732:	e03b      	b.n	80107ac <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010734:	230a      	movs	r3, #10
 8010736:	e039      	b.n	80107ac <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010738:	7ffb      	ldrb	r3, [r7, #31]
 801073a:	f107 0114 	add.w	r1, r7, #20
 801073e:	4a22      	ldr	r2, [pc, #136]	; (80107c8 <PrepareFrame+0x230>)
 8010740:	4618      	mov	r0, r3
 8010742:	f002 f9f3 	bl	8012b2c <LoRaMacCommandsSerializeCmds>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d001      	beq.n	8010750 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801074c:	2313      	movs	r3, #19
 801074e:	e02d      	b.n	80107ac <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010750:	4b18      	ldr	r3, [pc, #96]	; (80107b4 <PrepareFrame+0x21c>)
 8010752:	2200      	movs	r2, #0
 8010754:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010758:	4b16      	ldr	r3, [pc, #88]	; (80107b4 <PrepareFrame+0x21c>)
 801075a:	4a1b      	ldr	r2, [pc, #108]	; (80107c8 <PrepareFrame+0x230>)
 801075c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	b2da      	uxtb	r2, r3
 8010764:	4b13      	ldr	r3, [pc, #76]	; (80107b4 <PrepareFrame+0x21c>)
 8010766:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801076a:	e01b      	b.n	80107a4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d01a      	beq.n	80107a8 <PrepareFrame+0x210>
 8010772:	4b10      	ldr	r3, [pc, #64]	; (80107b4 <PrepareFrame+0x21c>)
 8010774:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010778:	2b00      	cmp	r3, #0
 801077a:	d015      	beq.n	80107a8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801077c:	4813      	ldr	r0, [pc, #76]	; (80107cc <PrepareFrame+0x234>)
 801077e:	4b0d      	ldr	r3, [pc, #52]	; (80107b4 <PrepareFrame+0x21c>)
 8010780:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010784:	b29b      	uxth	r3, r3
 8010786:	461a      	mov	r2, r3
 8010788:	6839      	ldr	r1, [r7, #0]
 801078a:	f006 f9ba 	bl	8016b02 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801078e:	4b09      	ldr	r3, [pc, #36]	; (80107b4 <PrepareFrame+0x21c>)
 8010790:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010794:	b29b      	uxth	r3, r3
 8010796:	3301      	adds	r3, #1
 8010798:	b29a      	uxth	r2, r3
 801079a:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <PrepareFrame+0x21c>)
 801079c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801079e:	e003      	b.n	80107a8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80107a0:	2302      	movs	r3, #2
 80107a2:	e003      	b.n	80107ac <PrepareFrame+0x214>
            break;
 80107a4:	bf00      	nop
 80107a6:	e000      	b.n	80107aa <PrepareFrame+0x212>
            break;
 80107a8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3720      	adds	r7, #32
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	20000898 	.word	0x20000898
 80107b8:	200009d0 	.word	0x200009d0
 80107bc:	2000089a 	.word	0x2000089a
 80107c0:	20000da4 	.word	0x20000da4
 80107c4:	200009b0 	.word	0x200009b0
 80107c8:	20000d24 	.word	0x20000d24
 80107cc:	2000089b 	.word	0x2000089b

080107d0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b08a      	sub	sp, #40	; 0x28
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	4603      	mov	r3, r0
 80107d8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107da:	2303      	movs	r3, #3
 80107dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80107e0:	2300      	movs	r3, #0
 80107e2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80107e4:	79fb      	ldrb	r3, [r7, #7]
 80107e6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107e8:	4b47      	ldr	r3, [pc, #284]	; (8010908 <SendFrameOnChannel+0x138>)
 80107ea:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80107ee:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80107f0:	4b45      	ldr	r3, [pc, #276]	; (8010908 <SendFrameOnChannel+0x138>)
 80107f2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80107f6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80107f8:	4b43      	ldr	r3, [pc, #268]	; (8010908 <SendFrameOnChannel+0x138>)
 80107fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107fc:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80107fe:	4b42      	ldr	r3, [pc, #264]	; (8010908 <SendFrameOnChannel+0x138>)
 8010800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010802:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010804:	4b41      	ldr	r3, [pc, #260]	; (801090c <SendFrameOnChannel+0x13c>)
 8010806:	881b      	ldrh	r3, [r3, #0]
 8010808:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801080a:	4b3f      	ldr	r3, [pc, #252]	; (8010908 <SendFrameOnChannel+0x138>)
 801080c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010810:	f107 020f 	add.w	r2, r7, #15
 8010814:	f107 0110 	add.w	r1, r7, #16
 8010818:	4b3d      	ldr	r3, [pc, #244]	; (8010910 <SendFrameOnChannel+0x140>)
 801081a:	f003 ff05 	bl	8014628 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801081e:	4b3b      	ldr	r3, [pc, #236]	; (801090c <SendFrameOnChannel+0x13c>)
 8010820:	2201      	movs	r2, #1
 8010822:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010826:	4b38      	ldr	r3, [pc, #224]	; (8010908 <SendFrameOnChannel+0x138>)
 8010828:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801082c:	b2da      	uxtb	r2, r3
 801082e:	4b37      	ldr	r3, [pc, #220]	; (801090c <SendFrameOnChannel+0x13c>)
 8010830:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8010834:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010838:	4b34      	ldr	r3, [pc, #208]	; (801090c <SendFrameOnChannel+0x13c>)
 801083a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 801083e:	79fb      	ldrb	r3, [r7, #7]
 8010840:	4a32      	ldr	r2, [pc, #200]	; (801090c <SendFrameOnChannel+0x13c>)
 8010842:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010846:	4b31      	ldr	r3, [pc, #196]	; (801090c <SendFrameOnChannel+0x13c>)
 8010848:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801084c:	4a2f      	ldr	r2, [pc, #188]	; (801090c <SendFrameOnChannel+0x13c>)
 801084e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010852:	4b2e      	ldr	r3, [pc, #184]	; (801090c <SendFrameOnChannel+0x13c>)
 8010854:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010858:	4a2c      	ldr	r2, [pc, #176]	; (801090c <SendFrameOnChannel+0x13c>)
 801085a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801085e:	f001 fefb 	bl	8012658 <LoRaMacClassBIsBeaconModeActive>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00b      	beq.n	8010880 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010868:	4b28      	ldr	r3, [pc, #160]	; (801090c <SendFrameOnChannel+0x13c>)
 801086a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801086e:	4618      	mov	r0, r3
 8010870:	f001 ff5d 	bl	801272e <LoRaMacClassBIsUplinkCollision>
 8010874:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 801087c:	2310      	movs	r3, #16
 801087e:	e03e      	b.n	80108fe <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010880:	4b21      	ldr	r3, [pc, #132]	; (8010908 <SendFrameOnChannel+0x138>)
 8010882:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010886:	2b01      	cmp	r3, #1
 8010888:	d101      	bne.n	801088e <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801088a:	f001 ff5a 	bl	8012742 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801088e:	f001 fef4 	bl	801267a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010892:	4b1d      	ldr	r3, [pc, #116]	; (8010908 <SendFrameOnChannel+0x138>)
 8010894:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010898:	b2db      	uxtb	r3, r3
 801089a:	4a1c      	ldr	r2, [pc, #112]	; (801090c <SendFrameOnChannel+0x13c>)
 801089c:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80108a0:	4611      	mov	r1, r2
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7ff fc7c 	bl	80101a0 <SecureFrame>
 80108a8:	4603      	mov	r3, r0
 80108aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80108ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d002      	beq.n	80108bc <SendFrameOnChannel+0xec>
    {
        return status;
 80108b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108ba:	e020      	b.n	80108fe <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80108bc:	4b13      	ldr	r3, [pc, #76]	; (801090c <SendFrameOnChannel+0x13c>)
 80108be:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80108c2:	f043 0302 	orr.w	r3, r3, #2
 80108c6:	4a11      	ldr	r2, [pc, #68]	; (801090c <SendFrameOnChannel+0x13c>)
 80108c8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80108cc:	4b0f      	ldr	r3, [pc, #60]	; (801090c <SendFrameOnChannel+0x13c>)
 80108ce:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80108d2:	f083 0301 	eor.w	r3, r3, #1
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d007      	beq.n	80108ec <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80108dc:	4b0b      	ldr	r3, [pc, #44]	; (801090c <SendFrameOnChannel+0x13c>)
 80108de:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80108e2:	3301      	adds	r3, #1
 80108e4:	b2da      	uxtb	r2, r3
 80108e6:	4b09      	ldr	r3, [pc, #36]	; (801090c <SendFrameOnChannel+0x13c>)
 80108e8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80108ec:	4b09      	ldr	r3, [pc, #36]	; (8010914 <SendFrameOnChannel+0x144>)
 80108ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f0:	4a06      	ldr	r2, [pc, #24]	; (801090c <SendFrameOnChannel+0x13c>)
 80108f2:	8812      	ldrh	r2, [r2, #0]
 80108f4:	b2d2      	uxtb	r2, r2
 80108f6:	4611      	mov	r1, r2
 80108f8:	4807      	ldr	r0, [pc, #28]	; (8010918 <SendFrameOnChannel+0x148>)
 80108fa:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80108fc:	2300      	movs	r3, #0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3728      	adds	r7, #40	; 0x28
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	20000da4 	.word	0x20000da4
 801090c:	20000898 	.word	0x20000898
 8010910:	20000cb0 	.word	0x20000cb0
 8010914:	0801c168 	.word	0x0801c168
 8010918:	2000089a 	.word	0x2000089a

0801091c <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af00      	add	r7, sp, #0
 8010922:	4603      	mov	r3, r0
 8010924:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010926:	4b15      	ldr	r3, [pc, #84]	; (801097c <SetTxContinuousWave+0x60>)
 8010928:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 801092c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801092e:	4b14      	ldr	r3, [pc, #80]	; (8010980 <SetTxContinuousWave+0x64>)
 8010930:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010934:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010936:	4b12      	ldr	r3, [pc, #72]	; (8010980 <SetTxContinuousWave+0x64>)
 8010938:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801093c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801093e:	4b10      	ldr	r3, [pc, #64]	; (8010980 <SetTxContinuousWave+0x64>)
 8010940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010942:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010944:	4b0e      	ldr	r3, [pc, #56]	; (8010980 <SetTxContinuousWave+0x64>)
 8010946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010948:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801094a:	88fb      	ldrh	r3, [r7, #6]
 801094c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801094e:	4b0c      	ldr	r3, [pc, #48]	; (8010980 <SetTxContinuousWave+0x64>)
 8010950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010954:	f107 0208 	add.w	r2, r7, #8
 8010958:	4611      	mov	r1, r2
 801095a:	4618      	mov	r0, r3
 801095c:	f003 ff13 	bl	8014786 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010960:	4b06      	ldr	r3, [pc, #24]	; (801097c <SetTxContinuousWave+0x60>)
 8010962:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010966:	f043 0302 	orr.w	r3, r3, #2
 801096a:	4a04      	ldr	r2, [pc, #16]	; (801097c <SetTxContinuousWave+0x60>)
 801096c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010970:	2300      	movs	r3, #0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3718      	adds	r7, #24
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	20000898 	.word	0x20000898
 8010980:	20000da4 	.word	0x20000da4

08010984 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	4603      	mov	r3, r0
 801098c:	6039      	str	r1, [r7, #0]
 801098e:	80fb      	strh	r3, [r7, #6]
 8010990:	4613      	mov	r3, r2
 8010992:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010994:	4b09      	ldr	r3, [pc, #36]	; (80109bc <SetTxContinuousWave1+0x38>)
 8010996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010998:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801099c:	88fa      	ldrh	r2, [r7, #6]
 801099e:	6838      	ldr	r0, [r7, #0]
 80109a0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80109a2:	4b07      	ldr	r3, [pc, #28]	; (80109c0 <SetTxContinuousWave1+0x3c>)
 80109a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109a8:	f043 0302 	orr.w	r3, r3, #2
 80109ac:	4a04      	ldr	r2, [pc, #16]	; (80109c0 <SetTxContinuousWave1+0x3c>)
 80109ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80109b2:	2300      	movs	r3, #0
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	0801c168 	.word	0x0801c168
 80109c0:	20000898 	.word	0x20000898

080109c4 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 80109ca:	2300      	movs	r3, #0
 80109cc:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80109ce:	4b3e      	ldr	r3, [pc, #248]	; (8010ac8 <RestoreNvmData+0x104>)
 80109d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d001      	beq.n	80109dc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80109d8:	2301      	movs	r3, #1
 80109da:	e071      	b.n	8010ac0 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80109dc:	2124      	movs	r1, #36	; 0x24
 80109de:	483b      	ldr	r0, [pc, #236]	; (8010acc <RestoreNvmData+0x108>)
 80109e0:	f006 f8e4 	bl	8016bac <Crc32>
 80109e4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80109e6:	4b39      	ldr	r3, [pc, #228]	; (8010acc <RestoreNvmData+0x108>)
 80109e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d001      	beq.n	80109f4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109f0:	2317      	movs	r3, #23
 80109f2:	e065      	b.n	8010ac0 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80109f4:	2114      	movs	r1, #20
 80109f6:	4836      	ldr	r0, [pc, #216]	; (8010ad0 <RestoreNvmData+0x10c>)
 80109f8:	f006 f8d8 	bl	8016bac <Crc32>
 80109fc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80109fe:	4b33      	ldr	r3, [pc, #204]	; (8010acc <RestoreNvmData+0x108>)
 8010a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d001      	beq.n	8010a0c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a08:	2317      	movs	r3, #23
 8010a0a:	e059      	b.n	8010ac0 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010a0c:	21dc      	movs	r1, #220	; 0xdc
 8010a0e:	4831      	ldr	r0, [pc, #196]	; (8010ad4 <RestoreNvmData+0x110>)
 8010a10:	f006 f8cc 	bl	8016bac <Crc32>
 8010a14:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010a16:	4b2d      	ldr	r3, [pc, #180]	; (8010acc <RestoreNvmData+0x108>)
 8010a18:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d001      	beq.n	8010a26 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a22:	2317      	movs	r3, #23
 8010a24:	e04c      	b.n	8010ac0 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010a26:	21bc      	movs	r1, #188	; 0xbc
 8010a28:	482b      	ldr	r0, [pc, #172]	; (8010ad8 <RestoreNvmData+0x114>)
 8010a2a:	f006 f8bf 	bl	8016bac <Crc32>
 8010a2e:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8010a30:	4b26      	ldr	r3, [pc, #152]	; (8010acc <RestoreNvmData+0x108>)
 8010a32:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d001      	beq.n	8010a40 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a3c:	2317      	movs	r3, #23
 8010a3e:	e03f      	b.n	8010ac0 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8010a40:	2190      	movs	r1, #144	; 0x90
 8010a42:	4826      	ldr	r0, [pc, #152]	; (8010adc <RestoreNvmData+0x118>)
 8010a44:	f006 f8b2 	bl	8016bac <Crc32>
 8010a48:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010a4a:	4b20      	ldr	r3, [pc, #128]	; (8010acc <RestoreNvmData+0x108>)
 8010a4c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d001      	beq.n	8010a5a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a56:	2317      	movs	r3, #23
 8010a58:	e032      	b.n	8010ac0 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010a5a:	2114      	movs	r1, #20
 8010a5c:	4820      	ldr	r0, [pc, #128]	; (8010ae0 <RestoreNvmData+0x11c>)
 8010a5e:	f006 f8a5 	bl	8016bac <Crc32>
 8010a62:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010a64:	4b19      	ldr	r3, [pc, #100]	; (8010acc <RestoreNvmData+0x108>)
 8010a66:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d001      	beq.n	8010a74 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a70:	2317      	movs	r3, #23
 8010a72:	e025      	b.n	8010ac0 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010a74:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010a78:	4914      	ldr	r1, [pc, #80]	; (8010acc <RestoreNvmData+0x108>)
 8010a7a:	481a      	ldr	r0, [pc, #104]	; (8010ae4 <RestoreNvmData+0x120>)
 8010a7c:	f006 f841 	bl	8016b02 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010a80:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010a84:	2100      	movs	r1, #0
 8010a86:	4811      	ldr	r0, [pc, #68]	; (8010acc <RestoreNvmData+0x108>)
 8010a88:	f006 f876 	bl	8016b78 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010a8c:	4b0e      	ldr	r3, [pc, #56]	; (8010ac8 <RestoreNvmData+0x104>)
 8010a8e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010a92:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <RestoreNvmData+0x104>)
 8010a94:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010a98:	4b12      	ldr	r3, [pc, #72]	; (8010ae4 <RestoreNvmData+0x120>)
 8010a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a9c:	4a0a      	ldr	r2, [pc, #40]	; (8010ac8 <RestoreNvmData+0x104>)
 8010a9e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010aa2:	4b10      	ldr	r3, [pc, #64]	; (8010ae4 <RestoreNvmData+0x120>)
 8010aa4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010aa8:	4b07      	ldr	r3, [pc, #28]	; (8010ac8 <RestoreNvmData+0x104>)
 8010aaa:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010aae:	4b06      	ldr	r3, [pc, #24]	; (8010ac8 <RestoreNvmData+0x104>)
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010ab6:	4b04      	ldr	r3, [pc, #16]	; (8010ac8 <RestoreNvmData+0x104>)
 8010ab8:	2202      	movs	r2, #2
 8010aba:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 8010abe:	2300      	movs	r3, #0
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	20000898 	.word	0x20000898
 8010acc:	200014cc 	.word	0x200014cc
 8010ad0:	200014f4 	.word	0x200014f4
 8010ad4:	2000150c 	.word	0x2000150c
 8010ad8:	200015ec 	.word	0x200015ec
 8010adc:	200016ac 	.word	0x200016ac
 8010ae0:	20001bdc 	.word	0x20001bdc
 8010ae4:	20000da4 	.word	0x20000da4

08010ae8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d002      	beq.n	8010afe <DetermineFrameType+0x16>
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010afe:	2303      	movs	r3, #3
 8010b00:	e03b      	b.n	8010b7a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	7b1b      	ldrb	r3, [r3, #12]
 8010b06:	f003 030f 	and.w	r3, r3, #15
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d008      	beq.n	8010b22 <DetermineFrameType+0x3a>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d003      	beq.n	8010b22 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	701a      	strb	r2, [r3, #0]
 8010b20:	e02a      	b.n	8010b78 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d103      	bne.n	8010b34 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	701a      	strb	r2, [r3, #0]
 8010b32:	e021      	b.n	8010b78 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	7b1b      	ldrb	r3, [r3, #12]
 8010b38:	f003 030f 	and.w	r3, r3, #15
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d108      	bne.n	8010b54 <DetermineFrameType+0x6c>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d103      	bne.n	8010b54 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	2202      	movs	r2, #2
 8010b50:	701a      	strb	r2, [r3, #0]
 8010b52:	e011      	b.n	8010b78 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7b1b      	ldrb	r3, [r3, #12]
 8010b58:	f003 030f 	and.w	r3, r3, #15
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d108      	bne.n	8010b74 <DetermineFrameType+0x8c>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	2203      	movs	r2, #3
 8010b70:	701a      	strb	r2, [r3, #0]
 8010b72:	e001      	b.n	8010b78 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010b74:	2318      	movs	r3, #24
 8010b76:	e000      	b.n	8010b7a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	370c      	adds	r7, #12
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bc80      	pop	{r7}
 8010b82:	4770      	bx	lr

08010b84 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8010b84:	b480      	push	{r7}
 8010b86:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010b88:	4b12      	ldr	r3, [pc, #72]	; (8010bd4 <CheckRetransUnconfirmedUplink+0x50>)
 8010b8a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010b8e:	4b12      	ldr	r3, [pc, #72]	; (8010bd8 <CheckRetransUnconfirmedUplink+0x54>)
 8010b90:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d301      	bcc.n	8010b9c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e016      	b.n	8010bca <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010b9c:	4b0d      	ldr	r3, [pc, #52]	; (8010bd4 <CheckRetransUnconfirmedUplink+0x50>)
 8010b9e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010ba2:	f003 0302 	and.w	r3, r3, #2
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00d      	beq.n	8010bc8 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010bac:	4b0a      	ldr	r3, [pc, #40]	; (8010bd8 <CheckRetransUnconfirmedUplink+0x54>)
 8010bae:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d101      	bne.n	8010bba <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e007      	b.n	8010bca <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010bba:	4b06      	ldr	r3, [pc, #24]	; (8010bd4 <CheckRetransUnconfirmedUplink+0x50>)
 8010bbc:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d101      	bne.n	8010bc8 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e000      	b.n	8010bca <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bc80      	pop	{r7}
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	20000898 	.word	0x20000898
 8010bd8:	20000da4 	.word	0x20000da4

08010bdc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010bdc:	b480      	push	{r7}
 8010bde:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010be0:	4b0e      	ldr	r3, [pc, #56]	; (8010c1c <CheckRetransConfirmedUplink+0x40>)
 8010be2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8010be6:	4b0d      	ldr	r3, [pc, #52]	; (8010c1c <CheckRetransConfirmedUplink+0x40>)
 8010be8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d301      	bcc.n	8010bf4 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	e00f      	b.n	8010c14 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010bf4:	4b09      	ldr	r3, [pc, #36]	; (8010c1c <CheckRetransConfirmedUplink+0x40>)
 8010bf6:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010bfa:	f003 0302 	and.w	r3, r3, #2
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d006      	beq.n	8010c12 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010c04:	4b05      	ldr	r3, [pc, #20]	; (8010c1c <CheckRetransConfirmedUplink+0x40>)
 8010c06:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d001      	beq.n	8010c12 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e000      	b.n	8010c14 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8010c12:	2300      	movs	r3, #0
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bc80      	pop	{r7}
 8010c1a:	4770      	bx	lr
 8010c1c:	20000898 	.word	0x20000898

08010c20 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010c20:	b480      	push	{r7}
 8010c22:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c24:	4b1a      	ldr	r3, [pc, #104]	; (8010c90 <StopRetransmission+0x70>)
 8010c26:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010c2a:	f003 0302 	and.w	r3, r3, #2
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d009      	beq.n	8010c48 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c34:	4b16      	ldr	r3, [pc, #88]	; (8010c90 <StopRetransmission+0x70>)
 8010c36:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00e      	beq.n	8010c5c <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010c3e:	4b14      	ldr	r3, [pc, #80]	; (8010c90 <StopRetransmission+0x70>)
 8010c40:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d009      	beq.n	8010c5c <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010c48:	4b12      	ldr	r3, [pc, #72]	; (8010c94 <StopRetransmission+0x74>)
 8010c4a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d004      	beq.n	8010c5c <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8010c52:	4b10      	ldr	r3, [pc, #64]	; (8010c94 <StopRetransmission+0x74>)
 8010c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c56:	3301      	adds	r3, #1
 8010c58:	4a0e      	ldr	r2, [pc, #56]	; (8010c94 <StopRetransmission+0x74>)
 8010c5a:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010c5c:	4b0c      	ldr	r3, [pc, #48]	; (8010c90 <StopRetransmission+0x70>)
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010c64:	4b0a      	ldr	r3, [pc, #40]	; (8010c90 <StopRetransmission+0x70>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8010c6c:	4b08      	ldr	r3, [pc, #32]	; (8010c90 <StopRetransmission+0x70>)
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c74:	4b06      	ldr	r3, [pc, #24]	; (8010c90 <StopRetransmission+0x70>)
 8010c76:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c7a:	f023 0302 	bic.w	r3, r3, #2
 8010c7e:	4a04      	ldr	r2, [pc, #16]	; (8010c90 <StopRetransmission+0x70>)
 8010c80:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010c84:	2301      	movs	r3, #1
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bc80      	pop	{r7}
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	20000898 	.word	0x20000898
 8010c94:	20000da4 	.word	0x20000da4

08010c98 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010ca2:	4b0b      	ldr	r3, [pc, #44]	; (8010cd0 <CallNvmDataChangeCallback+0x38>)
 8010ca4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d00c      	beq.n	8010cc6 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010cac:	4b08      	ldr	r3, [pc, #32]	; (8010cd0 <CallNvmDataChangeCallback+0x38>)
 8010cae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010cb2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d006      	beq.n	8010cc6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010cb8:	4b05      	ldr	r3, [pc, #20]	; (8010cd0 <CallNvmDataChangeCallback+0x38>)
 8010cba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	88fa      	ldrh	r2, [r7, #6]
 8010cc2:	4610      	mov	r0, r2
 8010cc4:	4798      	blx	r3
    }
}
 8010cc6:	bf00      	nop
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	20000898 	.word	0x20000898

08010cd4 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010cda:	4b1b      	ldr	r3, [pc, #108]	; (8010d48 <AckTimeoutRetriesProcess+0x74>)
 8010cdc:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010ce0:	4b19      	ldr	r3, [pc, #100]	; (8010d48 <AckTimeoutRetriesProcess+0x74>)
 8010ce2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d229      	bcs.n	8010d3e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010cea:	4b17      	ldr	r3, [pc, #92]	; (8010d48 <AckTimeoutRetriesProcess+0x74>)
 8010cec:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	4b14      	ldr	r3, [pc, #80]	; (8010d48 <AckTimeoutRetriesProcess+0x74>)
 8010cf6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010cfa:	4b13      	ldr	r3, [pc, #76]	; (8010d48 <AckTimeoutRetriesProcess+0x74>)
 8010cfc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010d00:	f003 0301 	and.w	r3, r3, #1
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d019      	beq.n	8010d3e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010d0a:	2322      	movs	r3, #34	; 0x22
 8010d0c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010d0e:	4b0f      	ldr	r3, [pc, #60]	; (8010d4c <AckTimeoutRetriesProcess+0x78>)
 8010d10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010d14:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d16:	4b0d      	ldr	r3, [pc, #52]	; (8010d4c <AckTimeoutRetriesProcess+0x78>)
 8010d18:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010d1c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d1e:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <AckTimeoutRetriesProcess+0x78>)
 8010d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d24:	f107 0208 	add.w	r2, r7, #8
 8010d28:	4611      	mov	r1, r2
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f003 fbd6 	bl	80144dc <RegionGetPhyParam>
 8010d30:	4603      	mov	r3, r0
 8010d32:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	b25a      	sxtb	r2, r3
 8010d38:	4b04      	ldr	r3, [pc, #16]	; (8010d4c <AckTimeoutRetriesProcess+0x78>)
 8010d3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010d3e:	bf00      	nop
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop
 8010d48:	20000898 	.word	0x20000898
 8010d4c:	20000da4 	.word	0x20000da4

08010d50 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010d56:	4b14      	ldr	r3, [pc, #80]	; (8010da8 <AckTimeoutRetriesFinalize+0x58>)
 8010d58:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010d5c:	f083 0301 	eor.w	r3, r3, #1
 8010d60:	b2db      	uxtb	r3, r3
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d015      	beq.n	8010d92 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010d66:	2302      	movs	r3, #2
 8010d68:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010d6a:	4b10      	ldr	r3, [pc, #64]	; (8010dac <AckTimeoutRetriesFinalize+0x5c>)
 8010d6c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010d6e:	4b10      	ldr	r3, [pc, #64]	; (8010db0 <AckTimeoutRetriesFinalize+0x60>)
 8010d70:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010d72:	4b10      	ldr	r3, [pc, #64]	; (8010db4 <AckTimeoutRetriesFinalize+0x64>)
 8010d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d78:	1d3a      	adds	r2, r7, #4
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f003 fbd6 	bl	801452e <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010d82:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <AckTimeoutRetriesFinalize+0x58>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010d8a:	4b07      	ldr	r3, [pc, #28]	; (8010da8 <AckTimeoutRetriesFinalize+0x58>)
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010d92:	4b05      	ldr	r3, [pc, #20]	; (8010da8 <AckTimeoutRetriesFinalize+0x58>)
 8010d94:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010d98:	4b03      	ldr	r3, [pc, #12]	; (8010da8 <AckTimeoutRetriesFinalize+0x58>)
 8010d9a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010d9e:	bf00      	nop
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	20000898 	.word	0x20000898
 8010dac:	20000f84 	.word	0x20000f84
 8010db0:	20001018 	.word	0x20001018
 8010db4:	20000da4 	.word	0x20000da4

08010db8 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010db8:	b480      	push	{r7}
 8010dba:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010dbc:	4b0b      	ldr	r3, [pc, #44]	; (8010dec <IsRequestPending+0x34>)
 8010dbe:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010dc2:	f003 0304 	and.w	r3, r3, #4
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d107      	bne.n	8010ddc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010dcc:	4b07      	ldr	r3, [pc, #28]	; (8010dec <IsRequestPending+0x34>)
 8010dce:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <IsRequestPending+0x28>
    {
        return 1;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e000      	b.n	8010de2 <IsRequestPending+0x2a>
    }
    return 0;
 8010de0:	2300      	movs	r3, #0
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bc80      	pop	{r7}
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop
 8010dec:	20000898 	.word	0x20000898

08010df0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010df0:	b590      	push	{r4, r7, lr}
 8010df2:	b08f      	sub	sp, #60	; 0x3c
 8010df4:	af02      	add	r7, sp, #8
 8010df6:	6178      	str	r0, [r7, #20]
 8010df8:	6139      	str	r1, [r7, #16]
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <LoRaMacInitialization+0x1a>
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d101      	bne.n	8010e0e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e0a:	2303      	movs	r3, #3
 8010e0c:	e275      	b.n	80112fa <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00b      	beq.n	8010e2e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d007      	beq.n	8010e2e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d003      	beq.n	8010e2e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e2e:	2303      	movs	r3, #3
 8010e30:	e263      	b.n	80112fa <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f003 fb41 	bl	80144bc <RegionIsActive>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	f083 0301 	eor.w	r3, r3, #1
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010e46:	2309      	movs	r3, #9
 8010e48:	e257      	b.n	80112fa <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010e4a:	6978      	ldr	r0, [r7, #20]
 8010e4c:	f001 ffb8 	bl	8012dc0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010e50:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010e54:	2100      	movs	r1, #0
 8010e56:	48c7      	ldr	r0, [pc, #796]	; (8011174 <LoRaMacInitialization+0x384>)
 8010e58:	f005 fe8e 	bl	8016b78 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010e5c:	f240 520c 	movw	r2, #1292	; 0x50c
 8010e60:	2100      	movs	r1, #0
 8010e62:	48c5      	ldr	r0, [pc, #788]	; (8011178 <LoRaMacInitialization+0x388>)
 8010e64:	f005 fe88 	bl	8016b78 <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010e68:	4bc3      	ldr	r3, [pc, #780]	; (8011178 <LoRaMacInitialization+0x388>)
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010e70:	4bc1      	ldr	r3, [pc, #772]	; (8011178 <LoRaMacInitialization+0x388>)
 8010e72:	2201      	movs	r2, #1
 8010e74:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010e78:	4abe      	ldr	r2, [pc, #760]	; (8011174 <LoRaMacInitialization+0x384>)
 8010e7a:	7bfb      	ldrb	r3, [r7, #15]
 8010e7c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010e80:	4bbc      	ldr	r3, [pc, #752]	; (8011174 <LoRaMacInitialization+0x384>)
 8010e82:	2200      	movs	r2, #0
 8010e84:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010e88:	4bba      	ldr	r3, [pc, #744]	; (8011174 <LoRaMacInitialization+0x384>)
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010e90:	4bb8      	ldr	r3, [pc, #736]	; (8011174 <LoRaMacInitialization+0x384>)
 8010e92:	4aba      	ldr	r2, [pc, #744]	; (801117c <LoRaMacInitialization+0x38c>)
 8010e94:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010e98:	230f      	movs	r3, #15
 8010e9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e9e:	4bb5      	ldr	r3, [pc, #724]	; (8011174 <LoRaMacInitialization+0x384>)
 8010ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ea4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f003 fb16 	bl	80144dc <RegionGetPhyParam>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	bf14      	ite	ne
 8010eba:	2301      	movne	r3, #1
 8010ebc:	2300      	moveq	r3, #0
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	4bac      	ldr	r3, [pc, #688]	; (8011174 <LoRaMacInitialization+0x384>)
 8010ec2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010ec6:	230a      	movs	r3, #10
 8010ec8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ecc:	4ba9      	ldr	r3, [pc, #676]	; (8011174 <LoRaMacInitialization+0x384>)
 8010ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f003 faff 	bl	80144dc <RegionGetPhyParam>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	b25a      	sxtb	r2, r3
 8010ee6:	4ba3      	ldr	r3, [pc, #652]	; (8011174 <LoRaMacInitialization+0x384>)
 8010ee8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010eec:	2306      	movs	r3, #6
 8010eee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ef2:	4ba0      	ldr	r3, [pc, #640]	; (8011174 <LoRaMacInitialization+0x384>)
 8010ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ef8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010efc:	4611      	mov	r1, r2
 8010efe:	4618      	mov	r0, r3
 8010f00:	f003 faec 	bl	80144dc <RegionGetPhyParam>
 8010f04:	4603      	mov	r3, r0
 8010f06:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0a:	b25a      	sxtb	r2, r3
 8010f0c:	4b99      	ldr	r3, [pc, #612]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f0e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010f12:	2310      	movs	r3, #16
 8010f14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f18:	4b96      	ldr	r3, [pc, #600]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010f22:	4611      	mov	r1, r2
 8010f24:	4618      	mov	r0, r3
 8010f26:	f003 fad9 	bl	80144dc <RegionGetPhyParam>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f30:	4a90      	ldr	r2, [pc, #576]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010f36:	2311      	movs	r3, #17
 8010f38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f3c:	4b8d      	ldr	r3, [pc, #564]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010f46:	4611      	mov	r1, r2
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f003 fac7 	bl	80144dc <RegionGetPhyParam>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f54:	4a87      	ldr	r2, [pc, #540]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010f5a:	2312      	movs	r3, #18
 8010f5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f60:	4b84      	ldr	r3, [pc, #528]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010f6a:	4611      	mov	r1, r2
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f003 fab5 	bl	80144dc <RegionGetPhyParam>
 8010f72:	4603      	mov	r3, r0
 8010f74:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	4a7e      	ldr	r2, [pc, #504]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010f7e:	2313      	movs	r3, #19
 8010f80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f84:	4b7b      	ldr	r3, [pc, #492]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010f8e:	4611      	mov	r1, r2
 8010f90:	4618      	mov	r0, r3
 8010f92:	f003 faa3 	bl	80144dc <RegionGetPhyParam>
 8010f96:	4603      	mov	r3, r0
 8010f98:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	4a75      	ldr	r2, [pc, #468]	; (8011174 <LoRaMacInitialization+0x384>)
 8010f9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010fa2:	2314      	movs	r3, #20
 8010fa4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fa8:	4b72      	ldr	r3, [pc, #456]	; (8011174 <LoRaMacInitialization+0x384>)
 8010faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010fb2:	4611      	mov	r1, r2
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f003 fa91 	bl	80144dc <RegionGetPhyParam>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc0:	4a6c      	ldr	r2, [pc, #432]	; (8011174 <LoRaMacInitialization+0x384>)
 8010fc2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010fc6:	2317      	movs	r3, #23
 8010fc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fcc:	4b69      	ldr	r3, [pc, #420]	; (8011174 <LoRaMacInitialization+0x384>)
 8010fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f003 fa7f 	bl	80144dc <RegionGetPhyParam>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe4:	b2da      	uxtb	r2, r3
 8010fe6:	4b63      	ldr	r3, [pc, #396]	; (8011174 <LoRaMacInitialization+0x384>)
 8010fe8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010fec:	2318      	movs	r3, #24
 8010fee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ff2:	4b60      	ldr	r3, [pc, #384]	; (8011174 <LoRaMacInitialization+0x384>)
 8010ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ff8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	4618      	mov	r0, r3
 8011000:	f003 fa6c 	bl	80144dc <RegionGetPhyParam>
 8011004:	4603      	mov	r3, r0
 8011006:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	4a5a      	ldr	r2, [pc, #360]	; (8011174 <LoRaMacInitialization+0x384>)
 801100c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	4a58      	ldr	r2, [pc, #352]	; (8011174 <LoRaMacInitialization+0x384>)
 8011014:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011018:	2319      	movs	r3, #25
 801101a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801101e:	4b55      	ldr	r3, [pc, #340]	; (8011174 <LoRaMacInitialization+0x384>)
 8011020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011024:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011028:	4611      	mov	r1, r2
 801102a:	4618      	mov	r0, r3
 801102c:	f003 fa56 	bl	80144dc <RegionGetPhyParam>
 8011030:	4603      	mov	r3, r0
 8011032:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	b2da      	uxtb	r2, r3
 8011038:	4b4e      	ldr	r3, [pc, #312]	; (8011174 <LoRaMacInitialization+0x384>)
 801103a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	b2da      	uxtb	r2, r3
 8011042:	4b4c      	ldr	r3, [pc, #304]	; (8011174 <LoRaMacInitialization+0x384>)
 8011044:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011048:	231e      	movs	r3, #30
 801104a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801104e:	4b49      	ldr	r3, [pc, #292]	; (8011174 <LoRaMacInitialization+0x384>)
 8011050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011054:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011058:	4611      	mov	r1, r2
 801105a:	4618      	mov	r0, r3
 801105c:	f003 fa3e 	bl	80144dc <RegionGetPhyParam>
 8011060:	4603      	mov	r3, r0
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	b2da      	uxtb	r2, r3
 8011068:	4b42      	ldr	r3, [pc, #264]	; (8011174 <LoRaMacInitialization+0x384>)
 801106a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801106e:	231f      	movs	r3, #31
 8011070:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011074:	4b3f      	ldr	r3, [pc, #252]	; (8011174 <LoRaMacInitialization+0x384>)
 8011076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801107a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801107e:	4611      	mov	r1, r2
 8011080:	4618      	mov	r0, r3
 8011082:	f003 fa2b 	bl	80144dc <RegionGetPhyParam>
 8011086:	4603      	mov	r3, r0
 8011088:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108c:	b2da      	uxtb	r2, r3
 801108e:	4b39      	ldr	r3, [pc, #228]	; (8011174 <LoRaMacInitialization+0x384>)
 8011090:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011094:	2320      	movs	r3, #32
 8011096:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801109a:	4b36      	ldr	r3, [pc, #216]	; (8011174 <LoRaMacInitialization+0x384>)
 801109c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80110a4:	4611      	mov	r1, r2
 80110a6:	4618      	mov	r0, r3
 80110a8:	f003 fa18 	bl	80144dc <RegionGetPhyParam>
 80110ac:	4603      	mov	r3, r0
 80110ae:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80110b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b2:	4a30      	ldr	r2, [pc, #192]	; (8011174 <LoRaMacInitialization+0x384>)
 80110b4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80110b8:	2321      	movs	r3, #33	; 0x21
 80110ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110be:	4b2d      	ldr	r3, [pc, #180]	; (8011174 <LoRaMacInitialization+0x384>)
 80110c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80110c8:	4611      	mov	r1, r2
 80110ca:	4618      	mov	r0, r3
 80110cc:	f003 fa06 	bl	80144dc <RegionGetPhyParam>
 80110d0:	4603      	mov	r3, r0
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	4a27      	ldr	r2, [pc, #156]	; (8011174 <LoRaMacInitialization+0x384>)
 80110d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80110dc:	230b      	movs	r3, #11
 80110de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110e2:	4b24      	ldr	r3, [pc, #144]	; (8011174 <LoRaMacInitialization+0x384>)
 80110e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80110ec:	4611      	mov	r1, r2
 80110ee:	4618      	mov	r0, r3
 80110f0:	f003 f9f4 	bl	80144dc <RegionGetPhyParam>
 80110f4:	4603      	mov	r3, r0
 80110f6:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	4b1e      	ldr	r3, [pc, #120]	; (8011178 <LoRaMacInitialization+0x388>)
 80110fe:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011102:	230c      	movs	r3, #12
 8011104:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011108:	4b1a      	ldr	r3, [pc, #104]	; (8011174 <LoRaMacInitialization+0x384>)
 801110a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801110e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011112:	4611      	mov	r1, r2
 8011114:	4618      	mov	r0, r3
 8011116:	f003 f9e1 	bl	80144dc <RegionGetPhyParam>
 801111a:	4603      	mov	r3, r0
 801111c:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 801111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011120:	b29a      	uxth	r2, r3
 8011122:	4b15      	ldr	r3, [pc, #84]	; (8011178 <LoRaMacInitialization+0x388>)
 8011124:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011128:	4b12      	ldr	r3, [pc, #72]	; (8011174 <LoRaMacInitialization+0x384>)
 801112a:	2201      	movs	r2, #1
 801112c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011130:	4b10      	ldr	r3, [pc, #64]	; (8011174 <LoRaMacInitialization+0x384>)
 8011132:	220a      	movs	r2, #10
 8011134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011138:	4b0e      	ldr	r3, [pc, #56]	; (8011174 <LoRaMacInitialization+0x384>)
 801113a:	2206      	movs	r2, #6
 801113c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011140:	4b0c      	ldr	r3, [pc, #48]	; (8011174 <LoRaMacInitialization+0x384>)
 8011142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011146:	4a0b      	ldr	r2, [pc, #44]	; (8011174 <LoRaMacInitialization+0x384>)
 8011148:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801114a:	4b0a      	ldr	r3, [pc, #40]	; (8011174 <LoRaMacInitialization+0x384>)
 801114c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011150:	4b08      	ldr	r3, [pc, #32]	; (8011174 <LoRaMacInitialization+0x384>)
 8011152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011156:	4b07      	ldr	r3, [pc, #28]	; (8011174 <LoRaMacInitialization+0x384>)
 8011158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801115c:	4a05      	ldr	r2, [pc, #20]	; (8011174 <LoRaMacInitialization+0x384>)
 801115e:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011160:	4b04      	ldr	r3, [pc, #16]	; (8011174 <LoRaMacInitialization+0x384>)
 8011162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011166:	4a03      	ldr	r2, [pc, #12]	; (8011174 <LoRaMacInitialization+0x384>)
 8011168:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801116a:	4b02      	ldr	r3, [pc, #8]	; (8011174 <LoRaMacInitialization+0x384>)
 801116c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011170:	e006      	b.n	8011180 <LoRaMacInitialization+0x390>
 8011172:	bf00      	nop
 8011174:	20000da4 	.word	0x20000da4
 8011178:	20000898 	.word	0x20000898
 801117c:	01000300 	.word	0x01000300
 8011180:	4a60      	ldr	r2, [pc, #384]	; (8011304 <LoRaMacInitialization+0x514>)
 8011182:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011184:	4b5f      	ldr	r3, [pc, #380]	; (8011304 <LoRaMacInitialization+0x514>)
 8011186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801118a:	4a5e      	ldr	r2, [pc, #376]	; (8011304 <LoRaMacInitialization+0x514>)
 801118c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801118e:	4b5d      	ldr	r3, [pc, #372]	; (8011304 <LoRaMacInitialization+0x514>)
 8011190:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011194:	4a5b      	ldr	r2, [pc, #364]	; (8011304 <LoRaMacInitialization+0x514>)
 8011196:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011198:	4b5a      	ldr	r3, [pc, #360]	; (8011304 <LoRaMacInitialization+0x514>)
 801119a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 801119e:	4b59      	ldr	r3, [pc, #356]	; (8011304 <LoRaMacInitialization+0x514>)
 80111a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80111a4:	2300      	movs	r3, #0
 80111a6:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80111aa:	4b57      	ldr	r3, [pc, #348]	; (8011308 <LoRaMacInitialization+0x518>)
 80111ac:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80111ae:	4b57      	ldr	r3, [pc, #348]	; (801130c <LoRaMacInitialization+0x51c>)
 80111b0:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80111b2:	4b54      	ldr	r3, [pc, #336]	; (8011304 <LoRaMacInitialization+0x514>)
 80111b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111b8:	f107 0218 	add.w	r2, r7, #24
 80111bc:	4611      	mov	r1, r2
 80111be:	4618      	mov	r0, r3
 80111c0:	f003 f9b5 	bl	801452e <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80111c4:	4a52      	ldr	r2, [pc, #328]	; (8011310 <LoRaMacInitialization+0x520>)
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 80111cc:	f7ff f87e 	bl	80102cc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80111d0:	4b4c      	ldr	r3, [pc, #304]	; (8011304 <LoRaMacInitialization+0x514>)
 80111d2:	2201      	movs	r2, #1
 80111d4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 80111d8:	4a4d      	ldr	r2, [pc, #308]	; (8011310 <LoRaMacInitialization+0x520>)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80111e0:	4b4b      	ldr	r3, [pc, #300]	; (8011310 <LoRaMacInitialization+0x520>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 80111e8:	4b49      	ldr	r3, [pc, #292]	; (8011310 <LoRaMacInitialization+0x520>)
 80111ea:	2201      	movs	r2, #1
 80111ec:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80111f0:	4b44      	ldr	r3, [pc, #272]	; (8011304 <LoRaMacInitialization+0x514>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80111f6:	4b43      	ldr	r3, [pc, #268]	; (8011304 <LoRaMacInitialization+0x514>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80111fc:	2300      	movs	r3, #0
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	4b44      	ldr	r3, [pc, #272]	; (8011314 <LoRaMacInitialization+0x524>)
 8011202:	2200      	movs	r2, #0
 8011204:	f04f 31ff 	mov.w	r1, #4294967295
 8011208:	4843      	ldr	r0, [pc, #268]	; (8011318 <LoRaMacInitialization+0x528>)
 801120a:	f009 fd21 	bl	801ac50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801120e:	2300      	movs	r3, #0
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	4b42      	ldr	r3, [pc, #264]	; (801131c <LoRaMacInitialization+0x52c>)
 8011214:	2200      	movs	r2, #0
 8011216:	f04f 31ff 	mov.w	r1, #4294967295
 801121a:	4841      	ldr	r0, [pc, #260]	; (8011320 <LoRaMacInitialization+0x530>)
 801121c:	f009 fd18 	bl	801ac50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011220:	2300      	movs	r3, #0
 8011222:	9300      	str	r3, [sp, #0]
 8011224:	4b3f      	ldr	r3, [pc, #252]	; (8011324 <LoRaMacInitialization+0x534>)
 8011226:	2200      	movs	r2, #0
 8011228:	f04f 31ff 	mov.w	r1, #4294967295
 801122c:	483e      	ldr	r0, [pc, #248]	; (8011328 <LoRaMacInitialization+0x538>)
 801122e:	f009 fd0f 	bl	801ac50 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011232:	2300      	movs	r3, #0
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	4b3d      	ldr	r3, [pc, #244]	; (801132c <LoRaMacInitialization+0x53c>)
 8011238:	2200      	movs	r2, #0
 801123a:	f04f 31ff 	mov.w	r1, #4294967295
 801123e:	483c      	ldr	r0, [pc, #240]	; (8011330 <LoRaMacInitialization+0x540>)
 8011240:	f009 fd06 	bl	801ac50 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011244:	4c2f      	ldr	r4, [pc, #188]	; (8011304 <LoRaMacInitialization+0x514>)
 8011246:	463b      	mov	r3, r7
 8011248:	4618      	mov	r0, r3
 801124a:	f009 f871 	bl	801a330 <SysTimeGetMcuTime>
 801124e:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8011252:	463a      	mov	r2, r7
 8011254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011258:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801125c:	4b2c      	ldr	r3, [pc, #176]	; (8011310 <LoRaMacInitialization+0x520>)
 801125e:	4a35      	ldr	r2, [pc, #212]	; (8011334 <LoRaMacInitialization+0x544>)
 8011260:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011264:	4b2a      	ldr	r3, [pc, #168]	; (8011310 <LoRaMacInitialization+0x520>)
 8011266:	4a34      	ldr	r2, [pc, #208]	; (8011338 <LoRaMacInitialization+0x548>)
 8011268:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801126c:	4b28      	ldr	r3, [pc, #160]	; (8011310 <LoRaMacInitialization+0x520>)
 801126e:	4a33      	ldr	r2, [pc, #204]	; (801133c <LoRaMacInitialization+0x54c>)
 8011270:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011274:	4b26      	ldr	r3, [pc, #152]	; (8011310 <LoRaMacInitialization+0x520>)
 8011276:	4a32      	ldr	r2, [pc, #200]	; (8011340 <LoRaMacInitialization+0x550>)
 8011278:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801127c:	4b24      	ldr	r3, [pc, #144]	; (8011310 <LoRaMacInitialization+0x520>)
 801127e:	4a31      	ldr	r2, [pc, #196]	; (8011344 <LoRaMacInitialization+0x554>)
 8011280:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011284:	4b30      	ldr	r3, [pc, #192]	; (8011348 <LoRaMacInitialization+0x558>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4830      	ldr	r0, [pc, #192]	; (801134c <LoRaMacInitialization+0x55c>)
 801128a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	689b      	ldr	r3, [r3, #8]
 8011290:	4619      	mov	r1, r3
 8011292:	482f      	ldr	r0, [pc, #188]	; (8011350 <LoRaMacInitialization+0x560>)
 8011294:	f7fa fe20 	bl	800bed8 <SecureElementInit>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d001      	beq.n	80112a2 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801129e:	2311      	movs	r3, #17
 80112a0:	e02b      	b.n	80112fa <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80112a2:	4818      	ldr	r0, [pc, #96]	; (8011304 <LoRaMacInitialization+0x514>)
 80112a4:	f002 fa38 	bl	8013718 <LoRaMacCryptoInit>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d001      	beq.n	80112b2 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80112ae:	2311      	movs	r3, #17
 80112b0:	e023      	b.n	80112fa <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80112b2:	f001 fb57 	bl	8012964 <LoRaMacCommandsInit>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d001      	beq.n	80112c0 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112bc:	2313      	movs	r3, #19
 80112be:	e01c      	b.n	80112fa <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80112c0:	4824      	ldr	r0, [pc, #144]	; (8011354 <LoRaMacInitialization+0x564>)
 80112c2:	f002 faf3 	bl	80138ac <LoRaMacCryptoSetMulticastReference>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d001      	beq.n	80112d0 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80112cc:	2311      	movs	r3, #17
 80112ce:	e014      	b.n	80112fa <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80112d0:	4b1d      	ldr	r3, [pc, #116]	; (8011348 <LoRaMacInitialization+0x558>)
 80112d2:	695b      	ldr	r3, [r3, #20]
 80112d4:	4798      	blx	r3
 80112d6:	4603      	mov	r3, r0
 80112d8:	4618      	mov	r0, r3
 80112da:	f005 fbed 	bl	8016ab8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80112de:	4b1a      	ldr	r3, [pc, #104]	; (8011348 <LoRaMacInitialization+0x558>)
 80112e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112e2:	4a08      	ldr	r2, [pc, #32]	; (8011304 <LoRaMacInitialization+0x514>)
 80112e4:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80112e8:	4610      	mov	r0, r2
 80112ea:	4798      	blx	r3
    Radio.Sleep( );
 80112ec:	4b16      	ldr	r3, [pc, #88]	; (8011348 <LoRaMacInitialization+0x558>)
 80112ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80112f2:	2001      	movs	r0, #1
 80112f4:	f7fd faf2 	bl	800e8dc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3734      	adds	r7, #52	; 0x34
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd90      	pop	{r4, r7, pc}
 8011302:	bf00      	nop
 8011304:	20000da4 	.word	0x20000da4
 8011308:	20000f84 	.word	0x20000f84
 801130c:	20001018 	.word	0x20001018
 8011310:	20000898 	.word	0x20000898
 8011314:	0800ee49 	.word	0x0800ee49
 8011318:	20000c00 	.word	0x20000c00
 801131c:	0800eebd 	.word	0x0800eebd
 8011320:	20000c18 	.word	0x20000c18
 8011324:	0800ef29 	.word	0x0800ef29
 8011328:	20000c30 	.word	0x20000c30
 801132c:	0800ef9d 	.word	0x0800ef9d
 8011330:	20000c90 	.word	0x20000c90
 8011334:	0800da59 	.word	0x0800da59
 8011338:	0800dad1 	.word	0x0800dad1
 801133c:	0800dba9 	.word	0x0800dba9
 8011340:	0800db5d 	.word	0x0800db5d
 8011344:	0800dbe5 	.word	0x0800dbe5
 8011348:	0801c168 	.word	0x0801c168
 801134c:	20000be4 	.word	0x20000be4
 8011350:	20000ec4 	.word	0x20000ec4
 8011354:	20000e7c 	.word	0x20000e7c

08011358 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011358:	b480      	push	{r7}
 801135a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801135c:	4b04      	ldr	r3, [pc, #16]	; (8011370 <LoRaMacStart+0x18>)
 801135e:	2200      	movs	r2, #0
 8011360:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	46bd      	mov	sp, r7
 801136a:	bc80      	pop	{r7}
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	20000898 	.word	0x20000898

08011374 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011378:	f7fd fa9a 	bl	800e8b0 <LoRaMacIsBusy>
 801137c:	4603      	mov	r3, r0
 801137e:	f083 0301 	eor.w	r3, r3, #1
 8011382:	b2db      	uxtb	r3, r3
 8011384:	2b00      	cmp	r3, #0
 8011386:	d005      	beq.n	8011394 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8011388:	4b07      	ldr	r3, [pc, #28]	; (80113a8 <LoRaMacStop+0x34>)
 801138a:	2201      	movs	r2, #1
 801138c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011390:	2300      	movs	r3, #0
 8011392:	e007      	b.n	80113a4 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011394:	4b04      	ldr	r3, [pc, #16]	; (80113a8 <LoRaMacStop+0x34>)
 8011396:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801139a:	2b01      	cmp	r3, #1
 801139c:	d101      	bne.n	80113a2 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 801139e:	2300      	movs	r3, #0
 80113a0:	e000      	b.n	80113a4 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80113a2:	2301      	movs	r3, #1
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	20000898 	.word	0x20000898

080113ac <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80113b0:	4812      	ldr	r0, [pc, #72]	; (80113fc <LoRaMacHalt+0x50>)
 80113b2:	f009 fcf1 	bl	801ad98 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80113b6:	4812      	ldr	r0, [pc, #72]	; (8011400 <LoRaMacHalt+0x54>)
 80113b8:	f009 fcee 	bl	801ad98 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80113bc:	4811      	ldr	r0, [pc, #68]	; (8011404 <LoRaMacHalt+0x58>)
 80113be:	f009 fceb 	bl	801ad98 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80113c2:	4811      	ldr	r0, [pc, #68]	; (8011408 <LoRaMacHalt+0x5c>)
 80113c4:	f009 fce8 	bl	801ad98 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80113c8:	f001 f957 	bl	801267a <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80113cc:	4b0f      	ldr	r3, [pc, #60]	; (801140c <LoRaMacHalt+0x60>)
 80113ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80113d2:	4b0f      	ldr	r3, [pc, #60]	; (8011410 <LoRaMacHalt+0x64>)
 80113d4:	2200      	movs	r2, #0
 80113d6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80113da:	480e      	ldr	r0, [pc, #56]	; (8011414 <LoRaMacHalt+0x68>)
 80113dc:	f7fd fc2e 	bl	800ec3c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80113e0:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80113e4:	490b      	ldr	r1, [pc, #44]	; (8011414 <LoRaMacHalt+0x68>)
 80113e6:	480c      	ldr	r0, [pc, #48]	; (8011418 <LoRaMacHalt+0x6c>)
 80113e8:	f005 fb8b 	bl	8016b02 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80113ec:	4b08      	ldr	r3, [pc, #32]	; (8011410 <LoRaMacHalt+0x64>)
 80113ee:	2201      	movs	r2, #1
 80113f0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80113f4:	2300      	movs	r3, #0
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	20000c00 	.word	0x20000c00
 8011400:	20000c18 	.word	0x20000c18
 8011404:	20000c30 	.word	0x20000c30
 8011408:	20000c90 	.word	0x20000c90
 801140c:	0801c168 	.word	0x0801c168
 8011410:	20000898 	.word	0x20000898
 8011414:	20000da4 	.word	0x20000da4
 8011418:	200014cc 	.word	0x200014cc

0801141c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b08a      	sub	sp, #40	; 0x28
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	6039      	str	r1, [r7, #0]
 8011426:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011428:	4b3e      	ldr	r3, [pc, #248]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 801142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801142e:	4b3d      	ldr	r3, [pc, #244]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 8011430:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8011434:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011436:	4b3b      	ldr	r3, [pc, #236]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 8011438:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 801143c:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801143e:	2300      	movs	r3, #0
 8011440:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d101      	bne.n	801144c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011448:	2303      	movs	r3, #3
 801144a:	e066      	b.n	801151a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801144c:	4b35      	ldr	r3, [pc, #212]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 801144e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8011452:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011454:	2300      	movs	r3, #0
 8011456:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011458:	4b32      	ldr	r3, [pc, #200]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 801145a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801145e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011460:	4b30      	ldr	r3, [pc, #192]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 8011462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011464:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011466:	4b30      	ldr	r3, [pc, #192]	; (8011528 <LoRaMacQueryTxPossible+0x10c>)
 8011468:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 801146c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801146e:	4b2e      	ldr	r3, [pc, #184]	; (8011528 <LoRaMacQueryTxPossible+0x10c>)
 8011470:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8011474:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011476:	4b2b      	ldr	r3, [pc, #172]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 8011478:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801147c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011480:	4b28      	ldr	r3, [pc, #160]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 8011482:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801148a:	4b26      	ldr	r3, [pc, #152]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 801148c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8011494:	4b23      	ldr	r3, [pc, #140]	; (8011524 <LoRaMacQueryTxPossible+0x108>)
 8011496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801149e:	f107 0310 	add.w	r3, r7, #16
 80114a2:	f107 020e 	add.w	r2, r7, #14
 80114a6:	f107 010f 	add.w	r1, r7, #15
 80114aa:	f107 0014 	add.w	r0, r7, #20
 80114ae:	f001 f84f 	bl	8012550 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80114b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fd feb8 	bl	800f22c <GetMaxAppPayloadWithoutFOptsLength>
 80114bc:	4603      	mov	r3, r0
 80114be:	461a      	mov	r2, r3
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80114c4:	f107 0308 	add.w	r3, r7, #8
 80114c8:	4618      	mov	r0, r3
 80114ca:	f001 fb19 	bl	8012b00 <LoRaMacCommandsGetSizeSerializedCmds>
 80114ce:	4603      	mov	r3, r0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d001      	beq.n	80114d8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114d4:	2313      	movs	r3, #19
 80114d6:	e020      	b.n	801151a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	2b0f      	cmp	r3, #15
 80114dc:	d819      	bhi.n	8011512 <LoRaMacQueryTxPossible+0xf6>
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	785b      	ldrb	r3, [r3, #1]
 80114e2:	461a      	mov	r2, r3
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d313      	bcc.n	8011512 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	785a      	ldrb	r2, [r3, #1]
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	1ad3      	subs	r3, r2, r3
 80114f4:	b2da      	uxtb	r2, r3
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	785b      	ldrb	r3, [r3, #1]
 80114fe:	4619      	mov	r1, r3
 8011500:	79fa      	ldrb	r2, [r7, #7]
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	4413      	add	r3, r2
 8011506:	4299      	cmp	r1, r3
 8011508:	d301      	bcc.n	801150e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801150a:	2300      	movs	r3, #0
 801150c:	e005      	b.n	801151a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801150e:	2308      	movs	r3, #8
 8011510:	e003      	b.n	801151a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	2200      	movs	r2, #0
 8011516:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011518:	2308      	movs	r3, #8
    }
}
 801151a:	4618      	mov	r0, r3
 801151c:	3728      	adds	r7, #40	; 0x28
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	20000da4 	.word	0x20000da4
 8011528:	20000898 	.word	0x20000898

0801152c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801152c:	b590      	push	{r4, r7, lr}
 801152e:	b087      	sub	sp, #28
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011534:	2300      	movs	r3, #0
 8011536:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d101      	bne.n	8011542 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801153e:	2303      	movs	r3, #3
 8011540:	e171      	b.n	8011826 <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	2b37      	cmp	r3, #55	; 0x37
 8011548:	f200 8166 	bhi.w	8011818 <LoRaMacMibGetRequestConfirm+0x2ec>
 801154c:	a201      	add	r2, pc, #4	; (adr r2, 8011554 <LoRaMacMibGetRequestConfirm+0x28>)
 801154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011552:	bf00      	nop
 8011554:	08011635 	.word	0x08011635
 8011558:	08011641 	.word	0x08011641
 801155c:	0801164d 	.word	0x0801164d
 8011560:	08011659 	.word	0x08011659
 8011564:	08011665 	.word	0x08011665
 8011568:	08011671 	.word	0x08011671
 801156c:	0801167d 	.word	0x0801167d
 8011570:	08011819 	.word	0x08011819
 8011574:	08011819 	.word	0x08011819
 8011578:	08011819 	.word	0x08011819
 801157c:	08011819 	.word	0x08011819
 8011580:	08011819 	.word	0x08011819
 8011584:	08011819 	.word	0x08011819
 8011588:	08011819 	.word	0x08011819
 801158c:	08011819 	.word	0x08011819
 8011590:	08011689 	.word	0x08011689
 8011594:	08011695 	.word	0x08011695
 8011598:	080116a1 	.word	0x080116a1
 801159c:	080116c3 	.word	0x080116c3
 80115a0:	080116d5 	.word	0x080116d5
 80115a4:	080116e7 	.word	0x080116e7
 80115a8:	080116f9 	.word	0x080116f9
 80115ac:	0801172d 	.word	0x0801172d
 80115b0:	0801170b 	.word	0x0801170b
 80115b4:	0801174f 	.word	0x0801174f
 80115b8:	0801175b 	.word	0x0801175b
 80115bc:	08011765 	.word	0x08011765
 80115c0:	0801176f 	.word	0x0801176f
 80115c4:	08011779 	.word	0x08011779
 80115c8:	08011783 	.word	0x08011783
 80115cc:	0801178d 	.word	0x0801178d
 80115d0:	08011799 	.word	0x08011799
 80115d4:	080117b1 	.word	0x080117b1
 80115d8:	080117a5 	.word	0x080117a5
 80115dc:	080117bd 	.word	0x080117bd
 80115e0:	080117c7 	.word	0x080117c7
 80115e4:	080117d3 	.word	0x080117d3
 80115e8:	080117ed 	.word	0x080117ed
 80115ec:	080117dd 	.word	0x080117dd
 80115f0:	080117e5 	.word	0x080117e5
 80115f4:	08011819 	.word	0x08011819
 80115f8:	080117f9 	.word	0x080117f9
 80115fc:	08011819 	.word	0x08011819
 8011600:	08011819 	.word	0x08011819
 8011604:	08011819 	.word	0x08011819
 8011608:	08011819 	.word	0x08011819
 801160c:	08011819 	.word	0x08011819
 8011610:	08011819 	.word	0x08011819
 8011614:	08011819 	.word	0x08011819
 8011618:	08011819 	.word	0x08011819
 801161c:	08011819 	.word	0x08011819
 8011620:	08011819 	.word	0x08011819
 8011624:	08011819 	.word	0x08011819
 8011628:	08011819 	.word	0x08011819
 801162c:	08011819 	.word	0x08011819
 8011630:	0801180d 	.word	0x0801180d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011634:	4b7e      	ldr	r3, [pc, #504]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011636:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	711a      	strb	r2, [r3, #4]
            break;
 801163e:	e0f1      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011640:	4b7b      	ldr	r3, [pc, #492]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011642:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	711a      	strb	r2, [r3, #4]
            break;
 801164a:	e0eb      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801164c:	f7fa ff30 	bl	800c4b0 <SecureElementGetDevEui>
 8011650:	4602      	mov	r2, r0
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	605a      	str	r2, [r3, #4]
            break;
 8011656:	e0e5      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011658:	f7fa ff4c 	bl	800c4f4 <SecureElementGetJoinEui>
 801165c:	4602      	mov	r2, r0
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	605a      	str	r2, [r3, #4]
            break;
 8011662:	e0df      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011664:	4b72      	ldr	r3, [pc, #456]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011666:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	711a      	strb	r2, [r3, #4]
            break;
 801166e:	e0d9      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011670:	4b6f      	ldr	r3, [pc, #444]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011672:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	605a      	str	r2, [r3, #4]
            break;
 801167a:	e0d3      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 801167c:	4b6c      	ldr	r3, [pc, #432]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 801167e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	605a      	str	r2, [r3, #4]
            break;
 8011686:	e0cd      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011688:	4b69      	ldr	r3, [pc, #420]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 801168a:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	711a      	strb	r2, [r3, #4]
            break;
 8011692:	e0c7      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011694:	4b66      	ldr	r3, [pc, #408]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011696:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	711a      	strb	r2, [r3, #4]
            break;
 801169e:	e0c1      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80116a0:	231d      	movs	r3, #29
 80116a2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116a4:	4b62      	ldr	r3, [pc, #392]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80116a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116aa:	f107 0210 	add.w	r2, r7, #16
 80116ae:	4611      	mov	r1, r2
 80116b0:	4618      	mov	r0, r3
 80116b2:	f002 ff13 	bl	80144dc <RegionGetPhyParam>
 80116b6:	4603      	mov	r3, r0
 80116b8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	605a      	str	r2, [r3, #4]
            break;
 80116c0:	e0b0      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4a5a      	ldr	r2, [pc, #360]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80116c6:	3304      	adds	r3, #4
 80116c8:	3264      	adds	r2, #100	; 0x64
 80116ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116ce:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80116d2:	e0a7      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	4a56      	ldr	r2, [pc, #344]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80116d8:	3304      	adds	r3, #4
 80116da:	32a8      	adds	r2, #168	; 0xa8
 80116dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116e0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80116e4:	e09e      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4a51      	ldr	r2, [pc, #324]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80116ea:	3304      	adds	r3, #4
 80116ec:	326c      	adds	r2, #108	; 0x6c
 80116ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116f2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80116f6:	e095      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4a4d      	ldr	r2, [pc, #308]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80116fc:	3304      	adds	r3, #4
 80116fe:	32b0      	adds	r2, #176	; 0xb0
 8011700:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011704:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011708:	e08c      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801170a:	231b      	movs	r3, #27
 801170c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801170e:	4b48      	ldr	r3, [pc, #288]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011714:	f107 0210 	add.w	r2, r7, #16
 8011718:	4611      	mov	r1, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f002 fede 	bl	80144dc <RegionGetPhyParam>
 8011720:	4603      	mov	r3, r0
 8011722:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	605a      	str	r2, [r3, #4]
            break;
 801172a:	e07b      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801172c:	231a      	movs	r3, #26
 801172e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011730:	4b3f      	ldr	r3, [pc, #252]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011736:	f107 0210 	add.w	r2, r7, #16
 801173a:	4611      	mov	r1, r2
 801173c:	4618      	mov	r0, r3
 801173e:	f002 fecd 	bl	80144dc <RegionGetPhyParam>
 8011742:	4603      	mov	r3, r0
 8011744:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011746:	68fa      	ldr	r2, [r7, #12]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	605a      	str	r2, [r3, #4]
            break;
 801174c:	e06a      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801174e:	4b38      	ldr	r3, [pc, #224]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011750:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	711a      	strb	r2, [r3, #4]
            break;
 8011758:	e064      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801175a:	4b35      	ldr	r3, [pc, #212]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 801175c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	605a      	str	r2, [r3, #4]
            break;
 8011762:	e05f      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011764:	4b32      	ldr	r3, [pc, #200]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	605a      	str	r2, [r3, #4]
            break;
 801176c:	e05a      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801176e:	4b30      	ldr	r3, [pc, #192]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	605a      	str	r2, [r3, #4]
            break;
 8011776:	e055      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011778:	4b2d      	ldr	r3, [pc, #180]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 801177a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	605a      	str	r2, [r3, #4]
            break;
 8011780:	e050      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011782:	4b2b      	ldr	r3, [pc, #172]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 8011784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	605a      	str	r2, [r3, #4]
            break;
 801178a:	e04b      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801178c:	4b28      	ldr	r3, [pc, #160]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 801178e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	711a      	strb	r2, [r3, #4]
            break;
 8011796:	e045      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011798:	4b25      	ldr	r3, [pc, #148]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 801179a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	711a      	strb	r2, [r3, #4]
            break;
 80117a2:	e03f      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80117a4:	4b22      	ldr	r3, [pc, #136]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117a6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	711a      	strb	r2, [r3, #4]
            break;
 80117ae:	e039      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80117b0:	4b1f      	ldr	r3, [pc, #124]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117b2:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	711a      	strb	r2, [r3, #4]
            break;
 80117ba:	e033      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80117bc:	4b1c      	ldr	r3, [pc, #112]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	605a      	str	r2, [r3, #4]
            break;
 80117c4:	e02e      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80117c6:	4b1a      	ldr	r3, [pc, #104]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117c8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	711a      	strb	r2, [r3, #4]
            break;
 80117d0:	e028      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80117d2:	4b17      	ldr	r3, [pc, #92]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	605a      	str	r2, [r3, #4]
            break;
 80117da:	e023      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	4a14      	ldr	r2, [pc, #80]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117e0:	605a      	str	r2, [r3, #4]
            break;
 80117e2:	e01f      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4a13      	ldr	r2, [pc, #76]	; (8011834 <LoRaMacMibGetRequestConfirm+0x308>)
 80117e8:	605a      	str	r2, [r3, #4]
            break;
 80117ea:	e01b      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80117ec:	4b10      	ldr	r3, [pc, #64]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	605a      	str	r2, [r3, #4]
            break;
 80117f6:	e015      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a0d      	ldr	r2, [pc, #52]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 80117fc:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8011800:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011802:	687c      	ldr	r4, [r7, #4]
 8011804:	f002 fff2 	bl	80147ec <RegionGetVersion>
 8011808:	60a0      	str	r0, [r4, #8]
            break;
 801180a:	e00b      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801180c:	4b08      	ldr	r3, [pc, #32]	; (8011830 <LoRaMacMibGetRequestConfirm+0x304>)
 801180e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	605a      	str	r2, [r3, #4]
            break;
 8011816:	e005      	b.n	8011824 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f000 ff45 	bl	80126a8 <LoRaMacClassBMibGetRequestConfirm>
 801181e:	4603      	mov	r3, r0
 8011820:	75fb      	strb	r3, [r7, #23]
            break;
 8011822:	bf00      	nop
        }
    }
    return status;
 8011824:	7dfb      	ldrb	r3, [r7, #23]
}
 8011826:	4618      	mov	r0, r3
 8011828:	371c      	adds	r7, #28
 801182a:	46bd      	mov	sp, r7
 801182c:	bd90      	pop	{r4, r7, pc}
 801182e:	bf00      	nop
 8011830:	20000da4 	.word	0x20000da4
 8011834:	200014cc 	.word	0x200014cc

08011838 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b086      	sub	sp, #24
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011840:	2300      	movs	r3, #0
 8011842:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d101      	bne.n	801184e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801184a:	2303      	movs	r3, #3
 801184c:	e348      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801184e:	4bb7      	ldr	r3, [pc, #732]	; (8011b2c <LoRaMacMibSetRequestConfirm+0x2f4>)
 8011850:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011854:	f003 0302 	and.w	r3, r3, #2
 8011858:	2b00      	cmp	r3, #0
 801185a:	d001      	beq.n	8011860 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801185c:	2301      	movs	r3, #1
 801185e:	e33f      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	2b37      	cmp	r3, #55	; 0x37
 8011866:	f200 8319 	bhi.w	8011e9c <LoRaMacMibSetRequestConfirm+0x664>
 801186a:	a201      	add	r2, pc, #4	; (adr r2, 8011870 <LoRaMacMibSetRequestConfirm+0x38>)
 801186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011870:	08011951 	.word	0x08011951
 8011874:	08011961 	.word	0x08011961
 8011878:	0801197b 	.word	0x0801197b
 801187c:	08011993 	.word	0x08011993
 8011880:	080119ab 	.word	0x080119ab
 8011884:	080119b7 	.word	0x080119b7
 8011888:	080119c3 	.word	0x080119c3
 801188c:	080119cf 	.word	0x080119cf
 8011890:	080119f5 	.word	0x080119f5
 8011894:	08011a1b 	.word	0x08011a1b
 8011898:	08011a41 	.word	0x08011a41
 801189c:	08011a67 	.word	0x08011a67
 80118a0:	08011a8d 	.word	0x08011a8d
 80118a4:	08011ab3 	.word	0x08011ab3
 80118a8:	08011ad9 	.word	0x08011ad9
 80118ac:	08011aff 	.word	0x08011aff
 80118b0:	08011b1f 	.word	0x08011b1f
 80118b4:	08011e9d 	.word	0x08011e9d
 80118b8:	08011b39 	.word	0x08011b39
 80118bc:	08011ba9 	.word	0x08011ba9
 80118c0:	08011be9 	.word	0x08011be9
 80118c4:	08011c4b 	.word	0x08011c4b
 80118c8:	08011cbb 	.word	0x08011cbb
 80118cc:	08011c8b 	.word	0x08011c8b
 80118d0:	08011ceb 	.word	0x08011ceb
 80118d4:	08011d0d 	.word	0x08011d0d
 80118d8:	08011d17 	.word	0x08011d17
 80118dc:	08011d21 	.word	0x08011d21
 80118e0:	08011d2b 	.word	0x08011d2b
 80118e4:	08011d35 	.word	0x08011d35
 80118e8:	08011d3f 	.word	0x08011d3f
 80118ec:	08011d71 	.word	0x08011d71
 80118f0:	08011ddd 	.word	0x08011ddd
 80118f4:	08011dab 	.word	0x08011dab
 80118f8:	08011e19 	.word	0x08011e19
 80118fc:	08011e2f 	.word	0x08011e2f
 8011900:	08011e47 	.word	0x08011e47
 8011904:	08011e51 	.word	0x08011e51
 8011908:	08011e5d 	.word	0x08011e5d
 801190c:	08011e9d 	.word	0x08011e9d
 8011910:	08011e67 	.word	0x08011e67
 8011914:	08011e9d 	.word	0x08011e9d
 8011918:	08011e9d 	.word	0x08011e9d
 801191c:	08011e9d 	.word	0x08011e9d
 8011920:	08011e9d 	.word	0x08011e9d
 8011924:	08011e9d 	.word	0x08011e9d
 8011928:	08011e9d 	.word	0x08011e9d
 801192c:	08011e9d 	.word	0x08011e9d
 8011930:	08011e9d 	.word	0x08011e9d
 8011934:	08011e9d 	.word	0x08011e9d
 8011938:	08011e9d 	.word	0x08011e9d
 801193c:	08011e9d 	.word	0x08011e9d
 8011940:	08011e9d 	.word	0x08011e9d
 8011944:	08011e9d 	.word	0x08011e9d
 8011948:	08011e9d 	.word	0x08011e9d
 801194c:	08011e91 	.word	0x08011e91
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	791b      	ldrb	r3, [r3, #4]
 8011954:	4618      	mov	r0, r3
 8011956:	f7fd fb99 	bl	800f08c <SwitchClass>
 801195a:	4603      	mov	r3, r0
 801195c:	75fb      	strb	r3, [r7, #23]
            break;
 801195e:	e2be      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	791b      	ldrb	r3, [r3, #4]
 8011964:	2b02      	cmp	r3, #2
 8011966:	d005      	beq.n	8011974 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	791a      	ldrb	r2, [r3, #4]
 801196c:	4b70      	ldr	r3, [pc, #448]	; (8011b30 <LoRaMacMibSetRequestConfirm+0x2f8>)
 801196e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011972:	e2b4      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011974:	2303      	movs	r3, #3
 8011976:	75fb      	strb	r3, [r7, #23]
            break;
 8011978:	e2b1      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	4618      	mov	r0, r3
 8011980:	f7fa fd7e 	bl	800c480 <SecureElementSetDevEui>
 8011984:	4603      	mov	r3, r0
 8011986:	2b00      	cmp	r3, #0
 8011988:	f000 828e 	beq.w	8011ea8 <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801198c:	2303      	movs	r3, #3
 801198e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011990:	e28a      	b.n	8011ea8 <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	4618      	mov	r0, r3
 8011998:	f7fa fd94 	bl	800c4c4 <SecureElementSetJoinEui>
 801199c:	4603      	mov	r3, r0
 801199e:	2b00      	cmp	r3, #0
 80119a0:	f000 8284 	beq.w	8011eac <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119a4:	2303      	movs	r3, #3
 80119a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119a8:	e280      	b.n	8011eac <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	791a      	ldrb	r2, [r3, #4]
 80119ae:	4b60      	ldr	r3, [pc, #384]	; (8011b30 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80119b0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 80119b4:	e293      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	4a5d      	ldr	r2, [pc, #372]	; (8011b30 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80119bc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 80119c0:	e28d      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	4a5a      	ldr	r2, [pc, #360]	; (8011b30 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80119c8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 80119cc:	e287      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00b      	beq.n	80119ee <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	4619      	mov	r1, r3
 80119dc:	2000      	movs	r0, #0
 80119de:	f001 ff8d 	bl	80138fc <LoRaMacCryptoSetKey>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f000 8263 	beq.w	8011eb0 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119ea:	2311      	movs	r3, #17
 80119ec:	e278      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119ee:	2303      	movs	r3, #3
 80119f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119f2:	e25d      	b.n	8011eb0 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d00b      	beq.n	8011a14 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	4619      	mov	r1, r3
 8011a02:	2001      	movs	r0, #1
 8011a04:	f001 ff7a 	bl	80138fc <LoRaMacCryptoSetKey>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f000 8252 	beq.w	8011eb4 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a10:	2311      	movs	r3, #17
 8011a12:	e265      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a14:	2303      	movs	r3, #3
 8011a16:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a18:	e24c      	b.n	8011eb4 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00b      	beq.n	8011a3a <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	4619      	mov	r1, r3
 8011a28:	2002      	movs	r0, #2
 8011a2a:	f001 ff67 	bl	80138fc <LoRaMacCryptoSetKey>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f000 8241 	beq.w	8011eb8 <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a36:	2311      	movs	r3, #17
 8011a38:	e252      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a3e:	e23b      	b.n	8011eb8 <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00b      	beq.n	8011a60 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	2003      	movs	r0, #3
 8011a50:	f001 ff54 	bl	80138fc <LoRaMacCryptoSetKey>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	f000 8230 	beq.w	8011ebc <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a5c:	2311      	movs	r3, #17
 8011a5e:	e23f      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a60:	2303      	movs	r3, #3
 8011a62:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a64:	e22a      	b.n	8011ebc <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00b      	beq.n	8011a86 <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	4619      	mov	r1, r3
 8011a74:	207f      	movs	r0, #127	; 0x7f
 8011a76:	f001 ff41 	bl	80138fc <LoRaMacCryptoSetKey>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f000 821f 	beq.w	8011ec0 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a82:	2311      	movs	r3, #17
 8011a84:	e22c      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a86:	2303      	movs	r3, #3
 8011a88:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a8a:	e219      	b.n	8011ec0 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00b      	beq.n	8011aac <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	4619      	mov	r1, r3
 8011a9a:	2080      	movs	r0, #128	; 0x80
 8011a9c:	f001 ff2e 	bl	80138fc <LoRaMacCryptoSetKey>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	f000 820e 	beq.w	8011ec4 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011aa8:	2311      	movs	r3, #17
 8011aaa:	e219      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011aac:	2303      	movs	r3, #3
 8011aae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ab0:	e208      	b.n	8011ec4 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d00b      	beq.n	8011ad2 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	2081      	movs	r0, #129	; 0x81
 8011ac2:	f001 ff1b 	bl	80138fc <LoRaMacCryptoSetKey>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 81fd 	beq.w	8011ec8 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ace:	2311      	movs	r3, #17
 8011ad0:	e206      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ad6:	e1f7      	b.n	8011ec8 <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00b      	beq.n	8011af8 <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	2082      	movs	r0, #130	; 0x82
 8011ae8:	f001 ff08 	bl	80138fc <LoRaMacCryptoSetKey>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f000 81ec 	beq.w	8011ecc <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011af4:	2311      	movs	r3, #17
 8011af6:	e1f3      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011af8:	2303      	movs	r3, #3
 8011afa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011afc:	e1e6      	b.n	8011ecc <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	791a      	ldrb	r2, [r3, #4]
 8011b02:	4b0b      	ldr	r3, [pc, #44]	; (8011b30 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011b04:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011b08:	4b0a      	ldr	r3, [pc, #40]	; (8011b34 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b0c:	4a08      	ldr	r2, [pc, #32]	; (8011b30 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011b0e:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011b12:	4610      	mov	r0, r2
 8011b14:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011b16:	4b07      	ldr	r3, [pc, #28]	; (8011b34 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b1a:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011b1c:	e1df      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	791a      	ldrb	r2, [r3, #4]
 8011b22:	4b03      	ldr	r3, [pc, #12]	; (8011b30 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8011b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011b28:	e1d9      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
 8011b2a:	bf00      	nop
 8011b2c:	20000898 	.word	0x20000898
 8011b30:	20000da4 	.word	0x20000da4
 8011b34:	0801c168 	.word	0x0801c168
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	7a1b      	ldrb	r3, [r3, #8]
 8011b3c:	b25b      	sxtb	r3, r3
 8011b3e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b40:	4bb3      	ldr	r3, [pc, #716]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b42:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011b46:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011b48:	4bb1      	ldr	r3, [pc, #708]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b4e:	f107 0108 	add.w	r1, r7, #8
 8011b52:	2207      	movs	r2, #7
 8011b54:	4618      	mov	r0, r3
 8011b56:	f002 fcfc 	bl	8014552 <RegionVerify>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	f083 0301 	eor.w	r3, r3, #1
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d002      	beq.n	8011b6c <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b66:	2303      	movs	r3, #3
 8011b68:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011b6a:	e1b8      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011b72:	4ba7      	ldr	r3, [pc, #668]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b78:	f107 0108 	add.w	r1, r7, #8
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f002 fce7 	bl	8014552 <RegionVerify>
 8011b84:	4603      	mov	r3, r0
 8011b86:	f083 0301 	eor.w	r3, r3, #1
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d002      	beq.n	8011b96 <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b90:	2303      	movs	r3, #3
 8011b92:	75fb      	strb	r3, [r7, #23]
            break;
 8011b94:	e1a3      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011b96:	4b9e      	ldr	r3, [pc, #632]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	3364      	adds	r3, #100	; 0x64
 8011b9c:	3204      	adds	r2, #4
 8011b9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ba2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011ba6:	e19a      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	7a1b      	ldrb	r3, [r3, #8]
 8011bac:	b25b      	sxtb	r3, r3
 8011bae:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011bb0:	4b97      	ldr	r3, [pc, #604]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011bb2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011bb6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011bb8:	4b95      	ldr	r3, [pc, #596]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bbe:	f107 0108 	add.w	r1, r7, #8
 8011bc2:	2207      	movs	r2, #7
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f002 fcc4 	bl	8014552 <RegionVerify>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d008      	beq.n	8011be2 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011bd0:	4b8f      	ldr	r3, [pc, #572]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	33a8      	adds	r3, #168	; 0xa8
 8011bd6:	3204      	adds	r2, #4
 8011bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bdc:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011be0:	e17d      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011be2:	2303      	movs	r3, #3
 8011be4:	75fb      	strb	r3, [r7, #23]
            break;
 8011be6:	e17a      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	7a1b      	ldrb	r3, [r3, #8]
 8011bec:	b25b      	sxtb	r3, r3
 8011bee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011bf0:	4b87      	ldr	r3, [pc, #540]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011bf2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011bf6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011bf8:	4b85      	ldr	r3, [pc, #532]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bfe:	f107 0108 	add.w	r1, r7, #8
 8011c02:	2207      	movs	r2, #7
 8011c04:	4618      	mov	r0, r3
 8011c06:	f002 fca4 	bl	8014552 <RegionVerify>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d019      	beq.n	8011c44 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011c10:	4b7f      	ldr	r3, [pc, #508]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	336c      	adds	r3, #108	; 0x6c
 8011c16:	3204      	adds	r2, #4
 8011c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c1c:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011c20:	4b7b      	ldr	r3, [pc, #492]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011c22:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011c26:	2b02      	cmp	r3, #2
 8011c28:	f040 8152 	bne.w	8011ed0 <LoRaMacMibSetRequestConfirm+0x698>
 8011c2c:	4b78      	ldr	r3, [pc, #480]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011c2e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 814c 	beq.w	8011ed0 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011c38:	4b76      	ldr	r3, [pc, #472]	; (8011e14 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c3c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011c3e:	f7fe fc67 	bl	8010510 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c42:	e145      	b.n	8011ed0 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c44:	2303      	movs	r3, #3
 8011c46:	75fb      	strb	r3, [r7, #23]
            break;
 8011c48:	e142      	b.n	8011ed0 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	7a1b      	ldrb	r3, [r3, #8]
 8011c4e:	b25b      	sxtb	r3, r3
 8011c50:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c52:	4b6f      	ldr	r3, [pc, #444]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011c54:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011c58:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011c5a:	4b6d      	ldr	r3, [pc, #436]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c60:	f107 0108 	add.w	r1, r7, #8
 8011c64:	2207      	movs	r2, #7
 8011c66:	4618      	mov	r0, r3
 8011c68:	f002 fc73 	bl	8014552 <RegionVerify>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d008      	beq.n	8011c84 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011c72:	4b67      	ldr	r3, [pc, #412]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	33b0      	adds	r3, #176	; 0xb0
 8011c78:	3204      	adds	r2, #4
 8011c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c7e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c82:	e12c      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c84:	2303      	movs	r3, #3
 8011c86:	75fb      	strb	r3, [r7, #23]
            break;
 8011c88:	e129      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011c90:	2301      	movs	r3, #1
 8011c92:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011c94:	4b5e      	ldr	r3, [pc, #376]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c9a:	f107 020c 	add.w	r2, r7, #12
 8011c9e:	4611      	mov	r1, r2
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f002 fc7f 	bl	80145a4 <RegionChanMaskSet>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	f083 0301 	eor.w	r3, r3, #1
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f000 8110 	beq.w	8011ed4 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cb4:	2303      	movs	r3, #3
 8011cb6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011cb8:	e10c      	b.n	8011ed4 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011cc4:	4b52      	ldr	r3, [pc, #328]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cca:	f107 020c 	add.w	r2, r7, #12
 8011cce:	4611      	mov	r1, r2
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f002 fc67 	bl	80145a4 <RegionChanMaskSet>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	f083 0301 	eor.w	r3, r3, #1
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	f000 80fa 	beq.w	8011ed8 <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ce8:	e0f6      	b.n	8011ed8 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	791b      	ldrb	r3, [r3, #4]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d009      	beq.n	8011d06 <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011cf6:	2b0f      	cmp	r3, #15
 8011cf8:	d805      	bhi.n	8011d06 <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	791a      	ldrb	r2, [r3, #4]
 8011cfe:	4b44      	ldr	r3, [pc, #272]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d04:	e0eb      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d06:	2303      	movs	r3, #3
 8011d08:	75fb      	strb	r3, [r7, #23]
            break;
 8011d0a:	e0e8      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	4a3f      	ldr	r2, [pc, #252]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d12:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011d14:	e0e3      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	4a3d      	ldr	r2, [pc, #244]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d1c:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011d1e:	e0de      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	4a3a      	ldr	r2, [pc, #232]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d26:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8011d28:	e0d9      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	4a38      	ldr	r2, [pc, #224]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d30:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011d32:	e0d4      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	4a35      	ldr	r2, [pc, #212]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d3a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8011d3c:	e0cf      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d44:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011d46:	4b32      	ldr	r3, [pc, #200]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d4c:	f107 0108 	add.w	r1, r7, #8
 8011d50:	2206      	movs	r2, #6
 8011d52:	4618      	mov	r0, r3
 8011d54:	f002 fbfd 	bl	8014552 <RegionVerify>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d005      	beq.n	8011d6a <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011d5e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d62:	4b2b      	ldr	r3, [pc, #172]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d64:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d68:	e0b9      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	75fb      	strb	r3, [r7, #23]
            break;
 8011d6e:	e0b6      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d76:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d78:	4b25      	ldr	r3, [pc, #148]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d7a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011d7e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011d80:	4b23      	ldr	r3, [pc, #140]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d86:	f107 0108 	add.w	r1, r7, #8
 8011d8a:	2205      	movs	r2, #5
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f002 fbe0 	bl	8014552 <RegionVerify>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d005      	beq.n	8011da4 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011d98:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d9c:	4b1c      	ldr	r3, [pc, #112]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011da2:	e09c      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011da4:	2303      	movs	r3, #3
 8011da6:	75fb      	strb	r3, [r7, #23]
            break;
 8011da8:	e099      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011db0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011db2:	4b17      	ldr	r3, [pc, #92]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011db8:	f107 0108 	add.w	r1, r7, #8
 8011dbc:	220a      	movs	r2, #10
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f002 fbc7 	bl	8014552 <RegionVerify>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d005      	beq.n	8011dd6 <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011dca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011dce:	4b10      	ldr	r3, [pc, #64]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011dd0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011dd4:	e083      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dd6:	2303      	movs	r3, #3
 8011dd8:	75fb      	strb	r3, [r7, #23]
            break;
 8011dda:	e080      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011de2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011de4:	4b0a      	ldr	r3, [pc, #40]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dea:	f107 0108 	add.w	r1, r7, #8
 8011dee:	2209      	movs	r2, #9
 8011df0:	4618      	mov	r0, r3
 8011df2:	f002 fbae 	bl	8014552 <RegionVerify>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d005      	beq.n	8011e08 <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011dfc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011e00:	4b03      	ldr	r3, [pc, #12]	; (8011e10 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8011e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011e06:	e06a      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e08:	2303      	movs	r3, #3
 8011e0a:	75fb      	strb	r3, [r7, #23]
            break;
 8011e0c:	e067      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
 8011e0e:	bf00      	nop
 8011e10:	20000da4 	.word	0x20000da4
 8011e14:	0801c168 	.word	0x0801c168
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	4a32      	ldr	r2, [pc, #200]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8011e22:	4b31      	ldr	r3, [pc, #196]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e28:	4a2f      	ldr	r2, [pc, #188]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e2a:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011e2c:	e057      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	791a      	ldrb	r2, [r3, #4]
 8011e32:	4b2d      	ldr	r3, [pc, #180]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e34:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8011e38:	4b2b      	ldr	r3, [pc, #172]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e3a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011e3e:	4b2a      	ldr	r3, [pc, #168]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011e44:	e04b      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	4a27      	ldr	r2, [pc, #156]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e4c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011e4e:	e046      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	4a24      	ldr	r2, [pc, #144]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e56:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8011e5a:	e040      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011e5c:	f7fe fdb2 	bl	80109c4 <RestoreNvmData>
 8011e60:	4603      	mov	r3, r0
 8011e62:	75fb      	strb	r3, [r7, #23]
            break;
 8011e64:	e03b      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	799b      	ldrb	r3, [r3, #6]
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d80d      	bhi.n	8011e8a <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011e6e:	4a1e      	ldr	r2, [pc, #120]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6858      	ldr	r0, [r3, #4]
 8011e7c:	f001 fc78 	bl	8013770 <LoRaMacCryptoSetLrWanVersion>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d02a      	beq.n	8011edc <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e86:	2311      	movs	r3, #17
 8011e88:	e02a      	b.n	8011ee0 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e8a:	2303      	movs	r3, #3
 8011e8c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e8e:	e025      	b.n	8011edc <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	4a14      	ldr	r2, [pc, #80]	; (8011ee8 <LoRaMacMibSetRequestConfirm+0x6b0>)
 8011e96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8011e9a:	e020      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fc0d 	bl	80126bc <LoRaMacMibClassBSetRequestConfirm>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	75fb      	strb	r3, [r7, #23]
            break;
 8011ea6:	e01a      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ea8:	bf00      	nop
 8011eaa:	e018      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011eac:	bf00      	nop
 8011eae:	e016      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011eb0:	bf00      	nop
 8011eb2:	e014      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011eb4:	bf00      	nop
 8011eb6:	e012      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011eb8:	bf00      	nop
 8011eba:	e010      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ebc:	bf00      	nop
 8011ebe:	e00e      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ec0:	bf00      	nop
 8011ec2:	e00c      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ec4:	bf00      	nop
 8011ec6:	e00a      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ec8:	bf00      	nop
 8011eca:	e008      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ecc:	bf00      	nop
 8011ece:	e006      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ed0:	bf00      	nop
 8011ed2:	e004      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ed4:	bf00      	nop
 8011ed6:	e002      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011ed8:	bf00      	nop
 8011eda:	e000      	b.n	8011ede <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8011edc:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	3718      	adds	r7, #24
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	20000da4 	.word	0x20000da4

08011eec <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ef4:	2302      	movs	r3, #2
 8011ef6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011ef8:	2300      	movs	r3, #0
 8011efa:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d101      	bne.n	8011f06 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f02:	2303      	movs	r3, #3
 8011f04:	e127      	b.n	8012156 <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011f06:	f7fc fcd3 	bl	800e8b0 <LoRaMacIsBusy>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d001      	beq.n	8011f14 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011f10:	2301      	movs	r3, #1
 8011f12:	e120      	b.n	8012156 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011f14:	f001 f8d0 	bl	80130b8 <LoRaMacConfirmQueueIsFull>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d001      	beq.n	8011f22 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e119      	b.n	8012156 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011f22:	f001 f8bd 	bl	80130a0 <LoRaMacConfirmQueueGetCnt>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d104      	bne.n	8011f36 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011f2c:	2214      	movs	r2, #20
 8011f2e:	2100      	movs	r1, #0
 8011f30:	488b      	ldr	r0, [pc, #556]	; (8012160 <LoRaMacMlmeRequest+0x274>)
 8011f32:	f004 fe21 	bl	8016b78 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f36:	4b8b      	ldr	r3, [pc, #556]	; (8012164 <LoRaMacMlmeRequest+0x278>)
 8011f38:	2201      	movs	r2, #1
 8011f3a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011f3e:	4a89      	ldr	r2, [pc, #548]	; (8012164 <LoRaMacMlmeRequest+0x278>)
 8011f40:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8011f44:	f043 0304 	orr.w	r3, r3, #4
 8011f48:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f52:	2301      	movs	r3, #1
 8011f54:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011f56:	2300      	movs	r3, #0
 8011f58:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	2b0d      	cmp	r3, #13
 8011f62:	f200 80ce 	bhi.w	8012102 <LoRaMacMlmeRequest+0x216>
 8011f66:	a201      	add	r2, pc, #4	; (adr r2, 8011f6c <LoRaMacMlmeRequest+0x80>)
 8011f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f6c:	08011fa5 	.word	0x08011fa5
 8011f70:	08012103 	.word	0x08012103
 8011f74:	08012103 	.word	0x08012103
 8011f78:	0801200f 	.word	0x0801200f
 8011f7c:	0801202d 	.word	0x0801202d
 8011f80:	0801203d 	.word	0x0801203d
 8011f84:	08012103 	.word	0x08012103
 8011f88:	08012103 	.word	0x08012103
 8011f8c:	08012103 	.word	0x08012103
 8011f90:	08012059 	.word	0x08012059
 8011f94:	08012103 	.word	0x08012103
 8011f98:	080120d7 	.word	0x080120d7
 8011f9c:	08012077 	.word	0x08012077
 8011fa0:	080120b9 	.word	0x080120b9
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011fa4:	4b6f      	ldr	r3, [pc, #444]	; (8012164 <LoRaMacMlmeRequest+0x278>)
 8011fa6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011faa:	f003 0320 	and.w	r3, r3, #32
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d001      	beq.n	8011fb6 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e0cf      	b.n	8012156 <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 8011fb6:	f7fe f989 	bl	80102cc <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011fba:	4b6b      	ldr	r3, [pc, #428]	; (8012168 <LoRaMacMlmeRequest+0x27c>)
 8011fbc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	795b      	ldrb	r3, [r3, #5]
 8011fc4:	b25b      	sxtb	r3, r3
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	4619      	mov	r1, r3
 8011fca:	f002 fbaa 	bl	8014722 <RegionAlternateDr>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	4b65      	ldr	r3, [pc, #404]	; (8012168 <LoRaMacMlmeRequest+0x27c>)
 8011fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011fd8:	2307      	movs	r3, #7
 8011fda:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011fdc:	20ff      	movs	r0, #255	; 0xff
 8011fde:	f7fd feed 	bl	800fdbc <SendReJoinReq>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011fe6:	7dfb      	ldrb	r3, [r7, #23]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 808c 	beq.w	8012106 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011fee:	4b5e      	ldr	r3, [pc, #376]	; (8012168 <LoRaMacMlmeRequest+0x27c>)
 8011ff0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	795b      	ldrb	r3, [r3, #5]
 8011ff8:	b25b      	sxtb	r3, r3
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	f002 fb90 	bl	8014722 <RegionAlternateDr>
 8012002:	4603      	mov	r3, r0
 8012004:	461a      	mov	r2, r3
 8012006:	4b58      	ldr	r3, [pc, #352]	; (8012168 <LoRaMacMlmeRequest+0x27c>)
 8012008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801200c:	e07b      	b.n	8012106 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801200e:	2300      	movs	r3, #0
 8012010:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012012:	f107 030c 	add.w	r3, r7, #12
 8012016:	2200      	movs	r2, #0
 8012018:	4619      	mov	r1, r3
 801201a:	2002      	movs	r0, #2
 801201c:	f000 fcb2 	bl	8012984 <LoRaMacCommandsAddCmd>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d071      	beq.n	801210a <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012026:	2313      	movs	r3, #19
 8012028:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801202a:	e06e      	b.n	801210a <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	889b      	ldrh	r3, [r3, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	f7fe fc73 	bl	801091c <SetTxContinuousWave>
 8012036:	4603      	mov	r3, r0
 8012038:	75fb      	strb	r3, [r7, #23]
            break;
 801203a:	e06d      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8898      	ldrh	r0, [r3, #4]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6899      	ldr	r1, [r3, #8]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801204a:	b2db      	uxtb	r3, r3
 801204c:	461a      	mov	r2, r3
 801204e:	f7fe fc99 	bl	8010984 <SetTxContinuousWave1>
 8012052:	4603      	mov	r3, r0
 8012054:	75fb      	strb	r3, [r7, #23]
            break;
 8012056:	e05f      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801205c:	f107 030c 	add.w	r3, r7, #12
 8012060:	2200      	movs	r2, #0
 8012062:	4619      	mov	r1, r3
 8012064:	200d      	movs	r0, #13
 8012066:	f000 fc8d 	bl	8012984 <LoRaMacCommandsAddCmd>
 801206a:	4603      	mov	r3, r0
 801206c:	2b00      	cmp	r3, #0
 801206e:	d04e      	beq.n	801210e <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012070:	2313      	movs	r3, #19
 8012072:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012074:	e04b      	b.n	801210e <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012076:	4b3c      	ldr	r3, [pc, #240]	; (8012168 <LoRaMacMlmeRequest+0x27c>)
 8012078:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801207c:	2b00      	cmp	r3, #0
 801207e:	d148      	bne.n	8012112 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	791b      	ldrb	r3, [r3, #4]
 8012084:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	791b      	ldrb	r3, [r3, #4]
 801208a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801208e:	b2db      	uxtb	r3, r3
 8012090:	4618      	mov	r0, r3
 8012092:	f000 fae8 	bl	8012666 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012096:	7dbb      	ldrb	r3, [r7, #22]
 8012098:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801209e:	f107 030c 	add.w	r3, r7, #12
 80120a2:	2201      	movs	r2, #1
 80120a4:	4619      	mov	r1, r3
 80120a6:	2010      	movs	r0, #16
 80120a8:	f000 fc6c 	bl	8012984 <LoRaMacCommandsAddCmd>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d02f      	beq.n	8012112 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120b2:	2313      	movs	r3, #19
 80120b4:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 80120b6:	e02c      	b.n	8012112 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80120b8:	2300      	movs	r3, #0
 80120ba:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80120bc:	f107 030c 	add.w	r3, r7, #12
 80120c0:	2200      	movs	r2, #0
 80120c2:	4619      	mov	r1, r3
 80120c4:	2012      	movs	r0, #18
 80120c6:	f000 fc5d 	bl	8012984 <LoRaMacCommandsAddCmd>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d022      	beq.n	8012116 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120d0:	2313      	movs	r3, #19
 80120d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120d4:	e01f      	b.n	8012116 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80120d6:	2301      	movs	r3, #1
 80120d8:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80120da:	f000 fa7a 	bl	80125d2 <LoRaMacClassBIsAcquisitionInProgress>
 80120de:	4603      	mov	r3, r0
 80120e0:	f083 0301 	eor.w	r3, r3, #1
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d008      	beq.n	80120fc <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80120ea:	2000      	movs	r0, #0
 80120ec:	f000 fa53 	bl	8012596 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80120f0:	2000      	movs	r0, #0
 80120f2:	f000 fa75 	bl	80125e0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80120f6:	2300      	movs	r3, #0
 80120f8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80120fa:	e00d      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 80120fc:	2301      	movs	r3, #1
 80120fe:	75fb      	strb	r3, [r7, #23]
            break;
 8012100:	e00a      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8012102:	bf00      	nop
 8012104:	e008      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
            break;
 8012106:	bf00      	nop
 8012108:	e006      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
            break;
 801210a:	bf00      	nop
 801210c:	e004      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
            break;
 801210e:	bf00      	nop
 8012110:	e002      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
            break;
 8012112:	bf00      	nop
 8012114:	e000      	b.n	8012118 <LoRaMacMlmeRequest+0x22c>
            break;
 8012116:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012118:	4b12      	ldr	r3, [pc, #72]	; (8012164 <LoRaMacMlmeRequest+0x278>)
 801211a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d010      	beq.n	801214a <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012128:	f000 ffba 	bl	80130a0 <LoRaMacConfirmQueueGetCnt>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d110      	bne.n	8012154 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8012132:	4b0c      	ldr	r3, [pc, #48]	; (8012164 <LoRaMacMlmeRequest+0x278>)
 8012134:	2200      	movs	r2, #0
 8012136:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801213a:	4a0a      	ldr	r2, [pc, #40]	; (8012164 <LoRaMacMlmeRequest+0x278>)
 801213c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012140:	f36f 0382 	bfc	r3, #2, #1
 8012144:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8012148:	e004      	b.n	8012154 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801214a:	f107 0310 	add.w	r3, r7, #16
 801214e:	4618      	mov	r0, r3
 8012150:	f000 fe58 	bl	8012e04 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012154:	7dfb      	ldrb	r3, [r7, #23]
}
 8012156:	4618      	mov	r0, r3
 8012158:	3718      	adds	r7, #24
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	20000ce4 	.word	0x20000ce4
 8012164:	20000898 	.word	0x20000898
 8012168:	20000da4 	.word	0x20000da4

0801216c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08c      	sub	sp, #48	; 0x30
 8012170:	af02      	add	r7, sp, #8
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	460b      	mov	r3, r1
 8012176:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012178:	2302      	movs	r3, #2
 801217a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801217e:	2300      	movs	r3, #0
 8012180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012184:	2300      	movs	r3, #0
 8012186:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012188:	2300      	movs	r3, #0
 801218a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 801218c:	2300      	movs	r3, #0
 801218e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012196:	2303      	movs	r3, #3
 8012198:	e0d4      	b.n	8012344 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 801219a:	f7fc fb89 	bl	800e8b0 <LoRaMacIsBusy>
 801219e:	4603      	mov	r3, r0
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d001      	beq.n	80121a8 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80121a4:	2301      	movs	r3, #1
 80121a6:	e0cd      	b.n	8012344 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80121a8:	2300      	movs	r3, #0
 80121aa:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80121ac:	2214      	movs	r2, #20
 80121ae:	2100      	movs	r1, #0
 80121b0:	4866      	ldr	r0, [pc, #408]	; (801234c <LoRaMacMcpsRequest+0x1e0>)
 80121b2:	f004 fce1 	bl	8016b78 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80121b6:	4b66      	ldr	r3, [pc, #408]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 80121b8:	2201      	movs	r2, #1
 80121ba:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80121be:	4b64      	ldr	r3, [pc, #400]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 80121c0:	2201      	movs	r2, #1
 80121c2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	2b03      	cmp	r3, #3
 80121cc:	d03d      	beq.n	801224a <LoRaMacMcpsRequest+0xde>
 80121ce:	2b03      	cmp	r3, #3
 80121d0:	dc4f      	bgt.n	8012272 <LoRaMacMcpsRequest+0x106>
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d002      	beq.n	80121dc <LoRaMacMcpsRequest+0x70>
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d019      	beq.n	801220e <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80121da:	e04a      	b.n	8012272 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80121dc:	2301      	movs	r3, #1
 80121de:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80121e0:	4b5b      	ldr	r3, [pc, #364]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 80121e2:	2201      	movs	r2, #1
 80121e4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80121e8:	7b3b      	ldrb	r3, [r7, #12]
 80121ea:	2202      	movs	r2, #2
 80121ec:	f362 1347 	bfi	r3, r2, #5, #3
 80121f0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	791b      	ldrb	r3, [r3, #4]
 80121f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	689b      	ldr	r3, [r3, #8]
 80121fe:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	899b      	ldrh	r3, [r3, #12]
 8012204:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	7b9b      	ldrb	r3, [r3, #14]
 801220a:	777b      	strb	r3, [r7, #29]
            break;
 801220c:	e032      	b.n	8012274 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801220e:	2301      	movs	r3, #1
 8012210:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	7bdb      	ldrb	r3, [r3, #15]
 8012216:	2b08      	cmp	r3, #8
 8012218:	bf28      	it	cs
 801221a:	2308      	movcs	r3, #8
 801221c:	b2da      	uxtb	r2, r3
 801221e:	4b4c      	ldr	r3, [pc, #304]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 8012220:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012224:	7b3b      	ldrb	r3, [r7, #12]
 8012226:	2204      	movs	r2, #4
 8012228:	f362 1347 	bfi	r3, r2, #5, #3
 801222c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	791b      	ldrb	r3, [r3, #4]
 8012232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	689b      	ldr	r3, [r3, #8]
 801223a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	899b      	ldrh	r3, [r3, #12]
 8012240:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	7b9b      	ldrb	r3, [r3, #14]
 8012246:	777b      	strb	r3, [r7, #29]
            break;
 8012248:	e014      	b.n	8012274 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801224a:	2301      	movs	r3, #1
 801224c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801224e:	4b40      	ldr	r3, [pc, #256]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 8012250:	2201      	movs	r2, #1
 8012252:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012256:	7b3b      	ldrb	r3, [r7, #12]
 8012258:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801225c:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	891b      	ldrh	r3, [r3, #8]
 8012268:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	7a9b      	ldrb	r3, [r3, #10]
 801226e:	777b      	strb	r3, [r7, #29]
            break;
 8012270:	e000      	b.n	8012274 <LoRaMacMcpsRequest+0x108>
            break;
 8012272:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012274:	2302      	movs	r3, #2
 8012276:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012278:	4b36      	ldr	r3, [pc, #216]	; (8012354 <LoRaMacMcpsRequest+0x1e8>)
 801227a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801227e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012280:	4b34      	ldr	r3, [pc, #208]	; (8012354 <LoRaMacMcpsRequest+0x1e8>)
 8012282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012286:	f107 0214 	add.w	r2, r7, #20
 801228a:	4611      	mov	r1, r2
 801228c:	4618      	mov	r0, r3
 801228e:	f002 f925 	bl	80144dc <RegionGetPhyParam>
 8012292:	4603      	mov	r3, r0
 8012294:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	b25b      	sxtb	r3, r3
 801229a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801229e:	4293      	cmp	r3, r2
 80122a0:	bfb8      	it	lt
 80122a2:	4613      	movlt	r3, r2
 80122a4:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80122a6:	7f3b      	ldrb	r3, [r7, #28]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d044      	beq.n	8012336 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80122ac:	4b29      	ldr	r3, [pc, #164]	; (8012354 <LoRaMacMcpsRequest+0x1e8>)
 80122ae:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80122b2:	f083 0301 	eor.w	r3, r3, #1
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d019      	beq.n	80122f0 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80122bc:	7f7b      	ldrb	r3, [r7, #29]
 80122be:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80122c0:	4b24      	ldr	r3, [pc, #144]	; (8012354 <LoRaMacMcpsRequest+0x1e8>)
 80122c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80122c6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80122c8:	4b22      	ldr	r3, [pc, #136]	; (8012354 <LoRaMacMcpsRequest+0x1e8>)
 80122ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122ce:	f107 0108 	add.w	r1, r7, #8
 80122d2:	2205      	movs	r2, #5
 80122d4:	4618      	mov	r0, r3
 80122d6:	f002 f93c 	bl	8014552 <RegionVerify>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d005      	beq.n	80122ec <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80122e0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80122e4:	4b1b      	ldr	r3, [pc, #108]	; (8012354 <LoRaMacMcpsRequest+0x1e8>)
 80122e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80122ea:	e001      	b.n	80122f0 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80122ec:	2303      	movs	r3, #3
 80122ee:	e029      	b.n	8012344 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80122f0:	8bfa      	ldrh	r2, [r7, #30]
 80122f2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80122f6:	f107 000c 	add.w	r0, r7, #12
 80122fa:	78fb      	ldrb	r3, [r7, #3]
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	4613      	mov	r3, r2
 8012300:	6a3a      	ldr	r2, [r7, #32]
 8012302:	f7fd fc7b 	bl	800fbfc <Send>
 8012306:	4603      	mov	r3, r0
 8012308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 801230c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012310:	2b00      	cmp	r3, #0
 8012312:	d10c      	bne.n	801232e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	781a      	ldrb	r2, [r3, #0]
 8012318:	4b0d      	ldr	r3, [pc, #52]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 801231a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801231e:	4a0c      	ldr	r2, [pc, #48]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 8012320:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8012324:	f043 0301 	orr.w	r3, r3, #1
 8012328:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 801232c:	e003      	b.n	8012336 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801232e:	4b08      	ldr	r3, [pc, #32]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 8012330:	2200      	movs	r2, #0
 8012332:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012336:	4b06      	ldr	r3, [pc, #24]	; (8012350 <LoRaMacMcpsRequest+0x1e4>)
 8012338:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	611a      	str	r2, [r3, #16]

    return status;
 8012340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012344:	4618      	mov	r0, r3
 8012346:	3728      	adds	r7, #40	; 0x28
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	20000cd0 	.word	0x20000cd0
 8012350:	20000898 	.word	0x20000898
 8012354:	20000da4 	.word	0x20000da4

08012358 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b084      	sub	sp, #16
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012362:	79fb      	ldrb	r3, [r7, #7]
 8012364:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012366:	4b0a      	ldr	r3, [pc, #40]	; (8012390 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801236c:	f107 010c 	add.w	r1, r7, #12
 8012370:	220f      	movs	r2, #15
 8012372:	4618      	mov	r0, r3
 8012374:	f002 f8ed 	bl	8014552 <RegionVerify>
 8012378:	4603      	mov	r3, r0
 801237a:	2b00      	cmp	r3, #0
 801237c:	d003      	beq.n	8012386 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801237e:	4a04      	ldr	r2, [pc, #16]	; (8012390 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012380:	79fb      	ldrb	r3, [r7, #7]
 8012382:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8012386:	bf00      	nop
 8012388:	3710      	adds	r7, #16
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	20000da4 	.word	0x20000da4

08012394 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012398:	f7fe ffec 	bl	8011374 <LoRaMacStop>
 801239c:	4603      	mov	r3, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d114      	bne.n	80123cc <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80123a2:	480c      	ldr	r0, [pc, #48]	; (80123d4 <LoRaMacDeInitialization+0x40>)
 80123a4:	f008 fcf8 	bl	801ad98 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80123a8:	480b      	ldr	r0, [pc, #44]	; (80123d8 <LoRaMacDeInitialization+0x44>)
 80123aa:	f008 fcf5 	bl	801ad98 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80123ae:	480b      	ldr	r0, [pc, #44]	; (80123dc <LoRaMacDeInitialization+0x48>)
 80123b0:	f008 fcf2 	bl	801ad98 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 80123b4:	480a      	ldr	r0, [pc, #40]	; (80123e0 <LoRaMacDeInitialization+0x4c>)
 80123b6:	f008 fcef 	bl	801ad98 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80123ba:	f000 f95e 	bl	801267a <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 80123be:	f7fd ff85 	bl	80102cc <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80123c2:	4b08      	ldr	r3, [pc, #32]	; (80123e4 <LoRaMacDeInitialization+0x50>)
 80123c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c6:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	e000      	b.n	80123ce <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80123cc:	2301      	movs	r3, #1
    }
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	20000c00 	.word	0x20000c00
 80123d8:	20000c18 	.word	0x20000c18
 80123dc:	20000c30 	.word	0x20000c30
 80123e0:	20000c90 	.word	0x20000c90
 80123e4:	0801c168 	.word	0x0801c168

080123e8 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b08c      	sub	sp, #48	; 0x30
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	607a      	str	r2, [r7, #4]
 80123f4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80123f6:	2300      	movs	r3, #0
 80123f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	7c1b      	ldrb	r3, [r3, #16]
 8012400:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	7c5b      	ldrb	r3, [r3, #17]
 8012408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	689a      	ldr	r2, [r3, #8]
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	795b      	ldrb	r3, [r3, #5]
 8012418:	2b00      	cmp	r3, #0
 801241a:	f000 808b 	beq.w	8012534 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801241e:	2302      	movs	r3, #2
 8012420:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	7c9b      	ldrb	r3, [r3, #18]
 8012428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	7cdb      	ldrb	r3, [r3, #19]
 8012430:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012434:	4611      	mov	r1, r2
 8012436:	4618      	mov	r0, r3
 8012438:	f002 f850 	bl	80144dc <RegionGetPhyParam>
 801243c:	4603      	mov	r3, r0
 801243e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012440:	6a3b      	ldr	r3, [r7, #32]
 8012442:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8012446:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801244a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801244e:	4293      	cmp	r3, r2
 8012450:	bfb8      	it	lt
 8012452:	4613      	movlt	r3, r2
 8012454:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8012458:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801245c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8012460:	429a      	cmp	r2, r3
 8012462:	d106      	bne.n	8012472 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	2200      	movs	r2, #0
 8012468:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801246a:	2300      	movs	r3, #0
 801246c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012470:	e060      	b.n	8012534 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	689b      	ldr	r3, [r3, #8]
 8012476:	68fa      	ldr	r2, [r7, #12]
 8012478:	8992      	ldrh	r2, [r2, #12]
 801247a:	4293      	cmp	r3, r2
 801247c:	d303      	bcc.n	8012486 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801247e:	2301      	movs	r3, #1
 8012480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012484:	e002      	b.n	801248c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8012486:	2300      	movs	r3, #0
 8012488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	689b      	ldr	r3, [r3, #8]
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	8992      	ldrh	r2, [r2, #12]
 8012494:	4611      	mov	r1, r2
 8012496:	68fa      	ldr	r2, [r7, #12]
 8012498:	89d2      	ldrh	r2, [r2, #14]
 801249a:	440a      	add	r2, r1
 801249c:	4293      	cmp	r3, r2
 801249e:	d349      	bcc.n	8012534 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80124a0:	2308      	movs	r3, #8
 80124a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	7cdb      	ldrb	r3, [r3, #19]
 80124aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80124ae:	4611      	mov	r1, r2
 80124b0:	4618      	mov	r0, r3
 80124b2:	f002 f813 	bl	80144dc <RegionGetPhyParam>
 80124b6:	4603      	mov	r3, r0
 80124b8:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80124ba:	6a3b      	ldr	r3, [r7, #32]
 80124bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	68fa      	ldr	r2, [r7, #12]
 80124c6:	89d2      	ldrh	r2, [r2, #14]
 80124c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80124cc:	fb01 f202 	mul.w	r2, r1, r2
 80124d0:	1a9b      	subs	r3, r3, r2
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	d12e      	bne.n	8012534 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80124d6:	2322      	movs	r3, #34	; 0x22
 80124d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80124dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80124e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	7c9b      	ldrb	r3, [r3, #18]
 80124e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	7cdb      	ldrb	r3, [r3, #19]
 80124f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80124f4:	4611      	mov	r1, r2
 80124f6:	4618      	mov	r0, r3
 80124f8:	f001 fff0 	bl	80144dc <RegionGetPhyParam>
 80124fc:	4603      	mov	r3, r0
 80124fe:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8012500:	6a3b      	ldr	r3, [r7, #32]
 8012502:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8012506:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801250a:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801250e:	429a      	cmp	r2, r3
 8012510:	d110      	bne.n	8012534 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8012512:	2300      	movs	r3, #0
 8012514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	791b      	ldrb	r3, [r3, #4]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d009      	beq.n	8012534 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012520:	2302      	movs	r3, #2
 8012522:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	7cdb      	ldrb	r3, [r3, #19]
 8012528:	f107 0214 	add.w	r2, r7, #20
 801252c:	4611      	mov	r1, r2
 801252e:	4618      	mov	r0, r3
 8012530:	f001 fffd 	bl	801452e <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801253a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012542:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012548:	4618      	mov	r0, r3
 801254a:	3730      	adds	r7, #48	; 0x30
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	789b      	ldrb	r3, [r3, #2]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d107      	bne.n	8012576 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	68b9      	ldr	r1, [r7, #8]
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f7ff ff3b 	bl	80123e8 <CalcNextV10X>
 8012572:	4603      	mov	r3, r0
 8012574:	e000      	b.n	8012578 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3710      	adds	r7, #16
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012580:	b480      	push	{r7}
 8012582:	b085      	sub	sp, #20
 8012584:	af00      	add	r7, sp, #0
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801258c:	bf00      	nop
 801258e:	3714      	adds	r7, #20
 8012590:	46bd      	mov	sp, r7
 8012592:	bc80      	pop	{r7}
 8012594:	4770      	bx	lr

08012596 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012596:	b480      	push	{r7}
 8012598:	b083      	sub	sp, #12
 801259a:	af00      	add	r7, sp, #0
 801259c:	4603      	mov	r3, r0
 801259e:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125a0:	bf00      	nop
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bc80      	pop	{r7}
 80125a8:	4770      	bx	lr

080125aa <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80125aa:	b480      	push	{r7}
 80125ac:	b083      	sub	sp, #12
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	4603      	mov	r3, r0
 80125b2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125b4:	bf00      	nop
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bc80      	pop	{r7}
 80125bc:	4770      	bx	lr

080125be <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80125be:	b480      	push	{r7}
 80125c0:	b083      	sub	sp, #12
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	4603      	mov	r3, r0
 80125c6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125c8:	bf00      	nop
 80125ca:	370c      	adds	r7, #12
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bc80      	pop	{r7}
 80125d0:	4770      	bx	lr

080125d2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80125d2:	b480      	push	{r7}
 80125d4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80125d6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125d8:	4618      	mov	r0, r3
 80125da:	46bd      	mov	sp, r7
 80125dc:	bc80      	pop	{r7}
 80125de:	4770      	bx	lr

080125e0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80125e0:	b480      	push	{r7}
 80125e2:	b083      	sub	sp, #12
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125e8:	bf00      	nop
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bc80      	pop	{r7}
 80125f0:	4770      	bx	lr

080125f2 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80125f2:	b480      	push	{r7}
 80125f4:	b083      	sub	sp, #12
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125fa:	bf00      	nop
 80125fc:	370c      	adds	r7, #12
 80125fe:	46bd      	mov	sp, r7
 8012600:	bc80      	pop	{r7}
 8012602:	4770      	bx	lr

08012604 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012604:	b480      	push	{r7}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801260c:	bf00      	nop
 801260e:	370c      	adds	r7, #12
 8012610:	46bd      	mov	sp, r7
 8012612:	bc80      	pop	{r7}
 8012614:	4770      	bx	lr

08012616 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012616:	b480      	push	{r7}
 8012618:	b083      	sub	sp, #12
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	460b      	mov	r3, r1
 8012620:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012622:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012624:	4618      	mov	r0, r3
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	bc80      	pop	{r7}
 801262c:	4770      	bx	lr

0801262e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801262e:	b480      	push	{r7}
 8012630:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012632:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012634:	4618      	mov	r0, r3
 8012636:	46bd      	mov	sp, r7
 8012638:	bc80      	pop	{r7}
 801263a:	4770      	bx	lr

0801263c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801263c:	b480      	push	{r7}
 801263e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012640:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012642:	4618      	mov	r0, r3
 8012644:	46bd      	mov	sp, r7
 8012646:	bc80      	pop	{r7}
 8012648:	4770      	bx	lr

0801264a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801264a:	b480      	push	{r7}
 801264c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801264e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012650:	4618      	mov	r0, r3
 8012652:	46bd      	mov	sp, r7
 8012654:	bc80      	pop	{r7}
 8012656:	4770      	bx	lr

08012658 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012658:	b480      	push	{r7}
 801265a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801265c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801265e:	4618      	mov	r0, r3
 8012660:	46bd      	mov	sp, r7
 8012662:	bc80      	pop	{r7}
 8012664:	4770      	bx	lr

08012666 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012666:	b480      	push	{r7}
 8012668:	b083      	sub	sp, #12
 801266a:	af00      	add	r7, sp, #0
 801266c:	4603      	mov	r3, r0
 801266e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012670:	bf00      	nop
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	bc80      	pop	{r7}
 8012678:	4770      	bx	lr

0801267a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801267a:	b480      	push	{r7}
 801267c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801267e:	bf00      	nop
 8012680:	46bd      	mov	sp, r7
 8012682:	bc80      	pop	{r7}
 8012684:	4770      	bx	lr

08012686 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012686:	b480      	push	{r7}
 8012688:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801268a:	bf00      	nop
 801268c:	46bd      	mov	sp, r7
 801268e:	bc80      	pop	{r7}
 8012690:	4770      	bx	lr

08012692 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012692:	b480      	push	{r7}
 8012694:	b083      	sub	sp, #12
 8012696:	af00      	add	r7, sp, #0
 8012698:	4603      	mov	r3, r0
 801269a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801269c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801269e:	4618      	mov	r0, r3
 80126a0:	370c      	adds	r7, #12
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bc80      	pop	{r7}
 80126a6:	4770      	bx	lr

080126a8 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80126b0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	370c      	adds	r7, #12
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bc80      	pop	{r7}
 80126ba:	4770      	bx	lr

080126bc <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80126bc:	b480      	push	{r7}
 80126be:	b083      	sub	sp, #12
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80126c4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	370c      	adds	r7, #12
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bc80      	pop	{r7}
 80126ce:	4770      	bx	lr

080126d0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80126d0:	b480      	push	{r7}
 80126d2:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126d4:	bf00      	nop
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bc80      	pop	{r7}
 80126da:	4770      	bx	lr

080126dc <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	4603      	mov	r3, r0
 80126e4:	6039      	str	r1, [r7, #0]
 80126e6:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80126e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	370c      	adds	r7, #12
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bc80      	pop	{r7}
 80126f2:	4770      	bx	lr

080126f4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80126f4:	b480      	push	{r7}
 80126f6:	b083      	sub	sp, #12
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	4603      	mov	r3, r0
 80126fc:	603a      	str	r2, [r7, #0]
 80126fe:	80fb      	strh	r3, [r7, #6]
 8012700:	460b      	mov	r3, r1
 8012702:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012704:	bf00      	nop
 8012706:	370c      	adds	r7, #12
 8012708:	46bd      	mov	sp, r7
 801270a:	bc80      	pop	{r7}
 801270c:	4770      	bx	lr

0801270e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801270e:	b480      	push	{r7}
 8012710:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012712:	bf00      	nop
 8012714:	46bd      	mov	sp, r7
 8012716:	bc80      	pop	{r7}
 8012718:	4770      	bx	lr

0801271a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801271a:	b480      	push	{r7}
 801271c:	b083      	sub	sp, #12
 801271e:	af00      	add	r7, sp, #0
 8012720:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012722:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012724:	4618      	mov	r0, r3
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	bc80      	pop	{r7}
 801272c:	4770      	bx	lr

0801272e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801272e:	b480      	push	{r7}
 8012730:	b083      	sub	sp, #12
 8012732:	af00      	add	r7, sp, #0
 8012734:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012736:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012738:	4618      	mov	r0, r3
 801273a:	370c      	adds	r7, #12
 801273c:	46bd      	mov	sp, r7
 801273e:	bc80      	pop	{r7}
 8012740:	4770      	bx	lr

08012742 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012742:	b480      	push	{r7}
 8012744:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012746:	bf00      	nop
 8012748:	46bd      	mov	sp, r7
 801274a:	bc80      	pop	{r7}
 801274c:	4770      	bx	lr

0801274e <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801274e:	b480      	push	{r7}
 8012750:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012752:	bf00      	nop
 8012754:	46bd      	mov	sp, r7
 8012756:	bc80      	pop	{r7}
 8012758:	4770      	bx	lr

0801275a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801275a:	b480      	push	{r7}
 801275c:	b085      	sub	sp, #20
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012766:	2300      	movs	r3, #0
 8012768:	81fb      	strh	r3, [r7, #14]
 801276a:	e00a      	b.n	8012782 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801276c:	89fb      	ldrh	r3, [r7, #14]
 801276e:	68ba      	ldr	r2, [r7, #8]
 8012770:	4413      	add	r3, r2
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d001      	beq.n	801277c <IsSlotFree+0x22>
        {
            return false;
 8012778:	2300      	movs	r3, #0
 801277a:	e006      	b.n	801278a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801277c:	89fb      	ldrh	r3, [r7, #14]
 801277e:	3301      	adds	r3, #1
 8012780:	81fb      	strh	r3, [r7, #14]
 8012782:	89fb      	ldrh	r3, [r7, #14]
 8012784:	2b0f      	cmp	r3, #15
 8012786:	d9f1      	bls.n	801276c <IsSlotFree+0x12>
        }
    }
    return true;
 8012788:	2301      	movs	r3, #1
}
 801278a:	4618      	mov	r0, r3
 801278c:	3714      	adds	r7, #20
 801278e:	46bd      	mov	sp, r7
 8012790:	bc80      	pop	{r7}
 8012792:	4770      	bx	lr

08012794 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801279a:	2300      	movs	r3, #0
 801279c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801279e:	e007      	b.n	80127b0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80127a0:	79fb      	ldrb	r3, [r7, #7]
 80127a2:	3301      	adds	r3, #1
 80127a4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	2b0f      	cmp	r3, #15
 80127aa:	d101      	bne.n	80127b0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80127ac:	2300      	movs	r3, #0
 80127ae:	e012      	b.n	80127d6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80127b0:	79fb      	ldrb	r3, [r7, #7]
 80127b2:	011b      	lsls	r3, r3, #4
 80127b4:	3308      	adds	r3, #8
 80127b6:	4a0a      	ldr	r2, [pc, #40]	; (80127e0 <MallocNewMacCommandSlot+0x4c>)
 80127b8:	4413      	add	r3, r2
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7ff ffcd 	bl	801275a <IsSlotFree>
 80127c0:	4603      	mov	r3, r0
 80127c2:	f083 0301 	eor.w	r3, r3, #1
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d1e9      	bne.n	80127a0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80127cc:	79fb      	ldrb	r3, [r7, #7]
 80127ce:	011b      	lsls	r3, r3, #4
 80127d0:	3308      	adds	r3, #8
 80127d2:	4a03      	ldr	r2, [pc, #12]	; (80127e0 <MallocNewMacCommandSlot+0x4c>)
 80127d4:	4413      	add	r3, r2
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	20001c0c 	.word	0x20001c0c

080127e4 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d101      	bne.n	80127f6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80127f2:	2300      	movs	r3, #0
 80127f4:	e005      	b.n	8012802 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80127f6:	2210      	movs	r2, #16
 80127f8:	2100      	movs	r1, #0
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f004 f9bc 	bl	8016b78 <memset1>

    return true;
 8012800:	2301      	movs	r3, #1
}
 8012802:	4618      	mov	r0, r3
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}

0801280a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801280a:	b480      	push	{r7}
 801280c:	b083      	sub	sp, #12
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d101      	bne.n	801281c <LinkedListInit+0x12>
    {
        return false;
 8012818:	2300      	movs	r3, #0
 801281a:	e006      	b.n	801282a <LinkedListInit+0x20>
    }

    list->First = NULL;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2200      	movs	r2, #0
 8012826:	605a      	str	r2, [r3, #4]

    return true;
 8012828:	2301      	movs	r3, #1
}
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	bc80      	pop	{r7}
 8012832:	4770      	bx	lr

08012834 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012834:	b480      	push	{r7}
 8012836:	b083      	sub	sp, #12
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d002      	beq.n	801284a <LinkedListAdd+0x16>
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <LinkedListAdd+0x1a>
    {
        return false;
 801284a:	2300      	movs	r3, #0
 801284c:	e015      	b.n	801287a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d102      	bne.n	801285c <LinkedListAdd+0x28>
    {
        list->First = element;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	683a      	ldr	r2, [r7, #0]
 801285a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d003      	beq.n	801286c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	683a      	ldr	r2, [r7, #0]
 801286a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	2200      	movs	r2, #0
 8012870:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	683a      	ldr	r2, [r7, #0]
 8012876:	605a      	str	r2, [r3, #4]

    return true;
 8012878:	2301      	movs	r3, #1
}
 801287a:	4618      	mov	r0, r3
 801287c:	370c      	adds	r7, #12
 801287e:	46bd      	mov	sp, r7
 8012880:	bc80      	pop	{r7}
 8012882:	4770      	bx	lr

08012884 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <LinkedListGetPrevious+0x16>
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d101      	bne.n	801289e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801289a:	2300      	movs	r3, #0
 801289c:	e016      	b.n	80128cc <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80128a4:	683a      	ldr	r2, [r7, #0]
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d00c      	beq.n	80128c6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80128ac:	e002      	b.n	80128b4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d007      	beq.n	80128ca <LinkedListGetPrevious+0x46>
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	683a      	ldr	r2, [r7, #0]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d1f4      	bne.n	80128ae <LinkedListGetPrevious+0x2a>
 80128c4:	e001      	b.n	80128ca <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80128c6:	2300      	movs	r3, #0
 80128c8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80128ca:	68fb      	ldr	r3, [r7, #12]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3714      	adds	r7, #20
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bc80      	pop	{r7}
 80128d4:	4770      	bx	lr

080128d6 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80128d6:	b580      	push	{r7, lr}
 80128d8:	b084      	sub	sp, #16
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d002      	beq.n	80128ec <LinkedListRemove+0x16>
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d101      	bne.n	80128f0 <LinkedListRemove+0x1a>
    {
        return false;
 80128ec:	2300      	movs	r3, #0
 80128ee:	e020      	b.n	8012932 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80128f0:	6839      	ldr	r1, [r7, #0]
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f7ff ffc6 	bl	8012884 <LinkedListGetPrevious>
 80128f8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	683a      	ldr	r2, [r7, #0]
 8012900:	429a      	cmp	r2, r3
 8012902:	d103      	bne.n	801290c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	683a      	ldr	r2, [r7, #0]
 8012912:	429a      	cmp	r2, r3
 8012914:	d102      	bne.n	801291c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	68fa      	ldr	r2, [r7, #12]
 801291a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d003      	beq.n	801292a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	2200      	movs	r2, #0
 801292e:	601a      	str	r2, [r3, #0]

    return true;
 8012930:	2301      	movs	r3, #1
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801293a:	b480      	push	{r7}
 801293c:	b083      	sub	sp, #12
 801293e:	af00      	add	r7, sp, #0
 8012940:	4603      	mov	r3, r0
 8012942:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012944:	79fb      	ldrb	r3, [r7, #7]
 8012946:	2b05      	cmp	r3, #5
 8012948:	d004      	beq.n	8012954 <IsSticky+0x1a>
 801294a:	2b05      	cmp	r3, #5
 801294c:	db04      	blt.n	8012958 <IsSticky+0x1e>
 801294e:	3b08      	subs	r3, #8
 8012950:	2b02      	cmp	r3, #2
 8012952:	d801      	bhi.n	8012958 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012954:	2301      	movs	r3, #1
 8012956:	e000      	b.n	801295a <IsSticky+0x20>
        default:
            return false;
 8012958:	2300      	movs	r3, #0
    }
}
 801295a:	4618      	mov	r0, r3
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	bc80      	pop	{r7}
 8012962:	4770      	bx	lr

08012964 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012964:	b580      	push	{r7, lr}
 8012966:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012968:	22fc      	movs	r2, #252	; 0xfc
 801296a:	2100      	movs	r1, #0
 801296c:	4804      	ldr	r0, [pc, #16]	; (8012980 <LoRaMacCommandsInit+0x1c>)
 801296e:	f004 f903 	bl	8016b78 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012972:	4803      	ldr	r0, [pc, #12]	; (8012980 <LoRaMacCommandsInit+0x1c>)
 8012974:	f7ff ff49 	bl	801280a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	20001c0c 	.word	0x20001c0c

08012984 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b086      	sub	sp, #24
 8012988:	af00      	add	r7, sp, #0
 801298a:	4603      	mov	r3, r0
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	607a      	str	r2, [r7, #4]
 8012990:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d101      	bne.n	801299c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012998:	2301      	movs	r3, #1
 801299a:	e033      	b.n	8012a04 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801299c:	f7ff fefa 	bl	8012794 <MallocNewMacCommandSlot>
 80129a0:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80129a8:	2302      	movs	r3, #2
 80129aa:	e02b      	b.n	8012a04 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80129ac:	6979      	ldr	r1, [r7, #20]
 80129ae:	4817      	ldr	r0, [pc, #92]	; (8012a0c <LoRaMacCommandsAddCmd+0x88>)
 80129b0:	f7ff ff40 	bl	8012834 <LinkedListAdd>
 80129b4:	4603      	mov	r3, r0
 80129b6:	f083 0301 	eor.w	r3, r3, #1
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d001      	beq.n	80129c4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80129c0:	2305      	movs	r3, #5
 80129c2:	e01f      	b.n	8012a04 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	7bfa      	ldrb	r2, [r7, #15]
 80129c8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	687a      	ldr	r2, [r7, #4]
 80129ce:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	3305      	adds	r3, #5
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	b292      	uxth	r2, r2
 80129d8:	68b9      	ldr	r1, [r7, #8]
 80129da:	4618      	mov	r0, r3
 80129dc:	f004 f891 	bl	8016b02 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80129e0:	7bfb      	ldrb	r3, [r7, #15]
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7ff ffa9 	bl	801293a <IsSticky>
 80129e8:	4603      	mov	r3, r0
 80129ea:	461a      	mov	r2, r3
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80129f0:	4b06      	ldr	r3, [pc, #24]	; (8012a0c <LoRaMacCommandsAddCmd+0x88>)
 80129f2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4413      	add	r3, r2
 80129fa:	3301      	adds	r3, #1
 80129fc:	4a03      	ldr	r2, [pc, #12]	; (8012a0c <LoRaMacCommandsAddCmd+0x88>)
 80129fe:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3718      	adds	r7, #24
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	20001c0c 	.word	0x20001c0c

08012a10 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	e021      	b.n	8012a66 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012a22:	6879      	ldr	r1, [r7, #4]
 8012a24:	4812      	ldr	r0, [pc, #72]	; (8012a70 <LoRaMacCommandsRemoveCmd+0x60>)
 8012a26:	f7ff ff56 	bl	80128d6 <LinkedListRemove>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	f083 0301 	eor.w	r3, r3, #1
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d001      	beq.n	8012a3a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012a36:	2303      	movs	r3, #3
 8012a38:	e015      	b.n	8012a66 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012a3a:	4b0d      	ldr	r3, [pc, #52]	; (8012a70 <LoRaMacCommandsRemoveCmd+0x60>)
 8012a3c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	1ad3      	subs	r3, r2, r3
 8012a46:	3b01      	subs	r3, #1
 8012a48:	4a09      	ldr	r2, [pc, #36]	; (8012a70 <LoRaMacCommandsRemoveCmd+0x60>)
 8012a4a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f7ff fec8 	bl	80127e4 <FreeMacCommandSlot>
 8012a54:	4603      	mov	r3, r0
 8012a56:	f083 0301 	eor.w	r3, r3, #1
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d001      	beq.n	8012a64 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012a60:	2305      	movs	r3, #5
 8012a62:	e000      	b.n	8012a66 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012a64:	2300      	movs	r3, #0
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	20001c0c 	.word	0x20001c0c

08012a74 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012a7a:	4b0f      	ldr	r3, [pc, #60]	; (8012ab8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012a80:	e012      	b.n	8012aa8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	7b1b      	ldrb	r3, [r3, #12]
 8012a86:	f083 0301 	eor.w	r3, r3, #1
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d008      	beq.n	8012aa2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f7ff ffba 	bl	8012a10 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	607b      	str	r3, [r7, #4]
 8012aa0:	e002      	b.n	8012aa8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d1e9      	bne.n	8012a82 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3708      	adds	r7, #8
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	20001c0c 	.word	0x20001c0c

08012abc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012ac2:	4b0e      	ldr	r3, [pc, #56]	; (8012afc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012ac8:	e00f      	b.n	8012aea <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	791b      	ldrb	r3, [r3, #4]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7ff ff30 	bl	801293a <IsSticky>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d002      	beq.n	8012ae6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f7ff ff95 	bl	8012a10 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d1ec      	bne.n	8012aca <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012af0:	2300      	movs	r3, #0
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3708      	adds	r7, #8
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}
 8012afa:	bf00      	nop
 8012afc:	20001c0c 	.word	0x20001c0c

08012b00 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012b00:	b480      	push	{r7}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d101      	bne.n	8012b12 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012b0e:	2301      	movs	r3, #1
 8012b10:	e005      	b.n	8012b1e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012b12:	4b05      	ldr	r3, [pc, #20]	; (8012b28 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012b14:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012b1c:	2300      	movs	r3, #0
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	370c      	adds	r7, #12
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bc80      	pop	{r7}
 8012b26:	4770      	bx	lr
 8012b28:	20001c0c 	.word	0x20001c0c

08012b2c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b088      	sub	sp, #32
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012b38:	4b25      	ldr	r3, [pc, #148]	; (8012bd0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d002      	beq.n	8012b4e <LoRaMacCommandsSerializeCmds+0x22>
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d126      	bne.n	8012b9c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	e039      	b.n	8012bc6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012b52:	7efb      	ldrb	r3, [r7, #27]
 8012b54:	68fa      	ldr	r2, [r7, #12]
 8012b56:	1ad2      	subs	r2, r2, r3
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	689b      	ldr	r3, [r3, #8]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d320      	bcc.n	8012ba4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012b62:	7efb      	ldrb	r3, [r7, #27]
 8012b64:	1c5a      	adds	r2, r3, #1
 8012b66:	76fa      	strb	r2, [r7, #27]
 8012b68:	461a      	mov	r2, r3
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	69fa      	ldr	r2, [r7, #28]
 8012b70:	7912      	ldrb	r2, [r2, #4]
 8012b72:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012b74:	7efb      	ldrb	r3, [r7, #27]
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	18d0      	adds	r0, r2, r3
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	1d59      	adds	r1, r3, #5
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	461a      	mov	r2, r3
 8012b86:	f003 ffbc 	bl	8016b02 <memcpy1>
            itr += curElement->PayloadSize;
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	689b      	ldr	r3, [r3, #8]
 8012b8e:	b2da      	uxtb	r2, r3
 8012b90:	7efb      	ldrb	r3, [r7, #27]
 8012b92:	4413      	add	r3, r2
 8012b94:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1d7      	bne.n	8012b52 <LoRaMacCommandsSerializeCmds+0x26>
 8012ba2:	e009      	b.n	8012bb8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012ba4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012ba6:	e007      	b.n	8012bb8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012bae:	69f8      	ldr	r0, [r7, #28]
 8012bb0:	f7ff ff2e 	bl	8012a10 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1f4      	bne.n	8012ba8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012bbe:	68b8      	ldr	r0, [r7, #8]
 8012bc0:	f7ff ff9e 	bl	8012b00 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3720      	adds	r7, #32
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	20001c0c 	.word	0x20001c0c

08012bd4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b085      	sub	sp, #20
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d101      	bne.n	8012be6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e016      	b.n	8012c14 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012be6:	4b0e      	ldr	r3, [pc, #56]	; (8012c20 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012bf2:	e00b      	b.n	8012c0c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	7b1b      	ldrb	r3, [r3, #12]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d004      	beq.n	8012c06 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2201      	movs	r2, #1
 8012c00:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012c02:	2300      	movs	r3, #0
 8012c04:	e006      	b.n	8012c14 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d1f0      	bne.n	8012bf4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3714      	adds	r7, #20
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bc80      	pop	{r7}
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	20001c0c 	.word	0x20001c0c

08012c24 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012c24:	b480      	push	{r7}
 8012c26:	b085      	sub	sp, #20
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012c32:	79fb      	ldrb	r3, [r7, #7]
 8012c34:	3b02      	subs	r3, #2
 8012c36:	2b11      	cmp	r3, #17
 8012c38:	d850      	bhi.n	8012cdc <LoRaMacCommandsGetCmdSize+0xb8>
 8012c3a:	a201      	add	r2, pc, #4	; (adr r2, 8012c40 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c40:	08012c89 	.word	0x08012c89
 8012c44:	08012c8f 	.word	0x08012c8f
 8012c48:	08012c95 	.word	0x08012c95
 8012c4c:	08012c9b 	.word	0x08012c9b
 8012c50:	08012ca1 	.word	0x08012ca1
 8012c54:	08012ca7 	.word	0x08012ca7
 8012c58:	08012cad 	.word	0x08012cad
 8012c5c:	08012cb3 	.word	0x08012cb3
 8012c60:	08012cb9 	.word	0x08012cb9
 8012c64:	08012cdd 	.word	0x08012cdd
 8012c68:	08012cdd 	.word	0x08012cdd
 8012c6c:	08012cbf 	.word	0x08012cbf
 8012c70:	08012cdd 	.word	0x08012cdd
 8012c74:	08012cdd 	.word	0x08012cdd
 8012c78:	08012cc5 	.word	0x08012cc5
 8012c7c:	08012ccb 	.word	0x08012ccb
 8012c80:	08012cd1 	.word	0x08012cd1
 8012c84:	08012cd7 	.word	0x08012cd7
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012c88:	2303      	movs	r3, #3
 8012c8a:	73fb      	strb	r3, [r7, #15]
            break;
 8012c8c:	e027      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012c8e:	2305      	movs	r3, #5
 8012c90:	73fb      	strb	r3, [r7, #15]
            break;
 8012c92:	e024      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012c94:	2302      	movs	r3, #2
 8012c96:	73fb      	strb	r3, [r7, #15]
            break;
 8012c98:	e021      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012c9a:	2305      	movs	r3, #5
 8012c9c:	73fb      	strb	r3, [r7, #15]
            break;
 8012c9e:	e01e      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	73fb      	strb	r3, [r7, #15]
            break;
 8012ca4:	e01b      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012ca6:	2306      	movs	r3, #6
 8012ca8:	73fb      	strb	r3, [r7, #15]
            break;
 8012caa:	e018      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012cac:	2302      	movs	r3, #2
 8012cae:	73fb      	strb	r3, [r7, #15]
            break;
 8012cb0:	e015      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012cb2:	2302      	movs	r3, #2
 8012cb4:	73fb      	strb	r3, [r7, #15]
            break;
 8012cb6:	e012      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012cb8:	2305      	movs	r3, #5
 8012cba:	73fb      	strb	r3, [r7, #15]
            break;
 8012cbc:	e00f      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012cbe:	2306      	movs	r3, #6
 8012cc0:	73fb      	strb	r3, [r7, #15]
            break;
 8012cc2:	e00c      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	73fb      	strb	r3, [r7, #15]
            break;
 8012cc8:	e009      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012cca:	2305      	movs	r3, #5
 8012ccc:	73fb      	strb	r3, [r7, #15]
            break;
 8012cce:	e006      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012cd0:	2304      	movs	r3, #4
 8012cd2:	73fb      	strb	r3, [r7, #15]
            break;
 8012cd4:	e003      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012cd6:	2304      	movs	r3, #4
 8012cd8:	73fb      	strb	r3, [r7, #15]
            break;
 8012cda:	e000      	b.n	8012cde <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012cdc:	bf00      	nop
        }
    }
    return cidSize;
 8012cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3714      	adds	r7, #20
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bc80      	pop	{r7}
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop

08012cec <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	4a07      	ldr	r2, [pc, #28]	; (8012d14 <IncreaseBufferPointer+0x28>)
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	d102      	bne.n	8012d02 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012cfc:	4b06      	ldr	r3, [pc, #24]	; (8012d18 <IncreaseBufferPointer+0x2c>)
 8012cfe:	607b      	str	r3, [r7, #4]
 8012d00:	e002      	b.n	8012d08 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	3304      	adds	r3, #4
 8012d06:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012d08:	687b      	ldr	r3, [r7, #4]
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bc80      	pop	{r7}
 8012d12:	4770      	bx	lr
 8012d14:	20001d24 	.word	0x20001d24
 8012d18:	20001d14 	.word	0x20001d14

08012d1c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	4603      	mov	r3, r0
 8012d24:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012d26:	79fb      	ldrb	r3, [r7, #7]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d101      	bne.n	8012d30 <IsListEmpty+0x14>
    {
        return true;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	e000      	b.n	8012d32 <IsListEmpty+0x16>
    }
    return false;
 8012d30:	2300      	movs	r3, #0
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	370c      	adds	r7, #12
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bc80      	pop	{r7}
 8012d3a:	4770      	bx	lr

08012d3c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	4603      	mov	r3, r0
 8012d44:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012d46:	79fb      	ldrb	r3, [r7, #7]
 8012d48:	2b04      	cmp	r3, #4
 8012d4a:	d901      	bls.n	8012d50 <IsListFull+0x14>
    {
        return true;
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	e000      	b.n	8012d52 <IsListFull+0x16>
    }
    return false;
 8012d50:	2300      	movs	r3, #0
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	370c      	adds	r7, #12
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bc80      	pop	{r7}
 8012d5a:	4770      	bx	lr

08012d5c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	4603      	mov	r3, r0
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	607a      	str	r2, [r7, #4]
 8012d68:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012d6e:	4b13      	ldr	r3, [pc, #76]	; (8012dbc <GetElement+0x60>)
 8012d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7ff ffd1 	bl	8012d1c <IsListEmpty>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d001      	beq.n	8012d84 <GetElement+0x28>
    {
        return NULL;
 8012d80:	2300      	movs	r3, #0
 8012d82:	e017      	b.n	8012db4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012d84:	2300      	movs	r3, #0
 8012d86:	74fb      	strb	r3, [r7, #19]
 8012d88:	e00d      	b.n	8012da6 <GetElement+0x4a>
    {
        if( element->Request == request )
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	7bfa      	ldrb	r2, [r7, #15]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d101      	bne.n	8012d98 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	e00d      	b.n	8012db4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012d98:	6978      	ldr	r0, [r7, #20]
 8012d9a:	f7ff ffa7 	bl	8012cec <IncreaseBufferPointer>
 8012d9e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012da0:	7cfb      	ldrb	r3, [r7, #19]
 8012da2:	3301      	adds	r3, #1
 8012da4:	74fb      	strb	r3, [r7, #19]
 8012da6:	4b05      	ldr	r3, [pc, #20]	; (8012dbc <GetElement+0x60>)
 8012da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012dac:	7cfa      	ldrb	r2, [r7, #19]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d3eb      	bcc.n	8012d8a <GetElement+0x2e>
    }

    return NULL;
 8012db2:	2300      	movs	r3, #0
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3718      	adds	r7, #24
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	20001d08 	.word	0x20001d08

08012dc0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012dc8:	4a0c      	ldr	r2, [pc, #48]	; (8012dfc <LoRaMacConfirmQueueInit+0x3c>)
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012dce:	4b0b      	ldr	r3, [pc, #44]	; (8012dfc <LoRaMacConfirmQueueInit+0x3c>)
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012dd6:	4b09      	ldr	r3, [pc, #36]	; (8012dfc <LoRaMacConfirmQueueInit+0x3c>)
 8012dd8:	4a09      	ldr	r2, [pc, #36]	; (8012e00 <LoRaMacConfirmQueueInit+0x40>)
 8012dda:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012ddc:	4b07      	ldr	r3, [pc, #28]	; (8012dfc <LoRaMacConfirmQueueInit+0x3c>)
 8012dde:	4a08      	ldr	r2, [pc, #32]	; (8012e00 <LoRaMacConfirmQueueInit+0x40>)
 8012de0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012de2:	2214      	movs	r2, #20
 8012de4:	21ff      	movs	r1, #255	; 0xff
 8012de6:	4806      	ldr	r0, [pc, #24]	; (8012e00 <LoRaMacConfirmQueueInit+0x40>)
 8012de8:	f003 fec6 	bl	8016b78 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012dec:	4b03      	ldr	r3, [pc, #12]	; (8012dfc <LoRaMacConfirmQueueInit+0x3c>)
 8012dee:	2201      	movs	r2, #1
 8012df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012df4:	bf00      	nop
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	20001d08 	.word	0x20001d08
 8012e00:	20001d14 	.word	0x20001d14

08012e04 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012e0c:	4b19      	ldr	r3, [pc, #100]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff ff92 	bl	8012d3c <IsListFull>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d001      	beq.n	8012e22 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	e023      	b.n	8012e6a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012e22:	4b14      	ldr	r3, [pc, #80]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e24:	689b      	ldr	r3, [r3, #8]
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	7812      	ldrb	r2, [r2, #0]
 8012e2a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012e2c:	4b11      	ldr	r3, [pc, #68]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e2e:	689b      	ldr	r3, [r3, #8]
 8012e30:	687a      	ldr	r2, [r7, #4]
 8012e32:	7852      	ldrb	r2, [r2, #1]
 8012e34:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012e36:	4b0f      	ldr	r3, [pc, #60]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e38:	689b      	ldr	r3, [r3, #8]
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	78d2      	ldrb	r2, [r2, #3]
 8012e3e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012e40:	4b0c      	ldr	r3, [pc, #48]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e42:	689b      	ldr	r3, [r3, #8]
 8012e44:	2200      	movs	r2, #0
 8012e46:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012e48:	4b0a      	ldr	r3, [pc, #40]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	4b08      	ldr	r3, [pc, #32]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e54:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012e58:	4b06      	ldr	r3, [pc, #24]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e5a:	689b      	ldr	r3, [r3, #8]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7ff ff45 	bl	8012cec <IncreaseBufferPointer>
 8012e62:	4603      	mov	r3, r0
 8012e64:	4a03      	ldr	r2, [pc, #12]	; (8012e74 <LoRaMacConfirmQueueAdd+0x70>)
 8012e66:	6093      	str	r3, [r2, #8]

    return true;
 8012e68:	2301      	movs	r3, #1
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3708      	adds	r7, #8
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20001d08 	.word	0x20001d08

08012e78 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012e7c:	4b0e      	ldr	r3, [pc, #56]	; (8012eb8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7ff ff4a 	bl	8012d1c <IsListEmpty>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d001      	beq.n	8012e92 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e010      	b.n	8012eb4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012e92:	4b09      	ldr	r3, [pc, #36]	; (8012eb8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e98:	3b01      	subs	r3, #1
 8012e9a:	b2da      	uxtb	r2, r3
 8012e9c:	4b06      	ldr	r3, [pc, #24]	; (8012eb8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012e9e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012ea2:	4b05      	ldr	r3, [pc, #20]	; (8012eb8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff ff20 	bl	8012cec <IncreaseBufferPointer>
 8012eac:	4603      	mov	r3, r0
 8012eae:	4a02      	ldr	r2, [pc, #8]	; (8012eb8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012eb0:	6053      	str	r3, [r2, #4]

    return true;
 8012eb2:	2301      	movs	r3, #1
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	20001d08 	.word	0x20001d08

08012ebc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	460a      	mov	r2, r1
 8012ec6:	71fb      	strb	r3, [r7, #7]
 8012ec8:	4613      	mov	r3, r2
 8012eca:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012ed0:	4b10      	ldr	r3, [pc, #64]	; (8012f14 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7ff ff20 	bl	8012d1c <IsListEmpty>
 8012edc:	4603      	mov	r3, r0
 8012ede:	f083 0301 	eor.w	r3, r3, #1
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d011      	beq.n	8012f0c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012ee8:	4b0a      	ldr	r3, [pc, #40]	; (8012f14 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012eea:	6859      	ldr	r1, [r3, #4]
 8012eec:	4b09      	ldr	r3, [pc, #36]	; (8012f14 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012eee:	689a      	ldr	r2, [r3, #8]
 8012ef0:	79bb      	ldrb	r3, [r7, #6]
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7ff ff32 	bl	8012d5c <GetElement>
 8012ef8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d005      	beq.n	8012f0c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	79fa      	ldrb	r2, [r7, #7]
 8012f04:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2201      	movs	r2, #1
 8012f0a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012f0c:	bf00      	nop
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	20001d08 	.word	0x20001d08

08012f18 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	4603      	mov	r3, r0
 8012f20:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012f22:	2300      	movs	r3, #0
 8012f24:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012f26:	4b10      	ldr	r3, [pc, #64]	; (8012f68 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7ff fef5 	bl	8012d1c <IsListEmpty>
 8012f32:	4603      	mov	r3, r0
 8012f34:	f083 0301 	eor.w	r3, r3, #1
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d00e      	beq.n	8012f5c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012f3e:	4b0a      	ldr	r3, [pc, #40]	; (8012f68 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012f40:	6859      	ldr	r1, [r3, #4]
 8012f42:	4b09      	ldr	r3, [pc, #36]	; (8012f68 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012f44:	689a      	ldr	r2, [r3, #8]
 8012f46:	79fb      	ldrb	r3, [r7, #7]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7ff ff07 	bl	8012d5c <GetElement>
 8012f4e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d002      	beq.n	8012f5c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	785b      	ldrb	r3, [r3, #1]
 8012f5a:	e000      	b.n	8012f5e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012f5c:	2301      	movs	r3, #1
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3710      	adds	r7, #16
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	20001d08 	.word	0x20001d08

08012f6c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b084      	sub	sp, #16
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	4603      	mov	r3, r0
 8012f74:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012f76:	4b16      	ldr	r3, [pc, #88]	; (8012fd0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012f7c:	4a14      	ldr	r2, [pc, #80]	; (8012fd0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012f84:	4b12      	ldr	r3, [pc, #72]	; (8012fd0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7ff fec6 	bl	8012d1c <IsListEmpty>
 8012f90:	4603      	mov	r3, r0
 8012f92:	f083 0301 	eor.w	r3, r3, #1
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d015      	beq.n	8012fc8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	79fa      	ldrb	r2, [r7, #7]
 8012fa0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	78db      	ldrb	r3, [r3, #3]
 8012fa6:	f083 0301 	eor.w	r3, r3, #1
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d002      	beq.n	8012fb6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012fb6:	68f8      	ldr	r0, [r7, #12]
 8012fb8:	f7ff fe98 	bl	8012cec <IncreaseBufferPointer>
 8012fbc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012fbe:	4b04      	ldr	r3, [pc, #16]	; (8012fd0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	68fa      	ldr	r2, [r7, #12]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d1e9      	bne.n	8012f9c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012fc8:	bf00      	nop
 8012fca:	3710      	adds	r7, #16
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	20001d08 	.word	0x20001d08

08012fd4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	4603      	mov	r3, r0
 8012fdc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012fde:	4b09      	ldr	r3, [pc, #36]	; (8013004 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012fe0:	6859      	ldr	r1, [r3, #4]
 8012fe2:	4b08      	ldr	r3, [pc, #32]	; (8013004 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012fe4:	689a      	ldr	r2, [r3, #8]
 8012fe6:	79fb      	ldrb	r3, [r7, #7]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7ff feb7 	bl	8012d5c <GetElement>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d001      	beq.n	8012ff8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	e000      	b.n	8012ffa <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012ff8:	2300      	movs	r3, #0
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3708      	adds	r7, #8
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	20001d08 	.word	0x20001d08

08013008 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013010:	4b22      	ldr	r3, [pc, #136]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013016:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013018:	2300      	movs	r3, #0
 801301a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 801301c:	2300      	movs	r3, #0
 801301e:	73fb      	strb	r3, [r7, #15]
 8013020:	e032      	b.n	8013088 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013022:	4b1e      	ldr	r3, [pc, #120]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	781a      	ldrb	r2, [r3, #0]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801302c:	4b1b      	ldr	r3, [pc, #108]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	785a      	ldrb	r2, [r3, #1]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013036:	4b19      	ldr	r3, [pc, #100]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	789b      	ldrb	r3, [r3, #2]
 801303c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801303e:	7b7b      	ldrb	r3, [r7, #13]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d005      	beq.n	8013050 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013044:	4b15      	ldr	r3, [pc, #84]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	4798      	blx	r3
 801304e:	e00b      	b.n	8013068 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013050:	4b12      	ldr	r3, [pc, #72]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013058:	4b10      	ldr	r3, [pc, #64]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	785b      	ldrb	r3, [r3, #1]
 801305e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013060:	4b0e      	ldr	r3, [pc, #56]	; (801309c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	78db      	ldrb	r3, [r3, #3]
 8013066:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013068:	f7ff ff06 	bl	8012e78 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801306c:	7b7b      	ldrb	r3, [r7, #13]
 801306e:	f083 0301 	eor.w	r3, r3, #1
 8013072:	b2db      	uxtb	r3, r3
 8013074:	2b00      	cmp	r3, #0
 8013076:	d004      	beq.n	8013082 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013078:	f107 0308 	add.w	r3, r7, #8
 801307c:	4618      	mov	r0, r3
 801307e:	f7ff fec1 	bl	8012e04 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013082:	7bfb      	ldrb	r3, [r7, #15]
 8013084:	3301      	adds	r3, #1
 8013086:	73fb      	strb	r3, [r7, #15]
 8013088:	7bfa      	ldrb	r2, [r7, #15]
 801308a:	7bbb      	ldrb	r3, [r7, #14]
 801308c:	429a      	cmp	r2, r3
 801308e:	d3c8      	bcc.n	8013022 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013090:	bf00      	nop
 8013092:	bf00      	nop
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	20001d08 	.word	0x20001d08

080130a0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80130a0:	b480      	push	{r7}
 80130a2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80130a4:	4b03      	ldr	r3, [pc, #12]	; (80130b4 <LoRaMacConfirmQueueGetCnt+0x14>)
 80130a6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bc80      	pop	{r7}
 80130b0:	4770      	bx	lr
 80130b2:	bf00      	nop
 80130b4:	20001d08 	.word	0x20001d08

080130b8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80130bc:	4b06      	ldr	r3, [pc, #24]	; (80130d8 <LoRaMacConfirmQueueIsFull+0x20>)
 80130be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7ff fe3a 	bl	8012d3c <IsListFull>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d001      	beq.n	80130d2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80130ce:	2301      	movs	r3, #1
 80130d0:	e000      	b.n	80130d4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80130d2:	2300      	movs	r3, #0
    }
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	20001d08 	.word	0x20001d08

080130dc <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b08e      	sub	sp, #56	; 0x38
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	607b      	str	r3, [r7, #4]
 80130e6:	460b      	mov	r3, r1
 80130e8:	817b      	strh	r3, [r7, #10]
 80130ea:	4613      	mov	r3, r2
 80130ec:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d101      	bne.n	80130f8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130f4:	230a      	movs	r3, #10
 80130f6:	e086      	b.n	8013206 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80130f8:	2300      	movs	r3, #0
 80130fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80130fe:	2301      	movs	r3, #1
 8013100:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013102:	2300      	movs	r3, #0
 8013104:	623b      	str	r3, [r7, #32]
 8013106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801310a:	2200      	movs	r2, #0
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	605a      	str	r2, [r3, #4]
 8013110:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013112:	2300      	movs	r3, #0
 8013114:	613b      	str	r3, [r7, #16]
 8013116:	f107 0314 	add.w	r3, r7, #20
 801311a:	2200      	movs	r2, #0
 801311c:	601a      	str	r2, [r3, #0]
 801311e:	605a      	str	r2, [r3, #4]
 8013120:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013122:	2301      	movs	r3, #1
 8013124:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013126:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801312a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	b2db      	uxtb	r3, r3
 8013130:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	0a1b      	lsrs	r3, r3, #8
 8013136:	b2db      	uxtb	r3, r3
 8013138:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	0c1b      	lsrs	r3, r3, #16
 801313e:	b2db      	uxtb	r3, r3
 8013140:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	0e1b      	lsrs	r3, r3, #24
 8013146:	b2db      	uxtb	r3, r3
 8013148:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801314a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801314c:	b2db      	uxtb	r3, r3
 801314e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013152:	0a1b      	lsrs	r3, r3, #8
 8013154:	b2db      	uxtb	r3, r3
 8013156:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801315a:	0c1b      	lsrs	r3, r3, #16
 801315c:	b2db      	uxtb	r3, r3
 801315e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013162:	0e1b      	lsrs	r3, r3, #24
 8013164:	b2db      	uxtb	r3, r3
 8013166:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013168:	e048      	b.n	80131fc <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801316a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801316c:	b2db      	uxtb	r3, r3
 801316e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013170:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013172:	3301      	adds	r3, #1
 8013174:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013176:	f107 0320 	add.w	r3, r7, #32
 801317a:	7a7a      	ldrb	r2, [r7, #9]
 801317c:	f107 0010 	add.w	r0, r7, #16
 8013180:	2110      	movs	r1, #16
 8013182:	f7f9 f842 	bl	800c20a <SecureElementAesEncrypt>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d001      	beq.n	8013190 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801318c:	230f      	movs	r3, #15
 801318e:	e03a      	b.n	8013206 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013190:	2300      	movs	r3, #0
 8013192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013196:	e01e      	b.n	80131d6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013198:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801319c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80131a0:	4413      	add	r3, r2
 80131a2:	461a      	mov	r2, r3
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	4413      	add	r3, r2
 80131a8:	7819      	ldrb	r1, [r3, #0]
 80131aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80131ae:	3338      	adds	r3, #56	; 0x38
 80131b0:	443b      	add	r3, r7
 80131b2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80131b6:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80131ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80131be:	4403      	add	r3, r0
 80131c0:	4618      	mov	r0, r3
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	4403      	add	r3, r0
 80131c6:	404a      	eors	r2, r1
 80131c8:	b2d2      	uxtb	r2, r2
 80131ca:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80131cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80131d0:	3301      	adds	r3, #1
 80131d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80131d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80131da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80131de:	2a10      	cmp	r2, #16
 80131e0:	bfa8      	it	ge
 80131e2:	2210      	movge	r2, #16
 80131e4:	b212      	sxth	r2, r2
 80131e6:	4293      	cmp	r3, r2
 80131e8:	dbd6      	blt.n	8013198 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80131ea:	897b      	ldrh	r3, [r7, #10]
 80131ec:	3b10      	subs	r3, #16
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80131f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131f6:	3310      	adds	r3, #16
 80131f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80131fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013200:	2b00      	cmp	r3, #0
 8013202:	dcb2      	bgt.n	801316a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013204:	2300      	movs	r3, #0
}
 8013206:	4618      	mov	r0, r3
 8013208:	3738      	adds	r7, #56	; 0x38
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}

0801320e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801320e:	b490      	push	{r4, r7}
 8013210:	b082      	sub	sp, #8
 8013212:	af00      	add	r7, sp, #0
 8013214:	4604      	mov	r4, r0
 8013216:	4608      	mov	r0, r1
 8013218:	4611      	mov	r1, r2
 801321a:	461a      	mov	r2, r3
 801321c:	4623      	mov	r3, r4
 801321e:	80fb      	strh	r3, [r7, #6]
 8013220:	4603      	mov	r3, r0
 8013222:	717b      	strb	r3, [r7, #5]
 8013224:	460b      	mov	r3, r1
 8013226:	713b      	strb	r3, [r7, #4]
 8013228:	4613      	mov	r3, r2
 801322a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d101      	bne.n	8013236 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013232:	230a      	movs	r3, #10
 8013234:	e04e      	b.n	80132d4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013236:	69bb      	ldr	r3, [r7, #24]
 8013238:	2249      	movs	r2, #73	; 0x49
 801323a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	3301      	adds	r3, #1
 8013240:	2200      	movs	r2, #0
 8013242:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013244:	69bb      	ldr	r3, [r7, #24]
 8013246:	3302      	adds	r3, #2
 8013248:	2200      	movs	r2, #0
 801324a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	3303      	adds	r3, #3
 8013250:	2200      	movs	r2, #0
 8013252:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	3304      	adds	r3, #4
 8013258:	2200      	movs	r2, #0
 801325a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	3305      	adds	r3, #5
 8013260:	78fa      	ldrb	r2, [r7, #3]
 8013262:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013264:	69bb      	ldr	r3, [r7, #24]
 8013266:	3306      	adds	r3, #6
 8013268:	693a      	ldr	r2, [r7, #16]
 801326a:	b2d2      	uxtb	r2, r2
 801326c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	0a1a      	lsrs	r2, r3, #8
 8013272:	69bb      	ldr	r3, [r7, #24]
 8013274:	3307      	adds	r3, #7
 8013276:	b2d2      	uxtb	r2, r2
 8013278:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	0c1a      	lsrs	r2, r3, #16
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	3308      	adds	r3, #8
 8013282:	b2d2      	uxtb	r2, r2
 8013284:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	0e1a      	lsrs	r2, r3, #24
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	3309      	adds	r3, #9
 801328e:	b2d2      	uxtb	r2, r2
 8013290:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	330a      	adds	r3, #10
 8013296:	697a      	ldr	r2, [r7, #20]
 8013298:	b2d2      	uxtb	r2, r2
 801329a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	0a1a      	lsrs	r2, r3, #8
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	330b      	adds	r3, #11
 80132a4:	b2d2      	uxtb	r2, r2
 80132a6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	0c1a      	lsrs	r2, r3, #16
 80132ac:	69bb      	ldr	r3, [r7, #24]
 80132ae:	330c      	adds	r3, #12
 80132b0:	b2d2      	uxtb	r2, r2
 80132b2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	0e1a      	lsrs	r2, r3, #24
 80132b8:	69bb      	ldr	r3, [r7, #24]
 80132ba:	330d      	adds	r3, #13
 80132bc:	b2d2      	uxtb	r2, r2
 80132be:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80132c0:	69bb      	ldr	r3, [r7, #24]
 80132c2:	330e      	adds	r3, #14
 80132c4:	2200      	movs	r2, #0
 80132c6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	330f      	adds	r3, #15
 80132cc:	88fa      	ldrh	r2, [r7, #6]
 80132ce:	b2d2      	uxtb	r2, r2
 80132d0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80132d2:	2300      	movs	r3, #0
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3708      	adds	r7, #8
 80132d8:	46bd      	mov	sp, r7
 80132da:	bc90      	pop	{r4, r7}
 80132dc:	4770      	bx	lr

080132de <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80132de:	b590      	push	{r4, r7, lr}
 80132e0:	b08b      	sub	sp, #44	; 0x2c
 80132e2:	af04      	add	r7, sp, #16
 80132e4:	6078      	str	r0, [r7, #4]
 80132e6:	4608      	mov	r0, r1
 80132e8:	4611      	mov	r1, r2
 80132ea:	461a      	mov	r2, r3
 80132ec:	4603      	mov	r3, r0
 80132ee:	807b      	strh	r3, [r7, #2]
 80132f0:	460b      	mov	r3, r1
 80132f2:	707b      	strb	r3, [r7, #1]
 80132f4:	4613      	mov	r3, r2
 80132f6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d002      	beq.n	8013304 <ComputeCmacB0+0x26>
 80132fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013300:	2b00      	cmp	r3, #0
 8013302:	d101      	bne.n	8013308 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013304:	230a      	movs	r3, #10
 8013306:	e024      	b.n	8013352 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013308:	887b      	ldrh	r3, [r7, #2]
 801330a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801330e:	d901      	bls.n	8013314 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013310:	230e      	movs	r3, #14
 8013312:	e01e      	b.n	8013352 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013314:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8013318:	783a      	ldrb	r2, [r7, #0]
 801331a:	7879      	ldrb	r1, [r7, #1]
 801331c:	8878      	ldrh	r0, [r7, #2]
 801331e:	f107 0308 	add.w	r3, r7, #8
 8013322:	9302      	str	r3, [sp, #8]
 8013324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	4623      	mov	r3, r4
 801332e:	f7ff ff6e 	bl	801320e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013332:	7879      	ldrb	r1, [r7, #1]
 8013334:	887a      	ldrh	r2, [r7, #2]
 8013336:	f107 0008 	add.w	r0, r7, #8
 801333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801333c:	9300      	str	r3, [sp, #0]
 801333e:	460b      	mov	r3, r1
 8013340:	6879      	ldr	r1, [r7, #4]
 8013342:	f7f8 ff15 	bl	800c170 <SecureElementComputeAesCmac>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d001      	beq.n	8013350 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801334c:	230f      	movs	r3, #15
 801334e:	e000      	b.n	8013352 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013350:	2300      	movs	r3, #0
}
 8013352:	4618      	mov	r0, r3
 8013354:	371c      	adds	r7, #28
 8013356:	46bd      	mov	sp, r7
 8013358:	bd90      	pop	{r4, r7, pc}

0801335a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801335a:	b590      	push	{r4, r7, lr}
 801335c:	b0cd      	sub	sp, #308	; 0x134
 801335e:	af04      	add	r7, sp, #16
 8013360:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8013364:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8013368:	6020      	str	r0, [r4, #0]
 801336a:	460c      	mov	r4, r1
 801336c:	4610      	mov	r0, r2
 801336e:	4619      	mov	r1, r3
 8013370:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013374:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013378:	4622      	mov	r2, r4
 801337a:	801a      	strh	r2, [r3, #0]
 801337c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013380:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013384:	4602      	mov	r2, r0
 8013386:	701a      	strb	r2, [r3, #0]
 8013388:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801338c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013390:	460a      	mov	r2, r1
 8013392:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013394:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013398:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d101      	bne.n	80133a6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133a2:	230a      	movs	r3, #10
 80133a4:	e063      	b.n	801346e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80133a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133aa:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80133ae:	881b      	ldrh	r3, [r3, #0]
 80133b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133b4:	d901      	bls.n	80133ba <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80133b6:	230e      	movs	r3, #14
 80133b8:	e059      	b.n	801346e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80133ba:	f107 030c 	add.w	r3, r7, #12
 80133be:	f44f 7288 	mov.w	r2, #272	; 0x110
 80133c2:	2100      	movs	r1, #0
 80133c4:	4618      	mov	r0, r3
 80133c6:	f003 fbd7 	bl	8016b78 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80133ca:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80133ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133d6:	781a      	ldrb	r2, [r3, #0]
 80133d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133dc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80133e0:	7819      	ldrb	r1, [r3, #0]
 80133e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133e6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80133ea:	8818      	ldrh	r0, [r3, #0]
 80133ec:	f107 030c 	add.w	r3, r7, #12
 80133f0:	9302      	str	r3, [sp, #8]
 80133f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80133f6:	9301      	str	r3, [sp, #4]
 80133f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80133fc:	9300      	str	r3, [sp, #0]
 80133fe:	4623      	mov	r3, r4
 8013400:	f7ff ff05 	bl	801320e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013404:	f107 030c 	add.w	r3, r7, #12
 8013408:	3310      	adds	r3, #16
 801340a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801340e:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8013412:	8812      	ldrh	r2, [r2, #0]
 8013414:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8013418:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801341c:	6809      	ldr	r1, [r1, #0]
 801341e:	4618      	mov	r0, r3
 8013420:	f003 fb6f 	bl	8016b02 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013424:	2306      	movs	r3, #6
 8013426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801342a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801342e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013432:	881b      	ldrh	r3, [r3, #0]
 8013434:	3310      	adds	r3, #16
 8013436:	b299      	uxth	r1, r3
 8013438:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801343c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	f107 000c 	add.w	r0, r7, #12
 8013446:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801344a:	f7f8 feaf 	bl	800c1ac <SecureElementVerifyAesCmac>
 801344e:	4603      	mov	r3, r0
 8013450:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013458:	2b00      	cmp	r3, #0
 801345a:	d101      	bne.n	8013460 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801345c:	2300      	movs	r3, #0
 801345e:	e006      	b.n	801346e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013460:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013464:	2b01      	cmp	r3, #1
 8013466:	d101      	bne.n	801346c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013468:	2301      	movs	r3, #1
 801346a:	e000      	b.n	801346e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801346c:	230f      	movs	r3, #15
}
 801346e:	4618      	mov	r0, r3
 8013470:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8013474:	46bd      	mov	sp, r7
 8013476:	bd90      	pop	{r4, r7, pc}

08013478 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
 801347e:	4603      	mov	r3, r0
 8013480:	6039      	str	r1, [r7, #0]
 8013482:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013484:	2300      	movs	r3, #0
 8013486:	73fb      	strb	r3, [r7, #15]
 8013488:	e011      	b.n	80134ae <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801348a:	7bfb      	ldrb	r3, [r7, #15]
 801348c:	4a0c      	ldr	r2, [pc, #48]	; (80134c0 <GetKeyAddrItem+0x48>)
 801348e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013492:	79fa      	ldrb	r2, [r7, #7]
 8013494:	429a      	cmp	r2, r3
 8013496:	d107      	bne.n	80134a8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013498:	7bfb      	ldrb	r3, [r7, #15]
 801349a:	009b      	lsls	r3, r3, #2
 801349c:	4a08      	ldr	r2, [pc, #32]	; (80134c0 <GetKeyAddrItem+0x48>)
 801349e:	441a      	add	r2, r3
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80134a4:	2300      	movs	r3, #0
 80134a6:	e006      	b.n	80134b6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80134a8:	7bfb      	ldrb	r3, [r7, #15]
 80134aa:	3301      	adds	r3, #1
 80134ac:	73fb      	strb	r3, [r7, #15]
 80134ae:	7bfb      	ldrb	r3, [r7, #15]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d9ea      	bls.n	801348a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80134b4:	230c      	movs	r3, #12
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3714      	adds	r7, #20
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bc80      	pop	{r7}
 80134be:	4770      	bx	lr
 80134c0:	20000118 	.word	0x20000118

080134c4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b088      	sub	sp, #32
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60b9      	str	r1, [r7, #8]
 80134cc:	607a      	str	r2, [r7, #4]
 80134ce:	461a      	mov	r2, r3
 80134d0:	4603      	mov	r3, r0
 80134d2:	73fb      	strb	r3, [r7, #15]
 80134d4:	4613      	mov	r3, r2
 80134d6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80134d8:	2300      	movs	r3, #0
 80134da:	613b      	str	r3, [r7, #16]
 80134dc:	f107 0314 	add.w	r3, r7, #20
 80134e0:	2200      	movs	r2, #0
 80134e2:	601a      	str	r2, [r3, #0]
 80134e4:	605a      	str	r2, [r3, #4]
 80134e6:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80134e8:	7bfb      	ldrb	r3, [r7, #15]
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	d002      	beq.n	80134f4 <DeriveSessionKey10x+0x30>
 80134ee:	2b03      	cmp	r3, #3
 80134f0:	d003      	beq.n	80134fa <DeriveSessionKey10x+0x36>
 80134f2:	e005      	b.n	8013500 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80134f4:	2301      	movs	r3, #1
 80134f6:	743b      	strb	r3, [r7, #16]
            break;
 80134f8:	e004      	b.n	8013504 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80134fa:	2302      	movs	r3, #2
 80134fc:	743b      	strb	r3, [r7, #16]
            break;
 80134fe:	e001      	b.n	8013504 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013500:	230b      	movs	r3, #11
 8013502:	e02a      	b.n	801355a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	b2db      	uxtb	r3, r3
 8013508:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	0a1b      	lsrs	r3, r3, #8
 801350e:	b2db      	uxtb	r3, r3
 8013510:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	0c1b      	lsrs	r3, r3, #16
 8013516:	b2db      	uxtb	r3, r3
 8013518:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	b2db      	uxtb	r3, r3
 801351e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	0a1b      	lsrs	r3, r3, #8
 8013524:	b2db      	uxtb	r3, r3
 8013526:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	0c1b      	lsrs	r3, r3, #16
 801352c:	b2db      	uxtb	r3, r3
 801352e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013530:	89bb      	ldrh	r3, [r7, #12]
 8013532:	b2db      	uxtb	r3, r3
 8013534:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013536:	89bb      	ldrh	r3, [r7, #12]
 8013538:	0a1b      	lsrs	r3, r3, #8
 801353a:	b29b      	uxth	r3, r3
 801353c:	b2db      	uxtb	r3, r3
 801353e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013540:	7bfa      	ldrb	r2, [r7, #15]
 8013542:	f107 0310 	add.w	r3, r7, #16
 8013546:	2101      	movs	r1, #1
 8013548:	4618      	mov	r0, r3
 801354a:	f7f8 fec5 	bl	800c2d8 <SecureElementDeriveAndStoreKey>
 801354e:	4603      	mov	r3, r0
 8013550:	2b00      	cmp	r3, #0
 8013552:	d001      	beq.n	8013558 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013554:	230f      	movs	r3, #15
 8013556:	e000      	b.n	801355a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013558:	2300      	movs	r3, #0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3720      	adds	r7, #32
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
	...

08013564 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013564:	b480      	push	{r7}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
 801356a:	4603      	mov	r3, r0
 801356c:	6039      	str	r1, [r7, #0]
 801356e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d101      	bne.n	801357a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013576:	230a      	movs	r3, #10
 8013578:	e03b      	b.n	80135f2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801357a:	79fb      	ldrb	r3, [r7, #7]
 801357c:	3b01      	subs	r3, #1
 801357e:	2b03      	cmp	r3, #3
 8013580:	d834      	bhi.n	80135ec <GetLastFcntDown+0x88>
 8013582:	a201      	add	r2, pc, #4	; (adr r2, 8013588 <GetLastFcntDown+0x24>)
 8013584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013588:	08013599 	.word	0x08013599
 801358c:	080135b1 	.word	0x080135b1
 8013590:	080135c9 	.word	0x080135c9
 8013594:	080135e1 	.word	0x080135e1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013598:	4b18      	ldr	r3, [pc, #96]	; (80135fc <GetLastFcntDown+0x98>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	691a      	ldr	r2, [r3, #16]
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80135a2:	4b16      	ldr	r3, [pc, #88]	; (80135fc <GetLastFcntDown+0x98>)
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	4b15      	ldr	r3, [pc, #84]	; (80135fc <GetLastFcntDown+0x98>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	6912      	ldr	r2, [r2, #16]
 80135ac:	621a      	str	r2, [r3, #32]
            break;
 80135ae:	e01f      	b.n	80135f0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80135b0:	4b12      	ldr	r3, [pc, #72]	; (80135fc <GetLastFcntDown+0x98>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	695a      	ldr	r2, [r3, #20]
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80135ba:	4b10      	ldr	r3, [pc, #64]	; (80135fc <GetLastFcntDown+0x98>)
 80135bc:	681a      	ldr	r2, [r3, #0]
 80135be:	4b0f      	ldr	r3, [pc, #60]	; (80135fc <GetLastFcntDown+0x98>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	6952      	ldr	r2, [r2, #20]
 80135c4:	621a      	str	r2, [r3, #32]
            break;
 80135c6:	e013      	b.n	80135f0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80135c8:	4b0c      	ldr	r3, [pc, #48]	; (80135fc <GetLastFcntDown+0x98>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	699a      	ldr	r2, [r3, #24]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80135d2:	4b0a      	ldr	r3, [pc, #40]	; (80135fc <GetLastFcntDown+0x98>)
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	4b09      	ldr	r3, [pc, #36]	; (80135fc <GetLastFcntDown+0x98>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	6992      	ldr	r2, [r2, #24]
 80135dc:	621a      	str	r2, [r3, #32]
            break;
 80135de:	e007      	b.n	80135f0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80135e0:	4b06      	ldr	r3, [pc, #24]	; (80135fc <GetLastFcntDown+0x98>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	69da      	ldr	r2, [r3, #28]
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	601a      	str	r2, [r3, #0]
            break;
 80135ea:	e001      	b.n	80135f0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80135ec:	2305      	movs	r3, #5
 80135ee:	e000      	b.n	80135f2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80135f0:	2300      	movs	r3, #0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	370c      	adds	r7, #12
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bc80      	pop	{r7}
 80135fa:	4770      	bx	lr
 80135fc:	20001d2c 	.word	0x20001d2c

08013600 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b084      	sub	sp, #16
 8013604:	af00      	add	r7, sp, #0
 8013606:	4603      	mov	r3, r0
 8013608:	6039      	str	r1, [r7, #0]
 801360a:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 801360c:	2300      	movs	r3, #0
 801360e:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013610:	f107 020c 	add.w	r2, r7, #12
 8013614:	79fb      	ldrb	r3, [r7, #7]
 8013616:	4611      	mov	r1, r2
 8013618:	4618      	mov	r0, r3
 801361a:	f7ff ffa3 	bl	8013564 <GetLastFcntDown>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d001      	beq.n	8013628 <CheckFCntDown+0x28>
    {
        return false;
 8013624:	2300      	movs	r3, #0
 8013626:	e00a      	b.n	801363e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	683a      	ldr	r2, [r7, #0]
 801362c:	429a      	cmp	r2, r3
 801362e:	d803      	bhi.n	8013638 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013630:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013636:	d101      	bne.n	801363c <CheckFCntDown+0x3c>
    {
        return true;
 8013638:	2301      	movs	r3, #1
 801363a:	e000      	b.n	801363e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801363c:	2300      	movs	r3, #0
    }
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
	...

08013648 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013648:	b480      	push	{r7}
 801364a:	b083      	sub	sp, #12
 801364c:	af00      	add	r7, sp, #0
 801364e:	4603      	mov	r3, r0
 8013650:	6039      	str	r1, [r7, #0]
 8013652:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013654:	79fb      	ldrb	r3, [r7, #7]
 8013656:	3b01      	subs	r3, #1
 8013658:	2b03      	cmp	r3, #3
 801365a:	d81f      	bhi.n	801369c <UpdateFCntDown+0x54>
 801365c:	a201      	add	r2, pc, #4	; (adr r2, 8013664 <UpdateFCntDown+0x1c>)
 801365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013662:	bf00      	nop
 8013664:	08013675 	.word	0x08013675
 8013668:	0801367f 	.word	0x0801367f
 801366c:	08013689 	.word	0x08013689
 8013670:	08013693 	.word	0x08013693
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013674:	4b0c      	ldr	r3, [pc, #48]	; (80136a8 <UpdateFCntDown+0x60>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	611a      	str	r2, [r3, #16]
            break;
 801367c:	e00f      	b.n	801369e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801367e:	4b0a      	ldr	r3, [pc, #40]	; (80136a8 <UpdateFCntDown+0x60>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	615a      	str	r2, [r3, #20]
            break;
 8013686:	e00a      	b.n	801369e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013688:	4b07      	ldr	r3, [pc, #28]	; (80136a8 <UpdateFCntDown+0x60>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	683a      	ldr	r2, [r7, #0]
 801368e:	619a      	str	r2, [r3, #24]
            break;
 8013690:	e005      	b.n	801369e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013692:	4b05      	ldr	r3, [pc, #20]	; (80136a8 <UpdateFCntDown+0x60>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	683a      	ldr	r2, [r7, #0]
 8013698:	61da      	str	r2, [r3, #28]
            break;
 801369a:	e000      	b.n	801369e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801369c:	bf00      	nop
    }
}
 801369e:	bf00      	nop
 80136a0:	370c      	adds	r7, #12
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bc80      	pop	{r7}
 80136a6:	4770      	bx	lr
 80136a8:	20001d2c 	.word	0x20001d2c

080136ac <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80136b2:	4b18      	ldr	r3, [pc, #96]	; (8013714 <ResetFCnts+0x68>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2200      	movs	r2, #0
 80136b8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80136ba:	4b16      	ldr	r3, [pc, #88]	; (8013714 <ResetFCnts+0x68>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f04f 32ff 	mov.w	r2, #4294967295
 80136c2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80136c4:	4b13      	ldr	r3, [pc, #76]	; (8013714 <ResetFCnts+0x68>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f04f 32ff 	mov.w	r2, #4294967295
 80136cc:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80136ce:	4b11      	ldr	r3, [pc, #68]	; (8013714 <ResetFCnts+0x68>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f04f 32ff 	mov.w	r2, #4294967295
 80136d6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80136d8:	4b0e      	ldr	r3, [pc, #56]	; (8013714 <ResetFCnts+0x68>)
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	4b0d      	ldr	r3, [pc, #52]	; (8013714 <ResetFCnts+0x68>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	6992      	ldr	r2, [r2, #24]
 80136e2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80136e4:	2300      	movs	r3, #0
 80136e6:	607b      	str	r3, [r7, #4]
 80136e8:	e00b      	b.n	8013702 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80136ea:	4b0a      	ldr	r3, [pc, #40]	; (8013714 <ResetFCnts+0x68>)
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	3306      	adds	r3, #6
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	4413      	add	r3, r2
 80136f6:	f04f 32ff 	mov.w	r2, #4294967295
 80136fa:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	3301      	adds	r3, #1
 8013700:	607b      	str	r3, [r7, #4]
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	ddf0      	ble.n	80136ea <ResetFCnts+0x3e>
    }
}
 8013708:	bf00      	nop
 801370a:	bf00      	nop
 801370c:	370c      	adds	r7, #12
 801370e:	46bd      	mov	sp, r7
 8013710:	bc80      	pop	{r7}
 8013712:	4770      	bx	lr
 8013714:	20001d2c 	.word	0x20001d2c

08013718 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d101      	bne.n	801372a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013726:	2309      	movs	r3, #9
 8013728:	e01c      	b.n	8013764 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801372a:	4a10      	ldr	r2, [pc, #64]	; (801376c <LoRaMacCryptoInit+0x54>)
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013730:	4b0e      	ldr	r3, [pc, #56]	; (801376c <LoRaMacCryptoInit+0x54>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2228      	movs	r2, #40	; 0x28
 8013736:	2100      	movs	r1, #0
 8013738:	4618      	mov	r0, r3
 801373a:	f003 fa1d 	bl	8016b78 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801373e:	4b0b      	ldr	r3, [pc, #44]	; (801376c <LoRaMacCryptoInit+0x54>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	2201      	movs	r2, #1
 8013744:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013746:	4b09      	ldr	r3, [pc, #36]	; (801376c <LoRaMacCryptoInit+0x54>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2201      	movs	r2, #1
 801374c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801374e:	4b07      	ldr	r3, [pc, #28]	; (801376c <LoRaMacCryptoInit+0x54>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	2201      	movs	r2, #1
 8013754:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013756:	4b05      	ldr	r3, [pc, #20]	; (801376c <LoRaMacCryptoInit+0x54>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2200      	movs	r2, #0
 801375c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801375e:	f7ff ffa5 	bl	80136ac <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013762:	2300      	movs	r3, #0
}
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	20001d2c 	.word	0x20001d2c

08013770 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013778:	4b04      	ldr	r3, [pc, #16]	; (801378c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013780:	2300      	movs	r3, #0
}
 8013782:	4618      	mov	r0, r3
 8013784:	370c      	adds	r7, #12
 8013786:	46bd      	mov	sp, r7
 8013788:	bc80      	pop	{r7}
 801378a:	4770      	bx	lr
 801378c:	20001d2c 	.word	0x20001d2c

08013790 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d101      	bne.n	80137a2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801379e:	230a      	movs	r3, #10
 80137a0:	e006      	b.n	80137b0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80137a2:	4b06      	ldr	r3, [pc, #24]	; (80137bc <LoRaMacCryptoGetFCntUp+0x2c>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	1c5a      	adds	r2, r3, #1
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	370c      	adds	r7, #12
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bc80      	pop	{r7}
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	20001d2c 	.word	0x20001d2c

080137c0 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80137c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80137c4:	b08a      	sub	sp, #40	; 0x28
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	613a      	str	r2, [r7, #16]
 80137ca:	60fb      	str	r3, [r7, #12]
 80137cc:	4603      	mov	r3, r0
 80137ce:	75fb      	strb	r3, [r7, #23]
 80137d0:	460b      	mov	r3, r1
 80137d2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80137d4:	2300      	movs	r3, #0
 80137d6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80137d8:	2300      	movs	r3, #0
 80137da:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80137dc:	2313      	movs	r3, #19
 80137de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d101      	bne.n	80137ec <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137e8:	230a      	movs	r3, #10
 80137ea:	e057      	b.n	801389c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80137ec:	f107 021c 	add.w	r2, r7, #28
 80137f0:	7dfb      	ldrb	r3, [r7, #23]
 80137f2:	4611      	mov	r1, r2
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7ff feb5 	bl	8013564 <GetLastFcntDown>
 80137fa:	4603      	mov	r3, r0
 80137fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013804:	2b00      	cmp	r3, #0
 8013806:	d002      	beq.n	801380e <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8013808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801380c:	e046      	b.n	801389c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013814:	d103      	bne.n	801381e <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	601a      	str	r2, [r3, #0]
 801381c:	e01e      	b.n	801385c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	b29b      	uxth	r3, r3
 8013822:	693a      	ldr	r2, [r7, #16]
 8013824:	1ad3      	subs	r3, r2, r3
 8013826:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8013828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382a:	2b00      	cmp	r3, #0
 801382c:	dd05      	ble.n	801383a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801382e:	69fa      	ldr	r2, [r7, #28]
 8013830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013832:	441a      	add	r2, r3
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	601a      	str	r2, [r3, #0]
 8013838:	e010      	b.n	801385c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	2b00      	cmp	r3, #0
 801383e:	d104      	bne.n	801384a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013840:	69fa      	ldr	r2, [r7, #28]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013846:	2307      	movs	r3, #7
 8013848:	e028      	b.n	801389c <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	0c1b      	lsrs	r3, r3, #16
 801384e:	041b      	lsls	r3, r3, #16
 8013850:	693a      	ldr	r2, [r7, #16]
 8013852:	4413      	add	r3, r2
 8013854:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801385c:	4b12      	ldr	r3, [pc, #72]	; (80138a8 <LoRaMacCryptoGetFCntDown+0xe8>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	789b      	ldrb	r3, [r3, #2]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d119      	bne.n	801389a <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2200      	movs	r2, #0
 801386c:	603b      	str	r3, [r7, #0]
 801386e:	607a      	str	r2, [r7, #4]
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	2200      	movs	r2, #0
 8013874:	469a      	mov	sl, r3
 8013876:	4693      	mov	fp, r2
 8013878:	e9d7 2300 	ldrd	r2, r3, [r7]
 801387c:	4611      	mov	r1, r2
 801387e:	ebb1 040a 	subs.w	r4, r1, sl
 8013882:	eb63 050b 	sbc.w	r5, r3, fp
 8013886:	8abb      	ldrh	r3, [r7, #20]
 8013888:	2200      	movs	r2, #0
 801388a:	4698      	mov	r8, r3
 801388c:	4691      	mov	r9, r2
 801388e:	4544      	cmp	r4, r8
 8013890:	eb75 0309 	sbcs.w	r3, r5, r9
 8013894:	db01      	blt.n	801389a <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013896:	2308      	movs	r3, #8
 8013898:	e000      	b.n	801389c <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801389a:	2300      	movs	r3, #0
}
 801389c:	4618      	mov	r0, r3
 801389e:	3728      	adds	r7, #40	; 0x28
 80138a0:	46bd      	mov	sp, r7
 80138a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80138a6:	bf00      	nop
 80138a8:	20001d2c 	.word	0x20001d2c

080138ac <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80138ac:	b480      	push	{r7}
 80138ae:	b085      	sub	sp, #20
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d101      	bne.n	80138be <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80138ba:	230a      	movs	r3, #10
 80138bc:	e017      	b.n	80138ee <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80138be:	2300      	movs	r3, #0
 80138c0:	60fb      	str	r3, [r7, #12]
 80138c2:	e010      	b.n	80138e6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80138c4:	4b0c      	ldr	r3, [pc, #48]	; (80138f8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80138c6:	6819      	ldr	r1, [r3, #0]
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	222c      	movs	r2, #44	; 0x2c
 80138cc:	fb02 f303 	mul.w	r3, r2, r3
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	4413      	add	r3, r2
 80138d4:	68fa      	ldr	r2, [r7, #12]
 80138d6:	3206      	adds	r2, #6
 80138d8:	0092      	lsls	r2, r2, #2
 80138da:	440a      	add	r2, r1
 80138dc:	3204      	adds	r2, #4
 80138de:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	3301      	adds	r3, #1
 80138e4:	60fb      	str	r3, [r7, #12]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	ddeb      	ble.n	80138c4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138ec:	2300      	movs	r3, #0
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3714      	adds	r7, #20
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bc80      	pop	{r7}
 80138f6:	4770      	bx	lr
 80138f8:	20001d2c 	.word	0x20001d2c

080138fc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	4603      	mov	r3, r0
 8013904:	6039      	str	r1, [r7, #0]
 8013906:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013908:	79fb      	ldrb	r3, [r7, #7]
 801390a:	6839      	ldr	r1, [r7, #0]
 801390c:	4618      	mov	r0, r3
 801390e:	f7f8 fbd1 	bl	800c0b4 <SecureElementSetKey>
 8013912:	4603      	mov	r3, r0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013918:	230f      	movs	r3, #15
 801391a:	e018      	b.n	801394e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801391c:	79fb      	ldrb	r3, [r7, #7]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d114      	bne.n	801394c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013922:	4b0d      	ldr	r3, [pc, #52]	; (8013958 <LoRaMacCryptoSetKey+0x5c>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	789b      	ldrb	r3, [r3, #2]
 8013928:	79fa      	ldrb	r2, [r7, #7]
 801392a:	4611      	mov	r1, r2
 801392c:	4618      	mov	r0, r3
 801392e:	f000 fa3f 	bl	8013db0 <LoRaMacCryptoDeriveMcRootKey>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d001      	beq.n	801393c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013938:	230f      	movs	r3, #15
 801393a:	e008      	b.n	801394e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801393c:	2004      	movs	r0, #4
 801393e:	f000 fa62 	bl	8013e06 <LoRaMacCryptoDeriveMcKEKey>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d001      	beq.n	801394c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013948:	230f      	movs	r3, #15
 801394a:	e000      	b.n	801394e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801394c:	2300      	movs	r3, #0
}
 801394e:	4618      	mov	r0, r3
 8013950:	3708      	adds	r7, #8
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	20001d2c 	.word	0x20001d2c

0801395c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b086      	sub	sp, #24
 8013960:	af02      	add	r7, sp, #8
 8013962:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d101      	bne.n	801396e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801396a:	230a      	movs	r3, #10
 801396c:	e033      	b.n	80139d6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801396e:	2301      	movs	r3, #1
 8013970:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8013972:	2300      	movs	r3, #0
 8013974:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8013976:	f107 0308 	add.w	r3, r7, #8
 801397a:	4618      	mov	r0, r3
 801397c:	f7f8 fd6a 	bl	800c454 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013980:	68ba      	ldr	r2, [r7, #8]
 8013982:	4b17      	ldr	r3, [pc, #92]	; (80139e0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	b292      	uxth	r2, r2
 8013988:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801398a:	4b15      	ldr	r3, [pc, #84]	; (80139e0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	889a      	ldrh	r2, [r3, #4]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f000 fc18 	bl	80141ca <LoRaMacSerializerJoinRequest>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d001      	beq.n	80139a4 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80139a0:	2311      	movs	r3, #17
 80139a2:	e018      	b.n	80139d6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6819      	ldr	r1, [r3, #0]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	3318      	adds	r3, #24
 80139ac:	7bfa      	ldrb	r2, [r7, #15]
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	4613      	mov	r3, r2
 80139b2:	2213      	movs	r2, #19
 80139b4:	2000      	movs	r0, #0
 80139b6:	f7f8 fbdb 	bl	800c170 <SecureElementComputeAesCmac>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d001      	beq.n	80139c4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139c0:	230f      	movs	r3, #15
 80139c2:	e008      	b.n	80139d6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 fc00 	bl	80141ca <LoRaMacSerializerJoinRequest>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d001      	beq.n	80139d4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80139d0:	2311      	movs	r3, #17
 80139d2:	e000      	b.n	80139d6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80139d4:	2300      	movs	r3, #0
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	3710      	adds	r7, #16
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	20001d2c 	.word	0x20001d2c

080139e4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80139e4:	b590      	push	{r4, r7, lr}
 80139e6:	b097      	sub	sp, #92	; 0x5c
 80139e8:	af04      	add	r7, sp, #16
 80139ea:	4603      	mov	r3, r0
 80139ec:	60b9      	str	r1, [r7, #8]
 80139ee:	607a      	str	r2, [r7, #4]
 80139f0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d002      	beq.n	80139fe <LoRaMacCryptoHandleJoinAccept+0x1a>
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d101      	bne.n	8013a02 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139fe:	230a      	movs	r3, #10
 8013a00:	e0bd      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013a02:	2313      	movs	r3, #19
 8013a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013a08:	2300      	movs	r3, #0
 8013a0a:	61bb      	str	r3, [r7, #24]
 8013a0c:	f107 031c 	add.w	r3, r7, #28
 8013a10:	221d      	movs	r2, #29
 8013a12:	2100      	movs	r1, #0
 8013a14:	4618      	mov	r0, r3
 8013a16:	f007 fe73 	bl	801b700 <memset>
    uint8_t versionMinor         = 0;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013a1e:	4b5a      	ldr	r3, [pc, #360]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	889b      	ldrh	r3, [r3, #4]
 8013a24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681c      	ldr	r4, [r3, #0]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	791b      	ldrb	r3, [r3, #4]
 8013a30:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013a34:	7bf8      	ldrb	r0, [r7, #15]
 8013a36:	f107 0217 	add.w	r2, r7, #23
 8013a3a:	9202      	str	r2, [sp, #8]
 8013a3c:	f107 0218 	add.w	r2, r7, #24
 8013a40:	9201      	str	r2, [sp, #4]
 8013a42:	9300      	str	r3, [sp, #0]
 8013a44:	4623      	mov	r3, r4
 8013a46:	460a      	mov	r2, r1
 8013a48:	68b9      	ldr	r1, [r7, #8]
 8013a4a:	f7f8 fc85 	bl	800c358 <SecureElementProcessJoinAccept>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d001      	beq.n	8013a58 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a54:	230f      	movs	r3, #15
 8013a56:	e092      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6818      	ldr	r0, [r3, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	791b      	ldrb	r3, [r3, #4]
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	f107 0318 	add.w	r3, r7, #24
 8013a66:	4619      	mov	r1, r3
 8013a68:	f003 f84b 	bl	8016b02 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f000 f9ed 	bl	8013e4c <LoRaMacParserJoinAccept>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d001      	beq.n	8013a7c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013a78:	2310      	movs	r3, #16
 8013a7a:	e080      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	799b      	ldrb	r3, [r3, #6]
 8013a80:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	79db      	ldrb	r3, [r3, #7]
 8013a86:	021b      	lsls	r3, r3, #8
 8013a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a8a:	4313      	orrs	r3, r2
 8013a8c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	7a1b      	ldrb	r3, [r3, #8]
 8013a92:	041b      	lsls	r3, r3, #16
 8013a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a96:	4313      	orrs	r3, r2
 8013a98:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013a9a:	4b3b      	ldr	r3, [pc, #236]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	689b      	ldr	r3, [r3, #8]
 8013aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d010      	beq.n	8013ac8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013aa6:	4b38      	ldr	r3, [pc, #224]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013aac:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013aae:	7dfb      	ldrb	r3, [r7, #23]
 8013ab0:	2100      	movs	r1, #0
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f000 f97c 	bl	8013db0 <LoRaMacCryptoDeriveMcRootKey>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013abe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d005      	beq.n	8013ad2 <LoRaMacCryptoHandleJoinAccept+0xee>
 8013ac6:	e001      	b.n	8013acc <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013ac8:	2303      	movs	r3, #3
 8013aca:	e058      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013ad0:	e055      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013ad2:	2004      	movs	r0, #4
 8013ad4:	f000 f997 	bl	8013e06 <LoRaMacCryptoDeriveMcKEKey>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013ade:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d002      	beq.n	8013aec <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013aea:	e048      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	7a5b      	ldrb	r3, [r3, #9]
 8013af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	7a9b      	ldrb	r3, [r3, #10]
 8013af6:	021b      	lsls	r3, r3, #8
 8013af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013afa:	4313      	orrs	r3, r2
 8013afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	7adb      	ldrb	r3, [r3, #11]
 8013b02:	041b      	lsls	r3, r3, #16
 8013b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b06:	4313      	orrs	r3, r2
 8013b08:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013b0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b12:	2003      	movs	r0, #3
 8013b14:	f7ff fcd6 	bl	80134c4 <DeriveSessionKey10x>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d002      	beq.n	8013b2c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b2a:	e028      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013b2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b34:	2002      	movs	r0, #2
 8013b36:	f7ff fcc5 	bl	80134c4 <DeriveSessionKey10x>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d002      	beq.n	8013b4e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013b4c:	e017      	b.n	8013b7e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013b4e:	4b0e      	ldr	r3, [pc, #56]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	7dfa      	ldrb	r2, [r7, #23]
 8013b54:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013b56:	4b0c      	ldr	r3, [pc, #48]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013b5e:	4b0a      	ldr	r3, [pc, #40]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	f04f 32ff 	mov.w	r2, #4294967295
 8013b66:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013b68:	4b07      	ldr	r3, [pc, #28]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b70:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013b72:	4b05      	ldr	r3, [pc, #20]	; (8013b88 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	f04f 32ff 	mov.w	r2, #4294967295
 8013b7a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013b7c:	2300      	movs	r3, #0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	374c      	adds	r7, #76	; 0x4c
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd90      	pop	{r4, r7, pc}
 8013b86:	bf00      	nop
 8013b88:	20001d2c 	.word	0x20001d2c

08013b8c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013b8c:	b590      	push	{r4, r7, lr}
 8013b8e:	b08b      	sub	sp, #44	; 0x2c
 8013b90:	af04      	add	r7, sp, #16
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	607b      	str	r3, [r7, #4]
 8013b96:	460b      	mov	r3, r1
 8013b98:	72fb      	strb	r3, [r7, #11]
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013b9e:	2313      	movs	r3, #19
 8013ba0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013ba2:	2303      	movs	r3, #3
 8013ba4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d101      	bne.n	8013bb0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013bac:	230a      	movs	r3, #10
 8013bae:	e05f      	b.n	8013c70 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013bb0:	4b31      	ldr	r3, [pc, #196]	; (8013c78 <LoRaMacCryptoSecureMessage+0xec>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	68db      	ldr	r3, [r3, #12]
 8013bb6:	68fa      	ldr	r2, [r7, #12]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d201      	bcs.n	8013bc0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013bbc:	2306      	movs	r3, #6
 8013bbe:	e057      	b.n	8013c70 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d101      	bne.n	8013bce <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013bca:	2302      	movs	r3, #2
 8013bcc:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013bce:	4b2a      	ldr	r3, [pc, #168]	; (8013c78 <LoRaMacCryptoSecureMessage+0xec>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	68db      	ldr	r3, [r3, #12]
 8013bd4:	68fa      	ldr	r2, [r7, #12]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d916      	bls.n	8013c08 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013be4:	b219      	sxth	r1, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	689c      	ldr	r4, [r3, #8]
 8013bea:	7dfa      	ldrb	r2, [r7, #23]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	9300      	str	r3, [sp, #0]
 8013bf4:	4623      	mov	r3, r4
 8013bf6:	f7ff fa71 	bl	80130dc <PayloadEncrypt>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013bfe:	7dbb      	ldrb	r3, [r7, #22]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d001      	beq.n	8013c08 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013c04:	7dbb      	ldrb	r3, [r7, #22]
 8013c06:	e033      	b.n	8013c70 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f000 fb60 	bl	80142ce <LoRaMacSerializerData>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d001      	beq.n	8013c18 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013c14:	2311      	movs	r3, #17
 8013c16:	e02b      	b.n	8013c70 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013c18:	2302      	movs	r3, #2
 8013c1a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6818      	ldr	r0, [r3, #0]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	791b      	ldrb	r3, [r3, #4]
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	3b04      	subs	r3, #4
 8013c28:	b299      	uxth	r1, r3
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	322c      	adds	r2, #44	; 0x2c
 8013c32:	7dfc      	ldrb	r4, [r7, #23]
 8013c34:	9203      	str	r2, [sp, #12]
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	9202      	str	r2, [sp, #8]
 8013c3a:	9301      	str	r3, [sp, #4]
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	2300      	movs	r3, #0
 8013c42:	4622      	mov	r2, r4
 8013c44:	f7ff fb4b 	bl	80132de <ComputeCmacB0>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c4c:	7dbb      	ldrb	r3, [r7, #22]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d001      	beq.n	8013c56 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013c52:	7dbb      	ldrb	r3, [r7, #22]
 8013c54:	e00c      	b.n	8013c70 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 fb39 	bl	80142ce <LoRaMacSerializerData>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d001      	beq.n	8013c66 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013c62:	2311      	movs	r3, #17
 8013c64:	e004      	b.n	8013c70 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013c66:	4b04      	ldr	r3, [pc, #16]	; (8013c78 <LoRaMacCryptoSecureMessage+0xec>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013c6e:	2300      	movs	r3, #0
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	371c      	adds	r7, #28
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd90      	pop	{r4, r7, pc}
 8013c78:	20001d2c 	.word	0x20001d2c

08013c7c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013c7c:	b590      	push	{r4, r7, lr}
 8013c7e:	b08b      	sub	sp, #44	; 0x2c
 8013c80:	af04      	add	r7, sp, #16
 8013c82:	60b9      	str	r1, [r7, #8]
 8013c84:	607b      	str	r3, [r7, #4]
 8013c86:	4603      	mov	r3, r0
 8013c88:	73fb      	strb	r3, [r7, #15]
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d101      	bne.n	8013c98 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013c94:	230a      	movs	r3, #10
 8013c96:	e084      	b.n	8013da2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013c98:	7bbb      	ldrb	r3, [r7, #14]
 8013c9a:	6879      	ldr	r1, [r7, #4]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7ff fcaf 	bl	8013600 <CheckFCntDown>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	f083 0301 	eor.w	r3, r3, #1
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d001      	beq.n	8013cb2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013cae:	2306      	movs	r3, #6
 8013cb0:	e077      	b.n	8013da2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013cb2:	2313      	movs	r3, #19
 8013cb4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013cb6:	2303      	movs	r3, #3
 8013cb8:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013cba:	2302      	movs	r3, #2
 8013cbc:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cc0:	f000 f98f 	bl	8013fe2 <LoRaMacParserData>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d001      	beq.n	8013cce <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013cca:	2310      	movs	r3, #16
 8013ccc:	e069      	b.n	8013da2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013cce:	f107 0210 	add.w	r2, r7, #16
 8013cd2:	7bfb      	ldrb	r3, [r7, #15]
 8013cd4:	4611      	mov	r1, r2
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7ff fbce 	bl	8013478 <GetKeyAddrItem>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013ce0:	7d7b      	ldrb	r3, [r7, #21]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d001      	beq.n	8013cea <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013ce6:	7d7b      	ldrb	r3, [r7, #21]
 8013ce8:	e05b      	b.n	8013da2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	785b      	ldrb	r3, [r3, #1]
 8013cee:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	789b      	ldrb	r3, [r3, #2]
 8013cf4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf8:	689b      	ldr	r3, [r3, #8]
 8013cfa:	68ba      	ldr	r2, [r7, #8]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d001      	beq.n	8013d04 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013d00:	2302      	movs	r3, #2
 8013d02:	e04e      	b.n	8013da2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d06:	7b1b      	ldrb	r3, [r3, #12]
 8013d08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	bf14      	ite	ne
 8013d12:	2301      	movne	r3, #1
 8013d14:	2300      	moveq	r3, #0
 8013d16:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013d18:	4b24      	ldr	r3, [pc, #144]	; (8013dac <LoRaMacCryptoUnsecureMessage+0x130>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	789b      	ldrb	r3, [r3, #2]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d101      	bne.n	8013d26 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013d22:	2300      	movs	r3, #0
 8013d24:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d28:	6818      	ldr	r0, [r3, #0]
 8013d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d2c:	791b      	ldrb	r3, [r3, #4]
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	3b04      	subs	r3, #4
 8013d32:	b299      	uxth	r1, r3
 8013d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d38:	7dbc      	ldrb	r4, [r7, #22]
 8013d3a:	7d3a      	ldrb	r2, [r7, #20]
 8013d3c:	9303      	str	r3, [sp, #12]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	9302      	str	r3, [sp, #8]
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	9301      	str	r3, [sp, #4]
 8013d46:	2301      	movs	r3, #1
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	4623      	mov	r3, r4
 8013d4c:	f7ff fb05 	bl	801335a <VerifyCmacB0>
 8013d50:	4603      	mov	r3, r0
 8013d52:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d54:	7d7b      	ldrb	r3, [r7, #21]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d001      	beq.n	8013d5e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013d5a:	7d7b      	ldrb	r3, [r7, #21]
 8013d5c:	e021      	b.n	8013da2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d101      	bne.n	8013d6c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013d68:	2302      	movs	r3, #2
 8013d6a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d76:	b219      	sxth	r1, r3
 8013d78:	7dfa      	ldrb	r2, [r7, #23]
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	9301      	str	r3, [sp, #4]
 8013d7e:	2301      	movs	r3, #1
 8013d80:	9300      	str	r3, [sp, #0]
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	f7ff f9aa 	bl	80130dc <PayloadEncrypt>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d8c:	7d7b      	ldrb	r3, [r7, #21]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013d92:	7d7b      	ldrb	r3, [r7, #21]
 8013d94:	e005      	b.n	8013da2 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013d96:	7bbb      	ldrb	r3, [r7, #14]
 8013d98:	6879      	ldr	r1, [r7, #4]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff fc54 	bl	8013648 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013da0:	2300      	movs	r3, #0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	371c      	adds	r7, #28
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd90      	pop	{r4, r7, pc}
 8013daa:	bf00      	nop
 8013dac:	20001d2c 	.word	0x20001d2c

08013db0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b086      	sub	sp, #24
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	4603      	mov	r3, r0
 8013db8:	460a      	mov	r2, r1
 8013dba:	71fb      	strb	r3, [r7, #7]
 8013dbc:	4613      	mov	r3, r2
 8013dbe:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013dc0:	79bb      	ldrb	r3, [r7, #6]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d001      	beq.n	8013dca <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013dc6:	230b      	movs	r3, #11
 8013dc8:	e019      	b.n	8013dfe <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013dca:	2300      	movs	r3, #0
 8013dcc:	60bb      	str	r3, [r7, #8]
 8013dce:	f107 030c 	add.w	r3, r7, #12
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	605a      	str	r2, [r3, #4]
 8013dd8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013dda:	79fb      	ldrb	r3, [r7, #7]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d101      	bne.n	8013de4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013de0:	2320      	movs	r3, #32
 8013de2:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013de4:	79b9      	ldrb	r1, [r7, #6]
 8013de6:	f107 0308 	add.w	r3, r7, #8
 8013dea:	2204      	movs	r2, #4
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7f8 fa73 	bl	800c2d8 <SecureElementDeriveAndStoreKey>
 8013df2:	4603      	mov	r3, r0
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d001      	beq.n	8013dfc <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013df8:	230f      	movs	r3, #15
 8013dfa:	e000      	b.n	8013dfe <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3718      	adds	r7, #24
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}

08013e06 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013e06:	b580      	push	{r7, lr}
 8013e08:	b086      	sub	sp, #24
 8013e0a:	af00      	add	r7, sp, #0
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013e10:	79fb      	ldrb	r3, [r7, #7]
 8013e12:	2b04      	cmp	r3, #4
 8013e14:	d001      	beq.n	8013e1a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013e16:	230b      	movs	r3, #11
 8013e18:	e014      	b.n	8013e44 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	60bb      	str	r3, [r7, #8]
 8013e1e:	f107 030c 	add.w	r3, r7, #12
 8013e22:	2200      	movs	r2, #0
 8013e24:	601a      	str	r2, [r3, #0]
 8013e26:	605a      	str	r2, [r3, #4]
 8013e28:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013e2a:	79f9      	ldrb	r1, [r7, #7]
 8013e2c:	f107 0308 	add.w	r3, r7, #8
 8013e30:	227f      	movs	r2, #127	; 0x7f
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7f8 fa50 	bl	800c2d8 <SecureElementDeriveAndStoreKey>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d001      	beq.n	8013e42 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e3e:	230f      	movs	r3, #15
 8013e40:	e000      	b.n	8013e44 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e42:	2300      	movs	r3, #0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3718      	adds	r7, #24
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d003      	beq.n	8013e62 <LoRaMacParserJoinAccept+0x16>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d101      	bne.n	8013e66 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013e62:	2302      	movs	r3, #2
 8013e64:	e0b9      	b.n	8013fda <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013e66:	2300      	movs	r3, #0
 8013e68:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681a      	ldr	r2, [r3, #0]
 8013e6e:	89fb      	ldrh	r3, [r7, #14]
 8013e70:	1c59      	adds	r1, r3, #1
 8013e72:	81f9      	strh	r1, [r7, #14]
 8013e74:	4413      	add	r3, r2
 8013e76:	781a      	ldrb	r2, [r3, #0]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	1d98      	adds	r0, r3, #6
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	89fb      	ldrh	r3, [r7, #14]
 8013e86:	4413      	add	r3, r2
 8013e88:	2203      	movs	r2, #3
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	f002 fe39 	bl	8016b02 <memcpy1>
    bufItr = bufItr + 3;
 8013e90:	89fb      	ldrh	r3, [r7, #14]
 8013e92:	3303      	adds	r3, #3
 8013e94:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f103 0009 	add.w	r0, r3, #9
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	89fb      	ldrh	r3, [r7, #14]
 8013ea2:	4413      	add	r3, r2
 8013ea4:	2203      	movs	r2, #3
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	f002 fe2b 	bl	8016b02 <memcpy1>
    bufItr = bufItr + 3;
 8013eac:	89fb      	ldrh	r3, [r7, #14]
 8013eae:	3303      	adds	r3, #3
 8013eb0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	89fb      	ldrh	r3, [r7, #14]
 8013eb8:	1c59      	adds	r1, r3, #1
 8013eba:	81f9      	strh	r1, [r7, #14]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	89fb      	ldrh	r3, [r7, #14]
 8013ecc:	1c59      	adds	r1, r3, #1
 8013ece:	81f9      	strh	r1, [r7, #14]
 8013ed0:	4413      	add	r3, r2
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	021a      	lsls	r2, r3, #8
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	431a      	orrs	r2, r3
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	89fb      	ldrh	r3, [r7, #14]
 8013ee6:	1c59      	adds	r1, r3, #1
 8013ee8:	81f9      	strh	r1, [r7, #14]
 8013eea:	4413      	add	r3, r2
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	041a      	lsls	r2, r3, #16
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	431a      	orrs	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	89fb      	ldrh	r3, [r7, #14]
 8013f00:	1c59      	adds	r1, r3, #1
 8013f02:	81f9      	strh	r1, [r7, #14]
 8013f04:	4413      	add	r3, r2
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	061a      	lsls	r2, r3, #24
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	431a      	orrs	r2, r3
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681a      	ldr	r2, [r3, #0]
 8013f18:	89fb      	ldrh	r3, [r7, #14]
 8013f1a:	1c59      	adds	r1, r3, #1
 8013f1c:	81f9      	strh	r1, [r7, #14]
 8013f1e:	4413      	add	r3, r2
 8013f20:	781a      	ldrb	r2, [r3, #0]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	89fb      	ldrh	r3, [r7, #14]
 8013f2c:	1c59      	adds	r1, r3, #1
 8013f2e:	81f9      	strh	r1, [r7, #14]
 8013f30:	4413      	add	r3, r2
 8013f32:	781a      	ldrb	r2, [r3, #0]
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	791b      	ldrb	r3, [r3, #4]
 8013f3c:	1f1a      	subs	r2, r3, #4
 8013f3e:	89fb      	ldrh	r3, [r7, #14]
 8013f40:	1ad3      	subs	r3, r2, r3
 8013f42:	2b10      	cmp	r3, #16
 8013f44:	d10e      	bne.n	8013f64 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f103 0012 	add.w	r0, r3, #18
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	4413      	add	r3, r2
 8013f54:	2210      	movs	r2, #16
 8013f56:	4619      	mov	r1, r3
 8013f58:	f002 fdd3 	bl	8016b02 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013f5c:	89fb      	ldrh	r3, [r7, #14]
 8013f5e:	3310      	adds	r3, #16
 8013f60:	81fb      	strh	r3, [r7, #14]
 8013f62:	e008      	b.n	8013f76 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	791b      	ldrb	r3, [r3, #4]
 8013f68:	1f1a      	subs	r2, r3, #4
 8013f6a:	89fb      	ldrh	r3, [r7, #14]
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	dd01      	ble.n	8013f76 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013f72:	2301      	movs	r3, #1
 8013f74:	e031      	b.n	8013fda <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	89fb      	ldrh	r3, [r7, #14]
 8013f7c:	1c59      	adds	r1, r3, #1
 8013f7e:	81f9      	strh	r1, [r7, #14]
 8013f80:	4413      	add	r3, r2
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	461a      	mov	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	89fb      	ldrh	r3, [r7, #14]
 8013f90:	1c59      	adds	r1, r3, #1
 8013f92:	81f9      	strh	r1, [r7, #14]
 8013f94:	4413      	add	r3, r2
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	021a      	lsls	r2, r3, #8
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f9e:	431a      	orrs	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	89fb      	ldrh	r3, [r7, #14]
 8013faa:	1c59      	adds	r1, r3, #1
 8013fac:	81f9      	strh	r1, [r7, #14]
 8013fae:	4413      	add	r3, r2
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	041a      	lsls	r2, r3, #16
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fb8:	431a      	orrs	r2, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	89fb      	ldrh	r3, [r7, #14]
 8013fc4:	1c59      	adds	r1, r3, #1
 8013fc6:	81f9      	strh	r1, [r7, #14]
 8013fc8:	4413      	add	r3, r2
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	061a      	lsls	r2, r3, #24
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd2:	431a      	orrs	r2, r3
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013fd8:	2300      	movs	r3, #0
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3710      	adds	r7, #16
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}

08013fe2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b084      	sub	sp, #16
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d003      	beq.n	8013ff8 <LoRaMacParserData+0x16>
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d101      	bne.n	8013ffc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013ff8:	2302      	movs	r3, #2
 8013ffa:	e0e2      	b.n	80141c2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	89fb      	ldrh	r3, [r7, #14]
 8014006:	1c59      	adds	r1, r3, #1
 8014008:	81f9      	strh	r1, [r7, #14]
 801400a:	4413      	add	r3, r2
 801400c:	781a      	ldrb	r2, [r3, #0]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	89fb      	ldrh	r3, [r7, #14]
 8014018:	1c59      	adds	r1, r3, #1
 801401a:	81f9      	strh	r1, [r7, #14]
 801401c:	4413      	add	r3, r2
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	461a      	mov	r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	89fb      	ldrh	r3, [r7, #14]
 801402c:	1c59      	adds	r1, r3, #1
 801402e:	81f9      	strh	r1, [r7, #14]
 8014030:	4413      	add	r3, r2
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	021a      	lsls	r2, r3, #8
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	689b      	ldr	r3, [r3, #8]
 801403a:	431a      	orrs	r2, r3
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	89fb      	ldrh	r3, [r7, #14]
 8014046:	1c59      	adds	r1, r3, #1
 8014048:	81f9      	strh	r1, [r7, #14]
 801404a:	4413      	add	r3, r2
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	041a      	lsls	r2, r3, #16
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	431a      	orrs	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	89fb      	ldrh	r3, [r7, #14]
 8014060:	1c59      	adds	r1, r3, #1
 8014062:	81f9      	strh	r1, [r7, #14]
 8014064:	4413      	add	r3, r2
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	061a      	lsls	r2, r3, #24
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	689b      	ldr	r3, [r3, #8]
 801406e:	431a      	orrs	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	89fb      	ldrh	r3, [r7, #14]
 801407a:	1c59      	adds	r1, r3, #1
 801407c:	81f9      	strh	r1, [r7, #14]
 801407e:	4413      	add	r3, r2
 8014080:	781a      	ldrb	r2, [r3, #0]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	89fb      	ldrh	r3, [r7, #14]
 801408c:	1c59      	adds	r1, r3, #1
 801408e:	81f9      	strh	r1, [r7, #14]
 8014090:	4413      	add	r3, r2
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	b29a      	uxth	r2, r3
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	89fb      	ldrh	r3, [r7, #14]
 80140a0:	1c59      	adds	r1, r3, #1
 80140a2:	81f9      	strh	r1, [r7, #14]
 80140a4:	4413      	add	r3, r2
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	0219      	lsls	r1, r3, #8
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	89db      	ldrh	r3, [r3, #14]
 80140ae:	b21a      	sxth	r2, r3
 80140b0:	b20b      	sxth	r3, r1
 80140b2:	4313      	orrs	r3, r2
 80140b4:	b21b      	sxth	r3, r3
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f103 0010 	add.w	r0, r3, #16
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	89fb      	ldrh	r3, [r7, #14]
 80140c8:	18d1      	adds	r1, r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	7b1b      	ldrb	r3, [r3, #12]
 80140ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	461a      	mov	r2, r3
 80140d8:	f002 fd13 	bl	8016b02 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	7b1b      	ldrb	r3, [r3, #12]
 80140e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	89fb      	ldrh	r3, [r7, #14]
 80140ea:	4413      	add	r3, r2
 80140ec:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2200      	movs	r2, #0
 80140f2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2200      	movs	r2, #0
 80140fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	791b      	ldrb	r3, [r3, #4]
 8014102:	461a      	mov	r2, r3
 8014104:	89fb      	ldrh	r3, [r7, #14]
 8014106:	1ad3      	subs	r3, r2, r3
 8014108:	2b04      	cmp	r3, #4
 801410a:	dd28      	ble.n	801415e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	89fb      	ldrh	r3, [r7, #14]
 8014112:	1c59      	adds	r1, r3, #1
 8014114:	81f9      	strh	r1, [r7, #14]
 8014116:	4413      	add	r3, r2
 8014118:	781a      	ldrb	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	791a      	ldrb	r2, [r3, #4]
 8014124:	89fb      	ldrh	r3, [r7, #14]
 8014126:	b2db      	uxtb	r3, r3
 8014128:	1ad3      	subs	r3, r2, r3
 801412a:	b2db      	uxtb	r3, r3
 801412c:	3b04      	subs	r3, #4
 801412e:	b2da      	uxtb	r2, r3
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681a      	ldr	r2, [r3, #0]
 801413e:	89fb      	ldrh	r3, [r7, #14]
 8014140:	18d1      	adds	r1, r2, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014148:	b29b      	uxth	r3, r3
 801414a:	461a      	mov	r2, r3
 801414c:	f002 fcd9 	bl	8016b02 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014156:	b29a      	uxth	r2, r3
 8014158:	89fb      	ldrh	r3, [r7, #14]
 801415a:	4413      	add	r3, r2
 801415c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	791b      	ldrb	r3, [r3, #4]
 8014166:	3b04      	subs	r3, #4
 8014168:	4413      	add	r3, r2
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	461a      	mov	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6819      	ldr	r1, [r3, #0]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	791b      	ldrb	r3, [r3, #4]
 801417e:	3b03      	subs	r3, #3
 8014180:	440b      	add	r3, r1
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	021b      	lsls	r3, r3, #8
 8014186:	431a      	orrs	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6819      	ldr	r1, [r3, #0]
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	791b      	ldrb	r3, [r3, #4]
 8014198:	3b02      	subs	r3, #2
 801419a:	440b      	add	r3, r1
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	041b      	lsls	r3, r3, #16
 80141a0:	431a      	orrs	r2, r3
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6819      	ldr	r1, [r3, #0]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	791b      	ldrb	r3, [r3, #4]
 80141b2:	3b01      	subs	r3, #1
 80141b4:	440b      	add	r3, r1
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	061b      	lsls	r3, r3, #24
 80141ba:	431a      	orrs	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80141c0:	2300      	movs	r3, #0
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	3710      	adds	r7, #16
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}

080141ca <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80141ca:	b580      	push	{r7, lr}
 80141cc:	b084      	sub	sp, #16
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d003      	beq.n	80141e0 <LoRaMacSerializerJoinRequest+0x16>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d101      	bne.n	80141e4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80141e0:	2301      	movs	r3, #1
 80141e2:	e070      	b.n	80142c6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80141e4:	2300      	movs	r3, #0
 80141e6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	791b      	ldrb	r3, [r3, #4]
 80141ec:	2b16      	cmp	r3, #22
 80141ee:	d801      	bhi.n	80141f4 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80141f0:	2302      	movs	r3, #2
 80141f2:	e068      	b.n	80142c6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	89fb      	ldrh	r3, [r7, #14]
 80141fa:	1c59      	adds	r1, r3, #1
 80141fc:	81f9      	strh	r1, [r7, #14]
 80141fe:	4413      	add	r3, r2
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	7952      	ldrb	r2, [r2, #5]
 8014204:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	89fb      	ldrh	r3, [r7, #14]
 801420c:	18d0      	adds	r0, r2, r3
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	3306      	adds	r3, #6
 8014212:	2208      	movs	r2, #8
 8014214:	4619      	mov	r1, r3
 8014216:	f002 fc8f 	bl	8016b38 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801421a:	89fb      	ldrh	r3, [r7, #14]
 801421c:	3308      	adds	r3, #8
 801421e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	89fb      	ldrh	r3, [r7, #14]
 8014226:	18d0      	adds	r0, r2, r3
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	330e      	adds	r3, #14
 801422c:	2208      	movs	r2, #8
 801422e:	4619      	mov	r1, r3
 8014230:	f002 fc82 	bl	8016b38 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014234:	89fb      	ldrh	r3, [r7, #14]
 8014236:	3308      	adds	r3, #8
 8014238:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	8ad9      	ldrh	r1, [r3, #22]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681a      	ldr	r2, [r3, #0]
 8014242:	89fb      	ldrh	r3, [r7, #14]
 8014244:	1c58      	adds	r0, r3, #1
 8014246:	81f8      	strh	r0, [r7, #14]
 8014248:	4413      	add	r3, r2
 801424a:	b2ca      	uxtb	r2, r1
 801424c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	8adb      	ldrh	r3, [r3, #22]
 8014252:	0a1b      	lsrs	r3, r3, #8
 8014254:	b299      	uxth	r1, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	89fb      	ldrh	r3, [r7, #14]
 801425c:	1c58      	adds	r0, r3, #1
 801425e:	81f8      	strh	r0, [r7, #14]
 8014260:	4413      	add	r3, r2
 8014262:	b2ca      	uxtb	r2, r1
 8014264:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6999      	ldr	r1, [r3, #24]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	89fb      	ldrh	r3, [r7, #14]
 8014270:	1c58      	adds	r0, r3, #1
 8014272:	81f8      	strh	r0, [r7, #14]
 8014274:	4413      	add	r3, r2
 8014276:	b2ca      	uxtb	r2, r1
 8014278:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	699b      	ldr	r3, [r3, #24]
 801427e:	0a19      	lsrs	r1, r3, #8
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681a      	ldr	r2, [r3, #0]
 8014284:	89fb      	ldrh	r3, [r7, #14]
 8014286:	1c58      	adds	r0, r3, #1
 8014288:	81f8      	strh	r0, [r7, #14]
 801428a:	4413      	add	r3, r2
 801428c:	b2ca      	uxtb	r2, r1
 801428e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	699b      	ldr	r3, [r3, #24]
 8014294:	0c19      	lsrs	r1, r3, #16
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	89fb      	ldrh	r3, [r7, #14]
 801429c:	1c58      	adds	r0, r3, #1
 801429e:	81f8      	strh	r0, [r7, #14]
 80142a0:	4413      	add	r3, r2
 80142a2:	b2ca      	uxtb	r2, r1
 80142a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	699b      	ldr	r3, [r3, #24]
 80142aa:	0e19      	lsrs	r1, r3, #24
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	89fb      	ldrh	r3, [r7, #14]
 80142b2:	1c58      	adds	r0, r3, #1
 80142b4:	81f8      	strh	r0, [r7, #14]
 80142b6:	4413      	add	r3, r2
 80142b8:	b2ca      	uxtb	r2, r1
 80142ba:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80142bc:	89fb      	ldrh	r3, [r7, #14]
 80142be:	b2da      	uxtb	r2, r3
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80142c4:	2300      	movs	r3, #0
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3710      	adds	r7, #16
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b084      	sub	sp, #16
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d003      	beq.n	80142e4 <LoRaMacSerializerData+0x16>
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d101      	bne.n	80142e8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80142e4:	2301      	movs	r3, #1
 80142e6:	e0e5      	b.n	80144b4 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80142e8:	2300      	movs	r3, #0
 80142ea:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80142ec:	2308      	movs	r3, #8
 80142ee:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	7b1b      	ldrb	r3, [r3, #12]
 80142f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	b29a      	uxth	r2, r3
 80142fc:	89bb      	ldrh	r3, [r7, #12]
 80142fe:	4413      	add	r3, r2
 8014300:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014308:	2b00      	cmp	r3, #0
 801430a:	d002      	beq.n	8014312 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801430c:	89bb      	ldrh	r3, [r7, #12]
 801430e:	3301      	adds	r3, #1
 8014310:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014318:	b29a      	uxth	r2, r3
 801431a:	89bb      	ldrh	r3, [r7, #12]
 801431c:	4413      	add	r3, r2
 801431e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014320:	89bb      	ldrh	r3, [r7, #12]
 8014322:	3304      	adds	r3, #4
 8014324:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	791b      	ldrb	r3, [r3, #4]
 801432a:	b29b      	uxth	r3, r3
 801432c:	89ba      	ldrh	r2, [r7, #12]
 801432e:	429a      	cmp	r2, r3
 8014330:	d901      	bls.n	8014336 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014332:	2302      	movs	r3, #2
 8014334:	e0be      	b.n	80144b4 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	89fb      	ldrh	r3, [r7, #14]
 801433c:	1c59      	adds	r1, r3, #1
 801433e:	81f9      	strh	r1, [r7, #14]
 8014340:	4413      	add	r3, r2
 8014342:	687a      	ldr	r2, [r7, #4]
 8014344:	7952      	ldrb	r2, [r2, #5]
 8014346:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6899      	ldr	r1, [r3, #8]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	89fb      	ldrh	r3, [r7, #14]
 8014352:	1c58      	adds	r0, r3, #1
 8014354:	81f8      	strh	r0, [r7, #14]
 8014356:	4413      	add	r3, r2
 8014358:	b2ca      	uxtb	r2, r1
 801435a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	689b      	ldr	r3, [r3, #8]
 8014360:	0a19      	lsrs	r1, r3, #8
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681a      	ldr	r2, [r3, #0]
 8014366:	89fb      	ldrh	r3, [r7, #14]
 8014368:	1c58      	adds	r0, r3, #1
 801436a:	81f8      	strh	r0, [r7, #14]
 801436c:	4413      	add	r3, r2
 801436e:	b2ca      	uxtb	r2, r1
 8014370:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	689b      	ldr	r3, [r3, #8]
 8014376:	0c19      	lsrs	r1, r3, #16
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	89fb      	ldrh	r3, [r7, #14]
 801437e:	1c58      	adds	r0, r3, #1
 8014380:	81f8      	strh	r0, [r7, #14]
 8014382:	4413      	add	r3, r2
 8014384:	b2ca      	uxtb	r2, r1
 8014386:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	689b      	ldr	r3, [r3, #8]
 801438c:	0e19      	lsrs	r1, r3, #24
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681a      	ldr	r2, [r3, #0]
 8014392:	89fb      	ldrh	r3, [r7, #14]
 8014394:	1c58      	adds	r0, r3, #1
 8014396:	81f8      	strh	r0, [r7, #14]
 8014398:	4413      	add	r3, r2
 801439a:	b2ca      	uxtb	r2, r1
 801439c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681a      	ldr	r2, [r3, #0]
 80143a2:	89fb      	ldrh	r3, [r7, #14]
 80143a4:	1c59      	adds	r1, r3, #1
 80143a6:	81f9      	strh	r1, [r7, #14]
 80143a8:	4413      	add	r3, r2
 80143aa:	687a      	ldr	r2, [r7, #4]
 80143ac:	7b12      	ldrb	r2, [r2, #12]
 80143ae:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	89d9      	ldrh	r1, [r3, #14]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	89fb      	ldrh	r3, [r7, #14]
 80143ba:	1c58      	adds	r0, r3, #1
 80143bc:	81f8      	strh	r0, [r7, #14]
 80143be:	4413      	add	r3, r2
 80143c0:	b2ca      	uxtb	r2, r1
 80143c2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	89db      	ldrh	r3, [r3, #14]
 80143c8:	0a1b      	lsrs	r3, r3, #8
 80143ca:	b299      	uxth	r1, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	89fb      	ldrh	r3, [r7, #14]
 80143d2:	1c58      	adds	r0, r3, #1
 80143d4:	81f8      	strh	r0, [r7, #14]
 80143d6:	4413      	add	r3, r2
 80143d8:	b2ca      	uxtb	r2, r1
 80143da:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	89fb      	ldrh	r3, [r7, #14]
 80143e2:	18d0      	adds	r0, r2, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f103 0110 	add.w	r1, r3, #16
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	7b1b      	ldrb	r3, [r3, #12]
 80143ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80143f2:	b2db      	uxtb	r3, r3
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	461a      	mov	r2, r3
 80143f8:	f002 fb83 	bl	8016b02 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	7b1b      	ldrb	r3, [r3, #12]
 8014400:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014404:	b2db      	uxtb	r3, r3
 8014406:	b29a      	uxth	r2, r3
 8014408:	89fb      	ldrh	r3, [r7, #14]
 801440a:	4413      	add	r3, r2
 801440c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014414:	2b00      	cmp	r3, #0
 8014416:	d009      	beq.n	801442c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	89fb      	ldrh	r3, [r7, #14]
 801441e:	1c59      	adds	r1, r3, #1
 8014420:	81f9      	strh	r1, [r7, #14]
 8014422:	4413      	add	r3, r2
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	f892 2020 	ldrb.w	r2, [r2, #32]
 801442a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	89fb      	ldrh	r3, [r7, #14]
 8014432:	18d0      	adds	r0, r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801443e:	b29b      	uxth	r3, r3
 8014440:	461a      	mov	r2, r3
 8014442:	f002 fb5e 	bl	8016b02 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801444c:	b29a      	uxth	r2, r3
 801444e:	89fb      	ldrh	r3, [r7, #14]
 8014450:	4413      	add	r3, r2
 8014452:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	89fb      	ldrh	r3, [r7, #14]
 801445e:	1c58      	adds	r0, r3, #1
 8014460:	81f8      	strh	r0, [r7, #14]
 8014462:	4413      	add	r3, r2
 8014464:	b2ca      	uxtb	r2, r1
 8014466:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446c:	0a19      	lsrs	r1, r3, #8
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	89fb      	ldrh	r3, [r7, #14]
 8014474:	1c58      	adds	r0, r3, #1
 8014476:	81f8      	strh	r0, [r7, #14]
 8014478:	4413      	add	r3, r2
 801447a:	b2ca      	uxtb	r2, r1
 801447c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014482:	0c19      	lsrs	r1, r3, #16
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	89fb      	ldrh	r3, [r7, #14]
 801448a:	1c58      	adds	r0, r3, #1
 801448c:	81f8      	strh	r0, [r7, #14]
 801448e:	4413      	add	r3, r2
 8014490:	b2ca      	uxtb	r2, r1
 8014492:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014498:	0e19      	lsrs	r1, r3, #24
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681a      	ldr	r2, [r3, #0]
 801449e:	89fb      	ldrh	r3, [r7, #14]
 80144a0:	1c58      	adds	r0, r3, #1
 80144a2:	81f8      	strh	r0, [r7, #14]
 80144a4:	4413      	add	r3, r2
 80144a6:	b2ca      	uxtb	r2, r1
 80144a8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80144aa:	89fb      	ldrh	r3, [r7, #14]
 80144ac:	b2da      	uxtb	r2, r3
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80144b2:	2300      	movs	r3, #0
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	3710      	adds	r7, #16
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}

080144bc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80144bc:	b480      	push	{r7}
 80144be:	b083      	sub	sp, #12
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	4603      	mov	r3, r0
 80144c4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80144c6:	79fb      	ldrb	r3, [r7, #7]
 80144c8:	2b05      	cmp	r3, #5
 80144ca:	d101      	bne.n	80144d0 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80144cc:	2301      	movs	r3, #1
 80144ce:	e000      	b.n	80144d2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80144d0:	2300      	movs	r3, #0
        }
    }
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	370c      	adds	r7, #12
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bc80      	pop	{r7}
 80144da:	4770      	bx	lr

080144dc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	4603      	mov	r3, r0
 80144e4:	6039      	str	r1, [r7, #0]
 80144e6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80144e8:	2300      	movs	r3, #0
 80144ea:	60bb      	str	r3, [r7, #8]
    switch( region )
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	2b05      	cmp	r3, #5
 80144f0:	d105      	bne.n	80144fe <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80144f2:	6838      	ldr	r0, [r7, #0]
 80144f4:	f001 f994 	bl	8015820 <RegionEU868GetPhyParam>
 80144f8:	4603      	mov	r3, r0
 80144fa:	60fb      	str	r3, [r7, #12]
 80144fc:	e001      	b.n	8014502 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	4618      	mov	r0, r3
 8014506:	3710      	adds	r7, #16
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	4603      	mov	r3, r0
 8014514:	6039      	str	r1, [r7, #0]
 8014516:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014518:	79fb      	ldrb	r3, [r7, #7]
 801451a:	2b05      	cmp	r3, #5
 801451c:	d103      	bne.n	8014526 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801451e:	6838      	ldr	r0, [r7, #0]
 8014520:	f001 faca 	bl	8015ab8 <RegionEU868SetBandTxDone>
 8014524:	e000      	b.n	8014528 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014526:	bf00      	nop
        }
    }
}
 8014528:	3708      	adds	r7, #8
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}

0801452e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801452e:	b580      	push	{r7, lr}
 8014530:	b082      	sub	sp, #8
 8014532:	af00      	add	r7, sp, #0
 8014534:	4603      	mov	r3, r0
 8014536:	6039      	str	r1, [r7, #0]
 8014538:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801453a:	79fb      	ldrb	r3, [r7, #7]
 801453c:	2b05      	cmp	r3, #5
 801453e:	d103      	bne.n	8014548 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8014540:	6838      	ldr	r0, [r7, #0]
 8014542:	f001 fae5 	bl	8015b10 <RegionEU868InitDefaults>
 8014546:	e000      	b.n	801454a <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014548:	bf00      	nop
        }
    }
}
 801454a:	bf00      	nop
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014552:	b580      	push	{r7, lr}
 8014554:	b082      	sub	sp, #8
 8014556:	af00      	add	r7, sp, #0
 8014558:	4603      	mov	r3, r0
 801455a:	6039      	str	r1, [r7, #0]
 801455c:	71fb      	strb	r3, [r7, #7]
 801455e:	4613      	mov	r3, r2
 8014560:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014562:	79fb      	ldrb	r3, [r7, #7]
 8014564:	2b05      	cmp	r3, #5
 8014566:	d106      	bne.n	8014576 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014568:	79bb      	ldrb	r3, [r7, #6]
 801456a:	4619      	mov	r1, r3
 801456c:	6838      	ldr	r0, [r7, #0]
 801456e:	f001 fb6d 	bl	8015c4c <RegionEU868Verify>
 8014572:	4603      	mov	r3, r0
 8014574:	e000      	b.n	8014578 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014576:	2300      	movs	r3, #0
        }
    }
}
 8014578:	4618      	mov	r0, r3
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	4603      	mov	r3, r0
 8014588:	6039      	str	r1, [r7, #0]
 801458a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801458c:	79fb      	ldrb	r3, [r7, #7]
 801458e:	2b05      	cmp	r3, #5
 8014590:	d103      	bne.n	801459a <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8014592:	6838      	ldr	r0, [r7, #0]
 8014594:	f001 fbd6 	bl	8015d44 <RegionEU868ApplyCFList>
 8014598:	e000      	b.n	801459c <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801459a:	bf00      	nop
        }
    }
}
 801459c:	bf00      	nop
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	4603      	mov	r3, r0
 80145ac:	6039      	str	r1, [r7, #0]
 80145ae:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145b0:	79fb      	ldrb	r3, [r7, #7]
 80145b2:	2b05      	cmp	r3, #5
 80145b4:	d104      	bne.n	80145c0 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80145b6:	6838      	ldr	r0, [r7, #0]
 80145b8:	f001 fc38 	bl	8015e2c <RegionEU868ChanMaskSet>
 80145bc:	4603      	mov	r3, r0
 80145be:	e000      	b.n	80145c2 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80145c0:	2300      	movs	r3, #0
        }
    }
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3708      	adds	r7, #8
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}

080145ca <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80145ca:	b580      	push	{r7, lr}
 80145cc:	b082      	sub	sp, #8
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	603b      	str	r3, [r7, #0]
 80145d2:	4603      	mov	r3, r0
 80145d4:	71fb      	strb	r3, [r7, #7]
 80145d6:	460b      	mov	r3, r1
 80145d8:	71bb      	strb	r3, [r7, #6]
 80145da:	4613      	mov	r3, r2
 80145dc:	717b      	strb	r3, [r7, #5]
    switch( region )
 80145de:	79fb      	ldrb	r3, [r7, #7]
 80145e0:	2b05      	cmp	r3, #5
 80145e2:	d107      	bne.n	80145f4 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80145e4:	7979      	ldrb	r1, [r7, #5]
 80145e6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	683a      	ldr	r2, [r7, #0]
 80145ee:	f001 fc47 	bl	8015e80 <RegionEU868ComputeRxWindowParameters>
 80145f2:	e000      	b.n	80145f6 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80145f4:	bf00      	nop
        }
    }
}
 80145f6:	bf00      	nop
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}

080145fe <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80145fe:	b580      	push	{r7, lr}
 8014600:	b084      	sub	sp, #16
 8014602:	af00      	add	r7, sp, #0
 8014604:	4603      	mov	r3, r0
 8014606:	60b9      	str	r1, [r7, #8]
 8014608:	607a      	str	r2, [r7, #4]
 801460a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801460c:	7bfb      	ldrb	r3, [r7, #15]
 801460e:	2b05      	cmp	r3, #5
 8014610:	d105      	bne.n	801461e <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8014612:	6879      	ldr	r1, [r7, #4]
 8014614:	68b8      	ldr	r0, [r7, #8]
 8014616:	f001 fc8d 	bl	8015f34 <RegionEU868RxConfig>
 801461a:	4603      	mov	r3, r0
 801461c:	e000      	b.n	8014620 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801461e:	2300      	movs	r3, #0
        }
    }
}
 8014620:	4618      	mov	r0, r3
 8014622:	3710      	adds	r7, #16
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	60b9      	str	r1, [r7, #8]
 8014630:	607a      	str	r2, [r7, #4]
 8014632:	603b      	str	r3, [r7, #0]
 8014634:	4603      	mov	r3, r0
 8014636:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014638:	7bfb      	ldrb	r3, [r7, #15]
 801463a:	2b05      	cmp	r3, #5
 801463c:	d106      	bne.n	801464c <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801463e:	683a      	ldr	r2, [r7, #0]
 8014640:	6879      	ldr	r1, [r7, #4]
 8014642:	68b8      	ldr	r0, [r7, #8]
 8014644:	f001 fd46 	bl	80160d4 <RegionEU868TxConfig>
 8014648:	4603      	mov	r3, r0
 801464a:	e000      	b.n	801464e <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801464c:	2300      	movs	r3, #0
        }
    }
}
 801464e:	4618      	mov	r0, r3
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}

08014656 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014656:	b580      	push	{r7, lr}
 8014658:	b086      	sub	sp, #24
 801465a:	af02      	add	r7, sp, #8
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
 8014660:	603b      	str	r3, [r7, #0]
 8014662:	4603      	mov	r3, r0
 8014664:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014666:	7bfb      	ldrb	r3, [r7, #15]
 8014668:	2b05      	cmp	r3, #5
 801466a:	d109      	bne.n	8014680 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801466c:	69fb      	ldr	r3, [r7, #28]
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	69bb      	ldr	r3, [r7, #24]
 8014672:	683a      	ldr	r2, [r7, #0]
 8014674:	6879      	ldr	r1, [r7, #4]
 8014676:	68b8      	ldr	r0, [r7, #8]
 8014678:	f001 fdfc 	bl	8016274 <RegionEU868LinkAdrReq>
 801467c:	4603      	mov	r3, r0
 801467e:	e000      	b.n	8014682 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014680:	2300      	movs	r3, #0
        }
    }
}
 8014682:	4618      	mov	r0, r3
 8014684:	3710      	adds	r7, #16
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}

0801468a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801468a:	b580      	push	{r7, lr}
 801468c:	b082      	sub	sp, #8
 801468e:	af00      	add	r7, sp, #0
 8014690:	4603      	mov	r3, r0
 8014692:	6039      	str	r1, [r7, #0]
 8014694:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014696:	79fb      	ldrb	r3, [r7, #7]
 8014698:	2b05      	cmp	r3, #5
 801469a:	d104      	bne.n	80146a6 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801469c:	6838      	ldr	r0, [r7, #0]
 801469e:	f001 ff0b 	bl	80164b8 <RegionEU868RxParamSetupReq>
 80146a2:	4603      	mov	r3, r0
 80146a4:	e000      	b.n	80146a8 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80146a6:	2300      	movs	r3, #0
        }
    }
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3708      	adds	r7, #8
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	4603      	mov	r3, r0
 80146b8:	6039      	str	r1, [r7, #0]
 80146ba:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146bc:	79fb      	ldrb	r3, [r7, #7]
 80146be:	2b05      	cmp	r3, #5
 80146c0:	d104      	bne.n	80146cc <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80146c2:	6838      	ldr	r0, [r7, #0]
 80146c4:	f001 ff36 	bl	8016534 <RegionEU868NewChannelReq>
 80146c8:	4603      	mov	r3, r0
 80146ca:	e000      	b.n	80146ce <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80146cc:	2300      	movs	r3, #0
        }
    }
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3708      	adds	r7, #8
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}

080146d6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80146d6:	b580      	push	{r7, lr}
 80146d8:	b082      	sub	sp, #8
 80146da:	af00      	add	r7, sp, #0
 80146dc:	4603      	mov	r3, r0
 80146de:	6039      	str	r1, [r7, #0]
 80146e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146e2:	79fb      	ldrb	r3, [r7, #7]
 80146e4:	2b05      	cmp	r3, #5
 80146e6:	d104      	bne.n	80146f2 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80146e8:	6838      	ldr	r0, [r7, #0]
 80146ea:	f001 ff81 	bl	80165f0 <RegionEU868TxParamSetupReq>
 80146ee:	4603      	mov	r3, r0
 80146f0:	e000      	b.n	80146f4 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80146f2:	2300      	movs	r3, #0
        }
    }
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3708      	adds	r7, #8
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
 8014702:	4603      	mov	r3, r0
 8014704:	6039      	str	r1, [r7, #0]
 8014706:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014708:	79fb      	ldrb	r3, [r7, #7]
 801470a:	2b05      	cmp	r3, #5
 801470c:	d104      	bne.n	8014718 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801470e:	6838      	ldr	r0, [r7, #0]
 8014710:	f001 ff7a 	bl	8016608 <RegionEU868DlChannelReq>
 8014714:	4603      	mov	r3, r0
 8014716:	e000      	b.n	801471a <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014718:	2300      	movs	r3, #0
        }
    }
}
 801471a:	4618      	mov	r0, r3
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b082      	sub	sp, #8
 8014726:	af00      	add	r7, sp, #0
 8014728:	4603      	mov	r3, r0
 801472a:	71fb      	strb	r3, [r7, #7]
 801472c:	460b      	mov	r3, r1
 801472e:	71bb      	strb	r3, [r7, #6]
 8014730:	4613      	mov	r3, r2
 8014732:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014734:	79fb      	ldrb	r3, [r7, #7]
 8014736:	2b05      	cmp	r3, #5
 8014738:	d108      	bne.n	801474c <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801473a:	797a      	ldrb	r2, [r7, #5]
 801473c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014740:	4611      	mov	r1, r2
 8014742:	4618      	mov	r0, r3
 8014744:	f001 ffa4 	bl	8016690 <RegionEU868AlternateDr>
 8014748:	4603      	mov	r3, r0
 801474a:	e000      	b.n	801474e <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801474c:	2300      	movs	r3, #0
        }
    }
}
 801474e:	4618      	mov	r0, r3
 8014750:	3708      	adds	r7, #8
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}

08014756 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014756:	b580      	push	{r7, lr}
 8014758:	b084      	sub	sp, #16
 801475a:	af00      	add	r7, sp, #0
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	607a      	str	r2, [r7, #4]
 8014760:	603b      	str	r3, [r7, #0]
 8014762:	4603      	mov	r3, r0
 8014764:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014766:	7bfb      	ldrb	r3, [r7, #15]
 8014768:	2b05      	cmp	r3, #5
 801476a:	d107      	bne.n	801477c <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	683a      	ldr	r2, [r7, #0]
 8014770:	6879      	ldr	r1, [r7, #4]
 8014772:	68b8      	ldr	r0, [r7, #8]
 8014774:	f001 ff9c 	bl	80166b0 <RegionEU868NextChannel>
 8014778:	4603      	mov	r3, r0
 801477a:	e000      	b.n	801477e <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801477c:	2309      	movs	r3, #9
        }
    }
}
 801477e:	4618      	mov	r0, r3
 8014780:	3710      	adds	r7, #16
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}

08014786 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014786:	b580      	push	{r7, lr}
 8014788:	b082      	sub	sp, #8
 801478a:	af00      	add	r7, sp, #0
 801478c:	4603      	mov	r3, r0
 801478e:	6039      	str	r1, [r7, #0]
 8014790:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014792:	79fb      	ldrb	r3, [r7, #7]
 8014794:	2b05      	cmp	r3, #5
 8014796:	d103      	bne.n	80147a0 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8014798:	6838      	ldr	r0, [r7, #0]
 801479a:	f002 f903 	bl	80169a4 <RegionEU868SetContinuousWave>
 801479e:	e000      	b.n	80147a2 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80147a0:	bf00      	nop
        }
    }
}
 80147a2:	bf00      	nop
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80147aa:	b590      	push	{r4, r7, lr}
 80147ac:	b083      	sub	sp, #12
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	4604      	mov	r4, r0
 80147b2:	4608      	mov	r0, r1
 80147b4:	4611      	mov	r1, r2
 80147b6:	461a      	mov	r2, r3
 80147b8:	4623      	mov	r3, r4
 80147ba:	71fb      	strb	r3, [r7, #7]
 80147bc:	4603      	mov	r3, r0
 80147be:	71bb      	strb	r3, [r7, #6]
 80147c0:	460b      	mov	r3, r1
 80147c2:	717b      	strb	r3, [r7, #5]
 80147c4:	4613      	mov	r3, r2
 80147c6:	713b      	strb	r3, [r7, #4]
    switch( region )
 80147c8:	79fb      	ldrb	r3, [r7, #7]
 80147ca:	2b05      	cmp	r3, #5
 80147cc:	d109      	bne.n	80147e2 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80147ce:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80147d2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80147d6:	79bb      	ldrb	r3, [r7, #6]
 80147d8:	4618      	mov	r0, r3
 80147da:	f002 f931 	bl	8016a40 <RegionEU868ApplyDrOffset>
 80147de:	4603      	mov	r3, r0
 80147e0:	e000      	b.n	80147e4 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80147e2:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd90      	pop	{r4, r7, pc}

080147ec <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80147ec:	b480      	push	{r7}
 80147ee:	b083      	sub	sp, #12
 80147f0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80147f2:	4b04      	ldr	r3, [pc, #16]	; (8014804 <RegionGetVersion+0x18>)
 80147f4:	607b      	str	r3, [r7, #4]

    return version;
 80147f6:	687b      	ldr	r3, [r7, #4]
}
 80147f8:	4618      	mov	r0, r3
 80147fa:	370c      	adds	r7, #12
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bc80      	pop	{r7}
 8014800:	4770      	bx	lr
 8014802:	bf00      	nop
 8014804:	01010003 	.word	0x01010003

08014808 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014808:	b480      	push	{r7}
 801480a:	b087      	sub	sp, #28
 801480c:	af00      	add	r7, sp, #0
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	4608      	mov	r0, r1
 8014812:	4639      	mov	r1, r7
 8014814:	e881 000c 	stmia.w	r1, {r2, r3}
 8014818:	4603      	mov	r3, r0
 801481a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	881b      	ldrh	r3, [r3, #0]
 8014820:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014822:	7afb      	ldrb	r3, [r7, #11]
 8014824:	f083 0301 	eor.w	r3, r3, #1
 8014828:	b2db      	uxtb	r3, r3
 801482a:	2b00      	cmp	r3, #0
 801482c:	d01b      	beq.n	8014866 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801482e:	f242 7310 	movw	r3, #10000	; 0x2710
 8014832:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801483a:	d202      	bcs.n	8014842 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801483c:	2364      	movs	r3, #100	; 0x64
 801483e:	82bb      	strh	r3, [r7, #20]
 8014840:	e00b      	b.n	801485a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014848:	4293      	cmp	r3, r2
 801484a:	d803      	bhi.n	8014854 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801484c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014850:	82bb      	strh	r3, [r7, #20]
 8014852:	e002      	b.n	801485a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014854:	f242 7310 	movw	r3, #10000	; 0x2710
 8014858:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801485a:	8aba      	ldrh	r2, [r7, #20]
 801485c:	8afb      	ldrh	r3, [r7, #22]
 801485e:	4293      	cmp	r3, r2
 8014860:	bf38      	it	cc
 8014862:	4613      	movcc	r3, r2
 8014864:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014866:	8afb      	ldrh	r3, [r7, #22]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d101      	bne.n	8014870 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801486c:	2301      	movs	r3, #1
 801486e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014870:	8afb      	ldrh	r3, [r7, #22]
}
 8014872:	4618      	mov	r0, r3
 8014874:	371c      	adds	r7, #28
 8014876:	46bd      	mov	sp, r7
 8014878:	bc80      	pop	{r7}
 801487a:	4770      	bx	lr

0801487c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b08e      	sub	sp, #56	; 0x38
 8014880:	af02      	add	r7, sp, #8
 8014882:	60f8      	str	r0, [r7, #12]
 8014884:	4608      	mov	r0, r1
 8014886:	4639      	mov	r1, r7
 8014888:	e881 000c 	stmia.w	r1, {r2, r3}
 801488c:	4603      	mov	r3, r0
 801488e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	881b      	ldrh	r3, [r3, #0]
 8014894:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014896:	4b4b      	ldr	r3, [pc, #300]	; (80149c4 <SetMaxTimeCredits+0x148>)
 8014898:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801489a:	463b      	mov	r3, r7
 801489c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80148a0:	f005 fd66 	bl	801a370 <SysTimeToMs>
 80148a4:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80148a6:	f107 0314 	add.w	r3, r7, #20
 80148aa:	2200      	movs	r2, #0
 80148ac:	601a      	str	r2, [r3, #0]
 80148ae:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80148b0:	7af9      	ldrb	r1, [r7, #11]
 80148b2:	463b      	mov	r3, r7
 80148b4:	cb0c      	ldmia	r3, {r2, r3}
 80148b6:	68f8      	ldr	r0, [r7, #12]
 80148b8:	f7ff ffa6 	bl	8014808 <GetDutyCycle>
 80148bc:	4603      	mov	r3, r0
 80148be:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80148c0:	7afb      	ldrb	r3, [r7, #11]
 80148c2:	f083 0301 	eor.w	r3, r3, #1
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d062      	beq.n	8014992 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80148cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80148ce:	2b64      	cmp	r3, #100	; 0x64
 80148d0:	d105      	bne.n	80148de <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80148d2:	4b3c      	ldr	r3, [pc, #240]	; (80149c4 <SetMaxTimeCredits+0x148>)
 80148d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148da:	609a      	str	r2, [r3, #8]
 80148dc:	e00b      	b.n	80148f6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80148de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80148e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80148e4:	d105      	bne.n	80148f2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80148e6:	4b38      	ldr	r3, [pc, #224]	; (80149c8 <SetMaxTimeCredits+0x14c>)
 80148e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148ee:	609a      	str	r2, [r3, #8]
 80148f0:	e001      	b.n	80148f6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80148f2:	4b36      	ldr	r3, [pc, #216]	; (80149cc <SetMaxTimeCredits+0x150>)
 80148f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	689a      	ldr	r2, [r3, #8]
 80148fa:	f107 031c 	add.w	r3, r7, #28
 80148fe:	4611      	mov	r1, r2
 8014900:	4618      	mov	r0, r3
 8014902:	f005 fd5d 	bl	801a3c0 <SysTimeFromMs>
 8014906:	f107 0014 	add.w	r0, r7, #20
 801490a:	6a3b      	ldr	r3, [r7, #32]
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	69fb      	ldr	r3, [r7, #28]
 8014910:	463a      	mov	r2, r7
 8014912:	ca06      	ldmia	r2, {r1, r2}
 8014914:	f005 fc6d 	bl	801a1f2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014918:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801491c:	f083 0301 	eor.w	r3, r3, #1
 8014920:	b2db      	uxtb	r3, r3
 8014922:	2b00      	cmp	r3, #0
 8014924:	d006      	beq.n	8014934 <SetMaxTimeCredits+0xb8>
 8014926:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801492a:	f083 0301 	eor.w	r3, r3, #1
 801492e:	b2db      	uxtb	r3, r3
 8014930:	2b00      	cmp	r3, #0
 8014932:	d108      	bne.n	8014946 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801493a:	429a      	cmp	r2, r3
 801493c:	d103      	bne.n	8014946 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801493e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014940:	4a23      	ldr	r2, [pc, #140]	; (80149d0 <SetMaxTimeCredits+0x154>)
 8014942:	4293      	cmp	r3, r2
 8014944:	d92f      	bls.n	80149a6 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801494a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	4a21      	ldr	r2, [pc, #132]	; (80149d4 <SetMaxTimeCredits+0x158>)
 8014950:	4293      	cmp	r3, r2
 8014952:	d928      	bls.n	80149a6 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801495a:	3b30      	subs	r3, #48	; 0x30
 801495c:	4a1e      	ldr	r2, [pc, #120]	; (80149d8 <SetMaxTimeCredits+0x15c>)
 801495e:	fba2 2303 	umull	r2, r3, r2, r3
 8014962:	0c1b      	lsrs	r3, r3, #16
 8014964:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	4a1c      	ldr	r2, [pc, #112]	; (80149dc <SetMaxTimeCredits+0x160>)
 801496a:	fb02 f303 	mul.w	r3, r2, r3
 801496e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014976:	3330      	adds	r3, #48	; 0x30
 8014978:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801497a:	2300      	movs	r3, #0
 801497c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801497e:	f107 0314 	add.w	r3, r7, #20
 8014982:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014986:	f005 fcf3 	bl	801a370 <SysTimeToMs>
 801498a:	4602      	mov	r2, r0
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	609a      	str	r2, [r3, #8]
 8014990:	e009      	b.n	80149a6 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014992:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014996:	f083 0301 	eor.w	r3, r3, #1
 801499a:	b2db      	uxtb	r3, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149a4:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d102      	bne.n	80149b4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149b2:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149b8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80149ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3730      	adds	r7, #48	; 0x30
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	001b7740 	.word	0x001b7740
 80149c8:	0112a880 	.word	0x0112a880
 80149cc:	02932e00 	.word	0x02932e00
 80149d0:	0001517f 	.word	0x0001517f
 80149d4:	0001ec2f 	.word	0x0001ec2f
 80149d8:	c22e4507 	.word	0xc22e4507
 80149dc:	00015180 	.word	0x00015180

080149e0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b086      	sub	sp, #24
 80149e4:	af02      	add	r7, sp, #8
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	4608      	mov	r0, r1
 80149ea:	4611      	mov	r1, r2
 80149ec:	461a      	mov	r2, r3
 80149ee:	4603      	mov	r3, r0
 80149f0:	70fb      	strb	r3, [r7, #3]
 80149f2:	460b      	mov	r3, r1
 80149f4:	70bb      	strb	r3, [r7, #2]
 80149f6:	4613      	mov	r3, r2
 80149f8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80149fa:	78f9      	ldrb	r1, [r7, #3]
 80149fc:	787b      	ldrb	r3, [r7, #1]
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	78bb      	ldrb	r3, [r7, #2]
 8014a02:	9300      	str	r3, [sp, #0]
 8014a04:	f107 0318 	add.w	r3, r7, #24
 8014a08:	cb0c      	ldmia	r3, {r2, r3}
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f7ff ff36 	bl	801487c <SetMaxTimeCredits>
 8014a10:	4603      	mov	r3, r0
 8014a12:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014a14:	78fb      	ldrb	r3, [r7, #3]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d00a      	beq.n	8014a30 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f006 fae6 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 8014a24:	4602      	mov	r2, r0
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	68db      	ldr	r3, [r3, #12]
 8014a2a:	441a      	add	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	68da      	ldr	r2, [r3, #12]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	691b      	ldr	r3, [r3, #16]
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d903      	bls.n	8014a44 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	691a      	ldr	r2, [r3, #16]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6a3a      	ldr	r2, [r7, #32]
 8014a48:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014a4a:	89fb      	ldrh	r3, [r7, #14]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3710      	adds	r7, #16
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014a54:	b480      	push	{r7}
 8014a56:	b085      	sub	sp, #20
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	460a      	mov	r2, r1
 8014a5e:	80fb      	strh	r3, [r7, #6]
 8014a60:	4613      	mov	r3, r2
 8014a62:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014a64:	2300      	movs	r3, #0
 8014a66:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014a68:	2300      	movs	r3, #0
 8014a6a:	73bb      	strb	r3, [r7, #14]
 8014a6c:	e011      	b.n	8014a92 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014a6e:	88fa      	ldrh	r2, [r7, #6]
 8014a70:	7bbb      	ldrb	r3, [r7, #14]
 8014a72:	2101      	movs	r1, #1
 8014a74:	fa01 f303 	lsl.w	r3, r1, r3
 8014a78:	401a      	ands	r2, r3
 8014a7a:	7bbb      	ldrb	r3, [r7, #14]
 8014a7c:	2101      	movs	r1, #1
 8014a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d102      	bne.n	8014a8c <CountChannels+0x38>
        {
            nbActiveBits++;
 8014a86:	7bfb      	ldrb	r3, [r7, #15]
 8014a88:	3301      	adds	r3, #1
 8014a8a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014a8c:	7bbb      	ldrb	r3, [r7, #14]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	73bb      	strb	r3, [r7, #14]
 8014a92:	7bba      	ldrb	r2, [r7, #14]
 8014a94:	797b      	ldrb	r3, [r7, #5]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d3e9      	bcc.n	8014a6e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3714      	adds	r7, #20
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bc80      	pop	{r7}
 8014aa4:	4770      	bx	lr

08014aa6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014aa6:	b580      	push	{r7, lr}
 8014aa8:	b084      	sub	sp, #16
 8014aaa:	af00      	add	r7, sp, #0
 8014aac:	6039      	str	r1, [r7, #0]
 8014aae:	4611      	mov	r1, r2
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	71fb      	strb	r3, [r7, #7]
 8014ab6:	460b      	mov	r3, r1
 8014ab8:	71bb      	strb	r3, [r7, #6]
 8014aba:	4613      	mov	r3, r2
 8014abc:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014abe:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8014ac2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014ac6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014aca:	4618      	mov	r0, r3
 8014acc:	f000 f85d 	bl	8014b8a <RegionCommonValueInRange>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d101      	bne.n	8014ada <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	e053      	b.n	8014b82 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014ada:	2300      	movs	r3, #0
 8014adc:	73fb      	strb	r3, [r7, #15]
 8014ade:	2300      	movs	r3, #0
 8014ae0:	73bb      	strb	r3, [r7, #14]
 8014ae2:	e049      	b.n	8014b78 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	737b      	strb	r3, [r7, #13]
 8014ae8:	e03d      	b.n	8014b66 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014aea:	7bbb      	ldrb	r3, [r7, #14]
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	683a      	ldr	r2, [r7, #0]
 8014af0:	4413      	add	r3, r2
 8014af2:	881b      	ldrh	r3, [r3, #0]
 8014af4:	461a      	mov	r2, r3
 8014af6:	7b7b      	ldrb	r3, [r7, #13]
 8014af8:	fa42 f303 	asr.w	r3, r2, r3
 8014afc:	f003 0301 	and.w	r3, r3, #1
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d02d      	beq.n	8014b60 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014b04:	7bfa      	ldrb	r2, [r7, #15]
 8014b06:	7b7b      	ldrb	r3, [r7, #13]
 8014b08:	4413      	add	r3, r2
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4413      	add	r3, r2
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	461a      	mov	r2, r3
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	4413      	add	r3, r2
 8014b1a:	7a1b      	ldrb	r3, [r3, #8]
 8014b1c:	f343 0303 	sbfx	r3, r3, #0, #4
 8014b20:	b25b      	sxtb	r3, r3
 8014b22:	f003 030f 	and.w	r3, r3, #15
 8014b26:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014b28:	7bfa      	ldrb	r2, [r7, #15]
 8014b2a:	7b7b      	ldrb	r3, [r7, #13]
 8014b2c:	4413      	add	r3, r2
 8014b2e:	461a      	mov	r2, r3
 8014b30:	4613      	mov	r3, r2
 8014b32:	005b      	lsls	r3, r3, #1
 8014b34:	4413      	add	r3, r2
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	461a      	mov	r2, r3
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	7a1b      	ldrb	r3, [r3, #8]
 8014b40:	f343 1303 	sbfx	r3, r3, #4, #4
 8014b44:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014b46:	f003 030f 	and.w	r3, r3, #15
 8014b4a:	b25a      	sxtb	r2, r3
 8014b4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014b50:	4618      	mov	r0, r3
 8014b52:	f000 f81a 	bl	8014b8a <RegionCommonValueInRange>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d101      	bne.n	8014b60 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	e010      	b.n	8014b82 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014b60:	7b7b      	ldrb	r3, [r7, #13]
 8014b62:	3301      	adds	r3, #1
 8014b64:	737b      	strb	r3, [r7, #13]
 8014b66:	7b7b      	ldrb	r3, [r7, #13]
 8014b68:	2b0f      	cmp	r3, #15
 8014b6a:	d9be      	bls.n	8014aea <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014b6c:	7bfb      	ldrb	r3, [r7, #15]
 8014b6e:	3310      	adds	r3, #16
 8014b70:	73fb      	strb	r3, [r7, #15]
 8014b72:	7bbb      	ldrb	r3, [r7, #14]
 8014b74:	3301      	adds	r3, #1
 8014b76:	73bb      	strb	r3, [r7, #14]
 8014b78:	7bfa      	ldrb	r2, [r7, #15]
 8014b7a:	79fb      	ldrb	r3, [r7, #7]
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d3b1      	bcc.n	8014ae4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014b80:	2300      	movs	r3, #0
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014b8a:	b480      	push	{r7}
 8014b8c:	b083      	sub	sp, #12
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	4603      	mov	r3, r0
 8014b92:	71fb      	strb	r3, [r7, #7]
 8014b94:	460b      	mov	r3, r1
 8014b96:	71bb      	strb	r3, [r7, #6]
 8014b98:	4613      	mov	r3, r2
 8014b9a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014b9c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014ba0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	db07      	blt.n	8014bb8 <RegionCommonValueInRange+0x2e>
 8014ba8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014bac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	dc01      	bgt.n	8014bb8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014bb4:	2301      	movs	r3, #1
 8014bb6:	e000      	b.n	8014bba <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014bb8:	2300      	movs	r3, #0
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	370c      	adds	r7, #12
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bc80      	pop	{r7}
 8014bc2:	4770      	bx	lr

08014bc4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b085      	sub	sp, #20
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	460b      	mov	r3, r1
 8014bce:	70fb      	strb	r3, [r7, #3]
 8014bd0:	4613      	mov	r3, r2
 8014bd2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014bd4:	78fb      	ldrb	r3, [r7, #3]
 8014bd6:	091b      	lsrs	r3, r3, #4
 8014bd8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014bda:	78bb      	ldrb	r3, [r7, #2]
 8014bdc:	091b      	lsrs	r3, r3, #4
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	7bfa      	ldrb	r2, [r7, #15]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d803      	bhi.n	8014bee <RegionCommonChanDisable+0x2a>
 8014be6:	78fa      	ldrb	r2, [r7, #3]
 8014be8:	78bb      	ldrb	r3, [r7, #2]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d301      	bcc.n	8014bf2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	e017      	b.n	8014c22 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014bf2:	7bfb      	ldrb	r3, [r7, #15]
 8014bf4:	005b      	lsls	r3, r3, #1
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	4413      	add	r3, r2
 8014bfa:	881b      	ldrh	r3, [r3, #0]
 8014bfc:	b21a      	sxth	r2, r3
 8014bfe:	78fb      	ldrb	r3, [r7, #3]
 8014c00:	f003 030f 	and.w	r3, r3, #15
 8014c04:	2101      	movs	r1, #1
 8014c06:	fa01 f303 	lsl.w	r3, r1, r3
 8014c0a:	b21b      	sxth	r3, r3
 8014c0c:	43db      	mvns	r3, r3
 8014c0e:	b21b      	sxth	r3, r3
 8014c10:	4013      	ands	r3, r2
 8014c12:	b219      	sxth	r1, r3
 8014c14:	7bfb      	ldrb	r3, [r7, #15]
 8014c16:	005b      	lsls	r3, r3, #1
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	b28a      	uxth	r2, r1
 8014c1e:	801a      	strh	r2, [r3, #0]

    return true;
 8014c20:	2301      	movs	r3, #1
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	3714      	adds	r7, #20
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bc80      	pop	{r7}
 8014c2a:	4770      	bx	lr

08014c2c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	460b      	mov	r3, r1
 8014c36:	70fb      	strb	r3, [r7, #3]
 8014c38:	4613      	mov	r3, r2
 8014c3a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d101      	bne.n	8014c4a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014c46:	2300      	movs	r3, #0
 8014c48:	e018      	b.n	8014c7c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014c4a:	78fb      	ldrb	r3, [r7, #3]
 8014c4c:	73bb      	strb	r3, [r7, #14]
 8014c4e:	e010      	b.n	8014c72 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014c50:	7bbb      	ldrb	r3, [r7, #14]
 8014c52:	005b      	lsls	r3, r3, #1
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	4413      	add	r3, r2
 8014c58:	881b      	ldrh	r3, [r3, #0]
 8014c5a:	2110      	movs	r1, #16
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7ff fef9 	bl	8014a54 <CountChannels>
 8014c62:	4603      	mov	r3, r0
 8014c64:	461a      	mov	r2, r3
 8014c66:	7bfb      	ldrb	r3, [r7, #15]
 8014c68:	4413      	add	r3, r2
 8014c6a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014c6c:	7bbb      	ldrb	r3, [r7, #14]
 8014c6e:	3301      	adds	r3, #1
 8014c70:	73bb      	strb	r3, [r7, #14]
 8014c72:	7bba      	ldrb	r2, [r7, #14]
 8014c74:	78bb      	ldrb	r3, [r7, #2]
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d3ea      	bcc.n	8014c50 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014c84:	b480      	push	{r7}
 8014c86:	b087      	sub	sp, #28
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	4613      	mov	r3, r2
 8014c90:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d016      	beq.n	8014cc6 <RegionCommonChanMaskCopy+0x42>
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d013      	beq.n	8014cc6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	75fb      	strb	r3, [r7, #23]
 8014ca2:	e00c      	b.n	8014cbe <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014ca4:	7dfb      	ldrb	r3, [r7, #23]
 8014ca6:	005b      	lsls	r3, r3, #1
 8014ca8:	68ba      	ldr	r2, [r7, #8]
 8014caa:	441a      	add	r2, r3
 8014cac:	7dfb      	ldrb	r3, [r7, #23]
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	68f9      	ldr	r1, [r7, #12]
 8014cb2:	440b      	add	r3, r1
 8014cb4:	8812      	ldrh	r2, [r2, #0]
 8014cb6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014cb8:	7dfb      	ldrb	r3, [r7, #23]
 8014cba:	3301      	adds	r3, #1
 8014cbc:	75fb      	strb	r3, [r7, #23]
 8014cbe:	7dfa      	ldrb	r2, [r7, #23]
 8014cc0:	79fb      	ldrb	r3, [r7, #7]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d3ee      	bcc.n	8014ca4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014cc6:	bf00      	nop
 8014cc8:	371c      	adds	r7, #28
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bc80      	pop	{r7}
 8014cce:	4770      	bx	lr

08014cd0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014cd0:	b082      	sub	sp, #8
 8014cd2:	b580      	push	{r7, lr}
 8014cd4:	b086      	sub	sp, #24
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	60f8      	str	r0, [r7, #12]
 8014cda:	60b9      	str	r1, [r7, #8]
 8014cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8014cde:	4613      	mov	r3, r2
 8014ce0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014ce2:	79f9      	ldrb	r1, [r7, #7]
 8014ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ce8:	cb0c      	ldmia	r3, {r2, r3}
 8014cea:	68f8      	ldr	r0, [r7, #12]
 8014cec:	f7ff fd8c 	bl	8014808 <GetDutyCycle>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	68da      	ldr	r2, [r3, #12]
 8014cf8:	8afb      	ldrh	r3, [r7, #22]
 8014cfa:	68b9      	ldr	r1, [r7, #8]
 8014cfc:	fb01 f303 	mul.w	r3, r1, r3
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d909      	bls.n	8014d18 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	68da      	ldr	r2, [r3, #12]
 8014d08:	8afb      	ldrh	r3, [r7, #22]
 8014d0a:	68b9      	ldr	r1, [r7, #8]
 8014d0c:	fb01 f303 	mul.w	r3, r1, r3
 8014d10:	1ad2      	subs	r2, r2, r3
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8014d16:	e002      	b.n	8014d1e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	60da      	str	r2, [r3, #12]
}
 8014d1e:	bf00      	nop
 8014d20:	3718      	adds	r7, #24
 8014d22:	46bd      	mov	sp, r7
 8014d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014d28:	b002      	add	sp, #8
 8014d2a:	4770      	bx	lr

08014d2c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d2e:	b08f      	sub	sp, #60	; 0x3c
 8014d30:	af04      	add	r7, sp, #16
 8014d32:	6039      	str	r1, [r7, #0]
 8014d34:	4611      	mov	r1, r2
 8014d36:	461a      	mov	r2, r3
 8014d38:	4603      	mov	r3, r0
 8014d3a:	71fb      	strb	r3, [r7, #7]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	71bb      	strb	r3, [r7, #6]
 8014d40:	4613      	mov	r3, r2
 8014d42:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014d44:	f04f 33ff 	mov.w	r3, #4294967295
 8014d48:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014d4a:	f006 f93f 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 8014d4e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014d50:	2300      	movs	r3, #0
 8014d52:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014d54:	2301      	movs	r3, #1
 8014d56:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014d5e:	2300      	movs	r3, #0
 8014d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014d64:	e0ba      	b.n	8014edc <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014d66:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	4413      	add	r3, r2
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	461a      	mov	r2, r3
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	189c      	adds	r4, r3, r2
 8014d78:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014d7c:	797a      	ldrb	r2, [r7, #5]
 8014d7e:	79fd      	ldrb	r5, [r7, #7]
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	9302      	str	r3, [sp, #8]
 8014d84:	46ec      	mov	ip, sp
 8014d86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014d8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014d8e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014d92:	4633      	mov	r3, r6
 8014d94:	4629      	mov	r1, r5
 8014d96:	4620      	mov	r0, r4
 8014d98:	f7ff fe22 	bl	80149e0 <UpdateTimeCredits>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014da0:	8afa      	ldrh	r2, [r7, #22]
 8014da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014da4:	fb02 f303 	mul.w	r3, r2, r3
 8014da8:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014daa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014dae:	4613      	mov	r3, r2
 8014db0:	005b      	lsls	r3, r3, #1
 8014db2:	4413      	add	r3, r2
 8014db4:	00db      	lsls	r3, r3, #3
 8014db6:	461a      	mov	r2, r3
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	4413      	add	r3, r2
 8014dbc:	68db      	ldr	r3, [r3, #12]
 8014dbe:	69ba      	ldr	r2, [r7, #24]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d308      	bcc.n	8014dd6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014dc4:	797b      	ldrb	r3, [r7, #5]
 8014dc6:	f083 0301 	eor.w	r3, r3, #1
 8014dca:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d013      	beq.n	8014df8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014dd0:	79fb      	ldrb	r3, [r7, #7]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d010      	beq.n	8014df8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014dd6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014dda:	4613      	mov	r3, r2
 8014ddc:	005b      	lsls	r3, r3, #1
 8014dde:	4413      	add	r3, r2
 8014de0:	00db      	lsls	r3, r3, #3
 8014de2:	461a      	mov	r2, r3
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	4413      	add	r3, r2
 8014de8:	2201      	movs	r2, #1
 8014dea:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014df0:	3301      	adds	r3, #1
 8014df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014df6:	e06c      	b.n	8014ed2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014df8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014dfc:	4613      	mov	r3, r2
 8014dfe:	005b      	lsls	r3, r3, #1
 8014e00:	4413      	add	r3, r2
 8014e02:	00db      	lsls	r3, r3, #3
 8014e04:	461a      	mov	r2, r3
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	4413      	add	r3, r2
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014e0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014e12:	4613      	mov	r3, r2
 8014e14:	005b      	lsls	r3, r3, #1
 8014e16:	4413      	add	r3, r2
 8014e18:	00db      	lsls	r3, r3, #3
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	4413      	add	r3, r2
 8014e20:	691b      	ldr	r3, [r3, #16]
 8014e22:	69ba      	ldr	r2, [r7, #24]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d215      	bcs.n	8014e54 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014e28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	005b      	lsls	r3, r3, #1
 8014e30:	4413      	add	r3, r2
 8014e32:	00db      	lsls	r3, r3, #3
 8014e34:	461a      	mov	r2, r3
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	4413      	add	r3, r2
 8014e3a:	68db      	ldr	r3, [r3, #12]
 8014e3c:	69ba      	ldr	r2, [r7, #24]
 8014e3e:	1ad3      	subs	r3, r2, r3
 8014e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e42:	4293      	cmp	r3, r2
 8014e44:	bf28      	it	cs
 8014e46:	4613      	movcs	r3, r2
 8014e48:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014e4e:	3301      	adds	r3, #1
 8014e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014e54:	79fb      	ldrb	r3, [r7, #7]
 8014e56:	f083 0301 	eor.w	r3, r3, #1
 8014e5a:	b2db      	uxtb	r3, r3
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d038      	beq.n	8014ed2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014e60:	2300      	movs	r3, #0
 8014e62:	60fb      	str	r3, [r7, #12]
 8014e64:	2300      	movs	r3, #0
 8014e66:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014e68:	8afb      	ldrh	r3, [r7, #22]
 8014e6a:	2b64      	cmp	r3, #100	; 0x64
 8014e6c:	d103      	bne.n	8014e76 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014e6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014e72:	60fb      	str	r3, [r7, #12]
 8014e74:	e009      	b.n	8014e8a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014e76:	8afb      	ldrh	r3, [r7, #22]
 8014e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014e7c:	d103      	bne.n	8014e86 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014e7e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014e82:	60fb      	str	r3, [r7, #12]
 8014e84:	e001      	b.n	8014e8a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014e86:	4b1e      	ldr	r3, [pc, #120]	; (8014f00 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014e88:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e8c:	4a1c      	ldr	r2, [pc, #112]	; (8014f00 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d90e      	bls.n	8014eb0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014e92:	68fa      	ldr	r2, [r7, #12]
 8014e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e96:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014e9a:	3b30      	subs	r3, #48	; 0x30
 8014e9c:	4919      	ldr	r1, [pc, #100]	; (8014f04 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014e9e:	fba1 1303 	umull	r1, r3, r1, r3
 8014ea2:	0c1b      	lsrs	r3, r3, #16
 8014ea4:	3301      	adds	r3, #1
 8014ea6:	4918      	ldr	r1, [pc, #96]	; (8014f08 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014ea8:	fb01 f303 	mul.w	r3, r1, r3
 8014eac:	4413      	add	r3, r2
 8014eae:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014eb0:	f107 000c 	add.w	r0, r7, #12
 8014eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eba:	f107 020c 	add.w	r2, r7, #12
 8014ebe:	ca06      	ldmia	r2, {r1, r2}
 8014ec0:	f005 f997 	bl	801a1f2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014ec4:	f107 030c 	add.w	r3, r7, #12
 8014ec8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ecc:	f005 fa50 	bl	801a370 <SysTimeToMs>
 8014ed0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014ed2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014edc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014ee0:	79bb      	ldrb	r3, [r7, #6]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	f4ff af3f 	bcc.w	8014d66 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8014ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d102      	bne.n	8014ef6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef4:	e000      	b.n	8014ef8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	372c      	adds	r7, #44	; 0x2c
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f00:	0001ec30 	.word	0x0001ec30
 8014f04:	c22e4507 	.word	0xc22e4507
 8014f08:	00015180 	.word	0x00015180

08014f0c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b085      	sub	sp, #20
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014f16:	2300      	movs	r3, #0
 8014f18:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	2b03      	cmp	r3, #3
 8014f20:	d13f      	bne.n	8014fa2 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	3301      	adds	r3, #1
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	b25a      	sxtb	r2, r3
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f34:	f003 030f 	and.w	r3, r3, #15
 8014f38:	b25a      	sxtb	r2, r3
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	091b      	lsrs	r3, r3, #4
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	b25a      	sxtb	r2, r3
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	3302      	adds	r3, #2
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	b29a      	uxth	r2, r3
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	889b      	ldrh	r3, [r3, #4]
 8014f60:	b21a      	sxth	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	3303      	adds	r3, #3
 8014f66:	781b      	ldrb	r3, [r3, #0]
 8014f68:	021b      	lsls	r3, r3, #8
 8014f6a:	b21b      	sxth	r3, r3
 8014f6c:	4313      	orrs	r3, r2
 8014f6e:	b21b      	sxth	r3, r3
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	791a      	ldrb	r2, [r3, #4]
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	091b      	lsrs	r3, r3, #4
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	f003 0307 	and.w	r3, r3, #7
 8014f8a:	b2da      	uxtb	r2, r3
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	f003 030f 	and.w	r3, r3, #15
 8014f98:	b2da      	uxtb	r2, r3
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014f9e:	2305      	movs	r3, #5
 8014fa0:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3714      	adds	r7, #20
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bc80      	pop	{r7}
 8014fac:	4770      	bx	lr

08014fae <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014fae:	b5b0      	push	{r4, r5, r7, lr}
 8014fb0:	b088      	sub	sp, #32
 8014fb2:	af02      	add	r7, sp, #8
 8014fb4:	60f8      	str	r0, [r7, #12]
 8014fb6:	60b9      	str	r1, [r7, #8]
 8014fb8:	607a      	str	r2, [r7, #4]
 8014fba:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	791b      	ldrb	r3, [r3, #4]
 8014fc0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	799b      	ldrb	r3, [r3, #6]
 8014fc6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	79db      	ldrb	r3, [r3, #7]
 8014fcc:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	7a1b      	ldrb	r3, [r3, #8]
 8014fd2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	795b      	ldrb	r3, [r3, #5]
 8014fd8:	f083 0301 	eor.w	r3, r3, #1
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d008      	beq.n	8014ff4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	7adb      	ldrb	r3, [r3, #11]
 8014fe6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	7a5b      	ldrb	r3, [r3, #9]
 8014fec:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	7a9b      	ldrb	r3, [r3, #10]
 8014ff2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014ff4:	7dfb      	ldrb	r3, [r7, #23]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d04a      	beq.n	8015090 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8014ffa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8014ffe:	2b0f      	cmp	r3, #15
 8015000:	d103      	bne.n	801500a <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	7a5b      	ldrb	r3, [r3, #9]
 8015006:	75bb      	strb	r3, [r7, #22]
 8015008:	e01d      	b.n	8015046 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	7b18      	ldrb	r0, [r3, #12]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6919      	ldr	r1, [r3, #16]
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801501e:	68fa      	ldr	r2, [r7, #12]
 8015020:	6992      	ldr	r2, [r2, #24]
 8015022:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015026:	9201      	str	r2, [sp, #4]
 8015028:	9300      	str	r3, [sp, #0]
 801502a:	462b      	mov	r3, r5
 801502c:	4622      	mov	r2, r4
 801502e:	f7ff fd3a 	bl	8014aa6 <RegionCommonChanVerifyDr>
 8015032:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015034:	f083 0301 	eor.w	r3, r3, #1
 8015038:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801503a:	2b00      	cmp	r3, #0
 801503c:	d003      	beq.n	8015046 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801503e:	7dfb      	ldrb	r3, [r7, #23]
 8015040:	f023 0302 	bic.w	r3, r3, #2
 8015044:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015046:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801504a:	2b0f      	cmp	r3, #15
 801504c:	d103      	bne.n	8015056 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	7a9b      	ldrb	r3, [r3, #10]
 8015052:	757b      	strb	r3, [r7, #21]
 8015054:	e01c      	b.n	8015090 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015062:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015066:	4618      	mov	r0, r3
 8015068:	f7ff fd8f 	bl	8014b8a <RegionCommonValueInRange>
 801506c:	4603      	mov	r3, r0
 801506e:	2b00      	cmp	r3, #0
 8015070:	d10e      	bne.n	8015090 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015078:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801507c:	429a      	cmp	r2, r3
 801507e:	da03      	bge.n	8015088 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	7f5b      	ldrb	r3, [r3, #29]
 8015084:	757b      	strb	r3, [r7, #21]
 8015086:	e003      	b.n	8015090 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015088:	7dfb      	ldrb	r3, [r7, #23]
 801508a:	f023 0304 	bic.w	r3, r3, #4
 801508e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015090:	7dfb      	ldrb	r3, [r7, #23]
 8015092:	2b07      	cmp	r3, #7
 8015094:	d105      	bne.n	80150a2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8015096:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d101      	bne.n	80150a2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801509e:	2301      	movs	r3, #1
 80150a0:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	7dba      	ldrb	r2, [r7, #22]
 80150a6:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	7d7a      	ldrb	r2, [r7, #21]
 80150ac:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80150ae:	7d3a      	ldrb	r2, [r7, #20]
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	701a      	strb	r2, [r3, #0]

    return status;
 80150b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3718      	adds	r7, #24
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080150c0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80150c0:	b480      	push	{r7}
 80150c2:	b083      	sub	sp, #12
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	4603      	mov	r3, r0
 80150c8:	6039      	str	r1, [r7, #0]
 80150ca:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80150cc:	79fb      	ldrb	r3, [r7, #7]
 80150ce:	4a06      	ldr	r2, [pc, #24]	; (80150e8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80150d0:	fa02 f303 	lsl.w	r3, r2, r3
 80150d4:	461a      	mov	r2, r3
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80150dc:	4618      	mov	r0, r3
 80150de:	370c      	adds	r7, #12
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bc80      	pop	{r7}
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	000f4240 	.word	0x000f4240

080150ec <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80150ec:	b480      	push	{r7}
 80150ee:	b083      	sub	sp, #12
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	4603      	mov	r3, r0
 80150f4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80150f6:	79fb      	ldrb	r3, [r7, #7]
 80150f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80150fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015100:	4618      	mov	r0, r3
 8015102:	370c      	adds	r7, #12
 8015104:	46bd      	mov	sp, r7
 8015106:	bc80      	pop	{r7}
 8015108:	4770      	bx	lr
	...

0801510c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801510c:	b480      	push	{r7}
 801510e:	b085      	sub	sp, #20
 8015110:	af00      	add	r7, sp, #0
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	607a      	str	r2, [r7, #4]
 8015116:	603b      	str	r3, [r7, #0]
 8015118:	460b      	mov	r3, r1
 801511a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801511c:	7afa      	ldrb	r2, [r7, #11]
 801511e:	7afb      	ldrb	r3, [r7, #11]
 8015120:	3b04      	subs	r3, #4
 8015122:	4619      	mov	r1, r3
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	fb03 f101 	mul.w	r1, r3, r1
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015130:	fb00 f303 	mul.w	r3, r0, r3
 8015134:	440b      	add	r3, r1
 8015136:	005b      	lsls	r3, r3, #1
 8015138:	2b00      	cmp	r3, #0
 801513a:	d013      	beq.n	8015164 <RegionCommonComputeRxWindowParameters+0x58>
 801513c:	7afb      	ldrb	r3, [r7, #11]
 801513e:	3b04      	subs	r3, #4
 8015140:	4619      	mov	r1, r3
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	fb03 f101 	mul.w	r1, r3, r1
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801514e:	fb00 f303 	mul.w	r3, r0, r3
 8015152:	440b      	add	r3, r1
 8015154:	0059      	lsls	r1, r3, #1
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	440b      	add	r3, r1
 801515a:	1e59      	subs	r1, r3, #1
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	fbb1 f3f3 	udiv	r3, r1, r3
 8015162:	e00f      	b.n	8015184 <RegionCommonComputeRxWindowParameters+0x78>
 8015164:	7afb      	ldrb	r3, [r7, #11]
 8015166:	3b04      	subs	r3, #4
 8015168:	4619      	mov	r1, r3
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	fb03 f101 	mul.w	r1, r3, r1
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015176:	fb00 f303 	mul.w	r3, r0, r3
 801517a:	440b      	add	r3, r1
 801517c:	0059      	lsls	r1, r3, #1
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	fbb1 f3f3 	udiv	r3, r1, r3
 8015184:	429a      	cmp	r2, r3
 8015186:	bf38      	it	cc
 8015188:	461a      	movcc	r2, r3
 801518a:	69bb      	ldr	r3, [r7, #24]
 801518c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	009b      	lsls	r3, r3, #2
 8015192:	4619      	mov	r1, r3
 8015194:	69bb      	ldr	r3, [r7, #24]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	68fa      	ldr	r2, [r7, #12]
 801519a:	fb02 f303 	mul.w	r3, r2, r3
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d007      	beq.n	80151b2 <RegionCommonComputeRxWindowParameters+0xa6>
 80151a2:	69bb      	ldr	r3, [r7, #24]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	68fa      	ldr	r2, [r7, #12]
 80151a8:	fb02 f303 	mul.w	r3, r2, r3
 80151ac:	3301      	adds	r3, #1
 80151ae:	085b      	lsrs	r3, r3, #1
 80151b0:	e005      	b.n	80151be <RegionCommonComputeRxWindowParameters+0xb2>
 80151b2:	69bb      	ldr	r3, [r7, #24]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	68fa      	ldr	r2, [r7, #12]
 80151b8:	fb02 f303 	mul.w	r3, r2, r3
 80151bc:	085b      	lsrs	r3, r3, #1
 80151be:	1acb      	subs	r3, r1, r3
 80151c0:	683a      	ldr	r2, [r7, #0]
 80151c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80151c6:	fb01 f202 	mul.w	r2, r1, r2
 80151ca:	1a9b      	subs	r3, r3, r2
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	dd27      	ble.n	8015220 <RegionCommonComputeRxWindowParameters+0x114>
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	009b      	lsls	r3, r3, #2
 80151d4:	4619      	mov	r1, r3
 80151d6:	69bb      	ldr	r3, [r7, #24]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	68fa      	ldr	r2, [r7, #12]
 80151dc:	fb02 f303 	mul.w	r3, r2, r3
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d007      	beq.n	80151f4 <RegionCommonComputeRxWindowParameters+0xe8>
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	fb02 f303 	mul.w	r3, r2, r3
 80151ee:	3301      	adds	r3, #1
 80151f0:	085b      	lsrs	r3, r3, #1
 80151f2:	e005      	b.n	8015200 <RegionCommonComputeRxWindowParameters+0xf4>
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	68fa      	ldr	r2, [r7, #12]
 80151fa:	fb02 f303 	mul.w	r3, r2, r3
 80151fe:	085b      	lsrs	r3, r3, #1
 8015200:	1acb      	subs	r3, r1, r3
 8015202:	683a      	ldr	r2, [r7, #0]
 8015204:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015208:	fb01 f202 	mul.w	r2, r1, r2
 801520c:	1a9b      	subs	r3, r3, r2
 801520e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8015212:	4a19      	ldr	r2, [pc, #100]	; (8015278 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015214:	fb82 1203 	smull	r1, r2, r2, r3
 8015218:	1192      	asrs	r2, r2, #6
 801521a:	17db      	asrs	r3, r3, #31
 801521c:	1ad3      	subs	r3, r2, r3
 801521e:	e024      	b.n	801526a <RegionCommonComputeRxWindowParameters+0x15e>
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	4619      	mov	r1, r3
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	fb02 f303 	mul.w	r3, r2, r3
 8015230:	2b00      	cmp	r3, #0
 8015232:	d007      	beq.n	8015244 <RegionCommonComputeRxWindowParameters+0x138>
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	fb02 f303 	mul.w	r3, r2, r3
 801523e:	3301      	adds	r3, #1
 8015240:	085b      	lsrs	r3, r3, #1
 8015242:	e005      	b.n	8015250 <RegionCommonComputeRxWindowParameters+0x144>
 8015244:	69bb      	ldr	r3, [r7, #24]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	fb02 f303 	mul.w	r3, r2, r3
 801524e:	085b      	lsrs	r3, r3, #1
 8015250:	1acb      	subs	r3, r1, r3
 8015252:	683a      	ldr	r2, [r7, #0]
 8015254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015258:	fb01 f202 	mul.w	r2, r1, r2
 801525c:	1a9b      	subs	r3, r3, r2
 801525e:	4a06      	ldr	r2, [pc, #24]	; (8015278 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015260:	fb82 1203 	smull	r1, r2, r2, r3
 8015264:	1192      	asrs	r2, r2, #6
 8015266:	17db      	asrs	r3, r3, #31
 8015268:	1ad3      	subs	r3, r2, r3
 801526a:	69fa      	ldr	r2, [r7, #28]
 801526c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801526e:	bf00      	nop
 8015270:	3714      	adds	r7, #20
 8015272:	46bd      	mov	sp, r7
 8015274:	bc80      	pop	{r7}
 8015276:	4770      	bx	lr
 8015278:	10624dd3 	.word	0x10624dd3

0801527c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b086      	sub	sp, #24
 8015280:	af00      	add	r7, sp, #0
 8015282:	4603      	mov	r3, r0
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]
 8015288:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801528a:	2300      	movs	r3, #0
 801528c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801528e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015292:	005b      	lsls	r3, r3, #1
 8015294:	4618      	mov	r0, r3
 8015296:	f7eb fb4d 	bl	8000934 <__aeabi_ui2f>
 801529a:	4603      	mov	r3, r0
 801529c:	4619      	mov	r1, r3
 801529e:	68b8      	ldr	r0, [r7, #8]
 80152a0:	f7eb fa96 	bl	80007d0 <__aeabi_fsub>
 80152a4:	4603      	mov	r3, r0
 80152a6:	6879      	ldr	r1, [r7, #4]
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7eb fa91 	bl	80007d0 <__aeabi_fsub>
 80152ae:	4603      	mov	r3, r0
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7eb f981 	bl	80005b8 <__aeabi_f2d>
 80152b6:	4602      	mov	r2, r0
 80152b8:	460b      	mov	r3, r1
 80152ba:	4610      	mov	r0, r2
 80152bc:	4619      	mov	r1, r3
 80152be:	f006 fa27 	bl	801b710 <floor>
 80152c2:	4602      	mov	r2, r0
 80152c4:	460b      	mov	r3, r1
 80152c6:	4610      	mov	r0, r2
 80152c8:	4619      	mov	r1, r3
 80152ca:	f7eb fa55 	bl	8000778 <__aeabi_d2iz>
 80152ce:	4603      	mov	r3, r0
 80152d0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80152d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3718      	adds	r7, #24
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}

080152de <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80152de:	b590      	push	{r4, r7, lr}
 80152e0:	b087      	sub	sp, #28
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	60f8      	str	r0, [r7, #12]
 80152e6:	60b9      	str	r1, [r7, #8]
 80152e8:	607a      	str	r2, [r7, #4]
 80152ea:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80152ec:	2300      	movs	r3, #0
 80152ee:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80152f0:	2300      	movs	r3, #0
 80152f2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80152f4:	2300      	movs	r3, #0
 80152f6:	757b      	strb	r3, [r7, #21]
 80152f8:	2300      	movs	r3, #0
 80152fa:	753b      	strb	r3, [r7, #20]
 80152fc:	e09c      	b.n	8015438 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80152fe:	2300      	movs	r3, #0
 8015300:	74fb      	strb	r3, [r7, #19]
 8015302:	e08f      	b.n	8015424 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	685a      	ldr	r2, [r3, #4]
 8015308:	7d3b      	ldrb	r3, [r7, #20]
 801530a:	005b      	lsls	r3, r3, #1
 801530c:	4413      	add	r3, r2
 801530e:	881b      	ldrh	r3, [r3, #0]
 8015310:	461a      	mov	r2, r3
 8015312:	7cfb      	ldrb	r3, [r7, #19]
 8015314:	fa42 f303 	asr.w	r3, r2, r3
 8015318:	f003 0301 	and.w	r3, r3, #1
 801531c:	2b00      	cmp	r3, #0
 801531e:	d07e      	beq.n	801541e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	689a      	ldr	r2, [r3, #8]
 8015324:	7d79      	ldrb	r1, [r7, #21]
 8015326:	7cfb      	ldrb	r3, [r7, #19]
 8015328:	440b      	add	r3, r1
 801532a:	4619      	mov	r1, r3
 801532c:	460b      	mov	r3, r1
 801532e:	005b      	lsls	r3, r3, #1
 8015330:	440b      	add	r3, r1
 8015332:	009b      	lsls	r3, r3, #2
 8015334:	4413      	add	r3, r2
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d06b      	beq.n	8015414 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	781b      	ldrb	r3, [r3, #0]
 8015340:	f083 0301 	eor.w	r3, r3, #1
 8015344:	b2db      	uxtb	r3, r3
 8015346:	2b00      	cmp	r3, #0
 8015348:	d011      	beq.n	801536e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801534e:	2b00      	cmp	r3, #0
 8015350:	d00d      	beq.n	801536e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	695a      	ldr	r2, [r3, #20]
 8015356:	7d3b      	ldrb	r3, [r7, #20]
 8015358:	005b      	lsls	r3, r3, #1
 801535a:	4413      	add	r3, r2
 801535c:	881b      	ldrh	r3, [r3, #0]
 801535e:	461a      	mov	r2, r3
 8015360:	7cfb      	ldrb	r3, [r7, #19]
 8015362:	fa42 f303 	asr.w	r3, r2, r3
 8015366:	f003 0301 	and.w	r3, r3, #1
 801536a:	2b00      	cmp	r3, #0
 801536c:	d054      	beq.n	8015418 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	785b      	ldrb	r3, [r3, #1]
 8015372:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	689a      	ldr	r2, [r3, #8]
 8015378:	7d79      	ldrb	r1, [r7, #21]
 801537a:	7cfb      	ldrb	r3, [r7, #19]
 801537c:	440b      	add	r3, r1
 801537e:	4619      	mov	r1, r3
 8015380:	460b      	mov	r3, r1
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	440b      	add	r3, r1
 8015386:	009b      	lsls	r3, r3, #2
 8015388:	4413      	add	r3, r2
 801538a:	7a1b      	ldrb	r3, [r3, #8]
 801538c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015390:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015392:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	689a      	ldr	r2, [r3, #8]
 8015398:	7d79      	ldrb	r1, [r7, #21]
 801539a:	7cfb      	ldrb	r3, [r7, #19]
 801539c:	440b      	add	r3, r1
 801539e:	4619      	mov	r1, r3
 80153a0:	460b      	mov	r3, r1
 80153a2:	005b      	lsls	r3, r3, #1
 80153a4:	440b      	add	r3, r1
 80153a6:	009b      	lsls	r3, r3, #2
 80153a8:	4413      	add	r3, r2
 80153aa:	7a1b      	ldrb	r3, [r3, #8]
 80153ac:	f343 1303 	sbfx	r3, r3, #4, #4
 80153b0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80153b2:	461a      	mov	r2, r3
 80153b4:	4621      	mov	r1, r4
 80153b6:	f7ff fbe8 	bl	8014b8a <RegionCommonValueInRange>
 80153ba:	4603      	mov	r3, r0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d02d      	beq.n	801541c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	68da      	ldr	r2, [r3, #12]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	6899      	ldr	r1, [r3, #8]
 80153c8:	7d78      	ldrb	r0, [r7, #21]
 80153ca:	7cfb      	ldrb	r3, [r7, #19]
 80153cc:	4403      	add	r3, r0
 80153ce:	4618      	mov	r0, r3
 80153d0:	4603      	mov	r3, r0
 80153d2:	005b      	lsls	r3, r3, #1
 80153d4:	4403      	add	r3, r0
 80153d6:	009b      	lsls	r3, r3, #2
 80153d8:	440b      	add	r3, r1
 80153da:	7a5b      	ldrb	r3, [r3, #9]
 80153dc:	4619      	mov	r1, r3
 80153de:	460b      	mov	r3, r1
 80153e0:	005b      	lsls	r3, r3, #1
 80153e2:	440b      	add	r3, r1
 80153e4:	00db      	lsls	r3, r3, #3
 80153e6:	4413      	add	r3, r2
 80153e8:	7d1b      	ldrb	r3, [r3, #20]
 80153ea:	f083 0301 	eor.w	r3, r3, #1
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d003      	beq.n	80153fc <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80153f4:	7dbb      	ldrb	r3, [r7, #22]
 80153f6:	3301      	adds	r3, #1
 80153f8:	75bb      	strb	r3, [r7, #22]
                    continue;
 80153fa:	e010      	b.n	801541e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80153fc:	7dfb      	ldrb	r3, [r7, #23]
 80153fe:	1c5a      	adds	r2, r3, #1
 8015400:	75fa      	strb	r2, [r7, #23]
 8015402:	461a      	mov	r2, r3
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	4413      	add	r3, r2
 8015408:	7d79      	ldrb	r1, [r7, #21]
 801540a:	7cfa      	ldrb	r2, [r7, #19]
 801540c:	440a      	add	r2, r1
 801540e:	b2d2      	uxtb	r2, r2
 8015410:	701a      	strb	r2, [r3, #0]
 8015412:	e004      	b.n	801541e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015414:	bf00      	nop
 8015416:	e002      	b.n	801541e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015418:	bf00      	nop
 801541a:	e000      	b.n	801541e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801541c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801541e:	7cfb      	ldrb	r3, [r7, #19]
 8015420:	3301      	adds	r3, #1
 8015422:	74fb      	strb	r3, [r7, #19]
 8015424:	7cfb      	ldrb	r3, [r7, #19]
 8015426:	2b0f      	cmp	r3, #15
 8015428:	f67f af6c 	bls.w	8015304 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801542c:	7d7b      	ldrb	r3, [r7, #21]
 801542e:	3310      	adds	r3, #16
 8015430:	757b      	strb	r3, [r7, #21]
 8015432:	7d3b      	ldrb	r3, [r7, #20]
 8015434:	3301      	adds	r3, #1
 8015436:	753b      	strb	r3, [r7, #20]
 8015438:	7d7b      	ldrb	r3, [r7, #21]
 801543a:	b29a      	uxth	r2, r3
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	8a1b      	ldrh	r3, [r3, #16]
 8015440:	429a      	cmp	r2, r3
 8015442:	f4ff af5c 	bcc.w	80152fe <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	7dfa      	ldrb	r2, [r7, #23]
 801544a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	7dba      	ldrb	r2, [r7, #22]
 8015450:	701a      	strb	r2, [r3, #0]
}
 8015452:	bf00      	nop
 8015454:	371c      	adds	r7, #28
 8015456:	46bd      	mov	sp, r7
 8015458:	bd90      	pop	{r4, r7, pc}

0801545a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801545a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801545c:	b08b      	sub	sp, #44	; 0x2c
 801545e:	af04      	add	r7, sp, #16
 8015460:	60f8      	str	r0, [r7, #12]
 8015462:	60b9      	str	r1, [r7, #8]
 8015464:	607a      	str	r2, [r7, #4]
 8015466:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	4618      	mov	r0, r3
 801546e:	f005 fdbf 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 8015472:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	681a      	ldr	r2, [r3, #0]
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	1ad2      	subs	r2, r2, r3
 801547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801547e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015482:	2201      	movs	r2, #1
 8015484:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	2200      	movs	r2, #0
 801548a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d004      	beq.n	801549e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015498:	697a      	ldr	r2, [r7, #20]
 801549a:	429a      	cmp	r2, r3
 801549c:	d32b      	bcc.n	80154f6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	2200      	movs	r2, #0
 80154a2:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	69db      	ldr	r3, [r3, #28]
 80154a8:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80154ae:	68dd      	ldr	r5, [r3, #12]
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	7a5e      	ldrb	r6, [r3, #9]
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	f893 c008 	ldrb.w	ip, [r3, #8]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	7d1b      	ldrb	r3, [r3, #20]
 80154be:	68fa      	ldr	r2, [r7, #12]
 80154c0:	6992      	ldr	r2, [r2, #24]
 80154c2:	9203      	str	r2, [sp, #12]
 80154c4:	68fa      	ldr	r2, [r7, #12]
 80154c6:	f10d 0e04 	add.w	lr, sp, #4
 80154ca:	320c      	adds	r2, #12
 80154cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154d0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80154d4:	9300      	str	r3, [sp, #0]
 80154d6:	4663      	mov	r3, ip
 80154d8:	4632      	mov	r2, r6
 80154da:	4629      	mov	r1, r5
 80154dc:	4620      	mov	r0, r4
 80154de:	f7ff fc25 	bl	8014d2c <RegionCommonUpdateBandTimeOff>
 80154e2:	4602      	mov	r2, r0
 80154e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154e6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	69d8      	ldr	r0, [r3, #28]
 80154ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ee:	683a      	ldr	r2, [r7, #0]
 80154f0:	6879      	ldr	r1, [r7, #4]
 80154f2:	f7ff fef4 	bl	80152de <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	781b      	ldrb	r3, [r3, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d004      	beq.n	8015508 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80154fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015500:	2200      	movs	r2, #0
 8015502:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015504:	2300      	movs	r3, #0
 8015506:	e006      	b.n	8015516 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8015508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d001      	beq.n	8015514 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015510:	230b      	movs	r3, #11
 8015512:	e000      	b.n	8015516 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015514:	230c      	movs	r3, #12
    }
}
 8015516:	4618      	mov	r0, r3
 8015518:	371c      	adds	r7, #28
 801551a:	46bd      	mov	sp, r7
 801551c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801551e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801551e:	b5b0      	push	{r4, r5, r7, lr}
 8015520:	b086      	sub	sp, #24
 8015522:	af02      	add	r7, sp, #8
 8015524:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f993 2000 	ldrsb.w	r2, [r3]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015538:	429a      	cmp	r2, r3
 801553a:	d103      	bne.n	8015544 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015542:	e026      	b.n	8015592 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015544:	7bfb      	ldrb	r3, [r7, #15]
 8015546:	3b01      	subs	r3, #1
 8015548:	b2db      	uxtb	r3, r3
 801554a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015552:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015556:	429a      	cmp	r2, r3
 8015558:	d019      	beq.n	801558e <RegionCommonGetNextLowerTxDr+0x70>
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	78d8      	ldrb	r0, [r3, #3]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6859      	ldr	r1, [r3, #4]
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801556e:	687a      	ldr	r2, [r7, #4]
 8015570:	6892      	ldr	r2, [r2, #8]
 8015572:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015576:	9201      	str	r2, [sp, #4]
 8015578:	9300      	str	r3, [sp, #0]
 801557a:	462b      	mov	r3, r5
 801557c:	4622      	mov	r2, r4
 801557e:	f7ff fa92 	bl	8014aa6 <RegionCommonChanVerifyDr>
 8015582:	4603      	mov	r3, r0
 8015584:	f083 0301 	eor.w	r3, r3, #1
 8015588:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801558a:	2b00      	cmp	r3, #0
 801558c:	d1da      	bne.n	8015544 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801558e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015592:	4618      	mov	r0, r3
 8015594:	3710      	adds	r7, #16
 8015596:	46bd      	mov	sp, r7
 8015598:	bdb0      	pop	{r4, r5, r7, pc}

0801559a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801559a:	b480      	push	{r7}
 801559c:	b083      	sub	sp, #12
 801559e:	af00      	add	r7, sp, #0
 80155a0:	4603      	mov	r3, r0
 80155a2:	460a      	mov	r2, r1
 80155a4:	71fb      	strb	r3, [r7, #7]
 80155a6:	4613      	mov	r3, r2
 80155a8:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80155aa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80155ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155b2:	4293      	cmp	r3, r2
 80155b4:	bfb8      	it	lt
 80155b6:	4613      	movlt	r3, r2
 80155b8:	b25b      	sxtb	r3, r3
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	370c      	adds	r7, #12
 80155be:	46bd      	mov	sp, r7
 80155c0:	bc80      	pop	{r7}
 80155c2:	4770      	bx	lr

080155c4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80155c4:	b480      	push	{r7}
 80155c6:	b083      	sub	sp, #12
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	683a      	ldr	r2, [r7, #0]
 80155d4:	4413      	add	r3, r2
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	4a07      	ldr	r2, [pc, #28]	; (80155f8 <RegionCommonGetBandwidth+0x34>)
 80155da:	4293      	cmp	r3, r2
 80155dc:	d004      	beq.n	80155e8 <RegionCommonGetBandwidth+0x24>
 80155de:	4a07      	ldr	r2, [pc, #28]	; (80155fc <RegionCommonGetBandwidth+0x38>)
 80155e0:	4293      	cmp	r3, r2
 80155e2:	d003      	beq.n	80155ec <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	e002      	b.n	80155ee <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80155e8:	2301      	movs	r3, #1
 80155ea:	e000      	b.n	80155ee <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80155ec:	2302      	movs	r3, #2
    }
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	370c      	adds	r7, #12
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bc80      	pop	{r7}
 80155f6:	4770      	bx	lr
 80155f8:	0003d090 	.word	0x0003d090
 80155fc:	0007a120 	.word	0x0007a120

08015600 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b086      	sub	sp, #24
 8015604:	af04      	add	r7, sp, #16
 8015606:	4603      	mov	r3, r0
 8015608:	6039      	str	r1, [r7, #0]
 801560a:	71fb      	strb	r3, [r7, #7]
 801560c:	4613      	mov	r3, r2
 801560e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8015610:	79fb      	ldrb	r3, [r7, #7]
 8015612:	2b05      	cmp	r3, #5
 8015614:	d810      	bhi.n	8015638 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8015616:	79fb      	ldrb	r3, [r7, #7]
 8015618:	4a0f      	ldr	r2, [pc, #60]	; (8015658 <RegionCommonRxConfigPrint+0x58>)
 801561a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801561e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015622:	9202      	str	r2, [sp, #8]
 8015624:	683a      	ldr	r2, [r7, #0]
 8015626:	9201      	str	r2, [sp, #4]
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	4b0c      	ldr	r3, [pc, #48]	; (801565c <RegionCommonRxConfigPrint+0x5c>)
 801562c:	2201      	movs	r2, #1
 801562e:	2100      	movs	r1, #0
 8015630:	2002      	movs	r0, #2
 8015632:	f005 fdbb 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015636:	e00a      	b.n	801564e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015638:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801563c:	9301      	str	r3, [sp, #4]
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	9300      	str	r3, [sp, #0]
 8015642:	4b07      	ldr	r3, [pc, #28]	; (8015660 <RegionCommonRxConfigPrint+0x60>)
 8015644:	2201      	movs	r2, #1
 8015646:	2100      	movs	r1, #0
 8015648:	2002      	movs	r0, #2
 801564a:	f005 fdaf 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 801564e:	bf00      	nop
 8015650:	3708      	adds	r7, #8
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}
 8015656:	bf00      	nop
 8015658:	20000120 	.word	0x20000120
 801565c:	0801bb8c 	.word	0x0801bb8c
 8015660:	0801bbac 	.word	0x0801bbac

08015664 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af02      	add	r7, sp, #8
 801566a:	6078      	str	r0, [r7, #4]
 801566c:	460b      	mov	r3, r1
 801566e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015674:	9301      	str	r3, [sp, #4]
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	4b05      	ldr	r3, [pc, #20]	; (8015690 <RegionCommonTxConfigPrint+0x2c>)
 801567c:	2201      	movs	r2, #1
 801567e:	2100      	movs	r1, #0
 8015680:	2002      	movs	r0, #2
 8015682:	f005 fd93 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 8015686:	bf00      	nop
 8015688:	3708      	adds	r7, #8
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}
 801568e:	bf00      	nop
 8015690:	0801bbc8 	.word	0x0801bbc8

08015694 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801569e:	4b2d      	ldr	r3, [pc, #180]	; (8015754 <VerifyRfFreq+0xc0>)
 80156a0:	6a1b      	ldr	r3, [r3, #32]
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	4798      	blx	r3
 80156a6:	4603      	mov	r3, r0
 80156a8:	f083 0301 	eor.w	r3, r3, #1
 80156ac:	b2db      	uxtb	r3, r3
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <VerifyRfFreq+0x22>
    {
        return false;
 80156b2:	2300      	movs	r3, #0
 80156b4:	e04a      	b.n	801574c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	4a27      	ldr	r2, [pc, #156]	; (8015758 <VerifyRfFreq+0xc4>)
 80156ba:	4293      	cmp	r3, r2
 80156bc:	d307      	bcc.n	80156ce <VerifyRfFreq+0x3a>
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	4a26      	ldr	r2, [pc, #152]	; (801575c <VerifyRfFreq+0xc8>)
 80156c2:	4293      	cmp	r3, r2
 80156c4:	d803      	bhi.n	80156ce <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	2202      	movs	r2, #2
 80156ca:	701a      	strb	r2, [r3, #0]
 80156cc:	e03d      	b.n	801574a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	4a22      	ldr	r2, [pc, #136]	; (801575c <VerifyRfFreq+0xc8>)
 80156d2:	4293      	cmp	r3, r2
 80156d4:	d907      	bls.n	80156e6 <VerifyRfFreq+0x52>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	4a21      	ldr	r2, [pc, #132]	; (8015760 <VerifyRfFreq+0xcc>)
 80156da:	4293      	cmp	r3, r2
 80156dc:	d803      	bhi.n	80156e6 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	2200      	movs	r2, #0
 80156e2:	701a      	strb	r2, [r3, #0]
 80156e4:	e031      	b.n	801574a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	4a1d      	ldr	r2, [pc, #116]	; (8015760 <VerifyRfFreq+0xcc>)
 80156ea:	4293      	cmp	r3, r2
 80156ec:	d907      	bls.n	80156fe <VerifyRfFreq+0x6a>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	4a1c      	ldr	r2, [pc, #112]	; (8015764 <VerifyRfFreq+0xd0>)
 80156f2:	4293      	cmp	r3, r2
 80156f4:	d803      	bhi.n	80156fe <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	2201      	movs	r2, #1
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	e025      	b.n	801574a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	4a19      	ldr	r2, [pc, #100]	; (8015768 <VerifyRfFreq+0xd4>)
 8015702:	4293      	cmp	r3, r2
 8015704:	d907      	bls.n	8015716 <VerifyRfFreq+0x82>
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	4a18      	ldr	r2, [pc, #96]	; (801576c <VerifyRfFreq+0xd8>)
 801570a:	4293      	cmp	r3, r2
 801570c:	d803      	bhi.n	8015716 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801570e:	683b      	ldr	r3, [r7, #0]
 8015710:	2205      	movs	r2, #5
 8015712:	701a      	strb	r2, [r3, #0]
 8015714:	e019      	b.n	801574a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	4a15      	ldr	r2, [pc, #84]	; (8015770 <VerifyRfFreq+0xdc>)
 801571a:	4293      	cmp	r3, r2
 801571c:	d907      	bls.n	801572e <VerifyRfFreq+0x9a>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	4a14      	ldr	r2, [pc, #80]	; (8015774 <VerifyRfFreq+0xe0>)
 8015722:	4293      	cmp	r3, r2
 8015724:	d803      	bhi.n	801572e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	2203      	movs	r2, #3
 801572a:	701a      	strb	r2, [r3, #0]
 801572c:	e00d      	b.n	801574a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	4a11      	ldr	r2, [pc, #68]	; (8015778 <VerifyRfFreq+0xe4>)
 8015732:	4293      	cmp	r3, r2
 8015734:	d307      	bcc.n	8015746 <VerifyRfFreq+0xb2>
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	4a10      	ldr	r2, [pc, #64]	; (801577c <VerifyRfFreq+0xe8>)
 801573a:	4293      	cmp	r3, r2
 801573c:	d803      	bhi.n	8015746 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	2204      	movs	r2, #4
 8015742:	701a      	strb	r2, [r3, #0]
 8015744:	e001      	b.n	801574a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015746:	2300      	movs	r3, #0
 8015748:	e000      	b.n	801574c <VerifyRfFreq+0xb8>
    }
    return true;
 801574a:	2301      	movs	r3, #1
}
 801574c:	4618      	mov	r0, r3
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	0801c168 	.word	0x0801c168
 8015758:	337055c0 	.word	0x337055c0
 801575c:	338eda3f 	.word	0x338eda3f
 8015760:	33bca100 	.word	0x33bca100
 8015764:	33c5c8c0 	.word	0x33c5c8c0
 8015768:	33c74f5f 	.word	0x33c74f5f
 801576c:	33cef080 	.word	0x33cef080
 8015770:	33d1fdbf 	.word	0x33d1fdbf
 8015774:	33d5ce50 	.word	0x33d5ce50
 8015778:	33d691a0 	.word	0x33d691a0
 801577c:	33db2580 	.word	0x33db2580

08015780 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015780:	b590      	push	{r4, r7, lr}
 8015782:	b08b      	sub	sp, #44	; 0x2c
 8015784:	af04      	add	r7, sp, #16
 8015786:	4603      	mov	r3, r0
 8015788:	460a      	mov	r2, r1
 801578a:	71fb      	strb	r3, [r7, #7]
 801578c:	4613      	mov	r3, r2
 801578e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015794:	4a1f      	ldr	r2, [pc, #124]	; (8015814 <GetTimeOnAir+0x94>)
 8015796:	5cd3      	ldrb	r3, [r2, r3]
 8015798:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801579a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801579e:	491e      	ldr	r1, [pc, #120]	; (8015818 <GetTimeOnAir+0x98>)
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7ff ff0f 	bl	80155c4 <RegionCommonGetBandwidth>
 80157a6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80157a8:	2300      	movs	r3, #0
 80157aa:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80157ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157b0:	2b07      	cmp	r3, #7
 80157b2:	d118      	bne.n	80157e6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80157b4:	4b19      	ldr	r3, [pc, #100]	; (801581c <GetTimeOnAir+0x9c>)
 80157b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80157b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80157c0:	fb02 f303 	mul.w	r3, r2, r3
 80157c4:	4619      	mov	r1, r3
 80157c6:	88bb      	ldrh	r3, [r7, #4]
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	2201      	movs	r2, #1
 80157cc:	9203      	str	r2, [sp, #12]
 80157ce:	9302      	str	r3, [sp, #8]
 80157d0:	2300      	movs	r3, #0
 80157d2:	9301      	str	r3, [sp, #4]
 80157d4:	2305      	movs	r3, #5
 80157d6:	9300      	str	r3, [sp, #0]
 80157d8:	2300      	movs	r3, #0
 80157da:	460a      	mov	r2, r1
 80157dc:	68f9      	ldr	r1, [r7, #12]
 80157de:	2000      	movs	r0, #0
 80157e0:	47a0      	blx	r4
 80157e2:	6178      	str	r0, [r7, #20]
 80157e4:	e011      	b.n	801580a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80157e6:	4b0d      	ldr	r3, [pc, #52]	; (801581c <GetTimeOnAir+0x9c>)
 80157e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80157ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80157ee:	88bb      	ldrh	r3, [r7, #4]
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	2101      	movs	r1, #1
 80157f4:	9103      	str	r1, [sp, #12]
 80157f6:	9302      	str	r3, [sp, #8]
 80157f8:	2300      	movs	r3, #0
 80157fa:	9301      	str	r3, [sp, #4]
 80157fc:	2308      	movs	r3, #8
 80157fe:	9300      	str	r3, [sp, #0]
 8015800:	2301      	movs	r3, #1
 8015802:	68f9      	ldr	r1, [r7, #12]
 8015804:	2001      	movs	r0, #1
 8015806:	47a0      	blx	r4
 8015808:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801580a:	697b      	ldr	r3, [r7, #20]
}
 801580c:	4618      	mov	r0, r3
 801580e:	371c      	adds	r7, #28
 8015810:	46bd      	mov	sp, r7
 8015812:	bd90      	pop	{r4, r7, pc}
 8015814:	0801c130 	.word	0x0801c130
 8015818:	0801c138 	.word	0x0801c138
 801581c:	0801c168 	.word	0x0801c168

08015820 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b088      	sub	sp, #32
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015828:	2300      	movs	r3, #0
 801582a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	3b01      	subs	r3, #1
 8015832:	2b38      	cmp	r3, #56	; 0x38
 8015834:	f200 8128 	bhi.w	8015a88 <RegionEU868GetPhyParam+0x268>
 8015838:	a201      	add	r2, pc, #4	; (adr r2, 8015840 <RegionEU868GetPhyParam+0x20>)
 801583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801583e:	bf00      	nop
 8015840:	08015925 	.word	0x08015925
 8015844:	0801592b 	.word	0x0801592b
 8015848:	08015a89 	.word	0x08015a89
 801584c:	08015a89 	.word	0x08015a89
 8015850:	08015a89 	.word	0x08015a89
 8015854:	08015931 	.word	0x08015931
 8015858:	08015a89 	.word	0x08015a89
 801585c:	0801596b 	.word	0x0801596b
 8015860:	08015a89 	.word	0x08015a89
 8015864:	08015971 	.word	0x08015971
 8015868:	08015977 	.word	0x08015977
 801586c:	0801597d 	.word	0x0801597d
 8015870:	08015983 	.word	0x08015983
 8015874:	08015993 	.word	0x08015993
 8015878:	080159a3 	.word	0x080159a3
 801587c:	080159a9 	.word	0x080159a9
 8015880:	080159b1 	.word	0x080159b1
 8015884:	080159b9 	.word	0x080159b9
 8015888:	080159c1 	.word	0x080159c1
 801588c:	080159c9 	.word	0x080159c9
 8015890:	080159d1 	.word	0x080159d1
 8015894:	080159d9 	.word	0x080159d9
 8015898:	080159ed 	.word	0x080159ed
 801589c:	080159f3 	.word	0x080159f3
 80158a0:	080159f9 	.word	0x080159f9
 80158a4:	080159ff 	.word	0x080159ff
 80158a8:	08015a0b 	.word	0x08015a0b
 80158ac:	08015a17 	.word	0x08015a17
 80158b0:	08015a1d 	.word	0x08015a1d
 80158b4:	08015a25 	.word	0x08015a25
 80158b8:	08015a2b 	.word	0x08015a2b
 80158bc:	08015a31 	.word	0x08015a31
 80158c0:	08015a39 	.word	0x08015a39
 80158c4:	08015937 	.word	0x08015937
 80158c8:	08015a89 	.word	0x08015a89
 80158cc:	08015a89 	.word	0x08015a89
 80158d0:	08015a89 	.word	0x08015a89
 80158d4:	08015a89 	.word	0x08015a89
 80158d8:	08015a89 	.word	0x08015a89
 80158dc:	08015a89 	.word	0x08015a89
 80158e0:	08015a89 	.word	0x08015a89
 80158e4:	08015a89 	.word	0x08015a89
 80158e8:	08015a89 	.word	0x08015a89
 80158ec:	08015a89 	.word	0x08015a89
 80158f0:	08015a89 	.word	0x08015a89
 80158f4:	08015a89 	.word	0x08015a89
 80158f8:	08015a89 	.word	0x08015a89
 80158fc:	08015a3f 	.word	0x08015a3f
 8015900:	08015a45 	.word	0x08015a45
 8015904:	08015a53 	.word	0x08015a53
 8015908:	08015a89 	.word	0x08015a89
 801590c:	08015a89 	.word	0x08015a89
 8015910:	08015a59 	.word	0x08015a59
 8015914:	08015a5f 	.word	0x08015a5f
 8015918:	08015a89 	.word	0x08015a89
 801591c:	08015a65 	.word	0x08015a65
 8015920:	08015a75 	.word	0x08015a75
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015924:	2300      	movs	r3, #0
 8015926:	61bb      	str	r3, [r7, #24]
            break;
 8015928:	e0af      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801592a:	2300      	movs	r3, #0
 801592c:	61bb      	str	r3, [r7, #24]
            break;
 801592e:	e0ac      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015930:	2300      	movs	r3, #0
 8015932:	61bb      	str	r3, [r7, #24]
            break;
 8015934:	e0a9      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801593c:	733b      	strb	r3, [r7, #12]
 801593e:	2307      	movs	r3, #7
 8015940:	737b      	strb	r3, [r7, #13]
 8015942:	2300      	movs	r3, #0
 8015944:	73bb      	strb	r3, [r7, #14]
 8015946:	2310      	movs	r3, #16
 8015948:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801594a:	4b53      	ldr	r3, [pc, #332]	; (8015a98 <RegionEU868GetPhyParam+0x278>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015952:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015954:	4b50      	ldr	r3, [pc, #320]	; (8015a98 <RegionEU868GetPhyParam+0x278>)
 8015956:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015958:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801595a:	f107 030c 	add.w	r3, r7, #12
 801595e:	4618      	mov	r0, r3
 8015960:	f7ff fddd 	bl	801551e <RegionCommonGetNextLowerTxDr>
 8015964:	4603      	mov	r3, r0
 8015966:	61bb      	str	r3, [r7, #24]
            break;
 8015968:	e08f      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801596a:	2300      	movs	r3, #0
 801596c:	61bb      	str	r3, [r7, #24]
            break;
 801596e:	e08c      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015970:	2300      	movs	r3, #0
 8015972:	61bb      	str	r3, [r7, #24]
            break;
 8015974:	e089      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015976:	2340      	movs	r3, #64	; 0x40
 8015978:	61bb      	str	r3, [r7, #24]
            break;
 801597a:	e086      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801597c:	2320      	movs	r3, #32
 801597e:	61bb      	str	r3, [r7, #24]
            break;
 8015980:	e083      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015988:	461a      	mov	r2, r3
 801598a:	4b44      	ldr	r3, [pc, #272]	; (8015a9c <RegionEU868GetPhyParam+0x27c>)
 801598c:	5c9b      	ldrb	r3, [r3, r2]
 801598e:	61bb      	str	r3, [r7, #24]
            break;
 8015990:	e07b      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015998:	461a      	mov	r2, r3
 801599a:	4b41      	ldr	r3, [pc, #260]	; (8015aa0 <RegionEU868GetPhyParam+0x280>)
 801599c:	5c9b      	ldrb	r3, [r3, r2]
 801599e:	61bb      	str	r3, [r7, #24]
            break;
 80159a0:	e073      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80159a2:	2301      	movs	r3, #1
 80159a4:	61bb      	str	r3, [r7, #24]
            break;
 80159a6:	e070      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80159a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80159ac:	61bb      	str	r3, [r7, #24]
            break;
 80159ae:	e06c      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80159b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80159b4:	61bb      	str	r3, [r7, #24]
            break;
 80159b6:	e068      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80159b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80159bc:	61bb      	str	r3, [r7, #24]
            break;
 80159be:	e064      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80159c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80159c4:	61bb      	str	r3, [r7, #24]
            break;
 80159c6:	e060      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80159c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80159cc:	61bb      	str	r3, [r7, #24]
            break;
 80159ce:	e05c      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80159d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80159d4:	61bb      	str	r3, [r7, #24]
            break;
 80159d6:	e058      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80159d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80159dc:	4831      	ldr	r0, [pc, #196]	; (8015aa4 <RegionEU868GetPhyParam+0x284>)
 80159de:	f001 f879 	bl	8016ad4 <randr>
 80159e2:	4603      	mov	r3, r0
 80159e4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80159e8:	61bb      	str	r3, [r7, #24]
            break;
 80159ea:	e04e      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80159ec:	2300      	movs	r3, #0
 80159ee:	61bb      	str	r3, [r7, #24]
            break;
 80159f0:	e04b      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80159f2:	4b2d      	ldr	r3, [pc, #180]	; (8015aa8 <RegionEU868GetPhyParam+0x288>)
 80159f4:	61bb      	str	r3, [r7, #24]
            break;
 80159f6:	e048      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80159f8:	2300      	movs	r3, #0
 80159fa:	61bb      	str	r3, [r7, #24]
            break;
 80159fc:	e045      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80159fe:	4b26      	ldr	r3, [pc, #152]	; (8015a98 <RegionEU868GetPhyParam+0x278>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8015a06:	61bb      	str	r3, [r7, #24]
            break;
 8015a08:	e03f      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015a0a:	4b23      	ldr	r3, [pc, #140]	; (8015a98 <RegionEU868GetPhyParam+0x278>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8015a12:	61bb      	str	r3, [r7, #24]
            break;
 8015a14:	e039      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015a16:	2310      	movs	r3, #16
 8015a18:	61bb      	str	r3, [r7, #24]
            break;
 8015a1a:	e036      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015a1c:	4b1e      	ldr	r3, [pc, #120]	; (8015a98 <RegionEU868GetPhyParam+0x278>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	61bb      	str	r3, [r7, #24]
            break;
 8015a22:	e032      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015a24:	2300      	movs	r3, #0
 8015a26:	61bb      	str	r3, [r7, #24]
            break;
 8015a28:	e02f      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	61bb      	str	r3, [r7, #24]
            break;
 8015a2e:	e02c      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015a30:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8015a34:	61bb      	str	r3, [r7, #24]
            break;
 8015a36:	e028      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015a38:	4b1c      	ldr	r3, [pc, #112]	; (8015aac <RegionEU868GetPhyParam+0x28c>)
 8015a3a:	61bb      	str	r3, [r7, #24]
            break;
 8015a3c:	e025      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015a3e:	4b1a      	ldr	r3, [pc, #104]	; (8015aa8 <RegionEU868GetPhyParam+0x288>)
 8015a40:	61bb      	str	r3, [r7, #24]
            break;
 8015a42:	e022      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015a44:	2311      	movs	r3, #17
 8015a46:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015a48:	2302      	movs	r3, #2
 8015a4a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	76bb      	strb	r3, [r7, #26]
            break;
 8015a50:	e01b      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015a52:	2303      	movs	r3, #3
 8015a54:	61bb      	str	r3, [r7, #24]
            break;
 8015a56:	e018      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015a58:	4b13      	ldr	r3, [pc, #76]	; (8015aa8 <RegionEU868GetPhyParam+0x288>)
 8015a5a:	61bb      	str	r3, [r7, #24]
            break;
 8015a5c:	e015      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015a5e:	2303      	movs	r3, #3
 8015a60:	61bb      	str	r3, [r7, #24]
            break;
 8015a62:	e012      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	4b10      	ldr	r3, [pc, #64]	; (8015ab0 <RegionEU868GetPhyParam+0x290>)
 8015a6e:	5c9b      	ldrb	r3, [r3, r2]
 8015a70:	61bb      	str	r3, [r7, #24]
            break;
 8015a72:	e00a      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a7a:	490e      	ldr	r1, [pc, #56]	; (8015ab4 <RegionEU868GetPhyParam+0x294>)
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7ff fda1 	bl	80155c4 <RegionCommonGetBandwidth>
 8015a82:	4603      	mov	r3, r0
 8015a84:	61bb      	str	r3, [r7, #24]
            break;
 8015a86:	e000      	b.n	8015a8a <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8015a88:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015a8a:	69bb      	ldr	r3, [r7, #24]
 8015a8c:	61fb      	str	r3, [r7, #28]
 8015a8e:	69fb      	ldr	r3, [r7, #28]
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3720      	adds	r7, #32
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	20001d34 	.word	0x20001d34
 8015a9c:	0801c158 	.word	0x0801c158
 8015aa0:	0801c160 	.word	0x0801c160
 8015aa4:	fffffc18 	.word	0xfffffc18
 8015aa8:	33d3e608 	.word	0x33d3e608
 8015aac:	4009999a 	.word	0x4009999a
 8015ab0:	0801c130 	.word	0x0801c130
 8015ab4:	0801c138 	.word	0x0801c138

08015ab8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015ab8:	b590      	push	{r4, r7, lr}
 8015aba:	b085      	sub	sp, #20
 8015abc:	af02      	add	r7, sp, #8
 8015abe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015ac0:	4b11      	ldr	r3, [pc, #68]	; (8015b08 <RegionEU868SetBandTxDone+0x50>)
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	4b11      	ldr	r3, [pc, #68]	; (8015b0c <RegionEU868SetBandTxDone+0x54>)
 8015ac6:	6819      	ldr	r1, [r3, #0]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	4618      	mov	r0, r3
 8015ace:	4603      	mov	r3, r0
 8015ad0:	005b      	lsls	r3, r3, #1
 8015ad2:	4403      	add	r3, r0
 8015ad4:	009b      	lsls	r3, r3, #2
 8015ad6:	440b      	add	r3, r1
 8015ad8:	3309      	adds	r3, #9
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	4619      	mov	r1, r3
 8015ade:	460b      	mov	r3, r1
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	440b      	add	r3, r1
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	18d0      	adds	r0, r2, r3
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	6899      	ldr	r1, [r3, #8]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	785c      	ldrb	r4, [r3, #1]
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	691a      	ldr	r2, [r3, #16]
 8015af4:	9200      	str	r2, [sp, #0]
 8015af6:	68db      	ldr	r3, [r3, #12]
 8015af8:	4622      	mov	r2, r4
 8015afa:	f7ff f8e9 	bl	8014cd0 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8015afe:	bf00      	nop
 8015b00:	370c      	adds	r7, #12
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd90      	pop	{r4, r7, pc}
 8015b06:	bf00      	nop
 8015b08:	20001d30 	.word	0x20001d30
 8015b0c:	20001d34 	.word	0x20001d34

08015b10 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b0b0      	sub	sp, #192	; 0xc0
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015b18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b1c:	2290      	movs	r2, #144	; 0x90
 8015b1e:	2100      	movs	r1, #0
 8015b20:	4618      	mov	r0, r3
 8015b22:	f005 fded 	bl	801b700 <memset>
 8015b26:	2364      	movs	r3, #100	; 0x64
 8015b28:	863b      	strh	r3, [r7, #48]	; 0x30
 8015b2a:	2364      	movs	r3, #100	; 0x64
 8015b2c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015b34:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015b38:	230a      	movs	r3, #10
 8015b3a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8015b3e:	2364      	movs	r3, #100	; 0x64
 8015b40:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015b48:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	7a1b      	ldrb	r3, [r3, #8]
 8015b50:	2b02      	cmp	r3, #2
 8015b52:	d05e      	beq.n	8015c12 <RegionEU868InitDefaults+0x102>
 8015b54:	2b02      	cmp	r3, #2
 8015b56:	dc6b      	bgt.n	8015c30 <RegionEU868InitDefaults+0x120>
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d002      	beq.n	8015b62 <RegionEU868InitDefaults+0x52>
 8015b5c:	2b01      	cmp	r3, #1
 8015b5e:	d03f      	beq.n	8015be0 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015b60:	e066      	b.n	8015c30 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d063      	beq.n	8015c32 <RegionEU868InitDefaults+0x122>
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d05f      	beq.n	8015c32 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	4a30      	ldr	r2, [pc, #192]	; (8015c38 <RegionEU868InitDefaults+0x128>)
 8015b78:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	4a2f      	ldr	r2, [pc, #188]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015b80:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015b82:	4b2d      	ldr	r3, [pc, #180]	; (8015c38 <RegionEU868InitDefaults+0x128>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b8c:	2290      	movs	r2, #144	; 0x90
 8015b8e:	4619      	mov	r1, r3
 8015b90:	f000 ffb7 	bl	8016b02 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015b94:	4b29      	ldr	r3, [pc, #164]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	4a29      	ldr	r2, [pc, #164]	; (8015c40 <RegionEU868InitDefaults+0x130>)
 8015b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015ba0:	4b26      	ldr	r3, [pc, #152]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	4a27      	ldr	r2, [pc, #156]	; (8015c44 <RegionEU868InitDefaults+0x134>)
 8015ba6:	330c      	adds	r3, #12
 8015ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8015baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015bae:	4b23      	ldr	r3, [pc, #140]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	4a25      	ldr	r2, [pc, #148]	; (8015c48 <RegionEU868InitDefaults+0x138>)
 8015bb4:	3318      	adds	r3, #24
 8015bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8015bb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015bbc:	4b1f      	ldr	r3, [pc, #124]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	2207      	movs	r2, #7
 8015bc2:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015bc6:	4b1d      	ldr	r3, [pc, #116]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8015bce:	4b1b      	ldr	r3, [pc, #108]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	4619      	mov	r1, r3
 8015bda:	f7ff f853 	bl	8014c84 <RegionCommonChanMaskCopy>
 8015bde:	e028      	b.n	8015c32 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015be0:	4b16      	ldr	r3, [pc, #88]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	2200      	movs	r2, #0
 8015be6:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015be8:	4b14      	ldr	r3, [pc, #80]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	2200      	movs	r2, #0
 8015bee:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015bf0:	4b12      	ldr	r3, [pc, #72]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015bf8:	4b10      	ldr	r3, [pc, #64]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8015c00:	4b0e      	ldr	r3, [pc, #56]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8015c08:	2201      	movs	r2, #1
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	f7ff f83a 	bl	8014c84 <RegionCommonChanMaskCopy>
            break;
 8015c10:	e00f      	b.n	8015c32 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015c12:	4b0a      	ldr	r3, [pc, #40]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8015c1a:	4b08      	ldr	r3, [pc, #32]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8015c22:	4b06      	ldr	r3, [pc, #24]	; (8015c3c <RegionEU868InitDefaults+0x12c>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	430a      	orrs	r2, r1
 8015c28:	b292      	uxth	r2, r2
 8015c2a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8015c2e:	e000      	b.n	8015c32 <RegionEU868InitDefaults+0x122>
            break;
 8015c30:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015c32:	37c0      	adds	r7, #192	; 0xc0
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	20001d30 	.word	0x20001d30
 8015c3c:	20001d34 	.word	0x20001d34
 8015c40:	0801bbe4 	.word	0x0801bbe4
 8015c44:	0801bbf0 	.word	0x0801bbf0
 8015c48:	0801bbfc 	.word	0x0801bbfc

08015c4c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b084      	sub	sp, #16
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	460b      	mov	r3, r1
 8015c56:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015c58:	78fb      	ldrb	r3, [r7, #3]
 8015c5a:	2b0f      	cmp	r3, #15
 8015c5c:	d86c      	bhi.n	8015d38 <RegionEU868Verify+0xec>
 8015c5e:	a201      	add	r2, pc, #4	; (adr r2, 8015c64 <RegionEU868Verify+0x18>)
 8015c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c64:	08015ca5 	.word	0x08015ca5
 8015c68:	08015d39 	.word	0x08015d39
 8015c6c:	08015d39 	.word	0x08015d39
 8015c70:	08015d39 	.word	0x08015d39
 8015c74:	08015d39 	.word	0x08015d39
 8015c78:	08015cbd 	.word	0x08015cbd
 8015c7c:	08015cdb 	.word	0x08015cdb
 8015c80:	08015cf9 	.word	0x08015cf9
 8015c84:	08015d39 	.word	0x08015d39
 8015c88:	08015d17 	.word	0x08015d17
 8015c8c:	08015d17 	.word	0x08015d17
 8015c90:	08015d39 	.word	0x08015d39
 8015c94:	08015d39 	.word	0x08015d39
 8015c98:	08015d39 	.word	0x08015d39
 8015c9c:	08015d39 	.word	0x08015d39
 8015ca0:	08015d35 	.word	0x08015d35
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f107 020f 	add.w	r2, r7, #15
 8015cb0:	4611      	mov	r1, r2
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7ff fcee 	bl	8015694 <VerifyRfFreq>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	e03e      	b.n	8015d3a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8015cc2:	2207      	movs	r2, #7
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7fe ff5f 	bl	8014b8a <RegionCommonValueInRange>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	bf14      	ite	ne
 8015cd2:	2301      	movne	r3, #1
 8015cd4:	2300      	moveq	r3, #0
 8015cd6:	b2db      	uxtb	r3, r3
 8015cd8:	e02f      	b.n	8015d3a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8015ce0:	2205      	movs	r2, #5
 8015ce2:	2100      	movs	r1, #0
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f7fe ff50 	bl	8014b8a <RegionCommonValueInRange>
 8015cea:	4603      	mov	r3, r0
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	bf14      	ite	ne
 8015cf0:	2301      	movne	r3, #1
 8015cf2:	2300      	moveq	r3, #0
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	e020      	b.n	8015d3a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8015cfe:	2207      	movs	r2, #7
 8015d00:	2100      	movs	r1, #0
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7fe ff41 	bl	8014b8a <RegionCommonValueInRange>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	bf14      	ite	ne
 8015d0e:	2301      	movne	r3, #1
 8015d10:	2300      	moveq	r3, #0
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	e011      	b.n	8015d3a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f993 3000 	ldrsb.w	r3, [r3]
 8015d1c:	2207      	movs	r2, #7
 8015d1e:	2100      	movs	r1, #0
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7fe ff32 	bl	8014b8a <RegionCommonValueInRange>
 8015d26:	4603      	mov	r3, r0
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	bf14      	ite	ne
 8015d2c:	2301      	movne	r3, #1
 8015d2e:	2300      	moveq	r3, #0
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	e002      	b.n	8015d3a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015d34:	2301      	movs	r3, #1
 8015d36:	e000      	b.n	8015d3a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015d38:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3710      	adds	r7, #16
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
 8015d42:	bf00      	nop

08015d44 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b08a      	sub	sp, #40	; 0x28
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015d4c:	2350      	movs	r3, #80	; 0x50
 8015d4e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	791b      	ldrb	r3, [r3, #4]
 8015d56:	2b10      	cmp	r3, #16
 8015d58:	d162      	bne.n	8015e20 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	330f      	adds	r3, #15
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d15e      	bne.n	8015e24 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015d66:	2300      	movs	r3, #0
 8015d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d6c:	2303      	movs	r3, #3
 8015d6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015d72:	e050      	b.n	8015e16 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d78:	2b07      	cmp	r3, #7
 8015d7a:	d824      	bhi.n	8015dc6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681a      	ldr	r2, [r3, #0]
 8015d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d84:	4413      	add	r3, r2
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015d8a:	69ba      	ldr	r2, [r7, #24]
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6819      	ldr	r1, [r3, #0]
 8015d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d94:	3301      	adds	r3, #1
 8015d96:	440b      	add	r3, r1
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	021b      	lsls	r3, r3, #8
 8015d9c:	4313      	orrs	r3, r2
 8015d9e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015da0:	69ba      	ldr	r2, [r7, #24]
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6819      	ldr	r1, [r3, #0]
 8015da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015daa:	3302      	adds	r3, #2
 8015dac:	440b      	add	r3, r1
 8015dae:	781b      	ldrb	r3, [r3, #0]
 8015db0:	041b      	lsls	r3, r3, #16
 8015db2:	4313      	orrs	r3, r2
 8015db4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015db6:	69bb      	ldr	r3, [r7, #24]
 8015db8:	2264      	movs	r2, #100	; 0x64
 8015dba:	fb02 f303 	mul.w	r3, r2, r3
 8015dbe:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	61fb      	str	r3, [r7, #28]
 8015dc4:	e006      	b.n	8015dd4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015dd4:	69bb      	ldr	r3, [r7, #24]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d00b      	beq.n	8015df2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015dda:	f107 0318 	add.w	r3, r7, #24
 8015dde:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015de4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015de6:	f107 0310 	add.w	r3, r7, #16
 8015dea:	4618      	mov	r0, r3
 8015dec:	f000 fd0e 	bl	801680c <RegionEU868ChannelAdd>
 8015df0:	e007      	b.n	8015e02 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015df2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015df6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015df8:	f107 030c 	add.w	r3, r7, #12
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f000 fda7 	bl	8016950 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e06:	3303      	adds	r3, #3
 8015e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e10:	3301      	adds	r3, #1
 8015e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015e16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e1a:	2b0f      	cmp	r3, #15
 8015e1c:	d9aa      	bls.n	8015d74 <RegionEU868ApplyCFList+0x30>
 8015e1e:	e002      	b.n	8015e26 <RegionEU868ApplyCFList+0xe2>
        return;
 8015e20:	bf00      	nop
 8015e22:	e000      	b.n	8015e26 <RegionEU868ApplyCFList+0xe2>
        return;
 8015e24:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015e26:	3728      	adds	r7, #40	; 0x28
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}

08015e2c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b082      	sub	sp, #8
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	791b      	ldrb	r3, [r3, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d002      	beq.n	8015e42 <RegionEU868ChanMaskSet+0x16>
 8015e3c:	2b01      	cmp	r3, #1
 8015e3e:	d00b      	beq.n	8015e58 <RegionEU868ChanMaskSet+0x2c>
 8015e40:	e015      	b.n	8015e6e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015e42:	4b0e      	ldr	r3, [pc, #56]	; (8015e7c <RegionEU868ChanMaskSet+0x50>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2201      	movs	r2, #1
 8015e50:	4619      	mov	r1, r3
 8015e52:	f7fe ff17 	bl	8014c84 <RegionCommonChanMaskCopy>
            break;
 8015e56:	e00c      	b.n	8015e72 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015e58:	4b08      	ldr	r3, [pc, #32]	; (8015e7c <RegionEU868ChanMaskSet+0x50>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2201      	movs	r2, #1
 8015e66:	4619      	mov	r1, r3
 8015e68:	f7fe ff0c 	bl	8014c84 <RegionCommonChanMaskCopy>
            break;
 8015e6c:	e001      	b.n	8015e72 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	e000      	b.n	8015e74 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015e72:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3708      	adds	r7, #8
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}
 8015e7c:	20001d34 	.word	0x20001d34

08015e80 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b088      	sub	sp, #32
 8015e84:	af02      	add	r7, sp, #8
 8015e86:	60ba      	str	r2, [r7, #8]
 8015e88:	607b      	str	r3, [r7, #4]
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	73fb      	strb	r3, [r7, #15]
 8015e8e:	460b      	mov	r3, r1
 8015e90:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015e92:	2300      	movs	r3, #0
 8015e94:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e9a:	2b07      	cmp	r3, #7
 8015e9c:	bfa8      	it	ge
 8015e9e:	2307      	movge	r3, #7
 8015ea0:	b25a      	sxtb	r2, r3
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015eac:	491e      	ldr	r1, [pc, #120]	; (8015f28 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7ff fb88 	bl	80155c4 <RegionCommonGetBandwidth>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	b2da      	uxtb	r2, r3
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ec2:	2b07      	cmp	r3, #7
 8015ec4:	d10a      	bne.n	8015edc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ecc:	461a      	mov	r2, r3
 8015ece:	4b17      	ldr	r3, [pc, #92]	; (8015f2c <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ed0:	5c9b      	ldrb	r3, [r3, r2]
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7ff f90a 	bl	80150ec <RegionCommonComputeSymbolTimeFsk>
 8015ed8:	6178      	str	r0, [r7, #20]
 8015eda:	e011      	b.n	8015f00 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	4b11      	ldr	r3, [pc, #68]	; (8015f2c <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ee6:	5c9a      	ldrb	r2, [r3, r2]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015eee:	4619      	mov	r1, r3
 8015ef0:	4b0d      	ldr	r3, [pc, #52]	; (8015f28 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015ef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	4610      	mov	r0, r2
 8015efa:	f7ff f8e1 	bl	80150c0 <RegionCommonComputeSymbolTimeLoRa>
 8015efe:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015f00:	4b0b      	ldr	r3, [pc, #44]	; (8015f30 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f04:	4798      	blx	r3
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	3308      	adds	r3, #8
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	320c      	adds	r2, #12
 8015f0e:	7bb9      	ldrb	r1, [r7, #14]
 8015f10:	9201      	str	r2, [sp, #4]
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	4603      	mov	r3, r0
 8015f16:	68ba      	ldr	r2, [r7, #8]
 8015f18:	6978      	ldr	r0, [r7, #20]
 8015f1a:	f7ff f8f7 	bl	801510c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015f1e:	bf00      	nop
 8015f20:	3718      	adds	r7, #24
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	0801c138 	.word	0x0801c138
 8015f2c:	0801c130 	.word	0x0801c130
 8015f30:	0801c168 	.word	0x0801c168

08015f34 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015f34:	b5b0      	push	{r4, r5, r7, lr}
 8015f36:	b090      	sub	sp, #64	; 0x40
 8015f38:	af0a      	add	r7, sp, #40	; 0x28
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	785b      	ldrb	r3, [r3, #1]
 8015f42:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015f44:	2300      	movs	r3, #0
 8015f46:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	685b      	ldr	r3, [r3, #4]
 8015f50:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015f52:	4b5a      	ldr	r3, [pc, #360]	; (80160bc <RegionEU868RxConfig+0x188>)
 8015f54:	685b      	ldr	r3, [r3, #4]
 8015f56:	4798      	blx	r3
 8015f58:	4603      	mov	r3, r0
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d001      	beq.n	8015f62 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	e0a8      	b.n	80160b4 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	7cdb      	ldrb	r3, [r3, #19]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d126      	bne.n	8015fb8 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015f6a:	4b55      	ldr	r3, [pc, #340]	; (80160c0 <RegionEU868RxConfig+0x18c>)
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	4619      	mov	r1, r3
 8015f74:	460b      	mov	r3, r1
 8015f76:	005b      	lsls	r3, r3, #1
 8015f78:	440b      	add	r3, r1
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	4413      	add	r3, r2
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015f82:	4b4f      	ldr	r3, [pc, #316]	; (80160c0 <RegionEU868RxConfig+0x18c>)
 8015f84:	681a      	ldr	r2, [r3, #0]
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	781b      	ldrb	r3, [r3, #0]
 8015f8a:	4619      	mov	r1, r3
 8015f8c:	460b      	mov	r3, r1
 8015f8e:	005b      	lsls	r3, r3, #1
 8015f90:	440b      	add	r3, r1
 8015f92:	009b      	lsls	r3, r3, #2
 8015f94:	4413      	add	r3, r2
 8015f96:	3304      	adds	r3, #4
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00c      	beq.n	8015fb8 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015f9e:	4b48      	ldr	r3, [pc, #288]	; (80160c0 <RegionEU868RxConfig+0x18c>)
 8015fa0:	681a      	ldr	r2, [r3, #0]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	460b      	mov	r3, r1
 8015faa:	005b      	lsls	r3, r3, #1
 8015fac:	440b      	add	r3, r1
 8015fae:	009b      	lsls	r3, r3, #2
 8015fb0:	4413      	add	r3, r2
 8015fb2:	3304      	adds	r3, #4
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fbc:	4a41      	ldr	r2, [pc, #260]	; (80160c4 <RegionEU868RxConfig+0x190>)
 8015fbe:	5cd3      	ldrb	r3, [r2, r3]
 8015fc0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015fc2:	4b3e      	ldr	r3, [pc, #248]	; (80160bc <RegionEU868RxConfig+0x188>)
 8015fc4:	68db      	ldr	r3, [r3, #12]
 8015fc6:	6938      	ldr	r0, [r7, #16]
 8015fc8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fce:	2b07      	cmp	r3, #7
 8015fd0:	d128      	bne.n	8016024 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015fd6:	4b39      	ldr	r3, [pc, #228]	; (80160bc <RegionEU868RxConfig+0x188>)
 8015fd8:	699c      	ldr	r4, [r3, #24]
 8015fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015fe2:	fb02 f303 	mul.w	r3, r2, r3
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	689b      	ldr	r3, [r3, #8]
 8015fec:	b29b      	uxth	r3, r3
 8015fee:	687a      	ldr	r2, [r7, #4]
 8015ff0:	7c92      	ldrb	r2, [r2, #18]
 8015ff2:	7df8      	ldrb	r0, [r7, #23]
 8015ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	9208      	str	r2, [sp, #32]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	9207      	str	r2, [sp, #28]
 8015ffe:	2200      	movs	r2, #0
 8016000:	9206      	str	r2, [sp, #24]
 8016002:	2201      	movs	r2, #1
 8016004:	9205      	str	r2, [sp, #20]
 8016006:	2200      	movs	r2, #0
 8016008:	9204      	str	r2, [sp, #16]
 801600a:	2200      	movs	r2, #0
 801600c:	9203      	str	r2, [sp, #12]
 801600e:	9302      	str	r3, [sp, #8]
 8016010:	2305      	movs	r3, #5
 8016012:	9301      	str	r3, [sp, #4]
 8016014:	4b2c      	ldr	r3, [pc, #176]	; (80160c8 <RegionEU868RxConfig+0x194>)
 8016016:	9300      	str	r3, [sp, #0]
 8016018:	2300      	movs	r3, #0
 801601a:	460a      	mov	r2, r1
 801601c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8016020:	47a0      	blx	r4
 8016022:	e024      	b.n	801606e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016024:	2301      	movs	r3, #1
 8016026:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016028:	4b24      	ldr	r3, [pc, #144]	; (80160bc <RegionEU868RxConfig+0x188>)
 801602a:	699c      	ldr	r4, [r3, #24]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	789b      	ldrb	r3, [r3, #2]
 8016030:	461d      	mov	r5, r3
 8016032:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	689b      	ldr	r3, [r3, #8]
 801603a:	b29b      	uxth	r3, r3
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	7c92      	ldrb	r2, [r2, #18]
 8016040:	7df8      	ldrb	r0, [r7, #23]
 8016042:	9209      	str	r2, [sp, #36]	; 0x24
 8016044:	2201      	movs	r2, #1
 8016046:	9208      	str	r2, [sp, #32]
 8016048:	2200      	movs	r2, #0
 801604a:	9207      	str	r2, [sp, #28]
 801604c:	2200      	movs	r2, #0
 801604e:	9206      	str	r2, [sp, #24]
 8016050:	2200      	movs	r2, #0
 8016052:	9205      	str	r2, [sp, #20]
 8016054:	2200      	movs	r2, #0
 8016056:	9204      	str	r2, [sp, #16]
 8016058:	2200      	movs	r2, #0
 801605a:	9203      	str	r2, [sp, #12]
 801605c:	9302      	str	r3, [sp, #8]
 801605e:	2308      	movs	r3, #8
 8016060:	9301      	str	r3, [sp, #4]
 8016062:	2300      	movs	r3, #0
 8016064:	9300      	str	r3, [sp, #0]
 8016066:	2301      	movs	r3, #1
 8016068:	460a      	mov	r2, r1
 801606a:	4629      	mov	r1, r5
 801606c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	7c5b      	ldrb	r3, [r3, #17]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d005      	beq.n	8016082 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801607a:	4a14      	ldr	r2, [pc, #80]	; (80160cc <RegionEU868RxConfig+0x198>)
 801607c:	5cd3      	ldrb	r3, [r2, r3]
 801607e:	75bb      	strb	r3, [r7, #22]
 8016080:	e004      	b.n	801608c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016086:	4a12      	ldr	r2, [pc, #72]	; (80160d0 <RegionEU868RxConfig+0x19c>)
 8016088:	5cd3      	ldrb	r3, [r2, r3]
 801608a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801608c:	4b0b      	ldr	r3, [pc, #44]	; (80160bc <RegionEU868RxConfig+0x188>)
 801608e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016090:	7dba      	ldrb	r2, [r7, #22]
 8016092:	320d      	adds	r2, #13
 8016094:	b2d1      	uxtb	r1, r2
 8016096:	7dfa      	ldrb	r2, [r7, #23]
 8016098:	4610      	mov	r0, r2
 801609a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	7cdb      	ldrb	r3, [r3, #19]
 80160a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80160a4:	6939      	ldr	r1, [r7, #16]
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7ff faaa 	bl	8015600 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	7bfa      	ldrb	r2, [r7, #15]
 80160b0:	701a      	strb	r2, [r3, #0]
    return true;
 80160b2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	3718      	adds	r7, #24
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bdb0      	pop	{r4, r5, r7, pc}
 80160bc:	0801c168 	.word	0x0801c168
 80160c0:	20001d34 	.word	0x20001d34
 80160c4:	0801c130 	.word	0x0801c130
 80160c8:	00014585 	.word	0x00014585
 80160cc:	0801c160 	.word	0x0801c160
 80160d0:	0801c158 	.word	0x0801c158

080160d4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80160d4:	b590      	push	{r4, r7, lr}
 80160d6:	b093      	sub	sp, #76	; 0x4c
 80160d8:	af0a      	add	r7, sp, #40	; 0x28
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160e6:	461a      	mov	r2, r3
 80160e8:	4b5d      	ldr	r3, [pc, #372]	; (8016260 <RegionEU868TxConfig+0x18c>)
 80160ea:	5c9b      	ldrb	r3, [r3, r2]
 80160ec:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80160f4:	4b5b      	ldr	r3, [pc, #364]	; (8016264 <RegionEU868TxConfig+0x190>)
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	4b5b      	ldr	r3, [pc, #364]	; (8016268 <RegionEU868TxConfig+0x194>)
 80160fa:	6819      	ldr	r1, [r3, #0]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	461c      	mov	r4, r3
 8016102:	4623      	mov	r3, r4
 8016104:	005b      	lsls	r3, r3, #1
 8016106:	4423      	add	r3, r4
 8016108:	009b      	lsls	r3, r3, #2
 801610a:	440b      	add	r3, r1
 801610c:	3309      	adds	r3, #9
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	4619      	mov	r1, r3
 8016112:	460b      	mov	r3, r1
 8016114:	005b      	lsls	r3, r3, #1
 8016116:	440b      	add	r3, r1
 8016118:	00db      	lsls	r3, r3, #3
 801611a:	4413      	add	r3, r2
 801611c:	3302      	adds	r3, #2
 801611e:	f993 3000 	ldrsb.w	r3, [r3]
 8016122:	4619      	mov	r1, r3
 8016124:	f7ff fa39 	bl	801559a <RegionCommonLimitTxPower>
 8016128:	4603      	mov	r3, r0
 801612a:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016132:	494e      	ldr	r1, [pc, #312]	; (801626c <RegionEU868TxConfig+0x198>)
 8016134:	4618      	mov	r0, r3
 8016136:	f7ff fa45 	bl	80155c4 <RegionCommonGetBandwidth>
 801613a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801613c:	2300      	movs	r3, #0
 801613e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	6859      	ldr	r1, [r3, #4]
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	689a      	ldr	r2, [r3, #8]
 8016148:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801614c:	4618      	mov	r0, r3
 801614e:	f7ff f895 	bl	801527c <RegionCommonComputeTxPower>
 8016152:	4603      	mov	r3, r0
 8016154:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016156:	4b46      	ldr	r3, [pc, #280]	; (8016270 <RegionEU868TxConfig+0x19c>)
 8016158:	68da      	ldr	r2, [r3, #12]
 801615a:	4b43      	ldr	r3, [pc, #268]	; (8016268 <RegionEU868TxConfig+0x194>)
 801615c:	6819      	ldr	r1, [r3, #0]
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	4618      	mov	r0, r3
 8016164:	4603      	mov	r3, r0
 8016166:	005b      	lsls	r3, r3, #1
 8016168:	4403      	add	r3, r0
 801616a:	009b      	lsls	r3, r3, #2
 801616c:	440b      	add	r3, r1
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	4618      	mov	r0, r3
 8016172:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801617a:	2b07      	cmp	r3, #7
 801617c:	d124      	bne.n	80161c8 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801617e:	2300      	movs	r3, #0
 8016180:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016182:	4b3b      	ldr	r3, [pc, #236]	; (8016270 <RegionEU868TxConfig+0x19c>)
 8016184:	69dc      	ldr	r4, [r3, #28]
 8016186:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801618a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801618e:	fb02 f303 	mul.w	r3, r2, r3
 8016192:	461a      	mov	r2, r3
 8016194:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016198:	7ff8      	ldrb	r0, [r7, #31]
 801619a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801619e:	9308      	str	r3, [sp, #32]
 80161a0:	2300      	movs	r3, #0
 80161a2:	9307      	str	r3, [sp, #28]
 80161a4:	2300      	movs	r3, #0
 80161a6:	9306      	str	r3, [sp, #24]
 80161a8:	2300      	movs	r3, #0
 80161aa:	9305      	str	r3, [sp, #20]
 80161ac:	2301      	movs	r3, #1
 80161ae:	9304      	str	r3, [sp, #16]
 80161b0:	2300      	movs	r3, #0
 80161b2:	9303      	str	r3, [sp, #12]
 80161b4:	2305      	movs	r3, #5
 80161b6:	9302      	str	r3, [sp, #8]
 80161b8:	2300      	movs	r3, #0
 80161ba:	9301      	str	r3, [sp, #4]
 80161bc:	9200      	str	r2, [sp, #0]
 80161be:	69bb      	ldr	r3, [r7, #24]
 80161c0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80161c4:	47a0      	blx	r4
 80161c6:	e01d      	b.n	8016204 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80161c8:	2301      	movs	r3, #1
 80161ca:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80161cc:	4b28      	ldr	r3, [pc, #160]	; (8016270 <RegionEU868TxConfig+0x19c>)
 80161ce:	69dc      	ldr	r4, [r3, #28]
 80161d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80161d4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80161d8:	7ff8      	ldrb	r0, [r7, #31]
 80161da:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80161de:	9208      	str	r2, [sp, #32]
 80161e0:	2200      	movs	r2, #0
 80161e2:	9207      	str	r2, [sp, #28]
 80161e4:	2200      	movs	r2, #0
 80161e6:	9206      	str	r2, [sp, #24]
 80161e8:	2200      	movs	r2, #0
 80161ea:	9205      	str	r2, [sp, #20]
 80161ec:	2201      	movs	r2, #1
 80161ee:	9204      	str	r2, [sp, #16]
 80161f0:	2200      	movs	r2, #0
 80161f2:	9203      	str	r2, [sp, #12]
 80161f4:	2208      	movs	r2, #8
 80161f6:	9202      	str	r2, [sp, #8]
 80161f8:	2201      	movs	r2, #1
 80161fa:	9201      	str	r2, [sp, #4]
 80161fc:	9300      	str	r3, [sp, #0]
 80161fe:	69bb      	ldr	r3, [r7, #24]
 8016200:	2200      	movs	r2, #0
 8016202:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016204:	4b18      	ldr	r3, [pc, #96]	; (8016268 <RegionEU868TxConfig+0x194>)
 8016206:	681a      	ldr	r2, [r3, #0]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	4619      	mov	r1, r3
 801620e:	460b      	mov	r3, r1
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	440b      	add	r3, r1
 8016214:	009b      	lsls	r3, r3, #2
 8016216:	4413      	add	r3, r2
 8016218:	681a      	ldr	r2, [r3, #0]
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016220:	4619      	mov	r1, r3
 8016222:	4610      	mov	r0, r2
 8016224:	f7ff fa1e 	bl	8015664 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	899b      	ldrh	r3, [r3, #12]
 8016232:	4619      	mov	r1, r3
 8016234:	4610      	mov	r0, r2
 8016236:	f7ff faa3 	bl	8015780 <GetTimeOnAir>
 801623a:	4602      	mov	r2, r0
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016240:	4b0b      	ldr	r3, [pc, #44]	; (8016270 <RegionEU868TxConfig+0x19c>)
 8016242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016244:	68fa      	ldr	r2, [r7, #12]
 8016246:	8992      	ldrh	r2, [r2, #12]
 8016248:	b2d1      	uxtb	r1, r2
 801624a:	7ffa      	ldrb	r2, [r7, #31]
 801624c:	4610      	mov	r0, r2
 801624e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8016250:	68bb      	ldr	r3, [r7, #8]
 8016252:	7f7a      	ldrb	r2, [r7, #29]
 8016254:	701a      	strb	r2, [r3, #0]
    return true;
 8016256:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016258:	4618      	mov	r0, r3
 801625a:	3724      	adds	r7, #36	; 0x24
 801625c:	46bd      	mov	sp, r7
 801625e:	bd90      	pop	{r4, r7, pc}
 8016260:	0801c130 	.word	0x0801c130
 8016264:	20001d30 	.word	0x20001d30
 8016268:	20001d34 	.word	0x20001d34
 801626c:	0801c138 	.word	0x0801c138
 8016270:	0801c168 	.word	0x0801c168

08016274 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016274:	b590      	push	{r4, r7, lr}
 8016276:	b093      	sub	sp, #76	; 0x4c
 8016278:	af00      	add	r7, sp, #0
 801627a:	60f8      	str	r0, [r7, #12]
 801627c:	60b9      	str	r1, [r7, #8]
 801627e:	607a      	str	r2, [r7, #4]
 8016280:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016282:	2307      	movs	r3, #7
 8016284:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801628c:	2200      	movs	r2, #0
 801628e:	601a      	str	r2, [r3, #0]
 8016290:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8016298:	2300      	movs	r3, #0
 801629a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801629e:	2300      	movs	r3, #0
 80162a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80162a2:	e085      	b.n	80163b0 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	685a      	ldr	r2, [r3, #4]
 80162a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80162ac:	4413      	add	r3, r2
 80162ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80162b2:	4611      	mov	r1, r2
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7fe fe29 	bl	8014f0c <RegionCommonParseLinkAdrReq>
 80162ba:	4603      	mov	r3, r0
 80162bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80162c0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d07b      	beq.n	80163c0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80162c8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80162cc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80162d0:	4413      	add	r3, r2
 80162d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80162d6:	2307      	movs	r3, #7
 80162d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80162dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162e0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80162e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d109      	bne.n	80162fe <RegionEU868LinkAdrReq+0x8a>
 80162ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d106      	bne.n	80162fe <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80162f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80162f4:	f023 0301 	bic.w	r3, r3, #1
 80162f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80162fc:	e058      	b.n	80163b0 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80162fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016302:	2b00      	cmp	r3, #0
 8016304:	d003      	beq.n	801630e <RegionEU868LinkAdrReq+0x9a>
 8016306:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801630a:	2b05      	cmp	r3, #5
 801630c:	d903      	bls.n	8016316 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801630e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016312:	2b06      	cmp	r3, #6
 8016314:	d906      	bls.n	8016324 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016316:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801631a:	f023 0301 	bic.w	r3, r3, #1
 801631e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016322:	e045      	b.n	80163b0 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016324:	2300      	movs	r3, #0
 8016326:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801632a:	e03d      	b.n	80163a8 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801632c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016330:	2b06      	cmp	r3, #6
 8016332:	d118      	bne.n	8016366 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016334:	4b5f      	ldr	r3, [pc, #380]	; (80164b4 <RegionEU868LinkAdrReq+0x240>)
 8016336:	6819      	ldr	r1, [r3, #0]
 8016338:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801633c:	4613      	mov	r3, r2
 801633e:	005b      	lsls	r3, r3, #1
 8016340:	4413      	add	r3, r2
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	440b      	add	r3, r1
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d028      	beq.n	801639e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801634c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016350:	2201      	movs	r2, #1
 8016352:	fa02 f303 	lsl.w	r3, r2, r3
 8016356:	b21a      	sxth	r2, r3
 8016358:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801635a:	b21b      	sxth	r3, r3
 801635c:	4313      	orrs	r3, r2
 801635e:	b21b      	sxth	r3, r3
 8016360:	b29b      	uxth	r3, r3
 8016362:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016364:	e01b      	b.n	801639e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016366:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016368:	461a      	mov	r2, r3
 801636a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801636e:	fa42 f303 	asr.w	r3, r2, r3
 8016372:	f003 0301 	and.w	r3, r3, #1
 8016376:	2b00      	cmp	r3, #0
 8016378:	d011      	beq.n	801639e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801637a:	4b4e      	ldr	r3, [pc, #312]	; (80164b4 <RegionEU868LinkAdrReq+0x240>)
 801637c:	6819      	ldr	r1, [r3, #0]
 801637e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8016382:	4613      	mov	r3, r2
 8016384:	005b      	lsls	r3, r3, #1
 8016386:	4413      	add	r3, r2
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	440b      	add	r3, r1
 801638c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801638e:	2b00      	cmp	r3, #0
 8016390:	d105      	bne.n	801639e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016392:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016396:	f023 0301 	bic.w	r3, r3, #1
 801639a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801639e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80163a2:	3301      	adds	r3, #1
 80163a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80163a8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80163ac:	2b0f      	cmp	r3, #15
 80163ae:	d9bd      	bls.n	801632c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	7a1b      	ldrb	r3, [r3, #8]
 80163b4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80163b8:	429a      	cmp	r2, r3
 80163ba:	f4ff af73 	bcc.w	80162a4 <RegionEU868LinkAdrReq+0x30>
 80163be:	e000      	b.n	80163c2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80163c0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80163c2:	2302      	movs	r3, #2
 80163c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	7a5b      	ldrb	r3, [r3, #9]
 80163cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80163d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7ff fa23 	bl	8015820 <RegionEU868GetPhyParam>
 80163da:	4603      	mov	r3, r0
 80163dc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80163de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80163e2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	7a9b      	ldrb	r3, [r3, #10]
 80163e8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80163ea:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80163ee:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80163f0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80163f4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80163f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80163fa:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016402:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801640a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	7b5b      	ldrb	r3, [r3, #13]
 8016410:	b25b      	sxtb	r3, r3
 8016412:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016414:	2310      	movs	r3, #16
 8016416:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016418:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801641c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016420:	b25b      	sxtb	r3, r3
 8016422:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016426:	2307      	movs	r3, #7
 8016428:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801642c:	4b21      	ldr	r3, [pc, #132]	; (80164b4 <RegionEU868LinkAdrReq+0x240>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016432:	2307      	movs	r3, #7
 8016434:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016438:	2300      	movs	r3, #0
 801643a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016444:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8016448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801644c:	1c9a      	adds	r2, r3, #2
 801644e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016452:	1c59      	adds	r1, r3, #1
 8016454:	f107 0010 	add.w	r0, r7, #16
 8016458:	4623      	mov	r3, r4
 801645a:	f7fe fda8 	bl	8014fae <RegionCommonLinkAdrReqVerifyParams>
 801645e:	4603      	mov	r3, r0
 8016460:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016464:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016468:	2b07      	cmp	r3, #7
 801646a:	d10d      	bne.n	8016488 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801646c:	4b11      	ldr	r3, [pc, #68]	; (80164b4 <RegionEU868LinkAdrReq+0x240>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8016474:	220c      	movs	r2, #12
 8016476:	2100      	movs	r1, #0
 8016478:	4618      	mov	r0, r3
 801647a:	f000 fb7d 	bl	8016b78 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801647e:	4b0d      	ldr	r3, [pc, #52]	; (80164b4 <RegionEU868LinkAdrReq+0x240>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016484:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016488:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016490:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016498:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80164a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80164a2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80164a6:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80164a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	374c      	adds	r7, #76	; 0x4c
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd90      	pop	{r4, r7, pc}
 80164b4:	20001d34 	.word	0x20001d34

080164b8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80164c0:	2307      	movs	r3, #7
 80164c2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80164c4:	2300      	movs	r3, #0
 80164c6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	f107 020e 	add.w	r2, r7, #14
 80164d0:	4611      	mov	r1, r2
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7ff f8de 	bl	8015694 <VerifyRfFreq>
 80164d8:	4603      	mov	r3, r0
 80164da:	f083 0301 	eor.w	r3, r3, #1
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d003      	beq.n	80164ec <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80164e4:	7bfb      	ldrb	r3, [r7, #15]
 80164e6:	f023 0301 	bic.w	r3, r3, #1
 80164ea:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f993 3000 	ldrsb.w	r3, [r3]
 80164f2:	2207      	movs	r2, #7
 80164f4:	2100      	movs	r1, #0
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7fe fb47 	bl	8014b8a <RegionCommonValueInRange>
 80164fc:	4603      	mov	r3, r0
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d103      	bne.n	801650a <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8016502:	7bfb      	ldrb	r3, [r7, #15]
 8016504:	f023 0302 	bic.w	r3, r3, #2
 8016508:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016510:	2205      	movs	r2, #5
 8016512:	2100      	movs	r1, #0
 8016514:	4618      	mov	r0, r3
 8016516:	f7fe fb38 	bl	8014b8a <RegionCommonValueInRange>
 801651a:	4603      	mov	r3, r0
 801651c:	2b00      	cmp	r3, #0
 801651e:	d103      	bne.n	8016528 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016520:	7bfb      	ldrb	r3, [r7, #15]
 8016522:	f023 0304 	bic.w	r3, r3, #4
 8016526:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016528:	7bfb      	ldrb	r3, [r7, #15]
}
 801652a:	4618      	mov	r0, r3
 801652c:	3710      	adds	r7, #16
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
	...

08016534 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b086      	sub	sp, #24
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801653c:	2303      	movs	r3, #3
 801653e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d114      	bne.n	8016574 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016550:	b2db      	uxtb	r3, r3
 8016552:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016554:	f107 0308 	add.w	r3, r7, #8
 8016558:	4618      	mov	r0, r3
 801655a:	f000 f9f9 	bl	8016950 <RegionEU868ChannelsRemove>
 801655e:	4603      	mov	r3, r0
 8016560:	f083 0301 	eor.w	r3, r3, #1
 8016564:	b2db      	uxtb	r3, r3
 8016566:	2b00      	cmp	r3, #0
 8016568:	d03b      	beq.n	80165e2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801656a:	7dfb      	ldrb	r3, [r7, #23]
 801656c:	f023 0303 	bic.w	r3, r3, #3
 8016570:	75fb      	strb	r3, [r7, #23]
 8016572:	e036      	b.n	80165e2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016580:	b2db      	uxtb	r3, r3
 8016582:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016584:	f107 030c 	add.w	r3, r7, #12
 8016588:	4618      	mov	r0, r3
 801658a:	f000 f93f 	bl	801680c <RegionEU868ChannelAdd>
 801658e:	4603      	mov	r3, r0
 8016590:	2b06      	cmp	r3, #6
 8016592:	d820      	bhi.n	80165d6 <RegionEU868NewChannelReq+0xa2>
 8016594:	a201      	add	r2, pc, #4	; (adr r2, 801659c <RegionEU868NewChannelReq+0x68>)
 8016596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801659a:	bf00      	nop
 801659c:	080165e1 	.word	0x080165e1
 80165a0:	080165d7 	.word	0x080165d7
 80165a4:	080165d7 	.word	0x080165d7
 80165a8:	080165d7 	.word	0x080165d7
 80165ac:	080165b9 	.word	0x080165b9
 80165b0:	080165c3 	.word	0x080165c3
 80165b4:	080165cd 	.word	0x080165cd
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80165b8:	7dfb      	ldrb	r3, [r7, #23]
 80165ba:	f023 0301 	bic.w	r3, r3, #1
 80165be:	75fb      	strb	r3, [r7, #23]
                break;
 80165c0:	e00f      	b.n	80165e2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80165c2:	7dfb      	ldrb	r3, [r7, #23]
 80165c4:	f023 0302 	bic.w	r3, r3, #2
 80165c8:	75fb      	strb	r3, [r7, #23]
                break;
 80165ca:	e00a      	b.n	80165e2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80165cc:	7dfb      	ldrb	r3, [r7, #23]
 80165ce:	f023 0303 	bic.w	r3, r3, #3
 80165d2:	75fb      	strb	r3, [r7, #23]
                break;
 80165d4:	e005      	b.n	80165e2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80165d6:	7dfb      	ldrb	r3, [r7, #23]
 80165d8:	f023 0303 	bic.w	r3, r3, #3
 80165dc:	75fb      	strb	r3, [r7, #23]
                break;
 80165de:	e000      	b.n	80165e2 <RegionEU868NewChannelReq+0xae>
                break;
 80165e0:	bf00      	nop
            }
        }
    }

    return status;
 80165e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3718      	adds	r7, #24
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop

080165f0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80165f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	370c      	adds	r7, #12
 8016600:	46bd      	mov	sp, r7
 8016602:	bc80      	pop	{r7}
 8016604:	4770      	bx	lr
	...

08016608 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b084      	sub	sp, #16
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016610:	2303      	movs	r3, #3
 8016612:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016614:	2300      	movs	r3, #0
 8016616:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	f107 020e 	add.w	r2, r7, #14
 8016620:	4611      	mov	r1, r2
 8016622:	4618      	mov	r0, r3
 8016624:	f7ff f836 	bl	8015694 <VerifyRfFreq>
 8016628:	4603      	mov	r3, r0
 801662a:	f083 0301 	eor.w	r3, r3, #1
 801662e:	b2db      	uxtb	r3, r3
 8016630:	2b00      	cmp	r3, #0
 8016632:	d003      	beq.n	801663c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8016634:	7bfb      	ldrb	r3, [r7, #15]
 8016636:	f023 0301 	bic.w	r3, r3, #1
 801663a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801663c:	4b13      	ldr	r3, [pc, #76]	; (801668c <RegionEU868DlChannelReq+0x84>)
 801663e:	681a      	ldr	r2, [r3, #0]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	4619      	mov	r1, r3
 8016646:	460b      	mov	r3, r1
 8016648:	005b      	lsls	r3, r3, #1
 801664a:	440b      	add	r3, r1
 801664c:	009b      	lsls	r3, r3, #2
 801664e:	4413      	add	r3, r2
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d103      	bne.n	801665e <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8016656:	7bfb      	ldrb	r3, [r7, #15]
 8016658:	f023 0302 	bic.w	r3, r3, #2
 801665c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801665e:	7bfb      	ldrb	r3, [r7, #15]
 8016660:	2b03      	cmp	r3, #3
 8016662:	d10d      	bne.n	8016680 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016664:	4b09      	ldr	r3, [pc, #36]	; (801668c <RegionEU868DlChannelReq+0x84>)
 8016666:	6819      	ldr	r1, [r3, #0]
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	4618      	mov	r0, r3
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	685a      	ldr	r2, [r3, #4]
 8016672:	4603      	mov	r3, r0
 8016674:	005b      	lsls	r3, r3, #1
 8016676:	4403      	add	r3, r0
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	440b      	add	r3, r1
 801667c:	3304      	adds	r3, #4
 801667e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016680:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016684:	4618      	mov	r0, r3
 8016686:	3710      	adds	r7, #16
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}
 801668c:	20001d34 	.word	0x20001d34

08016690 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016690:	b480      	push	{r7}
 8016692:	b083      	sub	sp, #12
 8016694:	af00      	add	r7, sp, #0
 8016696:	4603      	mov	r3, r0
 8016698:	460a      	mov	r2, r1
 801669a:	71fb      	strb	r3, [r7, #7]
 801669c:	4613      	mov	r3, r2
 801669e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80166a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	370c      	adds	r7, #12
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bc80      	pop	{r7}
 80166ac:	4770      	bx	lr
	...

080166b0 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b09a      	sub	sp, #104	; 0x68
 80166b4:	af02      	add	r7, sp, #8
 80166b6:	60f8      	str	r0, [r7, #12]
 80166b8:	60b9      	str	r1, [r7, #8]
 80166ba:	607a      	str	r2, [r7, #4]
 80166bc:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80166be:	2300      	movs	r3, #0
 80166c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80166c4:	2300      	movs	r3, #0
 80166c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80166ca:	2300      	movs	r3, #0
 80166cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80166d2:	2200      	movs	r2, #0
 80166d4:	601a      	str	r2, [r3, #0]
 80166d6:	605a      	str	r2, [r3, #4]
 80166d8:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80166da:	230c      	movs	r3, #12
 80166dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80166e0:	2307      	movs	r3, #7
 80166e2:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80166e4:	4b47      	ldr	r3, [pc, #284]	; (8016804 <RegionEU868NextChannel+0x154>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80166ec:	2201      	movs	r2, #1
 80166ee:	2100      	movs	r1, #0
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7fe fa9b 	bl	8014c2c <RegionCommonCountChannels>
 80166f6:	4603      	mov	r3, r0
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d10a      	bne.n	8016712 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80166fc:	4b41      	ldr	r3, [pc, #260]	; (8016804 <RegionEU868NextChannel+0x154>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8016704:	4b3f      	ldr	r3, [pc, #252]	; (8016804 <RegionEU868NextChannel+0x154>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	f042 0207 	orr.w	r2, r2, #7
 801670c:	b292      	uxth	r2, r2
 801670e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	7a5b      	ldrb	r3, [r3, #9]
 8016716:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801671e:	b2db      	uxtb	r3, r3
 8016720:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016722:	4b38      	ldr	r3, [pc, #224]	; (8016804 <RegionEU868NextChannel+0x154>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801672a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801672c:	4b35      	ldr	r3, [pc, #212]	; (8016804 <RegionEU868NextChannel+0x154>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8016732:	4b35      	ldr	r3, [pc, #212]	; (8016808 <RegionEU868NextChannel+0x158>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016738:	2310      	movs	r3, #16
 801673a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801673c:	f107 0312 	add.w	r3, r7, #18
 8016740:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	685b      	ldr	r3, [r3, #4]
 801674c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	7a9b      	ldrb	r3, [r3, #10]
 8016752:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016756:	2306      	movs	r3, #6
 8016758:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801675c:	68fa      	ldr	r2, [r7, #12]
 801675e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016762:	320c      	adds	r2, #12
 8016764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016768:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	7d1b      	ldrb	r3, [r3, #20]
 8016770:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	8adb      	ldrh	r3, [r3, #22]
 801677e:	4619      	mov	r1, r3
 8016780:	4610      	mov	r0, r2
 8016782:	f7fe fffd 	bl	8015780 <GetTimeOnAir>
 8016786:	4603      	mov	r3, r0
 8016788:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801678a:	f107 0314 	add.w	r3, r7, #20
 801678e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016790:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016794:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016798:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	9301      	str	r3, [sp, #4]
 80167a0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	460b      	mov	r3, r1
 80167a8:	6839      	ldr	r1, [r7, #0]
 80167aa:	f7fe fe56 	bl	801545a <RegionCommonIdentifyChannels>
 80167ae:	4603      	mov	r3, r0
 80167b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80167b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d10e      	bne.n	80167da <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80167bc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80167c0:	3b01      	subs	r3, #1
 80167c2:	4619      	mov	r1, r3
 80167c4:	2000      	movs	r0, #0
 80167c6:	f000 f985 	bl	8016ad4 <randr>
 80167ca:	4603      	mov	r3, r0
 80167cc:	3360      	adds	r3, #96	; 0x60
 80167ce:	443b      	add	r3, r7
 80167d0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	701a      	strb	r2, [r3, #0]
 80167d8:	e00e      	b.n	80167f8 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80167da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167de:	2b0c      	cmp	r3, #12
 80167e0:	d10a      	bne.n	80167f8 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80167e2:	4b08      	ldr	r3, [pc, #32]	; (8016804 <RegionEU868NextChannel+0x154>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80167ea:	4b06      	ldr	r3, [pc, #24]	; (8016804 <RegionEU868NextChannel+0x154>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f042 0207 	orr.w	r2, r2, #7
 80167f2:	b292      	uxth	r2, r2
 80167f4:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 80167f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3760      	adds	r7, #96	; 0x60
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}
 8016804:	20001d34 	.word	0x20001d34
 8016808:	20001d30 	.word	0x20001d30

0801680c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b084      	sub	sp, #16
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016814:	2300      	movs	r3, #0
 8016816:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016818:	2300      	movs	r3, #0
 801681a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801681c:	2300      	movs	r3, #0
 801681e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	791b      	ldrb	r3, [r3, #4]
 8016824:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016826:	7b7b      	ldrb	r3, [r7, #13]
 8016828:	2b02      	cmp	r3, #2
 801682a:	d801      	bhi.n	8016830 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801682c:	2306      	movs	r3, #6
 801682e:	e089      	b.n	8016944 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016830:	7b7b      	ldrb	r3, [r7, #13]
 8016832:	2b0f      	cmp	r3, #15
 8016834:	d901      	bls.n	801683a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016836:	2303      	movs	r3, #3
 8016838:	e084      	b.n	8016944 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	7a1b      	ldrb	r3, [r3, #8]
 8016840:	f343 0303 	sbfx	r3, r3, #0, #4
 8016844:	b25b      	sxtb	r3, r3
 8016846:	2207      	movs	r2, #7
 8016848:	2100      	movs	r1, #0
 801684a:	4618      	mov	r0, r3
 801684c:	f7fe f99d 	bl	8014b8a <RegionCommonValueInRange>
 8016850:	4603      	mov	r3, r0
 8016852:	2b00      	cmp	r3, #0
 8016854:	d101      	bne.n	801685a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016856:	2301      	movs	r3, #1
 8016858:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	7a1b      	ldrb	r3, [r3, #8]
 8016860:	f343 1303 	sbfx	r3, r3, #4, #4
 8016864:	b25b      	sxtb	r3, r3
 8016866:	2207      	movs	r2, #7
 8016868:	2100      	movs	r1, #0
 801686a:	4618      	mov	r0, r3
 801686c:	f7fe f98d 	bl	8014b8a <RegionCommonValueInRange>
 8016870:	4603      	mov	r3, r0
 8016872:	2b00      	cmp	r3, #0
 8016874:	d101      	bne.n	801687a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016876:	2301      	movs	r3, #1
 8016878:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	7a1b      	ldrb	r3, [r3, #8]
 8016880:	f343 0303 	sbfx	r3, r3, #0, #4
 8016884:	b25a      	sxtb	r2, r3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	7a1b      	ldrb	r3, [r3, #8]
 801688c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016890:	b25b      	sxtb	r3, r3
 8016892:	429a      	cmp	r2, r3
 8016894:	dd01      	ble.n	801689a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016896:	2301      	movs	r3, #1
 8016898:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801689a:	7bbb      	ldrb	r3, [r7, #14]
 801689c:	f083 0301 	eor.w	r3, r3, #1
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d010      	beq.n	80168c8 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	f107 020c 	add.w	r2, r7, #12
 80168b0:	4611      	mov	r1, r2
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7fe feee 	bl	8015694 <VerifyRfFreq>
 80168b8:	4603      	mov	r3, r0
 80168ba:	f083 0301 	eor.w	r3, r3, #1
 80168be:	b2db      	uxtb	r3, r3
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d001      	beq.n	80168c8 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80168c4:	2301      	movs	r3, #1
 80168c6:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80168c8:	7bfb      	ldrb	r3, [r7, #15]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d004      	beq.n	80168d8 <RegionEU868ChannelAdd+0xcc>
 80168ce:	7bbb      	ldrb	r3, [r7, #14]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d001      	beq.n	80168d8 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80168d4:	2306      	movs	r3, #6
 80168d6:	e035      	b.n	8016944 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80168d8:	7bfb      	ldrb	r3, [r7, #15]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d001      	beq.n	80168e2 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80168de:	2305      	movs	r3, #5
 80168e0:	e030      	b.n	8016944 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80168e2:	7bbb      	ldrb	r3, [r7, #14]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d001      	beq.n	80168ec <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80168e8:	2304      	movs	r3, #4
 80168ea:	e02b      	b.n	8016944 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80168ec:	4b17      	ldr	r3, [pc, #92]	; (801694c <RegionEU868ChannelAdd+0x140>)
 80168ee:	6819      	ldr	r1, [r3, #0]
 80168f0:	7b7a      	ldrb	r2, [r7, #13]
 80168f2:	4613      	mov	r3, r2
 80168f4:	005b      	lsls	r3, r3, #1
 80168f6:	4413      	add	r3, r2
 80168f8:	009b      	lsls	r3, r3, #2
 80168fa:	18c8      	adds	r0, r1, r3
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	220c      	movs	r2, #12
 8016902:	4619      	mov	r1, r3
 8016904:	f000 f8fd 	bl	8016b02 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016908:	4b10      	ldr	r3, [pc, #64]	; (801694c <RegionEU868ChannelAdd+0x140>)
 801690a:	6819      	ldr	r1, [r3, #0]
 801690c:	7b7a      	ldrb	r2, [r7, #13]
 801690e:	7b38      	ldrb	r0, [r7, #12]
 8016910:	4613      	mov	r3, r2
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	4413      	add	r3, r2
 8016916:	009b      	lsls	r3, r3, #2
 8016918:	440b      	add	r3, r1
 801691a:	3309      	adds	r3, #9
 801691c:	4602      	mov	r2, r0
 801691e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016920:	4b0a      	ldr	r3, [pc, #40]	; (801694c <RegionEU868ChannelAdd+0x140>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8016928:	b21a      	sxth	r2, r3
 801692a:	7b7b      	ldrb	r3, [r7, #13]
 801692c:	2101      	movs	r1, #1
 801692e:	fa01 f303 	lsl.w	r3, r1, r3
 8016932:	b21b      	sxth	r3, r3
 8016934:	4313      	orrs	r3, r2
 8016936:	b21a      	sxth	r2, r3
 8016938:	4b04      	ldr	r3, [pc, #16]	; (801694c <RegionEU868ChannelAdd+0x140>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	b292      	uxth	r2, r2
 801693e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8016942:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016944:	4618      	mov	r0, r3
 8016946:	3710      	adds	r7, #16
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}
 801694c:	20001d34 	.word	0x20001d34

08016950 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b086      	sub	sp, #24
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801695e:	7dfb      	ldrb	r3, [r7, #23]
 8016960:	2b02      	cmp	r3, #2
 8016962:	d801      	bhi.n	8016968 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016964:	2300      	movs	r3, #0
 8016966:	e016      	b.n	8016996 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016968:	4b0d      	ldr	r3, [pc, #52]	; (80169a0 <RegionEU868ChannelsRemove+0x50>)
 801696a:	6819      	ldr	r1, [r3, #0]
 801696c:	7dfa      	ldrb	r2, [r7, #23]
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	009b      	lsls	r3, r3, #2
 8016976:	440b      	add	r3, r1
 8016978:	461a      	mov	r2, r3
 801697a:	2300      	movs	r3, #0
 801697c:	6013      	str	r3, [r2, #0]
 801697e:	6053      	str	r3, [r2, #4]
 8016980:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016982:	4b07      	ldr	r3, [pc, #28]	; (80169a0 <RegionEU868ChannelsRemove+0x50>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801698a:	7df9      	ldrb	r1, [r7, #23]
 801698c:	2210      	movs	r2, #16
 801698e:	4618      	mov	r0, r3
 8016990:	f7fe f918 	bl	8014bc4 <RegionCommonChanDisable>
 8016994:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016996:	4618      	mov	r0, r3
 8016998:	3718      	adds	r7, #24
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	20001d34 	.word	0x20001d34

080169a4 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80169a4:	b590      	push	{r4, r7, lr}
 80169a6:	b085      	sub	sp, #20
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80169b2:	4b20      	ldr	r3, [pc, #128]	; (8016a34 <RegionEU868SetContinuousWave+0x90>)
 80169b4:	681a      	ldr	r2, [r3, #0]
 80169b6:	4b20      	ldr	r3, [pc, #128]	; (8016a38 <RegionEU868SetContinuousWave+0x94>)
 80169b8:	6819      	ldr	r1, [r3, #0]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	461c      	mov	r4, r3
 80169c0:	4623      	mov	r3, r4
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	4423      	add	r3, r4
 80169c6:	009b      	lsls	r3, r3, #2
 80169c8:	440b      	add	r3, r1
 80169ca:	3309      	adds	r3, #9
 80169cc:	781b      	ldrb	r3, [r3, #0]
 80169ce:	4619      	mov	r1, r3
 80169d0:	460b      	mov	r3, r1
 80169d2:	005b      	lsls	r3, r3, #1
 80169d4:	440b      	add	r3, r1
 80169d6:	00db      	lsls	r3, r3, #3
 80169d8:	4413      	add	r3, r2
 80169da:	3302      	adds	r3, #2
 80169dc:	f993 3000 	ldrsb.w	r3, [r3]
 80169e0:	4619      	mov	r1, r3
 80169e2:	f7fe fdda 	bl	801559a <RegionCommonLimitTxPower>
 80169e6:	4603      	mov	r3, r0
 80169e8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80169ea:	2300      	movs	r3, #0
 80169ec:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80169ee:	4b12      	ldr	r3, [pc, #72]	; (8016a38 <RegionEU868SetContinuousWave+0x94>)
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	781b      	ldrb	r3, [r3, #0]
 80169f6:	4619      	mov	r1, r3
 80169f8:	460b      	mov	r3, r1
 80169fa:	005b      	lsls	r3, r3, #1
 80169fc:	440b      	add	r3, r1
 80169fe:	009b      	lsls	r3, r3, #2
 8016a00:	4413      	add	r3, r2
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	6859      	ldr	r1, [r3, #4]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	689a      	ldr	r2, [r3, #8]
 8016a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a12:	4618      	mov	r0, r3
 8016a14:	f7fe fc32 	bl	801527c <RegionCommonComputeTxPower>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016a1c:	4b07      	ldr	r3, [pc, #28]	; (8016a3c <RegionEU868SetContinuousWave+0x98>)
 8016a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	8992      	ldrh	r2, [r2, #12]
 8016a24:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016a28:	68b8      	ldr	r0, [r7, #8]
 8016a2a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8016a2c:	bf00      	nop
 8016a2e:	3714      	adds	r7, #20
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd90      	pop	{r4, r7, pc}
 8016a34:	20001d30 	.word	0x20001d30
 8016a38:	20001d34 	.word	0x20001d34
 8016a3c:	0801c168 	.word	0x0801c168

08016a40 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016a40:	b480      	push	{r7}
 8016a42:	b085      	sub	sp, #20
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	4603      	mov	r3, r0
 8016a48:	71fb      	strb	r3, [r7, #7]
 8016a4a:	460b      	mov	r3, r1
 8016a4c:	71bb      	strb	r3, [r7, #6]
 8016a4e:	4613      	mov	r3, r2
 8016a50:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016a52:	79ba      	ldrb	r2, [r7, #6]
 8016a54:	797b      	ldrb	r3, [r7, #5]
 8016a56:	1ad3      	subs	r3, r2, r3
 8016a58:	b2db      	uxtb	r3, r3
 8016a5a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	da01      	bge.n	8016a68 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016a64:	2300      	movs	r3, #0
 8016a66:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016a68:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3714      	adds	r7, #20
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bc80      	pop	{r7}
 8016a72:	4770      	bx	lr

08016a74 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016a74:	b480      	push	{r7}
 8016a76:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016a78:	4b0d      	ldr	r3, [pc, #52]	; (8016ab0 <rand1+0x3c>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	4a0d      	ldr	r2, [pc, #52]	; (8016ab4 <rand1+0x40>)
 8016a7e:	fb02 f303 	mul.w	r3, r2, r3
 8016a82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016a86:	3339      	adds	r3, #57	; 0x39
 8016a88:	4a09      	ldr	r2, [pc, #36]	; (8016ab0 <rand1+0x3c>)
 8016a8a:	6013      	str	r3, [r2, #0]
 8016a8c:	4b08      	ldr	r3, [pc, #32]	; (8016ab0 <rand1+0x3c>)
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	2303      	movs	r3, #3
 8016a92:	fba3 1302 	umull	r1, r3, r3, r2
 8016a96:	1ad1      	subs	r1, r2, r3
 8016a98:	0849      	lsrs	r1, r1, #1
 8016a9a:	440b      	add	r3, r1
 8016a9c:	0f99      	lsrs	r1, r3, #30
 8016a9e:	460b      	mov	r3, r1
 8016aa0:	07db      	lsls	r3, r3, #31
 8016aa2:	1a5b      	subs	r3, r3, r1
 8016aa4:	1ad1      	subs	r1, r2, r3
 8016aa6:	460b      	mov	r3, r1
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bc80      	pop	{r7}
 8016aae:	4770      	bx	lr
 8016ab0:	20000138 	.word	0x20000138
 8016ab4:	41c64e6d 	.word	0x41c64e6d

08016ab8 <srand1>:

void srand1( uint32_t seed )
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
    next = seed;
 8016ac0:	4a03      	ldr	r2, [pc, #12]	; (8016ad0 <srand1+0x18>)
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	6013      	str	r3, [r2, #0]
}
 8016ac6:	bf00      	nop
 8016ac8:	370c      	adds	r7, #12
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bc80      	pop	{r7}
 8016ace:	4770      	bx	lr
 8016ad0:	20000138 	.word	0x20000138

08016ad4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016ade:	f7ff ffc9 	bl	8016a74 <rand1>
 8016ae2:	4602      	mov	r2, r0
 8016ae4:	6839      	ldr	r1, [r7, #0]
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	1acb      	subs	r3, r1, r3
 8016aea:	3301      	adds	r3, #1
 8016aec:	fb92 f1f3 	sdiv	r1, r2, r3
 8016af0:	fb01 f303 	mul.w	r3, r1, r3
 8016af4:	1ad2      	subs	r2, r2, r3
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	4413      	add	r3, r2
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3708      	adds	r7, #8
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}

08016b02 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016b02:	b480      	push	{r7}
 8016b04:	b085      	sub	sp, #20
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	60f8      	str	r0, [r7, #12]
 8016b0a:	60b9      	str	r1, [r7, #8]
 8016b0c:	4613      	mov	r3, r2
 8016b0e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016b10:	e007      	b.n	8016b22 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016b12:	68ba      	ldr	r2, [r7, #8]
 8016b14:	1c53      	adds	r3, r2, #1
 8016b16:	60bb      	str	r3, [r7, #8]
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	1c59      	adds	r1, r3, #1
 8016b1c:	60f9      	str	r1, [r7, #12]
 8016b1e:	7812      	ldrb	r2, [r2, #0]
 8016b20:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016b22:	88fb      	ldrh	r3, [r7, #6]
 8016b24:	1e5a      	subs	r2, r3, #1
 8016b26:	80fa      	strh	r2, [r7, #6]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d1f2      	bne.n	8016b12 <memcpy1+0x10>
    }
}
 8016b2c:	bf00      	nop
 8016b2e:	bf00      	nop
 8016b30:	3714      	adds	r7, #20
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bc80      	pop	{r7}
 8016b36:	4770      	bx	lr

08016b38 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016b38:	b480      	push	{r7}
 8016b3a:	b085      	sub	sp, #20
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	60f8      	str	r0, [r7, #12]
 8016b40:	60b9      	str	r1, [r7, #8]
 8016b42:	4613      	mov	r3, r2
 8016b44:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016b46:	88fb      	ldrh	r3, [r7, #6]
 8016b48:	3b01      	subs	r3, #1
 8016b4a:	68fa      	ldr	r2, [r7, #12]
 8016b4c:	4413      	add	r3, r2
 8016b4e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016b50:	e007      	b.n	8016b62 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016b52:	68ba      	ldr	r2, [r7, #8]
 8016b54:	1c53      	adds	r3, r2, #1
 8016b56:	60bb      	str	r3, [r7, #8]
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	1e59      	subs	r1, r3, #1
 8016b5c:	60f9      	str	r1, [r7, #12]
 8016b5e:	7812      	ldrb	r2, [r2, #0]
 8016b60:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016b62:	88fb      	ldrh	r3, [r7, #6]
 8016b64:	1e5a      	subs	r2, r3, #1
 8016b66:	80fa      	strh	r2, [r7, #6]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d1f2      	bne.n	8016b52 <memcpyr+0x1a>
    }
}
 8016b6c:	bf00      	nop
 8016b6e:	bf00      	nop
 8016b70:	3714      	adds	r7, #20
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bc80      	pop	{r7}
 8016b76:	4770      	bx	lr

08016b78 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b083      	sub	sp, #12
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	460b      	mov	r3, r1
 8016b82:	70fb      	strb	r3, [r7, #3]
 8016b84:	4613      	mov	r3, r2
 8016b86:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016b88:	e004      	b.n	8016b94 <memset1+0x1c>
    {
        *dst++ = value;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	1c5a      	adds	r2, r3, #1
 8016b8e:	607a      	str	r2, [r7, #4]
 8016b90:	78fa      	ldrb	r2, [r7, #3]
 8016b92:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016b94:	883b      	ldrh	r3, [r7, #0]
 8016b96:	1e5a      	subs	r2, r3, #1
 8016b98:	803a      	strh	r2, [r7, #0]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d1f5      	bne.n	8016b8a <memset1+0x12>
    }
}
 8016b9e:	bf00      	nop
 8016ba0:	bf00      	nop
 8016ba2:	370c      	adds	r7, #12
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bc80      	pop	{r7}
 8016ba8:	4770      	bx	lr
	...

08016bac <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016bac:	b480      	push	{r7}
 8016bae:	b085      	sub	sp, #20
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	460b      	mov	r3, r1
 8016bb6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bbc:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d101      	bne.n	8016bc8 <Crc32+0x1c>
    {
        return 0;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	e026      	b.n	8016c16 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016bc8:	2300      	movs	r3, #0
 8016bca:	817b      	strh	r3, [r7, #10]
 8016bcc:	e01d      	b.n	8016c0a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016bce:	897b      	ldrh	r3, [r7, #10]
 8016bd0:	687a      	ldr	r2, [r7, #4]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	781b      	ldrb	r3, [r3, #0]
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	4053      	eors	r3, r2
 8016bdc:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016bde:	2300      	movs	r3, #0
 8016be0:	813b      	strh	r3, [r7, #8]
 8016be2:	e00c      	b.n	8016bfe <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	085a      	lsrs	r2, r3, #1
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	f003 0301 	and.w	r3, r3, #1
 8016bee:	425b      	negs	r3, r3
 8016bf0:	490b      	ldr	r1, [pc, #44]	; (8016c20 <Crc32+0x74>)
 8016bf2:	400b      	ands	r3, r1
 8016bf4:	4053      	eors	r3, r2
 8016bf6:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016bf8:	893b      	ldrh	r3, [r7, #8]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	813b      	strh	r3, [r7, #8]
 8016bfe:	893b      	ldrh	r3, [r7, #8]
 8016c00:	2b07      	cmp	r3, #7
 8016c02:	d9ef      	bls.n	8016be4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016c04:	897b      	ldrh	r3, [r7, #10]
 8016c06:	3301      	adds	r3, #1
 8016c08:	817b      	strh	r3, [r7, #10]
 8016c0a:	897a      	ldrh	r2, [r7, #10]
 8016c0c:	887b      	ldrh	r3, [r7, #2]
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d3dd      	bcc.n	8016bce <Crc32+0x22>
        }
    }

    return ~crc;
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	43db      	mvns	r3, r3
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3714      	adds	r7, #20
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bc80      	pop	{r7}
 8016c1e:	4770      	bx	lr
 8016c20:	edb88320 	.word	0xedb88320

08016c24 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b084      	sub	sp, #16
 8016c28:	af02      	add	r7, sp, #8
 8016c2a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016c2c:	4a24      	ldr	r2, [pc, #144]	; (8016cc0 <RadioInit+0x9c>)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016c32:	4b24      	ldr	r3, [pc, #144]	; (8016cc4 <RadioInit+0xa0>)
 8016c34:	2200      	movs	r2, #0
 8016c36:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016c38:	4b22      	ldr	r3, [pc, #136]	; (8016cc4 <RadioInit+0xa0>)
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016c3e:	4b21      	ldr	r3, [pc, #132]	; (8016cc4 <RadioInit+0xa0>)
 8016c40:	2200      	movs	r2, #0
 8016c42:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016c44:	4b1f      	ldr	r3, [pc, #124]	; (8016cc4 <RadioInit+0xa0>)
 8016c46:	2200      	movs	r2, #0
 8016c48:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8016c4a:	481f      	ldr	r0, [pc, #124]	; (8016cc8 <RadioInit+0xa4>)
 8016c4c:	f001 ff88 	bl	8018b60 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016c50:	4b1c      	ldr	r3, [pc, #112]	; (8016cc4 <RadioInit+0xa0>)
 8016c52:	2200      	movs	r2, #0
 8016c54:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016c56:	4b1b      	ldr	r3, [pc, #108]	; (8016cc4 <RadioInit+0xa0>)
 8016c58:	2200      	movs	r2, #0
 8016c5a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016c5c:	f002 fa16 	bl	801908c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016c60:	2100      	movs	r1, #0
 8016c62:	2000      	movs	r0, #0
 8016c64:	f002 fdde 	bl	8019824 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016c68:	2204      	movs	r2, #4
 8016c6a:	2100      	movs	r1, #0
 8016c6c:	2001      	movs	r0, #1
 8016c6e:	f002 fb9b 	bl	80193a8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016c72:	2300      	movs	r3, #0
 8016c74:	2200      	movs	r2, #0
 8016c76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016c7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016c7e:	f002 facb 	bl	8019218 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8016c82:	f000 fe83 	bl	801798c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016c86:	2300      	movs	r3, #0
 8016c88:	9300      	str	r3, [sp, #0]
 8016c8a:	4b10      	ldr	r3, [pc, #64]	; (8016ccc <RadioInit+0xa8>)
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8016c92:	480f      	ldr	r0, [pc, #60]	; (8016cd0 <RadioInit+0xac>)
 8016c94:	f003 ffdc 	bl	801ac50 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016c98:	2300      	movs	r3, #0
 8016c9a:	9300      	str	r3, [sp, #0]
 8016c9c:	4b0d      	ldr	r3, [pc, #52]	; (8016cd4 <RadioInit+0xb0>)
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8016ca4:	480c      	ldr	r0, [pc, #48]	; (8016cd8 <RadioInit+0xb4>)
 8016ca6:	f003 ffd3 	bl	801ac50 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016caa:	4809      	ldr	r0, [pc, #36]	; (8016cd0 <RadioInit+0xac>)
 8016cac:	f004 f874 	bl	801ad98 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016cb0:	4809      	ldr	r0, [pc, #36]	; (8016cd8 <RadioInit+0xb4>)
 8016cb2:	f004 f871 	bl	801ad98 <UTIL_TIMER_Stop>
}
 8016cb6:	bf00      	nop
 8016cb8:	3708      	adds	r7, #8
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}
 8016cbe:	bf00      	nop
 8016cc0:	20001e38 	.word	0x20001e38
 8016cc4:	20001e3c 	.word	0x20001e3c
 8016cc8:	08017d79 	.word	0x08017d79
 8016ccc:	08017d01 	.word	0x08017d01
 8016cd0:	20001e98 	.word	0x20001e98
 8016cd4:	08017d15 	.word	0x08017d15
 8016cd8:	20001eb0 	.word	0x20001eb0

08016cdc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016ce0:	f001 ff80 	bl	8018be4 <SUBGRF_GetOperatingMode>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b07      	cmp	r3, #7
 8016ce8:	d00a      	beq.n	8016d00 <RadioGetStatus+0x24>
 8016cea:	2b07      	cmp	r3, #7
 8016cec:	dc0a      	bgt.n	8016d04 <RadioGetStatus+0x28>
 8016cee:	2b04      	cmp	r3, #4
 8016cf0:	d002      	beq.n	8016cf8 <RadioGetStatus+0x1c>
 8016cf2:	2b05      	cmp	r3, #5
 8016cf4:	d002      	beq.n	8016cfc <RadioGetStatus+0x20>
 8016cf6:	e005      	b.n	8016d04 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016cf8:	2302      	movs	r3, #2
 8016cfa:	e004      	b.n	8016d06 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	e002      	b.n	8016d06 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016d00:	2303      	movs	r3, #3
 8016d02:	e000      	b.n	8016d06 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016d04:	2300      	movs	r3, #0
    }
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	bd80      	pop	{r7, pc}
	...

08016d0c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	4603      	mov	r3, r0
 8016d14:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016d16:	4a2a      	ldr	r2, [pc, #168]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d18:	79fb      	ldrb	r3, [r7, #7]
 8016d1a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016d1c:	79fb      	ldrb	r3, [r7, #7]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f003 f943 	bl	8019faa <RFW_SetRadioModem>
    switch( modem )
 8016d24:	79fb      	ldrb	r3, [r7, #7]
 8016d26:	2b05      	cmp	r3, #5
 8016d28:	d80e      	bhi.n	8016d48 <RadioSetModem+0x3c>
 8016d2a:	a201      	add	r2, pc, #4	; (adr r2, 8016d30 <RadioSetModem+0x24>)
 8016d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d30:	08016d57 	.word	0x08016d57
 8016d34:	08016d65 	.word	0x08016d65
 8016d38:	08016d49 	.word	0x08016d49
 8016d3c:	08016d8b 	.word	0x08016d8b
 8016d40:	08016d99 	.word	0x08016d99
 8016d44:	08016da7 	.word	0x08016da7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016d48:	2003      	movs	r0, #3
 8016d4a:	f002 fb07 	bl	801935c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016d4e:	4b1c      	ldr	r3, [pc, #112]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d50:	2200      	movs	r2, #0
 8016d52:	735a      	strb	r2, [r3, #13]
        break;
 8016d54:	e02f      	b.n	8016db6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016d56:	2000      	movs	r0, #0
 8016d58:	f002 fb00 	bl	801935c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016d5c:	4b18      	ldr	r3, [pc, #96]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d5e:	2200      	movs	r2, #0
 8016d60:	735a      	strb	r2, [r3, #13]
        break;
 8016d62:	e028      	b.n	8016db6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016d64:	2001      	movs	r0, #1
 8016d66:	f002 faf9 	bl	801935c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016d6a:	4b15      	ldr	r3, [pc, #84]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d6c:	7b5a      	ldrb	r2, [r3, #13]
 8016d6e:	4b14      	ldr	r3, [pc, #80]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d70:	7b1b      	ldrb	r3, [r3, #12]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d01e      	beq.n	8016db4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016d76:	4b12      	ldr	r3, [pc, #72]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d78:	7b1a      	ldrb	r2, [r3, #12]
 8016d7a:	4b11      	ldr	r3, [pc, #68]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d7c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016d7e:	4b10      	ldr	r3, [pc, #64]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d80:	7b5b      	ldrb	r3, [r3, #13]
 8016d82:	4618      	mov	r0, r3
 8016d84:	f000 ff86 	bl	8017c94 <RadioSetPublicNetwork>
        }
        break;
 8016d88:	e014      	b.n	8016db4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016d8a:	2002      	movs	r0, #2
 8016d8c:	f002 fae6 	bl	801935c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016d90:	4b0b      	ldr	r3, [pc, #44]	; (8016dc0 <RadioSetModem+0xb4>)
 8016d92:	2200      	movs	r2, #0
 8016d94:	735a      	strb	r2, [r3, #13]
        break;
 8016d96:	e00e      	b.n	8016db6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016d98:	2002      	movs	r0, #2
 8016d9a:	f002 fadf 	bl	801935c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016d9e:	4b08      	ldr	r3, [pc, #32]	; (8016dc0 <RadioSetModem+0xb4>)
 8016da0:	2200      	movs	r2, #0
 8016da2:	735a      	strb	r2, [r3, #13]
        break;
 8016da4:	e007      	b.n	8016db6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016da6:	2000      	movs	r0, #0
 8016da8:	f002 fad8 	bl	801935c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016dac:	4b04      	ldr	r3, [pc, #16]	; (8016dc0 <RadioSetModem+0xb4>)
 8016dae:	2200      	movs	r2, #0
 8016db0:	735a      	strb	r2, [r3, #13]
        break;
 8016db2:	e000      	b.n	8016db6 <RadioSetModem+0xaa>
        break;
 8016db4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016db6:	bf00      	nop
 8016db8:	3708      	adds	r7, #8
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
 8016dbe:	bf00      	nop
 8016dc0:	20001e3c 	.word	0x20001e3c

08016dc4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f002 fa7f 	bl	80192d0 <SUBGRF_SetRfFrequency>
}
 8016dd2:	bf00      	nop
 8016dd4:	3708      	adds	r7, #8
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}

08016dda <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016dda:	b580      	push	{r7, lr}
 8016ddc:	b090      	sub	sp, #64	; 0x40
 8016dde:	af0a      	add	r7, sp, #40	; 0x28
 8016de0:	60f8      	str	r0, [r7, #12]
 8016de2:	60b9      	str	r1, [r7, #8]
 8016de4:	603b      	str	r3, [r7, #0]
 8016de6:	4613      	mov	r3, r2
 8016de8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016dea:	2301      	movs	r3, #1
 8016dec:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016dee:	2300      	movs	r3, #0
 8016df0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016df6:	f000 fddc 	bl	80179b2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	f7ff ff86 	bl	8016d0c <RadioSetModem>

    RadioSetChannel( freq );
 8016e00:	68f8      	ldr	r0, [r7, #12]
 8016e02:	f7ff ffdf 	bl	8016dc4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016e06:	2301      	movs	r3, #1
 8016e08:	9309      	str	r3, [sp, #36]	; 0x24
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	9308      	str	r3, [sp, #32]
 8016e0e:	2300      	movs	r3, #0
 8016e10:	9307      	str	r3, [sp, #28]
 8016e12:	2300      	movs	r3, #0
 8016e14:	9306      	str	r3, [sp, #24]
 8016e16:	2300      	movs	r3, #0
 8016e18:	9305      	str	r3, [sp, #20]
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	9304      	str	r3, [sp, #16]
 8016e1e:	2300      	movs	r3, #0
 8016e20:	9303      	str	r3, [sp, #12]
 8016e22:	2300      	movs	r3, #0
 8016e24:	9302      	str	r3, [sp, #8]
 8016e26:	2303      	movs	r3, #3
 8016e28:	9301      	str	r3, [sp, #4]
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	9300      	str	r3, [sp, #0]
 8016e2e:	2300      	movs	r3, #0
 8016e30:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016e34:	68b9      	ldr	r1, [r7, #8]
 8016e36:	2000      	movs	r0, #0
 8016e38:	f000 f83c 	bl	8016eb4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016e3c:	2000      	movs	r0, #0
 8016e3e:	f000 fdbf 	bl	80179c0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016e42:	f000 ff55 	bl	8017cf0 <RadioGetWakeupTime>
 8016e46:	4603      	mov	r3, r0
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7ea ff71 	bl	8001d30 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016e4e:	f004 f8bd 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 8016e52:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016e54:	e00d      	b.n	8016e72 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016e56:	2000      	movs	r0, #0
 8016e58:	f000 fe9a 	bl	8017b90 <RadioRssi>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016e60:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	dd02      	ble.n	8016e72 <RadioIsChannelFree+0x98>
        {
            status = false;
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8016e70:	e006      	b.n	8016e80 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016e72:	6938      	ldr	r0, [r7, #16]
 8016e74:	f004 f8bc 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 8016e78:	4602      	mov	r2, r0
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	4293      	cmp	r3, r2
 8016e7e:	d8ea      	bhi.n	8016e56 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016e80:	f000 fd97 	bl	80179b2 <RadioStandby>

    return status;
 8016e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	3718      	adds	r7, #24
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}

08016e8e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016e8e:	b580      	push	{r7, lr}
 8016e90:	b082      	sub	sp, #8
 8016e92:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016e94:	2300      	movs	r3, #0
 8016e96:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016e98:	2300      	movs	r3, #0
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	2100      	movs	r1, #0
 8016e9e:	2000      	movs	r0, #0
 8016ea0:	f002 f9ba 	bl	8019218 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016ea4:	f001 ff6f 	bl	8018d86 <SUBGRF_GetRandom>
 8016ea8:	6078      	str	r0, [r7, #4]

    return rnd;
 8016eaa:	687b      	ldr	r3, [r7, #4]
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3708      	adds	r7, #8
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b08a      	sub	sp, #40	; 0x28
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	60b9      	str	r1, [r7, #8]
 8016ebc:	607a      	str	r2, [r7, #4]
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	73fb      	strb	r3, [r7, #15]
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016ec8:	4ab9      	ldr	r2, [pc, #740]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016eca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ece:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016ed0:	f003 f829 	bl	8019f26 <RFW_DeInit>
    if( rxContinuous == true )
 8016ed4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d001      	beq.n	8016ee0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016edc:	2300      	movs	r3, #0
 8016ede:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016ee0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d004      	beq.n	8016ef2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016ee8:	4ab2      	ldr	r2, [pc, #712]	; (80171b4 <RadioSetRxConfig+0x300>)
 8016eea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016eee:	7013      	strb	r3, [r2, #0]
 8016ef0:	e002      	b.n	8016ef8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016ef2:	4bb0      	ldr	r3, [pc, #704]	; (80171b4 <RadioSetRxConfig+0x300>)
 8016ef4:	22ff      	movs	r2, #255	; 0xff
 8016ef6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016ef8:	7bfb      	ldrb	r3, [r7, #15]
 8016efa:	2b05      	cmp	r3, #5
 8016efc:	d009      	beq.n	8016f12 <RadioSetRxConfig+0x5e>
 8016efe:	2b05      	cmp	r3, #5
 8016f00:	f300 81ca 	bgt.w	8017298 <RadioSetRxConfig+0x3e4>
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	f000 80bf 	beq.w	8017088 <RadioSetRxConfig+0x1d4>
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	f000 8124 	beq.w	8017158 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016f10:	e1c2      	b.n	8017298 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016f12:	2001      	movs	r0, #1
 8016f14:	f002 f87c 	bl	8019010 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016f18:	4ba5      	ldr	r3, [pc, #660]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016f20:	4aa3      	ldr	r2, [pc, #652]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016f26:	4ba2      	ldr	r3, [pc, #648]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f28:	2209      	movs	r2, #9
 8016f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016f2e:	4ba0      	ldr	r3, [pc, #640]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016f34:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016f36:	68b8      	ldr	r0, [r7, #8]
 8016f38:	f002 ff28 	bl	8019d8c <SUBGRF_GetFskBandwidthRegValue>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	461a      	mov	r2, r3
 8016f40:	4b9b      	ldr	r3, [pc, #620]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016f46:	4b9a      	ldr	r3, [pc, #616]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f48:	2200      	movs	r2, #0
 8016f4a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016f4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f4e:	00db      	lsls	r3, r3, #3
 8016f50:	b29a      	uxth	r2, r3
 8016f52:	4b97      	ldr	r3, [pc, #604]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f54:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016f56:	4b96      	ldr	r3, [pc, #600]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f58:	2200      	movs	r2, #0
 8016f5a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016f5c:	4b94      	ldr	r3, [pc, #592]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f5e:	2210      	movs	r2, #16
 8016f60:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016f62:	4b93      	ldr	r3, [pc, #588]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f64:	2200      	movs	r2, #0
 8016f66:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016f68:	4b91      	ldr	r3, [pc, #580]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016f6e:	4b91      	ldr	r3, [pc, #580]	; (80171b4 <RadioSetRxConfig+0x300>)
 8016f70:	781a      	ldrb	r2, [r3, #0]
 8016f72:	4b8f      	ldr	r3, [pc, #572]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f74:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016f76:	4b8e      	ldr	r3, [pc, #568]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f78:	2201      	movs	r2, #1
 8016f7a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016f7c:	4b8c      	ldr	r3, [pc, #560]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8016f7e:	2200      	movs	r2, #0
 8016f80:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016f82:	2005      	movs	r0, #5
 8016f84:	f7ff fec2 	bl	8016d0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016f88:	488b      	ldr	r0, [pc, #556]	; (80171b8 <RadioSetRxConfig+0x304>)
 8016f8a:	f002 fadb 	bl	8019544 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016f8e:	488b      	ldr	r0, [pc, #556]	; (80171bc <RadioSetRxConfig+0x308>)
 8016f90:	f002 fbaa 	bl	80196e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016f94:	4a8a      	ldr	r2, [pc, #552]	; (80171c0 <RadioSetRxConfig+0x30c>)
 8016f96:	f107 031c 	add.w	r3, r7, #28
 8016f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fa2:	f107 031c 	add.w	r3, r7, #28
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f001 fe6b 	bl	8018c82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016fac:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016fb0:	f001 feb6 	bl	8018d20 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016fb4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016fb8:	f000 fe09 	bl	8017bce <RadioRead>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fc6:	f023 0310 	bic.w	r3, r3, #16
 8016fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016fd8:	f000 fde7 	bl	8017baa <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016fdc:	2104      	movs	r1, #4
 8016fde:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016fe2:	f000 fde2 	bl	8017baa <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016fe6:	f640 009b 	movw	r0, #2203	; 0x89b
 8016fea:	f000 fdf0 	bl	8017bce <RadioRead>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ff8:	f023 031c 	bic.w	r3, r3, #28
 8016ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017004:	f043 0308 	orr.w	r3, r3, #8
 8017008:	b2db      	uxtb	r3, r3
 801700a:	4619      	mov	r1, r3
 801700c:	f640 009b 	movw	r0, #2203	; 0x89b
 8017010:	f000 fdcb 	bl	8017baa <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017014:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8017018:	f000 fdd9 	bl	8017bce <RadioRead>
 801701c:	4603      	mov	r3, r0
 801701e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017026:	f023 0318 	bic.w	r3, r3, #24
 801702a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801702e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017032:	f043 0318 	orr.w	r3, r3, #24
 8017036:	b2db      	uxtb	r3, r3
 8017038:	4619      	mov	r1, r3
 801703a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801703e:	f000 fdb4 	bl	8017baa <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017042:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8017046:	f000 fdc2 	bl	8017bce <RadioRead>
 801704a:	4603      	mov	r3, r0
 801704c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801705c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017060:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8017064:	b2db      	uxtb	r3, r3
 8017066:	4619      	mov	r1, r3
 8017068:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801706c:	f000 fd9d 	bl	8017baa <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017070:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017072:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017076:	fb02 f303 	mul.w	r3, r2, r3
 801707a:	461a      	mov	r2, r3
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017082:	4a4b      	ldr	r2, [pc, #300]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017084:	6093      	str	r3, [r2, #8]
            break;
 8017086:	e108      	b.n	801729a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017088:	2000      	movs	r0, #0
 801708a:	f001 ffc1 	bl	8019010 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801708e:	4b48      	ldr	r3, [pc, #288]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017090:	2200      	movs	r2, #0
 8017092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017096:	4a46      	ldr	r2, [pc, #280]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801709c:	4b44      	ldr	r3, [pc, #272]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 801709e:	220b      	movs	r2, #11
 80170a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80170a4:	68b8      	ldr	r0, [r7, #8]
 80170a6:	f002 fe71 	bl	8019d8c <SUBGRF_GetFskBandwidthRegValue>
 80170aa:	4603      	mov	r3, r0
 80170ac:	461a      	mov	r2, r3
 80170ae:	4b40      	ldr	r3, [pc, #256]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80170b4:	4b3e      	ldr	r3, [pc, #248]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170b6:	2200      	movs	r2, #0
 80170b8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80170ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80170bc:	00db      	lsls	r3, r3, #3
 80170be:	b29a      	uxth	r2, r3
 80170c0:	4b3b      	ldr	r3, [pc, #236]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170c2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80170c4:	4b3a      	ldr	r3, [pc, #232]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170c6:	2204      	movs	r2, #4
 80170c8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80170ca:	4b39      	ldr	r3, [pc, #228]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170cc:	2218      	movs	r2, #24
 80170ce:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80170d0:	4b37      	ldr	r3, [pc, #220]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170d2:	2200      	movs	r2, #0
 80170d4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80170d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80170da:	f083 0301 	eor.w	r3, r3, #1
 80170de:	b2db      	uxtb	r3, r3
 80170e0:	461a      	mov	r2, r3
 80170e2:	4b33      	ldr	r3, [pc, #204]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170e4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80170e6:	4b33      	ldr	r3, [pc, #204]	; (80171b4 <RadioSetRxConfig+0x300>)
 80170e8:	781a      	ldrb	r2, [r3, #0]
 80170ea:	4b31      	ldr	r3, [pc, #196]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170ec:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80170ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d003      	beq.n	80170fe <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80170f6:	4b2e      	ldr	r3, [pc, #184]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80170f8:	22f2      	movs	r2, #242	; 0xf2
 80170fa:	75da      	strb	r2, [r3, #23]
 80170fc:	e002      	b.n	8017104 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80170fe:	4b2c      	ldr	r3, [pc, #176]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017100:	2201      	movs	r2, #1
 8017102:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017104:	4b2a      	ldr	r3, [pc, #168]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017106:	2201      	movs	r2, #1
 8017108:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801710a:	f000 fc52 	bl	80179b2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801710e:	2000      	movs	r0, #0
 8017110:	f7ff fdfc 	bl	8016d0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017114:	4828      	ldr	r0, [pc, #160]	; (80171b8 <RadioSetRxConfig+0x304>)
 8017116:	f002 fa15 	bl	8019544 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801711a:	4828      	ldr	r0, [pc, #160]	; (80171bc <RadioSetRxConfig+0x308>)
 801711c:	f002 fae4 	bl	80196e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017120:	4a28      	ldr	r2, [pc, #160]	; (80171c4 <RadioSetRxConfig+0x310>)
 8017122:	f107 0314 	add.w	r3, r7, #20
 8017126:	e892 0003 	ldmia.w	r2, {r0, r1}
 801712a:	e883 0003 	stmia.w	r3, {r0, r1}
 801712e:	f107 0314 	add.w	r3, r7, #20
 8017132:	4618      	mov	r0, r3
 8017134:	f001 fda5 	bl	8018c82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017138:	f240 10ff 	movw	r0, #511	; 0x1ff
 801713c:	f001 fdf0 	bl	8018d20 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017142:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017146:	fb02 f303 	mul.w	r3, r2, r3
 801714a:	461a      	mov	r2, r3
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017152:	4a17      	ldr	r2, [pc, #92]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017154:	6093      	str	r3, [r2, #8]
            break;
 8017156:	e0a0      	b.n	801729a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017158:	2000      	movs	r0, #0
 801715a:	f001 ff59 	bl	8019010 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801715e:	4b14      	ldr	r3, [pc, #80]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017160:	2201      	movs	r2, #1
 8017162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	b2da      	uxtb	r2, r3
 801716a:	4b11      	ldr	r3, [pc, #68]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 801716c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017170:	4a15      	ldr	r2, [pc, #84]	; (80171c8 <RadioSetRxConfig+0x314>)
 8017172:	68bb      	ldr	r3, [r7, #8]
 8017174:	4413      	add	r3, r2
 8017176:	781a      	ldrb	r2, [r3, #0]
 8017178:	4b0d      	ldr	r3, [pc, #52]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 801717a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801717e:	4a0c      	ldr	r2, [pc, #48]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 8017180:	7bbb      	ldrb	r3, [r7, #14]
 8017182:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d105      	bne.n	8017198 <RadioSetRxConfig+0x2e4>
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2b0b      	cmp	r3, #11
 8017190:	d008      	beq.n	80171a4 <RadioSetRxConfig+0x2f0>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	2b0c      	cmp	r3, #12
 8017196:	d005      	beq.n	80171a4 <RadioSetRxConfig+0x2f0>
 8017198:	68bb      	ldr	r3, [r7, #8]
 801719a:	2b01      	cmp	r3, #1
 801719c:	d116      	bne.n	80171cc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	2b0c      	cmp	r3, #12
 80171a2:	d113      	bne.n	80171cc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80171a4:	4b02      	ldr	r3, [pc, #8]	; (80171b0 <RadioSetRxConfig+0x2fc>)
 80171a6:	2201      	movs	r2, #1
 80171a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80171ac:	e012      	b.n	80171d4 <RadioSetRxConfig+0x320>
 80171ae:	bf00      	nop
 80171b0:	20001e3c 	.word	0x20001e3c
 80171b4:	2000013c 	.word	0x2000013c
 80171b8:	20001e74 	.word	0x20001e74
 80171bc:	20001e4a 	.word	0x20001e4a
 80171c0:	0801bc08 	.word	0x0801bc08
 80171c4:	0801bc10 	.word	0x0801bc10
 80171c8:	0801c1ec 	.word	0x0801c1ec
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80171cc:	4b35      	ldr	r3, [pc, #212]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 80171ce:	2200      	movs	r2, #0
 80171d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80171d4:	4b33      	ldr	r3, [pc, #204]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 80171d6:	2201      	movs	r2, #1
 80171d8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80171da:	4b32      	ldr	r3, [pc, #200]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 80171dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80171e0:	2b05      	cmp	r3, #5
 80171e2:	d004      	beq.n	80171ee <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80171e4:	4b2f      	ldr	r3, [pc, #188]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 80171e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80171ea:	2b06      	cmp	r3, #6
 80171ec:	d10a      	bne.n	8017204 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80171ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80171f0:	2b0b      	cmp	r3, #11
 80171f2:	d803      	bhi.n	80171fc <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80171f4:	4b2b      	ldr	r3, [pc, #172]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 80171f6:	220c      	movs	r2, #12
 80171f8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80171fa:	e006      	b.n	801720a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80171fc:	4a29      	ldr	r2, [pc, #164]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 80171fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017200:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017202:	e002      	b.n	801720a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017204:	4a27      	ldr	r2, [pc, #156]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 8017206:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017208:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801720a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801720e:	4b25      	ldr	r3, [pc, #148]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 8017210:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017212:	4b25      	ldr	r3, [pc, #148]	; (80172a8 <RadioSetRxConfig+0x3f4>)
 8017214:	781a      	ldrb	r2, [r3, #0]
 8017216:	4b23      	ldr	r3, [pc, #140]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 8017218:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801721a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801721e:	4b21      	ldr	r3, [pc, #132]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 8017220:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017224:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8017228:	4b1e      	ldr	r3, [pc, #120]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 801722a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801722e:	f000 fbc0 	bl	80179b2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017232:	2001      	movs	r0, #1
 8017234:	f7ff fd6a 	bl	8016d0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017238:	481c      	ldr	r0, [pc, #112]	; (80172ac <RadioSetRxConfig+0x3f8>)
 801723a:	f002 f983 	bl	8019544 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801723e:	481c      	ldr	r0, [pc, #112]	; (80172b0 <RadioSetRxConfig+0x3fc>)
 8017240:	f002 fa52 	bl	80196e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017244:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017246:	b2db      	uxtb	r3, r3
 8017248:	4618      	mov	r0, r3
 801724a:	f001 fef0 	bl	801902e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801724e:	4b15      	ldr	r3, [pc, #84]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 8017250:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017254:	2b01      	cmp	r3, #1
 8017256:	d10d      	bne.n	8017274 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017258:	f240 7036 	movw	r0, #1846	; 0x736
 801725c:	f002 fba0 	bl	80199a0 <SUBGRF_ReadRegister>
 8017260:	4603      	mov	r3, r0
 8017262:	f023 0304 	bic.w	r3, r3, #4
 8017266:	b2db      	uxtb	r3, r3
 8017268:	4619      	mov	r1, r3
 801726a:	f240 7036 	movw	r0, #1846	; 0x736
 801726e:	f002 fb83 	bl	8019978 <SUBGRF_WriteRegister>
 8017272:	e00c      	b.n	801728e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017274:	f240 7036 	movw	r0, #1846	; 0x736
 8017278:	f002 fb92 	bl	80199a0 <SUBGRF_ReadRegister>
 801727c:	4603      	mov	r3, r0
 801727e:	f043 0304 	orr.w	r3, r3, #4
 8017282:	b2db      	uxtb	r3, r3
 8017284:	4619      	mov	r1, r3
 8017286:	f240 7036 	movw	r0, #1846	; 0x736
 801728a:	f002 fb75 	bl	8019978 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801728e:	4b05      	ldr	r3, [pc, #20]	; (80172a4 <RadioSetRxConfig+0x3f0>)
 8017290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017294:	609a      	str	r2, [r3, #8]
            break;
 8017296:	e000      	b.n	801729a <RadioSetRxConfig+0x3e6>
            break;
 8017298:	bf00      	nop
    }
}
 801729a:	bf00      	nop
 801729c:	3728      	adds	r7, #40	; 0x28
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
 80172a2:	bf00      	nop
 80172a4:	20001e3c 	.word	0x20001e3c
 80172a8:	2000013c 	.word	0x2000013c
 80172ac:	20001e74 	.word	0x20001e74
 80172b0:	20001e4a 	.word	0x20001e4a

080172b4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b086      	sub	sp, #24
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	60ba      	str	r2, [r7, #8]
 80172bc:	607b      	str	r3, [r7, #4]
 80172be:	4603      	mov	r3, r0
 80172c0:	73fb      	strb	r3, [r7, #15]
 80172c2:	460b      	mov	r3, r1
 80172c4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80172c6:	f002 fe2e 	bl	8019f26 <RFW_DeInit>
    switch( modem )
 80172ca:	7bfb      	ldrb	r3, [r7, #15]
 80172cc:	2b04      	cmp	r3, #4
 80172ce:	f000 80c7 	beq.w	8017460 <RadioSetTxConfig+0x1ac>
 80172d2:	2b04      	cmp	r3, #4
 80172d4:	f300 80d6 	bgt.w	8017484 <RadioSetTxConfig+0x1d0>
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d002      	beq.n	80172e2 <RadioSetTxConfig+0x2e>
 80172dc:	2b01      	cmp	r3, #1
 80172de:	d059      	beq.n	8017394 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80172e0:	e0d0      	b.n	8017484 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80172e2:	4b74      	ldr	r3, [pc, #464]	; (80174b4 <RadioSetTxConfig+0x200>)
 80172e4:	2200      	movs	r2, #0
 80172e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80172ea:	4a72      	ldr	r2, [pc, #456]	; (80174b4 <RadioSetTxConfig+0x200>)
 80172ec:	6a3b      	ldr	r3, [r7, #32]
 80172ee:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80172f0:	4b70      	ldr	r3, [pc, #448]	; (80174b4 <RadioSetTxConfig+0x200>)
 80172f2:	220b      	movs	r2, #11
 80172f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f002 fd47 	bl	8019d8c <SUBGRF_GetFskBandwidthRegValue>
 80172fe:	4603      	mov	r3, r0
 8017300:	461a      	mov	r2, r3
 8017302:	4b6c      	ldr	r3, [pc, #432]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017308:	4a6a      	ldr	r2, [pc, #424]	; (80174b4 <RadioSetTxConfig+0x200>)
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801730e:	4b69      	ldr	r3, [pc, #420]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017310:	2200      	movs	r2, #0
 8017312:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017316:	00db      	lsls	r3, r3, #3
 8017318:	b29a      	uxth	r2, r3
 801731a:	4b66      	ldr	r3, [pc, #408]	; (80174b4 <RadioSetTxConfig+0x200>)
 801731c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801731e:	4b65      	ldr	r3, [pc, #404]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017320:	2204      	movs	r2, #4
 8017322:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017324:	4b63      	ldr	r3, [pc, #396]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017326:	2218      	movs	r2, #24
 8017328:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801732a:	4b62      	ldr	r3, [pc, #392]	; (80174b4 <RadioSetTxConfig+0x200>)
 801732c:	2200      	movs	r2, #0
 801732e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017330:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017334:	f083 0301 	eor.w	r3, r3, #1
 8017338:	b2db      	uxtb	r3, r3
 801733a:	461a      	mov	r2, r3
 801733c:	4b5d      	ldr	r3, [pc, #372]	; (80174b4 <RadioSetTxConfig+0x200>)
 801733e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017340:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017344:	2b00      	cmp	r3, #0
 8017346:	d003      	beq.n	8017350 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017348:	4b5a      	ldr	r3, [pc, #360]	; (80174b4 <RadioSetTxConfig+0x200>)
 801734a:	22f2      	movs	r2, #242	; 0xf2
 801734c:	75da      	strb	r2, [r3, #23]
 801734e:	e002      	b.n	8017356 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017350:	4b58      	ldr	r3, [pc, #352]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017352:	2201      	movs	r2, #1
 8017354:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017356:	4b57      	ldr	r3, [pc, #348]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017358:	2201      	movs	r2, #1
 801735a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801735c:	f000 fb29 	bl	80179b2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017360:	2000      	movs	r0, #0
 8017362:	f7ff fcd3 	bl	8016d0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017366:	4854      	ldr	r0, [pc, #336]	; (80174b8 <RadioSetTxConfig+0x204>)
 8017368:	f002 f8ec 	bl	8019544 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801736c:	4853      	ldr	r0, [pc, #332]	; (80174bc <RadioSetTxConfig+0x208>)
 801736e:	f002 f9bb 	bl	80196e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017372:	4a53      	ldr	r2, [pc, #332]	; (80174c0 <RadioSetTxConfig+0x20c>)
 8017374:	f107 0310 	add.w	r3, r7, #16
 8017378:	e892 0003 	ldmia.w	r2, {r0, r1}
 801737c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017380:	f107 0310 	add.w	r3, r7, #16
 8017384:	4618      	mov	r0, r3
 8017386:	f001 fc7c 	bl	8018c82 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801738a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801738e:	f001 fcc7 	bl	8018d20 <SUBGRF_SetWhiteningSeed>
            break;
 8017392:	e078      	b.n	8017486 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017394:	4b47      	ldr	r3, [pc, #284]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017396:	2201      	movs	r2, #1
 8017398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801739c:	6a3b      	ldr	r3, [r7, #32]
 801739e:	b2da      	uxtb	r2, r3
 80173a0:	4b44      	ldr	r3, [pc, #272]	; (80174b4 <RadioSetTxConfig+0x200>)
 80173a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80173a6:	4a47      	ldr	r2, [pc, #284]	; (80174c4 <RadioSetTxConfig+0x210>)
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	4413      	add	r3, r2
 80173ac:	781a      	ldrb	r2, [r3, #0]
 80173ae:	4b41      	ldr	r3, [pc, #260]	; (80174b4 <RadioSetTxConfig+0x200>)
 80173b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80173b4:	4a3f      	ldr	r2, [pc, #252]	; (80174b4 <RadioSetTxConfig+0x200>)
 80173b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173ba:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d105      	bne.n	80173d0 <RadioSetTxConfig+0x11c>
 80173c4:	6a3b      	ldr	r3, [r7, #32]
 80173c6:	2b0b      	cmp	r3, #11
 80173c8:	d008      	beq.n	80173dc <RadioSetTxConfig+0x128>
 80173ca:	6a3b      	ldr	r3, [r7, #32]
 80173cc:	2b0c      	cmp	r3, #12
 80173ce:	d005      	beq.n	80173dc <RadioSetTxConfig+0x128>
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	2b01      	cmp	r3, #1
 80173d4:	d107      	bne.n	80173e6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80173d6:	6a3b      	ldr	r3, [r7, #32]
 80173d8:	2b0c      	cmp	r3, #12
 80173da:	d104      	bne.n	80173e6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80173dc:	4b35      	ldr	r3, [pc, #212]	; (80174b4 <RadioSetTxConfig+0x200>)
 80173de:	2201      	movs	r2, #1
 80173e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80173e4:	e003      	b.n	80173ee <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80173e6:	4b33      	ldr	r3, [pc, #204]	; (80174b4 <RadioSetTxConfig+0x200>)
 80173e8:	2200      	movs	r2, #0
 80173ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80173ee:	4b31      	ldr	r3, [pc, #196]	; (80174b4 <RadioSetTxConfig+0x200>)
 80173f0:	2201      	movs	r2, #1
 80173f2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80173f4:	4b2f      	ldr	r3, [pc, #188]	; (80174b4 <RadioSetTxConfig+0x200>)
 80173f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80173fa:	2b05      	cmp	r3, #5
 80173fc:	d004      	beq.n	8017408 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80173fe:	4b2d      	ldr	r3, [pc, #180]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017404:	2b06      	cmp	r3, #6
 8017406:	d10a      	bne.n	801741e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017408:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801740a:	2b0b      	cmp	r3, #11
 801740c:	d803      	bhi.n	8017416 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801740e:	4b29      	ldr	r3, [pc, #164]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017410:	220c      	movs	r2, #12
 8017412:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017414:	e006      	b.n	8017424 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017416:	4a27      	ldr	r2, [pc, #156]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017418:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801741a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801741c:	e002      	b.n	8017424 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801741e:	4a25      	ldr	r2, [pc, #148]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017420:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017422:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017424:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017428:	4b22      	ldr	r3, [pc, #136]	; (80174b4 <RadioSetTxConfig+0x200>)
 801742a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801742c:	4b26      	ldr	r3, [pc, #152]	; (80174c8 <RadioSetTxConfig+0x214>)
 801742e:	781a      	ldrb	r2, [r3, #0]
 8017430:	4b20      	ldr	r3, [pc, #128]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017432:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017434:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017438:	4b1e      	ldr	r3, [pc, #120]	; (80174b4 <RadioSetTxConfig+0x200>)
 801743a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801743e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017442:	4b1c      	ldr	r3, [pc, #112]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017448:	f000 fab3 	bl	80179b2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801744c:	2001      	movs	r0, #1
 801744e:	f7ff fc5d 	bl	8016d0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017452:	4819      	ldr	r0, [pc, #100]	; (80174b8 <RadioSetTxConfig+0x204>)
 8017454:	f002 f876 	bl	8019544 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017458:	4818      	ldr	r0, [pc, #96]	; (80174bc <RadioSetTxConfig+0x208>)
 801745a:	f002 f945 	bl	80196e8 <SUBGRF_SetPacketParams>
            break;
 801745e:	e012      	b.n	8017486 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017460:	2004      	movs	r0, #4
 8017462:	f7ff fc53 	bl	8016d0c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017466:	4b13      	ldr	r3, [pc, #76]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017468:	2202      	movs	r2, #2
 801746a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801746e:	4a11      	ldr	r2, [pc, #68]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017470:	6a3b      	ldr	r3, [r7, #32]
 8017472:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017474:	4b0f      	ldr	r3, [pc, #60]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017476:	2216      	movs	r2, #22
 8017478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801747c:	480e      	ldr	r0, [pc, #56]	; (80174b8 <RadioSetTxConfig+0x204>)
 801747e:	f002 f861 	bl	8019544 <SUBGRF_SetModulationParams>
            break;
 8017482:	e000      	b.n	8017486 <RadioSetTxConfig+0x1d2>
            break;
 8017484:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801748a:	4618      	mov	r0, r3
 801748c:	f002 fb90 	bl	8019bb0 <SUBGRF_SetRfTxPower>
 8017490:	4603      	mov	r3, r0
 8017492:	461a      	mov	r2, r3
 8017494:	4b07      	ldr	r3, [pc, #28]	; (80174b4 <RadioSetTxConfig+0x200>)
 8017496:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801749a:	4b06      	ldr	r3, [pc, #24]	; (80174b4 <RadioSetTxConfig+0x200>)
 801749c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80174a0:	4618      	mov	r0, r3
 80174a2:	f002 fd54 	bl	8019f4e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80174a6:	4a03      	ldr	r2, [pc, #12]	; (80174b4 <RadioSetTxConfig+0x200>)
 80174a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80174aa:	6053      	str	r3, [r2, #4]
}
 80174ac:	bf00      	nop
 80174ae:	3718      	adds	r7, #24
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	20001e3c 	.word	0x20001e3c
 80174b8:	20001e74 	.word	0x20001e74
 80174bc:	20001e4a 	.word	0x20001e4a
 80174c0:	0801bc10 	.word	0x0801bc10
 80174c4:	0801c1ec 	.word	0x0801c1ec
 80174c8:	2000013c 	.word	0x2000013c

080174cc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
    return true;
 80174d4:	2301      	movs	r3, #1
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	370c      	adds	r7, #12
 80174da:	46bd      	mov	sp, r7
 80174dc:	bc80      	pop	{r7}
 80174de:	4770      	bx	lr

080174e0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80174e0:	b480      	push	{r7}
 80174e2:	b085      	sub	sp, #20
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	4603      	mov	r3, r0
 80174e8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80174ea:	2300      	movs	r3, #0
 80174ec:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80174ee:	79fb      	ldrb	r3, [r7, #7]
 80174f0:	2b0a      	cmp	r3, #10
 80174f2:	d83e      	bhi.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
 80174f4:	a201      	add	r2, pc, #4	; (adr r2, 80174fc <RadioGetLoRaBandwidthInHz+0x1c>)
 80174f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174fa:	bf00      	nop
 80174fc:	08017529 	.word	0x08017529
 8017500:	08017539 	.word	0x08017539
 8017504:	08017549 	.word	0x08017549
 8017508:	08017559 	.word	0x08017559
 801750c:	08017561 	.word	0x08017561
 8017510:	08017567 	.word	0x08017567
 8017514:	0801756d 	.word	0x0801756d
 8017518:	08017573 	.word	0x08017573
 801751c:	08017531 	.word	0x08017531
 8017520:	08017541 	.word	0x08017541
 8017524:	08017551 	.word	0x08017551
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017528:	f641 6384 	movw	r3, #7812	; 0x1e84
 801752c:	60fb      	str	r3, [r7, #12]
        break;
 801752e:	e020      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017530:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8017534:	60fb      	str	r3, [r7, #12]
        break;
 8017536:	e01c      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017538:	f643 5309 	movw	r3, #15625	; 0x3d09
 801753c:	60fb      	str	r3, [r7, #12]
        break;
 801753e:	e018      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017540:	f245 1361 	movw	r3, #20833	; 0x5161
 8017544:	60fb      	str	r3, [r7, #12]
        break;
 8017546:	e014      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017548:	f647 2312 	movw	r3, #31250	; 0x7a12
 801754c:	60fb      	str	r3, [r7, #12]
        break;
 801754e:	e010      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017550:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8017554:	60fb      	str	r3, [r7, #12]
        break;
 8017556:	e00c      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017558:	f24f 4324 	movw	r3, #62500	; 0xf424
 801755c:	60fb      	str	r3, [r7, #12]
        break;
 801755e:	e008      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017560:	4b07      	ldr	r3, [pc, #28]	; (8017580 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017562:	60fb      	str	r3, [r7, #12]
        break;
 8017564:	e005      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017566:	4b07      	ldr	r3, [pc, #28]	; (8017584 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017568:	60fb      	str	r3, [r7, #12]
        break;
 801756a:	e002      	b.n	8017572 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801756c:	4b06      	ldr	r3, [pc, #24]	; (8017588 <RadioGetLoRaBandwidthInHz+0xa8>)
 801756e:	60fb      	str	r3, [r7, #12]
        break;
 8017570:	bf00      	nop
    }

    return bandwidthInHz;
 8017572:	68fb      	ldr	r3, [r7, #12]
}
 8017574:	4618      	mov	r0, r3
 8017576:	3714      	adds	r7, #20
 8017578:	46bd      	mov	sp, r7
 801757a:	bc80      	pop	{r7}
 801757c:	4770      	bx	lr
 801757e:	bf00      	nop
 8017580:	0001e848 	.word	0x0001e848
 8017584:	0003d090 	.word	0x0003d090
 8017588:	0007a120 	.word	0x0007a120

0801758c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801758c:	b480      	push	{r7}
 801758e:	b083      	sub	sp, #12
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
 8017594:	4608      	mov	r0, r1
 8017596:	4611      	mov	r1, r2
 8017598:	461a      	mov	r2, r3
 801759a:	4603      	mov	r3, r0
 801759c:	70fb      	strb	r3, [r7, #3]
 801759e:	460b      	mov	r3, r1
 80175a0:	803b      	strh	r3, [r7, #0]
 80175a2:	4613      	mov	r3, r2
 80175a4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80175a6:	883b      	ldrh	r3, [r7, #0]
 80175a8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80175aa:	78ba      	ldrb	r2, [r7, #2]
 80175ac:	f082 0201 	eor.w	r2, r2, #1
 80175b0:	b2d2      	uxtb	r2, r2
 80175b2:	2a00      	cmp	r2, #0
 80175b4:	d001      	beq.n	80175ba <RadioGetGfskTimeOnAirNumerator+0x2e>
 80175b6:	2208      	movs	r2, #8
 80175b8:	e000      	b.n	80175bc <RadioGetGfskTimeOnAirNumerator+0x30>
 80175ba:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80175bc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80175be:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80175c2:	7c3b      	ldrb	r3, [r7, #16]
 80175c4:	7d39      	ldrb	r1, [r7, #20]
 80175c6:	2900      	cmp	r1, #0
 80175c8:	d001      	beq.n	80175ce <RadioGetGfskTimeOnAirNumerator+0x42>
 80175ca:	2102      	movs	r1, #2
 80175cc:	e000      	b.n	80175d0 <RadioGetGfskTimeOnAirNumerator+0x44>
 80175ce:	2100      	movs	r1, #0
 80175d0:	440b      	add	r3, r1
 80175d2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80175d4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80175d6:	4618      	mov	r0, r3
 80175d8:	370c      	adds	r7, #12
 80175da:	46bd      	mov	sp, r7
 80175dc:	bc80      	pop	{r7}
 80175de:	4770      	bx	lr

080175e0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80175e0:	b480      	push	{r7}
 80175e2:	b08b      	sub	sp, #44	; 0x2c
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	60f8      	str	r0, [r7, #12]
 80175e8:	60b9      	str	r1, [r7, #8]
 80175ea:	4611      	mov	r1, r2
 80175ec:	461a      	mov	r2, r3
 80175ee:	460b      	mov	r3, r1
 80175f0:	71fb      	strb	r3, [r7, #7]
 80175f2:	4613      	mov	r3, r2
 80175f4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80175f6:	79fb      	ldrb	r3, [r7, #7]
 80175f8:	3304      	adds	r3, #4
 80175fa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80175fc:	2300      	movs	r3, #0
 80175fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	2b05      	cmp	r3, #5
 8017606:	d002      	beq.n	801760e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017608:	68bb      	ldr	r3, [r7, #8]
 801760a:	2b06      	cmp	r3, #6
 801760c:	d104      	bne.n	8017618 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801760e:	88bb      	ldrh	r3, [r7, #4]
 8017610:	2b0b      	cmp	r3, #11
 8017612:	d801      	bhi.n	8017618 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017614:	230c      	movs	r3, #12
 8017616:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d105      	bne.n	801762a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	2b0b      	cmp	r3, #11
 8017622:	d008      	beq.n	8017636 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017624:	68bb      	ldr	r3, [r7, #8]
 8017626:	2b0c      	cmp	r3, #12
 8017628:	d005      	beq.n	8017636 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	2b01      	cmp	r3, #1
 801762e:	d105      	bne.n	801763c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	2b0c      	cmp	r3, #12
 8017634:	d102      	bne.n	801763c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017636:	2301      	movs	r3, #1
 8017638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801763c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017640:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017642:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017646:	2a00      	cmp	r2, #0
 8017648:	d001      	beq.n	801764e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801764a:	2210      	movs	r2, #16
 801764c:	e000      	b.n	8017650 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801764e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017650:	4413      	add	r3, r2
 8017652:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017658:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801765a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801765e:	2a00      	cmp	r2, #0
 8017660:	d001      	beq.n	8017666 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017662:	2200      	movs	r2, #0
 8017664:	e000      	b.n	8017668 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017666:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017668:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801766a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	2b06      	cmp	r3, #6
 8017670:	d803      	bhi.n	801767a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	009b      	lsls	r3, r3, #2
 8017676:	623b      	str	r3, [r7, #32]
 8017678:	e00e      	b.n	8017698 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801767a:	69fb      	ldr	r3, [r7, #28]
 801767c:	3308      	adds	r3, #8
 801767e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017684:	2b00      	cmp	r3, #0
 8017686:	d004      	beq.n	8017692 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	3b02      	subs	r3, #2
 801768c:	009b      	lsls	r3, r3, #2
 801768e:	623b      	str	r3, [r7, #32]
 8017690:	e002      	b.n	8017698 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017692:	68bb      	ldr	r3, [r7, #8]
 8017694:	009b      	lsls	r3, r3, #2
 8017696:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017698:	69fb      	ldr	r3, [r7, #28]
 801769a:	2b00      	cmp	r3, #0
 801769c:	da01      	bge.n	80176a2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801769e:	2300      	movs	r3, #0
 80176a0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80176a2:	69fa      	ldr	r2, [r7, #28]
 80176a4:	6a3b      	ldr	r3, [r7, #32]
 80176a6:	4413      	add	r3, r2
 80176a8:	1e5a      	subs	r2, r3, #1
 80176aa:	6a3b      	ldr	r3, [r7, #32]
 80176ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80176b0:	697a      	ldr	r2, [r7, #20]
 80176b2:	fb03 f202 	mul.w	r2, r3, r2
 80176b6:	88bb      	ldrh	r3, [r7, #4]
 80176b8:	4413      	add	r3, r2
    int32_t intermediate =
 80176ba:	330c      	adds	r3, #12
 80176bc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	2b06      	cmp	r3, #6
 80176c2:	d802      	bhi.n	80176ca <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80176c4:	69bb      	ldr	r3, [r7, #24]
 80176c6:	3302      	adds	r3, #2
 80176c8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80176ca:	69bb      	ldr	r3, [r7, #24]
 80176cc:	009b      	lsls	r3, r3, #2
 80176ce:	1c5a      	adds	r2, r3, #1
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	3b02      	subs	r3, #2
 80176d4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80176d8:	4618      	mov	r0, r3
 80176da:	372c      	adds	r7, #44	; 0x2c
 80176dc:	46bd      	mov	sp, r7
 80176de:	bc80      	pop	{r7}
 80176e0:	4770      	bx	lr
	...

080176e4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b08a      	sub	sp, #40	; 0x28
 80176e8:	af04      	add	r7, sp, #16
 80176ea:	60b9      	str	r1, [r7, #8]
 80176ec:	607a      	str	r2, [r7, #4]
 80176ee:	461a      	mov	r2, r3
 80176f0:	4603      	mov	r3, r0
 80176f2:	73fb      	strb	r3, [r7, #15]
 80176f4:	4613      	mov	r3, r2
 80176f6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80176f8:	2300      	movs	r3, #0
 80176fa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80176fc:	2301      	movs	r3, #1
 80176fe:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017700:	7bfb      	ldrb	r3, [r7, #15]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d002      	beq.n	801770c <RadioTimeOnAir+0x28>
 8017706:	2b01      	cmp	r3, #1
 8017708:	d017      	beq.n	801773a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801770a:	e035      	b.n	8017778 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801770c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017710:	8c3a      	ldrh	r2, [r7, #32]
 8017712:	7bb9      	ldrb	r1, [r7, #14]
 8017714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017718:	9301      	str	r3, [sp, #4]
 801771a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801771e:	9300      	str	r3, [sp, #0]
 8017720:	4603      	mov	r3, r0
 8017722:	6878      	ldr	r0, [r7, #4]
 8017724:	f7ff ff32 	bl	801758c <RadioGetGfskTimeOnAirNumerator>
 8017728:	4603      	mov	r3, r0
 801772a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801772e:	fb02 f303 	mul.w	r3, r2, r3
 8017732:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	613b      	str	r3, [r7, #16]
        break;
 8017738:	e01e      	b.n	8017778 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801773a:	8c39      	ldrh	r1, [r7, #32]
 801773c:	7bba      	ldrb	r2, [r7, #14]
 801773e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017742:	9302      	str	r3, [sp, #8]
 8017744:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017748:	9301      	str	r3, [sp, #4]
 801774a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801774e:	9300      	str	r3, [sp, #0]
 8017750:	460b      	mov	r3, r1
 8017752:	6879      	ldr	r1, [r7, #4]
 8017754:	68b8      	ldr	r0, [r7, #8]
 8017756:	f7ff ff43 	bl	80175e0 <RadioGetLoRaTimeOnAirNumerator>
 801775a:	4603      	mov	r3, r0
 801775c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017760:	fb02 f303 	mul.w	r3, r2, r3
 8017764:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017766:	4a0a      	ldr	r2, [pc, #40]	; (8017790 <RadioTimeOnAir+0xac>)
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	4413      	add	r3, r2
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	4618      	mov	r0, r3
 8017770:	f7ff feb6 	bl	80174e0 <RadioGetLoRaBandwidthInHz>
 8017774:	6138      	str	r0, [r7, #16]
        break;
 8017776:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017778:	697a      	ldr	r2, [r7, #20]
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	4413      	add	r3, r2
 801777e:	1e5a      	subs	r2, r3, #1
 8017780:	693b      	ldr	r3, [r7, #16]
 8017782:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017786:	4618      	mov	r0, r3
 8017788:	3718      	adds	r7, #24
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}
 801778e:	bf00      	nop
 8017790:	0801c1ec 	.word	0x0801c1ec

08017794 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b084      	sub	sp, #16
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	460b      	mov	r3, r1
 801779e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80177a0:	2300      	movs	r3, #0
 80177a2:	2200      	movs	r2, #0
 80177a4:	f240 2101 	movw	r1, #513	; 0x201
 80177a8:	f240 2001 	movw	r0, #513	; 0x201
 80177ac:	f001 fd34 	bl	8019218 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80177b0:	4b71      	ldr	r3, [pc, #452]	; (8017978 <RadioSend+0x1e4>)
 80177b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80177b6:	2101      	movs	r1, #1
 80177b8:	4618      	mov	r0, r3
 80177ba:	f002 f9d1 	bl	8019b60 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80177be:	4b6e      	ldr	r3, [pc, #440]	; (8017978 <RadioSend+0x1e4>)
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	2b01      	cmp	r3, #1
 80177c4:	d112      	bne.n	80177ec <RadioSend+0x58>
 80177c6:	4b6c      	ldr	r3, [pc, #432]	; (8017978 <RadioSend+0x1e4>)
 80177c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80177cc:	2b06      	cmp	r3, #6
 80177ce:	d10d      	bne.n	80177ec <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80177d0:	f640 0089 	movw	r0, #2185	; 0x889
 80177d4:	f002 f8e4 	bl	80199a0 <SUBGRF_ReadRegister>
 80177d8:	4603      	mov	r3, r0
 80177da:	f023 0304 	bic.w	r3, r3, #4
 80177de:	b2db      	uxtb	r3, r3
 80177e0:	4619      	mov	r1, r3
 80177e2:	f640 0089 	movw	r0, #2185	; 0x889
 80177e6:	f002 f8c7 	bl	8019978 <SUBGRF_WriteRegister>
 80177ea:	e00c      	b.n	8017806 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80177ec:	f640 0089 	movw	r0, #2185	; 0x889
 80177f0:	f002 f8d6 	bl	80199a0 <SUBGRF_ReadRegister>
 80177f4:	4603      	mov	r3, r0
 80177f6:	f043 0304 	orr.w	r3, r3, #4
 80177fa:	b2db      	uxtb	r3, r3
 80177fc:	4619      	mov	r1, r3
 80177fe:	f640 0089 	movw	r0, #2185	; 0x889
 8017802:	f002 f8b9 	bl	8019978 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017806:	4b5c      	ldr	r3, [pc, #368]	; (8017978 <RadioSend+0x1e4>)
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	2b04      	cmp	r3, #4
 801780c:	f200 80a7 	bhi.w	801795e <RadioSend+0x1ca>
 8017810:	a201      	add	r2, pc, #4	; (adr r2, 8017818 <RadioSend+0x84>)
 8017812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017816:	bf00      	nop
 8017818:	08017847 	.word	0x08017847
 801781c:	0801782d 	.word	0x0801782d
 8017820:	08017847 	.word	0x08017847
 8017824:	080178a7 	.word	0x080178a7
 8017828:	080178c7 	.word	0x080178c7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801782c:	4a52      	ldr	r2, [pc, #328]	; (8017978 <RadioSend+0x1e4>)
 801782e:	78fb      	ldrb	r3, [r7, #3]
 8017830:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017832:	4852      	ldr	r0, [pc, #328]	; (801797c <RadioSend+0x1e8>)
 8017834:	f001 ff58 	bl	80196e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017838:	78fb      	ldrb	r3, [r7, #3]
 801783a:	2200      	movs	r2, #0
 801783c:	4619      	mov	r1, r3
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f001 fa0c 	bl	8018c5c <SUBGRF_SendPayload>
            break;
 8017844:	e08c      	b.n	8017960 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017846:	f002 fb74 	bl	8019f32 <RFW_Is_Init>
 801784a:	4603      	mov	r3, r0
 801784c:	2b01      	cmp	r3, #1
 801784e:	d11d      	bne.n	801788c <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017850:	f107 020d 	add.w	r2, r7, #13
 8017854:	78fb      	ldrb	r3, [r7, #3]
 8017856:	4619      	mov	r1, r3
 8017858:	6878      	ldr	r0, [r7, #4]
 801785a:	f002 fb82 	bl	8019f62 <RFW_TransmitInit>
 801785e:	4603      	mov	r3, r0
 8017860:	2b00      	cmp	r3, #0
 8017862:	d10c      	bne.n	801787e <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017864:	7b7a      	ldrb	r2, [r7, #13]
 8017866:	4b44      	ldr	r3, [pc, #272]	; (8017978 <RadioSend+0x1e4>)
 8017868:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801786a:	4844      	ldr	r0, [pc, #272]	; (801797c <RadioSend+0x1e8>)
 801786c:	f001 ff3c 	bl	80196e8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017870:	7b7b      	ldrb	r3, [r7, #13]
 8017872:	2200      	movs	r2, #0
 8017874:	4619      	mov	r1, r3
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	f001 f9f0 	bl	8018c5c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801787c:	e070      	b.n	8017960 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801787e:	4b40      	ldr	r3, [pc, #256]	; (8017980 <RadioSend+0x1ec>)
 8017880:	2201      	movs	r2, #1
 8017882:	2100      	movs	r1, #0
 8017884:	2002      	movs	r0, #2
 8017886:	f003 fc91 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 801788a:	e072      	b.n	8017972 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801788c:	4a3a      	ldr	r2, [pc, #232]	; (8017978 <RadioSend+0x1e4>)
 801788e:	78fb      	ldrb	r3, [r7, #3]
 8017890:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017892:	483a      	ldr	r0, [pc, #232]	; (801797c <RadioSend+0x1e8>)
 8017894:	f001 ff28 	bl	80196e8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017898:	78fb      	ldrb	r3, [r7, #3]
 801789a:	2200      	movs	r2, #0
 801789c:	4619      	mov	r1, r3
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	f001 f9dc 	bl	8018c5c <SUBGRF_SendPayload>
            break;
 80178a4:	e05c      	b.n	8017960 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80178a6:	4b34      	ldr	r3, [pc, #208]	; (8017978 <RadioSend+0x1e4>)
 80178a8:	2202      	movs	r2, #2
 80178aa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80178ac:	4a32      	ldr	r2, [pc, #200]	; (8017978 <RadioSend+0x1e4>)
 80178ae:	78fb      	ldrb	r3, [r7, #3]
 80178b0:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178b2:	4832      	ldr	r0, [pc, #200]	; (801797c <RadioSend+0x1e8>)
 80178b4:	f001 ff18 	bl	80196e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80178b8:	78fb      	ldrb	r3, [r7, #3]
 80178ba:	2200      	movs	r2, #0
 80178bc:	4619      	mov	r1, r3
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f001 f9cc 	bl	8018c5c <SUBGRF_SendPayload>
            break;
 80178c4:	e04c      	b.n	8017960 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80178c6:	78fb      	ldrb	r3, [r7, #3]
 80178c8:	461a      	mov	r2, r3
 80178ca:	6879      	ldr	r1, [r7, #4]
 80178cc:	482d      	ldr	r0, [pc, #180]	; (8017984 <RadioSend+0x1f0>)
 80178ce:	f000 fcbc 	bl	801824a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80178d2:	4b29      	ldr	r3, [pc, #164]	; (8017978 <RadioSend+0x1e4>)
 80178d4:	2202      	movs	r2, #2
 80178d6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80178d8:	78fb      	ldrb	r3, [r7, #3]
 80178da:	3301      	adds	r3, #1
 80178dc:	b2da      	uxtb	r2, r3
 80178de:	4b26      	ldr	r3, [pc, #152]	; (8017978 <RadioSend+0x1e4>)
 80178e0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178e2:	4826      	ldr	r0, [pc, #152]	; (801797c <RadioSend+0x1e8>)
 80178e4:	f001 ff00 	bl	80196e8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80178e8:	2100      	movs	r1, #0
 80178ea:	20f1      	movs	r0, #241	; 0xf1
 80178ec:	f000 f95d 	bl	8017baa <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80178f0:	2100      	movs	r1, #0
 80178f2:	20f0      	movs	r0, #240	; 0xf0
 80178f4:	f000 f959 	bl	8017baa <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80178f8:	4b1f      	ldr	r3, [pc, #124]	; (8017978 <RadioSend+0x1e4>)
 80178fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80178fc:	2b64      	cmp	r3, #100	; 0x64
 80178fe:	d108      	bne.n	8017912 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017900:	2170      	movs	r1, #112	; 0x70
 8017902:	20f3      	movs	r0, #243	; 0xf3
 8017904:	f000 f951 	bl	8017baa <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017908:	211d      	movs	r1, #29
 801790a:	20f2      	movs	r0, #242	; 0xf2
 801790c:	f000 f94d 	bl	8017baa <RadioWrite>
 8017910:	e007      	b.n	8017922 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017912:	21e1      	movs	r1, #225	; 0xe1
 8017914:	20f3      	movs	r0, #243	; 0xf3
 8017916:	f000 f948 	bl	8017baa <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801791a:	2104      	movs	r1, #4
 801791c:	20f2      	movs	r0, #242	; 0xf2
 801791e:	f000 f944 	bl	8017baa <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017922:	78fb      	ldrb	r3, [r7, #3]
 8017924:	b29b      	uxth	r3, r3
 8017926:	00db      	lsls	r3, r3, #3
 8017928:	b29b      	uxth	r3, r3
 801792a:	3302      	adds	r3, #2
 801792c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801792e:	89fb      	ldrh	r3, [r7, #14]
 8017930:	0a1b      	lsrs	r3, r3, #8
 8017932:	b29b      	uxth	r3, r3
 8017934:	b2db      	uxtb	r3, r3
 8017936:	4619      	mov	r1, r3
 8017938:	20f4      	movs	r0, #244	; 0xf4
 801793a:	f000 f936 	bl	8017baa <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801793e:	89fb      	ldrh	r3, [r7, #14]
 8017940:	b2db      	uxtb	r3, r3
 8017942:	4619      	mov	r1, r3
 8017944:	20f5      	movs	r0, #245	; 0xf5
 8017946:	f000 f930 	bl	8017baa <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801794a:	78fb      	ldrb	r3, [r7, #3]
 801794c:	3301      	adds	r3, #1
 801794e:	b2db      	uxtb	r3, r3
 8017950:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017954:	4619      	mov	r1, r3
 8017956:	480b      	ldr	r0, [pc, #44]	; (8017984 <RadioSend+0x1f0>)
 8017958:	f001 f980 	bl	8018c5c <SUBGRF_SendPayload>
            break;
 801795c:	e000      	b.n	8017960 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801795e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017960:	4b05      	ldr	r3, [pc, #20]	; (8017978 <RadioSend+0x1e4>)
 8017962:	685b      	ldr	r3, [r3, #4]
 8017964:	4619      	mov	r1, r3
 8017966:	4808      	ldr	r0, [pc, #32]	; (8017988 <RadioSend+0x1f4>)
 8017968:	f003 fa86 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801796c:	4806      	ldr	r0, [pc, #24]	; (8017988 <RadioSend+0x1f4>)
 801796e:	f003 f9a5 	bl	801acbc <UTIL_TIMER_Start>
}
 8017972:	3710      	adds	r7, #16
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}
 8017978:	20001e3c 	.word	0x20001e3c
 801797c:	20001e4a 	.word	0x20001e4a
 8017980:	0801bc18 	.word	0x0801bc18
 8017984:	20001d38 	.word	0x20001d38
 8017988:	20001e98 	.word	0x20001e98

0801798c <RadioSleep>:

static void RadioSleep( void )
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b082      	sub	sp, #8
 8017990:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017992:	2300      	movs	r3, #0
 8017994:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017996:	793b      	ldrb	r3, [r7, #4]
 8017998:	f043 0304 	orr.w	r3, r3, #4
 801799c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801799e:	7938      	ldrb	r0, [r7, #4]
 80179a0:	f001 fa38 	bl	8018e14 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80179a4:	2002      	movs	r0, #2
 80179a6:	f7ea f9c3 	bl	8001d30 <HAL_Delay>
}
 80179aa:	bf00      	nop
 80179ac:	3708      	adds	r7, #8
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd80      	pop	{r7, pc}

080179b2 <RadioStandby>:

static void RadioStandby( void )
{
 80179b2:	b580      	push	{r7, lr}
 80179b4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80179b6:	2000      	movs	r0, #0
 80179b8:	f001 fa5e 	bl	8018e78 <SUBGRF_SetStandby>
}
 80179bc:	bf00      	nop
 80179be:	bd80      	pop	{r7, pc}

080179c0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 80179c8:	f002 fab3 	bl	8019f32 <RFW_Is_Init>
 80179cc:	4603      	mov	r3, r0
 80179ce:	2b01      	cmp	r3, #1
 80179d0:	d102      	bne.n	80179d8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80179d2:	f002 fad6 	bl	8019f82 <RFW_ReceiveInit>
 80179d6:	e007      	b.n	80179e8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80179d8:	2300      	movs	r3, #0
 80179da:	2200      	movs	r2, #0
 80179dc:	f240 2162 	movw	r1, #610	; 0x262
 80179e0:	f240 2062 	movw	r0, #610	; 0x262
 80179e4:	f001 fc18 	bl	8019218 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d006      	beq.n	80179fc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80179ee:	6879      	ldr	r1, [r7, #4]
 80179f0:	4811      	ldr	r0, [pc, #68]	; (8017a38 <RadioRx+0x78>)
 80179f2:	f003 fa41 	bl	801ae78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80179f6:	4810      	ldr	r0, [pc, #64]	; (8017a38 <RadioRx+0x78>)
 80179f8:	f003 f960 	bl	801acbc <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80179fc:	4b0f      	ldr	r3, [pc, #60]	; (8017a3c <RadioRx+0x7c>)
 80179fe:	2200      	movs	r2, #0
 8017a00:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a02:	4b0e      	ldr	r3, [pc, #56]	; (8017a3c <RadioRx+0x7c>)
 8017a04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017a08:	2100      	movs	r1, #0
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f002 f8a8 	bl	8019b60 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017a10:	4b0a      	ldr	r3, [pc, #40]	; (8017a3c <RadioRx+0x7c>)
 8017a12:	785b      	ldrb	r3, [r3, #1]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d004      	beq.n	8017a22 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017a18:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017a1c:	f001 fa68 	bl	8018ef0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017a20:	e005      	b.n	8017a2e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017a22:	4b06      	ldr	r3, [pc, #24]	; (8017a3c <RadioRx+0x7c>)
 8017a24:	689b      	ldr	r3, [r3, #8]
 8017a26:	019b      	lsls	r3, r3, #6
 8017a28:	4618      	mov	r0, r3
 8017a2a:	f001 fa61 	bl	8018ef0 <SUBGRF_SetRx>
}
 8017a2e:	bf00      	nop
 8017a30:	3708      	adds	r7, #8
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}
 8017a36:	bf00      	nop
 8017a38:	20001eb0 	.word	0x20001eb0
 8017a3c:	20001e3c 	.word	0x20001e3c

08017a40 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8017a48:	f002 fa73 	bl	8019f32 <RFW_Is_Init>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	2b01      	cmp	r3, #1
 8017a50:	d102      	bne.n	8017a58 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8017a52:	f002 fa96 	bl	8019f82 <RFW_ReceiveInit>
 8017a56:	e007      	b.n	8017a68 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017a58:	2300      	movs	r3, #0
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	f240 2162 	movw	r1, #610	; 0x262
 8017a60:	f240 2062 	movw	r0, #610	; 0x262
 8017a64:	f001 fbd8 	bl	8019218 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d006      	beq.n	8017a7c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017a6e:	6879      	ldr	r1, [r7, #4]
 8017a70:	4811      	ldr	r0, [pc, #68]	; (8017ab8 <RadioRxBoosted+0x78>)
 8017a72:	f003 fa01 	bl	801ae78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017a76:	4810      	ldr	r0, [pc, #64]	; (8017ab8 <RadioRxBoosted+0x78>)
 8017a78:	f003 f920 	bl	801acbc <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017a7c:	4b0f      	ldr	r3, [pc, #60]	; (8017abc <RadioRxBoosted+0x7c>)
 8017a7e:	2200      	movs	r2, #0
 8017a80:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a82:	4b0e      	ldr	r3, [pc, #56]	; (8017abc <RadioRxBoosted+0x7c>)
 8017a84:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017a88:	2100      	movs	r1, #0
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f002 f868 	bl	8019b60 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017a90:	4b0a      	ldr	r3, [pc, #40]	; (8017abc <RadioRxBoosted+0x7c>)
 8017a92:	785b      	ldrb	r3, [r3, #1]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d004      	beq.n	8017aa2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017a98:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017a9c:	f001 fa48 	bl	8018f30 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017aa0:	e005      	b.n	8017aae <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017aa2:	4b06      	ldr	r3, [pc, #24]	; (8017abc <RadioRxBoosted+0x7c>)
 8017aa4:	689b      	ldr	r3, [r3, #8]
 8017aa6:	019b      	lsls	r3, r3, #6
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f001 fa41 	bl	8018f30 <SUBGRF_SetRxBoosted>
}
 8017aae:	bf00      	nop
 8017ab0:	3708      	adds	r7, #8
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}
 8017ab6:	bf00      	nop
 8017ab8:	20001eb0 	.word	0x20001eb0
 8017abc:	20001e3c 	.word	0x20001e3c

08017ac0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b082      	sub	sp, #8
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
 8017ac8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	005a      	lsls	r2, r3, #1
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	4413      	add	r3, r2
 8017ad2:	4a0c      	ldr	r2, [pc, #48]	; (8017b04 <RadioSetRxDutyCycle+0x44>)
 8017ad4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	2200      	movs	r2, #0
 8017ada:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017ade:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017ae2:	f001 fb99 	bl	8019218 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017ae6:	4b07      	ldr	r3, [pc, #28]	; (8017b04 <RadioSetRxDutyCycle+0x44>)
 8017ae8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017aec:	2100      	movs	r1, #0
 8017aee:	4618      	mov	r0, r3
 8017af0:	f002 f836 	bl	8019b60 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017af4:	6839      	ldr	r1, [r7, #0]
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f001 fa3e 	bl	8018f78 <SUBGRF_SetRxDutyCycle>
}
 8017afc:	bf00      	nop
 8017afe:	3708      	adds	r7, #8
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}
 8017b04:	20001e3c 	.word	0x20001e3c

08017b08 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017b0c:	4b09      	ldr	r3, [pc, #36]	; (8017b34 <RadioStartCad+0x2c>)
 8017b0e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017b12:	2100      	movs	r1, #0
 8017b14:	4618      	mov	r0, r3
 8017b16:	f002 f823 	bl	8019b60 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017b22:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8017b26:	f001 fb77 	bl	8019218 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017b2a:	f001 fa51 	bl	8018fd0 <SUBGRF_SetCad>
}
 8017b2e:	bf00      	nop
 8017b30:	bd80      	pop	{r7, pc}
 8017b32:	bf00      	nop
 8017b34:	20001e3c 	.word	0x20001e3c

08017b38 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b084      	sub	sp, #16
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	460b      	mov	r3, r1
 8017b42:	70fb      	strb	r3, [r7, #3]
 8017b44:	4613      	mov	r3, r2
 8017b46:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017b48:	883b      	ldrh	r3, [r7, #0]
 8017b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017b4e:	fb02 f303 	mul.w	r3, r2, r3
 8017b52:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f001 fbbb 	bl	80192d0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b5e:	4618      	mov	r0, r3
 8017b60:	f002 f826 	bl	8019bb0 <SUBGRF_SetRfTxPower>
 8017b64:	4603      	mov	r3, r0
 8017b66:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017b68:	7afb      	ldrb	r3, [r7, #11]
 8017b6a:	2101      	movs	r1, #1
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f001 fff7 	bl	8019b60 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017b72:	f001 fa3b 	bl	8018fec <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017b76:	68f9      	ldr	r1, [r7, #12]
 8017b78:	4804      	ldr	r0, [pc, #16]	; (8017b8c <RadioSetTxContinuousWave+0x54>)
 8017b7a:	f003 f97d 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017b7e:	4803      	ldr	r0, [pc, #12]	; (8017b8c <RadioSetTxContinuousWave+0x54>)
 8017b80:	f003 f89c 	bl	801acbc <UTIL_TIMER_Start>
}
 8017b84:	bf00      	nop
 8017b86:	3710      	adds	r7, #16
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	bd80      	pop	{r7, pc}
 8017b8c:	20001e98 	.word	0x20001e98

08017b90 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	4603      	mov	r3, r0
 8017b98:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017b9a:	f001 fe5a 	bl	8019852 <SUBGRF_GetRssiInst>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	b21b      	sxth	r3, r3
}
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	3708      	adds	r7, #8
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	bd80      	pop	{r7, pc}

08017baa <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017baa:	b580      	push	{r7, lr}
 8017bac:	b082      	sub	sp, #8
 8017bae:	af00      	add	r7, sp, #0
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	460a      	mov	r2, r1
 8017bb4:	80fb      	strh	r3, [r7, #6]
 8017bb6:	4613      	mov	r3, r2
 8017bb8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017bba:	797a      	ldrb	r2, [r7, #5]
 8017bbc:	88fb      	ldrh	r3, [r7, #6]
 8017bbe:	4611      	mov	r1, r2
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f001 fed9 	bl	8019978 <SUBGRF_WriteRegister>
}
 8017bc6:	bf00      	nop
 8017bc8:	3708      	adds	r7, #8
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}

08017bce <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017bce:	b580      	push	{r7, lr}
 8017bd0:	b082      	sub	sp, #8
 8017bd2:	af00      	add	r7, sp, #0
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017bd8:	88fb      	ldrh	r3, [r7, #6]
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f001 fee0 	bl	80199a0 <SUBGRF_ReadRegister>
 8017be0:	4603      	mov	r3, r0
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3708      	adds	r7, #8
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}

08017bea <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017bea:	b580      	push	{r7, lr}
 8017bec:	b082      	sub	sp, #8
 8017bee:	af00      	add	r7, sp, #0
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	6039      	str	r1, [r7, #0]
 8017bf4:	80fb      	strh	r3, [r7, #6]
 8017bf6:	4613      	mov	r3, r2
 8017bf8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017bfa:	797b      	ldrb	r3, [r7, #5]
 8017bfc:	b29a      	uxth	r2, r3
 8017bfe:	88fb      	ldrh	r3, [r7, #6]
 8017c00:	6839      	ldr	r1, [r7, #0]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f001 fee0 	bl	80199c8 <SUBGRF_WriteRegisters>
}
 8017c08:	bf00      	nop
 8017c0a:	3708      	adds	r7, #8
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b082      	sub	sp, #8
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	4603      	mov	r3, r0
 8017c18:	6039      	str	r1, [r7, #0]
 8017c1a:	80fb      	strh	r3, [r7, #6]
 8017c1c:	4613      	mov	r3, r2
 8017c1e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017c20:	797b      	ldrb	r3, [r7, #5]
 8017c22:	b29a      	uxth	r2, r3
 8017c24:	88fb      	ldrh	r3, [r7, #6]
 8017c26:	6839      	ldr	r1, [r7, #0]
 8017c28:	4618      	mov	r0, r3
 8017c2a:	f001 feef 	bl	8019a0c <SUBGRF_ReadRegisters>
}
 8017c2e:	bf00      	nop
 8017c30:	3708      	adds	r7, #8
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
	...

08017c38 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b082      	sub	sp, #8
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	4603      	mov	r3, r0
 8017c40:	460a      	mov	r2, r1
 8017c42:	71fb      	strb	r3, [r7, #7]
 8017c44:	4613      	mov	r3, r2
 8017c46:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017c48:	79fb      	ldrb	r3, [r7, #7]
 8017c4a:	2b01      	cmp	r3, #1
 8017c4c:	d10a      	bne.n	8017c64 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017c4e:	4a0e      	ldr	r2, [pc, #56]	; (8017c88 <RadioSetMaxPayloadLength+0x50>)
 8017c50:	79bb      	ldrb	r3, [r7, #6]
 8017c52:	7013      	strb	r3, [r2, #0]
 8017c54:	4b0c      	ldr	r3, [pc, #48]	; (8017c88 <RadioSetMaxPayloadLength+0x50>)
 8017c56:	781a      	ldrb	r2, [r3, #0]
 8017c58:	4b0c      	ldr	r3, [pc, #48]	; (8017c8c <RadioSetMaxPayloadLength+0x54>)
 8017c5a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017c5c:	480c      	ldr	r0, [pc, #48]	; (8017c90 <RadioSetMaxPayloadLength+0x58>)
 8017c5e:	f001 fd43 	bl	80196e8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017c62:	e00d      	b.n	8017c80 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017c64:	4b09      	ldr	r3, [pc, #36]	; (8017c8c <RadioSetMaxPayloadLength+0x54>)
 8017c66:	7d5b      	ldrb	r3, [r3, #21]
 8017c68:	2b01      	cmp	r3, #1
 8017c6a:	d109      	bne.n	8017c80 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017c6c:	4a06      	ldr	r2, [pc, #24]	; (8017c88 <RadioSetMaxPayloadLength+0x50>)
 8017c6e:	79bb      	ldrb	r3, [r7, #6]
 8017c70:	7013      	strb	r3, [r2, #0]
 8017c72:	4b05      	ldr	r3, [pc, #20]	; (8017c88 <RadioSetMaxPayloadLength+0x50>)
 8017c74:	781a      	ldrb	r2, [r3, #0]
 8017c76:	4b05      	ldr	r3, [pc, #20]	; (8017c8c <RadioSetMaxPayloadLength+0x54>)
 8017c78:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017c7a:	4805      	ldr	r0, [pc, #20]	; (8017c90 <RadioSetMaxPayloadLength+0x58>)
 8017c7c:	f001 fd34 	bl	80196e8 <SUBGRF_SetPacketParams>
}
 8017c80:	bf00      	nop
 8017c82:	3708      	adds	r7, #8
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}
 8017c88:	2000013c 	.word	0x2000013c
 8017c8c:	20001e3c 	.word	0x20001e3c
 8017c90:	20001e4a 	.word	0x20001e4a

08017c94 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b082      	sub	sp, #8
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017c9e:	4a13      	ldr	r2, [pc, #76]	; (8017cec <RadioSetPublicNetwork+0x58>)
 8017ca0:	79fb      	ldrb	r3, [r7, #7]
 8017ca2:	7313      	strb	r3, [r2, #12]
 8017ca4:	4b11      	ldr	r3, [pc, #68]	; (8017cec <RadioSetPublicNetwork+0x58>)
 8017ca6:	7b1a      	ldrb	r2, [r3, #12]
 8017ca8:	4b10      	ldr	r3, [pc, #64]	; (8017cec <RadioSetPublicNetwork+0x58>)
 8017caa:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017cac:	2001      	movs	r0, #1
 8017cae:	f7ff f82d 	bl	8016d0c <RadioSetModem>
    if( enable == true )
 8017cb2:	79fb      	ldrb	r3, [r7, #7]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d00a      	beq.n	8017cce <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017cb8:	2134      	movs	r1, #52	; 0x34
 8017cba:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017cbe:	f001 fe5b 	bl	8019978 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017cc2:	2144      	movs	r1, #68	; 0x44
 8017cc4:	f240 7041 	movw	r0, #1857	; 0x741
 8017cc8:	f001 fe56 	bl	8019978 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017ccc:	e009      	b.n	8017ce2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017cce:	2114      	movs	r1, #20
 8017cd0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017cd4:	f001 fe50 	bl	8019978 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017cd8:	2124      	movs	r1, #36	; 0x24
 8017cda:	f240 7041 	movw	r0, #1857	; 0x741
 8017cde:	f001 fe4b 	bl	8019978 <SUBGRF_WriteRegister>
}
 8017ce2:	bf00      	nop
 8017ce4:	3708      	adds	r7, #8
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}
 8017cea:	bf00      	nop
 8017cec:	20001e3c 	.word	0x20001e3c

08017cf0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017cf4:	f001 ff90 	bl	8019c18 <SUBGRF_GetRadioWakeUpTime>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	3303      	adds	r3, #3
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b082      	sub	sp, #8
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017d08:	f000 f80e 	bl	8017d28 <RadioOnTxTimeoutProcess>
}
 8017d0c:	bf00      	nop
 8017d0e:	3708      	adds	r7, #8
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b082      	sub	sp, #8
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017d1c:	f000 f818 	bl	8017d50 <RadioOnRxTimeoutProcess>
}
 8017d20:	bf00      	nop
 8017d22:	3708      	adds	r7, #8
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}

08017d28 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017d2c:	4b07      	ldr	r3, [pc, #28]	; (8017d4c <RadioOnTxTimeoutProcess+0x24>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d008      	beq.n	8017d46 <RadioOnTxTimeoutProcess+0x1e>
 8017d34:	4b05      	ldr	r3, [pc, #20]	; (8017d4c <RadioOnTxTimeoutProcess+0x24>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	685b      	ldr	r3, [r3, #4]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d003      	beq.n	8017d46 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8017d3e:	4b03      	ldr	r3, [pc, #12]	; (8017d4c <RadioOnTxTimeoutProcess+0x24>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	685b      	ldr	r3, [r3, #4]
 8017d44:	4798      	blx	r3
    }
}
 8017d46:	bf00      	nop
 8017d48:	bd80      	pop	{r7, pc}
 8017d4a:	bf00      	nop
 8017d4c:	20001e38 	.word	0x20001e38

08017d50 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017d54:	4b07      	ldr	r3, [pc, #28]	; (8017d74 <RadioOnRxTimeoutProcess+0x24>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d008      	beq.n	8017d6e <RadioOnRxTimeoutProcess+0x1e>
 8017d5c:	4b05      	ldr	r3, [pc, #20]	; (8017d74 <RadioOnRxTimeoutProcess+0x24>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	68db      	ldr	r3, [r3, #12]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d003      	beq.n	8017d6e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017d66:	4b03      	ldr	r3, [pc, #12]	; (8017d74 <RadioOnRxTimeoutProcess+0x24>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	68db      	ldr	r3, [r3, #12]
 8017d6c:	4798      	blx	r3
    }
}
 8017d6e:	bf00      	nop
 8017d70:	bd80      	pop	{r7, pc}
 8017d72:	bf00      	nop
 8017d74:	20001e38 	.word	0x20001e38

08017d78 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	4603      	mov	r3, r0
 8017d80:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017d82:	4a05      	ldr	r2, [pc, #20]	; (8017d98 <RadioOnDioIrq+0x20>)
 8017d84:	88fb      	ldrh	r3, [r7, #6]
 8017d86:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8017d8a:	f000 f807 	bl	8017d9c <RadioIrqProcess>
}
 8017d8e:	bf00      	nop
 8017d90:	3708      	adds	r7, #8
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	20001e3c 	.word	0x20001e3c

08017d9c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017d9c:	b590      	push	{r4, r7, lr}
 8017d9e:	b083      	sub	sp, #12
 8017da0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017da2:	2300      	movs	r3, #0
 8017da4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017da6:	2300      	movs	r3, #0
 8017da8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017daa:	4ba8      	ldr	r3, [pc, #672]	; (801804c <RadioIrqProcess+0x2b0>)
 8017dac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017db4:	f000 810c 	beq.w	8017fd0 <RadioIrqProcess+0x234>
 8017db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017dbc:	f300 81e8 	bgt.w	8018190 <RadioIrqProcess+0x3f4>
 8017dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017dc4:	f000 80f0 	beq.w	8017fa8 <RadioIrqProcess+0x20c>
 8017dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017dcc:	f300 81e0 	bgt.w	8018190 <RadioIrqProcess+0x3f4>
 8017dd0:	2b80      	cmp	r3, #128	; 0x80
 8017dd2:	f000 80d5 	beq.w	8017f80 <RadioIrqProcess+0x1e4>
 8017dd6:	2b80      	cmp	r3, #128	; 0x80
 8017dd8:	f300 81da 	bgt.w	8018190 <RadioIrqProcess+0x3f4>
 8017ddc:	2b20      	cmp	r3, #32
 8017dde:	dc49      	bgt.n	8017e74 <RadioIrqProcess+0xd8>
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	f340 81d5 	ble.w	8018190 <RadioIrqProcess+0x3f4>
 8017de6:	3b01      	subs	r3, #1
 8017de8:	2b1f      	cmp	r3, #31
 8017dea:	f200 81d1 	bhi.w	8018190 <RadioIrqProcess+0x3f4>
 8017dee:	a201      	add	r2, pc, #4	; (adr r2, 8017df4 <RadioIrqProcess+0x58>)
 8017df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017df4:	08017e7d 	.word	0x08017e7d
 8017df8:	08017eb7 	.word	0x08017eb7
 8017dfc:	08018191 	.word	0x08018191
 8017e00:	0801806d 	.word	0x0801806d
 8017e04:	08018191 	.word	0x08018191
 8017e08:	08018191 	.word	0x08018191
 8017e0c:	08018191 	.word	0x08018191
 8017e10:	080180e9 	.word	0x080180e9
 8017e14:	08018191 	.word	0x08018191
 8017e18:	08018191 	.word	0x08018191
 8017e1c:	08018191 	.word	0x08018191
 8017e20:	08018191 	.word	0x08018191
 8017e24:	08018191 	.word	0x08018191
 8017e28:	08018191 	.word	0x08018191
 8017e2c:	08018191 	.word	0x08018191
 8017e30:	08018105 	.word	0x08018105
 8017e34:	08018191 	.word	0x08018191
 8017e38:	08018191 	.word	0x08018191
 8017e3c:	08018191 	.word	0x08018191
 8017e40:	08018191 	.word	0x08018191
 8017e44:	08018191 	.word	0x08018191
 8017e48:	08018191 	.word	0x08018191
 8017e4c:	08018191 	.word	0x08018191
 8017e50:	08018191 	.word	0x08018191
 8017e54:	08018191 	.word	0x08018191
 8017e58:	08018191 	.word	0x08018191
 8017e5c:	08018191 	.word	0x08018191
 8017e60:	08018191 	.word	0x08018191
 8017e64:	08018191 	.word	0x08018191
 8017e68:	08018191 	.word	0x08018191
 8017e6c:	08018191 	.word	0x08018191
 8017e70:	08018113 	.word	0x08018113
 8017e74:	2b40      	cmp	r3, #64	; 0x40
 8017e76:	f000 816d 	beq.w	8018154 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017e7a:	e189      	b.n	8018190 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017e7c:	4874      	ldr	r0, [pc, #464]	; (8018050 <RadioIrqProcess+0x2b4>)
 8017e7e:	f002 ff8b 	bl	801ad98 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017e82:	2000      	movs	r0, #0
 8017e84:	f000 fff8 	bl	8018e78 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017e88:	f002 f85a 	bl	8019f40 <RFW_Is_LongPacketModeEnabled>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	2b01      	cmp	r3, #1
 8017e90:	d101      	bne.n	8017e96 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017e92:	f002 f87e 	bl	8019f92 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017e96:	4b6f      	ldr	r3, [pc, #444]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	f000 817a 	beq.w	8018194 <RadioIrqProcess+0x3f8>
 8017ea0:	4b6c      	ldr	r3, [pc, #432]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	f000 8174 	beq.w	8018194 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017eac:	4b69      	ldr	r3, [pc, #420]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	4798      	blx	r3
        break;
 8017eb4:	e16e      	b.n	8018194 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017eb6:	4868      	ldr	r0, [pc, #416]	; (8018058 <RadioIrqProcess+0x2bc>)
 8017eb8:	f002 ff6e 	bl	801ad98 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017ebc:	4b63      	ldr	r3, [pc, #396]	; (801804c <RadioIrqProcess+0x2b0>)
 8017ebe:	785b      	ldrb	r3, [r3, #1]
 8017ec0:	f083 0301 	eor.w	r3, r3, #1
 8017ec4:	b2db      	uxtb	r3, r3
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d014      	beq.n	8017ef4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017eca:	2000      	movs	r0, #0
 8017ecc:	f000 ffd4 	bl	8018e78 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017ed0:	2100      	movs	r1, #0
 8017ed2:	f640 1002 	movw	r0, #2306	; 0x902
 8017ed6:	f001 fd4f 	bl	8019978 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017eda:	f640 1044 	movw	r0, #2372	; 0x944
 8017ede:	f001 fd5f 	bl	80199a0 <SUBGRF_ReadRegister>
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	f043 0302 	orr.w	r3, r3, #2
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	4619      	mov	r1, r3
 8017eec:	f640 1044 	movw	r0, #2372	; 0x944
 8017ef0:	f001 fd42 	bl	8019978 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017ef4:	1dfb      	adds	r3, r7, #7
 8017ef6:	22ff      	movs	r2, #255	; 0xff
 8017ef8:	4619      	mov	r1, r3
 8017efa:	4858      	ldr	r0, [pc, #352]	; (801805c <RadioIrqProcess+0x2c0>)
 8017efc:	f000 fe8c 	bl	8018c18 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017f00:	4857      	ldr	r0, [pc, #348]	; (8018060 <RadioIrqProcess+0x2c4>)
 8017f02:	f001 fce7 	bl	80198d4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017f06:	4b53      	ldr	r3, [pc, #332]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d036      	beq.n	8017f7c <RadioIrqProcess+0x1e0>
 8017f0e:	4b51      	ldr	r3, [pc, #324]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	689b      	ldr	r3, [r3, #8]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d031      	beq.n	8017f7c <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8017f18:	4b4c      	ldr	r3, [pc, #304]	; (801804c <RadioIrqProcess+0x2b0>)
 8017f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f1e:	2b01      	cmp	r3, #1
 8017f20:	d10e      	bne.n	8017f40 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017f22:	4b4c      	ldr	r3, [pc, #304]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	689c      	ldr	r4, [r3, #8]
 8017f28:	79fb      	ldrb	r3, [r7, #7]
 8017f2a:	b299      	uxth	r1, r3
 8017f2c:	4b47      	ldr	r3, [pc, #284]	; (801804c <RadioIrqProcess+0x2b0>)
 8017f2e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8017f32:	b21a      	sxth	r2, r3
 8017f34:	4b45      	ldr	r3, [pc, #276]	; (801804c <RadioIrqProcess+0x2b0>)
 8017f36:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017f3a:	4848      	ldr	r0, [pc, #288]	; (801805c <RadioIrqProcess+0x2c0>)
 8017f3c:	47a0      	blx	r4
                break;
 8017f3e:	e01e      	b.n	8017f7e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017f40:	4b42      	ldr	r3, [pc, #264]	; (801804c <RadioIrqProcess+0x2b0>)
 8017f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f44:	463a      	mov	r2, r7
 8017f46:	4611      	mov	r1, r2
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f001 ff47 	bl	8019ddc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017f4e:	4b41      	ldr	r3, [pc, #260]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	689c      	ldr	r4, [r3, #8]
 8017f54:	79fb      	ldrb	r3, [r7, #7]
 8017f56:	b299      	uxth	r1, r3
 8017f58:	4b3c      	ldr	r3, [pc, #240]	; (801804c <RadioIrqProcess+0x2b0>)
 8017f5a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017f5e:	b218      	sxth	r0, r3
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017f66:	4a3f      	ldr	r2, [pc, #252]	; (8018064 <RadioIrqProcess+0x2c8>)
 8017f68:	fb82 c203 	smull	ip, r2, r2, r3
 8017f6c:	1192      	asrs	r2, r2, #6
 8017f6e:	17db      	asrs	r3, r3, #31
 8017f70:	1ad3      	subs	r3, r2, r3
 8017f72:	b25b      	sxtb	r3, r3
 8017f74:	4602      	mov	r2, r0
 8017f76:	4839      	ldr	r0, [pc, #228]	; (801805c <RadioIrqProcess+0x2c0>)
 8017f78:	47a0      	blx	r4
                break;
 8017f7a:	e000      	b.n	8017f7e <RadioIrqProcess+0x1e2>
        }
 8017f7c:	bf00      	nop
        break;
 8017f7e:	e118      	b.n	80181b2 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8017f80:	2000      	movs	r0, #0
 8017f82:	f000 ff79 	bl	8018e78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017f86:	4b33      	ldr	r3, [pc, #204]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	f000 8104 	beq.w	8018198 <RadioIrqProcess+0x3fc>
 8017f90:	4b30      	ldr	r3, [pc, #192]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	699b      	ldr	r3, [r3, #24]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	f000 80fe 	beq.w	8018198 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8017f9c:	4b2d      	ldr	r3, [pc, #180]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	699b      	ldr	r3, [r3, #24]
 8017fa2:	2000      	movs	r0, #0
 8017fa4:	4798      	blx	r3
        break;
 8017fa6:	e0f7      	b.n	8018198 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017fa8:	2000      	movs	r0, #0
 8017faa:	f000 ff65 	bl	8018e78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017fae:	4b29      	ldr	r3, [pc, #164]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	f000 80f2 	beq.w	801819c <RadioIrqProcess+0x400>
 8017fb8:	4b26      	ldr	r3, [pc, #152]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	699b      	ldr	r3, [r3, #24]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f000 80ec 	beq.w	801819c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8017fc4:	4b23      	ldr	r3, [pc, #140]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	699b      	ldr	r3, [r3, #24]
 8017fca:	2001      	movs	r0, #1
 8017fcc:	4798      	blx	r3
        break;
 8017fce:	e0e5      	b.n	801819c <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017fd0:	4b25      	ldr	r3, [pc, #148]	; (8018068 <RadioIrqProcess+0x2cc>)
 8017fd2:	2201      	movs	r2, #1
 8017fd4:	2100      	movs	r1, #0
 8017fd6:	2002      	movs	r0, #2
 8017fd8:	f003 f8e8 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017fdc:	f000 fe02 	bl	8018be4 <SUBGRF_GetOperatingMode>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b04      	cmp	r3, #4
 8017fe4:	d115      	bne.n	8018012 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8017fe6:	481a      	ldr	r0, [pc, #104]	; (8018050 <RadioIrqProcess+0x2b4>)
 8017fe8:	f002 fed6 	bl	801ad98 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017fec:	2000      	movs	r0, #0
 8017fee:	f000 ff43 	bl	8018e78 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017ff2:	4b18      	ldr	r3, [pc, #96]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	f000 80d2 	beq.w	80181a0 <RadioIrqProcess+0x404>
 8017ffc:	4b15      	ldr	r3, [pc, #84]	; (8018054 <RadioIrqProcess+0x2b8>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	2b00      	cmp	r3, #0
 8018004:	f000 80cc 	beq.w	80181a0 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8018008:	4b12      	ldr	r3, [pc, #72]	; (8018054 <RadioIrqProcess+0x2b8>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	685b      	ldr	r3, [r3, #4]
 801800e:	4798      	blx	r3
        break;
 8018010:	e0c6      	b.n	80181a0 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018012:	f000 fde7 	bl	8018be4 <SUBGRF_GetOperatingMode>
 8018016:	4603      	mov	r3, r0
 8018018:	2b05      	cmp	r3, #5
 801801a:	f040 80c1 	bne.w	80181a0 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801801e:	480e      	ldr	r0, [pc, #56]	; (8018058 <RadioIrqProcess+0x2bc>)
 8018020:	f002 feba 	bl	801ad98 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018024:	2000      	movs	r0, #0
 8018026:	f000 ff27 	bl	8018e78 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801802a:	4b0a      	ldr	r3, [pc, #40]	; (8018054 <RadioIrqProcess+0x2b8>)
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	2b00      	cmp	r3, #0
 8018030:	f000 80b6 	beq.w	80181a0 <RadioIrqProcess+0x404>
 8018034:	4b07      	ldr	r3, [pc, #28]	; (8018054 <RadioIrqProcess+0x2b8>)
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	68db      	ldr	r3, [r3, #12]
 801803a:	2b00      	cmp	r3, #0
 801803c:	f000 80b0 	beq.w	80181a0 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8018040:	4b04      	ldr	r3, [pc, #16]	; (8018054 <RadioIrqProcess+0x2b8>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	68db      	ldr	r3, [r3, #12]
 8018046:	4798      	blx	r3
        break;
 8018048:	e0aa      	b.n	80181a0 <RadioIrqProcess+0x404>
 801804a:	bf00      	nop
 801804c:	20001e3c 	.word	0x20001e3c
 8018050:	20001e98 	.word	0x20001e98
 8018054:	20001e38 	.word	0x20001e38
 8018058:	20001eb0 	.word	0x20001eb0
 801805c:	20001d38 	.word	0x20001d38
 8018060:	20001e60 	.word	0x20001e60
 8018064:	10624dd3 	.word	0x10624dd3
 8018068:	0801bc30 	.word	0x0801bc30
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801806c:	4b53      	ldr	r3, [pc, #332]	; (80181bc <RadioIrqProcess+0x420>)
 801806e:	2201      	movs	r2, #1
 8018070:	2100      	movs	r1, #0
 8018072:	2002      	movs	r0, #2
 8018074:	f003 f89a 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018078:	4b51      	ldr	r3, [pc, #324]	; (80181c0 <RadioIrqProcess+0x424>)
 801807a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801807c:	2b00      	cmp	r3, #0
 801807e:	f000 8091 	beq.w	80181a4 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8018082:	4a50      	ldr	r2, [pc, #320]	; (80181c4 <RadioIrqProcess+0x428>)
 8018084:	4b4e      	ldr	r3, [pc, #312]	; (80181c0 <RadioIrqProcess+0x424>)
 8018086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018088:	0c1b      	lsrs	r3, r3, #16
 801808a:	b2db      	uxtb	r3, r3
 801808c:	4619      	mov	r1, r3
 801808e:	f640 1003 	movw	r0, #2307	; 0x903
 8018092:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8018094:	4a4b      	ldr	r2, [pc, #300]	; (80181c4 <RadioIrqProcess+0x428>)
 8018096:	4b4a      	ldr	r3, [pc, #296]	; (80181c0 <RadioIrqProcess+0x424>)
 8018098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801809a:	0a1b      	lsrs	r3, r3, #8
 801809c:	b2db      	uxtb	r3, r3
 801809e:	4619      	mov	r1, r3
 80180a0:	f640 1004 	movw	r0, #2308	; 0x904
 80180a4:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80180a6:	4a47      	ldr	r2, [pc, #284]	; (80181c4 <RadioIrqProcess+0x428>)
 80180a8:	4b45      	ldr	r3, [pc, #276]	; (80181c0 <RadioIrqProcess+0x424>)
 80180aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180ac:	b2db      	uxtb	r3, r3
 80180ae:	4619      	mov	r1, r3
 80180b0:	f640 1005 	movw	r0, #2309	; 0x905
 80180b4:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80180b6:	4c43      	ldr	r4, [pc, #268]	; (80181c4 <RadioIrqProcess+0x428>)
 80180b8:	4b43      	ldr	r3, [pc, #268]	; (80181c8 <RadioIrqProcess+0x42c>)
 80180ba:	f640 1002 	movw	r0, #2306	; 0x902
 80180be:	4798      	blx	r3
 80180c0:	4603      	mov	r3, r0
 80180c2:	f043 0301 	orr.w	r3, r3, #1
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	4619      	mov	r1, r3
 80180ca:	f640 1002 	movw	r0, #2306	; 0x902
 80180ce:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80180d0:	4b3b      	ldr	r3, [pc, #236]	; (80181c0 <RadioIrqProcess+0x424>)
 80180d2:	2200      	movs	r2, #0
 80180d4:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80180d6:	2300      	movs	r3, #0
 80180d8:	2200      	movs	r2, #0
 80180da:	f240 2162 	movw	r1, #610	; 0x262
 80180de:	f240 2062 	movw	r0, #610	; 0x262
 80180e2:	f001 f899 	bl	8019218 <SUBGRF_SetDioIrqParams>
        break;
 80180e6:	e05d      	b.n	80181a4 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80180e8:	4b38      	ldr	r3, [pc, #224]	; (80181cc <RadioIrqProcess+0x430>)
 80180ea:	2201      	movs	r2, #1
 80180ec:	2100      	movs	r1, #0
 80180ee:	2002      	movs	r0, #2
 80180f0:	f003 f85c 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80180f4:	f001 ff1d 	bl	8019f32 <RFW_Is_Init>
 80180f8:	4603      	mov	r3, r0
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d154      	bne.n	80181a8 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 80180fe:	f001 ff4e 	bl	8019f9e <RFW_ReceivePayload>
        break;
 8018102:	e051      	b.n	80181a8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018104:	4b32      	ldr	r3, [pc, #200]	; (80181d0 <RadioIrqProcess+0x434>)
 8018106:	2201      	movs	r2, #1
 8018108:	2100      	movs	r1, #0
 801810a:	2002      	movs	r0, #2
 801810c:	f003 f84e 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018110:	e04f      	b.n	80181b2 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8018112:	4830      	ldr	r0, [pc, #192]	; (80181d4 <RadioIrqProcess+0x438>)
 8018114:	f002 fe40 	bl	801ad98 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018118:	4b29      	ldr	r3, [pc, #164]	; (80181c0 <RadioIrqProcess+0x424>)
 801811a:	785b      	ldrb	r3, [r3, #1]
 801811c:	f083 0301 	eor.w	r3, r3, #1
 8018120:	b2db      	uxtb	r3, r3
 8018122:	2b00      	cmp	r3, #0
 8018124:	d002      	beq.n	801812c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018126:	2000      	movs	r0, #0
 8018128:	f000 fea6 	bl	8018e78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801812c:	4b2a      	ldr	r3, [pc, #168]	; (80181d8 <RadioIrqProcess+0x43c>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d03b      	beq.n	80181ac <RadioIrqProcess+0x410>
 8018134:	4b28      	ldr	r3, [pc, #160]	; (80181d8 <RadioIrqProcess+0x43c>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	68db      	ldr	r3, [r3, #12]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d036      	beq.n	80181ac <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801813e:	4b26      	ldr	r3, [pc, #152]	; (80181d8 <RadioIrqProcess+0x43c>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	68db      	ldr	r3, [r3, #12]
 8018144:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018146:	4b25      	ldr	r3, [pc, #148]	; (80181dc <RadioIrqProcess+0x440>)
 8018148:	2201      	movs	r2, #1
 801814a:	2100      	movs	r1, #0
 801814c:	2002      	movs	r0, #2
 801814e:	f003 f82d 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018152:	e02b      	b.n	80181ac <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018154:	4b22      	ldr	r3, [pc, #136]	; (80181e0 <RadioIrqProcess+0x444>)
 8018156:	2201      	movs	r2, #1
 8018158:	2100      	movs	r1, #0
 801815a:	2002      	movs	r0, #2
 801815c:	f003 f826 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018160:	4b17      	ldr	r3, [pc, #92]	; (80181c0 <RadioIrqProcess+0x424>)
 8018162:	785b      	ldrb	r3, [r3, #1]
 8018164:	f083 0301 	eor.w	r3, r3, #1
 8018168:	b2db      	uxtb	r3, r3
 801816a:	2b00      	cmp	r3, #0
 801816c:	d002      	beq.n	8018174 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801816e:	2000      	movs	r0, #0
 8018170:	f000 fe82 	bl	8018e78 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018174:	4b18      	ldr	r3, [pc, #96]	; (80181d8 <RadioIrqProcess+0x43c>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d019      	beq.n	80181b0 <RadioIrqProcess+0x414>
 801817c:	4b16      	ldr	r3, [pc, #88]	; (80181d8 <RadioIrqProcess+0x43c>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	691b      	ldr	r3, [r3, #16]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d014      	beq.n	80181b0 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8018186:	4b14      	ldr	r3, [pc, #80]	; (80181d8 <RadioIrqProcess+0x43c>)
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	691b      	ldr	r3, [r3, #16]
 801818c:	4798      	blx	r3
        break;
 801818e:	e00f      	b.n	80181b0 <RadioIrqProcess+0x414>
        break;
 8018190:	bf00      	nop
 8018192:	e00e      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 8018194:	bf00      	nop
 8018196:	e00c      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 8018198:	bf00      	nop
 801819a:	e00a      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 801819c:	bf00      	nop
 801819e:	e008      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 80181a0:	bf00      	nop
 80181a2:	e006      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 80181a4:	bf00      	nop
 80181a6:	e004      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 80181a8:	bf00      	nop
 80181aa:	e002      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 80181ac:	bf00      	nop
 80181ae:	e000      	b.n	80181b2 <RadioIrqProcess+0x416>
        break;
 80181b0:	bf00      	nop
    }
}
 80181b2:	bf00      	nop
 80181b4:	370c      	adds	r7, #12
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd90      	pop	{r4, r7, pc}
 80181ba:	bf00      	nop
 80181bc:	0801bc44 	.word	0x0801bc44
 80181c0:	20001e3c 	.word	0x20001e3c
 80181c4:	08017bab 	.word	0x08017bab
 80181c8:	08017bcf 	.word	0x08017bcf
 80181cc:	0801bc50 	.word	0x0801bc50
 80181d0:	0801bc5c 	.word	0x0801bc5c
 80181d4:	20001eb0 	.word	0x20001eb0
 80181d8:	20001e38 	.word	0x20001e38
 80181dc:	0801bc68 	.word	0x0801bc68
 80181e0:	0801bc74 	.word	0x0801bc74

080181e4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80181e8:	4b09      	ldr	r3, [pc, #36]	; (8018210 <RadioTxPrbs+0x2c>)
 80181ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80181ee:	2101      	movs	r1, #1
 80181f0:	4618      	mov	r0, r3
 80181f2:	f001 fcb5 	bl	8019b60 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80181f6:	4b07      	ldr	r3, [pc, #28]	; (8018214 <RadioTxPrbs+0x30>)
 80181f8:	212d      	movs	r1, #45	; 0x2d
 80181fa:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80181fe:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018200:	f000 fefd 	bl	8018ffe <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018204:	4804      	ldr	r0, [pc, #16]	; (8018218 <RadioTxPrbs+0x34>)
 8018206:	f000 fe53 	bl	8018eb0 <SUBGRF_SetTx>
}
 801820a:	bf00      	nop
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	20001e3c 	.word	0x20001e3c
 8018214:	08017bab 	.word	0x08017bab
 8018218:	000fffff 	.word	0x000fffff

0801821c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b084      	sub	sp, #16
 8018220:	af00      	add	r7, sp, #0
 8018222:	4603      	mov	r3, r0
 8018224:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801822a:	4618      	mov	r0, r3
 801822c:	f001 fcc0 	bl	8019bb0 <SUBGRF_SetRfTxPower>
 8018230:	4603      	mov	r3, r0
 8018232:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018234:	7bfb      	ldrb	r3, [r7, #15]
 8018236:	2101      	movs	r1, #1
 8018238:	4618      	mov	r0, r3
 801823a:	f001 fc91 	bl	8019b60 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801823e:	f000 fed5 	bl	8018fec <SUBGRF_SetTxContinuousWave>
}
 8018242:	bf00      	nop
 8018244:	3710      	adds	r7, #16
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}

0801824a <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801824a:	b480      	push	{r7}
 801824c:	b089      	sub	sp, #36	; 0x24
 801824e:	af00      	add	r7, sp, #0
 8018250:	60f8      	str	r0, [r7, #12]
 8018252:	60b9      	str	r1, [r7, #8]
 8018254:	4613      	mov	r3, r2
 8018256:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8018258:	2300      	movs	r3, #0
 801825a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801825c:	2300      	movs	r3, #0
 801825e:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018260:	2300      	movs	r3, #0
 8018262:	61bb      	str	r3, [r7, #24]
 8018264:	e011      	b.n	801828a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018266:	69bb      	ldr	r3, [r7, #24]
 8018268:	68ba      	ldr	r2, [r7, #8]
 801826a:	4413      	add	r3, r2
 801826c:	781a      	ldrb	r2, [r3, #0]
 801826e:	69bb      	ldr	r3, [r7, #24]
 8018270:	68b9      	ldr	r1, [r7, #8]
 8018272:	440b      	add	r3, r1
 8018274:	43d2      	mvns	r2, r2
 8018276:	b2d2      	uxtb	r2, r2
 8018278:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801827a:	69bb      	ldr	r3, [r7, #24]
 801827c:	68fa      	ldr	r2, [r7, #12]
 801827e:	4413      	add	r3, r2
 8018280:	2200      	movs	r2, #0
 8018282:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018284:	69bb      	ldr	r3, [r7, #24]
 8018286:	3301      	adds	r3, #1
 8018288:	61bb      	str	r3, [r7, #24]
 801828a:	79fb      	ldrb	r3, [r7, #7]
 801828c:	69ba      	ldr	r2, [r7, #24]
 801828e:	429a      	cmp	r2, r3
 8018290:	dbe9      	blt.n	8018266 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018292:	2300      	movs	r3, #0
 8018294:	61bb      	str	r3, [r7, #24]
 8018296:	e049      	b.n	801832c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8018298:	69bb      	ldr	r3, [r7, #24]
 801829a:	425a      	negs	r2, r3
 801829c:	f003 0307 	and.w	r3, r3, #7
 80182a0:	f002 0207 	and.w	r2, r2, #7
 80182a4:	bf58      	it	pl
 80182a6:	4253      	negpl	r3, r2
 80182a8:	b2db      	uxtb	r3, r3
 80182aa:	f1c3 0307 	rsb	r3, r3, #7
 80182ae:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80182b0:	69bb      	ldr	r3, [r7, #24]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	da00      	bge.n	80182b8 <payload_integration+0x6e>
 80182b6:	3307      	adds	r3, #7
 80182b8:	10db      	asrs	r3, r3, #3
 80182ba:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80182bc:	69bb      	ldr	r3, [r7, #24]
 80182be:	3301      	adds	r3, #1
 80182c0:	425a      	negs	r2, r3
 80182c2:	f003 0307 	and.w	r3, r3, #7
 80182c6:	f002 0207 	and.w	r2, r2, #7
 80182ca:	bf58      	it	pl
 80182cc:	4253      	negpl	r3, r2
 80182ce:	b2db      	uxtb	r3, r3
 80182d0:	f1c3 0307 	rsb	r3, r3, #7
 80182d4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80182d6:	69bb      	ldr	r3, [r7, #24]
 80182d8:	3301      	adds	r3, #1
 80182da:	2b00      	cmp	r3, #0
 80182dc:	da00      	bge.n	80182e0 <payload_integration+0x96>
 80182de:	3307      	adds	r3, #7
 80182e0:	10db      	asrs	r3, r3, #3
 80182e2:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80182e4:	7dbb      	ldrb	r3, [r7, #22]
 80182e6:	68ba      	ldr	r2, [r7, #8]
 80182e8:	4413      	add	r3, r2
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	461a      	mov	r2, r3
 80182ee:	7dfb      	ldrb	r3, [r7, #23]
 80182f0:	fa42 f303 	asr.w	r3, r2, r3
 80182f4:	b2db      	uxtb	r3, r3
 80182f6:	f003 0301 	and.w	r3, r3, #1
 80182fa:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80182fc:	7ffa      	ldrb	r2, [r7, #31]
 80182fe:	7cfb      	ldrb	r3, [r7, #19]
 8018300:	4053      	eors	r3, r2
 8018302:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018304:	7d3b      	ldrb	r3, [r7, #20]
 8018306:	68fa      	ldr	r2, [r7, #12]
 8018308:	4413      	add	r3, r2
 801830a:	781b      	ldrb	r3, [r3, #0]
 801830c:	b25a      	sxtb	r2, r3
 801830e:	7ff9      	ldrb	r1, [r7, #31]
 8018310:	7d7b      	ldrb	r3, [r7, #21]
 8018312:	fa01 f303 	lsl.w	r3, r1, r3
 8018316:	b25b      	sxtb	r3, r3
 8018318:	4313      	orrs	r3, r2
 801831a:	b259      	sxtb	r1, r3
 801831c:	7d3b      	ldrb	r3, [r7, #20]
 801831e:	68fa      	ldr	r2, [r7, #12]
 8018320:	4413      	add	r3, r2
 8018322:	b2ca      	uxtb	r2, r1
 8018324:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018326:	69bb      	ldr	r3, [r7, #24]
 8018328:	3301      	adds	r3, #1
 801832a:	61bb      	str	r3, [r7, #24]
 801832c:	79fb      	ldrb	r3, [r7, #7]
 801832e:	00db      	lsls	r3, r3, #3
 8018330:	69ba      	ldr	r2, [r7, #24]
 8018332:	429a      	cmp	r2, r3
 8018334:	dbb0      	blt.n	8018298 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018336:	7ffb      	ldrb	r3, [r7, #31]
 8018338:	01db      	lsls	r3, r3, #7
 801833a:	b25a      	sxtb	r2, r3
 801833c:	7ffb      	ldrb	r3, [r7, #31]
 801833e:	019b      	lsls	r3, r3, #6
 8018340:	b25b      	sxtb	r3, r3
 8018342:	4313      	orrs	r3, r2
 8018344:	b25b      	sxtb	r3, r3
 8018346:	7ffa      	ldrb	r2, [r7, #31]
 8018348:	2a00      	cmp	r2, #0
 801834a:	d101      	bne.n	8018350 <payload_integration+0x106>
 801834c:	2220      	movs	r2, #32
 801834e:	e000      	b.n	8018352 <payload_integration+0x108>
 8018350:	2200      	movs	r2, #0
 8018352:	4313      	orrs	r3, r2
 8018354:	b259      	sxtb	r1, r3
 8018356:	79fb      	ldrb	r3, [r7, #7]
 8018358:	68fa      	ldr	r2, [r7, #12]
 801835a:	4413      	add	r3, r2
 801835c:	b2ca      	uxtb	r2, r1
 801835e:	701a      	strb	r2, [r3, #0]
}
 8018360:	bf00      	nop
 8018362:	3724      	adds	r7, #36	; 0x24
 8018364:	46bd      	mov	sp, r7
 8018366:	bc80      	pop	{r7}
 8018368:	4770      	bx	lr
	...

0801836c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b08c      	sub	sp, #48	; 0x30
 8018370:	af00      	add	r7, sp, #0
 8018372:	60b9      	str	r1, [r7, #8]
 8018374:	607a      	str	r2, [r7, #4]
 8018376:	603b      	str	r3, [r7, #0]
 8018378:	4603      	mov	r3, r0
 801837a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801837c:	2300      	movs	r3, #0
 801837e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8018380:	2300      	movs	r3, #0
 8018382:	623b      	str	r3, [r7, #32]
 8018384:	2300      	movs	r3, #0
 8018386:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018388:	f001 fdcd 	bl	8019f26 <RFW_DeInit>

    if( rxContinuous != 0 )
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d001      	beq.n	8018396 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8018392:	2300      	movs	r3, #0
 8018394:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	2b00      	cmp	r3, #0
 801839a:	bf14      	ite	ne
 801839c:	2301      	movne	r3, #1
 801839e:	2300      	moveq	r3, #0
 80183a0:	b2da      	uxtb	r2, r3
 80183a2:	4ba3      	ldr	r3, [pc, #652]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80183a4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80183a6:	7bfb      	ldrb	r3, [r7, #15]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d003      	beq.n	80183b4 <RadioSetRxGenericConfig+0x48>
 80183ac:	2b01      	cmp	r3, #1
 80183ae:	f000 80dc 	beq.w	801856a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80183b2:	e194      	b.n	80186de <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	689b      	ldr	r3, [r3, #8]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d003      	beq.n	80183c4 <RadioSetRxGenericConfig+0x58>
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	68db      	ldr	r3, [r3, #12]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d102      	bne.n	80183ca <RadioSetRxGenericConfig+0x5e>
            return -1;
 80183c4:	f04f 33ff 	mov.w	r3, #4294967295
 80183c8:	e18a      	b.n	80186e0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80183ca:	68bb      	ldr	r3, [r7, #8]
 80183cc:	7f9b      	ldrb	r3, [r3, #30]
 80183ce:	2b08      	cmp	r3, #8
 80183d0:	d902      	bls.n	80183d8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80183d2:	f04f 33ff 	mov.w	r3, #4294967295
 80183d6:	e183      	b.n	80186e0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80183d8:	68bb      	ldr	r3, [r7, #8]
 80183da:	6919      	ldr	r1, [r3, #16]
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	7f9b      	ldrb	r3, [r3, #30]
 80183e0:	b29a      	uxth	r2, r3
 80183e2:	f107 0320 	add.w	r3, r7, #32
 80183e6:	4618      	mov	r0, r3
 80183e8:	f001 fe90 	bl	801a10c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	bf14      	ite	ne
 80183f4:	2301      	movne	r3, #1
 80183f6:	2300      	moveq	r3, #0
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	4618      	mov	r0, r3
 80183fc:	f000 fe08 	bl	8019010 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018400:	4b8b      	ldr	r3, [pc, #556]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018402:	2200      	movs	r2, #0
 8018404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	689b      	ldr	r3, [r3, #8]
 801840c:	4a88      	ldr	r2, [pc, #544]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 801840e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018416:	4b86      	ldr	r3, [pc, #536]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	685b      	ldr	r3, [r3, #4]
 8018420:	4618      	mov	r0, r3
 8018422:	f001 fcb3 	bl	8019d8c <SUBGRF_GetFskBandwidthRegValue>
 8018426:	4603      	mov	r3, r0
 8018428:	461a      	mov	r2, r3
 801842a:	4b81      	ldr	r3, [pc, #516]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 801842c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018430:	4b7f      	ldr	r3, [pc, #508]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018432:	2200      	movs	r2, #0
 8018434:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	68db      	ldr	r3, [r3, #12]
 801843a:	b29b      	uxth	r3, r3
 801843c:	00db      	lsls	r3, r3, #3
 801843e:	b29a      	uxth	r2, r3
 8018440:	4b7b      	ldr	r3, [pc, #492]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018442:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	7fda      	ldrb	r2, [r3, #31]
 8018448:	4b79      	ldr	r3, [pc, #484]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 801844a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	7f9b      	ldrb	r3, [r3, #30]
 8018450:	00db      	lsls	r3, r3, #3
 8018452:	b2da      	uxtb	r2, r3
 8018454:	4b76      	ldr	r3, [pc, #472]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018456:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801845e:	4b74      	ldr	r3, [pc, #464]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018460:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018462:	68bb      	ldr	r3, [r7, #8]
 8018464:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8018468:	2b00      	cmp	r3, #0
 801846a:	d105      	bne.n	8018478 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801846c:	68bb      	ldr	r3, [r7, #8]
 801846e:	695b      	ldr	r3, [r3, #20]
 8018470:	b2da      	uxtb	r2, r3
 8018472:	4b6f      	ldr	r3, [pc, #444]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018474:	759a      	strb	r2, [r3, #22]
 8018476:	e00b      	b.n	8018490 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801847e:	2b02      	cmp	r3, #2
 8018480:	d103      	bne.n	801848a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018482:	4b6b      	ldr	r3, [pc, #428]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018484:	22ff      	movs	r2, #255	; 0xff
 8018486:	759a      	strb	r2, [r3, #22]
 8018488:	e002      	b.n	8018490 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801848a:	4b69      	ldr	r3, [pc, #420]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 801848c:	22ff      	movs	r2, #255	; 0xff
 801848e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018496:	2b02      	cmp	r3, #2
 8018498:	d004      	beq.n	80184a4 <RadioSetRxGenericConfig+0x138>
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80184a0:	2b02      	cmp	r3, #2
 80184a2:	d12d      	bne.n	8018500 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80184aa:	2bf1      	cmp	r3, #241	; 0xf1
 80184ac:	d00c      	beq.n	80184c8 <RadioSetRxGenericConfig+0x15c>
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80184b4:	2bf2      	cmp	r3, #242	; 0xf2
 80184b6:	d007      	beq.n	80184c8 <RadioSetRxGenericConfig+0x15c>
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d002      	beq.n	80184c8 <RadioSetRxGenericConfig+0x15c>
            return -1;
 80184c2:	f04f 33ff 	mov.w	r3, #4294967295
 80184c6:	e10b      	b.n	80186e0 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 80184c8:	2300      	movs	r3, #0
 80184ca:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80184d0:	4b58      	ldr	r3, [pc, #352]	; (8018634 <RadioSetRxGenericConfig+0x2c8>)
 80184d2:	6819      	ldr	r1, [r3, #0]
 80184d4:	f107 0314 	add.w	r3, r7, #20
 80184d8:	4a57      	ldr	r2, [pc, #348]	; (8018638 <RadioSetRxGenericConfig+0x2cc>)
 80184da:	4618      	mov	r0, r3
 80184dc:	f001 fd16 	bl	8019f0c <RFW_Init>
 80184e0:	4603      	mov	r3, r0
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d002      	beq.n	80184ec <RadioSetRxGenericConfig+0x180>
            return -1;
 80184e6:	f04f 33ff 	mov.w	r3, #4294967295
 80184ea:	e0f9      	b.n	80186e0 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80184ec:	4b50      	ldr	r3, [pc, #320]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80184ee:	2200      	movs	r2, #0
 80184f0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80184f2:	4b4f      	ldr	r3, [pc, #316]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80184f4:	2201      	movs	r2, #1
 80184f6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80184f8:	4b4d      	ldr	r3, [pc, #308]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80184fa:	2200      	movs	r2, #0
 80184fc:	755a      	strb	r2, [r3, #21]
        {
 80184fe:	e00e      	b.n	801851e <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018506:	4b4a      	ldr	r3, [pc, #296]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018508:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018510:	4b47      	ldr	r3, [pc, #284]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018512:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801851a:	4b45      	ldr	r3, [pc, #276]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 801851c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801851e:	f7ff fa48 	bl	80179b2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018522:	2000      	movs	r0, #0
 8018524:	f7fe fbf2 	bl	8016d0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018528:	4844      	ldr	r0, [pc, #272]	; (801863c <RadioSetRxGenericConfig+0x2d0>)
 801852a:	f001 f80b 	bl	8019544 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801852e:	4844      	ldr	r0, [pc, #272]	; (8018640 <RadioSetRxGenericConfig+0x2d4>)
 8018530:	f001 f8da 	bl	80196e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018534:	f107 0320 	add.w	r3, r7, #32
 8018538:	4618      	mov	r0, r3
 801853a:	f000 fba2 	bl	8018c82 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801853e:	68bb      	ldr	r3, [r7, #8]
 8018540:	8b9b      	ldrh	r3, [r3, #28]
 8018542:	4618      	mov	r0, r3
 8018544:	f000 fbec 	bl	8018d20 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018548:	68bb      	ldr	r3, [r7, #8]
 801854a:	8b1b      	ldrh	r3, [r3, #24]
 801854c:	4618      	mov	r0, r3
 801854e:	f000 fbc7 	bl	8018ce0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018558:	fb03 f202 	mul.w	r2, r3, r2
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	689b      	ldr	r3, [r3, #8]
 8018560:	fbb2 f3f3 	udiv	r3, r2, r3
 8018564:	4a32      	ldr	r2, [pc, #200]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018566:	6093      	str	r3, [r2, #8]
        break;
 8018568:	e0b9      	b.n	80186de <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801856a:	68bb      	ldr	r3, [r7, #8]
 801856c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801856e:	2b00      	cmp	r3, #0
 8018570:	d102      	bne.n	8018578 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8018572:	f04f 33ff 	mov.w	r3, #4294967295
 8018576:	e0b3      	b.n	80186e0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018578:	68bb      	ldr	r3, [r7, #8]
 801857a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801857e:	2b01      	cmp	r3, #1
 8018580:	d104      	bne.n	801858c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018582:	68bb      	ldr	r3, [r7, #8]
 8018584:	695b      	ldr	r3, [r3, #20]
 8018586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801858a:	e002      	b.n	8018592 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801858c:	23ff      	movs	r3, #255	; 0xff
 801858e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018592:	68bb      	ldr	r3, [r7, #8]
 8018594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018596:	2b00      	cmp	r3, #0
 8018598:	bf14      	ite	ne
 801859a:	2301      	movne	r3, #1
 801859c:	2300      	moveq	r3, #0
 801859e:	b2db      	uxtb	r3, r3
 80185a0:	4618      	mov	r0, r3
 80185a2:	f000 fd35 	bl	8019010 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	b2db      	uxtb	r3, r3
 80185aa:	4618      	mov	r0, r3
 80185ac:	f000 fd3f 	bl	801902e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80185b0:	4b1f      	ldr	r3, [pc, #124]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80185b2:	2201      	movs	r2, #1
 80185b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80185be:	4b1c      	ldr	r3, [pc, #112]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80185c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80185c4:	68bb      	ldr	r3, [r7, #8]
 80185c6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80185ca:	4b19      	ldr	r3, [pc, #100]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80185cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80185d6:	4b16      	ldr	r3, [pc, #88]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80185d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80185dc:	68bb      	ldr	r3, [r7, #8]
 80185de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80185e2:	2b02      	cmp	r3, #2
 80185e4:	d010      	beq.n	8018608 <RadioSetRxGenericConfig+0x29c>
 80185e6:	2b02      	cmp	r3, #2
 80185e8:	dc2c      	bgt.n	8018644 <RadioSetRxGenericConfig+0x2d8>
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d002      	beq.n	80185f4 <RadioSetRxGenericConfig+0x288>
 80185ee:	2b01      	cmp	r3, #1
 80185f0:	d005      	beq.n	80185fe <RadioSetRxGenericConfig+0x292>
            break;
 80185f2:	e027      	b.n	8018644 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80185f4:	4b0e      	ldr	r3, [pc, #56]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 80185f6:	2200      	movs	r2, #0
 80185f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80185fc:	e023      	b.n	8018646 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80185fe:	4b0c      	ldr	r3, [pc, #48]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018600:	2201      	movs	r2, #1
 8018602:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018606:	e01e      	b.n	8018646 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801860e:	2b0b      	cmp	r3, #11
 8018610:	d004      	beq.n	801861c <RadioSetRxGenericConfig+0x2b0>
 8018612:	68bb      	ldr	r3, [r7, #8]
 8018614:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018618:	2b0c      	cmp	r3, #12
 801861a:	d104      	bne.n	8018626 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801861c:	4b04      	ldr	r3, [pc, #16]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 801861e:	2201      	movs	r2, #1
 8018620:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018624:	e00f      	b.n	8018646 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018626:	4b02      	ldr	r3, [pc, #8]	; (8018630 <RadioSetRxGenericConfig+0x2c4>)
 8018628:	2200      	movs	r2, #0
 801862a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801862e:	e00a      	b.n	8018646 <RadioSetRxGenericConfig+0x2da>
 8018630:	20001e3c 	.word	0x20001e3c
 8018634:	20001e38 	.word	0x20001e38
 8018638:	20001eb0 	.word	0x20001eb0
 801863c:	20001e74 	.word	0x20001e74
 8018640:	20001e4a 	.word	0x20001e4a
            break;
 8018644:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018646:	4b28      	ldr	r3, [pc, #160]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 8018648:	2201      	movs	r2, #1
 801864a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8018650:	4b25      	ldr	r3, [pc, #148]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 8018652:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018654:	68bb      	ldr	r3, [r7, #8]
 8018656:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801865a:	4b23      	ldr	r3, [pc, #140]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 801865c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801865e:	4a22      	ldr	r2, [pc, #136]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 8018660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018664:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801866c:	4b1e      	ldr	r3, [pc, #120]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 801866e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8018678:	4b1b      	ldr	r3, [pc, #108]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 801867a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801867e:	f7ff f998 	bl	80179b2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018682:	2001      	movs	r0, #1
 8018684:	f7fe fb42 	bl	8016d0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018688:	4818      	ldr	r0, [pc, #96]	; (80186ec <RadioSetRxGenericConfig+0x380>)
 801868a:	f000 ff5b 	bl	8019544 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801868e:	4818      	ldr	r0, [pc, #96]	; (80186f0 <RadioSetRxGenericConfig+0x384>)
 8018690:	f001 f82a 	bl	80196e8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018694:	4b14      	ldr	r3, [pc, #80]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 8018696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801869a:	2b01      	cmp	r3, #1
 801869c:	d10d      	bne.n	80186ba <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801869e:	f240 7036 	movw	r0, #1846	; 0x736
 80186a2:	f001 f97d 	bl	80199a0 <SUBGRF_ReadRegister>
 80186a6:	4603      	mov	r3, r0
 80186a8:	f023 0304 	bic.w	r3, r3, #4
 80186ac:	b2db      	uxtb	r3, r3
 80186ae:	4619      	mov	r1, r3
 80186b0:	f240 7036 	movw	r0, #1846	; 0x736
 80186b4:	f001 f960 	bl	8019978 <SUBGRF_WriteRegister>
 80186b8:	e00c      	b.n	80186d4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80186ba:	f240 7036 	movw	r0, #1846	; 0x736
 80186be:	f001 f96f 	bl	80199a0 <SUBGRF_ReadRegister>
 80186c2:	4603      	mov	r3, r0
 80186c4:	f043 0304 	orr.w	r3, r3, #4
 80186c8:	b2db      	uxtb	r3, r3
 80186ca:	4619      	mov	r1, r3
 80186cc:	f240 7036 	movw	r0, #1846	; 0x736
 80186d0:	f001 f952 	bl	8019978 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80186d4:	4b04      	ldr	r3, [pc, #16]	; (80186e8 <RadioSetRxGenericConfig+0x37c>)
 80186d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186da:	609a      	str	r2, [r3, #8]
        break;
 80186dc:	bf00      	nop
    }
    return status;
 80186de:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80186e0:	4618      	mov	r0, r3
 80186e2:	3730      	adds	r7, #48	; 0x30
 80186e4:	46bd      	mov	sp, r7
 80186e6:	bd80      	pop	{r7, pc}
 80186e8:	20001e3c 	.word	0x20001e3c
 80186ec:	20001e74 	.word	0x20001e74
 80186f0:	20001e4a 	.word	0x20001e4a

080186f4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b08e      	sub	sp, #56	; 0x38
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	60b9      	str	r1, [r7, #8]
 80186fc:	607b      	str	r3, [r7, #4]
 80186fe:	4603      	mov	r3, r0
 8018700:	73fb      	strb	r3, [r7, #15]
 8018702:	4613      	mov	r3, r2
 8018704:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018706:	2300      	movs	r3, #0
 8018708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801870a:	2300      	movs	r3, #0
 801870c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801870e:	f001 fc0a 	bl	8019f26 <RFW_DeInit>
    switch( modem )
 8018712:	7bfb      	ldrb	r3, [r7, #15]
 8018714:	2b03      	cmp	r3, #3
 8018716:	f200 8204 	bhi.w	8018b22 <RadioSetTxGenericConfig+0x42e>
 801871a:	a201      	add	r2, pc, #4	; (adr r2, 8018720 <RadioSetTxGenericConfig+0x2c>)
 801871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018720:	080188a5 	.word	0x080188a5
 8018724:	080189ed 	.word	0x080189ed
 8018728:	08018ae5 	.word	0x08018ae5
 801872c:	08018731 	.word	0x08018731
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018730:	68bb      	ldr	r3, [r7, #8]
 8018732:	7c9b      	ldrb	r3, [r3, #18]
 8018734:	2b08      	cmp	r3, #8
 8018736:	d902      	bls.n	801873e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8018738:	f04f 33ff 	mov.w	r3, #4294967295
 801873c:	e206      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801873e:	68bb      	ldr	r3, [r7, #8]
 8018740:	6899      	ldr	r1, [r3, #8]
 8018742:	68bb      	ldr	r3, [r7, #8]
 8018744:	7c9b      	ldrb	r3, [r3, #18]
 8018746:	b29a      	uxth	r2, r3
 8018748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801874c:	4618      	mov	r0, r3
 801874e:	f001 fcdd 	bl	801a10c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d102      	bne.n	8018760 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801875a:	f04f 33ff 	mov.w	r3, #4294967295
 801875e:	e1f5      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8018760:	68bb      	ldr	r3, [r7, #8]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	f242 7210 	movw	r2, #10000	; 0x2710
 8018768:	4293      	cmp	r3, r2
 801876a:	d813      	bhi.n	8018794 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801876c:	2302      	movs	r3, #2
 801876e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8018772:	4b99      	ldr	r3, [pc, #612]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018774:	2203      	movs	r2, #3
 8018776:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018778:	4b97      	ldr	r3, [pc, #604]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801877a:	2203      	movs	r2, #3
 801877c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	4a94      	ldr	r2, [pc, #592]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018786:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	7cda      	ldrb	r2, [r3, #19]
 801878c:	4b92      	ldr	r3, [pc, #584]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801878e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018792:	e017      	b.n	80187c4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8018794:	2300      	movs	r3, #0
 8018796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801879a:	4b8f      	ldr	r3, [pc, #572]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801879c:	2200      	movs	r2, #0
 801879e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80187a0:	4b8d      	ldr	r3, [pc, #564]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187a2:	2200      	movs	r2, #0
 80187a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80187a8:	68bb      	ldr	r3, [r7, #8]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	4a8a      	ldr	r2, [pc, #552]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187ae:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	7cda      	ldrb	r2, [r3, #19]
 80187b4:	4b88      	ldr	r3, [pc, #544]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	089b      	lsrs	r3, r3, #2
 80187c0:	4a85      	ldr	r2, [pc, #532]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187c2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80187c4:	68bb      	ldr	r3, [r7, #8]
 80187c6:	685b      	ldr	r3, [r3, #4]
 80187c8:	b29b      	uxth	r3, r3
 80187ca:	00db      	lsls	r3, r3, #3
 80187cc:	b29a      	uxth	r2, r3
 80187ce:	4b82      	ldr	r3, [pc, #520]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187d0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80187d2:	4b81      	ldr	r3, [pc, #516]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187d4:	2204      	movs	r2, #4
 80187d6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80187d8:	68bb      	ldr	r3, [r7, #8]
 80187da:	7c9b      	ldrb	r3, [r3, #18]
 80187dc:	00db      	lsls	r3, r3, #3
 80187de:	b2da      	uxtb	r2, r3
 80187e0:	4b7d      	ldr	r3, [pc, #500]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187e2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80187e4:	4b7c      	ldr	r3, [pc, #496]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80187e6:	2200      	movs	r2, #0
 80187e8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	7d9b      	ldrb	r3, [r3, #22]
 80187ee:	2b02      	cmp	r3, #2
 80187f0:	d003      	beq.n	80187fa <RadioSetTxGenericConfig+0x106>
 80187f2:	68bb      	ldr	r3, [r7, #8]
 80187f4:	7d1b      	ldrb	r3, [r3, #20]
 80187f6:	2b02      	cmp	r3, #2
 80187f8:	d12b      	bne.n	8018852 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	7d5b      	ldrb	r3, [r3, #21]
 80187fe:	2bf1      	cmp	r3, #241	; 0xf1
 8018800:	d00a      	beq.n	8018818 <RadioSetTxGenericConfig+0x124>
 8018802:	68bb      	ldr	r3, [r7, #8]
 8018804:	7d5b      	ldrb	r3, [r3, #21]
 8018806:	2bf2      	cmp	r3, #242	; 0xf2
 8018808:	d006      	beq.n	8018818 <RadioSetTxGenericConfig+0x124>
 801880a:	68bb      	ldr	r3, [r7, #8]
 801880c:	7d5b      	ldrb	r3, [r3, #21]
 801880e:	2b01      	cmp	r3, #1
 8018810:	d002      	beq.n	8018818 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8018812:	f04f 33ff 	mov.w	r3, #4294967295
 8018816:	e199      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801881c:	2301      	movs	r3, #1
 801881e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018822:	4b6e      	ldr	r3, [pc, #440]	; (80189dc <RadioSetTxGenericConfig+0x2e8>)
 8018824:	6819      	ldr	r1, [r3, #0]
 8018826:	f107 0320 	add.w	r3, r7, #32
 801882a:	4a6d      	ldr	r2, [pc, #436]	; (80189e0 <RadioSetTxGenericConfig+0x2ec>)
 801882c:	4618      	mov	r0, r3
 801882e:	f001 fb6d 	bl	8019f0c <RFW_Init>
 8018832:	4603      	mov	r3, r0
 8018834:	2b00      	cmp	r3, #0
 8018836:	d002      	beq.n	801883e <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8018838:	f04f 33ff 	mov.w	r3, #4294967295
 801883c:	e186      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801883e:	4b66      	ldr	r3, [pc, #408]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018840:	2200      	movs	r2, #0
 8018842:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018844:	4b64      	ldr	r3, [pc, #400]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018846:	2201      	movs	r2, #1
 8018848:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801884a:	4b63      	ldr	r3, [pc, #396]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801884c:	2200      	movs	r2, #0
 801884e:	755a      	strb	r2, [r3, #21]
        {
 8018850:	e00b      	b.n	801886a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	7d5a      	ldrb	r2, [r3, #21]
 8018856:	4b60      	ldr	r3, [pc, #384]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018858:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801885a:	68bb      	ldr	r3, [r7, #8]
 801885c:	7d9a      	ldrb	r2, [r3, #22]
 801885e:	4b5e      	ldr	r3, [pc, #376]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018860:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	7d1a      	ldrb	r2, [r3, #20]
 8018866:	4b5c      	ldr	r3, [pc, #368]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018868:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801886a:	f7ff f8a2 	bl	80179b2 <RadioStandby>
        RadioSetModem( radio_modem );
 801886e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018872:	4618      	mov	r0, r3
 8018874:	f7fe fa4a 	bl	8016d0c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018878:	485a      	ldr	r0, [pc, #360]	; (80189e4 <RadioSetTxGenericConfig+0x2f0>)
 801887a:	f000 fe63 	bl	8019544 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801887e:	485a      	ldr	r0, [pc, #360]	; (80189e8 <RadioSetTxGenericConfig+0x2f4>)
 8018880:	f000 ff32 	bl	80196e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018888:	4618      	mov	r0, r3
 801888a:	f000 f9fa 	bl	8018c82 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801888e:	68bb      	ldr	r3, [r7, #8]
 8018890:	8a1b      	ldrh	r3, [r3, #16]
 8018892:	4618      	mov	r0, r3
 8018894:	f000 fa44 	bl	8018d20 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8018898:	68bb      	ldr	r3, [r7, #8]
 801889a:	899b      	ldrh	r3, [r3, #12]
 801889c:	4618      	mov	r0, r3
 801889e:	f000 fa1f 	bl	8018ce0 <SUBGRF_SetCrcPolynomial>
        break;
 80188a2:	e13f      	b.n	8018b24 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d102      	bne.n	80188b2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80188ac:	f04f 33ff 	mov.w	r3, #4294967295
 80188b0:	e14c      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80188b2:	68bb      	ldr	r3, [r7, #8]
 80188b4:	7c9b      	ldrb	r3, [r3, #18]
 80188b6:	2b08      	cmp	r3, #8
 80188b8:	d902      	bls.n	80188c0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80188ba:	f04f 33ff 	mov.w	r3, #4294967295
 80188be:	e145      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 80188c0:	68bb      	ldr	r3, [r7, #8]
 80188c2:	6899      	ldr	r1, [r3, #8]
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	7c9b      	ldrb	r3, [r3, #18]
 80188c8:	b29a      	uxth	r2, r3
 80188ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80188ce:	4618      	mov	r0, r3
 80188d0:	f001 fc1c 	bl	801a10c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80188d4:	4b40      	ldr	r3, [pc, #256]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80188d6:	2200      	movs	r2, #0
 80188d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	4a3d      	ldr	r2, [pc, #244]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80188e2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	7cda      	ldrb	r2, [r3, #19]
 80188e8:	4b3b      	ldr	r3, [pc, #236]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80188ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	699b      	ldr	r3, [r3, #24]
 80188f2:	4a39      	ldr	r2, [pc, #228]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80188f4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80188f6:	4b38      	ldr	r3, [pc, #224]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 80188f8:	2200      	movs	r2, #0
 80188fa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	685b      	ldr	r3, [r3, #4]
 8018900:	b29b      	uxth	r3, r3
 8018902:	00db      	lsls	r3, r3, #3
 8018904:	b29a      	uxth	r2, r3
 8018906:	4b34      	ldr	r3, [pc, #208]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018908:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801890a:	4b33      	ldr	r3, [pc, #204]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801890c:	2204      	movs	r2, #4
 801890e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018910:	68bb      	ldr	r3, [r7, #8]
 8018912:	7c9b      	ldrb	r3, [r3, #18]
 8018914:	00db      	lsls	r3, r3, #3
 8018916:	b2da      	uxtb	r2, r3
 8018918:	4b2f      	ldr	r3, [pc, #188]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801891a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801891c:	4b2e      	ldr	r3, [pc, #184]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801891e:	2200      	movs	r2, #0
 8018920:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	7d9b      	ldrb	r3, [r3, #22]
 8018926:	2b02      	cmp	r3, #2
 8018928:	d003      	beq.n	8018932 <RadioSetTxGenericConfig+0x23e>
 801892a:	68bb      	ldr	r3, [r7, #8]
 801892c:	7d1b      	ldrb	r3, [r3, #20]
 801892e:	2b02      	cmp	r3, #2
 8018930:	d12a      	bne.n	8018988 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	7d5b      	ldrb	r3, [r3, #21]
 8018936:	2bf1      	cmp	r3, #241	; 0xf1
 8018938:	d00a      	beq.n	8018950 <RadioSetTxGenericConfig+0x25c>
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	7d5b      	ldrb	r3, [r3, #21]
 801893e:	2bf2      	cmp	r3, #242	; 0xf2
 8018940:	d006      	beq.n	8018950 <RadioSetTxGenericConfig+0x25c>
 8018942:	68bb      	ldr	r3, [r7, #8]
 8018944:	7d5b      	ldrb	r3, [r3, #21]
 8018946:	2b01      	cmp	r3, #1
 8018948:	d002      	beq.n	8018950 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801894a:	f04f 33ff 	mov.w	r3, #4294967295
 801894e:	e0fd      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8018950:	2301      	movs	r3, #1
 8018952:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8018954:	68bb      	ldr	r3, [r7, #8]
 8018956:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018958:	4b20      	ldr	r3, [pc, #128]	; (80189dc <RadioSetTxGenericConfig+0x2e8>)
 801895a:	6819      	ldr	r1, [r3, #0]
 801895c:	f107 0314 	add.w	r3, r7, #20
 8018960:	4a1f      	ldr	r2, [pc, #124]	; (80189e0 <RadioSetTxGenericConfig+0x2ec>)
 8018962:	4618      	mov	r0, r3
 8018964:	f001 fad2 	bl	8019f0c <RFW_Init>
 8018968:	4603      	mov	r3, r0
 801896a:	2b00      	cmp	r3, #0
 801896c:	d002      	beq.n	8018974 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801896e:	f04f 33ff 	mov.w	r3, #4294967295
 8018972:	e0eb      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018974:	4b18      	ldr	r3, [pc, #96]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018976:	2200      	movs	r2, #0
 8018978:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801897a:	4b17      	ldr	r3, [pc, #92]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801897c:	2201      	movs	r2, #1
 801897e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018980:	4b15      	ldr	r3, [pc, #84]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018982:	2200      	movs	r2, #0
 8018984:	755a      	strb	r2, [r3, #21]
        {
 8018986:	e00b      	b.n	80189a0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018988:	68bb      	ldr	r3, [r7, #8]
 801898a:	7d5a      	ldrb	r2, [r3, #21]
 801898c:	4b12      	ldr	r3, [pc, #72]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801898e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	7d9a      	ldrb	r2, [r3, #22]
 8018994:	4b10      	ldr	r3, [pc, #64]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 8018996:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	7d1a      	ldrb	r2, [r3, #20]
 801899c:	4b0e      	ldr	r3, [pc, #56]	; (80189d8 <RadioSetTxGenericConfig+0x2e4>)
 801899e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80189a0:	f7ff f807 	bl	80179b2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80189a4:	2000      	movs	r0, #0
 80189a6:	f7fe f9b1 	bl	8016d0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80189aa:	480e      	ldr	r0, [pc, #56]	; (80189e4 <RadioSetTxGenericConfig+0x2f0>)
 80189ac:	f000 fdca 	bl	8019544 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189b0:	480d      	ldr	r0, [pc, #52]	; (80189e8 <RadioSetTxGenericConfig+0x2f4>)
 80189b2:	f000 fe99 	bl	80196e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80189b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80189ba:	4618      	mov	r0, r3
 80189bc:	f000 f961 	bl	8018c82 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80189c0:	68bb      	ldr	r3, [r7, #8]
 80189c2:	8a1b      	ldrh	r3, [r3, #16]
 80189c4:	4618      	mov	r0, r3
 80189c6:	f000 f9ab 	bl	8018d20 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	899b      	ldrh	r3, [r3, #12]
 80189ce:	4618      	mov	r0, r3
 80189d0:	f000 f986 	bl	8018ce0 <SUBGRF_SetCrcPolynomial>
        break;
 80189d4:	e0a6      	b.n	8018b24 <RadioSetTxGenericConfig+0x430>
 80189d6:	bf00      	nop
 80189d8:	20001e3c 	.word	0x20001e3c
 80189dc:	20001e38 	.word	0x20001e38
 80189e0:	20001e98 	.word	0x20001e98
 80189e4:	20001e74 	.word	0x20001e74
 80189e8:	20001e4a 	.word	0x20001e4a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80189ec:	4b59      	ldr	r3, [pc, #356]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 80189ee:	2201      	movs	r2, #1
 80189f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	781a      	ldrb	r2, [r3, #0]
 80189f8:	4b56      	ldr	r3, [pc, #344]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 80189fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	785a      	ldrb	r2, [r3, #1]
 8018a02:	4b54      	ldr	r3, [pc, #336]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	789a      	ldrb	r2, [r3, #2]
 8018a0c:	4b51      	ldr	r3, [pc, #324]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018a12:	68bb      	ldr	r3, [r7, #8]
 8018a14:	78db      	ldrb	r3, [r3, #3]
 8018a16:	2b02      	cmp	r3, #2
 8018a18:	d010      	beq.n	8018a3c <RadioSetTxGenericConfig+0x348>
 8018a1a:	2b02      	cmp	r3, #2
 8018a1c:	dc20      	bgt.n	8018a60 <RadioSetTxGenericConfig+0x36c>
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d002      	beq.n	8018a28 <RadioSetTxGenericConfig+0x334>
 8018a22:	2b01      	cmp	r3, #1
 8018a24:	d005      	beq.n	8018a32 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8018a26:	e01b      	b.n	8018a60 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018a28:	4b4a      	ldr	r3, [pc, #296]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018a30:	e017      	b.n	8018a62 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018a32:	4b48      	ldr	r3, [pc, #288]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a34:	2201      	movs	r2, #1
 8018a36:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018a3a:	e012      	b.n	8018a62 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	2b0b      	cmp	r3, #11
 8018a42:	d003      	beq.n	8018a4c <RadioSetTxGenericConfig+0x358>
 8018a44:	68bb      	ldr	r3, [r7, #8]
 8018a46:	781b      	ldrb	r3, [r3, #0]
 8018a48:	2b0c      	cmp	r3, #12
 8018a4a:	d104      	bne.n	8018a56 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018a4c:	4b41      	ldr	r3, [pc, #260]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a4e:	2201      	movs	r2, #1
 8018a50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018a54:	e005      	b.n	8018a62 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018a56:	4b3f      	ldr	r3, [pc, #252]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a58:	2200      	movs	r2, #0
 8018a5a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018a5e:	e000      	b.n	8018a62 <RadioSetTxGenericConfig+0x36e>
            break;
 8018a60:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018a62:	4b3c      	ldr	r3, [pc, #240]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a64:	2201      	movs	r2, #1
 8018a66:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018a68:	68bb      	ldr	r3, [r7, #8]
 8018a6a:	889a      	ldrh	r2, [r3, #4]
 8018a6c:	4b39      	ldr	r3, [pc, #228]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a6e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	799a      	ldrb	r2, [r3, #6]
 8018a74:	4b37      	ldr	r3, [pc, #220]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a76:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018a78:	68bb      	ldr	r3, [r7, #8]
 8018a7a:	79da      	ldrb	r2, [r3, #7]
 8018a7c:	4b35      	ldr	r3, [pc, #212]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a7e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	7a1a      	ldrb	r2, [r3, #8]
 8018a86:	4b33      	ldr	r3, [pc, #204]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8018a8c:	f7fe ff91 	bl	80179b2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018a90:	2001      	movs	r0, #1
 8018a92:	f7fe f93b 	bl	8016d0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a96:	4830      	ldr	r0, [pc, #192]	; (8018b58 <RadioSetTxGenericConfig+0x464>)
 8018a98:	f000 fd54 	bl	8019544 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a9c:	482f      	ldr	r0, [pc, #188]	; (8018b5c <RadioSetTxGenericConfig+0x468>)
 8018a9e:	f000 fe23 	bl	80196e8 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018aa2:	4b2c      	ldr	r3, [pc, #176]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018aa8:	2b06      	cmp	r3, #6
 8018aaa:	d10d      	bne.n	8018ac8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018aac:	f640 0089 	movw	r0, #2185	; 0x889
 8018ab0:	f000 ff76 	bl	80199a0 <SUBGRF_ReadRegister>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	f023 0304 	bic.w	r3, r3, #4
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	4619      	mov	r1, r3
 8018abe:	f640 0089 	movw	r0, #2185	; 0x889
 8018ac2:	f000 ff59 	bl	8019978 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8018ac6:	e02d      	b.n	8018b24 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018ac8:	f640 0089 	movw	r0, #2185	; 0x889
 8018acc:	f000 ff68 	bl	80199a0 <SUBGRF_ReadRegister>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	f043 0304 	orr.w	r3, r3, #4
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	4619      	mov	r1, r3
 8018ada:	f640 0089 	movw	r0, #2185	; 0x889
 8018ade:	f000 ff4b 	bl	8019978 <SUBGRF_WriteRegister>
        break;
 8018ae2:	e01f      	b.n	8018b24 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018ae4:	68bb      	ldr	r3, [r7, #8]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d004      	beq.n	8018af6 <RadioSetTxGenericConfig+0x402>
 8018aec:	68bb      	ldr	r3, [r7, #8]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018af4:	d902      	bls.n	8018afc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8018af6:	f04f 33ff 	mov.w	r3, #4294967295
 8018afa:	e027      	b.n	8018b4c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8018afc:	2003      	movs	r0, #3
 8018afe:	f7fe f905 	bl	8016d0c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018b02:	4b14      	ldr	r3, [pc, #80]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018b04:	2202      	movs	r2, #2
 8018b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018b0a:	68bb      	ldr	r3, [r7, #8]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	4a11      	ldr	r2, [pc, #68]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018b10:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018b12:	4b10      	ldr	r3, [pc, #64]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018b14:	2216      	movs	r2, #22
 8018b16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b1a:	480f      	ldr	r0, [pc, #60]	; (8018b58 <RadioSetTxGenericConfig+0x464>)
 8018b1c:	f000 fd12 	bl	8019544 <SUBGRF_SetModulationParams>
        break;
 8018b20:	e000      	b.n	8018b24 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8018b22:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f001 f841 	bl	8019bb0 <SUBGRF_SetRfTxPower>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	461a      	mov	r2, r3
 8018b32:	4b08      	ldr	r3, [pc, #32]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018b34:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018b38:	4b06      	ldr	r3, [pc, #24]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018b3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f001 fa05 	bl	8019f4e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018b44:	4a03      	ldr	r2, [pc, #12]	; (8018b54 <RadioSetTxGenericConfig+0x460>)
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	6053      	str	r3, [r2, #4]
    return 0;
 8018b4a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	3738      	adds	r7, #56	; 0x38
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd80      	pop	{r7, pc}
 8018b54:	20001e3c 	.word	0x20001e3c
 8018b58:	20001e74 	.word	0x20001e74
 8018b5c:	20001e4a 	.word	0x20001e4a

08018b60 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b084      	sub	sp, #16
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d002      	beq.n	8018b74 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018b6e:	4a1a      	ldr	r2, [pc, #104]	; (8018bd8 <SUBGRF_Init+0x78>)
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018b74:	f7e8 ff0e 	bl	8001994 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018b78:	2002      	movs	r0, #2
 8018b7a:	f001 f8e5 	bl	8019d48 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018b7e:	4b17      	ldr	r3, [pc, #92]	; (8018bdc <SUBGRF_Init+0x7c>)
 8018b80:	2200      	movs	r2, #0
 8018b82:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018b84:	2000      	movs	r0, #0
 8018b86:	f000 f977 	bl	8018e78 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018b8a:	f7f2 f847 	bl	800ac1c <RBI_IsTCXO>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	2b01      	cmp	r3, #1
 8018b92:	d10e      	bne.n	8018bb2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018b94:	2140      	movs	r1, #64	; 0x40
 8018b96:	2001      	movs	r0, #1
 8018b98:	f000 fb78 	bl	801928c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018b9c:	2100      	movs	r1, #0
 8018b9e:	f640 1011 	movw	r0, #2321	; 0x911
 8018ba2:	f000 fee9 	bl	8019978 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018ba6:	237f      	movs	r3, #127	; 0x7f
 8018ba8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018baa:	7b38      	ldrb	r0, [r7, #12]
 8018bac:	f000 fa85 	bl	80190ba <SUBGRF_Calibrate>
 8018bb0:	e009      	b.n	8018bc6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018bb2:	2120      	movs	r1, #32
 8018bb4:	f640 1011 	movw	r0, #2321	; 0x911
 8018bb8:	f000 fede 	bl	8019978 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018bbc:	2120      	movs	r1, #32
 8018bbe:	f640 1012 	movw	r0, #2322	; 0x912
 8018bc2:	f000 fed9 	bl	8019978 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018bc6:	f7f2 f80d 	bl	800abe4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018bca:	4b05      	ldr	r3, [pc, #20]	; (8018be0 <SUBGRF_Init+0x80>)
 8018bcc:	2201      	movs	r2, #1
 8018bce:	701a      	strb	r2, [r3, #0]
}
 8018bd0:	bf00      	nop
 8018bd2:	3710      	adds	r7, #16
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}
 8018bd8:	20001ed4 	.word	0x20001ed4
 8018bdc:	20001ed0 	.word	0x20001ed0
 8018be0:	20001ec8 	.word	0x20001ec8

08018be4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018be4:	b480      	push	{r7}
 8018be6:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018be8:	4b02      	ldr	r3, [pc, #8]	; (8018bf4 <SUBGRF_GetOperatingMode+0x10>)
 8018bea:	781b      	ldrb	r3, [r3, #0]
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bc80      	pop	{r7}
 8018bf2:	4770      	bx	lr
 8018bf4:	20001ec8 	.word	0x20001ec8

08018bf8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	460b      	mov	r3, r1
 8018c02:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018c04:	78fb      	ldrb	r3, [r7, #3]
 8018c06:	461a      	mov	r2, r3
 8018c08:	6879      	ldr	r1, [r7, #4]
 8018c0a:	2000      	movs	r0, #0
 8018c0c:	f000 ff20 	bl	8019a50 <SUBGRF_WriteBuffer>
}
 8018c10:	bf00      	nop
 8018c12:	3708      	adds	r7, #8
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}

08018c18 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b086      	sub	sp, #24
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	60f8      	str	r0, [r7, #12]
 8018c20:	60b9      	str	r1, [r7, #8]
 8018c22:	4613      	mov	r3, r2
 8018c24:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018c26:	2300      	movs	r3, #0
 8018c28:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018c2a:	f107 0317 	add.w	r3, r7, #23
 8018c2e:	4619      	mov	r1, r3
 8018c30:	68b8      	ldr	r0, [r7, #8]
 8018c32:	f000 fe23 	bl	801987c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	781b      	ldrb	r3, [r3, #0]
 8018c3a:	79fa      	ldrb	r2, [r7, #7]
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	d201      	bcs.n	8018c44 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018c40:	2301      	movs	r3, #1
 8018c42:	e007      	b.n	8018c54 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018c44:	7df8      	ldrb	r0, [r7, #23]
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	781b      	ldrb	r3, [r3, #0]
 8018c4a:	461a      	mov	r2, r3
 8018c4c:	68f9      	ldr	r1, [r7, #12]
 8018c4e:	f000 ff21 	bl	8019a94 <SUBGRF_ReadBuffer>

    return 0;
 8018c52:	2300      	movs	r3, #0
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	3718      	adds	r7, #24
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}

08018c5c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b084      	sub	sp, #16
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	460b      	mov	r3, r1
 8018c66:	607a      	str	r2, [r7, #4]
 8018c68:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018c6a:	7afb      	ldrb	r3, [r7, #11]
 8018c6c:	4619      	mov	r1, r3
 8018c6e:	68f8      	ldr	r0, [r7, #12]
 8018c70:	f7ff ffc2 	bl	8018bf8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f000 f91b 	bl	8018eb0 <SUBGRF_SetTx>
}
 8018c7a:	bf00      	nop
 8018c7c:	3710      	adds	r7, #16
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}

08018c82 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018c82:	b580      	push	{r7, lr}
 8018c84:	b082      	sub	sp, #8
 8018c86:	af00      	add	r7, sp, #0
 8018c88:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018c8a:	2208      	movs	r2, #8
 8018c8c:	6879      	ldr	r1, [r7, #4]
 8018c8e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8018c92:	f000 fe99 	bl	80199c8 <SUBGRF_WriteRegisters>
    return 0;
 8018c96:	2300      	movs	r3, #0
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	3708      	adds	r7, #8
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd80      	pop	{r7, pc}

08018ca0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b084      	sub	sp, #16
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018caa:	88fb      	ldrh	r3, [r7, #6]
 8018cac:	0a1b      	lsrs	r3, r3, #8
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	b2db      	uxtb	r3, r3
 8018cb2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018cb4:	88fb      	ldrh	r3, [r7, #6]
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018cba:	f000 fb6b 	bl	8019394 <SUBGRF_GetPacketType>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d108      	bne.n	8018cd6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018cc4:	f107 030c 	add.w	r3, r7, #12
 8018cc8:	2202      	movs	r2, #2
 8018cca:	4619      	mov	r1, r3
 8018ccc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018cd0:	f000 fe7a 	bl	80199c8 <SUBGRF_WriteRegisters>
            break;
 8018cd4:	e000      	b.n	8018cd8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018cd6:	bf00      	nop
    }
}
 8018cd8:	bf00      	nop
 8018cda:	3710      	adds	r7, #16
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	bd80      	pop	{r7, pc}

08018ce0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b084      	sub	sp, #16
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018cea:	88fb      	ldrh	r3, [r7, #6]
 8018cec:	0a1b      	lsrs	r3, r3, #8
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018cf4:	88fb      	ldrh	r3, [r7, #6]
 8018cf6:	b2db      	uxtb	r3, r3
 8018cf8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018cfa:	f000 fb4b 	bl	8019394 <SUBGRF_GetPacketType>
 8018cfe:	4603      	mov	r3, r0
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d108      	bne.n	8018d16 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018d04:	f107 030c 	add.w	r3, r7, #12
 8018d08:	2202      	movs	r2, #2
 8018d0a:	4619      	mov	r1, r3
 8018d0c:	f240 60be 	movw	r0, #1726	; 0x6be
 8018d10:	f000 fe5a 	bl	80199c8 <SUBGRF_WriteRegisters>
            break;
 8018d14:	e000      	b.n	8018d18 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018d16:	bf00      	nop
    }
}
 8018d18:	bf00      	nop
 8018d1a:	3710      	adds	r7, #16
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b084      	sub	sp, #16
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	4603      	mov	r3, r0
 8018d28:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018d2e:	f000 fb31 	bl	8019394 <SUBGRF_GetPacketType>
 8018d32:	4603      	mov	r3, r0
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d121      	bne.n	8018d7c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018d38:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018d3c:	f000 fe30 	bl	80199a0 <SUBGRF_ReadRegister>
 8018d40:	4603      	mov	r3, r0
 8018d42:	f023 0301 	bic.w	r3, r3, #1
 8018d46:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018d48:	88fb      	ldrh	r3, [r7, #6]
 8018d4a:	0a1b      	lsrs	r3, r3, #8
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	b25b      	sxtb	r3, r3
 8018d50:	f003 0301 	and.w	r3, r3, #1
 8018d54:	b25a      	sxtb	r2, r3
 8018d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d5a:	4313      	orrs	r3, r2
 8018d5c:	b25b      	sxtb	r3, r3
 8018d5e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018d60:	7bfb      	ldrb	r3, [r7, #15]
 8018d62:	4619      	mov	r1, r3
 8018d64:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018d68:	f000 fe06 	bl	8019978 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018d6c:	88fb      	ldrh	r3, [r7, #6]
 8018d6e:	b2db      	uxtb	r3, r3
 8018d70:	4619      	mov	r1, r3
 8018d72:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018d76:	f000 fdff 	bl	8019978 <SUBGRF_WriteRegister>
            break;
 8018d7a:	e000      	b.n	8018d7e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018d7c:	bf00      	nop
    }
}
 8018d7e:	bf00      	nop
 8018d80:	3710      	adds	r7, #16
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}

08018d86 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018d86:	b580      	push	{r7, lr}
 8018d88:	b082      	sub	sp, #8
 8018d8a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018d90:	2300      	movs	r3, #0
 8018d92:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018d94:	2300      	movs	r3, #0
 8018d96:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018d98:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018d9c:	f000 fe00 	bl	80199a0 <SUBGRF_ReadRegister>
 8018da0:	4603      	mov	r3, r0
 8018da2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018da4:	79fb      	ldrb	r3, [r7, #7]
 8018da6:	f023 0301 	bic.w	r3, r3, #1
 8018daa:	b2db      	uxtb	r3, r3
 8018dac:	4619      	mov	r1, r3
 8018dae:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018db2:	f000 fde1 	bl	8019978 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018db6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018dba:	f000 fdf1 	bl	80199a0 <SUBGRF_ReadRegister>
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018dc2:	79bb      	ldrb	r3, [r7, #6]
 8018dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018dc8:	b2db      	uxtb	r3, r3
 8018dca:	4619      	mov	r1, r3
 8018dcc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018dd0:	f000 fdd2 	bl	8019978 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018dd4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018dd8:	f000 f88a 	bl	8018ef0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018ddc:	463b      	mov	r3, r7
 8018dde:	2204      	movs	r2, #4
 8018de0:	4619      	mov	r1, r3
 8018de2:	f640 0019 	movw	r0, #2073	; 0x819
 8018de6:	f000 fe11 	bl	8019a0c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018dea:	2000      	movs	r0, #0
 8018dec:	f000 f844 	bl	8018e78 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018df0:	79fb      	ldrb	r3, [r7, #7]
 8018df2:	4619      	mov	r1, r3
 8018df4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018df8:	f000 fdbe 	bl	8019978 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018dfc:	79bb      	ldrb	r3, [r7, #6]
 8018dfe:	4619      	mov	r1, r3
 8018e00:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018e04:	f000 fdb8 	bl	8019978 <SUBGRF_WriteRegister>

    return number;
 8018e08:	683b      	ldr	r3, [r7, #0]
}
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	3708      	adds	r7, #8
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	bd80      	pop	{r7, pc}
	...

08018e14 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b084      	sub	sp, #16
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018e1c:	2000      	movs	r0, #0
 8018e1e:	f7f1 fee8 	bl	800abf2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018e22:	2002      	movs	r0, #2
 8018e24:	f000 ff90 	bl	8019d48 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018e28:	793b      	ldrb	r3, [r7, #4]
 8018e2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018e2e:	b2db      	uxtb	r3, r3
 8018e30:	009b      	lsls	r3, r3, #2
 8018e32:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018e34:	793b      	ldrb	r3, [r7, #4]
 8018e36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018e3a:	b2db      	uxtb	r3, r3
 8018e3c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018e3e:	b25b      	sxtb	r3, r3
 8018e40:	4313      	orrs	r3, r2
 8018e42:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018e44:	793b      	ldrb	r3, [r7, #4]
 8018e46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018e4e:	4313      	orrs	r3, r2
 8018e50:	b25b      	sxtb	r3, r3
 8018e52:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018e54:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018e56:	f107 030f 	add.w	r3, r7, #15
 8018e5a:	2201      	movs	r2, #1
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	2084      	movs	r0, #132	; 0x84
 8018e60:	f000 fe3a 	bl	8019ad8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018e64:	4b03      	ldr	r3, [pc, #12]	; (8018e74 <SUBGRF_SetSleep+0x60>)
 8018e66:	2200      	movs	r2, #0
 8018e68:	701a      	strb	r2, [r3, #0]
}
 8018e6a:	bf00      	nop
 8018e6c:	3710      	adds	r7, #16
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	bd80      	pop	{r7, pc}
 8018e72:	bf00      	nop
 8018e74:	20001ec8 	.word	0x20001ec8

08018e78 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b082      	sub	sp, #8
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	4603      	mov	r3, r0
 8018e80:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018e82:	1dfb      	adds	r3, r7, #7
 8018e84:	2201      	movs	r2, #1
 8018e86:	4619      	mov	r1, r3
 8018e88:	2080      	movs	r0, #128	; 0x80
 8018e8a:	f000 fe25 	bl	8019ad8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018e8e:	79fb      	ldrb	r3, [r7, #7]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d103      	bne.n	8018e9c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018e94:	4b05      	ldr	r3, [pc, #20]	; (8018eac <SUBGRF_SetStandby+0x34>)
 8018e96:	2201      	movs	r2, #1
 8018e98:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018e9a:	e002      	b.n	8018ea2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018e9c:	4b03      	ldr	r3, [pc, #12]	; (8018eac <SUBGRF_SetStandby+0x34>)
 8018e9e:	2202      	movs	r2, #2
 8018ea0:	701a      	strb	r2, [r3, #0]
}
 8018ea2:	bf00      	nop
 8018ea4:	3708      	adds	r7, #8
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}
 8018eaa:	bf00      	nop
 8018eac:	20001ec8 	.word	0x20001ec8

08018eb0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b084      	sub	sp, #16
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018eb8:	4b0c      	ldr	r3, [pc, #48]	; (8018eec <SUBGRF_SetTx+0x3c>)
 8018eba:	2204      	movs	r2, #4
 8018ebc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	0c1b      	lsrs	r3, r3, #16
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	0a1b      	lsrs	r3, r3, #8
 8018eca:	b2db      	uxtb	r3, r3
 8018ecc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	b2db      	uxtb	r3, r3
 8018ed2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018ed4:	f107 030c 	add.w	r3, r7, #12
 8018ed8:	2203      	movs	r2, #3
 8018eda:	4619      	mov	r1, r3
 8018edc:	2083      	movs	r0, #131	; 0x83
 8018ede:	f000 fdfb 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8018ee2:	bf00      	nop
 8018ee4:	3710      	adds	r7, #16
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}
 8018eea:	bf00      	nop
 8018eec:	20001ec8 	.word	0x20001ec8

08018ef0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b084      	sub	sp, #16
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018ef8:	4b0c      	ldr	r3, [pc, #48]	; (8018f2c <SUBGRF_SetRx+0x3c>)
 8018efa:	2205      	movs	r2, #5
 8018efc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	0c1b      	lsrs	r3, r3, #16
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	0a1b      	lsrs	r3, r3, #8
 8018f0a:	b2db      	uxtb	r3, r3
 8018f0c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018f14:	f107 030c 	add.w	r3, r7, #12
 8018f18:	2203      	movs	r2, #3
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	2082      	movs	r0, #130	; 0x82
 8018f1e:	f000 fddb 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8018f22:	bf00      	nop
 8018f24:	3710      	adds	r7, #16
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bd80      	pop	{r7, pc}
 8018f2a:	bf00      	nop
 8018f2c:	20001ec8 	.word	0x20001ec8

08018f30 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b084      	sub	sp, #16
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018f38:	4b0e      	ldr	r3, [pc, #56]	; (8018f74 <SUBGRF_SetRxBoosted+0x44>)
 8018f3a:	2205      	movs	r2, #5
 8018f3c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018f3e:	2197      	movs	r1, #151	; 0x97
 8018f40:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018f44:	f000 fd18 	bl	8019978 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	0c1b      	lsrs	r3, r3, #16
 8018f4c:	b2db      	uxtb	r3, r3
 8018f4e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	0a1b      	lsrs	r3, r3, #8
 8018f54:	b2db      	uxtb	r3, r3
 8018f56:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018f5e:	f107 030c 	add.w	r3, r7, #12
 8018f62:	2203      	movs	r2, #3
 8018f64:	4619      	mov	r1, r3
 8018f66:	2082      	movs	r0, #130	; 0x82
 8018f68:	f000 fdb6 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8018f6c:	bf00      	nop
 8018f6e:	3710      	adds	r7, #16
 8018f70:	46bd      	mov	sp, r7
 8018f72:	bd80      	pop	{r7, pc}
 8018f74:	20001ec8 	.word	0x20001ec8

08018f78 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b084      	sub	sp, #16
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
 8018f80:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	0c1b      	lsrs	r3, r3, #16
 8018f86:	b2db      	uxtb	r3, r3
 8018f88:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	0a1b      	lsrs	r3, r3, #8
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	b2db      	uxtb	r3, r3
 8018f96:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	0c1b      	lsrs	r3, r3, #16
 8018f9c:	b2db      	uxtb	r3, r3
 8018f9e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018fa0:	683b      	ldr	r3, [r7, #0]
 8018fa2:	0a1b      	lsrs	r3, r3, #8
 8018fa4:	b2db      	uxtb	r3, r3
 8018fa6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	b2db      	uxtb	r3, r3
 8018fac:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018fae:	f107 0308 	add.w	r3, r7, #8
 8018fb2:	2206      	movs	r2, #6
 8018fb4:	4619      	mov	r1, r3
 8018fb6:	2094      	movs	r0, #148	; 0x94
 8018fb8:	f000 fd8e 	bl	8019ad8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018fbc:	4b03      	ldr	r3, [pc, #12]	; (8018fcc <SUBGRF_SetRxDutyCycle+0x54>)
 8018fbe:	2206      	movs	r2, #6
 8018fc0:	701a      	strb	r2, [r3, #0]
}
 8018fc2:	bf00      	nop
 8018fc4:	3710      	adds	r7, #16
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}
 8018fca:	bf00      	nop
 8018fcc:	20001ec8 	.word	0x20001ec8

08018fd0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	2100      	movs	r1, #0
 8018fd8:	20c5      	movs	r0, #197	; 0xc5
 8018fda:	f000 fd7d 	bl	8019ad8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018fde:	4b02      	ldr	r3, [pc, #8]	; (8018fe8 <SUBGRF_SetCad+0x18>)
 8018fe0:	2207      	movs	r2, #7
 8018fe2:	701a      	strb	r2, [r3, #0]
}
 8018fe4:	bf00      	nop
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	20001ec8 	.word	0x20001ec8

08018fec <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	2100      	movs	r1, #0
 8018ff4:	20d1      	movs	r0, #209	; 0xd1
 8018ff6:	f000 fd6f 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8018ffa:	bf00      	nop
 8018ffc:	bd80      	pop	{r7, pc}

08018ffe <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018ffe:	b580      	push	{r7, lr}
 8019000:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019002:	2200      	movs	r2, #0
 8019004:	2100      	movs	r1, #0
 8019006:	20d2      	movs	r0, #210	; 0xd2
 8019008:	f000 fd66 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 801900c:	bf00      	nop
 801900e:	bd80      	pop	{r7, pc}

08019010 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b082      	sub	sp, #8
 8019014:	af00      	add	r7, sp, #0
 8019016:	4603      	mov	r3, r0
 8019018:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801901a:	1dfb      	adds	r3, r7, #7
 801901c:	2201      	movs	r2, #1
 801901e:	4619      	mov	r1, r3
 8019020:	209f      	movs	r0, #159	; 0x9f
 8019022:	f000 fd59 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8019026:	bf00      	nop
 8019028:	3708      	adds	r7, #8
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}

0801902e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801902e:	b580      	push	{r7, lr}
 8019030:	b084      	sub	sp, #16
 8019032:	af00      	add	r7, sp, #0
 8019034:	4603      	mov	r3, r0
 8019036:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019038:	1dfb      	adds	r3, r7, #7
 801903a:	2201      	movs	r2, #1
 801903c:	4619      	mov	r1, r3
 801903e:	20a0      	movs	r0, #160	; 0xa0
 8019040:	f000 fd4a 	bl	8019ad8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019044:	79fb      	ldrb	r3, [r7, #7]
 8019046:	2b3f      	cmp	r3, #63	; 0x3f
 8019048:	d91c      	bls.n	8019084 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801904a:	79fb      	ldrb	r3, [r7, #7]
 801904c:	085b      	lsrs	r3, r3, #1
 801904e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019050:	2300      	movs	r3, #0
 8019052:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019054:	2300      	movs	r3, #0
 8019056:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019058:	e005      	b.n	8019066 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801905a:	7bfb      	ldrb	r3, [r7, #15]
 801905c:	089b      	lsrs	r3, r3, #2
 801905e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019060:	7bbb      	ldrb	r3, [r7, #14]
 8019062:	3301      	adds	r3, #1
 8019064:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019066:	7bfb      	ldrb	r3, [r7, #15]
 8019068:	2b1f      	cmp	r3, #31
 801906a:	d8f6      	bhi.n	801905a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801906c:	7bfb      	ldrb	r3, [r7, #15]
 801906e:	00db      	lsls	r3, r3, #3
 8019070:	b2da      	uxtb	r2, r3
 8019072:	7bbb      	ldrb	r3, [r7, #14]
 8019074:	4413      	add	r3, r2
 8019076:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019078:	7b7b      	ldrb	r3, [r7, #13]
 801907a:	4619      	mov	r1, r3
 801907c:	f240 7006 	movw	r0, #1798	; 0x706
 8019080:	f000 fc7a 	bl	8019978 <SUBGRF_WriteRegister>
    }
}
 8019084:	bf00      	nop
 8019086:	3710      	adds	r7, #16
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}

0801908c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b082      	sub	sp, #8
 8019090:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019092:	f7f1 fdca 	bl	800ac2a <RBI_IsDCDC>
 8019096:	4603      	mov	r3, r0
 8019098:	2b01      	cmp	r3, #1
 801909a:	d102      	bne.n	80190a2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801909c:	2301      	movs	r3, #1
 801909e:	71fb      	strb	r3, [r7, #7]
 80190a0:	e001      	b.n	80190a6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80190a2:	2300      	movs	r3, #0
 80190a4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80190a6:	1dfb      	adds	r3, r7, #7
 80190a8:	2201      	movs	r2, #1
 80190aa:	4619      	mov	r1, r3
 80190ac:	2096      	movs	r0, #150	; 0x96
 80190ae:	f000 fd13 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 80190b2:	bf00      	nop
 80190b4:	3708      	adds	r7, #8
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}

080190ba <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80190ba:	b580      	push	{r7, lr}
 80190bc:	b084      	sub	sp, #16
 80190be:	af00      	add	r7, sp, #0
 80190c0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80190c2:	793b      	ldrb	r3, [r7, #4]
 80190c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	019b      	lsls	r3, r3, #6
 80190cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80190ce:	793b      	ldrb	r3, [r7, #4]
 80190d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80190d4:	b2db      	uxtb	r3, r3
 80190d6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80190d8:	b25b      	sxtb	r3, r3
 80190da:	4313      	orrs	r3, r2
 80190dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80190de:	793b      	ldrb	r3, [r7, #4]
 80190e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80190e4:	b2db      	uxtb	r3, r3
 80190e6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80190e8:	b25b      	sxtb	r3, r3
 80190ea:	4313      	orrs	r3, r2
 80190ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80190ee:	793b      	ldrb	r3, [r7, #4]
 80190f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80190f4:	b2db      	uxtb	r3, r3
 80190f6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80190f8:	b25b      	sxtb	r3, r3
 80190fa:	4313      	orrs	r3, r2
 80190fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80190fe:	793b      	ldrb	r3, [r7, #4]
 8019100:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019104:	b2db      	uxtb	r3, r3
 8019106:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019108:	b25b      	sxtb	r3, r3
 801910a:	4313      	orrs	r3, r2
 801910c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801910e:	793b      	ldrb	r3, [r7, #4]
 8019110:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019114:	b2db      	uxtb	r3, r3
 8019116:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019118:	b25b      	sxtb	r3, r3
 801911a:	4313      	orrs	r3, r2
 801911c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801911e:	793b      	ldrb	r3, [r7, #4]
 8019120:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019124:	b2db      	uxtb	r3, r3
 8019126:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019128:	4313      	orrs	r3, r2
 801912a:	b25b      	sxtb	r3, r3
 801912c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801912e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019130:	f107 030f 	add.w	r3, r7, #15
 8019134:	2201      	movs	r2, #1
 8019136:	4619      	mov	r1, r3
 8019138:	2089      	movs	r0, #137	; 0x89
 801913a:	f000 fccd 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 801913e:	bf00      	nop
 8019140:	3710      	adds	r7, #16
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}
	...

08019148 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b084      	sub	sp, #16
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	4a1b      	ldr	r2, [pc, #108]	; (80191c0 <SUBGRF_CalibrateImage+0x78>)
 8019154:	4293      	cmp	r3, r2
 8019156:	d904      	bls.n	8019162 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019158:	23e1      	movs	r3, #225	; 0xe1
 801915a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801915c:	23e9      	movs	r3, #233	; 0xe9
 801915e:	737b      	strb	r3, [r7, #13]
 8019160:	e022      	b.n	80191a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	4a17      	ldr	r2, [pc, #92]	; (80191c4 <SUBGRF_CalibrateImage+0x7c>)
 8019166:	4293      	cmp	r3, r2
 8019168:	d904      	bls.n	8019174 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801916a:	23d7      	movs	r3, #215	; 0xd7
 801916c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801916e:	23db      	movs	r3, #219	; 0xdb
 8019170:	737b      	strb	r3, [r7, #13]
 8019172:	e019      	b.n	80191a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	4a14      	ldr	r2, [pc, #80]	; (80191c8 <SUBGRF_CalibrateImage+0x80>)
 8019178:	4293      	cmp	r3, r2
 801917a:	d904      	bls.n	8019186 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801917c:	23c1      	movs	r3, #193	; 0xc1
 801917e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019180:	23c5      	movs	r3, #197	; 0xc5
 8019182:	737b      	strb	r3, [r7, #13]
 8019184:	e010      	b.n	80191a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	4a10      	ldr	r2, [pc, #64]	; (80191cc <SUBGRF_CalibrateImage+0x84>)
 801918a:	4293      	cmp	r3, r2
 801918c:	d904      	bls.n	8019198 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801918e:	2375      	movs	r3, #117	; 0x75
 8019190:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019192:	2381      	movs	r3, #129	; 0x81
 8019194:	737b      	strb	r3, [r7, #13]
 8019196:	e007      	b.n	80191a8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	4a0d      	ldr	r2, [pc, #52]	; (80191d0 <SUBGRF_CalibrateImage+0x88>)
 801919c:	4293      	cmp	r3, r2
 801919e:	d903      	bls.n	80191a8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80191a0:	236b      	movs	r3, #107	; 0x6b
 80191a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80191a4:	236f      	movs	r3, #111	; 0x6f
 80191a6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80191a8:	f107 030c 	add.w	r3, r7, #12
 80191ac:	2202      	movs	r2, #2
 80191ae:	4619      	mov	r1, r3
 80191b0:	2098      	movs	r0, #152	; 0x98
 80191b2:	f000 fc91 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 80191b6:	bf00      	nop
 80191b8:	3710      	adds	r7, #16
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}
 80191be:	bf00      	nop
 80191c0:	35a4e900 	.word	0x35a4e900
 80191c4:	32a9f880 	.word	0x32a9f880
 80191c8:	2de54480 	.word	0x2de54480
 80191cc:	1b6b0b00 	.word	0x1b6b0b00
 80191d0:	1954fc40 	.word	0x1954fc40

080191d4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80191d4:	b590      	push	{r4, r7, lr}
 80191d6:	b085      	sub	sp, #20
 80191d8:	af00      	add	r7, sp, #0
 80191da:	4604      	mov	r4, r0
 80191dc:	4608      	mov	r0, r1
 80191de:	4611      	mov	r1, r2
 80191e0:	461a      	mov	r2, r3
 80191e2:	4623      	mov	r3, r4
 80191e4:	71fb      	strb	r3, [r7, #7]
 80191e6:	4603      	mov	r3, r0
 80191e8:	71bb      	strb	r3, [r7, #6]
 80191ea:	460b      	mov	r3, r1
 80191ec:	717b      	strb	r3, [r7, #5]
 80191ee:	4613      	mov	r3, r2
 80191f0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80191f2:	79fb      	ldrb	r3, [r7, #7]
 80191f4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80191f6:	79bb      	ldrb	r3, [r7, #6]
 80191f8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80191fa:	797b      	ldrb	r3, [r7, #5]
 80191fc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80191fe:	793b      	ldrb	r3, [r7, #4]
 8019200:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019202:	f107 030c 	add.w	r3, r7, #12
 8019206:	2204      	movs	r2, #4
 8019208:	4619      	mov	r1, r3
 801920a:	2095      	movs	r0, #149	; 0x95
 801920c:	f000 fc64 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8019210:	bf00      	nop
 8019212:	3714      	adds	r7, #20
 8019214:	46bd      	mov	sp, r7
 8019216:	bd90      	pop	{r4, r7, pc}

08019218 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019218:	b590      	push	{r4, r7, lr}
 801921a:	b085      	sub	sp, #20
 801921c:	af00      	add	r7, sp, #0
 801921e:	4604      	mov	r4, r0
 8019220:	4608      	mov	r0, r1
 8019222:	4611      	mov	r1, r2
 8019224:	461a      	mov	r2, r3
 8019226:	4623      	mov	r3, r4
 8019228:	80fb      	strh	r3, [r7, #6]
 801922a:	4603      	mov	r3, r0
 801922c:	80bb      	strh	r3, [r7, #4]
 801922e:	460b      	mov	r3, r1
 8019230:	807b      	strh	r3, [r7, #2]
 8019232:	4613      	mov	r3, r2
 8019234:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019236:	88fb      	ldrh	r3, [r7, #6]
 8019238:	0a1b      	lsrs	r3, r3, #8
 801923a:	b29b      	uxth	r3, r3
 801923c:	b2db      	uxtb	r3, r3
 801923e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019240:	88fb      	ldrh	r3, [r7, #6]
 8019242:	b2db      	uxtb	r3, r3
 8019244:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019246:	88bb      	ldrh	r3, [r7, #4]
 8019248:	0a1b      	lsrs	r3, r3, #8
 801924a:	b29b      	uxth	r3, r3
 801924c:	b2db      	uxtb	r3, r3
 801924e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019250:	88bb      	ldrh	r3, [r7, #4]
 8019252:	b2db      	uxtb	r3, r3
 8019254:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019256:	887b      	ldrh	r3, [r7, #2]
 8019258:	0a1b      	lsrs	r3, r3, #8
 801925a:	b29b      	uxth	r3, r3
 801925c:	b2db      	uxtb	r3, r3
 801925e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019260:	887b      	ldrh	r3, [r7, #2]
 8019262:	b2db      	uxtb	r3, r3
 8019264:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019266:	883b      	ldrh	r3, [r7, #0]
 8019268:	0a1b      	lsrs	r3, r3, #8
 801926a:	b29b      	uxth	r3, r3
 801926c:	b2db      	uxtb	r3, r3
 801926e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019270:	883b      	ldrh	r3, [r7, #0]
 8019272:	b2db      	uxtb	r3, r3
 8019274:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8019276:	f107 0308 	add.w	r3, r7, #8
 801927a:	2208      	movs	r2, #8
 801927c:	4619      	mov	r1, r3
 801927e:	2008      	movs	r0, #8
 8019280:	f000 fc2a 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8019284:	bf00      	nop
 8019286:	3714      	adds	r7, #20
 8019288:	46bd      	mov	sp, r7
 801928a:	bd90      	pop	{r4, r7, pc}

0801928c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b084      	sub	sp, #16
 8019290:	af00      	add	r7, sp, #0
 8019292:	4603      	mov	r3, r0
 8019294:	6039      	str	r1, [r7, #0]
 8019296:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019298:	79fb      	ldrb	r3, [r7, #7]
 801929a:	f003 0307 	and.w	r3, r3, #7
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	0c1b      	lsrs	r3, r3, #16
 80192a6:	b2db      	uxtb	r3, r3
 80192a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	0a1b      	lsrs	r3, r3, #8
 80192ae:	b2db      	uxtb	r3, r3
 80192b0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	b2db      	uxtb	r3, r3
 80192b6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80192b8:	f107 030c 	add.w	r3, r7, #12
 80192bc:	2204      	movs	r2, #4
 80192be:	4619      	mov	r1, r3
 80192c0:	2097      	movs	r0, #151	; 0x97
 80192c2:	f000 fc09 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 80192c6:	bf00      	nop
 80192c8:	3710      	adds	r7, #16
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
	...

080192d0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80192d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80192d4:	b084      	sub	sp, #16
 80192d6:	af00      	add	r7, sp, #0
 80192d8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80192da:	2300      	movs	r3, #0
 80192dc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80192de:	4b1d      	ldr	r3, [pc, #116]	; (8019354 <SUBGRF_SetRfFrequency+0x84>)
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	f083 0301 	eor.w	r3, r3, #1
 80192e6:	b2db      	uxtb	r3, r3
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d005      	beq.n	80192f8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	f7ff ff2b 	bl	8019148 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80192f2:	4b18      	ldr	r3, [pc, #96]	; (8019354 <SUBGRF_SetRfFrequency+0x84>)
 80192f4:	2201      	movs	r2, #1
 80192f6:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2200      	movs	r2, #0
 80192fc:	461c      	mov	r4, r3
 80192fe:	4615      	mov	r5, r2
 8019300:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019304:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019308:	4a13      	ldr	r2, [pc, #76]	; (8019358 <SUBGRF_SetRfFrequency+0x88>)
 801930a:	f04f 0300 	mov.w	r3, #0
 801930e:	4640      	mov	r0, r8
 8019310:	4649      	mov	r1, r9
 8019312:	f7e7 fbad 	bl	8000a70 <__aeabi_uldivmod>
 8019316:	4602      	mov	r2, r0
 8019318:	460b      	mov	r3, r1
 801931a:	4613      	mov	r3, r2
 801931c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	0e1b      	lsrs	r3, r3, #24
 8019322:	b2db      	uxtb	r3, r3
 8019324:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	0c1b      	lsrs	r3, r3, #16
 801932a:	b2db      	uxtb	r3, r3
 801932c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	0a1b      	lsrs	r3, r3, #8
 8019332:	b2db      	uxtb	r3, r3
 8019334:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	b2db      	uxtb	r3, r3
 801933a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801933c:	f107 0308 	add.w	r3, r7, #8
 8019340:	2204      	movs	r2, #4
 8019342:	4619      	mov	r1, r3
 8019344:	2086      	movs	r0, #134	; 0x86
 8019346:	f000 fbc7 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 801934a:	bf00      	nop
 801934c:	3710      	adds	r7, #16
 801934e:	46bd      	mov	sp, r7
 8019350:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019354:	20001ed0 	.word	0x20001ed0
 8019358:	01e84800 	.word	0x01e84800

0801935c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b082      	sub	sp, #8
 8019360:	af00      	add	r7, sp, #0
 8019362:	4603      	mov	r3, r0
 8019364:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8019366:	79fa      	ldrb	r2, [r7, #7]
 8019368:	4b09      	ldr	r3, [pc, #36]	; (8019390 <SUBGRF_SetPacketType+0x34>)
 801936a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801936c:	79fb      	ldrb	r3, [r7, #7]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d104      	bne.n	801937c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8019372:	2100      	movs	r1, #0
 8019374:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019378:	f000 fafe 	bl	8019978 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801937c:	1dfb      	adds	r3, r7, #7
 801937e:	2201      	movs	r2, #1
 8019380:	4619      	mov	r1, r3
 8019382:	208a      	movs	r0, #138	; 0x8a
 8019384:	f000 fba8 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 8019388:	bf00      	nop
 801938a:	3708      	adds	r7, #8
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}
 8019390:	20001ec9 	.word	0x20001ec9

08019394 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8019394:	b480      	push	{r7}
 8019396:	af00      	add	r7, sp, #0
    return PacketType;
 8019398:	4b02      	ldr	r3, [pc, #8]	; (80193a4 <SUBGRF_GetPacketType+0x10>)
 801939a:	781b      	ldrb	r3, [r3, #0]
}
 801939c:	4618      	mov	r0, r3
 801939e:	46bd      	mov	sp, r7
 80193a0:	bc80      	pop	{r7}
 80193a2:	4770      	bx	lr
 80193a4:	20001ec9 	.word	0x20001ec9

080193a8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b084      	sub	sp, #16
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	4603      	mov	r3, r0
 80193b0:	71fb      	strb	r3, [r7, #7]
 80193b2:	460b      	mov	r3, r1
 80193b4:	71bb      	strb	r3, [r7, #6]
 80193b6:	4613      	mov	r3, r2
 80193b8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80193ba:	79fb      	ldrb	r3, [r7, #7]
 80193bc:	2b01      	cmp	r3, #1
 80193be:	d149      	bne.n	8019454 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80193c0:	2000      	movs	r0, #0
 80193c2:	f7f1 fc39 	bl	800ac38 <RBI_GetRFOMaxPowerConfig>
 80193c6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80193c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80193cc:	68fa      	ldr	r2, [r7, #12]
 80193ce:	429a      	cmp	r2, r3
 80193d0:	da01      	bge.n	80193d6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	2b0e      	cmp	r3, #14
 80193da:	d10e      	bne.n	80193fa <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80193dc:	2301      	movs	r3, #1
 80193de:	2201      	movs	r2, #1
 80193e0:	2100      	movs	r1, #0
 80193e2:	2004      	movs	r0, #4
 80193e4:	f7ff fef6 	bl	80191d4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80193e8:	79ba      	ldrb	r2, [r7, #6]
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	1ad3      	subs	r3, r2, r3
 80193f0:	b2db      	uxtb	r3, r3
 80193f2:	330e      	adds	r3, #14
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	71bb      	strb	r3, [r7, #6]
 80193f8:	e01f      	b.n	801943a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	2b0a      	cmp	r3, #10
 80193fe:	d10e      	bne.n	801941e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019400:	2301      	movs	r3, #1
 8019402:	2201      	movs	r2, #1
 8019404:	2100      	movs	r1, #0
 8019406:	2001      	movs	r0, #1
 8019408:	f7ff fee4 	bl	80191d4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801940c:	79ba      	ldrb	r2, [r7, #6]
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	b2db      	uxtb	r3, r3
 8019412:	1ad3      	subs	r3, r2, r3
 8019414:	b2db      	uxtb	r3, r3
 8019416:	330d      	adds	r3, #13
 8019418:	b2db      	uxtb	r3, r3
 801941a:	71bb      	strb	r3, [r7, #6]
 801941c:	e00d      	b.n	801943a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801941e:	2301      	movs	r3, #1
 8019420:	2201      	movs	r2, #1
 8019422:	2100      	movs	r1, #0
 8019424:	2006      	movs	r0, #6
 8019426:	f7ff fed5 	bl	80191d4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801942a:	79ba      	ldrb	r2, [r7, #6]
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	b2db      	uxtb	r3, r3
 8019430:	1ad3      	subs	r3, r2, r3
 8019432:	b2db      	uxtb	r3, r3
 8019434:	330e      	adds	r3, #14
 8019436:	b2db      	uxtb	r3, r3
 8019438:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801943a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801943e:	f113 0f11 	cmn.w	r3, #17
 8019442:	da01      	bge.n	8019448 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019444:	23ef      	movs	r3, #239	; 0xef
 8019446:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019448:	2118      	movs	r1, #24
 801944a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801944e:	f000 fa93 	bl	8019978 <SUBGRF_WriteRegister>
 8019452:	e067      	b.n	8019524 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019454:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8019458:	f000 faa2 	bl	80199a0 <SUBGRF_ReadRegister>
 801945c:	4603      	mov	r3, r0
 801945e:	f043 031e 	orr.w	r3, r3, #30
 8019462:	b2db      	uxtb	r3, r3
 8019464:	4619      	mov	r1, r3
 8019466:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801946a:	f000 fa85 	bl	8019978 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801946e:	2001      	movs	r0, #1
 8019470:	f7f1 fbe2 	bl	800ac38 <RBI_GetRFOMaxPowerConfig>
 8019474:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019476:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801947a:	68fa      	ldr	r2, [r7, #12]
 801947c:	429a      	cmp	r2, r3
 801947e:	da01      	bge.n	8019484 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	2b14      	cmp	r3, #20
 8019488:	d10e      	bne.n	80194a8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801948a:	2301      	movs	r3, #1
 801948c:	2200      	movs	r2, #0
 801948e:	2105      	movs	r1, #5
 8019490:	2003      	movs	r0, #3
 8019492:	f7ff fe9f 	bl	80191d4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019496:	79ba      	ldrb	r2, [r7, #6]
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	b2db      	uxtb	r3, r3
 801949c:	1ad3      	subs	r3, r2, r3
 801949e:	b2db      	uxtb	r3, r3
 80194a0:	3316      	adds	r3, #22
 80194a2:	b2db      	uxtb	r3, r3
 80194a4:	71bb      	strb	r3, [r7, #6]
 80194a6:	e031      	b.n	801950c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	2b11      	cmp	r3, #17
 80194ac:	d10e      	bne.n	80194cc <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80194ae:	2301      	movs	r3, #1
 80194b0:	2200      	movs	r2, #0
 80194b2:	2103      	movs	r1, #3
 80194b4:	2002      	movs	r0, #2
 80194b6:	f7ff fe8d 	bl	80191d4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80194ba:	79ba      	ldrb	r2, [r7, #6]
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	b2db      	uxtb	r3, r3
 80194c0:	1ad3      	subs	r3, r2, r3
 80194c2:	b2db      	uxtb	r3, r3
 80194c4:	3316      	adds	r3, #22
 80194c6:	b2db      	uxtb	r3, r3
 80194c8:	71bb      	strb	r3, [r7, #6]
 80194ca:	e01f      	b.n	801950c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	2b0e      	cmp	r3, #14
 80194d0:	d10e      	bne.n	80194f0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80194d2:	2301      	movs	r3, #1
 80194d4:	2200      	movs	r2, #0
 80194d6:	2102      	movs	r1, #2
 80194d8:	2002      	movs	r0, #2
 80194da:	f7ff fe7b 	bl	80191d4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80194de:	79ba      	ldrb	r2, [r7, #6]
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	b2db      	uxtb	r3, r3
 80194e4:	1ad3      	subs	r3, r2, r3
 80194e6:	b2db      	uxtb	r3, r3
 80194e8:	330e      	adds	r3, #14
 80194ea:	b2db      	uxtb	r3, r3
 80194ec:	71bb      	strb	r3, [r7, #6]
 80194ee:	e00d      	b.n	801950c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80194f0:	2301      	movs	r3, #1
 80194f2:	2200      	movs	r2, #0
 80194f4:	2107      	movs	r1, #7
 80194f6:	2004      	movs	r0, #4
 80194f8:	f7ff fe6c 	bl	80191d4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80194fc:	79ba      	ldrb	r2, [r7, #6]
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	b2db      	uxtb	r3, r3
 8019502:	1ad3      	subs	r3, r2, r3
 8019504:	b2db      	uxtb	r3, r3
 8019506:	3316      	adds	r3, #22
 8019508:	b2db      	uxtb	r3, r3
 801950a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801950c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019510:	f113 0f09 	cmn.w	r3, #9
 8019514:	da01      	bge.n	801951a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019516:	23f7      	movs	r3, #247	; 0xf7
 8019518:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801951a:	2138      	movs	r1, #56	; 0x38
 801951c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019520:	f000 fa2a 	bl	8019978 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019524:	79bb      	ldrb	r3, [r7, #6]
 8019526:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019528:	797b      	ldrb	r3, [r7, #5]
 801952a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801952c:	f107 0308 	add.w	r3, r7, #8
 8019530:	2202      	movs	r2, #2
 8019532:	4619      	mov	r1, r3
 8019534:	208e      	movs	r0, #142	; 0x8e
 8019536:	f000 facf 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 801953a:	bf00      	nop
 801953c:	3710      	adds	r7, #16
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}
	...

08019544 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019544:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019548:	b086      	sub	sp, #24
 801954a:	af00      	add	r7, sp, #0
 801954c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801954e:	2300      	movs	r3, #0
 8019550:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019552:	4a61      	ldr	r2, [pc, #388]	; (80196d8 <SUBGRF_SetModulationParams+0x194>)
 8019554:	f107 0308 	add.w	r3, r7, #8
 8019558:	e892 0003 	ldmia.w	r2, {r0, r1}
 801955c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	781a      	ldrb	r2, [r3, #0]
 8019564:	4b5d      	ldr	r3, [pc, #372]	; (80196dc <SUBGRF_SetModulationParams+0x198>)
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	429a      	cmp	r2, r3
 801956a:	d004      	beq.n	8019576 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	781b      	ldrb	r3, [r3, #0]
 8019570:	4618      	mov	r0, r3
 8019572:	f7ff fef3 	bl	801935c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	781b      	ldrb	r3, [r3, #0]
 801957a:	2b03      	cmp	r3, #3
 801957c:	f200 80a5 	bhi.w	80196ca <SUBGRF_SetModulationParams+0x186>
 8019580:	a201      	add	r2, pc, #4	; (adr r2, 8019588 <SUBGRF_SetModulationParams+0x44>)
 8019582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019586:	bf00      	nop
 8019588:	08019599 	.word	0x08019599
 801958c:	08019659 	.word	0x08019659
 8019590:	0801961b 	.word	0x0801961b
 8019594:	08019687 	.word	0x08019687
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019598:	2308      	movs	r3, #8
 801959a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	685b      	ldr	r3, [r3, #4]
 80195a0:	4a4f      	ldr	r2, [pc, #316]	; (80196e0 <SUBGRF_SetModulationParams+0x19c>)
 80195a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80195a6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	0c1b      	lsrs	r3, r3, #16
 80195ac:	b2db      	uxtb	r3, r3
 80195ae:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80195b0:	697b      	ldr	r3, [r7, #20]
 80195b2:	0a1b      	lsrs	r3, r3, #8
 80195b4:	b2db      	uxtb	r3, r3
 80195b6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	7b1b      	ldrb	r3, [r3, #12]
 80195c2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	7b5b      	ldrb	r3, [r3, #13]
 80195c8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	689b      	ldr	r3, [r3, #8]
 80195ce:	2200      	movs	r2, #0
 80195d0:	461c      	mov	r4, r3
 80195d2:	4615      	mov	r5, r2
 80195d4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80195d8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80195dc:	4a41      	ldr	r2, [pc, #260]	; (80196e4 <SUBGRF_SetModulationParams+0x1a0>)
 80195de:	f04f 0300 	mov.w	r3, #0
 80195e2:	4640      	mov	r0, r8
 80195e4:	4649      	mov	r1, r9
 80195e6:	f7e7 fa43 	bl	8000a70 <__aeabi_uldivmod>
 80195ea:	4602      	mov	r2, r0
 80195ec:	460b      	mov	r3, r1
 80195ee:	4613      	mov	r3, r2
 80195f0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80195f2:	697b      	ldr	r3, [r7, #20]
 80195f4:	0c1b      	lsrs	r3, r3, #16
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80195fa:	697b      	ldr	r3, [r7, #20]
 80195fc:	0a1b      	lsrs	r3, r3, #8
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	b2db      	uxtb	r3, r3
 8019606:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019608:	7cfb      	ldrb	r3, [r7, #19]
 801960a:	b29a      	uxth	r2, r3
 801960c:	f107 0308 	add.w	r3, r7, #8
 8019610:	4619      	mov	r1, r3
 8019612:	208b      	movs	r0, #139	; 0x8b
 8019614:	f000 fa60 	bl	8019ad8 <SUBGRF_WriteCommand>
        break;
 8019618:	e058      	b.n	80196cc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801961a:	2304      	movs	r3, #4
 801961c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	691b      	ldr	r3, [r3, #16]
 8019622:	4a2f      	ldr	r2, [pc, #188]	; (80196e0 <SUBGRF_SetModulationParams+0x19c>)
 8019624:	fbb2 f3f3 	udiv	r3, r2, r3
 8019628:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	0c1b      	lsrs	r3, r3, #16
 801962e:	b2db      	uxtb	r3, r3
 8019630:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019632:	697b      	ldr	r3, [r7, #20]
 8019634:	0a1b      	lsrs	r3, r3, #8
 8019636:	b2db      	uxtb	r3, r3
 8019638:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801963a:	697b      	ldr	r3, [r7, #20]
 801963c:	b2db      	uxtb	r3, r3
 801963e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	7d1b      	ldrb	r3, [r3, #20]
 8019644:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019646:	7cfb      	ldrb	r3, [r7, #19]
 8019648:	b29a      	uxth	r2, r3
 801964a:	f107 0308 	add.w	r3, r7, #8
 801964e:	4619      	mov	r1, r3
 8019650:	208b      	movs	r0, #139	; 0x8b
 8019652:	f000 fa41 	bl	8019ad8 <SUBGRF_WriteCommand>
        break;
 8019656:	e039      	b.n	80196cc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8019658:	2304      	movs	r3, #4
 801965a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	7e1b      	ldrb	r3, [r3, #24]
 8019660:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	7e5b      	ldrb	r3, [r3, #25]
 8019666:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	7e9b      	ldrb	r3, [r3, #26]
 801966c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	7edb      	ldrb	r3, [r3, #27]
 8019672:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019674:	7cfb      	ldrb	r3, [r7, #19]
 8019676:	b29a      	uxth	r2, r3
 8019678:	f107 0308 	add.w	r3, r7, #8
 801967c:	4619      	mov	r1, r3
 801967e:	208b      	movs	r0, #139	; 0x8b
 8019680:	f000 fa2a 	bl	8019ad8 <SUBGRF_WriteCommand>

        break;
 8019684:	e022      	b.n	80196cc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019686:	2305      	movs	r3, #5
 8019688:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	4a14      	ldr	r2, [pc, #80]	; (80196e0 <SUBGRF_SetModulationParams+0x19c>)
 8019690:	fbb2 f3f3 	udiv	r3, r2, r3
 8019694:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	0c1b      	lsrs	r3, r3, #16
 801969a:	b2db      	uxtb	r3, r3
 801969c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801969e:	697b      	ldr	r3, [r7, #20]
 80196a0:	0a1b      	lsrs	r3, r3, #8
 80196a2:	b2db      	uxtb	r3, r3
 80196a4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80196a6:	697b      	ldr	r3, [r7, #20]
 80196a8:	b2db      	uxtb	r3, r3
 80196aa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	7b1b      	ldrb	r3, [r3, #12]
 80196b0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	7b5b      	ldrb	r3, [r3, #13]
 80196b6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80196b8:	7cfb      	ldrb	r3, [r7, #19]
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	f107 0308 	add.w	r3, r7, #8
 80196c0:	4619      	mov	r1, r3
 80196c2:	208b      	movs	r0, #139	; 0x8b
 80196c4:	f000 fa08 	bl	8019ad8 <SUBGRF_WriteCommand>
        break;
 80196c8:	e000      	b.n	80196cc <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80196ca:	bf00      	nop
    }
}
 80196cc:	bf00      	nop
 80196ce:	3718      	adds	r7, #24
 80196d0:	46bd      	mov	sp, r7
 80196d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80196d6:	bf00      	nop
 80196d8:	0801bc84 	.word	0x0801bc84
 80196dc:	20001ec9 	.word	0x20001ec9
 80196e0:	3d090000 	.word	0x3d090000
 80196e4:	01e84800 	.word	0x01e84800

080196e8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80196e8:	b580      	push	{r7, lr}
 80196ea:	b086      	sub	sp, #24
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80196f0:	2300      	movs	r3, #0
 80196f2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80196f4:	4a48      	ldr	r2, [pc, #288]	; (8019818 <SUBGRF_SetPacketParams+0x130>)
 80196f6:	f107 030c 	add.w	r3, r7, #12
 80196fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80196fc:	c303      	stmia	r3!, {r0, r1}
 80196fe:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	781a      	ldrb	r2, [r3, #0]
 8019704:	4b45      	ldr	r3, [pc, #276]	; (801981c <SUBGRF_SetPacketParams+0x134>)
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	429a      	cmp	r2, r3
 801970a:	d004      	beq.n	8019716 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	4618      	mov	r0, r3
 8019712:	f7ff fe23 	bl	801935c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	781b      	ldrb	r3, [r3, #0]
 801971a:	2b03      	cmp	r3, #3
 801971c:	d878      	bhi.n	8019810 <SUBGRF_SetPacketParams+0x128>
 801971e:	a201      	add	r2, pc, #4	; (adr r2, 8019724 <SUBGRF_SetPacketParams+0x3c>)
 8019720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019724:	08019735 	.word	0x08019735
 8019728:	080197c5 	.word	0x080197c5
 801972c:	080197b9 	.word	0x080197b9
 8019730:	08019735 	.word	0x08019735
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	7a5b      	ldrb	r3, [r3, #9]
 8019738:	2bf1      	cmp	r3, #241	; 0xf1
 801973a:	d10a      	bne.n	8019752 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801973c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019740:	f7ff faae 	bl	8018ca0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019744:	f248 0005 	movw	r0, #32773	; 0x8005
 8019748:	f7ff faca 	bl	8018ce0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801974c:	2302      	movs	r3, #2
 801974e:	75bb      	strb	r3, [r7, #22]
 8019750:	e011      	b.n	8019776 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	7a5b      	ldrb	r3, [r3, #9]
 8019756:	2bf2      	cmp	r3, #242	; 0xf2
 8019758:	d10a      	bne.n	8019770 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801975a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801975e:	f7ff fa9f 	bl	8018ca0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019762:	f241 0021 	movw	r0, #4129	; 0x1021
 8019766:	f7ff fabb 	bl	8018ce0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801976a:	2306      	movs	r3, #6
 801976c:	75bb      	strb	r3, [r7, #22]
 801976e:	e002      	b.n	8019776 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	7a5b      	ldrb	r3, [r3, #9]
 8019774:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019776:	2309      	movs	r3, #9
 8019778:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	885b      	ldrh	r3, [r3, #2]
 801977e:	0a1b      	lsrs	r3, r3, #8
 8019780:	b29b      	uxth	r3, r3
 8019782:	b2db      	uxtb	r3, r3
 8019784:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	885b      	ldrh	r3, [r3, #2]
 801978a:	b2db      	uxtb	r3, r3
 801978c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	791b      	ldrb	r3, [r3, #4]
 8019792:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	795b      	ldrb	r3, [r3, #5]
 8019798:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	799b      	ldrb	r3, [r3, #6]
 801979e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	79db      	ldrb	r3, [r3, #7]
 80197a4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	7a1b      	ldrb	r3, [r3, #8]
 80197aa:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80197ac:	7dbb      	ldrb	r3, [r7, #22]
 80197ae:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	7a9b      	ldrb	r3, [r3, #10]
 80197b4:	753b      	strb	r3, [r7, #20]
        break;
 80197b6:	e022      	b.n	80197fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80197b8:	2301      	movs	r3, #1
 80197ba:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	7b1b      	ldrb	r3, [r3, #12]
 80197c0:	733b      	strb	r3, [r7, #12]
        break;
 80197c2:	e01c      	b.n	80197fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80197c4:	2306      	movs	r3, #6
 80197c6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	89db      	ldrh	r3, [r3, #14]
 80197cc:	0a1b      	lsrs	r3, r3, #8
 80197ce:	b29b      	uxth	r3, r3
 80197d0:	b2db      	uxtb	r3, r3
 80197d2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	89db      	ldrh	r3, [r3, #14]
 80197d8:	b2db      	uxtb	r3, r3
 80197da:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	7c1a      	ldrb	r2, [r3, #16]
 80197e0:	4b0f      	ldr	r3, [pc, #60]	; (8019820 <SUBGRF_SetPacketParams+0x138>)
 80197e2:	4611      	mov	r1, r2
 80197e4:	7019      	strb	r1, [r3, #0]
 80197e6:	4613      	mov	r3, r2
 80197e8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	7c5b      	ldrb	r3, [r3, #17]
 80197ee:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	7c9b      	ldrb	r3, [r3, #18]
 80197f4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	7cdb      	ldrb	r3, [r3, #19]
 80197fa:	747b      	strb	r3, [r7, #17]
        break;
 80197fc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80197fe:	7dfb      	ldrb	r3, [r7, #23]
 8019800:	b29a      	uxth	r2, r3
 8019802:	f107 030c 	add.w	r3, r7, #12
 8019806:	4619      	mov	r1, r3
 8019808:	208c      	movs	r0, #140	; 0x8c
 801980a:	f000 f965 	bl	8019ad8 <SUBGRF_WriteCommand>
 801980e:	e000      	b.n	8019812 <SUBGRF_SetPacketParams+0x12a>
        return;
 8019810:	bf00      	nop
}
 8019812:	3718      	adds	r7, #24
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}
 8019818:	0801bc8c 	.word	0x0801bc8c
 801981c:	20001ec9 	.word	0x20001ec9
 8019820:	20001eca 	.word	0x20001eca

08019824 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b084      	sub	sp, #16
 8019828:	af00      	add	r7, sp, #0
 801982a:	4603      	mov	r3, r0
 801982c:	460a      	mov	r2, r1
 801982e:	71fb      	strb	r3, [r7, #7]
 8019830:	4613      	mov	r3, r2
 8019832:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019834:	79fb      	ldrb	r3, [r7, #7]
 8019836:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019838:	79bb      	ldrb	r3, [r7, #6]
 801983a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801983c:	f107 030c 	add.w	r3, r7, #12
 8019840:	2202      	movs	r2, #2
 8019842:	4619      	mov	r1, r3
 8019844:	208f      	movs	r0, #143	; 0x8f
 8019846:	f000 f947 	bl	8019ad8 <SUBGRF_WriteCommand>
}
 801984a:	bf00      	nop
 801984c:	3710      	adds	r7, #16
 801984e:	46bd      	mov	sp, r7
 8019850:	bd80      	pop	{r7, pc}

08019852 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019852:	b580      	push	{r7, lr}
 8019854:	b082      	sub	sp, #8
 8019856:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019858:	2300      	movs	r3, #0
 801985a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801985c:	1d3b      	adds	r3, r7, #4
 801985e:	2201      	movs	r2, #1
 8019860:	4619      	mov	r1, r3
 8019862:	2015      	movs	r0, #21
 8019864:	f000 f95a 	bl	8019b1c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019868:	793b      	ldrb	r3, [r7, #4]
 801986a:	425b      	negs	r3, r3
 801986c:	105b      	asrs	r3, r3, #1
 801986e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019870:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019874:	4618      	mov	r0, r3
 8019876:	3708      	adds	r7, #8
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b084      	sub	sp, #16
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019886:	f107 030c 	add.w	r3, r7, #12
 801988a:	2202      	movs	r2, #2
 801988c:	4619      	mov	r1, r3
 801988e:	2013      	movs	r0, #19
 8019890:	f000 f944 	bl	8019b1c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019894:	f7ff fd7e 	bl	8019394 <SUBGRF_GetPacketType>
 8019898:	4603      	mov	r3, r0
 801989a:	2b01      	cmp	r3, #1
 801989c:	d10d      	bne.n	80198ba <SUBGRF_GetRxBufferStatus+0x3e>
 801989e:	4b0c      	ldr	r3, [pc, #48]	; (80198d0 <SUBGRF_GetRxBufferStatus+0x54>)
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	b2db      	uxtb	r3, r3
 80198a4:	2b01      	cmp	r3, #1
 80198a6:	d108      	bne.n	80198ba <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80198a8:	f240 7002 	movw	r0, #1794	; 0x702
 80198ac:	f000 f878 	bl	80199a0 <SUBGRF_ReadRegister>
 80198b0:	4603      	mov	r3, r0
 80198b2:	461a      	mov	r2, r3
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	701a      	strb	r2, [r3, #0]
 80198b8:	e002      	b.n	80198c0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80198ba:	7b3a      	ldrb	r2, [r7, #12]
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80198c0:	7b7a      	ldrb	r2, [r7, #13]
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	701a      	strb	r2, [r3, #0]
}
 80198c6:	bf00      	nop
 80198c8:	3710      	adds	r7, #16
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bd80      	pop	{r7, pc}
 80198ce:	bf00      	nop
 80198d0:	20001eca 	.word	0x20001eca

080198d4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80198d4:	b580      	push	{r7, lr}
 80198d6:	b084      	sub	sp, #16
 80198d8:	af00      	add	r7, sp, #0
 80198da:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80198dc:	f107 030c 	add.w	r3, r7, #12
 80198e0:	2203      	movs	r2, #3
 80198e2:	4619      	mov	r1, r3
 80198e4:	2014      	movs	r0, #20
 80198e6:	f000 f919 	bl	8019b1c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80198ea:	f7ff fd53 	bl	8019394 <SUBGRF_GetPacketType>
 80198ee:	4603      	mov	r3, r0
 80198f0:	461a      	mov	r2, r3
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d002      	beq.n	8019904 <SUBGRF_GetPacketStatus+0x30>
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d013      	beq.n	801992a <SUBGRF_GetPacketStatus+0x56>
 8019902:	e02a      	b.n	801995a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019904:	7b3a      	ldrb	r2, [r7, #12]
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801990a:	7b7b      	ldrb	r3, [r7, #13]
 801990c:	425b      	negs	r3, r3
 801990e:	105b      	asrs	r3, r3, #1
 8019910:	b25a      	sxtb	r2, r3
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019916:	7bbb      	ldrb	r3, [r7, #14]
 8019918:	425b      	negs	r3, r3
 801991a:	105b      	asrs	r3, r3, #1
 801991c:	b25a      	sxtb	r2, r3
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	2200      	movs	r2, #0
 8019926:	609a      	str	r2, [r3, #8]
            break;
 8019928:	e020      	b.n	801996c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801992a:	7b3b      	ldrb	r3, [r7, #12]
 801992c:	425b      	negs	r3, r3
 801992e:	105b      	asrs	r3, r3, #1
 8019930:	b25a      	sxtb	r2, r3
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019936:	7b7b      	ldrb	r3, [r7, #13]
 8019938:	b25b      	sxtb	r3, r3
 801993a:	3302      	adds	r3, #2
 801993c:	109b      	asrs	r3, r3, #2
 801993e:	b25a      	sxtb	r2, r3
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019944:	7bbb      	ldrb	r3, [r7, #14]
 8019946:	425b      	negs	r3, r3
 8019948:	105b      	asrs	r3, r3, #1
 801994a:	b25a      	sxtb	r2, r3
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019950:	4b08      	ldr	r3, [pc, #32]	; (8019974 <SUBGRF_GetPacketStatus+0xa0>)
 8019952:	681a      	ldr	r2, [r3, #0]
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	611a      	str	r2, [r3, #16]
            break;
 8019958:	e008      	b.n	801996c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801995a:	2214      	movs	r2, #20
 801995c:	2100      	movs	r1, #0
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f000 fbf3 	bl	801a14a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	220f      	movs	r2, #15
 8019968:	701a      	strb	r2, [r3, #0]
            break;
 801996a:	bf00      	nop
    }
}
 801996c:	bf00      	nop
 801996e:	3710      	adds	r7, #16
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}
 8019974:	20001ecc 	.word	0x20001ecc

08019978 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	4603      	mov	r3, r0
 8019980:	460a      	mov	r2, r1
 8019982:	80fb      	strh	r3, [r7, #6]
 8019984:	4613      	mov	r3, r2
 8019986:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019988:	1d7a      	adds	r2, r7, #5
 801998a:	88f9      	ldrh	r1, [r7, #6]
 801998c:	2301      	movs	r3, #1
 801998e:	4803      	ldr	r0, [pc, #12]	; (801999c <SUBGRF_WriteRegister+0x24>)
 8019990:	f7ed fce0 	bl	8007354 <HAL_SUBGHZ_WriteRegisters>
}
 8019994:	bf00      	nop
 8019996:	3708      	adds	r7, #8
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}
 801999c:	20000234 	.word	0x20000234

080199a0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b084      	sub	sp, #16
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	4603      	mov	r3, r0
 80199a8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80199aa:	f107 020f 	add.w	r2, r7, #15
 80199ae:	88f9      	ldrh	r1, [r7, #6]
 80199b0:	2301      	movs	r3, #1
 80199b2:	4804      	ldr	r0, [pc, #16]	; (80199c4 <SUBGRF_ReadRegister+0x24>)
 80199b4:	f7ed fd2d 	bl	8007412 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80199b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80199ba:	4618      	mov	r0, r3
 80199bc:	3710      	adds	r7, #16
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}
 80199c2:	bf00      	nop
 80199c4:	20000234 	.word	0x20000234

080199c8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b086      	sub	sp, #24
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	4603      	mov	r3, r0
 80199d0:	6039      	str	r1, [r7, #0]
 80199d2:	80fb      	strh	r3, [r7, #6]
 80199d4:	4613      	mov	r3, r2
 80199d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199d8:	f3ef 8310 	mrs	r3, PRIMASK
 80199dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80199de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80199e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199e2:	b672      	cpsid	i
}
 80199e4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80199e6:	88bb      	ldrh	r3, [r7, #4]
 80199e8:	88f9      	ldrh	r1, [r7, #6]
 80199ea:	683a      	ldr	r2, [r7, #0]
 80199ec:	4806      	ldr	r0, [pc, #24]	; (8019a08 <SUBGRF_WriteRegisters+0x40>)
 80199ee:	f7ed fcb1 	bl	8007354 <HAL_SUBGHZ_WriteRegisters>
 80199f2:	697b      	ldr	r3, [r7, #20]
 80199f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199f6:	693b      	ldr	r3, [r7, #16]
 80199f8:	f383 8810 	msr	PRIMASK, r3
}
 80199fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80199fe:	bf00      	nop
 8019a00:	3718      	adds	r7, #24
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}
 8019a06:	bf00      	nop
 8019a08:	20000234 	.word	0x20000234

08019a0c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b086      	sub	sp, #24
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	4603      	mov	r3, r0
 8019a14:	6039      	str	r1, [r7, #0]
 8019a16:	80fb      	strh	r3, [r7, #6]
 8019a18:	4613      	mov	r3, r2
 8019a1a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8019a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a22:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a26:	b672      	cpsid	i
}
 8019a28:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019a2a:	88bb      	ldrh	r3, [r7, #4]
 8019a2c:	88f9      	ldrh	r1, [r7, #6]
 8019a2e:	683a      	ldr	r2, [r7, #0]
 8019a30:	4806      	ldr	r0, [pc, #24]	; (8019a4c <SUBGRF_ReadRegisters+0x40>)
 8019a32:	f7ed fcee 	bl	8007412 <HAL_SUBGHZ_ReadRegisters>
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	f383 8810 	msr	PRIMASK, r3
}
 8019a40:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a42:	bf00      	nop
 8019a44:	3718      	adds	r7, #24
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}
 8019a4a:	bf00      	nop
 8019a4c:	20000234 	.word	0x20000234

08019a50 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b086      	sub	sp, #24
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	4603      	mov	r3, r0
 8019a58:	6039      	str	r1, [r7, #0]
 8019a5a:	71fb      	strb	r3, [r7, #7]
 8019a5c:	4613      	mov	r3, r2
 8019a5e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a60:	f3ef 8310 	mrs	r3, PRIMASK
 8019a64:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a66:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a6a:	b672      	cpsid	i
}
 8019a6c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019a6e:	79bb      	ldrb	r3, [r7, #6]
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	79f9      	ldrb	r1, [r7, #7]
 8019a74:	683a      	ldr	r2, [r7, #0]
 8019a76:	4806      	ldr	r0, [pc, #24]	; (8019a90 <SUBGRF_WriteBuffer+0x40>)
 8019a78:	f7ed fddf 	bl	800763a <HAL_SUBGHZ_WriteBuffer>
 8019a7c:	697b      	ldr	r3, [r7, #20]
 8019a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a80:	693b      	ldr	r3, [r7, #16]
 8019a82:	f383 8810 	msr	PRIMASK, r3
}
 8019a86:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a88:	bf00      	nop
 8019a8a:	3718      	adds	r7, #24
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd80      	pop	{r7, pc}
 8019a90:	20000234 	.word	0x20000234

08019a94 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b086      	sub	sp, #24
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	6039      	str	r1, [r7, #0]
 8019a9e:	71fb      	strb	r3, [r7, #7]
 8019aa0:	4613      	mov	r3, r2
 8019aa2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8019aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8019aaa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019aac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019aae:	b672      	cpsid	i
}
 8019ab0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019ab2:	79bb      	ldrb	r3, [r7, #6]
 8019ab4:	b29b      	uxth	r3, r3
 8019ab6:	79f9      	ldrb	r1, [r7, #7]
 8019ab8:	683a      	ldr	r2, [r7, #0]
 8019aba:	4806      	ldr	r0, [pc, #24]	; (8019ad4 <SUBGRF_ReadBuffer+0x40>)
 8019abc:	f7ed fe10 	bl	80076e0 <HAL_SUBGHZ_ReadBuffer>
 8019ac0:	697b      	ldr	r3, [r7, #20]
 8019ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ac4:	693b      	ldr	r3, [r7, #16]
 8019ac6:	f383 8810 	msr	PRIMASK, r3
}
 8019aca:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019acc:	bf00      	nop
 8019ace:	3718      	adds	r7, #24
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}
 8019ad4:	20000234 	.word	0x20000234

08019ad8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b086      	sub	sp, #24
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	4603      	mov	r3, r0
 8019ae0:	6039      	str	r1, [r7, #0]
 8019ae2:	71fb      	strb	r3, [r7, #7]
 8019ae4:	4613      	mov	r3, r2
 8019ae6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8019aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8019aee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019af2:	b672      	cpsid	i
}
 8019af4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019af6:	88bb      	ldrh	r3, [r7, #4]
 8019af8:	79f9      	ldrb	r1, [r7, #7]
 8019afa:	683a      	ldr	r2, [r7, #0]
 8019afc:	4806      	ldr	r0, [pc, #24]	; (8019b18 <SUBGRF_WriteCommand+0x40>)
 8019afe:	f7ed fce9 	bl	80074d4 <HAL_SUBGHZ_ExecSetCmd>
 8019b02:	697b      	ldr	r3, [r7, #20]
 8019b04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b06:	693b      	ldr	r3, [r7, #16]
 8019b08:	f383 8810 	msr	PRIMASK, r3
}
 8019b0c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019b0e:	bf00      	nop
 8019b10:	3718      	adds	r7, #24
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	20000234 	.word	0x20000234

08019b1c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b086      	sub	sp, #24
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	4603      	mov	r3, r0
 8019b24:	6039      	str	r1, [r7, #0]
 8019b26:	71fb      	strb	r3, [r7, #7]
 8019b28:	4613      	mov	r3, r2
 8019b2a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8019b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b32:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b36:	b672      	cpsid	i
}
 8019b38:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019b3a:	88bb      	ldrh	r3, [r7, #4]
 8019b3c:	79f9      	ldrb	r1, [r7, #7]
 8019b3e:	683a      	ldr	r2, [r7, #0]
 8019b40:	4806      	ldr	r0, [pc, #24]	; (8019b5c <SUBGRF_ReadCommand+0x40>)
 8019b42:	f7ed fd26 	bl	8007592 <HAL_SUBGHZ_ExecGetCmd>
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b4a:	693b      	ldr	r3, [r7, #16]
 8019b4c:	f383 8810 	msr	PRIMASK, r3
}
 8019b50:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019b52:	bf00      	nop
 8019b54:	3718      	adds	r7, #24
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}
 8019b5a:	bf00      	nop
 8019b5c:	20000234 	.word	0x20000234

08019b60 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b084      	sub	sp, #16
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	4603      	mov	r3, r0
 8019b68:	460a      	mov	r2, r1
 8019b6a:	71fb      	strb	r3, [r7, #7]
 8019b6c:	4613      	mov	r3, r2
 8019b6e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019b70:	2301      	movs	r3, #1
 8019b72:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019b74:	79bb      	ldrb	r3, [r7, #6]
 8019b76:	2b01      	cmp	r3, #1
 8019b78:	d10d      	bne.n	8019b96 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019b7a:	79fb      	ldrb	r3, [r7, #7]
 8019b7c:	2b01      	cmp	r3, #1
 8019b7e:	d104      	bne.n	8019b8a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019b80:	2302      	movs	r3, #2
 8019b82:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019b84:	2004      	movs	r0, #4
 8019b86:	f000 f8df 	bl	8019d48 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019b8a:	79fb      	ldrb	r3, [r7, #7]
 8019b8c:	2b02      	cmp	r3, #2
 8019b8e:	d107      	bne.n	8019ba0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019b90:	2303      	movs	r3, #3
 8019b92:	73fb      	strb	r3, [r7, #15]
 8019b94:	e004      	b.n	8019ba0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019b96:	79bb      	ldrb	r3, [r7, #6]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d101      	bne.n	8019ba0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019b9c:	2301      	movs	r3, #1
 8019b9e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019ba0:	7bfb      	ldrb	r3, [r7, #15]
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f7f1 f825 	bl	800abf2 <RBI_ConfigRFSwitch>
}
 8019ba8:	bf00      	nop
 8019baa:	3710      	adds	r7, #16
 8019bac:	46bd      	mov	sp, r7
 8019bae:	bd80      	pop	{r7, pc}

08019bb0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b084      	sub	sp, #16
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019bba:	2301      	movs	r3, #1
 8019bbc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019bbe:	f7f1 f826 	bl	800ac0e <RBI_GetTxConfig>
 8019bc2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019bc4:	68bb      	ldr	r3, [r7, #8]
 8019bc6:	2b02      	cmp	r3, #2
 8019bc8:	d016      	beq.n	8019bf8 <SUBGRF_SetRfTxPower+0x48>
 8019bca:	68bb      	ldr	r3, [r7, #8]
 8019bcc:	2b02      	cmp	r3, #2
 8019bce:	dc16      	bgt.n	8019bfe <SUBGRF_SetRfTxPower+0x4e>
 8019bd0:	68bb      	ldr	r3, [r7, #8]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d003      	beq.n	8019bde <SUBGRF_SetRfTxPower+0x2e>
 8019bd6:	68bb      	ldr	r3, [r7, #8]
 8019bd8:	2b01      	cmp	r3, #1
 8019bda:	d00a      	beq.n	8019bf2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019bdc:	e00f      	b.n	8019bfe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019be2:	2b0f      	cmp	r3, #15
 8019be4:	dd02      	ble.n	8019bec <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019be6:	2302      	movs	r3, #2
 8019be8:	73fb      	strb	r3, [r7, #15]
            break;
 8019bea:	e009      	b.n	8019c00 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019bec:	2301      	movs	r3, #1
 8019bee:	73fb      	strb	r3, [r7, #15]
            break;
 8019bf0:	e006      	b.n	8019c00 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	73fb      	strb	r3, [r7, #15]
            break;
 8019bf6:	e003      	b.n	8019c00 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019bf8:	2302      	movs	r3, #2
 8019bfa:	73fb      	strb	r3, [r7, #15]
            break;
 8019bfc:	e000      	b.n	8019c00 <SUBGRF_SetRfTxPower+0x50>
            break;
 8019bfe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019c00:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019c04:	7bfb      	ldrb	r3, [r7, #15]
 8019c06:	2202      	movs	r2, #2
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f7ff fbcd 	bl	80193a8 <SUBGRF_SetTxParams>

    return paSelect;
 8019c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	3710      	adds	r7, #16
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}

08019c18 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019c18:	b480      	push	{r7}
 8019c1a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019c1c:	2301      	movs	r3, #1
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	46bd      	mov	sp, r7
 8019c22:	bc80      	pop	{r7}
 8019c24:	4770      	bx	lr
	...

08019c28 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b082      	sub	sp, #8
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019c30:	4b03      	ldr	r3, [pc, #12]	; (8019c40 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	2001      	movs	r0, #1
 8019c36:	4798      	blx	r3
}
 8019c38:	bf00      	nop
 8019c3a:	3708      	adds	r7, #8
 8019c3c:	46bd      	mov	sp, r7
 8019c3e:	bd80      	pop	{r7, pc}
 8019c40:	20001ed4 	.word	0x20001ed4

08019c44 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b082      	sub	sp, #8
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019c4c:	4b03      	ldr	r3, [pc, #12]	; (8019c5c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	2002      	movs	r0, #2
 8019c52:	4798      	blx	r3
}
 8019c54:	bf00      	nop
 8019c56:	3708      	adds	r7, #8
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	20001ed4 	.word	0x20001ed4

08019c60 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b082      	sub	sp, #8
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019c68:	4b03      	ldr	r3, [pc, #12]	; (8019c78 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	2040      	movs	r0, #64	; 0x40
 8019c6e:	4798      	blx	r3
}
 8019c70:	bf00      	nop
 8019c72:	3708      	adds	r7, #8
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}
 8019c78:	20001ed4 	.word	0x20001ed4

08019c7c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b082      	sub	sp, #8
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
 8019c84:	460b      	mov	r3, r1
 8019c86:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019c88:	78fb      	ldrb	r3, [r7, #3]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d002      	beq.n	8019c94 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019c8e:	2b01      	cmp	r3, #1
 8019c90:	d005      	beq.n	8019c9e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019c92:	e00a      	b.n	8019caa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019c94:	4b07      	ldr	r3, [pc, #28]	; (8019cb4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2080      	movs	r0, #128	; 0x80
 8019c9a:	4798      	blx	r3
            break;
 8019c9c:	e005      	b.n	8019caa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019c9e:	4b05      	ldr	r3, [pc, #20]	; (8019cb4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019ca6:	4798      	blx	r3
            break;
 8019ca8:	bf00      	nop
    }
}
 8019caa:	bf00      	nop
 8019cac:	3708      	adds	r7, #8
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	20001ed4 	.word	0x20001ed4

08019cb8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b082      	sub	sp, #8
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019cc0:	4b04      	ldr	r3, [pc, #16]	; (8019cd4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019cc8:	4798      	blx	r3
}
 8019cca:	bf00      	nop
 8019ccc:	3708      	adds	r7, #8
 8019cce:	46bd      	mov	sp, r7
 8019cd0:	bd80      	pop	{r7, pc}
 8019cd2:	bf00      	nop
 8019cd4:	20001ed4 	.word	0x20001ed4

08019cd8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b082      	sub	sp, #8
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019ce0:	4b03      	ldr	r3, [pc, #12]	; (8019cf0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	2020      	movs	r0, #32
 8019ce6:	4798      	blx	r3
}
 8019ce8:	bf00      	nop
 8019cea:	3708      	adds	r7, #8
 8019cec:	46bd      	mov	sp, r7
 8019cee:	bd80      	pop	{r7, pc}
 8019cf0:	20001ed4 	.word	0x20001ed4

08019cf4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b082      	sub	sp, #8
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019cfc:	4b03      	ldr	r3, [pc, #12]	; (8019d0c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	2004      	movs	r0, #4
 8019d02:	4798      	blx	r3
}
 8019d04:	bf00      	nop
 8019d06:	3708      	adds	r7, #8
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd80      	pop	{r7, pc}
 8019d0c:	20001ed4 	.word	0x20001ed4

08019d10 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019d18:	4b03      	ldr	r3, [pc, #12]	; (8019d28 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	2008      	movs	r0, #8
 8019d1e:	4798      	blx	r3
}
 8019d20:	bf00      	nop
 8019d22:	3708      	adds	r7, #8
 8019d24:	46bd      	mov	sp, r7
 8019d26:	bd80      	pop	{r7, pc}
 8019d28:	20001ed4 	.word	0x20001ed4

08019d2c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b082      	sub	sp, #8
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019d34:	4b03      	ldr	r3, [pc, #12]	; (8019d44 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	2010      	movs	r0, #16
 8019d3a:	4798      	blx	r3
}
 8019d3c:	bf00      	nop
 8019d3e:	3708      	adds	r7, #8
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}
 8019d44:	20001ed4 	.word	0x20001ed4

08019d48 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b084      	sub	sp, #16
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	4603      	mov	r3, r0
 8019d50:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019d52:	f7f0 ff6a 	bl	800ac2a <RBI_IsDCDC>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b01      	cmp	r3, #1
 8019d5a:	d112      	bne.n	8019d82 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019d5c:	f640 1023 	movw	r0, #2339	; 0x923
 8019d60:	f7ff fe1e 	bl	80199a0 <SUBGRF_ReadRegister>
 8019d64:	4603      	mov	r3, r0
 8019d66:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019d68:	7bfb      	ldrb	r3, [r7, #15]
 8019d6a:	f023 0306 	bic.w	r3, r3, #6
 8019d6e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019d70:	7bfa      	ldrb	r2, [r7, #15]
 8019d72:	79fb      	ldrb	r3, [r7, #7]
 8019d74:	4313      	orrs	r3, r2
 8019d76:	b2db      	uxtb	r3, r3
 8019d78:	4619      	mov	r1, r3
 8019d7a:	f640 1023 	movw	r0, #2339	; 0x923
 8019d7e:	f7ff fdfb 	bl	8019978 <SUBGRF_WriteRegister>
  }
}
 8019d82:	bf00      	nop
 8019d84:	3710      	adds	r7, #16
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bd80      	pop	{r7, pc}
	...

08019d8c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019d8c:	b480      	push	{r7}
 8019d8e:	b085      	sub	sp, #20
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d101      	bne.n	8019d9e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019d9a:	231f      	movs	r3, #31
 8019d9c:	e016      	b.n	8019dcc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019d9e:	2300      	movs	r3, #0
 8019da0:	73fb      	strb	r3, [r7, #15]
 8019da2:	e00f      	b.n	8019dc4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019da4:	7bfb      	ldrb	r3, [r7, #15]
 8019da6:	4a0c      	ldr	r2, [pc, #48]	; (8019dd8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019dac:	687a      	ldr	r2, [r7, #4]
 8019dae:	429a      	cmp	r2, r3
 8019db0:	d205      	bcs.n	8019dbe <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019db2:	7bfb      	ldrb	r3, [r7, #15]
 8019db4:	4a08      	ldr	r2, [pc, #32]	; (8019dd8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019db6:	00db      	lsls	r3, r3, #3
 8019db8:	4413      	add	r3, r2
 8019dba:	791b      	ldrb	r3, [r3, #4]
 8019dbc:	e006      	b.n	8019dcc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019dbe:	7bfb      	ldrb	r3, [r7, #15]
 8019dc0:	3301      	adds	r3, #1
 8019dc2:	73fb      	strb	r3, [r7, #15]
 8019dc4:	7bfb      	ldrb	r3, [r7, #15]
 8019dc6:	2b15      	cmp	r3, #21
 8019dc8:	d9ec      	bls.n	8019da4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019dca:	e7fe      	b.n	8019dca <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3714      	adds	r7, #20
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bc80      	pop	{r7}
 8019dd4:	4770      	bx	lr
 8019dd6:	bf00      	nop
 8019dd8:	0801c1f0 	.word	0x0801c1f0

08019ddc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b08a      	sub	sp, #40	; 0x28
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
 8019de4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019de6:	4b35      	ldr	r3, [pc, #212]	; (8019ebc <SUBGRF_GetCFO+0xe0>)
 8019de8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019dea:	f640 0007 	movw	r0, #2055	; 0x807
 8019dee:	f7ff fdd7 	bl	80199a0 <SUBGRF_ReadRegister>
 8019df2:	4603      	mov	r3, r0
 8019df4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019df6:	7ffb      	ldrb	r3, [r7, #31]
 8019df8:	08db      	lsrs	r3, r3, #3
 8019dfa:	b2db      	uxtb	r3, r3
 8019dfc:	f003 0303 	and.w	r3, r3, #3
 8019e00:	3328      	adds	r3, #40	; 0x28
 8019e02:	443b      	add	r3, r7
 8019e04:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019e08:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019e0a:	7ffb      	ldrb	r3, [r7, #31]
 8019e0c:	f003 0307 	and.w	r3, r3, #7
 8019e10:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019e12:	7fba      	ldrb	r2, [r7, #30]
 8019e14:	7f7b      	ldrb	r3, [r7, #29]
 8019e16:	3b01      	subs	r3, #1
 8019e18:	fa02 f303 	lsl.w	r3, r2, r3
 8019e1c:	461a      	mov	r2, r3
 8019e1e:	4b28      	ldr	r3, [pc, #160]	; (8019ec0 <SUBGRF_GetCFO+0xe4>)
 8019e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e24:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019e26:	69ba      	ldr	r2, [r7, #24]
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e2e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019e30:	2301      	movs	r3, #1
 8019e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e3a:	697a      	ldr	r2, [r7, #20]
 8019e3c:	fb02 f303 	mul.w	r3, r2, r3
 8019e40:	2b07      	cmp	r3, #7
 8019e42:	d802      	bhi.n	8019e4a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019e44:	2302      	movs	r3, #2
 8019e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e4e:	697a      	ldr	r2, [r7, #20]
 8019e50:	fb02 f303 	mul.w	r3, r2, r3
 8019e54:	2b03      	cmp	r3, #3
 8019e56:	d802      	bhi.n	8019e5e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019e58:	2304      	movs	r3, #4
 8019e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019e5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019e62:	69bb      	ldr	r3, [r7, #24]
 8019e64:	fb02 f303 	mul.w	r3, r2, r3
 8019e68:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019e6a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8019e6e:	f7ff fd97 	bl	80199a0 <SUBGRF_ReadRegister>
 8019e72:	4603      	mov	r3, r0
 8019e74:	021b      	lsls	r3, r3, #8
 8019e76:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019e7a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019e7c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019e80:	f7ff fd8e 	bl	80199a0 <SUBGRF_ReadRegister>
 8019e84:	4603      	mov	r3, r0
 8019e86:	461a      	mov	r2, r3
 8019e88:	6a3b      	ldr	r3, [r7, #32]
 8019e8a:	4313      	orrs	r3, r2
 8019e8c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019e8e:	6a3b      	ldr	r3, [r7, #32]
 8019e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d005      	beq.n	8019ea4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019e98:	6a3b      	ldr	r3, [r7, #32]
 8019e9a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019e9e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019ea2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019ea4:	693b      	ldr	r3, [r7, #16]
 8019ea6:	095b      	lsrs	r3, r3, #5
 8019ea8:	6a3a      	ldr	r2, [r7, #32]
 8019eaa:	fb02 f303 	mul.w	r3, r2, r3
 8019eae:	11da      	asrs	r2, r3, #7
 8019eb0:	683b      	ldr	r3, [r7, #0]
 8019eb2:	601a      	str	r2, [r3, #0]
}
 8019eb4:	bf00      	nop
 8019eb6:	3728      	adds	r7, #40	; 0x28
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bd80      	pop	{r7, pc}
 8019ebc:	0c0a0804 	.word	0x0c0a0804
 8019ec0:	01e84800 	.word	0x01e84800

08019ec4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019ec4:	b480      	push	{r7}
 8019ec6:	b087      	sub	sp, #28
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	4603      	mov	r3, r0
 8019ecc:	60b9      	str	r1, [r7, #8]
 8019ece:	607a      	str	r2, [r7, #4]
 8019ed0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8019eda:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019edc:	697b      	ldr	r3, [r7, #20]
}
 8019ede:	4618      	mov	r0, r3
 8019ee0:	371c      	adds	r7, #28
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bc80      	pop	{r7}
 8019ee6:	4770      	bx	lr

08019ee8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019ee8:	b480      	push	{r7}
 8019eea:	b087      	sub	sp, #28
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	4603      	mov	r3, r0
 8019ef0:	60b9      	str	r1, [r7, #8]
 8019ef2:	607a      	str	r2, [r7, #4]
 8019ef4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019efa:	f04f 33ff 	mov.w	r3, #4294967295
 8019efe:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019f00:	697b      	ldr	r3, [r7, #20]
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	371c      	adds	r7, #28
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bc80      	pop	{r7}
 8019f0a:	4770      	bx	lr

08019f0c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019f0c:	b480      	push	{r7}
 8019f0e:	b085      	sub	sp, #20
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	60f8      	str	r0, [r7, #12]
 8019f14:	60b9      	str	r1, [r7, #8]
 8019f16:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019f18:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3714      	adds	r7, #20
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bc80      	pop	{r7}
 8019f24:	4770      	bx	lr

08019f26 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019f26:	b480      	push	{r7}
 8019f28:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019f2a:	bf00      	nop
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bc80      	pop	{r7}
 8019f30:	4770      	bx	lr

08019f32 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019f32:	b480      	push	{r7}
 8019f34:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019f36:	2300      	movs	r3, #0
#endif
}
 8019f38:	4618      	mov	r0, r3
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bc80      	pop	{r7}
 8019f3e:	4770      	bx	lr

08019f40 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019f40:	b480      	push	{r7}
 8019f42:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019f44:	2300      	movs	r3, #0
#endif
}
 8019f46:	4618      	mov	r0, r3
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	bc80      	pop	{r7}
 8019f4c:	4770      	bx	lr

08019f4e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019f4e:	b480      	push	{r7}
 8019f50:	b083      	sub	sp, #12
 8019f52:	af00      	add	r7, sp, #0
 8019f54:	4603      	mov	r3, r0
 8019f56:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019f58:	bf00      	nop
 8019f5a:	370c      	adds	r7, #12
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	bc80      	pop	{r7}
 8019f60:	4770      	bx	lr

08019f62 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019f62:	b480      	push	{r7}
 8019f64:	b087      	sub	sp, #28
 8019f66:	af00      	add	r7, sp, #0
 8019f68:	60f8      	str	r0, [r7, #12]
 8019f6a:	460b      	mov	r3, r1
 8019f6c:	607a      	str	r2, [r7, #4]
 8019f6e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019f70:	f04f 33ff 	mov.w	r3, #4294967295
 8019f74:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8019f76:	697b      	ldr	r3, [r7, #20]
}
 8019f78:	4618      	mov	r0, r3
 8019f7a:	371c      	adds	r7, #28
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bc80      	pop	{r7}
 8019f80:	4770      	bx	lr

08019f82 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019f82:	b480      	push	{r7}
 8019f84:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019f86:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	46bd      	mov	sp, r7
 8019f8e:	bc80      	pop	{r7}
 8019f90:	4770      	bx	lr

08019f92 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019f92:	b480      	push	{r7}
 8019f94:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019f96:	bf00      	nop
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bc80      	pop	{r7}
 8019f9c:	4770      	bx	lr

08019f9e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019f9e:	b480      	push	{r7}
 8019fa0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019fa2:	bf00      	nop
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bc80      	pop	{r7}
 8019fa8:	4770      	bx	lr

08019faa <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019faa:	b480      	push	{r7}
 8019fac:	b083      	sub	sp, #12
 8019fae:	af00      	add	r7, sp, #0
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019fb4:	bf00      	nop
 8019fb6:	370c      	adds	r7, #12
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bc80      	pop	{r7}
 8019fbc:	4770      	bx	lr
	...

08019fc0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019fc0:	b480      	push	{r7}
 8019fc2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019fc4:	4b04      	ldr	r3, [pc, #16]	; (8019fd8 <UTIL_LPM_Init+0x18>)
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019fca:	4b04      	ldr	r3, [pc, #16]	; (8019fdc <UTIL_LPM_Init+0x1c>)
 8019fcc:	2200      	movs	r2, #0
 8019fce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019fd0:	bf00      	nop
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	bc80      	pop	{r7}
 8019fd6:	4770      	bx	lr
 8019fd8:	20001ed8 	.word	0x20001ed8
 8019fdc:	20001edc 	.word	0x20001edc

08019fe0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019fe0:	b480      	push	{r7}
 8019fe2:	b087      	sub	sp, #28
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
 8019fe8:	460b      	mov	r3, r1
 8019fea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fec:	f3ef 8310 	mrs	r3, PRIMASK
 8019ff0:	613b      	str	r3, [r7, #16]
  return(result);
 8019ff2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019ff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ff6:	b672      	cpsid	i
}
 8019ff8:	bf00      	nop
  
  switch( state )
 8019ffa:	78fb      	ldrb	r3, [r7, #3]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d008      	beq.n	801a012 <UTIL_LPM_SetStopMode+0x32>
 801a000:	2b01      	cmp	r3, #1
 801a002:	d10e      	bne.n	801a022 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a004:	4b0d      	ldr	r3, [pc, #52]	; (801a03c <UTIL_LPM_SetStopMode+0x5c>)
 801a006:	681a      	ldr	r2, [r3, #0]
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	4313      	orrs	r3, r2
 801a00c:	4a0b      	ldr	r2, [pc, #44]	; (801a03c <UTIL_LPM_SetStopMode+0x5c>)
 801a00e:	6013      	str	r3, [r2, #0]
      break;
 801a010:	e008      	b.n	801a024 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	43da      	mvns	r2, r3
 801a016:	4b09      	ldr	r3, [pc, #36]	; (801a03c <UTIL_LPM_SetStopMode+0x5c>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4013      	ands	r3, r2
 801a01c:	4a07      	ldr	r2, [pc, #28]	; (801a03c <UTIL_LPM_SetStopMode+0x5c>)
 801a01e:	6013      	str	r3, [r2, #0]
      break;
 801a020:	e000      	b.n	801a024 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a022:	bf00      	nop
 801a024:	697b      	ldr	r3, [r7, #20]
 801a026:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	f383 8810 	msr	PRIMASK, r3
}
 801a02e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a030:	bf00      	nop
 801a032:	371c      	adds	r7, #28
 801a034:	46bd      	mov	sp, r7
 801a036:	bc80      	pop	{r7}
 801a038:	4770      	bx	lr
 801a03a:	bf00      	nop
 801a03c:	20001ed8 	.word	0x20001ed8

0801a040 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a040:	b480      	push	{r7}
 801a042:	b087      	sub	sp, #28
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
 801a048:	460b      	mov	r3, r1
 801a04a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a04c:	f3ef 8310 	mrs	r3, PRIMASK
 801a050:	613b      	str	r3, [r7, #16]
  return(result);
 801a052:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a054:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a056:	b672      	cpsid	i
}
 801a058:	bf00      	nop
  
  switch(state)
 801a05a:	78fb      	ldrb	r3, [r7, #3]
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d008      	beq.n	801a072 <UTIL_LPM_SetOffMode+0x32>
 801a060:	2b01      	cmp	r3, #1
 801a062:	d10e      	bne.n	801a082 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a064:	4b0d      	ldr	r3, [pc, #52]	; (801a09c <UTIL_LPM_SetOffMode+0x5c>)
 801a066:	681a      	ldr	r2, [r3, #0]
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	4313      	orrs	r3, r2
 801a06c:	4a0b      	ldr	r2, [pc, #44]	; (801a09c <UTIL_LPM_SetOffMode+0x5c>)
 801a06e:	6013      	str	r3, [r2, #0]
      break;
 801a070:	e008      	b.n	801a084 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	43da      	mvns	r2, r3
 801a076:	4b09      	ldr	r3, [pc, #36]	; (801a09c <UTIL_LPM_SetOffMode+0x5c>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	4013      	ands	r3, r2
 801a07c:	4a07      	ldr	r2, [pc, #28]	; (801a09c <UTIL_LPM_SetOffMode+0x5c>)
 801a07e:	6013      	str	r3, [r2, #0]
      break;
 801a080:	e000      	b.n	801a084 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a082:	bf00      	nop
 801a084:	697b      	ldr	r3, [r7, #20]
 801a086:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	f383 8810 	msr	PRIMASK, r3
}
 801a08e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a090:	bf00      	nop
 801a092:	371c      	adds	r7, #28
 801a094:	46bd      	mov	sp, r7
 801a096:	bc80      	pop	{r7}
 801a098:	4770      	bx	lr
 801a09a:	bf00      	nop
 801a09c:	20001edc 	.word	0x20001edc

0801a0a0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b084      	sub	sp, #16
 801a0a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0a6:	f3ef 8310 	mrs	r3, PRIMASK
 801a0aa:	60bb      	str	r3, [r7, #8]
  return(result);
 801a0ac:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a0ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0b0:	b672      	cpsid	i
}
 801a0b2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0b4:	4b12      	ldr	r3, [pc, #72]	; (801a100 <UTIL_LPM_EnterLowPower+0x60>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d006      	beq.n	801a0ca <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a0bc:	4b11      	ldr	r3, [pc, #68]	; (801a104 <UTIL_LPM_EnterLowPower+0x64>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a0c2:	4b10      	ldr	r3, [pc, #64]	; (801a104 <UTIL_LPM_EnterLowPower+0x64>)
 801a0c4:	685b      	ldr	r3, [r3, #4]
 801a0c6:	4798      	blx	r3
 801a0c8:	e010      	b.n	801a0ec <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0ca:	4b0f      	ldr	r3, [pc, #60]	; (801a108 <UTIL_LPM_EnterLowPower+0x68>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d006      	beq.n	801a0e0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a0d2:	4b0c      	ldr	r3, [pc, #48]	; (801a104 <UTIL_LPM_EnterLowPower+0x64>)
 801a0d4:	689b      	ldr	r3, [r3, #8]
 801a0d6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a0d8:	4b0a      	ldr	r3, [pc, #40]	; (801a104 <UTIL_LPM_EnterLowPower+0x64>)
 801a0da:	68db      	ldr	r3, [r3, #12]
 801a0dc:	4798      	blx	r3
 801a0de:	e005      	b.n	801a0ec <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a0e0:	4b08      	ldr	r3, [pc, #32]	; (801a104 <UTIL_LPM_EnterLowPower+0x64>)
 801a0e2:	691b      	ldr	r3, [r3, #16]
 801a0e4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a0e6:	4b07      	ldr	r3, [pc, #28]	; (801a104 <UTIL_LPM_EnterLowPower+0x64>)
 801a0e8:	695b      	ldr	r3, [r3, #20]
 801a0ea:	4798      	blx	r3
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	f383 8810 	msr	PRIMASK, r3
}
 801a0f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a0f8:	bf00      	nop
 801a0fa:	3710      	adds	r7, #16
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}
 801a100:	20001ed8 	.word	0x20001ed8
 801a104:	0801bcf0 	.word	0x0801bcf0
 801a108:	20001edc 	.word	0x20001edc

0801a10c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a10c:	b480      	push	{r7}
 801a10e:	b087      	sub	sp, #28
 801a110:	af00      	add	r7, sp, #0
 801a112:	60f8      	str	r0, [r7, #12]
 801a114:	60b9      	str	r1, [r7, #8]
 801a116:	4613      	mov	r3, r2
 801a118:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a11e:	68bb      	ldr	r3, [r7, #8]
 801a120:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a122:	e007      	b.n	801a134 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a124:	693a      	ldr	r2, [r7, #16]
 801a126:	1c53      	adds	r3, r2, #1
 801a128:	613b      	str	r3, [r7, #16]
 801a12a:	697b      	ldr	r3, [r7, #20]
 801a12c:	1c59      	adds	r1, r3, #1
 801a12e:	6179      	str	r1, [r7, #20]
 801a130:	7812      	ldrb	r2, [r2, #0]
 801a132:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a134:	88fb      	ldrh	r3, [r7, #6]
 801a136:	1e5a      	subs	r2, r3, #1
 801a138:	80fa      	strh	r2, [r7, #6]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d1f2      	bne.n	801a124 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a13e:	bf00      	nop
 801a140:	bf00      	nop
 801a142:	371c      	adds	r7, #28
 801a144:	46bd      	mov	sp, r7
 801a146:	bc80      	pop	{r7}
 801a148:	4770      	bx	lr

0801a14a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a14a:	b480      	push	{r7}
 801a14c:	b085      	sub	sp, #20
 801a14e:	af00      	add	r7, sp, #0
 801a150:	6078      	str	r0, [r7, #4]
 801a152:	460b      	mov	r3, r1
 801a154:	70fb      	strb	r3, [r7, #3]
 801a156:	4613      	mov	r3, r2
 801a158:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a15e:	e004      	b.n	801a16a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	1c5a      	adds	r2, r3, #1
 801a164:	60fa      	str	r2, [r7, #12]
 801a166:	78fa      	ldrb	r2, [r7, #3]
 801a168:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a16a:	883b      	ldrh	r3, [r7, #0]
 801a16c:	1e5a      	subs	r2, r3, #1
 801a16e:	803a      	strh	r2, [r7, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d1f5      	bne.n	801a160 <UTIL_MEM_set_8+0x16>
  }
}
 801a174:	bf00      	nop
 801a176:	bf00      	nop
 801a178:	3714      	adds	r7, #20
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bc80      	pop	{r7}
 801a17e:	4770      	bx	lr

0801a180 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a180:	b082      	sub	sp, #8
 801a182:	b480      	push	{r7}
 801a184:	b087      	sub	sp, #28
 801a186:	af00      	add	r7, sp, #0
 801a188:	60f8      	str	r0, [r7, #12]
 801a18a:	1d38      	adds	r0, r7, #4
 801a18c:	e880 0006 	stmia.w	r0, {r1, r2}
 801a190:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a192:	2300      	movs	r3, #0
 801a194:	613b      	str	r3, [r7, #16]
 801a196:	2300      	movs	r3, #0
 801a198:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a19a:	687a      	ldr	r2, [r7, #4]
 801a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a19e:	4413      	add	r3, r2
 801a1a0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a1a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a1a6:	b29a      	uxth	r2, r3
 801a1a8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801a1ac:	b29b      	uxth	r3, r3
 801a1ae:	4413      	add	r3, r2
 801a1b0:	b29b      	uxth	r3, r3
 801a1b2:	b21b      	sxth	r3, r3
 801a1b4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a1b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a1be:	db0a      	blt.n	801a1d6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a1c0:	693b      	ldr	r3, [r7, #16]
 801a1c2:	3301      	adds	r3, #1
 801a1c4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a1c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1ca:	b29b      	uxth	r3, r3
 801a1cc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	b21b      	sxth	r3, r3
 801a1d4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	461a      	mov	r2, r3
 801a1da:	f107 0310 	add.w	r3, r7, #16
 801a1de:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a1e2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a1e6:	68f8      	ldr	r0, [r7, #12]
 801a1e8:	371c      	adds	r7, #28
 801a1ea:	46bd      	mov	sp, r7
 801a1ec:	bc80      	pop	{r7}
 801a1ee:	b002      	add	sp, #8
 801a1f0:	4770      	bx	lr

0801a1f2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a1f2:	b082      	sub	sp, #8
 801a1f4:	b480      	push	{r7}
 801a1f6:	b087      	sub	sp, #28
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	60f8      	str	r0, [r7, #12]
 801a1fc:	1d38      	adds	r0, r7, #4
 801a1fe:	e880 0006 	stmia.w	r0, {r1, r2}
 801a202:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a204:	2300      	movs	r3, #0
 801a206:	613b      	str	r3, [r7, #16]
 801a208:	2300      	movs	r3, #0
 801a20a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a20c:	687a      	ldr	r2, [r7, #4]
 801a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a210:	1ad3      	subs	r3, r2, r3
 801a212:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a214:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a218:	b29a      	uxth	r2, r3
 801a21a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801a21e:	b29b      	uxth	r3, r3
 801a220:	1ad3      	subs	r3, r2, r3
 801a222:	b29b      	uxth	r3, r3
 801a224:	b21b      	sxth	r3, r3
 801a226:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a228:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	da0a      	bge.n	801a246 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a230:	693b      	ldr	r3, [r7, #16]
 801a232:	3b01      	subs	r3, #1
 801a234:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a236:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a23a:	b29b      	uxth	r3, r3
 801a23c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801a240:	b29b      	uxth	r3, r3
 801a242:	b21b      	sxth	r3, r3
 801a244:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	461a      	mov	r2, r3
 801a24a:	f107 0310 	add.w	r3, r7, #16
 801a24e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a252:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a256:	68f8      	ldr	r0, [r7, #12]
 801a258:	371c      	adds	r7, #28
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bc80      	pop	{r7}
 801a25e:	b002      	add	sp, #8
 801a260:	4770      	bx	lr
	...

0801a264 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a264:	b580      	push	{r7, lr}
 801a266:	b088      	sub	sp, #32
 801a268:	af02      	add	r7, sp, #8
 801a26a:	463b      	mov	r3, r7
 801a26c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a270:	2300      	movs	r3, #0
 801a272:	60bb      	str	r3, [r7, #8]
 801a274:	2300      	movs	r3, #0
 801a276:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a278:	4b10      	ldr	r3, [pc, #64]	; (801a2bc <SysTimeSet+0x58>)
 801a27a:	691b      	ldr	r3, [r3, #16]
 801a27c:	f107 0208 	add.w	r2, r7, #8
 801a280:	3204      	adds	r2, #4
 801a282:	4610      	mov	r0, r2
 801a284:	4798      	blx	r3
 801a286:	4603      	mov	r3, r0
 801a288:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a28a:	f107 0010 	add.w	r0, r7, #16
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	9300      	str	r3, [sp, #0]
 801a292:	68bb      	ldr	r3, [r7, #8]
 801a294:	463a      	mov	r2, r7
 801a296:	ca06      	ldmia	r2, {r1, r2}
 801a298:	f7ff ffab 	bl	801a1f2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a29c:	4b07      	ldr	r3, [pc, #28]	; (801a2bc <SysTimeSet+0x58>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	693a      	ldr	r2, [r7, #16]
 801a2a2:	4610      	mov	r0, r2
 801a2a4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a2a6:	4b05      	ldr	r3, [pc, #20]	; (801a2bc <SysTimeSet+0x58>)
 801a2a8:	689b      	ldr	r3, [r3, #8]
 801a2aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a2ae:	4610      	mov	r0, r2
 801a2b0:	4798      	blx	r3
}
 801a2b2:	bf00      	nop
 801a2b4:	3718      	adds	r7, #24
 801a2b6:	46bd      	mov	sp, r7
 801a2b8:	bd80      	pop	{r7, pc}
 801a2ba:	bf00      	nop
 801a2bc:	0801bdd4 	.word	0x0801bdd4

0801a2c0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b08a      	sub	sp, #40	; 0x28
 801a2c4:	af02      	add	r7, sp, #8
 801a2c6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	61bb      	str	r3, [r7, #24]
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	613b      	str	r3, [r7, #16]
 801a2d4:	2300      	movs	r3, #0
 801a2d6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a2d8:	4b14      	ldr	r3, [pc, #80]	; (801a32c <SysTimeGet+0x6c>)
 801a2da:	691b      	ldr	r3, [r3, #16]
 801a2dc:	f107 0218 	add.w	r2, r7, #24
 801a2e0:	3204      	adds	r2, #4
 801a2e2:	4610      	mov	r0, r2
 801a2e4:	4798      	blx	r3
 801a2e6:	4603      	mov	r3, r0
 801a2e8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a2ea:	4b10      	ldr	r3, [pc, #64]	; (801a32c <SysTimeGet+0x6c>)
 801a2ec:	68db      	ldr	r3, [r3, #12]
 801a2ee:	4798      	blx	r3
 801a2f0:	4603      	mov	r3, r0
 801a2f2:	b21b      	sxth	r3, r3
 801a2f4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a2f6:	4b0d      	ldr	r3, [pc, #52]	; (801a32c <SysTimeGet+0x6c>)
 801a2f8:	685b      	ldr	r3, [r3, #4]
 801a2fa:	4798      	blx	r3
 801a2fc:	4603      	mov	r3, r0
 801a2fe:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a300:	f107 0010 	add.w	r0, r7, #16
 801a304:	69fb      	ldr	r3, [r7, #28]
 801a306:	9300      	str	r3, [sp, #0]
 801a308:	69bb      	ldr	r3, [r7, #24]
 801a30a:	f107 0208 	add.w	r2, r7, #8
 801a30e:	ca06      	ldmia	r2, {r1, r2}
 801a310:	f7ff ff36 	bl	801a180 <SysTimeAdd>

  return sysTime;
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	461a      	mov	r2, r3
 801a318:	f107 0310 	add.w	r3, r7, #16
 801a31c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a320:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a324:	6878      	ldr	r0, [r7, #4]
 801a326:	3720      	adds	r7, #32
 801a328:	46bd      	mov	sp, r7
 801a32a:	bd80      	pop	{r7, pc}
 801a32c:	0801bdd4 	.word	0x0801bdd4

0801a330 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b084      	sub	sp, #16
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a338:	2300      	movs	r3, #0
 801a33a:	60bb      	str	r3, [r7, #8]
 801a33c:	2300      	movs	r3, #0
 801a33e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a340:	4b0a      	ldr	r3, [pc, #40]	; (801a36c <SysTimeGetMcuTime+0x3c>)
 801a342:	691b      	ldr	r3, [r3, #16]
 801a344:	f107 0208 	add.w	r2, r7, #8
 801a348:	3204      	adds	r2, #4
 801a34a:	4610      	mov	r0, r2
 801a34c:	4798      	blx	r3
 801a34e:	4603      	mov	r3, r0
 801a350:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	461a      	mov	r2, r3
 801a356:	f107 0308 	add.w	r3, r7, #8
 801a35a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a35e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	3710      	adds	r7, #16
 801a366:	46bd      	mov	sp, r7
 801a368:	bd80      	pop	{r7, pc}
 801a36a:	bf00      	nop
 801a36c:	0801bdd4 	.word	0x0801bdd4

0801a370 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a370:	b580      	push	{r7, lr}
 801a372:	b088      	sub	sp, #32
 801a374:	af02      	add	r7, sp, #8
 801a376:	463b      	mov	r3, r7
 801a378:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a37c:	4b0f      	ldr	r3, [pc, #60]	; (801a3bc <SysTimeToMs+0x4c>)
 801a37e:	68db      	ldr	r3, [r3, #12]
 801a380:	4798      	blx	r3
 801a382:	4603      	mov	r3, r0
 801a384:	b21b      	sxth	r3, r3
 801a386:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a388:	4b0c      	ldr	r3, [pc, #48]	; (801a3bc <SysTimeToMs+0x4c>)
 801a38a:	685b      	ldr	r3, [r3, #4]
 801a38c:	4798      	blx	r3
 801a38e:	4603      	mov	r3, r0
 801a390:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a392:	f107 0008 	add.w	r0, r7, #8
 801a396:	697b      	ldr	r3, [r7, #20]
 801a398:	9300      	str	r3, [sp, #0]
 801a39a:	693b      	ldr	r3, [r7, #16]
 801a39c:	463a      	mov	r2, r7
 801a39e:	ca06      	ldmia	r2, {r1, r2}
 801a3a0:	f7ff ff27 	bl	801a1f2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a3aa:	fb02 f303 	mul.w	r3, r2, r3
 801a3ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a3b2:	4413      	add	r3, r2
}
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	3718      	adds	r7, #24
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	bd80      	pop	{r7, pc}
 801a3bc:	0801bdd4 	.word	0x0801bdd4

0801a3c0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b08a      	sub	sp, #40	; 0x28
 801a3c4:	af02      	add	r7, sp, #8
 801a3c6:	6078      	str	r0, [r7, #4]
 801a3c8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	4a19      	ldr	r2, [pc, #100]	; (801a434 <SysTimeFromMs+0x74>)
 801a3ce:	fba2 2303 	umull	r2, r3, r2, r3
 801a3d2:	099b      	lsrs	r3, r3, #6
 801a3d4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a3d6:	69fb      	ldr	r3, [r7, #28]
 801a3d8:	617b      	str	r3, [r7, #20]
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	b29a      	uxth	r2, r3
 801a3de:	69fb      	ldr	r3, [r7, #28]
 801a3e0:	b29b      	uxth	r3, r3
 801a3e2:	4619      	mov	r1, r3
 801a3e4:	0149      	lsls	r1, r1, #5
 801a3e6:	1ac9      	subs	r1, r1, r3
 801a3e8:	0089      	lsls	r1, r1, #2
 801a3ea:	440b      	add	r3, r1
 801a3ec:	00db      	lsls	r3, r3, #3
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	1ad3      	subs	r3, r2, r3
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	b21b      	sxth	r3, r3
 801a3f6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a3f8:	f107 030c 	add.w	r3, r7, #12
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	601a      	str	r2, [r3, #0]
 801a400:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a402:	4b0d      	ldr	r3, [pc, #52]	; (801a438 <SysTimeFromMs+0x78>)
 801a404:	68db      	ldr	r3, [r3, #12]
 801a406:	4798      	blx	r3
 801a408:	4603      	mov	r3, r0
 801a40a:	b21b      	sxth	r3, r3
 801a40c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a40e:	4b0a      	ldr	r3, [pc, #40]	; (801a438 <SysTimeFromMs+0x78>)
 801a410:	685b      	ldr	r3, [r3, #4]
 801a412:	4798      	blx	r3
 801a414:	4603      	mov	r3, r0
 801a416:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a418:	6878      	ldr	r0, [r7, #4]
 801a41a:	693b      	ldr	r3, [r7, #16]
 801a41c:	9300      	str	r3, [sp, #0]
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	f107 0214 	add.w	r2, r7, #20
 801a424:	ca06      	ldmia	r2, {r1, r2}
 801a426:	f7ff feab 	bl	801a180 <SysTimeAdd>
}
 801a42a:	6878      	ldr	r0, [r7, #4]
 801a42c:	3720      	adds	r7, #32
 801a42e:	46bd      	mov	sp, r7
 801a430:	bd80      	pop	{r7, pc}
 801a432:	bf00      	nop
 801a434:	10624dd3 	.word	0x10624dd3
 801a438:	0801bdd4 	.word	0x0801bdd4

0801a43c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a43c:	b480      	push	{r7}
 801a43e:	b085      	sub	sp, #20
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a444:	2300      	movs	r3, #0
 801a446:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a448:	e00e      	b.n	801a468 <ee_skip_atoi+0x2c>
 801a44a:	68fa      	ldr	r2, [r7, #12]
 801a44c:	4613      	mov	r3, r2
 801a44e:	009b      	lsls	r3, r3, #2
 801a450:	4413      	add	r3, r2
 801a452:	005b      	lsls	r3, r3, #1
 801a454:	4618      	mov	r0, r3
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	1c59      	adds	r1, r3, #1
 801a45c:	687a      	ldr	r2, [r7, #4]
 801a45e:	6011      	str	r1, [r2, #0]
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	4403      	add	r3, r0
 801a464:	3b30      	subs	r3, #48	; 0x30
 801a466:	60fb      	str	r3, [r7, #12]
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	781b      	ldrb	r3, [r3, #0]
 801a46e:	2b2f      	cmp	r3, #47	; 0x2f
 801a470:	d904      	bls.n	801a47c <ee_skip_atoi+0x40>
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	2b39      	cmp	r3, #57	; 0x39
 801a47a:	d9e6      	bls.n	801a44a <ee_skip_atoi+0xe>
  return i;
 801a47c:	68fb      	ldr	r3, [r7, #12]
}
 801a47e:	4618      	mov	r0, r3
 801a480:	3714      	adds	r7, #20
 801a482:	46bd      	mov	sp, r7
 801a484:	bc80      	pop	{r7}
 801a486:	4770      	bx	lr

0801a488 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a488:	b480      	push	{r7}
 801a48a:	b099      	sub	sp, #100	; 0x64
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	60f8      	str	r0, [r7, #12]
 801a490:	60b9      	str	r1, [r7, #8]
 801a492:	607a      	str	r2, [r7, #4]
 801a494:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a496:	4b71      	ldr	r3, [pc, #452]	; (801a65c <ee_number+0x1d4>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a49c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d002      	beq.n	801a4ac <ee_number+0x24>
 801a4a6:	4b6e      	ldr	r3, [pc, #440]	; (801a660 <ee_number+0x1d8>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	2b01      	cmp	r3, #1
 801a4b0:	dd02      	ble.n	801a4b8 <ee_number+0x30>
 801a4b2:	683b      	ldr	r3, [r7, #0]
 801a4b4:	2b24      	cmp	r3, #36	; 0x24
 801a4b6:	dd01      	ble.n	801a4bc <ee_number+0x34>
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	e0ca      	b.n	801a652 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a4bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a4be:	f003 0301 	and.w	r3, r3, #1
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d001      	beq.n	801a4ca <ee_number+0x42>
 801a4c6:	2330      	movs	r3, #48	; 0x30
 801a4c8:	e000      	b.n	801a4cc <ee_number+0x44>
 801a4ca:	2320      	movs	r3, #32
 801a4cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801a4d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a4d8:	f003 0302 	and.w	r3, r3, #2
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d00b      	beq.n	801a4f8 <ee_number+0x70>
  {
    if (num < 0)
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	da08      	bge.n	801a4f8 <ee_number+0x70>
    {
      sign = '-';
 801a4e6:	232d      	movs	r3, #45	; 0x2d
 801a4e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	425b      	negs	r3, r3
 801a4f0:	607b      	str	r3, [r7, #4]
      size--;
 801a4f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a4f4:	3b01      	subs	r3, #1
 801a4f6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d11e      	bne.n	801a540 <ee_number+0xb8>
    tmp[i++] = '0';
 801a502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a504:	1c5a      	adds	r2, r3, #1
 801a506:	657a      	str	r2, [r7, #84]	; 0x54
 801a508:	3360      	adds	r3, #96	; 0x60
 801a50a:	443b      	add	r3, r7
 801a50c:	2230      	movs	r2, #48	; 0x30
 801a50e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a512:	e018      	b.n	801a546 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	683a      	ldr	r2, [r7, #0]
 801a518:	fbb3 f1f2 	udiv	r1, r3, r2
 801a51c:	fb01 f202 	mul.w	r2, r1, r2
 801a520:	1a9b      	subs	r3, r3, r2
 801a522:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a524:	441a      	add	r2, r3
 801a526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a528:	1c59      	adds	r1, r3, #1
 801a52a:	6579      	str	r1, [r7, #84]	; 0x54
 801a52c:	7812      	ldrb	r2, [r2, #0]
 801a52e:	3360      	adds	r3, #96	; 0x60
 801a530:	443b      	add	r3, r7
 801a532:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a536:	687a      	ldr	r2, [r7, #4]
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a53e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d1e6      	bne.n	801a514 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a546:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a54a:	429a      	cmp	r2, r3
 801a54c:	dd01      	ble.n	801a552 <ee_number+0xca>
 801a54e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a550:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801a552:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a556:	1ad3      	subs	r3, r2, r3
 801a558:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a55a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a55c:	f003 0301 	and.w	r3, r3, #1
 801a560:	2b00      	cmp	r3, #0
 801a562:	d112      	bne.n	801a58a <ee_number+0x102>
 801a564:	e00c      	b.n	801a580 <ee_number+0xf8>
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	1c5a      	adds	r2, r3, #1
 801a56a:	60fa      	str	r2, [r7, #12]
 801a56c:	2220      	movs	r2, #32
 801a56e:	701a      	strb	r2, [r3, #0]
 801a570:	68bb      	ldr	r3, [r7, #8]
 801a572:	3b01      	subs	r3, #1
 801a574:	60bb      	str	r3, [r7, #8]
 801a576:	68bb      	ldr	r3, [r7, #8]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d101      	bne.n	801a580 <ee_number+0xf8>
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	e068      	b.n	801a652 <ee_number+0x1ca>
 801a580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a582:	1e5a      	subs	r2, r3, #1
 801a584:	66ba      	str	r2, [r7, #104]	; 0x68
 801a586:	2b00      	cmp	r3, #0
 801a588:	dced      	bgt.n	801a566 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a58a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d01b      	beq.n	801a5ca <ee_number+0x142>
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	1c5a      	adds	r2, r3, #1
 801a596:	60fa      	str	r2, [r7, #12]
 801a598:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801a59c:	701a      	strb	r2, [r3, #0]
 801a59e:	68bb      	ldr	r3, [r7, #8]
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	60bb      	str	r3, [r7, #8]
 801a5a4:	68bb      	ldr	r3, [r7, #8]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d10f      	bne.n	801a5ca <ee_number+0x142>
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	e051      	b.n	801a652 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	1c5a      	adds	r2, r3, #1
 801a5b2:	60fa      	str	r2, [r7, #12]
 801a5b4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801a5b8:	701a      	strb	r2, [r3, #0]
 801a5ba:	68bb      	ldr	r3, [r7, #8]
 801a5bc:	3b01      	subs	r3, #1
 801a5be:	60bb      	str	r3, [r7, #8]
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d101      	bne.n	801a5ca <ee_number+0x142>
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	e043      	b.n	801a652 <ee_number+0x1ca>
 801a5ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a5cc:	1e5a      	subs	r2, r3, #1
 801a5ce:	66ba      	str	r2, [r7, #104]	; 0x68
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	dcec      	bgt.n	801a5ae <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a5d4:	e00c      	b.n	801a5f0 <ee_number+0x168>
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	1c5a      	adds	r2, r3, #1
 801a5da:	60fa      	str	r2, [r7, #12]
 801a5dc:	2230      	movs	r2, #48	; 0x30
 801a5de:	701a      	strb	r2, [r3, #0]
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	3b01      	subs	r3, #1
 801a5e4:	60bb      	str	r3, [r7, #8]
 801a5e6:	68bb      	ldr	r3, [r7, #8]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d101      	bne.n	801a5f0 <ee_number+0x168>
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	e030      	b.n	801a652 <ee_number+0x1ca>
 801a5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5f2:	1e5a      	subs	r2, r3, #1
 801a5f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a5f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	dbec      	blt.n	801a5d6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a5fc:	e010      	b.n	801a620 <ee_number+0x198>
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	1c5a      	adds	r2, r3, #1
 801a602:	60fa      	str	r2, [r7, #12]
 801a604:	f107 0110 	add.w	r1, r7, #16
 801a608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a60a:	440a      	add	r2, r1
 801a60c:	7812      	ldrb	r2, [r2, #0]
 801a60e:	701a      	strb	r2, [r3, #0]
 801a610:	68bb      	ldr	r3, [r7, #8]
 801a612:	3b01      	subs	r3, #1
 801a614:	60bb      	str	r3, [r7, #8]
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d101      	bne.n	801a620 <ee_number+0x198>
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	e018      	b.n	801a652 <ee_number+0x1ca>
 801a620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a622:	1e5a      	subs	r2, r3, #1
 801a624:	657a      	str	r2, [r7, #84]	; 0x54
 801a626:	2b00      	cmp	r3, #0
 801a628:	dce9      	bgt.n	801a5fe <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a62a:	e00c      	b.n	801a646 <ee_number+0x1be>
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	1c5a      	adds	r2, r3, #1
 801a630:	60fa      	str	r2, [r7, #12]
 801a632:	2220      	movs	r2, #32
 801a634:	701a      	strb	r2, [r3, #0]
 801a636:	68bb      	ldr	r3, [r7, #8]
 801a638:	3b01      	subs	r3, #1
 801a63a:	60bb      	str	r3, [r7, #8]
 801a63c:	68bb      	ldr	r3, [r7, #8]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d101      	bne.n	801a646 <ee_number+0x1be>
 801a642:	68fb      	ldr	r3, [r7, #12]
 801a644:	e005      	b.n	801a652 <ee_number+0x1ca>
 801a646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a648:	1e5a      	subs	r2, r3, #1
 801a64a:	66ba      	str	r2, [r7, #104]	; 0x68
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	dced      	bgt.n	801a62c <ee_number+0x1a4>

  return str;
 801a650:	68fb      	ldr	r3, [r7, #12]
}
 801a652:	4618      	mov	r0, r3
 801a654:	3764      	adds	r7, #100	; 0x64
 801a656:	46bd      	mov	sp, r7
 801a658:	bc80      	pop	{r7}
 801a65a:	4770      	bx	lr
 801a65c:	20000140 	.word	0x20000140
 801a660:	20000144 	.word	0x20000144

0801a664 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b092      	sub	sp, #72	; 0x48
 801a668:	af04      	add	r7, sp, #16
 801a66a:	60f8      	str	r0, [r7, #12]
 801a66c:	60b9      	str	r1, [r7, #8]
 801a66e:	607a      	str	r2, [r7, #4]
 801a670:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a672:	68bb      	ldr	r3, [r7, #8]
 801a674:	2b00      	cmp	r3, #0
 801a676:	dc01      	bgt.n	801a67c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a678:	2300      	movs	r3, #0
 801a67a:	e142      	b.n	801a902 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a680:	e12a      	b.n	801a8d8 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	1ad2      	subs	r2, r2, r3
 801a688:	68bb      	ldr	r3, [r7, #8]
 801a68a:	3b01      	subs	r3, #1
 801a68c:	429a      	cmp	r2, r3
 801a68e:	f280 8131 	bge.w	801a8f4 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	781b      	ldrb	r3, [r3, #0]
 801a696:	2b25      	cmp	r3, #37	; 0x25
 801a698:	d006      	beq.n	801a6a8 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a69a:	687a      	ldr	r2, [r7, #4]
 801a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a69e:	1c59      	adds	r1, r3, #1
 801a6a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a6a2:	7812      	ldrb	r2, [r2, #0]
 801a6a4:	701a      	strb	r2, [r3, #0]
      continue;
 801a6a6:	e114      	b.n	801a8d2 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	3301      	adds	r3, #1
 801a6b0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	781b      	ldrb	r3, [r3, #0]
 801a6b6:	2b30      	cmp	r3, #48	; 0x30
 801a6b8:	d103      	bne.n	801a6c2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a6ba:	6a3b      	ldr	r3, [r7, #32]
 801a6bc:	f043 0301 	orr.w	r3, r3, #1
 801a6c0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a6c2:	f04f 33ff 	mov.w	r3, #4294967295
 801a6c6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	781b      	ldrb	r3, [r3, #0]
 801a6cc:	2b2f      	cmp	r3, #47	; 0x2f
 801a6ce:	d908      	bls.n	801a6e2 <tiny_vsnprintf_like+0x7e>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	781b      	ldrb	r3, [r3, #0]
 801a6d4:	2b39      	cmp	r3, #57	; 0x39
 801a6d6:	d804      	bhi.n	801a6e2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a6d8:	1d3b      	adds	r3, r7, #4
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f7ff feae 	bl	801a43c <ee_skip_atoi>
 801a6e0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a6e6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a6e8:	f04f 33ff 	mov.w	r3, #4294967295
 801a6ec:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a6ee:	230a      	movs	r3, #10
 801a6f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	781b      	ldrb	r3, [r3, #0]
 801a6f6:	3b58      	subs	r3, #88	; 0x58
 801a6f8:	2b20      	cmp	r3, #32
 801a6fa:	f200 8094 	bhi.w	801a826 <tiny_vsnprintf_like+0x1c2>
 801a6fe:	a201      	add	r2, pc, #4	; (adr r2, 801a704 <tiny_vsnprintf_like+0xa0>)
 801a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a704:	0801a80f 	.word	0x0801a80f
 801a708:	0801a827 	.word	0x0801a827
 801a70c:	0801a827 	.word	0x0801a827
 801a710:	0801a827 	.word	0x0801a827
 801a714:	0801a827 	.word	0x0801a827
 801a718:	0801a827 	.word	0x0801a827
 801a71c:	0801a827 	.word	0x0801a827
 801a720:	0801a827 	.word	0x0801a827
 801a724:	0801a827 	.word	0x0801a827
 801a728:	0801a827 	.word	0x0801a827
 801a72c:	0801a827 	.word	0x0801a827
 801a730:	0801a793 	.word	0x0801a793
 801a734:	0801a81d 	.word	0x0801a81d
 801a738:	0801a827 	.word	0x0801a827
 801a73c:	0801a827 	.word	0x0801a827
 801a740:	0801a827 	.word	0x0801a827
 801a744:	0801a827 	.word	0x0801a827
 801a748:	0801a81d 	.word	0x0801a81d
 801a74c:	0801a827 	.word	0x0801a827
 801a750:	0801a827 	.word	0x0801a827
 801a754:	0801a827 	.word	0x0801a827
 801a758:	0801a827 	.word	0x0801a827
 801a75c:	0801a827 	.word	0x0801a827
 801a760:	0801a827 	.word	0x0801a827
 801a764:	0801a827 	.word	0x0801a827
 801a768:	0801a827 	.word	0x0801a827
 801a76c:	0801a827 	.word	0x0801a827
 801a770:	0801a7b3 	.word	0x0801a7b3
 801a774:	0801a827 	.word	0x0801a827
 801a778:	0801a873 	.word	0x0801a873
 801a77c:	0801a827 	.word	0x0801a827
 801a780:	0801a827 	.word	0x0801a827
 801a784:	0801a817 	.word	0x0801a817
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78a:	1c5a      	adds	r2, r3, #1
 801a78c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a78e:	2220      	movs	r2, #32
 801a790:	701a      	strb	r2, [r3, #0]
 801a792:	69fb      	ldr	r3, [r7, #28]
 801a794:	3b01      	subs	r3, #1
 801a796:	61fb      	str	r3, [r7, #28]
 801a798:	69fb      	ldr	r3, [r7, #28]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	dcf4      	bgt.n	801a788 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a79e:	683b      	ldr	r3, [r7, #0]
 801a7a0:	1d1a      	adds	r2, r3, #4
 801a7a2:	603a      	str	r2, [r7, #0]
 801a7a4:	6819      	ldr	r1, [r3, #0]
 801a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7a8:	1c5a      	adds	r2, r3, #1
 801a7aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a7ac:	b2ca      	uxtb	r2, r1
 801a7ae:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a7b0:	e08f      	b.n	801a8d2 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	1d1a      	adds	r2, r3, #4
 801a7b6:	603a      	str	r2, [r7, #0]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d101      	bne.n	801a7c6 <tiny_vsnprintf_like+0x162>
 801a7c2:	4b52      	ldr	r3, [pc, #328]	; (801a90c <tiny_vsnprintf_like+0x2a8>)
 801a7c4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a7c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a7c8:	f7e5 fcd6 	bl	8000178 <strlen>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a7d0:	e004      	b.n	801a7dc <tiny_vsnprintf_like+0x178>
 801a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7d4:	1c5a      	adds	r2, r3, #1
 801a7d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a7d8:	2220      	movs	r2, #32
 801a7da:	701a      	strb	r2, [r3, #0]
 801a7dc:	69fb      	ldr	r3, [r7, #28]
 801a7de:	1e5a      	subs	r2, r3, #1
 801a7e0:	61fa      	str	r2, [r7, #28]
 801a7e2:	693a      	ldr	r2, [r7, #16]
 801a7e4:	429a      	cmp	r2, r3
 801a7e6:	dbf4      	blt.n	801a7d2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	62bb      	str	r3, [r7, #40]	; 0x28
 801a7ec:	e00a      	b.n	801a804 <tiny_vsnprintf_like+0x1a0>
 801a7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a7f0:	1c53      	adds	r3, r2, #1
 801a7f2:	627b      	str	r3, [r7, #36]	; 0x24
 801a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f6:	1c59      	adds	r1, r3, #1
 801a7f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a7fa:	7812      	ldrb	r2, [r2, #0]
 801a7fc:	701a      	strb	r2, [r3, #0]
 801a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a800:	3301      	adds	r3, #1
 801a802:	62bb      	str	r3, [r7, #40]	; 0x28
 801a804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a806:	693b      	ldr	r3, [r7, #16]
 801a808:	429a      	cmp	r2, r3
 801a80a:	dbf0      	blt.n	801a7ee <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a80c:	e061      	b.n	801a8d2 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a80e:	6a3b      	ldr	r3, [r7, #32]
 801a810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a814:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a816:	2310      	movs	r3, #16
 801a818:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a81a:	e02d      	b.n	801a878 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a81c:	6a3b      	ldr	r3, [r7, #32]
 801a81e:	f043 0302 	orr.w	r3, r3, #2
 801a822:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a824:	e025      	b.n	801a872 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	781b      	ldrb	r3, [r3, #0]
 801a82a:	2b25      	cmp	r3, #37	; 0x25
 801a82c:	d004      	beq.n	801a838 <tiny_vsnprintf_like+0x1d4>
 801a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a830:	1c5a      	adds	r2, r3, #1
 801a832:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a834:	2225      	movs	r2, #37	; 0x25
 801a836:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	1ad2      	subs	r2, r2, r3
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	3b01      	subs	r3, #1
 801a842:	429a      	cmp	r2, r3
 801a844:	da17      	bge.n	801a876 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	781b      	ldrb	r3, [r3, #0]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d006      	beq.n	801a85c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a84e:	687a      	ldr	r2, [r7, #4]
 801a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a852:	1c59      	adds	r1, r3, #1
 801a854:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a856:	7812      	ldrb	r2, [r2, #0]
 801a858:	701a      	strb	r2, [r3, #0]
 801a85a:	e002      	b.n	801a862 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	3b01      	subs	r3, #1
 801a860:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	1ad2      	subs	r2, r2, r3
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	3b01      	subs	r3, #1
 801a86c:	429a      	cmp	r2, r3
 801a86e:	db2f      	blt.n	801a8d0 <tiny_vsnprintf_like+0x26c>
 801a870:	e002      	b.n	801a878 <tiny_vsnprintf_like+0x214>
        break;
 801a872:	bf00      	nop
 801a874:	e000      	b.n	801a878 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a876:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a878:	697b      	ldr	r3, [r7, #20]
 801a87a:	2b6c      	cmp	r3, #108	; 0x6c
 801a87c:	d105      	bne.n	801a88a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	1d1a      	adds	r2, r3, #4
 801a882:	603a      	str	r2, [r7, #0]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	637b      	str	r3, [r7, #52]	; 0x34
 801a888:	e00f      	b.n	801a8aa <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a88a:	6a3b      	ldr	r3, [r7, #32]
 801a88c:	f003 0302 	and.w	r3, r3, #2
 801a890:	2b00      	cmp	r3, #0
 801a892:	d005      	beq.n	801a8a0 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a894:	683b      	ldr	r3, [r7, #0]
 801a896:	1d1a      	adds	r2, r3, #4
 801a898:	603a      	str	r2, [r7, #0]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	637b      	str	r3, [r7, #52]	; 0x34
 801a89e:	e004      	b.n	801a8aa <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a8a0:	683b      	ldr	r3, [r7, #0]
 801a8a2:	1d1a      	adds	r2, r3, #4
 801a8a4:	603a      	str	r2, [r7, #0]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a8aa:	68bb      	ldr	r3, [r7, #8]
 801a8ac:	1e5a      	subs	r2, r3, #1
 801a8ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	1acb      	subs	r3, r1, r3
 801a8b4:	1ad1      	subs	r1, r2, r3
 801a8b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8b8:	6a3b      	ldr	r3, [r7, #32]
 801a8ba:	9302      	str	r3, [sp, #8]
 801a8bc:	69bb      	ldr	r3, [r7, #24]
 801a8be:	9301      	str	r3, [sp, #4]
 801a8c0:	69fb      	ldr	r3, [r7, #28]
 801a8c2:	9300      	str	r3, [sp, #0]
 801a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8c8:	f7ff fdde 	bl	801a488 <ee_number>
 801a8cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a8ce:	e000      	b.n	801a8d2 <tiny_vsnprintf_like+0x26e>
        continue;
 801a8d0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	3301      	adds	r3, #1
 801a8d6:	607b      	str	r3, [r7, #4]
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	781b      	ldrb	r3, [r3, #0]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	f47f aed0 	bne.w	801a682 <tiny_vsnprintf_like+0x1e>
 801a8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	1ad2      	subs	r2, r2, r3
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	3b01      	subs	r3, #1
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	f6bf aec8 	bge.w	801a682 <tiny_vsnprintf_like+0x1e>
 801a8f2:	e000      	b.n	801a8f6 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a8f4:	bf00      	nop
  }

  *str = '\0';
 801a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f8:	2200      	movs	r2, #0
 801a8fa:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	1ad3      	subs	r3, r2, r3
}
 801a902:	4618      	mov	r0, r3
 801a904:	3738      	adds	r7, #56	; 0x38
 801a906:	46bd      	mov	sp, r7
 801a908:	bd80      	pop	{r7, pc}
 801a90a:	bf00      	nop
 801a90c:	0801bce8 	.word	0x0801bce8

0801a910 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b090      	sub	sp, #64	; 0x40
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a918:	4b73      	ldr	r3, [pc, #460]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a91e:	4b72      	ldr	r3, [pc, #456]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801a920:	681a      	ldr	r2, [r3, #0]
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	4013      	ands	r3, r2
 801a926:	4a70      	ldr	r2, [pc, #448]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801a928:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a92a:	4b70      	ldr	r3, [pc, #448]	; (801aaec <UTIL_SEQ_Run+0x1dc>)
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801a930:	4b6f      	ldr	r3, [pc, #444]	; (801aaf0 <UTIL_SEQ_Run+0x1e0>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801a936:	4b6f      	ldr	r3, [pc, #444]	; (801aaf4 <UTIL_SEQ_Run+0x1e4>)
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801a93c:	4b6e      	ldr	r3, [pc, #440]	; (801aaf8 <UTIL_SEQ_Run+0x1e8>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a942:	e08d      	b.n	801aa60 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a944:	2300      	movs	r3, #0
 801a946:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a948:	e002      	b.n	801a950 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a94c:	3301      	adds	r3, #1
 801a94e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a950:	4a6a      	ldr	r2, [pc, #424]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801a952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a954:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a95a:	401a      	ands	r2, r3
 801a95c:	4b62      	ldr	r3, [pc, #392]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	4013      	ands	r3, r2
 801a962:	2b00      	cmp	r3, #0
 801a964:	d0f1      	beq.n	801a94a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a966:	4a65      	ldr	r2, [pc, #404]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801a968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a96a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a970:	401a      	ands	r2, r3
 801a972:	4b5d      	ldr	r3, [pc, #372]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	4013      	ands	r3, r2
 801a978:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a97a:	4a60      	ldr	r2, [pc, #384]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801a97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a97e:	00db      	lsls	r3, r3, #3
 801a980:	4413      	add	r3, r2
 801a982:	685a      	ldr	r2, [r3, #4]
 801a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a986:	4013      	ands	r3, r2
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d106      	bne.n	801a99a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a98c:	4a5b      	ldr	r2, [pc, #364]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801a98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a990:	00db      	lsls	r3, r3, #3
 801a992:	4413      	add	r3, r2
 801a994:	f04f 32ff 	mov.w	r2, #4294967295
 801a998:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a99a:	4a58      	ldr	r2, [pc, #352]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801a99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a99e:	00db      	lsls	r3, r3, #3
 801a9a0:	4413      	add	r3, r2
 801a9a2:	685a      	ldr	r2, [r3, #4]
 801a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9a6:	4013      	ands	r3, r2
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f000 f907 	bl	801abbc <SEQ_BitPosition>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	461a      	mov	r2, r3
 801a9b2:	4b53      	ldr	r3, [pc, #332]	; (801ab00 <UTIL_SEQ_Run+0x1f0>)
 801a9b4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a9b6:	4a51      	ldr	r2, [pc, #324]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a9ba:	00db      	lsls	r3, r3, #3
 801a9bc:	4413      	add	r3, r2
 801a9be:	685a      	ldr	r2, [r3, #4]
 801a9c0:	4b4f      	ldr	r3, [pc, #316]	; (801ab00 <UTIL_SEQ_Run+0x1f0>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	2101      	movs	r1, #1
 801a9c6:	fa01 f303 	lsl.w	r3, r1, r3
 801a9ca:	43db      	mvns	r3, r3
 801a9cc:	401a      	ands	r2, r3
 801a9ce:	494b      	ldr	r1, [pc, #300]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801a9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a9d2:	00db      	lsls	r3, r3, #3
 801a9d4:	440b      	add	r3, r1
 801a9d6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9d8:	f3ef 8310 	mrs	r3, PRIMASK
 801a9dc:	61bb      	str	r3, [r7, #24]
  return(result);
 801a9de:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a9e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9e2:	b672      	cpsid	i
}
 801a9e4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a9e6:	4b46      	ldr	r3, [pc, #280]	; (801ab00 <UTIL_SEQ_Run+0x1f0>)
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	2201      	movs	r2, #1
 801a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 801a9f0:	43da      	mvns	r2, r3
 801a9f2:	4b3e      	ldr	r3, [pc, #248]	; (801aaec <UTIL_SEQ_Run+0x1dc>)
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	4013      	ands	r3, r2
 801a9f8:	4a3c      	ldr	r2, [pc, #240]	; (801aaec <UTIL_SEQ_Run+0x1dc>)
 801a9fa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a9fc:	2301      	movs	r3, #1
 801a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801aa00:	e013      	b.n	801aa2a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801aa02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa04:	3b01      	subs	r3, #1
 801aa06:	4a3d      	ldr	r2, [pc, #244]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801aa08:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801aa0c:	4b3c      	ldr	r3, [pc, #240]	; (801ab00 <UTIL_SEQ_Run+0x1f0>)
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	2201      	movs	r2, #1
 801aa12:	fa02 f303 	lsl.w	r3, r2, r3
 801aa16:	43da      	mvns	r2, r3
 801aa18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa1a:	3b01      	subs	r3, #1
 801aa1c:	400a      	ands	r2, r1
 801aa1e:	4937      	ldr	r1, [pc, #220]	; (801aafc <UTIL_SEQ_Run+0x1ec>)
 801aa20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa26:	3b01      	subs	r3, #1
 801aa28:	63fb      	str	r3, [r7, #60]	; 0x3c
 801aa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d1e8      	bne.n	801aa02 <UTIL_SEQ_Run+0xf2>
 801aa30:	6a3b      	ldr	r3, [r7, #32]
 801aa32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa34:	697b      	ldr	r3, [r7, #20]
 801aa36:	f383 8810 	msr	PRIMASK, r3
}
 801aa3a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801aa3c:	4b30      	ldr	r3, [pc, #192]	; (801ab00 <UTIL_SEQ_Run+0x1f0>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	4a30      	ldr	r2, [pc, #192]	; (801ab04 <UTIL_SEQ_Run+0x1f4>)
 801aa42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa46:	4798      	blx	r3

    local_taskset = TaskSet;
 801aa48:	4b28      	ldr	r3, [pc, #160]	; (801aaec <UTIL_SEQ_Run+0x1dc>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801aa4e:	4b28      	ldr	r3, [pc, #160]	; (801aaf0 <UTIL_SEQ_Run+0x1e0>)
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801aa54:	4b27      	ldr	r3, [pc, #156]	; (801aaf4 <UTIL_SEQ_Run+0x1e4>)
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801aa5a:	4b27      	ldr	r3, [pc, #156]	; (801aaf8 <UTIL_SEQ_Run+0x1e8>)
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801aa60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa64:	401a      	ands	r2, r3
 801aa66:	4b20      	ldr	r3, [pc, #128]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	4013      	ands	r3, r2
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d005      	beq.n	801aa7c <UTIL_SEQ_Run+0x16c>
 801aa70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa74:	4013      	ands	r3, r2
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	f43f af64 	beq.w	801a944 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801aa7c:	4b20      	ldr	r3, [pc, #128]	; (801ab00 <UTIL_SEQ_Run+0x1f0>)
 801aa7e:	f04f 32ff 	mov.w	r2, #4294967295
 801aa82:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801aa84:	f000 f88e 	bl	801aba4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa88:	f3ef 8310 	mrs	r3, PRIMASK
 801aa8c:	613b      	str	r3, [r7, #16]
  return(result);
 801aa8e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801aa90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa92:	b672      	cpsid	i
}
 801aa94:	bf00      	nop
  local_taskset = TaskSet;
 801aa96:	4b15      	ldr	r3, [pc, #84]	; (801aaec <UTIL_SEQ_Run+0x1dc>)
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801aa9c:	4b14      	ldr	r3, [pc, #80]	; (801aaf0 <UTIL_SEQ_Run+0x1e0>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801aaa2:	4b14      	ldr	r3, [pc, #80]	; (801aaf4 <UTIL_SEQ_Run+0x1e4>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801aaa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aaac:	401a      	ands	r2, r3
 801aaae:	4b0e      	ldr	r3, [pc, #56]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	4013      	ands	r3, r2
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d107      	bne.n	801aac8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801aab8:	4b0f      	ldr	r3, [pc, #60]	; (801aaf8 <UTIL_SEQ_Run+0x1e8>)
 801aaba:	681a      	ldr	r2, [r3, #0]
 801aabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aabe:	4013      	ands	r3, r2
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d101      	bne.n	801aac8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801aac4:	f7e6 ffee 	bl	8001aa4 <UTIL_SEQ_Idle>
 801aac8:	69fb      	ldr	r3, [r7, #28]
 801aaca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	f383 8810 	msr	PRIMASK, r3
}
 801aad2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801aad4:	f000 f86c 	bl	801abb0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801aad8:	4a03      	ldr	r2, [pc, #12]	; (801aae8 <UTIL_SEQ_Run+0x1d8>)
 801aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aadc:	6013      	str	r3, [r2, #0]

  return;
 801aade:	bf00      	nop
}
 801aae0:	3740      	adds	r7, #64	; 0x40
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}
 801aae6:	bf00      	nop
 801aae8:	2000014c 	.word	0x2000014c
 801aaec:	20001ee0 	.word	0x20001ee0
 801aaf0:	20001ee4 	.word	0x20001ee4
 801aaf4:	20000148 	.word	0x20000148
 801aaf8:	20001ee8 	.word	0x20001ee8
 801aafc:	20001f00 	.word	0x20001f00
 801ab00:	20001eec 	.word	0x20001eec
 801ab04:	20001ef0 	.word	0x20001ef0

0801ab08 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b088      	sub	sp, #32
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	60f8      	str	r0, [r7, #12]
 801ab10:	60b9      	str	r1, [r7, #8]
 801ab12:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab14:	f3ef 8310 	mrs	r3, PRIMASK
 801ab18:	617b      	str	r3, [r7, #20]
  return(result);
 801ab1a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801ab1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab1e:	b672      	cpsid	i
}
 801ab20:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801ab22:	68f8      	ldr	r0, [r7, #12]
 801ab24:	f000 f84a 	bl	801abbc <SEQ_BitPosition>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	4619      	mov	r1, r3
 801ab2c:	4a06      	ldr	r2, [pc, #24]	; (801ab48 <UTIL_SEQ_RegTask+0x40>)
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ab34:	69fb      	ldr	r3, [r7, #28]
 801ab36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab38:	69bb      	ldr	r3, [r7, #24]
 801ab3a:	f383 8810 	msr	PRIMASK, r3
}
 801ab3e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801ab40:	bf00      	nop
}
 801ab42:	3720      	adds	r7, #32
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}
 801ab48:	20001ef0 	.word	0x20001ef0

0801ab4c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	b087      	sub	sp, #28
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
 801ab54:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab56:	f3ef 8310 	mrs	r3, PRIMASK
 801ab5a:	60fb      	str	r3, [r7, #12]
  return(result);
 801ab5c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ab5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab60:	b672      	cpsid	i
}
 801ab62:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ab64:	4b0d      	ldr	r3, [pc, #52]	; (801ab9c <UTIL_SEQ_SetTask+0x50>)
 801ab66:	681a      	ldr	r2, [r3, #0]
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	4313      	orrs	r3, r2
 801ab6c:	4a0b      	ldr	r2, [pc, #44]	; (801ab9c <UTIL_SEQ_SetTask+0x50>)
 801ab6e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ab70:	4a0b      	ldr	r2, [pc, #44]	; (801aba0 <UTIL_SEQ_SetTask+0x54>)
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	431a      	orrs	r2, r3
 801ab7c:	4908      	ldr	r1, [pc, #32]	; (801aba0 <UTIL_SEQ_SetTask+0x54>)
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ab84:	697b      	ldr	r3, [r7, #20]
 801ab86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab88:	693b      	ldr	r3, [r7, #16]
 801ab8a:	f383 8810 	msr	PRIMASK, r3
}
 801ab8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ab90:	bf00      	nop
}
 801ab92:	371c      	adds	r7, #28
 801ab94:	46bd      	mov	sp, r7
 801ab96:	bc80      	pop	{r7}
 801ab98:	4770      	bx	lr
 801ab9a:	bf00      	nop
 801ab9c:	20001ee0 	.word	0x20001ee0
 801aba0:	20001f00 	.word	0x20001f00

0801aba4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801aba4:	b480      	push	{r7}
 801aba6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801aba8:	bf00      	nop
}
 801abaa:	46bd      	mov	sp, r7
 801abac:	bc80      	pop	{r7}
 801abae:	4770      	bx	lr

0801abb0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801abb0:	b480      	push	{r7}
 801abb2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801abb4:	bf00      	nop
}
 801abb6:	46bd      	mov	sp, r7
 801abb8:	bc80      	pop	{r7}
 801abba:	4770      	bx	lr

0801abbc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801abbc:	b480      	push	{r7}
 801abbe:	b085      	sub	sp, #20
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801abc4:	2300      	movs	r3, #0
 801abc6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801abcc:	68bb      	ldr	r3, [r7, #8]
 801abce:	0c1b      	lsrs	r3, r3, #16
 801abd0:	041b      	lsls	r3, r3, #16
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d104      	bne.n	801abe0 <SEQ_BitPosition+0x24>
 801abd6:	2310      	movs	r3, #16
 801abd8:	73fb      	strb	r3, [r7, #15]
 801abda:	68bb      	ldr	r3, [r7, #8]
 801abdc:	041b      	lsls	r3, r3, #16
 801abde:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801abe0:	68bb      	ldr	r3, [r7, #8]
 801abe2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d105      	bne.n	801abf6 <SEQ_BitPosition+0x3a>
 801abea:	7bfb      	ldrb	r3, [r7, #15]
 801abec:	3308      	adds	r3, #8
 801abee:	73fb      	strb	r3, [r7, #15]
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	021b      	lsls	r3, r3, #8
 801abf4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801abf6:	68bb      	ldr	r3, [r7, #8]
 801abf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d105      	bne.n	801ac0c <SEQ_BitPosition+0x50>
 801ac00:	7bfb      	ldrb	r3, [r7, #15]
 801ac02:	3304      	adds	r3, #4
 801ac04:	73fb      	strb	r3, [r7, #15]
 801ac06:	68bb      	ldr	r3, [r7, #8]
 801ac08:	011b      	lsls	r3, r3, #4
 801ac0a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ac0c:	68bb      	ldr	r3, [r7, #8]
 801ac0e:	0f1b      	lsrs	r3, r3, #28
 801ac10:	4a06      	ldr	r2, [pc, #24]	; (801ac2c <SEQ_BitPosition+0x70>)
 801ac12:	5cd2      	ldrb	r2, [r2, r3]
 801ac14:	7bfb      	ldrb	r3, [r7, #15]
 801ac16:	4413      	add	r3, r2
 801ac18:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ac1a:	7bfb      	ldrb	r3, [r7, #15]
 801ac1c:	f1c3 031f 	rsb	r3, r3, #31
 801ac20:	b2db      	uxtb	r3, r3
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	3714      	adds	r7, #20
 801ac26:	46bd      	mov	sp, r7
 801ac28:	bc80      	pop	{r7}
 801ac2a:	4770      	bx	lr
 801ac2c:	0801c2a0 	.word	0x0801c2a0

0801ac30 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ac34:	4b04      	ldr	r3, [pc, #16]	; (801ac48 <UTIL_TIMER_Init+0x18>)
 801ac36:	2200      	movs	r2, #0
 801ac38:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801ac3a:	4b04      	ldr	r3, [pc, #16]	; (801ac4c <UTIL_TIMER_Init+0x1c>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	4798      	blx	r3
 801ac40:	4603      	mov	r3, r0
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	bd80      	pop	{r7, pc}
 801ac46:	bf00      	nop
 801ac48:	20001f08 	.word	0x20001f08
 801ac4c:	0801bda8 	.word	0x0801bda8

0801ac50 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b084      	sub	sp, #16
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	60f8      	str	r0, [r7, #12]
 801ac58:	60b9      	str	r1, [r7, #8]
 801ac5a:	603b      	str	r3, [r7, #0]
 801ac5c:	4613      	mov	r3, r2
 801ac5e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d023      	beq.n	801acae <UTIL_TIMER_Create+0x5e>
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d020      	beq.n	801acae <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801ac72:	4b11      	ldr	r3, [pc, #68]	; (801acb8 <UTIL_TIMER_Create+0x68>)
 801ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac76:	68b8      	ldr	r0, [r7, #8]
 801ac78:	4798      	blx	r3
 801ac7a:	4602      	mov	r2, r0
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	2200      	movs	r2, #0
 801ac84:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	2200      	movs	r2, #0
 801ac8a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	2200      	movs	r2, #0
 801ac90:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	683a      	ldr	r2, [r7, #0]
 801ac96:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	69ba      	ldr	r2, [r7, #24]
 801ac9c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	79fa      	ldrb	r2, [r7, #7]
 801aca2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	2200      	movs	r2, #0
 801aca8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801acaa:	2300      	movs	r3, #0
 801acac:	e000      	b.n	801acb0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801acae:	2301      	movs	r3, #1
  }
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3710      	adds	r7, #16
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}
 801acb8:	0801bda8 	.word	0x0801bda8

0801acbc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b08a      	sub	sp, #40	; 0x28
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801acc4:	2300      	movs	r3, #0
 801acc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	2b00      	cmp	r3, #0
 801acce:	d056      	beq.n	801ad7e <UTIL_TIMER_Start+0xc2>
 801acd0:	6878      	ldr	r0, [r7, #4]
 801acd2:	f000 f9a9 	bl	801b028 <TimerExists>
 801acd6:	4603      	mov	r3, r0
 801acd8:	f083 0301 	eor.w	r3, r3, #1
 801acdc:	b2db      	uxtb	r3, r3
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d04d      	beq.n	801ad7e <UTIL_TIMER_Start+0xc2>
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	7a5b      	ldrb	r3, [r3, #9]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d149      	bne.n	801ad7e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acea:	f3ef 8310 	mrs	r3, PRIMASK
 801acee:	613b      	str	r3, [r7, #16]
  return(result);
 801acf0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801acf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801acf4:	b672      	cpsid	i
}
 801acf6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	685b      	ldr	r3, [r3, #4]
 801acfc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801acfe:	4b24      	ldr	r3, [pc, #144]	; (801ad90 <UTIL_TIMER_Start+0xd4>)
 801ad00:	6a1b      	ldr	r3, [r3, #32]
 801ad02:	4798      	blx	r3
 801ad04:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ad06:	6a3a      	ldr	r2, [r7, #32]
 801ad08:	69bb      	ldr	r3, [r7, #24]
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	d201      	bcs.n	801ad12 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ad0e:	69bb      	ldr	r3, [r7, #24]
 801ad10:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	6a3a      	ldr	r2, [r7, #32]
 801ad16:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2201      	movs	r2, #1
 801ad22:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2200      	movs	r2, #0
 801ad28:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ad2a:	4b1a      	ldr	r3, [pc, #104]	; (801ad94 <UTIL_TIMER_Start+0xd8>)
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d106      	bne.n	801ad40 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ad32:	4b17      	ldr	r3, [pc, #92]	; (801ad90 <UTIL_TIMER_Start+0xd4>)
 801ad34:	691b      	ldr	r3, [r3, #16]
 801ad36:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ad38:	6878      	ldr	r0, [r7, #4]
 801ad3a:	f000 f9eb 	bl	801b114 <TimerInsertNewHeadTimer>
 801ad3e:	e017      	b.n	801ad70 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ad40:	4b13      	ldr	r3, [pc, #76]	; (801ad90 <UTIL_TIMER_Start+0xd4>)
 801ad42:	699b      	ldr	r3, [r3, #24]
 801ad44:	4798      	blx	r3
 801ad46:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681a      	ldr	r2, [r3, #0]
 801ad4c:	697b      	ldr	r3, [r7, #20]
 801ad4e:	441a      	add	r2, r3
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	681a      	ldr	r2, [r3, #0]
 801ad58:	4b0e      	ldr	r3, [pc, #56]	; (801ad94 <UTIL_TIMER_Start+0xd8>)
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	d203      	bcs.n	801ad6a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ad62:	6878      	ldr	r0, [r7, #4]
 801ad64:	f000 f9d6 	bl	801b114 <TimerInsertNewHeadTimer>
 801ad68:	e002      	b.n	801ad70 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801ad6a:	6878      	ldr	r0, [r7, #4]
 801ad6c:	f000 f9a2 	bl	801b0b4 <TimerInsertTimer>
 801ad70:	69fb      	ldr	r3, [r7, #28]
 801ad72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	f383 8810 	msr	PRIMASK, r3
}
 801ad7a:	bf00      	nop
  {
 801ad7c:	e002      	b.n	801ad84 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801ad7e:	2301      	movs	r3, #1
 801ad80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801ad84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	3728      	adds	r7, #40	; 0x28
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}
 801ad90:	0801bda8 	.word	0x0801bda8
 801ad94:	20001f08 	.word	0x20001f08

0801ad98 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b088      	sub	sp, #32
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ada0:	2300      	movs	r3, #0
 801ada2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d05b      	beq.n	801ae62 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adaa:	f3ef 8310 	mrs	r3, PRIMASK
 801adae:	60fb      	str	r3, [r7, #12]
  return(result);
 801adb0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801adb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801adb4:	b672      	cpsid	i
}
 801adb6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801adb8:	4b2d      	ldr	r3, [pc, #180]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801adbe:	4b2c      	ldr	r3, [pc, #176]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	2201      	movs	r2, #1
 801adc8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801adca:	4b29      	ldr	r3, [pc, #164]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d041      	beq.n	801ae56 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2200      	movs	r2, #0
 801add6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801add8:	4b25      	ldr	r3, [pc, #148]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	687a      	ldr	r2, [r7, #4]
 801adde:	429a      	cmp	r2, r3
 801ade0:	d134      	bne.n	801ae4c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ade2:	4b23      	ldr	r3, [pc, #140]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	2200      	movs	r2, #0
 801ade8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801adea:	4b21      	ldr	r3, [pc, #132]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	695b      	ldr	r3, [r3, #20]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d00a      	beq.n	801ae0a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801adf4:	4b1e      	ldr	r3, [pc, #120]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	695b      	ldr	r3, [r3, #20]
 801adfa:	4a1d      	ldr	r2, [pc, #116]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adfc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801adfe:	4b1c      	ldr	r3, [pc, #112]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4618      	mov	r0, r3
 801ae04:	f000 f92c 	bl	801b060 <TimerSetTimeout>
 801ae08:	e023      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ae0a:	4b1a      	ldr	r3, [pc, #104]	; (801ae74 <UTIL_TIMER_Stop+0xdc>)
 801ae0c:	68db      	ldr	r3, [r3, #12]
 801ae0e:	4798      	blx	r3
            TimerListHead = NULL;
 801ae10:	4b17      	ldr	r3, [pc, #92]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801ae12:	2200      	movs	r2, #0
 801ae14:	601a      	str	r2, [r3, #0]
 801ae16:	e01c      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ae18:	697a      	ldr	r2, [r7, #20]
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d110      	bne.n	801ae42 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ae20:	697b      	ldr	r3, [r7, #20]
 801ae22:	695b      	ldr	r3, [r3, #20]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d006      	beq.n	801ae36 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ae28:	697b      	ldr	r3, [r7, #20]
 801ae2a:	695b      	ldr	r3, [r3, #20]
 801ae2c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ae2e:	69bb      	ldr	r3, [r7, #24]
 801ae30:	697a      	ldr	r2, [r7, #20]
 801ae32:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ae34:	e00d      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ae36:	2300      	movs	r3, #0
 801ae38:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ae3a:	69bb      	ldr	r3, [r7, #24]
 801ae3c:	697a      	ldr	r2, [r7, #20]
 801ae3e:	615a      	str	r2, [r3, #20]
            break;
 801ae40:	e007      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ae42:	697b      	ldr	r3, [r7, #20]
 801ae44:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ae46:	697b      	ldr	r3, [r7, #20]
 801ae48:	695b      	ldr	r3, [r3, #20]
 801ae4a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ae4c:	697b      	ldr	r3, [r7, #20]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d1e2      	bne.n	801ae18 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ae52:	2300      	movs	r3, #0
 801ae54:	77fb      	strb	r3, [r7, #31]
 801ae56:	693b      	ldr	r3, [r7, #16]
 801ae58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	f383 8810 	msr	PRIMASK, r3
}
 801ae60:	e001      	b.n	801ae66 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ae62:	2301      	movs	r3, #1
 801ae64:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801ae66:	7ffb      	ldrb	r3, [r7, #31]
}
 801ae68:	4618      	mov	r0, r3
 801ae6a:	3720      	adds	r7, #32
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	bd80      	pop	{r7, pc}
 801ae70:	20001f08 	.word	0x20001f08
 801ae74:	0801bda8 	.word	0x0801bda8

0801ae78 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b084      	sub	sp, #16
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ae82:	2300      	movs	r3, #0
 801ae84:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d102      	bne.n	801ae92 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ae8c:	2301      	movs	r3, #1
 801ae8e:	73fb      	strb	r3, [r7, #15]
 801ae90:	e014      	b.n	801aebc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ae92:	4b0d      	ldr	r3, [pc, #52]	; (801aec8 <UTIL_TIMER_SetPeriod+0x50>)
 801ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae96:	6838      	ldr	r0, [r7, #0]
 801ae98:	4798      	blx	r3
 801ae9a:	4602      	mov	r2, r0
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f000 f8c1 	bl	801b028 <TimerExists>
 801aea6:	4603      	mov	r3, r0
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d007      	beq.n	801aebc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801aeac:	6878      	ldr	r0, [r7, #4]
 801aeae:	f7ff ff73 	bl	801ad98 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801aeb2:	6878      	ldr	r0, [r7, #4]
 801aeb4:	f7ff ff02 	bl	801acbc <UTIL_TIMER_Start>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 801aebe:	4618      	mov	r0, r3
 801aec0:	3710      	adds	r7, #16
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}
 801aec6:	bf00      	nop
 801aec8:	0801bda8 	.word	0x0801bda8

0801aecc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801aecc:	b590      	push	{r4, r7, lr}
 801aece:	b089      	sub	sp, #36	; 0x24
 801aed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aed2:	f3ef 8310 	mrs	r3, PRIMASK
 801aed6:	60bb      	str	r3, [r7, #8]
  return(result);
 801aed8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801aeda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801aedc:	b672      	cpsid	i
}
 801aede:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801aee0:	4b38      	ldr	r3, [pc, #224]	; (801afc4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aee2:	695b      	ldr	r3, [r3, #20]
 801aee4:	4798      	blx	r3
 801aee6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801aee8:	4b36      	ldr	r3, [pc, #216]	; (801afc4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aeea:	691b      	ldr	r3, [r3, #16]
 801aeec:	4798      	blx	r3
 801aeee:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801aef0:	693a      	ldr	r2, [r7, #16]
 801aef2:	697b      	ldr	r3, [r7, #20]
 801aef4:	1ad3      	subs	r3, r2, r3
 801aef6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801aef8:	4b33      	ldr	r3, [pc, #204]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d037      	beq.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801af00:	4b31      	ldr	r3, [pc, #196]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801af06:	69fb      	ldr	r3, [r7, #28]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	68fa      	ldr	r2, [r7, #12]
 801af0c:	429a      	cmp	r2, r3
 801af0e:	d206      	bcs.n	801af1e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801af10:	69fb      	ldr	r3, [r7, #28]
 801af12:	681a      	ldr	r2, [r3, #0]
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	1ad2      	subs	r2, r2, r3
 801af18:	69fb      	ldr	r3, [r7, #28]
 801af1a:	601a      	str	r2, [r3, #0]
 801af1c:	e002      	b.n	801af24 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801af1e:	69fb      	ldr	r3, [r7, #28]
 801af20:	2200      	movs	r2, #0
 801af22:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	695b      	ldr	r3, [r3, #20]
 801af28:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801af2a:	69fb      	ldr	r3, [r7, #28]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d1ea      	bne.n	801af06 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801af30:	e01e      	b.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801af32:	4b25      	ldr	r3, [pc, #148]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801af38:	4b23      	ldr	r3, [pc, #140]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	695b      	ldr	r3, [r3, #20]
 801af3e:	4a22      	ldr	r2, [pc, #136]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af40:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801af42:	69fb      	ldr	r3, [r7, #28]
 801af44:	2200      	movs	r2, #0
 801af46:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801af48:	69fb      	ldr	r3, [r7, #28]
 801af4a:	2200      	movs	r2, #0
 801af4c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801af4e:	69fb      	ldr	r3, [r7, #28]
 801af50:	68db      	ldr	r3, [r3, #12]
 801af52:	69fa      	ldr	r2, [r7, #28]
 801af54:	6912      	ldr	r2, [r2, #16]
 801af56:	4610      	mov	r0, r2
 801af58:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801af5a:	69fb      	ldr	r3, [r7, #28]
 801af5c:	7adb      	ldrb	r3, [r3, #11]
 801af5e:	2b01      	cmp	r3, #1
 801af60:	d106      	bne.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
 801af62:	69fb      	ldr	r3, [r7, #28]
 801af64:	7a9b      	ldrb	r3, [r3, #10]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d102      	bne.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801af6a:	69f8      	ldr	r0, [r7, #28]
 801af6c:	f7ff fea6 	bl	801acbc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801af70:	4b15      	ldr	r3, [pc, #84]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d00d      	beq.n	801af94 <UTIL_TIMER_IRQ_Handler+0xc8>
 801af78:	4b13      	ldr	r3, [pc, #76]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d0d7      	beq.n	801af32 <UTIL_TIMER_IRQ_Handler+0x66>
 801af82:	4b11      	ldr	r3, [pc, #68]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	681c      	ldr	r4, [r3, #0]
 801af88:	4b0e      	ldr	r3, [pc, #56]	; (801afc4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801af8a:	699b      	ldr	r3, [r3, #24]
 801af8c:	4798      	blx	r3
 801af8e:	4603      	mov	r3, r0
 801af90:	429c      	cmp	r4, r3
 801af92:	d3ce      	bcc.n	801af32 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801af94:	4b0c      	ldr	r3, [pc, #48]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d009      	beq.n	801afb0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801af9c:	4b0a      	ldr	r3, [pc, #40]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	7a1b      	ldrb	r3, [r3, #8]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d104      	bne.n	801afb0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801afa6:	4b08      	ldr	r3, [pc, #32]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	4618      	mov	r0, r3
 801afac:	f000 f858 	bl	801b060 <TimerSetTimeout>
 801afb0:	69bb      	ldr	r3, [r7, #24]
 801afb2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f383 8810 	msr	PRIMASK, r3
}
 801afba:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801afbc:	bf00      	nop
 801afbe:	3724      	adds	r7, #36	; 0x24
 801afc0:	46bd      	mov	sp, r7
 801afc2:	bd90      	pop	{r4, r7, pc}
 801afc4:	0801bda8 	.word	0x0801bda8
 801afc8:	20001f08 	.word	0x20001f08

0801afcc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801afd2:	4b06      	ldr	r3, [pc, #24]	; (801afec <UTIL_TIMER_GetCurrentTime+0x20>)
 801afd4:	69db      	ldr	r3, [r3, #28]
 801afd6:	4798      	blx	r3
 801afd8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801afda:	4b04      	ldr	r3, [pc, #16]	; (801afec <UTIL_TIMER_GetCurrentTime+0x20>)
 801afdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afde:	6878      	ldr	r0, [r7, #4]
 801afe0:	4798      	blx	r3
 801afe2:	4603      	mov	r3, r0
}
 801afe4:	4618      	mov	r0, r3
 801afe6:	3708      	adds	r7, #8
 801afe8:	46bd      	mov	sp, r7
 801afea:	bd80      	pop	{r7, pc}
 801afec:	0801bda8 	.word	0x0801bda8

0801aff0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b084      	sub	sp, #16
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801aff8:	4b0a      	ldr	r3, [pc, #40]	; (801b024 <UTIL_TIMER_GetElapsedTime+0x34>)
 801affa:	69db      	ldr	r3, [r3, #28]
 801affc:	4798      	blx	r3
 801affe:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b000:	4b08      	ldr	r3, [pc, #32]	; (801b024 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b004:	6878      	ldr	r0, [r7, #4]
 801b006:	4798      	blx	r3
 801b008:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b00a:	4b06      	ldr	r3, [pc, #24]	; (801b024 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b00e:	68f9      	ldr	r1, [r7, #12]
 801b010:	68ba      	ldr	r2, [r7, #8]
 801b012:	1a8a      	subs	r2, r1, r2
 801b014:	4610      	mov	r0, r2
 801b016:	4798      	blx	r3
 801b018:	4603      	mov	r3, r0
}
 801b01a:	4618      	mov	r0, r3
 801b01c:	3710      	adds	r7, #16
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
 801b022:	bf00      	nop
 801b024:	0801bda8 	.word	0x0801bda8

0801b028 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b028:	b480      	push	{r7}
 801b02a:	b085      	sub	sp, #20
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b030:	4b0a      	ldr	r3, [pc, #40]	; (801b05c <TimerExists+0x34>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b036:	e008      	b.n	801b04a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b038:	68fa      	ldr	r2, [r7, #12]
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	429a      	cmp	r2, r3
 801b03e:	d101      	bne.n	801b044 <TimerExists+0x1c>
    {
      return true;
 801b040:	2301      	movs	r3, #1
 801b042:	e006      	b.n	801b052 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	695b      	ldr	r3, [r3, #20]
 801b048:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d1f3      	bne.n	801b038 <TimerExists+0x10>
  }
  return false;
 801b050:	2300      	movs	r3, #0
}
 801b052:	4618      	mov	r0, r3
 801b054:	3714      	adds	r7, #20
 801b056:	46bd      	mov	sp, r7
 801b058:	bc80      	pop	{r7}
 801b05a:	4770      	bx	lr
 801b05c:	20001f08 	.word	0x20001f08

0801b060 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b060:	b590      	push	{r4, r7, lr}
 801b062:	b085      	sub	sp, #20
 801b064:	af00      	add	r7, sp, #0
 801b066:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b068:	4b11      	ldr	r3, [pc, #68]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b06a:	6a1b      	ldr	r3, [r3, #32]
 801b06c:	4798      	blx	r3
 801b06e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	2201      	movs	r2, #1
 801b074:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681c      	ldr	r4, [r3, #0]
 801b07a:	4b0d      	ldr	r3, [pc, #52]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b07c:	699b      	ldr	r3, [r3, #24]
 801b07e:	4798      	blx	r3
 801b080:	4602      	mov	r2, r0
 801b082:	68fb      	ldr	r3, [r7, #12]
 801b084:	4413      	add	r3, r2
 801b086:	429c      	cmp	r4, r3
 801b088:	d207      	bcs.n	801b09a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b08a:	4b09      	ldr	r3, [pc, #36]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b08c:	699b      	ldr	r3, [r3, #24]
 801b08e:	4798      	blx	r3
 801b090:	4602      	mov	r2, r0
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	441a      	add	r2, r3
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b09a:	4b05      	ldr	r3, [pc, #20]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b09c:	689b      	ldr	r3, [r3, #8]
 801b09e:	687a      	ldr	r2, [r7, #4]
 801b0a0:	6812      	ldr	r2, [r2, #0]
 801b0a2:	4610      	mov	r0, r2
 801b0a4:	4798      	blx	r3
}
 801b0a6:	bf00      	nop
 801b0a8:	3714      	adds	r7, #20
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	bd90      	pop	{r4, r7, pc}
 801b0ae:	bf00      	nop
 801b0b0:	0801bda8 	.word	0x0801bda8

0801b0b4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b0b4:	b480      	push	{r7}
 801b0b6:	b085      	sub	sp, #20
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b0bc:	4b14      	ldr	r3, [pc, #80]	; (801b110 <TimerInsertTimer+0x5c>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b0c2:	4b13      	ldr	r3, [pc, #76]	; (801b110 <TimerInsertTimer+0x5c>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	695b      	ldr	r3, [r3, #20]
 801b0c8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b0ca:	e012      	b.n	801b0f2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	681a      	ldr	r2, [r3, #0]
 801b0d0:	68bb      	ldr	r3, [r7, #8]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d905      	bls.n	801b0e4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b0dc:	68bb      	ldr	r3, [r7, #8]
 801b0de:	695b      	ldr	r3, [r3, #20]
 801b0e0:	60bb      	str	r3, [r7, #8]
 801b0e2:	e006      	b.n	801b0f2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	687a      	ldr	r2, [r7, #4]
 801b0e8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	68ba      	ldr	r2, [r7, #8]
 801b0ee:	615a      	str	r2, [r3, #20]
        return;
 801b0f0:	e009      	b.n	801b106 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	695b      	ldr	r3, [r3, #20]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d1e8      	bne.n	801b0cc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	687a      	ldr	r2, [r7, #4]
 801b0fe:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2200      	movs	r2, #0
 801b104:	615a      	str	r2, [r3, #20]
}
 801b106:	3714      	adds	r7, #20
 801b108:	46bd      	mov	sp, r7
 801b10a:	bc80      	pop	{r7}
 801b10c:	4770      	bx	lr
 801b10e:	bf00      	nop
 801b110:	20001f08 	.word	0x20001f08

0801b114 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b084      	sub	sp, #16
 801b118:	af00      	add	r7, sp, #0
 801b11a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b11c:	4b0b      	ldr	r3, [pc, #44]	; (801b14c <TimerInsertNewHeadTimer+0x38>)
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d002      	beq.n	801b12e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	2200      	movs	r2, #0
 801b12c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	68fa      	ldr	r2, [r7, #12]
 801b132:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b134:	4a05      	ldr	r2, [pc, #20]	; (801b14c <TimerInsertNewHeadTimer+0x38>)
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b13a:	4b04      	ldr	r3, [pc, #16]	; (801b14c <TimerInsertNewHeadTimer+0x38>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	4618      	mov	r0, r3
 801b140:	f7ff ff8e 	bl	801b060 <TimerSetTimeout>
}
 801b144:	bf00      	nop
 801b146:	3710      	adds	r7, #16
 801b148:	46bd      	mov	sp, r7
 801b14a:	bd80      	pop	{r7, pc}
 801b14c:	20001f08 	.word	0x20001f08

0801b150 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b150:	b580      	push	{r7, lr}
 801b152:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b154:	2218      	movs	r2, #24
 801b156:	2100      	movs	r1, #0
 801b158:	4807      	ldr	r0, [pc, #28]	; (801b178 <UTIL_ADV_TRACE_Init+0x28>)
 801b15a:	f7fe fff6 	bl	801a14a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b15e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b162:	2100      	movs	r1, #0
 801b164:	4805      	ldr	r0, [pc, #20]	; (801b17c <UTIL_ADV_TRACE_Init+0x2c>)
 801b166:	f7fe fff0 	bl	801a14a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b16a:	4b05      	ldr	r3, [pc, #20]	; (801b180 <UTIL_ADV_TRACE_Init+0x30>)
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	4805      	ldr	r0, [pc, #20]	; (801b184 <UTIL_ADV_TRACE_Init+0x34>)
 801b170:	4798      	blx	r3
 801b172:	4603      	mov	r3, r0
}
 801b174:	4618      	mov	r0, r3
 801b176:	bd80      	pop	{r7, pc}
 801b178:	20001f0c 	.word	0x20001f0c
 801b17c:	20001f24 	.word	0x20001f24
 801b180:	0801bde8 	.word	0x0801bde8
 801b184:	0801b3f1 	.word	0x0801b3f1

0801b188 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b188:	b480      	push	{r7}
 801b18a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b18c:	4b06      	ldr	r3, [pc, #24]	; (801b1a8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b18e:	8a5a      	ldrh	r2, [r3, #18]
 801b190:	4b05      	ldr	r3, [pc, #20]	; (801b1a8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b192:	8a1b      	ldrh	r3, [r3, #16]
 801b194:	429a      	cmp	r2, r3
 801b196:	d101      	bne.n	801b19c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b198:	2301      	movs	r3, #1
 801b19a:	e000      	b.n	801b19e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b19c:	2300      	movs	r3, #0
}
 801b19e:	4618      	mov	r0, r3
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bc80      	pop	{r7}
 801b1a4:	4770      	bx	lr
 801b1a6:	bf00      	nop
 801b1a8:	20001f0c 	.word	0x20001f0c

0801b1ac <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b1ac:	b408      	push	{r3}
 801b1ae:	b580      	push	{r7, lr}
 801b1b0:	b08d      	sub	sp, #52	; 0x34
 801b1b2:	af00      	add	r7, sp, #0
 801b1b4:	60f8      	str	r0, [r7, #12]
 801b1b6:	60b9      	str	r1, [r7, #8]
 801b1b8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b1be:	2300      	movs	r3, #0
 801b1c0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b1c2:	4b37      	ldr	r3, [pc, #220]	; (801b2a0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1c4:	7a1b      	ldrb	r3, [r3, #8]
 801b1c6:	461a      	mov	r2, r3
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	4293      	cmp	r3, r2
 801b1cc:	d902      	bls.n	801b1d4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b1ce:	f06f 0304 	mvn.w	r3, #4
 801b1d2:	e05e      	b.n	801b292 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b1d4:	4b32      	ldr	r3, [pc, #200]	; (801b2a0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1d6:	68da      	ldr	r2, [r3, #12]
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	4013      	ands	r3, r2
 801b1dc:	68ba      	ldr	r2, [r7, #8]
 801b1de:	429a      	cmp	r2, r3
 801b1e0:	d002      	beq.n	801b1e8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b1e2:	f06f 0305 	mvn.w	r3, #5
 801b1e6:	e054      	b.n	801b292 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b1e8:	4b2d      	ldr	r3, [pc, #180]	; (801b2a0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1ea:	685b      	ldr	r3, [r3, #4]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d00a      	beq.n	801b206 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d007      	beq.n	801b206 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b1f6:	4b2a      	ldr	r3, [pc, #168]	; (801b2a0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1f8:	685b      	ldr	r3, [r3, #4]
 801b1fa:	f107 0116 	add.w	r1, r7, #22
 801b1fe:	f107 0218 	add.w	r2, r7, #24
 801b202:	4610      	mov	r0, r2
 801b204:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b20a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b20e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b210:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b214:	4823      	ldr	r0, [pc, #140]	; (801b2a4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b216:	f7ff fa25 	bl	801a664 <tiny_vsnprintf_like>
 801b21a:	4603      	mov	r3, r0
 801b21c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801b21e:	f000 f9f1 	bl	801b604 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b222:	8afa      	ldrh	r2, [r7, #22]
 801b224:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b226:	4413      	add	r3, r2
 801b228:	b29b      	uxth	r3, r3
 801b22a:	f107 0214 	add.w	r2, r7, #20
 801b22e:	4611      	mov	r1, r2
 801b230:	4618      	mov	r0, r3
 801b232:	f000 f969 	bl	801b508 <TRACE_AllocateBufer>
 801b236:	4603      	mov	r3, r0
 801b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b23c:	d025      	beq.n	801b28a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b23e:	2300      	movs	r3, #0
 801b240:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801b242:	e00e      	b.n	801b262 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b244:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b246:	8aba      	ldrh	r2, [r7, #20]
 801b248:	3330      	adds	r3, #48	; 0x30
 801b24a:	443b      	add	r3, r7
 801b24c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b250:	4b15      	ldr	r3, [pc, #84]	; (801b2a8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b252:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b254:	8abb      	ldrh	r3, [r7, #20]
 801b256:	3301      	adds	r3, #1
 801b258:	b29b      	uxth	r3, r3
 801b25a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b25c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b25e:	3301      	adds	r3, #1
 801b260:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801b262:	8afb      	ldrh	r3, [r7, #22]
 801b264:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b266:	429a      	cmp	r2, r3
 801b268:	d3ec      	bcc.n	801b244 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b26a:	8abb      	ldrh	r3, [r7, #20]
 801b26c:	461a      	mov	r2, r3
 801b26e:	4b0e      	ldr	r3, [pc, #56]	; (801b2a8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b270:	18d0      	adds	r0, r2, r3
 801b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b276:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b27a:	f7ff f9f3 	bl	801a664 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b27e:	f000 f9df 	bl	801b640 <TRACE_UnLock>

    return TRACE_Send();
 801b282:	f000 f831 	bl	801b2e8 <TRACE_Send>
 801b286:	4603      	mov	r3, r0
 801b288:	e003      	b.n	801b292 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b28a:	f000 f9d9 	bl	801b640 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b28e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b292:	4618      	mov	r0, r3
 801b294:	3734      	adds	r7, #52	; 0x34
 801b296:	46bd      	mov	sp, r7
 801b298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b29c:	b001      	add	sp, #4
 801b29e:	4770      	bx	lr
 801b2a0:	20001f0c 	.word	0x20001f0c
 801b2a4:	20002324 	.word	0x20002324
 801b2a8:	20001f24 	.word	0x20001f24

0801b2ac <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b2ac:	b480      	push	{r7}
 801b2ae:	b083      	sub	sp, #12
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b2b4:	4a03      	ldr	r2, [pc, #12]	; (801b2c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	6053      	str	r3, [r2, #4]
}
 801b2ba:	bf00      	nop
 801b2bc:	370c      	adds	r7, #12
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	bc80      	pop	{r7}
 801b2c2:	4770      	bx	lr
 801b2c4:	20001f0c 	.word	0x20001f0c

0801b2c8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b2c8:	b480      	push	{r7}
 801b2ca:	b083      	sub	sp, #12
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b2d2:	4a04      	ldr	r2, [pc, #16]	; (801b2e4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b2d4:	79fb      	ldrb	r3, [r7, #7]
 801b2d6:	7213      	strb	r3, [r2, #8]
}
 801b2d8:	bf00      	nop
 801b2da:	370c      	adds	r7, #12
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	bc80      	pop	{r7}
 801b2e0:	4770      	bx	lr
 801b2e2:	bf00      	nop
 801b2e4:	20001f0c 	.word	0x20001f0c

0801b2e8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b2e8:	b580      	push	{r7, lr}
 801b2ea:	b088      	sub	sp, #32
 801b2ec:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2f6:	f3ef 8310 	mrs	r3, PRIMASK
 801b2fa:	613b      	str	r3, [r7, #16]
  return(result);
 801b2fc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b2fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b300:	b672      	cpsid	i
}
 801b302:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b304:	f000 f9ba 	bl	801b67c <TRACE_IsLocked>
 801b308:	4603      	mov	r3, r0
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d15d      	bne.n	801b3ca <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b30e:	f000 f979 	bl	801b604 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b312:	4b34      	ldr	r3, [pc, #208]	; (801b3e4 <TRACE_Send+0xfc>)
 801b314:	8a1a      	ldrh	r2, [r3, #16]
 801b316:	4b33      	ldr	r3, [pc, #204]	; (801b3e4 <TRACE_Send+0xfc>)
 801b318:	8a5b      	ldrh	r3, [r3, #18]
 801b31a:	429a      	cmp	r2, r3
 801b31c:	d04d      	beq.n	801b3ba <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b31e:	4b31      	ldr	r3, [pc, #196]	; (801b3e4 <TRACE_Send+0xfc>)
 801b320:	789b      	ldrb	r3, [r3, #2]
 801b322:	2b01      	cmp	r3, #1
 801b324:	d117      	bne.n	801b356 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b326:	4b2f      	ldr	r3, [pc, #188]	; (801b3e4 <TRACE_Send+0xfc>)
 801b328:	881a      	ldrh	r2, [r3, #0]
 801b32a:	4b2e      	ldr	r3, [pc, #184]	; (801b3e4 <TRACE_Send+0xfc>)
 801b32c:	8a1b      	ldrh	r3, [r3, #16]
 801b32e:	1ad3      	subs	r3, r2, r3
 801b330:	b29a      	uxth	r2, r3
 801b332:	4b2c      	ldr	r3, [pc, #176]	; (801b3e4 <TRACE_Send+0xfc>)
 801b334:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b336:	4b2b      	ldr	r3, [pc, #172]	; (801b3e4 <TRACE_Send+0xfc>)
 801b338:	2202      	movs	r2, #2
 801b33a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b33c:	4b29      	ldr	r3, [pc, #164]	; (801b3e4 <TRACE_Send+0xfc>)
 801b33e:	2200      	movs	r2, #0
 801b340:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b342:	4b28      	ldr	r3, [pc, #160]	; (801b3e4 <TRACE_Send+0xfc>)
 801b344:	8a9b      	ldrh	r3, [r3, #20]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d105      	bne.n	801b356 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b34a:	4b26      	ldr	r3, [pc, #152]	; (801b3e4 <TRACE_Send+0xfc>)
 801b34c:	2200      	movs	r2, #0
 801b34e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b350:	4b24      	ldr	r3, [pc, #144]	; (801b3e4 <TRACE_Send+0xfc>)
 801b352:	2200      	movs	r2, #0
 801b354:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b356:	4b23      	ldr	r3, [pc, #140]	; (801b3e4 <TRACE_Send+0xfc>)
 801b358:	789b      	ldrb	r3, [r3, #2]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d115      	bne.n	801b38a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b35e:	4b21      	ldr	r3, [pc, #132]	; (801b3e4 <TRACE_Send+0xfc>)
 801b360:	8a5a      	ldrh	r2, [r3, #18]
 801b362:	4b20      	ldr	r3, [pc, #128]	; (801b3e4 <TRACE_Send+0xfc>)
 801b364:	8a1b      	ldrh	r3, [r3, #16]
 801b366:	429a      	cmp	r2, r3
 801b368:	d908      	bls.n	801b37c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b36a:	4b1e      	ldr	r3, [pc, #120]	; (801b3e4 <TRACE_Send+0xfc>)
 801b36c:	8a5a      	ldrh	r2, [r3, #18]
 801b36e:	4b1d      	ldr	r3, [pc, #116]	; (801b3e4 <TRACE_Send+0xfc>)
 801b370:	8a1b      	ldrh	r3, [r3, #16]
 801b372:	1ad3      	subs	r3, r2, r3
 801b374:	b29a      	uxth	r2, r3
 801b376:	4b1b      	ldr	r3, [pc, #108]	; (801b3e4 <TRACE_Send+0xfc>)
 801b378:	829a      	strh	r2, [r3, #20]
 801b37a:	e006      	b.n	801b38a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b37c:	4b19      	ldr	r3, [pc, #100]	; (801b3e4 <TRACE_Send+0xfc>)
 801b37e:	8a1b      	ldrh	r3, [r3, #16]
 801b380:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b384:	b29a      	uxth	r2, r3
 801b386:	4b17      	ldr	r3, [pc, #92]	; (801b3e4 <TRACE_Send+0xfc>)
 801b388:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b38a:	4b16      	ldr	r3, [pc, #88]	; (801b3e4 <TRACE_Send+0xfc>)
 801b38c:	8a1b      	ldrh	r3, [r3, #16]
 801b38e:	461a      	mov	r2, r3
 801b390:	4b15      	ldr	r3, [pc, #84]	; (801b3e8 <TRACE_Send+0x100>)
 801b392:	4413      	add	r3, r2
 801b394:	61bb      	str	r3, [r7, #24]
 801b396:	697b      	ldr	r3, [r7, #20]
 801b398:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	f383 8810 	msr	PRIMASK, r3
}
 801b3a0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b3a2:	f7e6 fc81 	bl	8001ca8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b3a6:	4b11      	ldr	r3, [pc, #68]	; (801b3ec <TRACE_Send+0x104>)
 801b3a8:	68db      	ldr	r3, [r3, #12]
 801b3aa:	4a0e      	ldr	r2, [pc, #56]	; (801b3e4 <TRACE_Send+0xfc>)
 801b3ac:	8a92      	ldrh	r2, [r2, #20]
 801b3ae:	4611      	mov	r1, r2
 801b3b0:	69b8      	ldr	r0, [r7, #24]
 801b3b2:	4798      	blx	r3
 801b3b4:	4603      	mov	r3, r0
 801b3b6:	77fb      	strb	r3, [r7, #31]
 801b3b8:	e00d      	b.n	801b3d6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b3ba:	f000 f941 	bl	801b640 <TRACE_UnLock>
 801b3be:	697b      	ldr	r3, [r7, #20]
 801b3c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3c2:	68bb      	ldr	r3, [r7, #8]
 801b3c4:	f383 8810 	msr	PRIMASK, r3
}
 801b3c8:	e005      	b.n	801b3d6 <TRACE_Send+0xee>
 801b3ca:	697b      	ldr	r3, [r7, #20]
 801b3cc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	f383 8810 	msr	PRIMASK, r3
}
 801b3d4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b3d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b3da:	4618      	mov	r0, r3
 801b3dc:	3720      	adds	r7, #32
 801b3de:	46bd      	mov	sp, r7
 801b3e0:	bd80      	pop	{r7, pc}
 801b3e2:	bf00      	nop
 801b3e4:	20001f0c 	.word	0x20001f0c
 801b3e8:	20001f24 	.word	0x20001f24
 801b3ec:	0801bde8 	.word	0x0801bde8

0801b3f0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b088      	sub	sp, #32
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3fc:	f3ef 8310 	mrs	r3, PRIMASK
 801b400:	617b      	str	r3, [r7, #20]
  return(result);
 801b402:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b406:	b672      	cpsid	i
}
 801b408:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b40a:	4b3c      	ldr	r3, [pc, #240]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b40c:	789b      	ldrb	r3, [r3, #2]
 801b40e:	2b02      	cmp	r3, #2
 801b410:	d106      	bne.n	801b420 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b412:	4b3a      	ldr	r3, [pc, #232]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b414:	2200      	movs	r2, #0
 801b416:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b418:	4b38      	ldr	r3, [pc, #224]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b41a:	2200      	movs	r2, #0
 801b41c:	821a      	strh	r2, [r3, #16]
 801b41e:	e00a      	b.n	801b436 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b420:	4b36      	ldr	r3, [pc, #216]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b422:	8a1a      	ldrh	r2, [r3, #16]
 801b424:	4b35      	ldr	r3, [pc, #212]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b426:	8a9b      	ldrh	r3, [r3, #20]
 801b428:	4413      	add	r3, r2
 801b42a:	b29b      	uxth	r3, r3
 801b42c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b430:	b29a      	uxth	r2, r3
 801b432:	4b32      	ldr	r3, [pc, #200]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b434:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b436:	4b31      	ldr	r3, [pc, #196]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b438:	8a1a      	ldrh	r2, [r3, #16]
 801b43a:	4b30      	ldr	r3, [pc, #192]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b43c:	8a5b      	ldrh	r3, [r3, #18]
 801b43e:	429a      	cmp	r2, r3
 801b440:	d04d      	beq.n	801b4de <TRACE_TxCpltCallback+0xee>
 801b442:	4b2e      	ldr	r3, [pc, #184]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b444:	8adb      	ldrh	r3, [r3, #22]
 801b446:	2b01      	cmp	r3, #1
 801b448:	d149      	bne.n	801b4de <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b44a:	4b2c      	ldr	r3, [pc, #176]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b44c:	789b      	ldrb	r3, [r3, #2]
 801b44e:	2b01      	cmp	r3, #1
 801b450:	d117      	bne.n	801b482 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b452:	4b2a      	ldr	r3, [pc, #168]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b454:	881a      	ldrh	r2, [r3, #0]
 801b456:	4b29      	ldr	r3, [pc, #164]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b458:	8a1b      	ldrh	r3, [r3, #16]
 801b45a:	1ad3      	subs	r3, r2, r3
 801b45c:	b29a      	uxth	r2, r3
 801b45e:	4b27      	ldr	r3, [pc, #156]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b460:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b462:	4b26      	ldr	r3, [pc, #152]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b464:	2202      	movs	r2, #2
 801b466:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b468:	4b24      	ldr	r3, [pc, #144]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b46a:	2200      	movs	r2, #0
 801b46c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b46e:	4b23      	ldr	r3, [pc, #140]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b470:	8a9b      	ldrh	r3, [r3, #20]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d105      	bne.n	801b482 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b476:	4b21      	ldr	r3, [pc, #132]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b478:	2200      	movs	r2, #0
 801b47a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b47c:	4b1f      	ldr	r3, [pc, #124]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b47e:	2200      	movs	r2, #0
 801b480:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b482:	4b1e      	ldr	r3, [pc, #120]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b484:	789b      	ldrb	r3, [r3, #2]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d115      	bne.n	801b4b6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b48a:	4b1c      	ldr	r3, [pc, #112]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b48c:	8a5a      	ldrh	r2, [r3, #18]
 801b48e:	4b1b      	ldr	r3, [pc, #108]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b490:	8a1b      	ldrh	r3, [r3, #16]
 801b492:	429a      	cmp	r2, r3
 801b494:	d908      	bls.n	801b4a8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b496:	4b19      	ldr	r3, [pc, #100]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b498:	8a5a      	ldrh	r2, [r3, #18]
 801b49a:	4b18      	ldr	r3, [pc, #96]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b49c:	8a1b      	ldrh	r3, [r3, #16]
 801b49e:	1ad3      	subs	r3, r2, r3
 801b4a0:	b29a      	uxth	r2, r3
 801b4a2:	4b16      	ldr	r3, [pc, #88]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b4a4:	829a      	strh	r2, [r3, #20]
 801b4a6:	e006      	b.n	801b4b6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b4a8:	4b14      	ldr	r3, [pc, #80]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b4aa:	8a1b      	ldrh	r3, [r3, #16]
 801b4ac:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b4b0:	b29a      	uxth	r2, r3
 801b4b2:	4b12      	ldr	r3, [pc, #72]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b4b4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b4b6:	4b11      	ldr	r3, [pc, #68]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b4b8:	8a1b      	ldrh	r3, [r3, #16]
 801b4ba:	461a      	mov	r2, r3
 801b4bc:	4b10      	ldr	r3, [pc, #64]	; (801b500 <TRACE_TxCpltCallback+0x110>)
 801b4be:	4413      	add	r3, r2
 801b4c0:	61fb      	str	r3, [r7, #28]
 801b4c2:	69bb      	ldr	r3, [r7, #24]
 801b4c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4c6:	693b      	ldr	r3, [r7, #16]
 801b4c8:	f383 8810 	msr	PRIMASK, r3
}
 801b4cc:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b4ce:	4b0d      	ldr	r3, [pc, #52]	; (801b504 <TRACE_TxCpltCallback+0x114>)
 801b4d0:	68db      	ldr	r3, [r3, #12]
 801b4d2:	4a0a      	ldr	r2, [pc, #40]	; (801b4fc <TRACE_TxCpltCallback+0x10c>)
 801b4d4:	8a92      	ldrh	r2, [r2, #20]
 801b4d6:	4611      	mov	r1, r2
 801b4d8:	69f8      	ldr	r0, [r7, #28]
 801b4da:	4798      	blx	r3
 801b4dc:	e00a      	b.n	801b4f4 <TRACE_TxCpltCallback+0x104>
 801b4de:	69bb      	ldr	r3, [r7, #24]
 801b4e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	f383 8810 	msr	PRIMASK, r3
}
 801b4e8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b4ea:	f7e6 fbe5 	bl	8001cb8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b4ee:	f000 f8a7 	bl	801b640 <TRACE_UnLock>
  }
}
 801b4f2:	bf00      	nop
 801b4f4:	bf00      	nop
 801b4f6:	3720      	adds	r7, #32
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	bd80      	pop	{r7, pc}
 801b4fc:	20001f0c 	.word	0x20001f0c
 801b500:	20001f24 	.word	0x20001f24
 801b504:	0801bde8 	.word	0x0801bde8

0801b508 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b508:	b480      	push	{r7}
 801b50a:	b087      	sub	sp, #28
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	4603      	mov	r3, r0
 801b510:	6039      	str	r1, [r7, #0]
 801b512:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b518:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b51a:	f3ef 8310 	mrs	r3, PRIMASK
 801b51e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b520:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b524:	b672      	cpsid	i
}
 801b526:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b528:	4b35      	ldr	r3, [pc, #212]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b52a:	8a5a      	ldrh	r2, [r3, #18]
 801b52c:	4b34      	ldr	r3, [pc, #208]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b52e:	8a1b      	ldrh	r3, [r3, #16]
 801b530:	429a      	cmp	r2, r3
 801b532:	d11b      	bne.n	801b56c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b534:	4b32      	ldr	r3, [pc, #200]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b536:	8a5b      	ldrh	r3, [r3, #18]
 801b538:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b53c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b53e:	88fa      	ldrh	r2, [r7, #6]
 801b540:	8afb      	ldrh	r3, [r7, #22]
 801b542:	429a      	cmp	r2, r3
 801b544:	d33a      	bcc.n	801b5bc <TRACE_AllocateBufer+0xb4>
 801b546:	4b2e      	ldr	r3, [pc, #184]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b548:	8a1b      	ldrh	r3, [r3, #16]
 801b54a:	88fa      	ldrh	r2, [r7, #6]
 801b54c:	429a      	cmp	r2, r3
 801b54e:	d235      	bcs.n	801b5bc <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b550:	4b2b      	ldr	r3, [pc, #172]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b552:	2201      	movs	r2, #1
 801b554:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b556:	4b2a      	ldr	r3, [pc, #168]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b558:	8a5a      	ldrh	r2, [r3, #18]
 801b55a:	4b29      	ldr	r3, [pc, #164]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b55c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b55e:	4b28      	ldr	r3, [pc, #160]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b560:	8a1b      	ldrh	r3, [r3, #16]
 801b562:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b564:	4b26      	ldr	r3, [pc, #152]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b566:	2200      	movs	r2, #0
 801b568:	825a      	strh	r2, [r3, #18]
 801b56a:	e027      	b.n	801b5bc <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b56c:	4b24      	ldr	r3, [pc, #144]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b56e:	8a5a      	ldrh	r2, [r3, #18]
 801b570:	4b23      	ldr	r3, [pc, #140]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b572:	8a1b      	ldrh	r3, [r3, #16]
 801b574:	429a      	cmp	r2, r3
 801b576:	d91b      	bls.n	801b5b0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b578:	4b21      	ldr	r3, [pc, #132]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b57a:	8a5b      	ldrh	r3, [r3, #18]
 801b57c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b580:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b582:	88fa      	ldrh	r2, [r7, #6]
 801b584:	8afb      	ldrh	r3, [r7, #22]
 801b586:	429a      	cmp	r2, r3
 801b588:	d318      	bcc.n	801b5bc <TRACE_AllocateBufer+0xb4>
 801b58a:	4b1d      	ldr	r3, [pc, #116]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b58c:	8a1b      	ldrh	r3, [r3, #16]
 801b58e:	88fa      	ldrh	r2, [r7, #6]
 801b590:	429a      	cmp	r2, r3
 801b592:	d213      	bcs.n	801b5bc <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b594:	4b1a      	ldr	r3, [pc, #104]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b596:	2201      	movs	r2, #1
 801b598:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b59a:	4b19      	ldr	r3, [pc, #100]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b59c:	8a5a      	ldrh	r2, [r3, #18]
 801b59e:	4b18      	ldr	r3, [pc, #96]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5a0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b5a2:	4b17      	ldr	r3, [pc, #92]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5a4:	8a1b      	ldrh	r3, [r3, #16]
 801b5a6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b5a8:	4b15      	ldr	r3, [pc, #84]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	825a      	strh	r2, [r3, #18]
 801b5ae:	e005      	b.n	801b5bc <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b5b0:	4b13      	ldr	r3, [pc, #76]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5b2:	8a1a      	ldrh	r2, [r3, #16]
 801b5b4:	4b12      	ldr	r3, [pc, #72]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5b6:	8a5b      	ldrh	r3, [r3, #18]
 801b5b8:	1ad3      	subs	r3, r2, r3
 801b5ba:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b5bc:	8afa      	ldrh	r2, [r7, #22]
 801b5be:	88fb      	ldrh	r3, [r7, #6]
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	d90f      	bls.n	801b5e4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b5c4:	4b0e      	ldr	r3, [pc, #56]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5c6:	8a5a      	ldrh	r2, [r3, #18]
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b5cc:	4b0c      	ldr	r3, [pc, #48]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5ce:	8a5a      	ldrh	r2, [r3, #18]
 801b5d0:	88fb      	ldrh	r3, [r7, #6]
 801b5d2:	4413      	add	r3, r2
 801b5d4:	b29b      	uxth	r3, r3
 801b5d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b5da:	b29a      	uxth	r2, r3
 801b5dc:	4b08      	ldr	r3, [pc, #32]	; (801b600 <TRACE_AllocateBufer+0xf8>)
 801b5de:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	82bb      	strh	r3, [r7, #20]
 801b5e4:	693b      	ldr	r3, [r7, #16]
 801b5e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	f383 8810 	msr	PRIMASK, r3
}
 801b5ee:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b5f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	371c      	adds	r7, #28
 801b5f8:	46bd      	mov	sp, r7
 801b5fa:	bc80      	pop	{r7}
 801b5fc:	4770      	bx	lr
 801b5fe:	bf00      	nop
 801b600:	20001f0c 	.word	0x20001f0c

0801b604 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b604:	b480      	push	{r7}
 801b606:	b085      	sub	sp, #20
 801b608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b60a:	f3ef 8310 	mrs	r3, PRIMASK
 801b60e:	607b      	str	r3, [r7, #4]
  return(result);
 801b610:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b614:	b672      	cpsid	i
}
 801b616:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b618:	4b08      	ldr	r3, [pc, #32]	; (801b63c <TRACE_Lock+0x38>)
 801b61a:	8adb      	ldrh	r3, [r3, #22]
 801b61c:	3301      	adds	r3, #1
 801b61e:	b29a      	uxth	r2, r3
 801b620:	4b06      	ldr	r3, [pc, #24]	; (801b63c <TRACE_Lock+0x38>)
 801b622:	82da      	strh	r2, [r3, #22]
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b628:	68bb      	ldr	r3, [r7, #8]
 801b62a:	f383 8810 	msr	PRIMASK, r3
}
 801b62e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b630:	bf00      	nop
 801b632:	3714      	adds	r7, #20
 801b634:	46bd      	mov	sp, r7
 801b636:	bc80      	pop	{r7}
 801b638:	4770      	bx	lr
 801b63a:	bf00      	nop
 801b63c:	20001f0c 	.word	0x20001f0c

0801b640 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b640:	b480      	push	{r7}
 801b642:	b085      	sub	sp, #20
 801b644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b646:	f3ef 8310 	mrs	r3, PRIMASK
 801b64a:	607b      	str	r3, [r7, #4]
  return(result);
 801b64c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b64e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b650:	b672      	cpsid	i
}
 801b652:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b654:	4b08      	ldr	r3, [pc, #32]	; (801b678 <TRACE_UnLock+0x38>)
 801b656:	8adb      	ldrh	r3, [r3, #22]
 801b658:	3b01      	subs	r3, #1
 801b65a:	b29a      	uxth	r2, r3
 801b65c:	4b06      	ldr	r3, [pc, #24]	; (801b678 <TRACE_UnLock+0x38>)
 801b65e:	82da      	strh	r2, [r3, #22]
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b664:	68bb      	ldr	r3, [r7, #8]
 801b666:	f383 8810 	msr	PRIMASK, r3
}
 801b66a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b66c:	bf00      	nop
 801b66e:	3714      	adds	r7, #20
 801b670:	46bd      	mov	sp, r7
 801b672:	bc80      	pop	{r7}
 801b674:	4770      	bx	lr
 801b676:	bf00      	nop
 801b678:	20001f0c 	.word	0x20001f0c

0801b67c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b67c:	b480      	push	{r7}
 801b67e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b680:	4b05      	ldr	r3, [pc, #20]	; (801b698 <TRACE_IsLocked+0x1c>)
 801b682:	8adb      	ldrh	r3, [r3, #22]
 801b684:	2b00      	cmp	r3, #0
 801b686:	bf14      	ite	ne
 801b688:	2301      	movne	r3, #1
 801b68a:	2300      	moveq	r3, #0
 801b68c:	b2db      	uxtb	r3, r3
}
 801b68e:	4618      	mov	r0, r3
 801b690:	46bd      	mov	sp, r7
 801b692:	bc80      	pop	{r7}
 801b694:	4770      	bx	lr
 801b696:	bf00      	nop
 801b698:	20001f0c 	.word	0x20001f0c

0801b69c <__libc_init_array>:
 801b69c:	b570      	push	{r4, r5, r6, lr}
 801b69e:	4d0d      	ldr	r5, [pc, #52]	; (801b6d4 <__libc_init_array+0x38>)
 801b6a0:	4c0d      	ldr	r4, [pc, #52]	; (801b6d8 <__libc_init_array+0x3c>)
 801b6a2:	1b64      	subs	r4, r4, r5
 801b6a4:	10a4      	asrs	r4, r4, #2
 801b6a6:	2600      	movs	r6, #0
 801b6a8:	42a6      	cmp	r6, r4
 801b6aa:	d109      	bne.n	801b6c0 <__libc_init_array+0x24>
 801b6ac:	4d0b      	ldr	r5, [pc, #44]	; (801b6dc <__libc_init_array+0x40>)
 801b6ae:	4c0c      	ldr	r4, [pc, #48]	; (801b6e0 <__libc_init_array+0x44>)
 801b6b0:	f000 f8ae 	bl	801b810 <_init>
 801b6b4:	1b64      	subs	r4, r4, r5
 801b6b6:	10a4      	asrs	r4, r4, #2
 801b6b8:	2600      	movs	r6, #0
 801b6ba:	42a6      	cmp	r6, r4
 801b6bc:	d105      	bne.n	801b6ca <__libc_init_array+0x2e>
 801b6be:	bd70      	pop	{r4, r5, r6, pc}
 801b6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6c4:	4798      	blx	r3
 801b6c6:	3601      	adds	r6, #1
 801b6c8:	e7ee      	b.n	801b6a8 <__libc_init_array+0xc>
 801b6ca:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6ce:	4798      	blx	r3
 801b6d0:	3601      	adds	r6, #1
 801b6d2:	e7f2      	b.n	801b6ba <__libc_init_array+0x1e>
 801b6d4:	0801c378 	.word	0x0801c378
 801b6d8:	0801c378 	.word	0x0801c378
 801b6dc:	0801c378 	.word	0x0801c378
 801b6e0:	0801c37c 	.word	0x0801c37c

0801b6e4 <memcpy>:
 801b6e4:	440a      	add	r2, r1
 801b6e6:	4291      	cmp	r1, r2
 801b6e8:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6ec:	d100      	bne.n	801b6f0 <memcpy+0xc>
 801b6ee:	4770      	bx	lr
 801b6f0:	b510      	push	{r4, lr}
 801b6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6fa:	4291      	cmp	r1, r2
 801b6fc:	d1f9      	bne.n	801b6f2 <memcpy+0xe>
 801b6fe:	bd10      	pop	{r4, pc}

0801b700 <memset>:
 801b700:	4402      	add	r2, r0
 801b702:	4603      	mov	r3, r0
 801b704:	4293      	cmp	r3, r2
 801b706:	d100      	bne.n	801b70a <memset+0xa>
 801b708:	4770      	bx	lr
 801b70a:	f803 1b01 	strb.w	r1, [r3], #1
 801b70e:	e7f9      	b.n	801b704 <memset+0x4>

0801b710 <floor>:
 801b710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b714:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b718:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b71c:	2e13      	cmp	r6, #19
 801b71e:	4602      	mov	r2, r0
 801b720:	460b      	mov	r3, r1
 801b722:	4607      	mov	r7, r0
 801b724:	460c      	mov	r4, r1
 801b726:	4605      	mov	r5, r0
 801b728:	dc33      	bgt.n	801b792 <floor+0x82>
 801b72a:	2e00      	cmp	r6, #0
 801b72c:	da14      	bge.n	801b758 <floor+0x48>
 801b72e:	a334      	add	r3, pc, #208	; (adr r3, 801b800 <floor+0xf0>)
 801b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b734:	f7e4 fde2 	bl	80002fc <__adddf3>
 801b738:	2200      	movs	r2, #0
 801b73a:	2300      	movs	r3, #0
 801b73c:	f7e5 f812 	bl	8000764 <__aeabi_dcmpgt>
 801b740:	b138      	cbz	r0, 801b752 <floor+0x42>
 801b742:	2c00      	cmp	r4, #0
 801b744:	da58      	bge.n	801b7f8 <floor+0xe8>
 801b746:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b74a:	431d      	orrs	r5, r3
 801b74c:	d001      	beq.n	801b752 <floor+0x42>
 801b74e:	4c2e      	ldr	r4, [pc, #184]	; (801b808 <floor+0xf8>)
 801b750:	2500      	movs	r5, #0
 801b752:	4623      	mov	r3, r4
 801b754:	462f      	mov	r7, r5
 801b756:	e025      	b.n	801b7a4 <floor+0x94>
 801b758:	4a2c      	ldr	r2, [pc, #176]	; (801b80c <floor+0xfc>)
 801b75a:	fa42 f806 	asr.w	r8, r2, r6
 801b75e:	ea01 0208 	and.w	r2, r1, r8
 801b762:	4302      	orrs	r2, r0
 801b764:	d01e      	beq.n	801b7a4 <floor+0x94>
 801b766:	a326      	add	r3, pc, #152	; (adr r3, 801b800 <floor+0xf0>)
 801b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b76c:	f7e4 fdc6 	bl	80002fc <__adddf3>
 801b770:	2200      	movs	r2, #0
 801b772:	2300      	movs	r3, #0
 801b774:	f7e4 fff6 	bl	8000764 <__aeabi_dcmpgt>
 801b778:	2800      	cmp	r0, #0
 801b77a:	d0ea      	beq.n	801b752 <floor+0x42>
 801b77c:	2c00      	cmp	r4, #0
 801b77e:	bfbe      	ittt	lt
 801b780:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b784:	fa43 f606 	asrlt.w	r6, r3, r6
 801b788:	19a4      	addlt	r4, r4, r6
 801b78a:	ea24 0408 	bic.w	r4, r4, r8
 801b78e:	2500      	movs	r5, #0
 801b790:	e7df      	b.n	801b752 <floor+0x42>
 801b792:	2e33      	cmp	r6, #51	; 0x33
 801b794:	dd0a      	ble.n	801b7ac <floor+0x9c>
 801b796:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b79a:	d103      	bne.n	801b7a4 <floor+0x94>
 801b79c:	f7e4 fdae 	bl	80002fc <__adddf3>
 801b7a0:	4607      	mov	r7, r0
 801b7a2:	460b      	mov	r3, r1
 801b7a4:	4638      	mov	r0, r7
 801b7a6:	4619      	mov	r1, r3
 801b7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7ac:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b7b0:	f04f 32ff 	mov.w	r2, #4294967295
 801b7b4:	fa22 f808 	lsr.w	r8, r2, r8
 801b7b8:	ea18 0f00 	tst.w	r8, r0
 801b7bc:	d0f2      	beq.n	801b7a4 <floor+0x94>
 801b7be:	a310      	add	r3, pc, #64	; (adr r3, 801b800 <floor+0xf0>)
 801b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7c4:	f7e4 fd9a 	bl	80002fc <__adddf3>
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	f7e4 ffca 	bl	8000764 <__aeabi_dcmpgt>
 801b7d0:	2800      	cmp	r0, #0
 801b7d2:	d0be      	beq.n	801b752 <floor+0x42>
 801b7d4:	2c00      	cmp	r4, #0
 801b7d6:	da02      	bge.n	801b7de <floor+0xce>
 801b7d8:	2e14      	cmp	r6, #20
 801b7da:	d103      	bne.n	801b7e4 <floor+0xd4>
 801b7dc:	3401      	adds	r4, #1
 801b7de:	ea25 0508 	bic.w	r5, r5, r8
 801b7e2:	e7b6      	b.n	801b752 <floor+0x42>
 801b7e4:	2301      	movs	r3, #1
 801b7e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b7ea:	fa03 f606 	lsl.w	r6, r3, r6
 801b7ee:	4435      	add	r5, r6
 801b7f0:	42bd      	cmp	r5, r7
 801b7f2:	bf38      	it	cc
 801b7f4:	18e4      	addcc	r4, r4, r3
 801b7f6:	e7f2      	b.n	801b7de <floor+0xce>
 801b7f8:	2500      	movs	r5, #0
 801b7fa:	462c      	mov	r4, r5
 801b7fc:	e7a9      	b.n	801b752 <floor+0x42>
 801b7fe:	bf00      	nop
 801b800:	8800759c 	.word	0x8800759c
 801b804:	7e37e43c 	.word	0x7e37e43c
 801b808:	bff00000 	.word	0xbff00000
 801b80c:	000fffff 	.word	0x000fffff

0801b810 <_init>:
 801b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b812:	bf00      	nop
 801b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b816:	bc08      	pop	{r3}
 801b818:	469e      	mov	lr, r3
 801b81a:	4770      	bx	lr

0801b81c <_fini>:
 801b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b81e:	bf00      	nop
 801b820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b822:	bc08      	pop	{r3}
 801b824:	469e      	mov	lr, r3
 801b826:	4770      	bx	lr
