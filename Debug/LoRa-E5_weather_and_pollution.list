
LoRa-E5_weather_and_pollution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cea8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0801cfe0  0801cfe0  0002cfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801da6c  0801da6c  0002da6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801db2c  0801db2c  00030584  2**0
                  CONTENTS
  5 .ARM          00000008  0801db2c  0801db2c  0002db2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801db34  0801db34  00030584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801db34  0801db34  0002db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801db3c  0801db3c  0002db3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000584  20000000  0801db40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000242c  20000584  0801e0c4  00030584  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200029b0  0801e0c4  000329b0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030584  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004c368  00000000  00000000  000305ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aeca  00000000  00000000  0007c916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003b88  00000000  00000000  000877e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003720  00000000  00000000  0008b368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1b6  00000000  00000000  0008ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045972  00000000  00000000  000b8c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6cc5  00000000  00000000  000fe5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d5275  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f934  00000000  00000000  001d52c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000584 	.word	0x20000584
 8000154:	00000000 	.word	0x00000000
 8000158:	0801cfc8 	.word	0x0801cfc8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000588 	.word	0x20000588
 8000174:	0801cfc8 	.word	0x0801cfc8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b974 	b.w	800108c <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4688      	mov	r8, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14d      	bne.n	8000e68 <__udivmoddi4+0xac>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d968      	bls.n	8000ea4 <__udivmoddi4+0xe8>
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	b152      	cbz	r2, 8000dee <__udivmoddi4+0x32>
 8000dd8:	fa01 f302 	lsl.w	r3, r1, r2
 8000ddc:	f1c2 0120 	rsb	r1, r2, #32
 8000de0:	fa20 f101 	lsr.w	r1, r0, r1
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	ea41 0803 	orr.w	r8, r1, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000df2:	0c21      	lsrs	r1, r4, #16
 8000df4:	fbb8 fef5 	udiv	lr, r8, r5
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fb05 831e 	mls	r3, r5, lr, r8
 8000e00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e04:	fb0e f107 	mul.w	r1, lr, r7
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x68>
 8000e0c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e10:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e14:	f080 811e 	bcs.w	8001054 <__udivmoddi4+0x298>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	f240 811b 	bls.w	8001054 <__udivmoddi4+0x298>
 8000e1e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e2c:	fb05 3310 	mls	r3, r5, r0, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb00 f707 	mul.w	r7, r0, r7
 8000e38:	42a7      	cmp	r7, r4
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x96>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e44:	f080 8108 	bcs.w	8001058 <__udivmoddi4+0x29c>
 8000e48:	42a7      	cmp	r7, r4
 8000e4a:	f240 8105 	bls.w	8001058 <__udivmoddi4+0x29c>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	1be4      	subs	r4, r4, r7
 8000e54:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e58:	2100      	movs	r1, #0
 8000e5a:	b11e      	cbz	r6, 8000e64 <__udivmoddi4+0xa8>
 8000e5c:	40d4      	lsrs	r4, r2
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e9c6 4300 	strd	r4, r3, [r6]
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0xc2>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	f000 80ee 	beq.w	800104e <__udivmoddi4+0x292>
 8000e72:	2100      	movs	r1, #0
 8000e74:	e9c6 0500 	strd	r0, r5, [r6]
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	fab3 f183 	clz	r1, r3
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d14a      	bne.n	8000f1c <__udivmoddi4+0x160>
 8000e86:	42ab      	cmp	r3, r5
 8000e88:	d302      	bcc.n	8000e90 <__udivmoddi4+0xd4>
 8000e8a:	4282      	cmp	r2, r0
 8000e8c:	f200 80f9 	bhi.w	8001082 <__udivmoddi4+0x2c6>
 8000e90:	1a84      	subs	r4, r0, r2
 8000e92:	eb65 0303 	sbc.w	r3, r5, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	4698      	mov	r8, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d0e2      	beq.n	8000e64 <__udivmoddi4+0xa8>
 8000e9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ea2:	e7df      	b.n	8000e64 <__udivmoddi4+0xa8>
 8000ea4:	b902      	cbnz	r2, 8000ea8 <__udivmoddi4+0xec>
 8000ea6:	deff      	udf	#255	; 0xff
 8000ea8:	fab2 f282 	clz	r2, r2
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	f040 8091 	bne.w	8000fd4 <__udivmoddi4+0x218>
 8000eb2:	eba1 050c 	sub.w	r5, r1, ip
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ec4:	fb07 5013 	mls	r0, r7, r3, r5
 8000ec8:	0c25      	lsrs	r5, r4, #16
 8000eca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ece:	fb0e f003 	mul.w	r0, lr, r3
 8000ed2:	42a8      	cmp	r0, r5
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x12c>
 8000ed6:	eb1c 0505 	adds.w	r5, ip, r5
 8000eda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x12a>
 8000ee0:	42a8      	cmp	r0, r5
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	1a2d      	subs	r5, r5, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ef0:	fb07 5510 	mls	r5, r7, r0, r5
 8000ef4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x156>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x154>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2ca>
 8000f10:	4628      	mov	r0, r5
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f1a:	e79e      	b.n	8000e5a <__udivmoddi4+0x9e>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f2e:	fa05 f301 	lsl.w	r3, r5, r1
 8000f32:	431c      	orrs	r4, r3
 8000f34:	40fd      	lsrs	r5, r7
 8000f36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f3a:	fa00 f301 	lsl.w	r3, r0, r1
 8000f3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f42:	0c20      	lsrs	r0, r4, #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fb09 5518 	mls	r5, r9, r8, r5
 8000f4c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f50:	fb08 f00e 	mul.w	r0, r8, lr
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b8>
 8000f5c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2bc>
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2bc>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4465      	add	r5, ip
 8000f74:	1a2d      	subs	r5, r5, r0
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f7c:	fb09 5510 	mls	r5, r9, r0, r5
 8000f80:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f88:	45ae      	cmp	lr, r5
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1e2>
 8000f8c:	eb1c 0505 	adds.w	r5, ip, r5
 8000f90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2b4>
 8000f96:	45ae      	cmp	lr, r5
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2b4>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4465      	add	r5, ip
 8000f9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fa6:	eba5 050e 	sub.w	r5, r5, lr
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46a6      	mov	lr, r4
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x2a4>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x2a0>
 8000fb4:	b15e      	cbz	r6, 8000fce <__udivmoddi4+0x212>
 8000fb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fba:	eb65 050e 	sbc.w	r5, r5, lr
 8000fbe:	fa05 f707 	lsl.w	r7, r5, r7
 8000fc2:	fa22 f301 	lsr.w	r3, r2, r1
 8000fc6:	40cd      	lsrs	r5, r1
 8000fc8:	431f      	orrs	r7, r3
 8000fca:	e9c6 7500 	strd	r7, r5, [r6]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c2 0320 	rsb	r3, r2, #32
 8000fd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000fdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe0:	fa25 f303 	lsr.w	r3, r5, r3
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	430d      	orrs	r5, r1
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb3 f1f7 	udiv	r1, r3, r7
 8000ff4:	fb07 3011 	mls	r0, r7, r1, r3
 8000ff8:	0c2b      	lsrs	r3, r5, #16
 8000ffa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ffe:	fb01 f00e 	mul.w	r0, r1, lr
 8001002:	4298      	cmp	r0, r3
 8001004:	fa04 f402 	lsl.w	r4, r4, r2
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x260>
 800100a:	eb1c 0303 	adds.w	r3, ip, r3
 800100e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b8>
 8001014:	4298      	cmp	r0, r3
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b8>
 8001018:	3902      	subs	r1, #2
 800101a:	4463      	add	r3, ip
 800101c:	1a1b      	subs	r3, r3, r0
 800101e:	b2ad      	uxth	r5, r5
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3310 	mls	r3, r7, r0, r3
 8001028:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800102c:	fb00 f30e 	mul.w	r3, r0, lr
 8001030:	42ab      	cmp	r3, r5
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x28a>
 8001034:	eb1c 0505 	adds.w	r5, ip, r5
 8001038:	f100 38ff 	add.w	r8, r0, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2b0>
 800103e:	42ab      	cmp	r3, r5
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2b0>
 8001042:	3802      	subs	r0, #2
 8001044:	4465      	add	r5, ip
 8001046:	1aed      	subs	r5, r5, r3
 8001048:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0x104>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e707      	b.n	8000e64 <__udivmoddi4+0xa8>
 8001054:	4686      	mov	lr, r0
 8001056:	e6e5      	b.n	8000e24 <__udivmoddi4+0x68>
 8001058:	4618      	mov	r0, r3
 800105a:	e6fa      	b.n	8000e52 <__udivmoddi4+0x96>
 800105c:	454b      	cmp	r3, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f8>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001068:	3801      	subs	r0, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f8>
 800106c:	4640      	mov	r0, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x28a>
 8001070:	4620      	mov	r0, r4
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1e2>
 8001074:	4641      	mov	r1, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x260>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b8>
 800107c:	3b02      	subs	r3, #2
 800107e:	4465      	add	r5, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x12c>
 8001082:	4608      	mov	r0, r1
 8001084:	e709      	b.n	8000e9a <__udivmoddi4+0xde>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x156>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800109e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d6:	4013      	ands	r3, r2
 80010d8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_ADC_Init+0x94>)
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <MX_ADC_Init+0x98>)
 80010ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_ADC_Init+0x94>)
 80010f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010f4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_ADC_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_ADC_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_ADC_Init+0x94>)
 800110a:	2204      	movs	r2, #4
 800110c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_ADC_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_ADC_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_ADC_Init+0x94>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_ADC_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_ADC_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_ADC_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_ADC_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_ADC_Init+0x94>)
 8001144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_ADC_Init+0x94>)
 800114c:	2207      	movs	r2, #7
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_ADC_Init+0x94>)
 8001152:	2207      	movs	r2, #7
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_ADC_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_ADC_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_ADC_Init+0x94>)
 8001166:	f002 fc45 	bl	80039f4 <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001170:	f000 fde0 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200005a0 	.word	0x200005a0
 800117c:	40012400 	.word	0x40012400

08001180 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_ADC_MspInit+0x24>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d103      	bne.n	800119a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001192:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001196:	f7ff ff7b 	bl	8001090 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012400 	.word	0x40012400

080011a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_ADC_MspDeInit+0x24>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d103      	bne.n	80011c2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f7ff ff7f 	bl	80010c0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012400 	.word	0x40012400

080011d0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <SYS_InitMeasurement+0x14>)
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <SYS_InitMeasurement+0x18>)
 80011d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200005a0 	.word	0x200005a0
 80011e8:	40012400 	.word	0x40012400

080011ec <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <SYS_GetBatteryLevel+0x5c>)
 80011fc:	f000 f82a 	bl	8001254 <ADC_ReadChannels>
 8001200:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	e016      	b.n	800123c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <SYS_GetBatteryLevel+0x60>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001216:	4293      	cmp	r3, r2
 8001218:	d00b      	beq.n	8001232 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <SYS_GetBatteryLevel+0x60>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	80fb      	strh	r3, [r7, #6]
 8001230:	e004      	b.n	800123c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <SYS_GetBatteryLevel+0x64>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800123c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	b4002000 	.word	0xb4002000
 800124c:	1fff75aa 	.word	0x1fff75aa
 8001250:	004c08d8 	.word	0x004c08d8

08001254 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800126c:	f7ff ff3a 	bl	80010e4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <ADC_ReadChannels+0x88>)
 8001272:	f003 f9ee 	bl	8004652 <HAL_ADCEx_Calibration_Start>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800127c:	f000 fd5a 	bl	8001d34 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <ADC_ReadChannels+0x88>)
 8001294:	f002 fefa 	bl	800408c <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800129e:	f000 fd49 	bl	8001d34 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <ADC_ReadChannels+0x88>)
 80012a4:	f002 fdd6 	bl	8003e54 <HAL_ADC_Start>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80012ae:	f000 fd41 	bl	8001d34 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80012b2:	f04f 31ff 	mov.w	r1, #4294967295
 80012b6:	4809      	ldr	r0, [pc, #36]	; (80012dc <ADC_ReadChannels+0x88>)
 80012b8:	f002 fe44 	bl	8003f44 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <ADC_ReadChannels+0x88>)
 80012be:	f002 fe0f 	bl	8003ee0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <ADC_ReadChannels+0x88>)
 80012c4:	f002 fed5 	bl	8004072 <HAL_ADC_GetValue>
 80012c8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <ADC_ReadChannels+0x88>)
 80012cc:	f002 fd46 	bl	8003d5c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80012d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200005a0 	.word	0x200005a0

080012e0 <LL_AHB1_GRP1_EnableClock>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001314:	2004      	movs	r0, #4
 8001316:	f7ff ffe3 	bl	80012e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff ffe0 	bl	80012e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2102      	movs	r1, #2
 8001324:	200b      	movs	r0, #11
 8001326:	f003 fb3a 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800132a:	200b      	movs	r0, #11
 800132c:	f003 fb51 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	200c      	movs	r0, #12
 8001336:	f003 fb32 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800133a:	200c      	movs	r0, #12
 800133c:	f003 fb49 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	200d      	movs	r0, #13
 8001346:	f003 fb2a 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800134a:	200d      	movs	r0, #13
 800134c:	f003 fb41 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	203d      	movs	r0, #61	; 0x3d
 8001356:	f003 fb22 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800135a:	203d      	movs	r0, #61	; 0x3d
 800135c:	f003 fb39 	bl	80049d2 <HAL_NVIC_EnableIRQ>

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001370:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001374:	d101      	bne.n	800137a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800137a:	2300      	movs	r3, #0
#endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	58004000 	.word	0x58004000

08001388 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80013a0:	4b56      	ldr	r3, [pc, #344]	; (80014fc <FLASH_IF_Write+0x174>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0299      	lsls	r1, r3, #10
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <FLASH_IF_Write+0x178>)
 80013a8:	400b      	ands	r3, r1
 80013aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	0adb      	lsrs	r3, r3, #11
 80013b6:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <FLASH_IF_Write+0x174>)
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	0291      	lsls	r1, r2, #10
 80013ca:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <FLASH_IF_Write+0x178>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d2:	fb01 f202 	mul.w	r2, r1, r2
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	0adb      	lsrs	r3, r3, #11
 80013da:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <FLASH_IF_Write+0x7a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d104      	bne.n	8001402 <FLASH_IF_Write+0x7a>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001402:	f06f 0304 	mvn.w	r3, #4
 8001406:	e074      	b.n	80014f2 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <FLASH_IF_Write+0x17c>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da02      	bge.n	8001416 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001410:	f06f 0303 	mvn.w	r3, #3
 8001414:	e06d      	b.n	80014f2 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	429a      	cmp	r2, r3
 800141c:	d005      	beq.n	800142a <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001424:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e05b      	b.n	80014e8 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f8f8 	bl	800162a <FLASH_IF_IsEmpty>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d037      	beq.n	80014b0 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001446:	f06f 0304 	mvn.w	r3, #4
 800144a:	e052      	b.n	80014f2 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001452:	02db      	lsls	r3, r3, #11
 8001454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001458:	4619      	mov	r1, r3
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f01a f9c8 	bl	801b7f0 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	6a39      	ldr	r1, [r7, #32]
 800146c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800146e:	b292      	uxth	r2, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f01a f9bd 	bl	801b7f0 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001476:	2200      	movs	r2, #0
 8001478:	2101      	movs	r1, #1
 800147a:	69f8      	ldr	r0, [r7, #28]
 800147c:	f000 f865 	bl	800154a <FLASH_IF_EraseByPages>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001486:	f06f 0301 	mvn.w	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 800148c:	e030      	b.n	80014f0 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001494:	02db      	lsls	r3, r3, #11
 8001496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f88a 	bl	80015b6 <FLASH_IF_Write_Buffer>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80014a8:	f06f 0302 	mvn.w	r3, #2
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80014ae:	e01f      	b.n	80014f0 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014b8:	f000 f87d 	bl	80015b6 <FLASH_IF_Write_Buffer>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80014c2:	f06f 0302 	mvn.w	r3, #2
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80014c8:	e012      	b.n	80014f0 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	4413      	add	r3, r2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	4413      	add	r3, r2
 80014d8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d99f      	bls.n	8001430 <FLASH_IF_Write+0xa8>
  }

  return status;
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3730      	adds	r7, #48	; 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	1fff75e0 	.word	0x1fff75e0
 8001500:	03fffc00 	.word	0x03fffc00
 8001504:	58004000 	.word	0x58004000

08001508 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001514:	e00b      	b.n	800152e <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001516:	bf00      	nop
 8001518:	f7ff ff24 	bl	8001364 <LL_FLASH_IsActiveFlag_OperationSuspended>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1fa      	bne.n	8001518 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	2001      	movs	r0, #1
 800152a:	f003 feeb 	bl	8005304 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001538:	4299      	cmp	r1, r3
 800153a:	bf08      	it	eq
 800153c:	4290      	cmpeq	r0, r2
 800153e:	d1ea      	bne.n	8001516 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001540:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b08a      	sub	sp, #40	; 0x28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	460b      	mov	r3, r1
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	4618      	mov	r0, r3
 8001570:	f004 f866 	bl	8005640 <HAL_FLASHEx_Erase_IT>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800157a:	e00a      	b.n	8001592 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800157c:	f107 0214 	add.w	r2, r7, #20
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f004 f802 	bl	8005590 <HAL_FLASHEx_Erase>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <FLASH_IF_EraseByPages+0x62>
 800159a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d101      	bne.n	80015a6 <FLASH_IF_EraseByPages+0x5c>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e003      	b.n	80015ae <FLASH_IF_EraseByPages+0x64>
 80015a6:	f06f 0301 	mvn.w	r3, #1
 80015aa:	e000      	b.n	80015ae <FLASH_IF_EraseByPages+0x64>
 80015ac:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b08a      	sub	sp, #40	; 0x28
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e020      	b.n	8001612 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	2208      	movs	r2, #8
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	4618      	mov	r0, r3
 80015da:	f01a f909 	bl	801b7f0 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80015de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	bf08      	it	eq
 80015e8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80015ec:	d005      	beq.n	80015fa <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80015ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff ff88 	bl	8001508 <FLASH_IF_Write64>
 80015f8:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3308      	adds	r3, #8
 80015fe:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3308      	adds	r3, #8
 8001604:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	3301      	adds	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3d9      	bcc.n	80015d0 <FLASH_IF_Write_Buffer+0x1a>
 800161c:	e000      	b.n	8001620 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800161e:	bf00      	nop
    }
  }

  return status;
 8001620:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001622:	4618      	mov	r0, r3
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001634:	e00a      	b.n	800164c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d001      	beq.n	8001646 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001642:	2301      	movs	r3, #1
 8001644:	e039      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3b01      	subs	r3, #1
 800164a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ef      	bne.n	8001636 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	e010      	b.n	8001682 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f103 0208 	add.w	r2, r3, #8
 8001666:	60fa      	str	r2, [r7, #12]
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	bf08      	it	eq
 8001672:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001676:	d001      	beq.n	800167c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001678:	2301      	movs	r3, #1
 800167a:	e01e      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3301      	adds	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3e9      	bcc.n	8001660 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800169a:	e00a      	b.n	80016b2 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2bff      	cmp	r3, #255	; 0xff
 80016a6:	d001      	beq.n	80016ac <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e006      	b.n	80016ba <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f1      	bne.n	800169c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80016b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <LL_AHB2_GRP1_EnableClock>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ffdb 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff ffd8 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2004      	movs	r0, #4
 8001716:	f7ff ffd5 	bl	80016c4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001720:	4829      	ldr	r0, [pc, #164]	; (80017c8 <MX_GPIO_Init+0xd4>)
 8001722:	f004 fa7f 	bl	8005c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2120      	movs	r1, #32
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <MX_GPIO_Init+0xd4>)
 800172c:	f004 fa7a 	bl	8005c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f240 2131 	movw	r1, #561	; 0x231
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f004 fa73 	bl	8005c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 800173e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001742:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	; (80017c8 <MX_GPIO_Init+0xd4>)
 8001756:	f004 f837 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800175a:	2331      	movs	r3, #49	; 0x31
 800175c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f004 f829 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001782:	2301      	movs	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	480f      	ldr	r0, [pc, #60]	; (80017c8 <MX_GPIO_Init+0xd4>)
 800178c:	f004 f81c 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001794:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001796:	2311      	movs	r3, #17
 8001798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f004 f80d 	bl	80057c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2029      	movs	r0, #41	; 0x29
 80017b4:	f003 f8f3 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b8:	2029      	movs	r0, #41	; 0x29
 80017ba:	f003 f90a 	bl	80049d2 <HAL_NVIC_EnableIRQ>

}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	48000400 	.word	0x48000400

080017cc <LL_AHB2_GRP1_EnableClock>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <LL_APB1_GRP1_EnableClock>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800180a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C2_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C2_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_I2C2_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001868:	f004 fa0c 	bl	8005c84 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001872:	f000 fa5f 	bl	8001d34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_I2C2_Init+0x74>)
 800187a:	f004 fef3 	bl	8006664 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001884:	f000 fa56 	bl	8001d34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_I2C2_Init+0x74>)
 800188c:	f004 ff34 	bl	80066f8 <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 fa4d 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000604 	.word	0x20000604
 80018a4:	40005800 	.word	0x40005800
 80018a8:	00707cbb 	.word	0x00707cbb

080018ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b096      	sub	sp, #88	; 0x58
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2238      	movs	r2, #56	; 0x38
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f01b fa89 	bl	801cde4 <memset>
  if(i2cHandle->Instance==I2C2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a21      	ldr	r2, [pc, #132]	; (800195c <HAL_I2C_MspInit+0xb0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d13b      	bne.n	8001954 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018e0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4618      	mov	r0, r3
 80018ec:	f006 f9da 	bl	8007ca4 <HAL_RCCEx_PeriphCLKConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018f6:	f000 fa1d 	bl	8001d34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff ff66 	bl	80017cc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	2002      	movs	r0, #2
 8001902:	f7ff ff63 	bl	80017cc <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190c:	2312      	movs	r3, #18
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001910:	2301      	movs	r3, #1
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001914:	2301      	movs	r3, #1
 8001916:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001918:	2304      	movs	r3, #4
 800191a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f003 ff4f 	bl	80057c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800192a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001934:	2301      	movs	r3, #1
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001938:	2301      	movs	r3, #1
 800193a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800193c:	2304      	movs	r3, #4
 800193e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <HAL_I2C_MspInit+0xb4>)
 8001948:	f003 ff3e 	bl	80057c8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800194c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001950:	f7ff ff54 	bl	80017fc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001954:	bf00      	nop
 8001956:	3758      	adds	r7, #88	; 0x58
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40005800 	.word	0x40005800
 8001960:	48000400 	.word	0x48000400

08001964 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001974:	f023 0218 	bic.w	r2, r3, #24
 8001978:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4313      	orrs	r3, r2
 8001980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
	...

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f001 fe3f 	bl	8003618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f8e9 	bl	8001b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f7ff fea9 	bl	80016f4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80019a2:	f00a f8a9 	bl	800baf8 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 80019a6:	f001 fa5b 	bl	8002e60 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80019aa:	f7ff ff3f 	bl	800182c <MX_I2C2_Init>
  MX_TIM16_Init();
 80019ae:	f000 feb1 	bl	8002714 <MX_TIM16_Init>
  MX_TIM17_Init();
 80019b2:	f000 fee3 	bl	800277c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 80019b6:	4b60      	ldr	r3, [pc, #384]	; (8001b38 <main+0x1a8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]


  uint8_t SHT40_cmd = 0xFD;
 80019bc:	23fd      	movs	r3, #253	; 0xfd
 80019be:	72fb      	strb	r3, [r7, #11]
  uint8_t SHT40_dataRX[6];
  uint16_t temp_hword; // teporarly temperature half word
  uint16_t th_hword;   // teporarly humidy half  word


  F1_QueueIni(); // init Function queue
 80019c0:	f000 f9c4 	bl	8001d4c <F1_QueueIni>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 80019c4:	2214      	movs	r2, #20
 80019c6:	495d      	ldr	r1, [pc, #372]	; (8001b3c <main+0x1ac>)
 80019c8:	485d      	ldr	r0, [pc, #372]	; (8001b40 <main+0x1b0>)
 80019ca:	f009 ffca 	bl	800b962 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <main+0x1b4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <main+0x1b4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0204 	bic.w	r2, r2, #4
 80019dc:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f004 f91c 	bl	8005c24 <HAL_GPIO_WritePin>
 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
//  HAL_Delay(300);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  HAL_TIM_Base_Start_IT(&htim16);
 80019ec:	4856      	ldr	r0, [pc, #344]	; (8001b48 <main+0x1b8>)
 80019ee:	f007 fb03 	bl	8008ff8 <HAL_TIM_Base_Start_IT>


  while (1)
  {

	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80019f2:	f107 020b 	add.w	r2, r7, #11
 80019f6:	2364      	movs	r3, #100	; 0x64
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	2188      	movs	r1, #136	; 0x88
 80019fe:	4853      	ldr	r0, [pc, #332]	; (8001b4c <main+0x1bc>)
 8001a00:	f004 f9d0 	bl	8005da4 <HAL_I2C_Master_Transmit>

	/* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001a04:	f00a f880 	bl	800bb08 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */



    if(PM_measure_flag){
 8001a08:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <main+0x1c0>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01b      	beq.n	8001a48 <main+0xb8>
       UART2_SET = 0;
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <main+0x1a8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
       HAL_UARTEx_ReceiveToIdle_DMA(&huart2, aRXBufferUser, RX_BUFFER_SIZE);
 8001a16:	2214      	movs	r2, #20
 8001a18:	4948      	ldr	r1, [pc, #288]	; (8001b3c <main+0x1ac>)
 8001a1a:	4849      	ldr	r0, [pc, #292]	; (8001b40 <main+0x1b0>)
 8001a1c:	f009 ffa1 	bl	800b962 <HAL_UARTEx_ReceiveToIdle_DMA>
	   __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001a20:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <main+0x1b4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <main+0x1b4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0204 	bic.w	r2, r2, #4
 8001a2e:	601a      	str	r2, [r3, #0]
	   PM2_5 = mainBuffer[6]*256+mainBuffer[7];
 8001a30:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <main+0x1c4>)
 8001a32:	799b      	ldrb	r3, [r3, #6]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <main+0x1c4>)
 8001a3c:	79db      	ldrb	r3, [r3, #7]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <main+0x1c8>)
 8001a46:	801a      	strh	r2, [r3, #0]

      }
    F1_pull()();
 8001a48:	f000 f9c4 	bl	8001dd4 <F1_pull>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4798      	blx	r3


    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8001a50:	1d3a      	adds	r2, r7, #4
 8001a52:	2364      	movs	r3, #100	; 0x64
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2306      	movs	r3, #6
 8001a58:	2188      	movs	r1, #136	; 0x88
 8001a5a:	483c      	ldr	r0, [pc, #240]	; (8001b4c <main+0x1bc>)
 8001a5c:	f004 fa96 	bl	8005f8c <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	797b      	ldrb	r3, [r7, #5]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	81fb      	strh	r3, [r7, #14]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	7a3b      	ldrb	r3, [r7, #8]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	81bb      	strh	r3, [r7, #12]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f904 	bl	8000c90 <__aeabi_ui2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fce0 	bl	8000450 <__aeabi_f2d>
 8001a90:	a325      	add	r3, pc, #148	; (adr r3, 8001b28 <main+0x198>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fd33 	bl	8000500 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	a323      	add	r3, pc, #140	; (adr r3, 8001b30 <main+0x1a0>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fe54 	bl	8000754 <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <main+0x1cc>)
 8001aba:	f7fe fb69 	bl	8000190 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ffdd 	bl	8000a84 <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <main+0x1d0>)
 8001ace:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001ad0:	89bb      	ldrh	r3, [r7, #12]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f8dc 	bl	8000c90 <__aeabi_ui2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fcb8 	bl	8000450 <__aeabi_f2d>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <main+0x1d4>)
 8001ae6:	f7fe fd0b 	bl	8000500 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	a30f      	add	r3, pc, #60	; (adr r3, 8001b30 <main+0x1a0>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fe2c 	bl	8000754 <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <main+0x1d8>)
 8001b0a:	f7fe fb41 	bl	8000190 <__aeabi_dsub>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7fe ffb5 	bl	8000a84 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <main+0x1dc>)
 8001b1e:	6013      	str	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001b20:	e767      	b.n	80019f2 <main+0x62>
 8001b22:	bf00      	nop
 8001b24:	f3af 8000 	nop.w
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	4065e000 	.word	0x4065e000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40efffe0 	.word	0x40efffe0
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000650 	.word	0x20000650
 8001b40:	20000850 	.word	0x20000850
 8001b44:	200009a0 	.word	0x200009a0
 8001b48:	20000720 	.word	0x20000720
 8001b4c:	20000604 	.word	0x20000604
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000664 	.word	0x20000664
 8001b58:	20000678 	.word	0x20000678
 8001b5c:	40468000 	.word	0x40468000
 8001b60:	2000067c 	.word	0x2000067c
 8001b64:	405f4000 	.word	0x405f4000
 8001b68:	40180000 	.word	0x40180000
 8001b6c:	20000680 	.word	0x20000680

08001b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09a      	sub	sp, #104	; 0x68
 8001b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	2248      	movs	r2, #72	; 0x48
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f01b f930 	bl	801cde4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b96:	f004 fdfb 	bl	8006790 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fee2 	bl	8001964 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <SystemClock_Config+0xac>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <SystemClock_Config+0xac>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <SystemClock_Config+0xac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001bc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bc6:	2381      	movs	r3, #129	; 0x81
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 f926 	bl	8006e28 <HAL_RCC_OscConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001be2:	f000 f8a7 	bl	8001d34 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001be6:	234f      	movs	r3, #79	; 0x4f
 8001be8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001bea:	2302      	movs	r3, #2
 8001bec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fcab 	bl	8007560 <HAL_RCC_ClockConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001c10:	f000 f890 	bl	8001d34 <Error_Handler>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3768      	adds	r7, #104	; 0x68
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	58000400 	.word	0x58000400

08001c20 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_UARTEx_RxEventCallback+0x40>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d110      	bne.n	8001c58 <HAL_UARTEx_RxEventCallback+0x38>
	{
		if(aRXBufferUser[0]=='B'&& aRXBufferUser[1]=='M'){
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_UARTEx_RxEventCallback+0x44>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b42      	cmp	r3, #66	; 0x42
 8001c3c:	d109      	bne.n	8001c52 <HAL_UARTEx_RxEventCallback+0x32>
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_UARTEx_RxEventCallback+0x44>)
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	2b4d      	cmp	r3, #77	; 0x4d
 8001c44:	d105      	bne.n	8001c52 <HAL_UARTEx_RxEventCallback+0x32>
		memcpy(mainBuffer,aRXBufferUser,Size);
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4906      	ldr	r1, [pc, #24]	; (8001c64 <HAL_UARTEx_RxEventCallback+0x44>)
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_UARTEx_RxEventCallback+0x48>)
 8001c4e:	f01b f8bb 	bl	801cdc8 <memcpy>


		}
		UART2_SET =1;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_UARTEx_RxEventCallback+0x4c>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]

	}
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40004400 	.word	0x40004400
 8001c64:	20000650 	.word	0x20000650
 8001c68:	20000664 	.word	0x20000664
 8001c6c:	20000008 	.word	0x20000008

08001c70 <EnablePM_sens>:

void EnablePM_sens(void){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7e:	f003 ffd1 	bl	8005c24 <HAL_GPIO_WritePin>

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <DisablePM_sens>:

void DisablePM_sens(void){
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c94:	f003 ffc6 	bl	8005c24 <HAL_GPIO_WritePin>


}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

   if (htim == &htim16)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d133      	bne.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0x78>
   {
	  HAL_ResumeTick();
 8001cac:	f001 fce2 	bl	8003674 <HAL_ResumeTick>
      counter++;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cb8:	6013      	str	r3, [r2, #0]
      switch(counter){
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001cc2:	d011      	beq.n	8001ce8 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8001cc4:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001cc8:	dc14      	bgt.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001cca:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8001cce:	d003      	beq.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001cd0:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001cd4:	d004      	beq.n	8001ce0 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001cd6:	e00d      	b.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x58>
      case 820:
    	  F1_push(EnablePM_sens);
 8001cd8:	4812      	ldr	r0, [pc, #72]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cda:	f000 f847 	bl	8001d6c <F1_push>
    	  break;
 8001cde:	e009      	b.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x58>
      case 840:
    	  PM_measure_flag = 1;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
    	  break;
 8001ce6:	e005      	b.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x58>
      case 860:
    	  F1_push(DisablePM_sens);
 8001ce8:	4810      	ldr	r0, [pc, #64]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001cea:	f000 f83f 	bl	8001d6c <F1_push>
    	  PM_measure_flag = 0;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
      }

      counter %= 900;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfe:	441a      	add	r2, r3
 8001d00:	1251      	asrs	r1, r2, #9
 8001d02:	17da      	asrs	r2, r3, #31
 8001d04:	1a8a      	subs	r2, r1, r2
 8001d06:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001d0a:	fb01 f202 	mul.w	r2, r1, r2
 8001d0e:	1a9a      	subs	r2, r3, r2
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001d12:	601a      	str	r2, [r3, #0]

   //   __HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE);
  //    __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
   }
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000720 	.word	0x20000720
 8001d20:	20000684 	.word	0x20000684
 8001d24:	08001c71 	.word	0x08001c71
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	08001c87 	.word	0x08001c87
 8001d30:	91a2b3c5 	.word	0x91a2b3c5

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>

08001d3e <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  F1_last = 0;
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <F1_QueueIni+0x18>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <F1_QueueIni+0x1c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000688 	.word	0x20000688
 8001d68:	2000068c 	.word	0x2000068c

08001d6c <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <F1_push+0x5c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	f002 020f 	and.w	r2, r2, #15
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <F1_push+0x60>)
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <F1_push+0x28>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e014      	b.n	8001dbe <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <F1_push+0x5c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	490b      	ldr	r1, [pc, #44]	; (8001dc8 <F1_push+0x5c>)
 8001d9c:	600a      	str	r2, [r1, #0]
 8001d9e:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <F1_push+0x64>)
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <F1_push+0x5c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	f002 020f 	and.w	r2, r2, #15
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <F1_push+0x5c>)
 8001dba:	6013      	str	r3, [r2, #0]
  return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000688 	.word	0x20000688
 8001dcc:	2000068c 	.word	0x2000068c
 8001dd0:	20000690 	.word	0x20000690

08001dd4 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <F1_pull+0x4c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <F1_pull+0x50>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d101      	bne.n	8001dea <F1_pull+0x16>
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <F1_pull+0x54>)
 8001de8:	e014      	b.n	8001e14 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <F1_pull+0x50>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <F1_pull+0x50>)
 8001df2:	600a      	str	r2, [r1, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <F1_pull+0x58>)
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <F1_pull+0x50>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	425a      	negs	r2, r3
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	f002 020f 	and.w	r2, r2, #15
 8001e0a:	bf58      	it	pl
 8001e0c:	4253      	negpl	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <F1_pull+0x50>)
 8001e10:	6013      	str	r3, [r2, #0]
  return pullVar;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000688 	.word	0x20000688
 8001e24:	2000068c 	.word	0x2000068c
 8001e28:	08001d3f 	.word	0x08001d3f
 8001e2c:	20000690 	.word	0x20000690

08001e30 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <LL_APB1_GRP1_EnableClock>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e74:	68fb      	ldr	r3, [r7, #12]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	222c      	movs	r2, #44	; 0x2c
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f01a ffa9 	bl	801cde4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <MX_RTC_Init+0xa0>)
 8001e96:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec6:	4815      	ldr	r0, [pc, #84]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001ec8:	f006 f806 	bl	8007ed8 <HAL_RTC_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001ed2:	f7ff ff2f 	bl	8001d34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001ed6:	4811      	ldr	r0, [pc, #68]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001ed8:	f006 faf4 	bl	80084c4 <HAL_RTCEx_SetSSRU_IT>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001ee2:	f7ff ff27 	bl	8001d34 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ef2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ef6:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_RTC_Init+0x9c>)
 8001f06:	f006 f861 	bl	8007fcc <HAL_RTC_SetAlarm_IT>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001f10:	f7ff ff10 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	; 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200006d0 	.word	0x200006d0
 8001f20:	40002800 	.word	0x40002800

08001f24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b090      	sub	sp, #64	; 0x40
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	2238      	movs	r2, #56	; 0x38
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f01a ff55 	bl	801cde4 <memset>
  if(rtcHandle->Instance==RTC)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <HAL_RTC_MspInit+0x74>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d125      	bne.n	8001f90 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f48:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 fea5 	bl	8007ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f60:	f7ff fee8 	bl	8001d34 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f64:	f7ff ff64 	bl	8001e30 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f6c:	f7ff ff70 	bl	8001e50 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2002      	movs	r0, #2
 8001f76:	f002 fd12 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	f002 fd29 	bl	80049d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	202a      	movs	r0, #42	; 0x2a
 8001f86:	f002 fd0a 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001f8a:	202a      	movs	r0, #42	; 0x2a
 8001f8c:	f002 fd21 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f90:	bf00      	nop
 8001f92:	3740      	adds	r7, #64	; 0x40
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40002800 	.word	0x40002800

08001f9c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	58000400 	.word	0x58000400

08001fb4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001fd0:	f001 fb42 	bl	8003658 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001fd4:	f7ff ffe2 	bl	8001f9c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f004 fc6b 	bl	80068b4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001fe6:	f001 fb45 	bl	8003674 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001fea:	f001 f9b3 	bl	8003354 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001ff6:	f001 fb2f 	bl	8003658 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f004 fbd5 	bl	80067ac <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800200a:	f001 fb33 	bl	8003674 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <HardFault_Handler+0x4>

0800202a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <BusFault_Handler+0x4>

08002036 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <UsageFault_Handler+0x4>

0800203c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002072:	f006 fa63 	bl	800853c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200006d0 	.word	0x200006d0

08002080 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <DMA1_Channel1_IRQHandler+0x10>)
 8002086:	f002 ff3b 	bl	8004f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200008e0 	.word	0x200008e0

08002094 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <DMA1_Channel2_IRQHandler+0x10>)
 800209a:	f002 ff31 	bl	8004f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000940 	.word	0x20000940

080020a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Channel3_IRQHandler+0x10>)
 80020ae:	f002 ff27 	bl	8004f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200009a0 	.word	0x200009a0

080020bc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <TIM16_IRQHandler+0x18>)
 80020c2:	f006 ffe5 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <TIM16_IRQHandler+0x1c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a02      	ldr	r2, [pc, #8]	; (80020d8 <TIM16_IRQHandler+0x1c>)
 80020ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000720 	.word	0x20000720
 80020d8:	20000708 	.word	0x20000708

080020dc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <TIM17_IRQHandler+0x18>)
 80020e2:	f006 ffd5 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <TIM17_IRQHandler+0x1c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a02      	ldr	r2, [pc, #8]	; (80020f8 <TIM17_IRQHandler+0x1c>)
 80020ee:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000076c 	.word	0x2000076c
 80020f8:	2000070c 	.word	0x2000070c

080020fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <USART1_IRQHandler+0x10>)
 8002102:	f007 fadf 	bl	80096c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200007c0 	.word	0x200007c0

08002110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <USART2_IRQHandler+0x10>)
 8002116:	f007 fad5 	bl	80096c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000850 	.word	0x20000850

08002124 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8002128:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800212c:	f003 fd92 	bl	8005c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <RTC_Alarm_IRQHandler+0x10>)
 800213a:	f006 f8af 	bl	800829c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200006d0 	.word	0x200006d0

08002148 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <SUBGHZ_Radio_IRQHandler+0x10>)
 800214e:	f006 fd5d 	bl	8008c0c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000710 	.word	0x20000710

0800215c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <DMAMUX1_OVR_IRQHandler+0x10>)
 8002162:	f003 f87d 	bl	8005260 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000940 	.word	0x20000940

08002170 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800217e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_SUBGHZ_Init+0x20>)
 80021a6:	2208      	movs	r2, #8
 80021a8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_SUBGHZ_Init+0x20>)
 80021ac:	f006 fab2 	bl	8008714 <HAL_SUBGHZ_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80021b6:	f7ff fdbd 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000710 	.word	0x20000710

080021c4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff ffcf 	bl	8002170 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2032      	movs	r0, #50	; 0x32
 80021d8:	f002 fbe1 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80021dc:	2032      	movs	r0, #50	; 0x32
 80021de:	f002 fbf8 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <LL_RCC_SetClkAfterWakeFromStop>:
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002214:	4b02      	ldr	r3, [pc, #8]	; (8002220 <LL_FLASH_GetUDN+0x10>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	1fff7580 	.word	0x1fff7580

08002224 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <LL_FLASH_GetDeviceID+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b2db      	uxtb	r3, r3
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	1fff7584 	.word	0x1fff7584

0800223c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <LL_FLASH_GetSTCompanyID+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0a1b      	lsrs	r3, r3, #8
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	1fff7584 	.word	0x1fff7584

08002254 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff ffc6 	bl	80021ea <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800225e:	f01a f859 	bl	801c314 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <SystemApp_Init+0x50>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002268:	f000 f9a0 	bl	80025ac <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800226c:	f01a fae2 	bl	801c834 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <SystemApp_Init+0x54>)
 8002272:	f01a fb8d 	bl	801c990 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <SystemApp_Init+0x58>)
 8002278:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800227c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800227e:	2002      	movs	r0, #2
 8002280:	f01a fb94 	bl	801c9ac <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002284:	f7fe ffa4 	bl	80011d0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002288:	f000 fa1a 	bl	80026c0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800228c:	f019 fa0a 	bl	801b6a4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002290:	2101      	movs	r1, #1
 8002292:	2001      	movs	r0, #1
 8002294:	f019 fa46 	bl	801b724 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002298:	2101      	movs	r1, #1
 800229a:	2001      	movs	r0, #1
 800229c:	f019 fa12 	bl	801b6c4 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000071c 	.word	0x2000071c
 80022a8:	08002475 	.word	0x08002475
 80022ac:	58004000 	.word	0x58004000

080022b0 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80022b4:	f019 fa66 	bl	801b784 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80022c6:	f7fe ff91 	bl	80011ec <SYS_GetBatteryLevel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80022ce:	88bb      	ldrh	r3, [r7, #4]
 80022d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d902      	bls.n	80022de <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80022d8:	23fe      	movs	r3, #254	; 0xfe
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	e014      	b.n	8002308 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80022de:	88bb      	ldrh	r3, [r7, #4]
 80022e0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80022e4:	d202      	bcs.n	80022ec <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e00d      	b.n	8002308 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80022ec:	88bb      	ldrh	r3, [r7, #4]
 80022ee:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80022f2:	461a      	mov	r2, r3
 80022f4:	4613      	mov	r3, r2
 80022f6:	01db      	lsls	r3, r3, #7
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <GetBatteryLevel+0x58>)
 8002300:	fba3 2302 	umull	r2, r3, r3, r2
 8002304:	09db      	lsrs	r3, r3, #7
 8002306:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002308:	79fb      	ldrb	r3, [r7, #7]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	1b4e81b5 	.word	0x1b4e81b5

08002318 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f9a1 	bl	800266c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fd07 	bl	8000d40 <__aeabi_f2iz>
 8002332:	4603      	mov	r3, r0
 8002334:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002336:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002342:	b590      	push	{r4, r7, lr}
 8002344:	b087      	sub	sp, #28
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800234e:	f7ff ff5f 	bl	8002210 <LL_FLASH_GetUDN>
 8002352:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d138      	bne.n	80023ce <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800235c:	f001 f998 	bl	8003690 <HAL_GetUIDw0>
 8002360:	4604      	mov	r4, r0
 8002362:	f001 f9a9 	bl	80036b8 <HAL_GetUIDw2>
 8002366:	4603      	mov	r3, r0
 8002368:	4423      	add	r3, r4
 800236a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800236c:	f001 f99a 	bl	80036a4 <HAL_GetUIDw1>
 8002370:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	0e1a      	lsrs	r2, r3, #24
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3307      	adds	r3, #7
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	0c1a      	lsrs	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3306      	adds	r3, #6
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	0a1a      	lsrs	r2, r3, #8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3305      	adds	r3, #5
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	0e1a      	lsrs	r2, r3, #24
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3303      	adds	r3, #3
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	0c1a      	lsrs	r2, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3302      	adds	r3, #2
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	0a1a      	lsrs	r2, r3, #8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3301      	adds	r3, #1
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80023cc:	e031      	b.n	8002432 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3307      	adds	r3, #7
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	0a1a      	lsrs	r2, r3, #8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3306      	adds	r3, #6
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	0c1a      	lsrs	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3305      	adds	r3, #5
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	0e1a      	lsrs	r2, r3, #24
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80023fc:	f7ff ff12 	bl	8002224 <LL_FLASH_GetDeviceID>
 8002400:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3303      	adds	r3, #3
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 800240c:	f7ff ff16 	bl	800223c <LL_FLASH_GetSTCompanyID>
 8002410:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3302      	adds	r3, #2
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	0a1a      	lsrs	r2, r3, #8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	b2da      	uxtb	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	701a      	strb	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}

0800243a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800243a:	b590      	push	{r4, r7, lr}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002444:	f7ff fee4 	bl	8002210 <LL_FLASH_GetUDN>
 8002448:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d10b      	bne.n	800246a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002452:	f001 f91d 	bl	8003690 <HAL_GetUIDw0>
 8002456:	4604      	mov	r4, r0
 8002458:	f001 f924 	bl	80036a4 <HAL_GetUIDw1>
 800245c:	4603      	mov	r3, r0
 800245e:	405c      	eors	r4, r3
 8002460:	f001 f92a 	bl	80036b8 <HAL_GetUIDw2>
 8002464:	4603      	mov	r3, r0
 8002466:	4063      	eors	r3, r4
 8002468:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800246a:	687b      	ldr	r3, [r7, #4]

}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bd90      	pop	{r4, r7, pc}

08002474 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	4618      	mov	r0, r3
 8002484:	f019 fa8e 	bl	801b9a4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800248e:	9200      	str	r2, [sp, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <TimestampNow+0x3c>)
 8002492:	2110      	movs	r1, #16
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f81d 	bl	80024d4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fd fe6c 	bl	8000178 <strlen>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	0801cfe0 	.word	0x0801cfe0

080024b4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80024b8:	2101      	movs	r1, #1
 80024ba:	2002      	movs	r0, #2
 80024bc:	f019 f902 	bl	801b6c4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80024c8:	2100      	movs	r1, #0
 80024ca:	2002      	movs	r0, #2
 80024cc:	f019 f8fa 	bl	801b6c4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80024d4:	b40c      	push	{r2, r3}
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f019 fc2b 	bl	801bd48 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024fc:	b002      	add	sp, #8
 80024fe:	4770      	bx	lr

08002500 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_GetTick+0x24>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002526:	f000 fa47 	bl	80029b8 <TIMER_IF_GetTimerValue>
 800252a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800252c:	687b      	ldr	r3, [r7, #4]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000071c 	.word	0x2000071c

0800253c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fabd 	bl	8002ac6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <LL_AHB2_GRP1_EnableClock>:
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4313      	orrs	r3, r2
 800256a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002578:	68fb      	ldr	r3, [r7, #12]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <LL_EXTI_EnableIT_32_63+0x24>)
 800258e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002592:	4905      	ldr	r1, [pc, #20]	; (80025a8 <LL_EXTI_EnableIT_32_63+0x24>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	58000800 	.word	0x58000800

080025ac <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80025b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025b6:	f7ff ffe5 	bl	8002584 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80025ba:	f001 f887 	bl	80036cc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80025be:	f001 f88b 	bl	80036d8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80025c2:	f001 f88f 	bl	80036e4 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7ff ffb7 	bl	8002554 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80025e6:	2002      	movs	r0, #2
 80025e8:	f7ff ffb4 	bl	8002554 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80025ec:	2002      	movs	r0, #2
 80025ee:	f7ff ffb1 	bl	8002554 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80025f2:	2002      	movs	r0, #2
 80025f4:	f7ff ffae 	bl	8002554 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80025f8:	2301      	movs	r3, #1
 80025fa:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	4619      	mov	r1, r3
 8002600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002604:	f003 f8e0 	bl	80057c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4815      	ldr	r0, [pc, #84]	; (8002668 <DBG_Init+0xbc>)
 8002614:	f003 f8d8 	bl	80057c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002618:	2308      	movs	r3, #8
 800261a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4811      	ldr	r0, [pc, #68]	; (8002668 <DBG_Init+0xbc>)
 8002622:	f003 f8d1 	bl	80057c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002626:	2310      	movs	r3, #16
 8002628:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	4619      	mov	r1, r3
 800262e:	480e      	ldr	r0, [pc, #56]	; (8002668 <DBG_Init+0xbc>)
 8002630:	f003 f8ca 	bl	80057c8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	2101      	movs	r1, #1
 8002638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263c:	f003 faf2 	bl	8005c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002646:	4808      	ldr	r0, [pc, #32]	; (8002668 <DBG_Init+0xbc>)
 8002648:	f003 faec 	bl	8005c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	2108      	movs	r1, #8
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <DBG_Init+0xbc>)
 8002652:	f003 fae7 	bl	8005c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	2110      	movs	r1, #16
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <DBG_Init+0xbc>)
 800265c:	f003 fae2 	bl	8005c24 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	48000400 	.word	0x48000400

0800266c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <EnvSensors_Read+0x40>)
 8002676:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <EnvSensors_Read+0x44>)
 800267a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <EnvSensors_Read+0x48>)
 800267e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <EnvSensors_Read+0x4c>)
 8002696:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <EnvSensors_Read+0x50>)
 800269c:	611a      	str	r2, [r3, #16]

  return 0;
 800269e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	42480000 	.word	0x42480000
 80026b0:	41900000 	.word	0x41900000
 80026b4:	447a0000 	.word	0x447a0000
 80026b8:	003e090d 	.word	0x003e090d
 80026bc:	000503ab 	.word	0x000503ab

080026c0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80026ca:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_APB2_GRP1_EnableClock>:
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
	...

08002714 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002718:	4b16      	ldr	r3, [pc, #88]	; (8002774 <MX_TIM16_Init+0x60>)
 800271a:	4a17      	ldr	r2, [pc, #92]	; (8002778 <MX_TIM16_Init+0x64>)
 800271c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <MX_TIM16_Init+0x60>)
 8002720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002724:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <MX_TIM16_Init+0x60>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_TIM16_Init+0x60>)
 800272e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002732:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_TIM16_Init+0x60>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_TIM16_Init+0x60>)
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_TIM16_Init+0x60>)
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002746:	480b      	ldr	r0, [pc, #44]	; (8002774 <MX_TIM16_Init+0x60>)
 8002748:	f006 fbfe 	bl	8008f48 <HAL_TIM_Base_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002752:	f7ff faef 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002756:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800275a:	f7ff ffc2 	bl	80026e2 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	201c      	movs	r0, #28
 8002764:	f002 f91b 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002768:	201c      	movs	r0, #28
 800276a:	f002 f932 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000720 	.word	0x20000720
 8002778:	40014400 	.word	0x40014400

0800277c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <MX_TIM17_Init+0x5c>)
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <MX_TIM17_Init+0x60>)
 8002784:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_TIM17_Init+0x5c>)
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <MX_TIM17_Init+0x5c>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_TIM17_Init+0x5c>)
 8002794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002798:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_TIM17_Init+0x5c>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <MX_TIM17_Init+0x5c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_TIM17_Init+0x5c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80027ac:	480a      	ldr	r0, [pc, #40]	; (80027d8 <MX_TIM17_Init+0x5c>)
 80027ae:	f006 fbcb 	bl	8008f48 <HAL_TIM_Base_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80027b8:	f7ff fabc 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80027bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80027c0:	f7ff ff8f 	bl	80026e2 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	201d      	movs	r0, #29
 80027ca:	f002 f8e8 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80027ce:	201d      	movs	r0, #29
 80027d0:	f002 f8ff 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000076c 	.word	0x2000076c
 80027dc:	40014800 	.word	0x40014800

080027e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a12      	ldr	r2, [pc, #72]	; (8002838 <HAL_TIM_Base_MspInit+0x58>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10c      	bne.n	800280c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027f6:	f7ff ff74 	bl	80026e2 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	201c      	movs	r0, #28
 8002800:	f002 f8cd 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002804:	201c      	movs	r0, #28
 8002806:	f002 f8e4 	bl	80049d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800280a:	e010      	b.n	800282e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_TIM_Base_MspInit+0x5c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10b      	bne.n	800282e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002816:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800281a:	f7ff ff62 	bl	80026e2 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	201d      	movs	r0, #29
 8002824:	f002 f8bb 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002828:	201d      	movs	r0, #29
 800282a:	f002 f8d2 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800

08002840 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
	...

08002858 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <TIMER_IF_Init+0x5c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002878:	f7ff fb02 	bl	8001e80 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800287c:	f000 f856 	bl	800292c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002886:	f005 fcad 	bl	80081e4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <TIMER_IF_Init+0x60>)
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002894:	f005 fde4 	bl	8008460 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002898:	2000      	movs	r0, #0
 800289a:	f000 f9d3 	bl	8002c44 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800289e:	f000 f85f 	bl	8002960 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <TIMER_IF_Init+0x5c>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80028a8:	79fb      	ldrb	r3, [r7, #7]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200007b8 	.word	0x200007b8
 80028b8:	200006d0 	.word	0x200006d0

080028bc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	222c      	movs	r2, #44	; 0x2c
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f01a fa86 	bl	801cde4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80028d8:	f000 f828 	bl	800292c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <TIMER_IF_StartTimer+0x68>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80028f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028f8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80028fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002900:	f107 0308 	add.w	r3, r7, #8
 8002904:	2201      	movs	r2, #1
 8002906:	4619      	mov	r1, r3
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <TIMER_IF_StartTimer+0x6c>)
 800290a:	f005 fb5f 	bl	8007fcc <HAL_RTC_SetAlarm_IT>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002914:	f7ff fa0e 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800291c:	4618      	mov	r0, r3
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200007bc 	.word	0x200007bc
 8002928:	200006d0 	.word	0x200006d0

0800292c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <TIMER_IF_StopTimer+0x2c>)
 8002938:	2201      	movs	r2, #1
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800293c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002940:	4806      	ldr	r0, [pc, #24]	; (800295c <TIMER_IF_StopTimer+0x30>)
 8002942:	f005 fc4f 	bl	80081e4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <TIMER_IF_StopTimer+0x30>)
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800294e:	79fb      	ldrb	r3, [r7, #7]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40002800 	.word	0x40002800
 800295c:	200006d0 	.word	0x200006d0

08002960 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002964:	f000 f98e 	bl	8002c84 <GetTimerTicks>
 8002968:	4603      	mov	r3, r0
 800296a:	4a03      	ldr	r2, [pc, #12]	; (8002978 <TIMER_IF_SetTimerContext+0x18>)
 800296c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800296e:	4b02      	ldr	r3, [pc, #8]	; (8002978 <TIMER_IF_SetTimerContext+0x18>)
 8002970:	681b      	ldr	r3, [r3, #0]
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200007bc 	.word	0x200007bc

0800297c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <TIMER_IF_GetTimerContext+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	200007bc 	.word	0x200007bc

08002990 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800299a:	f000 f973 	bl	8002c84 <GetTimerTicks>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80029a8:	687b      	ldr	r3, [r7, #4]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200007bc 	.word	0x200007bc

080029b8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <TIMER_IF_GetTimerValue+0x24>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80029ca:	f000 f95b 	bl	8002c84 <GetTimerTicks>
 80029ce:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200007b8 	.word	0x200007b8

080029e0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80029ea:	2303      	movs	r3, #3
 80029ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80029fa:	b5b0      	push	{r4, r5, r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a02:	2100      	movs	r1, #0
 8002a04:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	2000      	movs	r0, #0
 8002a0a:	460a      	mov	r2, r1
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	0d95      	lsrs	r5, r2, #22
 8002a10:	0294      	lsls	r4, r2, #10
 8002a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f7fe f9b5 	bl	8000d8c <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4613      	mov	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bdb0      	pop	{r4, r5, r7, pc}

08002a34 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002a34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a3e:	2100      	movs	r1, #0
 8002a40:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	2000      	movs	r0, #0
 8002a46:	460c      	mov	r4, r1
 8002a48:	4605      	mov	r5, r0
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f04f 0a00 	mov.w	sl, #0
 8002a52:	f04f 0b00 	mov.w	fp, #0
 8002a56:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a5a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a5e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a62:	4650      	mov	r0, sl
 8002a64:	4659      	mov	r1, fp
 8002a66:	1b02      	subs	r2, r0, r4
 8002a68:	eb61 0305 	sbc.w	r3, r1, r5
 8002a6c:	f04f 0000 	mov.w	r0, #0
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	0099      	lsls	r1, r3, #2
 8002a76:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a7a:	0090      	lsls	r0, r2, #2
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	eb12 0804 	adds.w	r8, r2, r4
 8002a84:	eb43 0905 	adc.w	r9, r3, r5
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9c:	4690      	mov	r8, r2
 8002a9e:	4699      	mov	r9, r3
 8002aa0:	4640      	mov	r0, r8
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	0a82      	lsrs	r2, r0, #10
 8002aae:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ab2:	0a8b      	lsrs	r3, r1, #10
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ac4:	4770      	bx	lr

08002ac6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff93 	bl	80029fa <TIMER_IF_Convert_ms2Tick>
 8002ad4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ad6:	f000 f8d5 	bl	8002c84 <GetTimerTicks>
 8002ada:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002adc:	e000      	b.n	8002ae0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002ade:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ae0:	f000 f8d0 	bl	8002c84 <GetTimerTicks>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f6      	bhi.n	8002ade <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b02:	f019 fd55 	bl	801c5b0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002b16:	f000 f8a5 	bl	8002c64 <TIMER_IF_BkUp_Read_MSBticks>
 8002b1a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f88f 	bl	8002c44 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002b2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002b3c:	f000 f8a2 	bl	8002c84 <GetTimerTicks>
 8002b40:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002b42:	f000 f88f 	bl	8002c64 <TIMER_IF_BkUp_Read_MSBticks>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	000b      	movs	r3, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b60:	2000      	movs	r0, #0
 8002b62:	460c      	mov	r4, r1
 8002b64:	4605      	mov	r5, r0
 8002b66:	eb12 0804 	adds.w	r8, r2, r4
 8002b6a:	eb43 0905 	adc.w	r9, r3, r5
 8002b6e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	0a82      	lsrs	r2, r0, #10
 8002b80:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b84:	0a8b      	lsrs	r3, r1, #10
 8002b86:	4613      	mov	r3, r2
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002b98:	f04f 0b00 	mov.w	fp, #0
 8002b9c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff46 	bl	8002a34 <TIMER_IF_Convert_Tick2ms>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bbc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002bca:	f005 fcdb 	bl	8008584 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200006d0 	.word	0x200006d0

08002bdc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	2101      	movs	r1, #1
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002bea:	f005 fccb 	bl	8008584 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200006d0 	.word	0x200006d0

08002bfc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c06:	2100      	movs	r1, #0
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002c0a:	f005 fcd3 	bl	80085b4 <HAL_RTCEx_BKUPRead>
 8002c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200006d0 	.word	0x200006d0

08002c20 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002c2e:	f005 fcc1 	bl	80085b4 <HAL_RTCEx_BKUPRead>
 8002c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200006d0 	.word	0x200006d0

08002c44 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4803      	ldr	r0, [pc, #12]	; (8002c60 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002c52:	f005 fc97 	bl	8008584 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200006d0 	.word	0x200006d0

08002c64 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002c6e:	f005 fca1 	bl	80085b4 <HAL_RTCEx_BKUPRead>
 8002c72:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002c74:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200006d0 	.word	0x200006d0

08002c84 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c8a:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c8c:	f7ff fdd8 	bl	8002840 <LL_RTC_TIME_GetSubSecond>
 8002c90:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c92:	e003      	b.n	8002c9c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c96:	f7ff fdd3 	bl	8002840 <LL_RTC_TIME_GetSubSecond>
 8002c9a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c9c:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c9e:	f7ff fdcf 	bl	8002840 <LL_RTC_TIME_GetSubSecond>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d1f4      	bne.n	8002c94 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40002800 	.word	0x40002800

08002cbc <LL_AHB2_GRP1_EnableClock>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <LL_APB1_GRP1_EnableClock>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d10:	68fb      	ldr	r3, [r7, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_APB1_GRP1_DisableClock>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d32:	4013      	ands	r3, r2
 8002d34:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <LL_APB2_GRP1_EnableClock>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d64:	68fb      	ldr	r3, [r7, #12]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <LL_APB2_GRP1_DisableClock>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d86:	4013      	ands	r3, r2
 8002d88:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <LL_SYSCFG_EnableFastModePlus>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4904      	ldr	r1, [pc, #16]	; (8002db4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000

08002db8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dbe:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <MX_USART1_UART_Init+0xa4>)
 8002dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dc2:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dde:	220c      	movs	r2, #12
 8002de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002dfc:	2240      	movs	r2, #64	; 0x40
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8002e00:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002e02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e0e:	4812      	ldr	r0, [pc, #72]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002e10:	f006 fb20 	bl	8009454 <HAL_UART_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8002e1a:	f7fe ff8b 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e1e:	2100      	movs	r1, #0
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002e22:	f008 fd22 	bl	800b86a <HAL_UARTEx_SetTxFifoThreshold>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8002e2c:	f7fe ff82 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e30:	2100      	movs	r1, #0
 8002e32:	4809      	ldr	r0, [pc, #36]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002e34:	f008 fd57 	bl	800b8e6 <HAL_UARTEx_SetRxFifoThreshold>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002e3e:	f7fe ff79 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_USART1_UART_Init+0xa0>)
 8002e44:	f008 fc9e 	bl	800b784 <HAL_UARTEx_EnableFifoMode>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8002e4e:	f7fe ff71 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200007c0 	.word	0x200007c0
 8002e5c:	40013800 	.word	0x40013800

08002e60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e64:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e66:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <MX_USART2_UART_Init+0x98>)
 8002e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e86:	220c      	movs	r2, #12
 8002e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e96:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eaa:	4812      	ldr	r0, [pc, #72]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002eac:	f006 fad2 	bl	8009454 <HAL_UART_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002eb6:	f7fe ff3d 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ebe:	f008 fcd4 	bl	800b86a <HAL_UARTEx_SetTxFifoThreshold>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002ec8:	f7fe ff34 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4809      	ldr	r0, [pc, #36]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ed0:	f008 fd09 	bl	800b8e6 <HAL_UARTEx_SetRxFifoThreshold>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002eda:	f7fe ff2b 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ede:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ee0:	f008 fc8b 	bl	800b7fa <HAL_UARTEx_DisableFifoMode>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002eea:	f7fe ff23 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000850 	.word	0x20000850
 8002ef8:	40004400 	.word	0x40004400

08002efc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b09a      	sub	sp, #104	; 0x68
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8002f14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	2238      	movs	r2, #56	; 0x38
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f019 ff5a 	bl	801cde4 <memset>
  if(uartHandle->Instance==USART1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a83      	ldr	r2, [pc, #524]	; (8003144 <HAL_UART_MspInit+0x248>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	f040 80a3 	bne.w	8003082 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f40:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002f44:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 feaa 	bl	8007ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8002f56:	f7fe feed 	bl	8001d34 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f5e:	f7ff feef 	bl	8002d40 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	2002      	movs	r0, #2
 8002f64:	f7ff feaa 	bl	8002cbc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002f68:	23c0      	movs	r3, #192	; 0xc0
 8002f6a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f70:	2301      	movs	r3, #1
 8002f72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f74:	2301      	movs	r3, #1
 8002f76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f78:	2307      	movs	r3, #7
 8002f7a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f80:	4619      	mov	r1, r3
 8002f82:	4871      	ldr	r0, [pc, #452]	; (8003148 <HAL_UART_MspInit+0x24c>)
 8002f84:	f002 fc20 	bl	80057c8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002f88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f8c:	f7ff ff02 	bl	8002d94 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002f90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002f94:	f7ff fefe 	bl	8002d94 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002f98:	4b6c      	ldr	r3, [pc, #432]	; (800314c <HAL_UART_MspInit+0x250>)
 8002f9a:	4a6d      	ldr	r2, [pc, #436]	; (8003150 <HAL_UART_MspInit+0x254>)
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002f9e:	4b6b      	ldr	r3, [pc, #428]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fa0:	2212      	movs	r2, #18
 8002fa2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fa4:	4b69      	ldr	r3, [pc, #420]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002faa:	4b68      	ldr	r3, [pc, #416]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb0:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb6:	4b65      	ldr	r3, [pc, #404]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fbc:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fc2:	4b62      	ldr	r3, [pc, #392]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fc8:	4b60      	ldr	r3, [pc, #384]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fce:	485f      	ldr	r0, [pc, #380]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fd0:	f001 fd1c 	bl	8004a0c <HAL_DMA_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002fda:	f7fe feab 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a5a      	ldr	r2, [pc, #360]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fe2:	679a      	str	r2, [r3, #120]	; 0x78
 8002fe4:	4a59      	ldr	r2, [pc, #356]	; (800314c <HAL_UART_MspInit+0x250>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002fea:	4b5a      	ldr	r3, [pc, #360]	; (8003154 <HAL_UART_MspInit+0x258>)
 8002fec:	4a5a      	ldr	r2, [pc, #360]	; (8003158 <HAL_UART_MspInit+0x25c>)
 8002fee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ff0:	4b58      	ldr	r3, [pc, #352]	; (8003154 <HAL_UART_MspInit+0x258>)
 8002ff2:	2211      	movs	r2, #17
 8002ff4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_UART_MspInit+0x258>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffc:	4b55      	ldr	r3, [pc, #340]	; (8003154 <HAL_UART_MspInit+0x258>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003002:	4b54      	ldr	r3, [pc, #336]	; (8003154 <HAL_UART_MspInit+0x258>)
 8003004:	2280      	movs	r2, #128	; 0x80
 8003006:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003008:	4b52      	ldr	r3, [pc, #328]	; (8003154 <HAL_UART_MspInit+0x258>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800300e:	4b51      	ldr	r3, [pc, #324]	; (8003154 <HAL_UART_MspInit+0x258>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003014:	4b4f      	ldr	r3, [pc, #316]	; (8003154 <HAL_UART_MspInit+0x258>)
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800301a:	4b4e      	ldr	r3, [pc, #312]	; (8003154 <HAL_UART_MspInit+0x258>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003020:	484c      	ldr	r0, [pc, #304]	; (8003154 <HAL_UART_MspInit+0x258>)
 8003022:	f001 fcf3 	bl	8004a0c <HAL_DMA_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 800302c:	f7fe fe82 	bl	8001d34 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003030:	2300      	movs	r3, #0
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003034:	2300      	movs	r3, #0
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 800303e:	2301      	movs	r3, #1
 8003040:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003044:	2301      	movs	r3, #1
 8003046:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800304c:	4619      	mov	r1, r3
 800304e:	4841      	ldr	r0, [pc, #260]	; (8003154 <HAL_UART_MspInit+0x258>)
 8003050:	f002 f8c6 	bl	80051e0 <HAL_DMAEx_ConfigMuxSync>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800305a:	f7fe fe6b 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a3c      	ldr	r2, [pc, #240]	; (8003154 <HAL_UART_MspInit+0x258>)
 8003062:	67da      	str	r2, [r3, #124]	; 0x7c
 8003064:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <HAL_UART_MspInit+0x258>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2102      	movs	r1, #2
 800306e:	2024      	movs	r0, #36	; 0x24
 8003070:	f001 fc95 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003074:	2024      	movs	r0, #36	; 0x24
 8003076:	f001 fcac 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800307a:	200c      	movs	r0, #12
 800307c:	f001 fca9 	bl	80049d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003080:	e05c      	b.n	800313c <HAL_UART_MspInit+0x240>
  else if(uartHandle->Instance==USART2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a35      	ldr	r2, [pc, #212]	; (800315c <HAL_UART_MspInit+0x260>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d157      	bne.n	800313c <HAL_UART_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800308c:	2302      	movs	r3, #2
 800308e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003090:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003094:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003096:	f107 030c 	add.w	r3, r7, #12
 800309a:	4618      	mov	r0, r3
 800309c:	f004 fe02 	bl	8007ca4 <HAL_RCCEx_PeriphCLKConfig>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 80030a6:	f7fe fe45 	bl	8001d34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80030ae:	f7ff fe1d 	bl	8002cec <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7ff fe02 	bl	8002cbc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80030b8:	230c      	movs	r3, #12
 80030ba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80030c4:	2301      	movs	r3, #1
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030c8:	2307      	movs	r3, #7
 80030ca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d6:	f002 fb77 	bl	80057c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_UART_MspInit+0x264>)
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_UART_MspInit+0x268>)
 80030de:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <HAL_UART_MspInit+0x264>)
 80030e2:	2213      	movs	r2, #19
 80030e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030e6:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_UART_MspInit+0x264>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_UART_MspInit+0x264>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_UART_MspInit+0x264>)
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_UART_MspInit+0x264>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_UART_MspInit+0x264>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_UART_MspInit+0x264>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <HAL_UART_MspInit+0x264>)
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003110:	4813      	ldr	r0, [pc, #76]	; (8003160 <HAL_UART_MspInit+0x264>)
 8003112:	f001 fc7b 	bl	8004a0c <HAL_DMA_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_MspInit+0x224>
      Error_Handler();
 800311c:	f7fe fe0a 	bl	8001d34 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_UART_MspInit+0x264>)
 8003124:	67da      	str	r2, [r3, #124]	; 0x7c
 8003126:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <HAL_UART_MspInit+0x264>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	2025      	movs	r0, #37	; 0x25
 8003132:	f001 fc34 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003136:	2025      	movs	r0, #37	; 0x25
 8003138:	f001 fc4b 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 800313c:	bf00      	nop
 800313e:	3768      	adds	r7, #104	; 0x68
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40013800 	.word	0x40013800
 8003148:	48000400 	.word	0x48000400
 800314c:	200008e0 	.word	0x200008e0
 8003150:	40020008 	.word	0x40020008
 8003154:	20000940 	.word	0x20000940
 8003158:	4002001c 	.word	0x4002001c
 800315c:	40004400 	.word	0x40004400
 8003160:	200009a0 	.word	0x200009a0
 8003164:	40020030 	.word	0x40020030

08003168 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_UART_MspDeInit+0x74>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d115      	bne.n	80031a6 <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800317a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800317e:	f7ff fdf7 	bl	8002d70 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003182:	21c0      	movs	r1, #192	; 0xc0
 8003184:	4816      	ldr	r0, [pc, #88]	; (80031e0 <HAL_UART_MspDeInit+0x78>)
 8003186:	f002 fc7f 	bl	8005a88 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318e:	4618      	mov	r0, r3
 8003190:	f001 fce4 	bl	8004b5c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003198:	4618      	mov	r0, r3
 800319a:	f001 fcdf 	bl	8004b5c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800319e:	2024      	movs	r0, #36	; 0x24
 80031a0:	f001 fc25 	bl	80049ee <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80031a4:	e015      	b.n	80031d2 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_UART_MspDeInit+0x7c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d110      	bne.n	80031d2 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80031b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031b4:	f7ff fdb2 	bl	8002d1c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80031b8:	210c      	movs	r1, #12
 80031ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031be:	f002 fc63 	bl	8005a88 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fcc8 	bl	8004b5c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80031cc:	2025      	movs	r0, #37	; 0x25
 80031ce:	f001 fc0e 	bl	80049ee <HAL_NVIC_DisableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40013800 	.word	0x40013800
 80031e0:	48000400 	.word	0x48000400
 80031e4:	40004400 	.word	0x40004400

080031e8 <LL_APB2_GRP1_ForceReset>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <LL_APB2_GRP1_ReleaseReset>:
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	43db      	mvns	r3, r3
 800321c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003220:	4013      	ands	r3, r2
 8003222:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <LL_EXTI_EnableIT_0_31>:
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <LL_EXTI_EnableIT_0_31+0x24>)
 800323a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800323e:	4905      	ldr	r1, [pc, #20]	; (8003254 <LL_EXTI_EnableIT_0_31+0x24>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	58000800 	.word	0x58000800

08003258 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003260:	4a07      	ldr	r2, [pc, #28]	; (8003280 <vcom_Init+0x28>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003266:	f7fe f853 	bl	8001310 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800326a:	f7ff fda5 	bl	8002db8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800326e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003272:	f7ff ffdd 	bl	8003230 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003276:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000a04 	.word	0x20000a04

08003284 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800328c:	f7ff ffac 	bl	80031e8 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003290:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003294:	f7ff ffb9 	bl	800320a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003298:	4804      	ldr	r0, [pc, #16]	; (80032ac <vcom_DeInit+0x28>)
 800329a:	f7ff ff65 	bl	8003168 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800329e:	200f      	movs	r0, #15
 80032a0:	f001 fba5 	bl	80049ee <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80032a4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200007c0 	.word	0x200007c0

080032b0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	461a      	mov	r2, r3
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4804      	ldr	r0, [pc, #16]	; (80032d4 <vcom_Trace_DMA+0x24>)
 80032c4:	f006 f96c 	bl	80095a0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80032c8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200007c0 	.word	0x200007c0

080032d8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <vcom_ReceiveInit+0x70>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80032e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032ea:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032f4:	4815      	ldr	r0, [pc, #84]	; (800334c <vcom_ReceiveInit+0x74>)
 80032f6:	f008 f9b8 	bl	800b66a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80032fa:	bf00      	nop
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <vcom_ReceiveInit+0x74>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330a:	d0f7      	beq.n	80032fc <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800330c:	bf00      	nop
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <vcom_ReceiveInit+0x74>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331c:	d1f7      	bne.n	800330e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <vcom_ReceiveInit+0x74>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <vcom_ReceiveInit+0x74>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800332c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800332e:	4807      	ldr	r0, [pc, #28]	; (800334c <vcom_ReceiveInit+0x74>)
 8003330:	f008 f9f6 	bl	800b720 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003334:	2201      	movs	r2, #1
 8003336:	4906      	ldr	r1, [pc, #24]	; (8003350 <vcom_ReceiveInit+0x78>)
 8003338:	4804      	ldr	r0, [pc, #16]	; (800334c <vcom_ReceiveInit+0x74>)
 800333a:	f006 f8db 	bl	80094f4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800333e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000a08 	.word	0x20000a08
 800334c:	200007c0 	.word	0x200007c0
 8003350:	20000a00 	.word	0x20000a00

08003354 <vcom_Resume>:

void vcom_Resume(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003358:	4808      	ldr	r0, [pc, #32]	; (800337c <vcom_Resume+0x28>)
 800335a:	f006 f87b 	bl	8009454 <HAL_UART_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003364:	f7fe fce6 	bl	8001d34 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003368:	4805      	ldr	r0, [pc, #20]	; (8003380 <vcom_Resume+0x2c>)
 800336a:	f001 fb4f 	bl	8004a0c <HAL_DMA_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003374:	f7fe fcde 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200007c0 	.word	0x200007c0
 8003380:	200008e0 	.word	0x200008e0

08003384 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <HAL_UART_TxCpltCallback+0x24>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d103      	bne.n	800339e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_UART_TxCpltCallback+0x28>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2000      	movs	r0, #0
 800339c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40013800 	.word	0x40013800
 80033ac:	20000a04 	.word	0x20000a04

080033b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <HAL_UART_RxCpltCallback+0x5c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d113      	bne.n	80033ea <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_UART_RxCpltCallback+0x60>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_UART_RxCpltCallback+0x30>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <HAL_UART_RxCpltCallback+0x60>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	2101      	movs	r1, #1
 80033dc:	480d      	ldr	r0, [pc, #52]	; (8003414 <HAL_UART_RxCpltCallback+0x64>)
 80033de:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80033e0:	2201      	movs	r2, #1
 80033e2:	490c      	ldr	r1, [pc, #48]	; (8003414 <HAL_UART_RxCpltCallback+0x64>)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f006 f885 	bl	80094f4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_UART_RxCpltCallback+0x68>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d106      	bne.n	8003402 <HAL_UART_RxCpltCallback+0x52>
    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_UART_RxCpltCallback+0x6c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2210      	movs	r2, #16
 80033fa:	621a      	str	r2, [r3, #32]
    	  UART2_SET = 1;
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_UART_RxCpltCallback+0x70>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40013800 	.word	0x40013800
 8003410:	20000a08 	.word	0x20000a08
 8003414:	20000a00 	.word	0x20000a00
 8003418:	40004400 	.word	0x40004400
 800341c:	20000850 	.word	0x20000850
 8003420:	20000008 	.word	0x20000008

08003424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003426:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003428:	f7ff f955 	bl	80026d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800342c:	480c      	ldr	r0, [pc, #48]	; (8003460 <LoopForever+0x6>)
  ldr r1, =_edata
 800342e:	490d      	ldr	r1, [pc, #52]	; (8003464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <LoopForever+0xe>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003434:	e002      	b.n	800343c <LoopCopyDataInit>

08003436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343a:	3304      	adds	r3, #4

0800343c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800343c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003440:	d3f9      	bcc.n	8003436 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003444:	4c0a      	ldr	r4, [pc, #40]	; (8003470 <LoopForever+0x16>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003448:	e001      	b.n	800344e <LoopFillZerobss>

0800344a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800344c:	3204      	adds	r2, #4

0800344e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003450:	d3fb      	bcc.n	800344a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003452:	f019 fc95 	bl	801cd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003456:	f7fe fa9b 	bl	8001990 <main>

0800345a <LoopForever>:

LoopForever:
    b LoopForever
 800345a:	e7fe      	b.n	800345a <LoopForever>
  ldr   r0, =_estack
 800345c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003464:	20000584 	.word	0x20000584
  ldr r2, =_sidata
 8003468:	0801db40 	.word	0x0801db40
  ldr r2, =_sbss
 800346c:	20000584 	.word	0x20000584
  ldr r4, =_ebss
 8003470:	200029b0 	.word	0x200029b0

08003474 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <ADC_IRQHandler>

08003476 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800348a:	2310      	movs	r3, #16
 800348c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800348e:	2301      	movs	r3, #1
 8003490:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003496:	2303      	movs	r3, #3
 8003498:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	4619      	mov	r1, r3
 800349e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a2:	f002 f991 	bl	80057c8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80034a6:	2320      	movs	r3, #32
 80034a8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b2:	f002 f989 	bl	80057c8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80034b6:	2200      	movs	r2, #0
 80034b8:	2120      	movs	r1, #32
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034be:	f002 fbb1 	bl	8005c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80034c2:	2200      	movs	r2, #0
 80034c4:	2110      	movs	r1, #16
 80034c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ca:	f002 fbab 	bl	8005c24 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d83f      	bhi.n	8003568 <BSP_RADIO_ConfigRFSwitch+0x90>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003501 	.word	0x08003501
 80034f4:	0800351b 	.word	0x0800351b
 80034f8:	08003535 	.word	0x08003535
 80034fc:	0800354f 	.word	0x0800354f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003500:	2200      	movs	r2, #0
 8003502:	2110      	movs	r1, #16
 8003504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003508:	f002 fb8c 	bl	8005c24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800350c:	2200      	movs	r2, #0
 800350e:	2120      	movs	r1, #32
 8003510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003514:	f002 fb86 	bl	8005c24 <HAL_GPIO_WritePin>
      break;      
 8003518:	e027      	b.n	800356a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800351a:	2201      	movs	r2, #1
 800351c:	2110      	movs	r1, #16
 800351e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003522:	f002 fb7f 	bl	8005c24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003526:	2200      	movs	r2, #0
 8003528:	2120      	movs	r1, #32
 800352a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800352e:	f002 fb79 	bl	8005c24 <HAL_GPIO_WritePin>
      break;
 8003532:	e01a      	b.n	800356a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003534:	2201      	movs	r2, #1
 8003536:	2110      	movs	r1, #16
 8003538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800353c:	f002 fb72 	bl	8005c24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003540:	2201      	movs	r2, #1
 8003542:	2120      	movs	r1, #32
 8003544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003548:	f002 fb6c 	bl	8005c24 <HAL_GPIO_WritePin>
      break;
 800354c:	e00d      	b.n	800356a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800354e:	2200      	movs	r2, #0
 8003550:	2110      	movs	r1, #16
 8003552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003556:	f002 fb65 	bl	8005c24 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800355a:	2201      	movs	r2, #1
 800355c:	2120      	movs	r1, #32
 800355e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003562:	f002 fb5f 	bl	8005c24 <HAL_GPIO_WritePin>
      break;
 8003566:	e000      	b.n	800356a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003568:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003578:	2302      	movs	r3, #2
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003586:	2301      	movs	r3, #1
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003594:	2301      	movs	r3, #1
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80035ae:	230f      	movs	r3, #15
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e001      	b.n	80035b8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80035b4:	2316      	movs	r3, #22
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a03      	ldr	r2, [pc, #12]	; (80035dc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6053      	str	r3, [r2, #4]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	e0042000 	.word	0xe0042000

080035e0 <LL_DBGMCU_EnableDBGStopMode>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	6053      	str	r3, [r2, #4]
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	e0042000 	.word	0xe0042000

080035fc <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a03      	ldr	r2, [pc, #12]	; (8003614 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6053      	str	r3, [r2, #4]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	e0042000 	.word	0xe0042000

08003618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003622:	2003      	movs	r0, #3
 8003624:	f001 f9b0 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003628:	f004 f95e 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 800362c:	4603      	mov	r3, r0
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_Init+0x3c>)
 8003630:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003632:	200f      	movs	r0, #15
 8003634:	f7fe ff64 	bl	8002500 <HAL_InitTick>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	71fb      	strb	r3, [r7, #7]
 8003642:	e001      	b.n	8003648 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003644:	f7fe fce5 	bl	8002012 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003648:	79fb      	ldrb	r3, [r7, #7]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000004 	.word	0x20000004

08003658 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_SuspendTick+0x18>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a03      	ldr	r2, [pc, #12]	; (8003670 <HAL_SuspendTick+0x18>)
 8003662:	f023 0302 	bic.w	r3, r3, #2
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	e000e010 	.word	0xe000e010

08003674 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <HAL_ResumeTick+0x18>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a03      	ldr	r2, [pc, #12]	; (800368c <HAL_ResumeTick+0x18>)
 800367e:	f043 0302 	orr.w	r3, r3, #2
 8003682:	6013      	str	r3, [r2, #0]
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	e000e010 	.word	0xe000e010

08003690 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_GetUIDw0+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	1fff7590 	.word	0x1fff7590

080036a4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80036a8:	4b02      	ldr	r3, [pc, #8]	; (80036b4 <HAL_GetUIDw1+0x10>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	1fff7594 	.word	0x1fff7594

080036b8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80036bc:	4b02      	ldr	r3, [pc, #8]	; (80036c8 <HAL_GetUIDw2+0x10>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	1fff7598 	.word	0x1fff7598

080036cc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80036d0:	f7ff ff78 	bl	80035c4 <LL_DBGMCU_EnableDBGSleepMode>
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80036dc:	f7ff ff80 	bl	80035e0 <LL_DBGMCU_EnableDBGStopMode>
}
 80036e0:	bf00      	nop
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80036e8:	f7ff ff88 	bl	80035fc <LL_DBGMCU_EnableDBGStandbyMode>
}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2107      	movs	r1, #7
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	431a      	orrs	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2107      	movs	r1, #7
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	210f      	movs	r1, #15
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	401a      	ands	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	f003 010f 	and.w	r1, r3, #15
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	fa01 f303 	lsl.w	r3, r1, r3
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	43db      	mvns	r3, r3
 8003860:	401a      	ands	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	0219      	lsls	r1, r3, #8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	400b      	ands	r3, r1
 800386a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800386e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003872:	431a      	orrs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003892:	f023 0317 	bic.w	r3, r3, #23
 8003896:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038b8:	f023 0317 	bic.w	r3, r3, #23
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6093      	str	r3, [r2, #8]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038de:	d101      	bne.n	80038e4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003900:	f023 0317 	bic.w	r3, r3, #23
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003926:	f023 0317 	bic.w	r3, r3, #23
 800392a:	f043 0202 	orr.w	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <LL_ADC_IsEnabled+0x18>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <LL_ADC_IsEnabled+0x1a>
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d101      	bne.n	8003978 <LL_ADC_IsDisableOngoing+0x18>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <LL_ADC_IsDisableOngoing+0x1a>
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003994:	f023 0317 	bic.w	r3, r3, #23
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ba:	f023 0317 	bic.w	r3, r3, #23
 80039be:	f043 0210 	orr.w	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d101      	bne.n	80039e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e19e      	b.n	8003d54 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fd fbab 	bl	8001180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff44 	bl	80038ca <LL_ADC_IsInternalRegulatorEnabled>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d115      	bne.n	8003a74 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff18 	bl	8003882 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a52:	4b99      	ldr	r3, [pc, #612]	; (8003cb8 <HAL_ADC_Init+0x2c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	4a98      	ldr	r2, [pc, #608]	; (8003cbc <HAL_ADC_Init+0x2c8>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	3301      	adds	r3, #1
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a66:	e002      	b.n	8003a6e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f9      	bne.n	8003a68 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff26 	bl	80038ca <LL_ADC_IsInternalRegulatorEnabled>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f043 0210 	orr.w	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f043 0201 	orr.w	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff93 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8003aaa:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f040 8144 	bne.w	8003d42 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 8140 	bne.w	8003d42 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003aca:	f043 0202 	orr.w	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff30 	bl	800393c <LL_ADC_IsEnabled>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 80a7 	bne.w	8003c32 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	7e1b      	ldrb	r3, [r3, #24]
 8003aec:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003aee:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7e5b      	ldrb	r3, [r3, #25]
 8003af4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003af6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7e9b      	ldrb	r3, [r3, #26]
 8003afc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003afe:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b04:	2a00      	cmp	r2, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_ADC_Init+0x11a>
 8003b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b0c:	e000      	b.n	8003b10 <HAL_ADC_Init+0x11c>
 8003b0e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003b10:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003b16:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da04      	bge.n	8003b2a <HAL_ADC_Init+0x136>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b28:	e001      	b.n	8003b2e <HAL_ADC_Init+0x13a>
 8003b2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003b2e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b36:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003b38:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d114      	bne.n	8003b74 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7e9b      	ldrb	r3, [r3, #26]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	e00b      	b.n	8003b74 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003b9a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d111      	bne.n	8003bea <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bd2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003bd8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003bde:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <HAL_ADC_Init+0x2cc>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	6979      	ldr	r1, [r7, #20]
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003c06:	d014      	beq.n	8003c32 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d00f      	beq.n	8003c32 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c1a:	d00a      	beq.n	8003c32 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003c1c:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <HAL_ADC_Init+0x2d0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c2c:	4925      	ldr	r1, [pc, #148]	; (8003cc4 <HAL_ADC_Init+0x2d0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f7ff fd76 	bl	800372e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	491e      	ldr	r1, [pc, #120]	; (8003cc8 <HAL_ADC_Init+0x2d4>)
 8003c4e:	f7ff fd6e 	bl	800372e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f062 020f 	orn	r2, r2, #15
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
 8003c6a:	e042      	b.n	8003cf2 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c74:	d13d      	bne.n	8003cf2 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	e00c      	b.n	8003c96 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d006      	beq.n	8003c9e <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	3301      	adds	r3, #1
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b07      	cmp	r3, #7
 8003c9a:	d9ef      	bls.n	8003c7c <HAL_ADC_Init+0x288>
 8003c9c:	e000      	b.n	8003ca0 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003c9e:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d112      	bne.n	8003ccc <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f062 020f 	orn	r2, r2, #15
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb6:	e01c      	b.n	8003cf2 <HAL_ADC_Init+0x2fe>
 8003cb8:	20000004 	.word	0x20000004
 8003cbc:	053e2d63 	.word	0x053e2d63
 8003cc0:	1ffffc02 	.word	0x1ffffc02
 8003cc4:	40012708 	.word	0x40012708
 8003cc8:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	f003 031c 	and.w	r3, r3, #28
 8003cde:	f06f 020f 	mvn.w	r2, #15
 8003ce2:	fa02 f103 	lsl.w	r1, r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fd36 	bl	800376a <LL_ADC_GetSamplingTimeCommonChannels>
 8003cfe:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d10b      	bne.n	8003d20 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	f043 0201 	orr.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d1e:	e018      	b.n	8003d52 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f023 0312 	bic.w	r3, r3, #18
 8003d28:	f043 0210 	orr.w	r2, r3, #16
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003d40:	e007      	b.n	8003d52 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e06a      	b.n	8003e44 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f043 0202 	orr.w	r2, r3, #2
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fabe 	bl	80042fc <ADC_ConversionStop>
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10f      	bne.n	8003daa <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb82 	bl	8004494 <ADC_Disable>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fd7f 	bl	80038a8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003db8:	f023 0303 	bic.w	r3, r3, #3
 8003dbc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f240 329f 	movw	r2, #927	; 0x39f
 8003dc6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68d9      	ldr	r1, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_ADC_DeInit+0xf0>)
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003de6:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0207 	bic.w	r2, r2, #7
 8003df6:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a1a      	ldr	r2, [r3, #32]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003e06:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_ADC_DeInit+0xf4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <HAL_ADC_DeInit+0xf4>)
 8003e1c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003e20:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd f9c0 	bl	80011a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	833e0200 	.word	0x833e0200
 8003e50:	40012708 	.word	0x40012708

08003e54 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fdb5 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d132      	bne.n	8003ed2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_Start+0x26>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e02e      	b.n	8003ed8 <HAL_ADC_Start+0x84>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa80 	bl	8004388 <ADC_Enable>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d11a      	bne.n	8003ec8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	221c      	movs	r2, #28
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fd5f 	bl	8003984 <LL_ADC_REG_StartConversion>
 8003ec6:	e006      	b.n	8003ed6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003ed0:	e001      	b.n	8003ed6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ADC_Stop+0x16>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e022      	b.n	8003f3c <HAL_ADC_Stop+0x5c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9fc 	bl	80042fc <ADC_ConversionStop>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d111      	bne.n	8003f32 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fac0 	bl	8004494 <ADC_Disable>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d102      	bne.n	8003f5c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003f56:	2308      	movs	r3, #8
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e010      	b.n	8003f7e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	f043 0220 	orr.w	r2, r3, #32
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e077      	b.n	800406a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f7e:	f7fe fac9 	bl	8002514 <HAL_GetTick>
 8003f82:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f84:	e021      	b.n	8003fca <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d01d      	beq.n	8003fca <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f8e:	f7fe fac1 	bl	8002514 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <HAL_ADC_PollForConversion+0x60>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d112      	bne.n	8003fca <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0d6      	beq.n	8003f86 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fbd6 	bl	800379a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d031      	beq.n	8004058 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	7e9b      	ldrb	r3, [r3, #26]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d12d      	bne.n	8004058 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b08      	cmp	r3, #8
 8004008:	d126      	bne.n	8004058 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fcde 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d112      	bne.n	8004040 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 020c 	bic.w	r2, r2, #12
 8004028:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	f043 0201 	orr.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	659a      	str	r2, [r3, #88]	; 0x58
 800403e:	e00b      	b.n	8004058 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7e1b      	ldrb	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	220c      	movs	r2, #12
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
	...

0800408c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x28>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e110      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x24a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fc85 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f040 80f7 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	f000 80b1 	beq.w	800423a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e0:	d004      	beq.n	80040ec <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040e6:	4a7e      	ldr	r2, [pc, #504]	; (80042e0 <HAL_ADC_ConfigChannel+0x254>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d108      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7ff fb82 	bl	8003800 <LL_ADC_REG_SetSequencerChAdd>
 80040fc:	e041      	b.n	8004182 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	210f      	movs	r1, #15
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_ADC_ConfigChannel+0xa0>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	e011      	b.n	8004150 <HAL_ADC_ConfigChannel+0xc4>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e003      	b.n	8004150 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	6849      	ldr	r1, [r1, #4]
 8004154:	f001 011f 	and.w	r1, r1, #31
 8004158:	408b      	lsls	r3, r1
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	429a      	cmp	r2, r3
 800416e:	d808      	bhi.n	8004182 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	f7ff fb1e 	bl	80037be <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	461a      	mov	r2, r3
 8004190:	f7ff fb5b 	bl	800384a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f280 8097 	bge.w	80042cc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800419e:	4851      	ldr	r0, [pc, #324]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 80041a0:	f7ff fab8 	bl	8003714 <LL_ADC_GetCommonPathInternalCh>
 80041a4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a4f      	ldr	r2, [pc, #316]	; (80042e8 <HAL_ADC_ConfigChannel+0x25c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d120      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d11b      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041c0:	4619      	mov	r1, r3
 80041c2:	4848      	ldr	r0, [pc, #288]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 80041c4:	f7ff fa94 	bl	80036f0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041c8:	4b48      	ldr	r3, [pc, #288]	; (80042ec <HAL_ADC_ConfigChannel+0x260>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	4a48      	ldr	r2, [pc, #288]	; (80042f0 <HAL_ADC_ConfigChannel+0x264>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80041e2:	e002      	b.n	80041ea <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f9      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80041f0:	e06c      	b.n	80042cc <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <HAL_ADC_ConfigChannel+0x268>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10c      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x18a>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420c:	4619      	mov	r1, r3
 800420e:	4835      	ldr	r0, [pc, #212]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 8004210:	f7ff fa6e 	bl	80036f0 <LL_ADC_SetCommonPathInternalCh>
 8004214:	e05a      	b.n	80042cc <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a37      	ldr	r2, [pc, #220]	; (80042f8 <HAL_ADC_ConfigChannel+0x26c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d155      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004226:	2b00      	cmp	r3, #0
 8004228:	d150      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004230:	4619      	mov	r1, r3
 8004232:	482c      	ldr	r0, [pc, #176]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 8004234:	f7ff fa5c 	bl	80036f0 <LL_ADC_SetCommonPathInternalCh>
 8004238:	e048      	b.n	80042cc <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004242:	d004      	beq.n	800424e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004248:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <HAL_ADC_ConfigChannel+0x254>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d107      	bne.n	800425e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f7ff fae3 	bl	8003824 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da32      	bge.n	80042cc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004266:	481f      	ldr	r0, [pc, #124]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 8004268:	f7ff fa54 	bl	8003714 <LL_ADC_GetCommonPathInternalCh>
 800426c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <HAL_ADC_ConfigChannel+0x25c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d107      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800427e:	4619      	mov	r1, r3
 8004280:	4818      	ldr	r0, [pc, #96]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 8004282:	f7ff fa35 	bl	80036f0 <LL_ADC_SetCommonPathInternalCh>
 8004286:	e021      	b.n	80042cc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HAL_ADC_ConfigChannel+0x268>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d107      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004298:	4619      	mov	r1, r3
 800429a:	4812      	ldr	r0, [pc, #72]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 800429c:	f7ff fa28 	bl	80036f0 <LL_ADC_SetCommonPathInternalCh>
 80042a0:	e014      	b.n	80042cc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <HAL_ADC_ConfigChannel+0x26c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10f      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042b2:	4619      	mov	r1, r3
 80042b4:	480b      	ldr	r0, [pc, #44]	; (80042e4 <HAL_ADC_ConfigChannel+0x258>)
 80042b6:	f7ff fa1b 	bl	80036f0 <LL_ADC_SetCommonPathInternalCh>
 80042ba:	e007      	b.n	80042cc <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	80000004 	.word	0x80000004
 80042e4:	40012708 	.word	0x40012708
 80042e8:	b0001000 	.word	0xb0001000
 80042ec:	20000004 	.word	0x20000004
 80042f0:	053e2d63 	.word	0x053e2d63
 80042f4:	b8004000 	.word	0xb8004000
 80042f8:	b4002000 	.word	0xb4002000

080042fc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fb61 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d033      	beq.n	800437c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fb21 	bl	8003960 <LL_ADC_IsDisableOngoing>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fb3e 	bl	80039aa <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800432e:	f7fe f8f1 	bl	8002514 <HAL_GetTick>
 8004332:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004334:	e01b      	b.n	800436e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004336:	f7fe f8ed 	bl	8002514 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d914      	bls.n	800436e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	f043 0210 	orr.w	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e007      	b.n	800437e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1dc      	bne.n	8004336 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004390:	2300      	movs	r3, #0
 8004392:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff facf 	bl	800393c <LL_ADC_IsEnabled>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d169      	bne.n	8004478 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <ADC_Enable+0xfc>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00d      	beq.n	80043ce <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f043 0210 	orr.w	r2, r3, #16
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	f043 0201 	orr.w	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e055      	b.n	800447a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fa8c 	bl	80038f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043d8:	482b      	ldr	r0, [pc, #172]	; (8004488 <ADC_Enable+0x100>)
 80043da:	f7ff f99b 	bl	8003714 <LL_ADC_GetCommonPathInternalCh>
 80043de:	4603      	mov	r3, r0
 80043e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00f      	beq.n	8004408 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <ADC_Enable+0x104>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	4a28      	ldr	r2, [pc, #160]	; (8004490 <ADC_Enable+0x108>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	099b      	lsrs	r3, r3, #6
 80043f6:	3301      	adds	r3, #1
 80043f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80043fa:	e002      	b.n	8004402 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	3b01      	subs	r3, #1
 8004400:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f9      	bne.n	80043fc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7e5b      	ldrb	r3, [r3, #25]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d033      	beq.n	8004478 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004410:	f7fe f880 	bl	8002514 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004416:	e028      	b.n	800446a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa8d 	bl	800393c <LL_ADC_IsEnabled>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fa5f 	bl	80038f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004432:	f7fe f86f 	bl	8002514 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d914      	bls.n	800446a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d00d      	beq.n	800446a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f043 0210 	orr.w	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d1cf      	bne.n	8004418 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	80000017 	.word	0x80000017
 8004488:	40012708 	.word	0x40012708
 800448c:	20000004 	.word	0x20000004
 8004490:	053e2d63 	.word	0x053e2d63

08004494 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fa5d 	bl	8003960 <LL_ADC_IsDisableOngoing>
 80044a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fa45 	bl	800393c <LL_ADC_IsEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d047      	beq.n	8004548 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d144      	bne.n	8004548 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0305 	and.w	r3, r3, #5
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10c      	bne.n	80044e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fa20 	bl	8003916 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2203      	movs	r2, #3
 80044dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044de:	f7fe f819 	bl	8002514 <HAL_GetTick>
 80044e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044e4:	e029      	b.n	800453a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e023      	b.n	800454a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004502:	f7fe f807 	bl	8002514 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d914      	bls.n	800453a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	f043 0210 	orr.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	f043 0201 	orr.w	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e007      	b.n	800454a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1dc      	bne.n	8004502 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <LL_ADC_SetCalibrationFactor>:
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004562:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <LL_ADC_GetCalibrationFactor>:
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <LL_ADC_Enable>:
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a6:	f023 0317 	bic.w	r3, r3, #23
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <LL_ADC_Disable>:
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045cc:	f023 0317 	bic.w	r3, r3, #23
 80045d0:	f043 0202 	orr.w	r2, r3, #2
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <LL_ADC_IsEnabled>:
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <LL_ADC_IsEnabled+0x18>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <LL_ADC_IsEnabled+0x1a>
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <LL_ADC_StartCalibration>:
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004616:	f023 0317 	bic.w	r3, r3, #23
 800461a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	609a      	str	r2, [r3, #8]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <LL_ADC_IsCalibrationOnGoing>:
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800463c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004640:	d101      	bne.n	8004646 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b088      	sub	sp, #32
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_ADCEx_Calibration_Start+0x1e>
 800466c:	2302      	movs	r3, #2
 800466e:	e0b9      	b.n	80047e4 <HAL_ADCEx_Calibration_Start+0x192>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff0b 	bl	8004494 <ADC_Disable>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ffab 	bl	80045e2 <LL_ADC_IsEnabled>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	f040 809d 	bne.w	80047ce <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800469c:	f043 0202 	orr.w	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	f248 0303 	movw	r3, #32771	; 0x8003
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e02e      	b.n	800472a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff98 	bl	8004606 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046d6:	e014      	b.n	8004702 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	3301      	adds	r3, #1
 80046dc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80046e4:	d30d      	bcc.n	8004702 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	f023 0312 	bic.w	r3, r3, #18
 80046ee:	f043 0210 	orr.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e070      	b.n	80047e4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ff90 	bl	800462c <LL_ADC_IsCalibrationOnGoing>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e2      	bne.n	80046d8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff2f 	bl	800457a <LL_ADC_GetCalibrationFactor>
 800471c:	4602      	mov	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4413      	add	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	3301      	adds	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b07      	cmp	r3, #7
 800472e:	d9cd      	bls.n	80046cc <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff29 	bl	8004596 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff01 	bl	8004552 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff31 	bl	80045bc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800475a:	f7fd fedb 	bl	8002514 <HAL_GetTick>
 800475e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004760:	e01c      	b.n	800479c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004762:	f7fd fed7 	bl	8002514 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d915      	bls.n	800479c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff34 	bl	80045e2 <LL_ADC_IsEnabled>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00d      	beq.n	800479c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	f043 0210 	orr.w	r2, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	f043 0201 	orr.w	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e023      	b.n	80047e4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff1e 	bl	80045e2 <LL_ADC_IsEnabled>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1da      	bne.n	8004762 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68d9      	ldr	r1, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	f023 0303 	bic.w	r3, r3, #3
 80047c4:	f043 0201 	orr.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	659a      	str	r2, [r3, #88]	; 0x58
 80047cc:	e005      	b.n	80047da <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f043 0210 	orr.w	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3720      	adds	r7, #32
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <__NVIC_SetPriorityGrouping+0x44>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004808:	4013      	ands	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800481e:	4a04      	ldr	r2, [pc, #16]	; (8004830 <__NVIC_SetPriorityGrouping+0x44>)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	60d3      	str	r3, [r2, #12]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <__NVIC_GetPriorityGrouping+0x18>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	f003 0307 	and.w	r3, r3, #7
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	db0b      	blt.n	800487a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4906      	ldr	r1, [pc, #24]	; (8004884 <__NVIC_EnableIRQ+0x34>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2001      	movs	r0, #1
 8004872:	fa00 f202 	lsl.w	r2, r0, r2
 8004876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	e000e100 	.word	0xe000e100

08004888 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	2b00      	cmp	r3, #0
 8004898:	db12      	blt.n	80048c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	490a      	ldr	r1, [pc, #40]	; (80048cc <__NVIC_DisableIRQ+0x44>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2001      	movs	r0, #1
 80048aa:	fa00 f202 	lsl.w	r2, r0, r2
 80048ae:	3320      	adds	r3, #32
 80048b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80048b4:	f3bf 8f4f 	dsb	sy
}
 80048b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048ba:	f3bf 8f6f 	isb	sy
}
 80048be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000e100 	.word	0xe000e100

080048d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	db0a      	blt.n	80048fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	490c      	ldr	r1, [pc, #48]	; (800491c <__NVIC_SetPriority+0x4c>)
 80048ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ee:	0112      	lsls	r2, r2, #4
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	440b      	add	r3, r1
 80048f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048f8:	e00a      	b.n	8004910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	4908      	ldr	r1, [pc, #32]	; (8004920 <__NVIC_SetPriority+0x50>)
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	3b04      	subs	r3, #4
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	440b      	add	r3, r1
 800490e:	761a      	strb	r2, [r3, #24]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000e100 	.word	0xe000e100
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f1c3 0307 	rsb	r3, r3, #7
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf28      	it	cs
 8004942:	2304      	movcs	r3, #4
 8004944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3304      	adds	r3, #4
 800494a:	2b06      	cmp	r3, #6
 800494c:	d902      	bls.n	8004954 <NVIC_EncodePriority+0x30>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3b03      	subs	r3, #3
 8004952:	e000      	b.n	8004956 <NVIC_EncodePriority+0x32>
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	f04f 32ff 	mov.w	r2, #4294967295
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	401a      	ands	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800496c:	f04f 31ff 	mov.w	r1, #4294967295
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	43d9      	mvns	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800497c:	4313      	orrs	r3, r2
         );
}
 800497e:	4618      	mov	r0, r3
 8004980:	3724      	adds	r7, #36	; 0x24
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff2b 	bl	80047ec <__NVIC_SetPriorityGrouping>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ac:	f7ff ff42 	bl	8004834 <__NVIC_GetPriorityGrouping>
 80049b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ffb4 	bl	8004924 <NVIC_EncodePriority>
 80049bc:	4602      	mov	r2, r0
 80049be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff83 	bl	80048d0 <__NVIC_SetPriority>
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff35 	bl	8004850 <__NVIC_EnableIRQ>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff43 	bl	8004888 <__NVIC_DisableIRQ>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e08e      	b.n	8004b3c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_DMA_Init+0x138>)
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d80f      	bhi.n	8004a4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b45      	ldr	r3, [pc, #276]	; (8004b48 <HAL_DMA_Init+0x13c>)
 8004a32:	4413      	add	r3, r2
 8004a34:	4a45      	ldr	r2, [pc, #276]	; (8004b4c <HAL_DMA_Init+0x140>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	009a      	lsls	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a42      	ldr	r2, [pc, #264]	; (8004b50 <HAL_DMA_Init+0x144>)
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
 8004a48:	e00e      	b.n	8004a68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <HAL_DMA_Init+0x148>)
 8004a52:	4413      	add	r3, r2
 8004a54:	4a3d      	ldr	r2, [pc, #244]	; (8004b4c <HAL_DMA_Init+0x140>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	009a      	lsls	r2, r3, #2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a3c      	ldr	r2, [pc, #240]	; (8004b58 <HAL_DMA_Init+0x14c>)
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6819      	ldr	r1, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fb24 	bl	8005108 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac8:	d102      	bne.n	8004ad0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004adc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ae6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_DMA_Init+0x106>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d80c      	bhi.n	8004b12 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fb4d 	bl	8005198 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	e008      	b.n	8004b24 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40020407 	.word	0x40020407
 8004b48:	bffdfff8 	.word	0xbffdfff8
 8004b4c:	cccccccd 	.word	0xcccccccd
 8004b50:	40020000 	.word	0x40020000
 8004b54:	bffdfbf8 	.word	0xbffdfbf8
 8004b58:	40020400 	.word	0x40020400

08004b5c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07b      	b.n	8004c66 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <HAL_DMA_DeInit+0x114>)
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d80f      	bhi.n	8004baa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <HAL_DMA_DeInit+0x118>)
 8004b92:	4413      	add	r3, r2
 8004b94:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <HAL_DMA_DeInit+0x11c>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	009a      	lsls	r2, r3, #2
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a35      	ldr	r2, [pc, #212]	; (8004c7c <HAL_DMA_DeInit+0x120>)
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ba8:	e00e      	b.n	8004bc8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <HAL_DMA_DeInit+0x124>)
 8004bb2:	4413      	add	r3, r2
 8004bb4:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <HAL_DMA_DeInit+0x11c>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	009a      	lsls	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <HAL_DMA_DeInit+0x128>)
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	f003 021c 	and.w	r2, r3, #28
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f202 	lsl.w	r2, r1, r2
 8004be2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fa8f 	bl	8005108 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00f      	beq.n	8004c24 <HAL_DMA_DeInit+0xc8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d80b      	bhi.n	8004c24 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fac3 	bl	8005198 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c22:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40020407 	.word	0x40020407
 8004c74:	bffdfff8 	.word	0xbffdfff8
 8004c78:	cccccccd 	.word	0xcccccccd
 8004c7c:	40020000 	.word	0x40020000
 8004c80:	bffdfbf8 	.word	0xbffdfbf8
 8004c84:	40020400 	.word	0x40020400

08004c88 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_DMA_Start_IT+0x20>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e069      	b.n	8004d7c <HAL_DMA_Start_IT+0xf4>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d155      	bne.n	8004d68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f9d3 	bl	800508c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 020e 	orr.w	r2, r2, #14
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e00f      	b.n	8004d20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0204 	bic.w	r2, r2, #4
 8004d0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 020a 	orr.w	r2, r2, #10
 8004d1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e008      	b.n	8004d7a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2280      	movs	r2, #128	; 0x80
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e04f      	b.n	8004e36 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d008      	beq.n	8004db4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e040      	b.n	8004e36 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 020e 	bic.w	r2, r2, #14
 8004dc2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	f003 021c 	and.w	r2, r3, #28
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f202 	lsl.w	r2, r1, r2
 8004df6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d005      	beq.n	8004e64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
 8004e62:	e047      	b.n	8004ef4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 020e 	bic.w	r2, r2, #14
 8004e72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	f003 021c 	and.w	r2, r3, #28
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004eb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ed2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
    }
  }
  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	f003 031c 	and.w	r3, r3, #28
 8004f20:	2204      	movs	r2, #4
 8004f22:	409a      	lsls	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d027      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x7c>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d022      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0204 	bic.w	r2, r2, #4
 8004f52:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	f003 021c 	and.w	r2, r3, #28
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	2104      	movs	r1, #4
 8004f62:	fa01 f202 	lsl.w	r2, r1, r2
 8004f66:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8081 	beq.w	8005074 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004f7a:	e07b      	b.n	8005074 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	f003 031c 	and.w	r3, r3, #28
 8004f84:	2202      	movs	r2, #2
 8004f86:	409a      	lsls	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d03d      	beq.n	800500c <HAL_DMA_IRQHandler+0x10c>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d038      	beq.n	800500c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 020a 	bic.w	r2, r2, #10
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <HAL_DMA_IRQHandler+0x180>)
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d909      	bls.n	8004fe0 <HAL_DMA_IRQHandler+0xe0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd0:	f003 031c 	and.w	r3, r3, #28
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <HAL_DMA_IRQHandler+0x184>)
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	6053      	str	r3, [r2, #4]
 8004fde:	e008      	b.n	8004ff2 <HAL_DMA_IRQHandler+0xf2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	f003 031c 	and.w	r3, r3, #28
 8004fe8:	4a27      	ldr	r2, [pc, #156]	; (8005088 <HAL_DMA_IRQHandler+0x188>)
 8004fea:	2102      	movs	r1, #2
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d038      	beq.n	8005074 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800500a:	e033      	b.n	8005074 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	f003 031c 	and.w	r3, r3, #28
 8005014:	2208      	movs	r2, #8
 8005016:	409a      	lsls	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02a      	beq.n	8005076 <HAL_DMA_IRQHandler+0x176>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d025      	beq.n	8005076 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 020e 	bic.w	r2, r2, #14
 8005038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	f003 021c 	and.w	r2, r3, #28
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	2101      	movs	r1, #1
 8005048:	fa01 f202 	lsl.w	r2, r1, r2
 800504c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005074:	bf00      	nop
 8005076:	bf00      	nop
}
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40020080 	.word	0x40020080
 8005084:	40020400 	.word	0x40020400
 8005088:	40020000 	.word	0x40020000

0800508c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	f003 021c 	and.w	r2, r3, #28
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	2101      	movs	r1, #1
 80050c4:	fa01 f202 	lsl.w	r2, r1, r2
 80050c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d108      	bne.n	80050ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050ea:	e007      	b.n	80050fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
	...

08005108 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005118:	429a      	cmp	r2, r3
 800511a:	d813      	bhi.n	8005144 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	089b      	lsrs	r3, r3, #2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005128:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	3b08      	subs	r3, #8
 8005138:	4a14      	ldr	r2, [pc, #80]	; (800518c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	091b      	lsrs	r3, r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e011      	b.n	8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	009a      	lsls	r2, r3, #2
 800514c:	4b10      	ldr	r3, [pc, #64]	; (8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800514e:	4413      	add	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	3b08      	subs	r3, #8
 800515c:	4a0b      	ldr	r2, [pc, #44]	; (800518c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	3307      	adds	r3, #7
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800516c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40020407 	.word	0x40020407
 800518c:	cccccccd 	.word	0xcccccccd
 8005190:	4002081c 	.word	0x4002081c
 8005194:	40020880 	.word	0x40020880

08005198 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a08      	ldr	r2, [pc, #32]	; (80051dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80051bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2201      	movs	r2, #1
 80051c8:	409a      	lsls	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	1000823f 	.word	0x1000823f
 80051dc:	40020940 	.word	0x40020940

080051e0 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d12b      	bne.n	800524e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005200:	2302      	movs	r3, #2
 8005202:	e028      	b.n	8005256 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	3b01      	subs	r3, #1
 8005220:	04db      	lsls	r3, r3, #19
 8005222:	431a      	orrs	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	431a      	orrs	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	7a1b      	ldrb	r3, [r3, #8]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	431a      	orrs	r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	7a5b      	ldrb	r3, [r3, #9]
 8005236:	025b      	lsls	r3, r3, #9
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523e:	430a      	orrs	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e003      	b.n	8005256 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2280      	movs	r2, #128	; 0x80
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01a      	beq.n	80052ae <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005286:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005290:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d022      	beq.n	80052fc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01a      	beq.n	80052fc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
      }
    }
  }
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HAL_FLASH_Program+0x80>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_FLASH_Program+0x1a>
 800531a:	2302      	movs	r3, #2
 800531c:	e02d      	b.n	800537a <HAL_FLASH_Program+0x76>
 800531e:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_FLASH_Program+0x80>)
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HAL_FLASH_Program+0x80>)
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800532a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800532e:	f000 f869 	bl	8005404 <FLASH_WaitForLastOperation>
 8005332:	4603      	mov	r3, r0
 8005334:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11a      	bne.n	8005372 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d105      	bne.n	800534e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	68b8      	ldr	r0, [r7, #8]
 8005348:	f000 f8be 	bl	80054c8 <FLASH_Program_DoubleWord>
 800534c:	e004      	b.n	8005358 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	4619      	mov	r1, r3
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	f000 f8de 	bl	8005514 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800535c:	f000 f852 	bl	8005404 <FLASH_WaitForLastOperation>
 8005360:	4603      	mov	r3, r0
 8005362:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_FLASH_Program+0x84>)
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	43db      	mvns	r3, r3
 800536c:	4906      	ldr	r1, [pc, #24]	; (8005388 <HAL_FLASH_Program+0x84>)
 800536e:	4013      	ands	r3, r2
 8005370:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005372:	4b04      	ldr	r3, [pc, #16]	; (8005384 <HAL_FLASH_Program+0x80>)
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000a0c 	.word	0x20000a0c
 8005388:	58004000 	.word	0x58004000

0800538c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_FLASH_Unlock+0x38>)
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	da0b      	bge.n	80053b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_FLASH_Unlock+0x38>)
 80053a0:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <HAL_FLASH_Unlock+0x3c>)
 80053a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <HAL_FLASH_Unlock+0x38>)
 80053a6:	4a09      	ldr	r2, [pc, #36]	; (80053cc <HAL_FLASH_Unlock+0x40>)
 80053a8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_FLASH_Unlock+0x38>)
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da01      	bge.n	80053b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80053b6:	79fb      	ldrb	r3, [r7, #7]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	58004000 	.word	0x58004000
 80053c8:	45670123 	.word	0x45670123
 80053cc:	cdef89ab 	.word	0xcdef89ab

080053d0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_FLASH_Lock+0x30>)
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <HAL_FLASH_Lock+0x30>)
 80053e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_FLASH_Lock+0x30>)
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db01      	blt.n	80053f2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80053f2:	79fb      	ldrb	r3, [r7, #7]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	58004000 	.word	0x58004000

08005404 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800540c:	f7fd f882 	bl	8002514 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005412:	e009      	b.n	8005428 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005414:	f7fd f87e 	bl	8002514 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d801      	bhi.n	8005428 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e047      	b.n	80054b8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005428:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <FLASH_WaitForLastOperation+0xbc>)
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005434:	d0ee      	beq.n	8005414 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005436:	4b22      	ldr	r3, [pc, #136]	; (80054c0 <FLASH_WaitForLastOperation+0xbc>)
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005446:	4b1e      	ldr	r3, [pc, #120]	; (80054c0 <FLASH_WaitForLastOperation+0xbc>)
 8005448:	2201      	movs	r2, #1
 800544a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005452:	4013      	ands	r3, r2
 8005454:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <FLASH_WaitForLastOperation+0x6c>
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <FLASH_WaitForLastOperation+0xbc>)
 8005462:	699a      	ldr	r2, [r3, #24]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800546a:	4915      	ldr	r1, [pc, #84]	; (80054c0 <FLASH_WaitForLastOperation+0xbc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	618b      	str	r3, [r1, #24]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <FLASH_WaitForLastOperation+0x80>
 800547a:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <FLASH_WaitForLastOperation+0xbc>)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005482:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00e      	beq.n	80054a8 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800548a:	4a0e      	ldr	r2, [pc, #56]	; (80054c4 <FLASH_WaitForLastOperation+0xc0>)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e011      	b.n	80054b8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005494:	f7fd f83e 	bl	8002514 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d801      	bhi.n	80054a8 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e007      	b.n	80054b8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <FLASH_WaitForLastOperation+0xbc>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054b4:	d0ee      	beq.n	8005494 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	58004000 	.word	0x58004000
 80054c4:	20000a0c 	.word	0x20000a0c

080054c8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <FLASH_Program_DoubleWord+0x48>)
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <FLASH_Program_DoubleWord+0x48>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80054e6:	f3bf 8f6f 	isb	sy
}
 80054ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80054ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	000a      	movs	r2, r1
 80054fa:	2300      	movs	r3, #0
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	3104      	adds	r1, #4
 8005500:	4613      	mov	r3, r2
 8005502:	600b      	str	r3, [r1, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	58004000 	.word	0x58004000

08005514 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800551e:	2340      	movs	r3, #64	; 0x40
 8005520:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800552a:	4b18      	ldr	r3, [pc, #96]	; (800558c <FLASH_Program_Fast+0x78>)
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	4a17      	ldr	r2, [pc, #92]	; (800558c <FLASH_Program_Fast+0x78>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005534:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005536:	f3ef 8310 	mrs	r3, PRIMASK
 800553a:	60fb      	str	r3, [r7, #12]
  return(result);
 800553c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800553e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005540:	b672      	cpsid	i
}
 8005542:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	3304      	adds	r3, #4
 8005550:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3304      	adds	r3, #4
 8005556:	617b      	str	r3, [r7, #20]
    row_index--;
 8005558:	7ffb      	ldrb	r3, [r7, #31]
 800555a:	3b01      	subs	r3, #1
 800555c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800555e:	7ffb      	ldrb	r3, [r7, #31]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1ef      	bne.n	8005544 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005564:	bf00      	nop
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <FLASH_Program_Fast+0x78>)
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800556e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005572:	d0f8      	beq.n	8005566 <FLASH_Program_Fast+0x52>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005580:	bf00      	nop
 8005582:	3724      	adds	r7, #36	; 0x24
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	58004000 	.word	0x58004000

08005590 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800559a:	4b28      	ldr	r3, [pc, #160]	; (800563c <HAL_FLASHEx_Erase+0xac>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_FLASHEx_Erase+0x16>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e046      	b.n	8005634 <HAL_FLASHEx_Erase+0xa4>
 80055a6:	4b25      	ldr	r3, [pc, #148]	; (800563c <HAL_FLASHEx_Erase+0xac>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80055ac:	4b23      	ldr	r3, [pc, #140]	; (800563c <HAL_FLASHEx_Erase+0xac>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055b6:	f7ff ff25 	bl	8005404 <FLASH_WaitForLastOperation>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d133      	bne.n	800562c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d108      	bne.n	80055de <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80055cc:	f000 f880 	bl	80056d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055d4:	f7ff ff16 	bl	8005404 <FLASH_WaitForLastOperation>
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]
 80055dc:	e024      	b.n	8005628 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	e012      	b.n	8005614 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f000 f87e 	bl	80056f0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055f8:	f7ff ff04 	bl	8005404 <FLASH_WaitForLastOperation>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	601a      	str	r2, [r3, #0]
          break;
 800560c:	e00a      	b.n	8005624 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4413      	add	r3, r2
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	d3e4      	bcc.n	80055ee <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005624:	f000 f8c0 	bl	80057a8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005628:	f000 f87a 	bl	8005720 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_FLASHEx_Erase+0xac>)
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]

  return status;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000a0c 	.word	0x20000a0c

08005640 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005648:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_FLASHEx_Erase_IT+0x14>
 8005650:	2302      	movs	r3, #2
 8005652:	e034      	b.n	80056be <HAL_FLASHEx_Erase_IT+0x7e>
 8005654:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 800565c:	2200      	movs	r2, #0
 800565e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005666:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800566c:	f7ff feca 	bl	8005404 <FLASH_WaitForLastOperation>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e01c      	b.n	80056bc <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <HAL_FLASHEx_Erase_IT+0x8c>)
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4a11      	ldr	r2, [pc, #68]	; (80056cc <HAL_FLASHEx_Erase_IT+0x8c>)
 8005688:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800568c:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d105      	bne.n	80056a2 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 8005698:	2200      	movs	r2, #0
 800569a:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 800569c:	f000 f818 	bl	80056d0 <FLASH_MassErase>
 80056a0:	e00c      	b.n	80056bc <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 80056a8:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4a06      	ldr	r2, [pc, #24]	; (80056c8 <HAL_FLASHEx_Erase_IT+0x88>)
 80056b0:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f81a 	bl	80056f0 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000a0c 	.word	0x20000a0c
 80056cc:	58004000 	.word	0x58004000

080056d0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <FLASH_MassErase+0x1c>)
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <FLASH_MassErase+0x1c>)
 80056da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056de:	f043 0304 	orr.w	r3, r3, #4
 80056e2:	6153      	str	r3, [r2, #20]
#endif
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	58004000 	.word	0x58004000

080056f0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80056f8:	4b08      	ldr	r3, [pc, #32]	; (800571c <FLASH_PageErase+0x2c>)
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	4313      	orrs	r3, r2
 8005706:	4a05      	ldr	r2, [pc, #20]	; (800571c <FLASH_PageErase+0x2c>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	f043 0302 	orr.w	r3, r3, #2
 8005710:	6153      	str	r3, [r2, #20]
#endif
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr
 800571c:	58004000 	.word	0x58004000

08005720 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005724:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572c:	2b01      	cmp	r3, #1
 800572e:	d117      	bne.n	8005760 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005730:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005736:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a15      	ldr	r2, [pc, #84]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800574e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005752:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005754:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800575a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800575e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005768:	2b01      	cmp	r3, #1
 800576a:	d117      	bne.n	800579c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005776:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800577e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a06      	ldr	r2, [pc, #24]	; (80057a4 <FLASH_FlushCaches+0x84>)
 800578a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005790:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a03      	ldr	r2, [pc, #12]	; (80057a4 <FLASH_FlushCaches+0x84>)
 8005796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800579a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800579c:	bf00      	nop
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	58004000 	.word	0x58004000

080057a8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <FLASH_AcknowledgePageErase+0x1c>)
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <FLASH_AcknowledgePageErase+0x1c>)
 80057b2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80057b6:	f023 0302 	bic.w	r3, r3, #2
 80057ba:	6153      	str	r3, [r2, #20]
#endif
}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	58004000 	.word	0x58004000

080057c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057d6:	e140      	b.n	8005a5a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	2101      	movs	r1, #1
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	fa01 f303 	lsl.w	r3, r1, r3
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8132 	beq.w	8005a54 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d005      	beq.n	8005808 <HAL_GPIO_Init+0x40>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d130      	bne.n	800586a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4013      	ands	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800583e:	2201      	movs	r2, #1
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4013      	ands	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 0201 	and.w	r2, r3, #1
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d017      	beq.n	80058a6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	2203      	movs	r2, #3
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4013      	ands	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d123      	bne.n	80058fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	08da      	lsrs	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3208      	adds	r2, #8
 80058ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	220f      	movs	r2, #15
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	08da      	lsrs	r2, r3, #3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3208      	adds	r2, #8
 80058f4:	6939      	ldr	r1, [r7, #16]
 80058f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	2203      	movs	r2, #3
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4013      	ands	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 0203 	and.w	r2, r3, #3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 808c 	beq.w	8005a54 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800593c:	4a4e      	ldr	r2, [pc, #312]	; (8005a78 <HAL_GPIO_Init+0x2b0>)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	089b      	lsrs	r3, r3, #2
 8005942:	3302      	adds	r3, #2
 8005944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	2207      	movs	r2, #7
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005966:	d00d      	beq.n	8005984 <HAL_GPIO_Init+0x1bc>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a44      	ldr	r2, [pc, #272]	; (8005a7c <HAL_GPIO_Init+0x2b4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <HAL_GPIO_Init+0x1b8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a43      	ldr	r2, [pc, #268]	; (8005a80 <HAL_GPIO_Init+0x2b8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d101      	bne.n	800597c <HAL_GPIO_Init+0x1b4>
 8005978:	2302      	movs	r3, #2
 800597a:	e004      	b.n	8005986 <HAL_GPIO_Init+0x1be>
 800597c:	2307      	movs	r3, #7
 800597e:	e002      	b.n	8005986 <HAL_GPIO_Init+0x1be>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_GPIO_Init+0x1be>
 8005984:	2300      	movs	r3, #0
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	f002 0203 	and.w	r2, r2, #3
 800598c:	0092      	lsls	r2, r2, #2
 800598e:	4093      	lsls	r3, r2
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005996:	4938      	ldr	r1, [pc, #224]	; (8005a78 <HAL_GPIO_Init+0x2b0>)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	089b      	lsrs	r3, r3, #2
 800599c:	3302      	adds	r3, #2
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059a4:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	43db      	mvns	r3, r3
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4013      	ands	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059c8:	4a2e      	ldr	r2, [pc, #184]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059ce:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	43db      	mvns	r3, r3
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4013      	ands	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059f2:	4a24      	ldr	r2, [pc, #144]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80059f8:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 80059fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4013      	ands	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005a1e:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005a26:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <HAL_GPIO_Init+0x2bc>)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	3301      	adds	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f47f aeb7 	bne.w	80057d8 <HAL_GPIO_Init+0x10>
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	48000400 	.word	0x48000400
 8005a80:	48000800 	.word	0x48000800
 8005a84:	58000800 	.word	0x58000800

08005a88 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005a96:	e0af      	b.n	8005bf8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a98:	2201      	movs	r2, #1
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80a2 	beq.w	8005bf2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005aae:	4a59      	ldr	r2, [pc, #356]	; (8005c14 <HAL_GPIO_DeInit+0x18c>)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	089b      	lsrs	r3, r3, #2
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4013      	ands	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ad6:	d00d      	beq.n	8005af4 <HAL_GPIO_DeInit+0x6c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a4f      	ldr	r2, [pc, #316]	; (8005c18 <HAL_GPIO_DeInit+0x190>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <HAL_GPIO_DeInit+0x68>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a4e      	ldr	r2, [pc, #312]	; (8005c1c <HAL_GPIO_DeInit+0x194>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d101      	bne.n	8005aec <HAL_GPIO_DeInit+0x64>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e004      	b.n	8005af6 <HAL_GPIO_DeInit+0x6e>
 8005aec:	2307      	movs	r3, #7
 8005aee:	e002      	b.n	8005af6 <HAL_GPIO_DeInit+0x6e>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_GPIO_DeInit+0x6e>
 8005af4:	2300      	movs	r3, #0
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	f002 0203 	and.w	r2, r2, #3
 8005afc:	0092      	lsls	r2, r2, #2
 8005afe:	4093      	lsls	r3, r2
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d136      	bne.n	8005b74 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005b06:	4b46      	ldr	r3, [pc, #280]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b08:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	4943      	ldr	r1, [pc, #268]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005b18:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	493f      	ldr	r1, [pc, #252]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005b2a:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	493b      	ldr	r1, [pc, #236]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005b38:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	4937      	ldr	r1, [pc, #220]	; (8005c20 <HAL_GPIO_DeInit+0x198>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	2207      	movs	r2, #7
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005b56:	4a2f      	ldr	r2, [pc, #188]	; (8005c14 <HAL_GPIO_DeInit+0x18c>)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	089b      	lsrs	r3, r3, #2
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	43da      	mvns	r2, r3
 8005b66:	482b      	ldr	r0, [pc, #172]	; (8005c14 <HAL_GPIO_DeInit+0x18c>)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	3302      	adds	r3, #2
 8005b70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	2103      	movs	r1, #3
 8005b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	08da      	lsrs	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3208      	adds	r2, #8
 8005b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	220f      	movs	r2, #15
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	08d2      	lsrs	r2, r2, #3
 8005ba8:	4019      	ands	r1, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3208      	adds	r2, #8
 8005bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	2103      	movs	r1, #3
 8005bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	2103      	movs	r1, #3
 8005be6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	401a      	ands	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f af49 	bne.w	8005a98 <HAL_GPIO_DeInit+0x10>
  }
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	48000400 	.word	0x48000400
 8005c1c:	48000800 	.word	0x48000800
 8005c20:	58000800 	.word	0x58000800

08005c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	807b      	strh	r3, [r7, #2]
 8005c30:	4613      	mov	r3, r2
 8005c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c34:	787b      	ldrb	r3, [r7, #1]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c40:	e002      	b.n	8005c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c42:	887a      	ldrh	r2, [r7, #2]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c5e:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c6a:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f005 fffe 	bl	800bc74 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58000800 	.word	0x58000800

08005c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e081      	b.n	8005d9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb fdfe 	bl	80018ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2224      	movs	r2, #36	; 0x24
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0201 	bic.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d107      	bne.n	8005cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	e006      	b.n	8005d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d104      	bne.n	8005d1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69d9      	ldr	r1, [r3, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	461a      	mov	r2, r3
 8005db0:	460b      	mov	r3, r1
 8005db2:	817b      	strh	r3, [r7, #10]
 8005db4:	4613      	mov	r3, r2
 8005db6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	f040 80da 	bne.w	8005f7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2C_Master_Transmit+0x30>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0d3      	b.n	8005f7c <HAL_I2C_Master_Transmit+0x1d8>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ddc:	f7fc fb9a 	bl	8002514 <HAL_GetTick>
 8005de0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	2319      	movs	r3, #25
 8005de8:	2201      	movs	r2, #1
 8005dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f9e5 	bl	80061be <I2C_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e0be      	b.n	8005f7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2221      	movs	r2, #33	; 0x21
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	893a      	ldrh	r2, [r7, #8]
 8005e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2bff      	cmp	r3, #255	; 0xff
 8005e2e:	d90e      	bls.n	8005e4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	22ff      	movs	r2, #255	; 0xff
 8005e34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	8979      	ldrh	r1, [r7, #10]
 8005e3e:	4b51      	ldr	r3, [pc, #324]	; (8005f84 <HAL_I2C_Master_Transmit+0x1e0>)
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fbdc 	bl	8006604 <I2C_TransferConfig>
 8005e4c:	e06c      	b.n	8005f28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	8979      	ldrh	r1, [r7, #10]
 8005e60:	4b48      	ldr	r3, [pc, #288]	; (8005f84 <HAL_I2C_Master_Transmit+0x1e0>)
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fbcb 	bl	8006604 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e6e:	e05b      	b.n	8005f28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	6a39      	ldr	r1, [r7, #32]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f9e2 	bl	800623e <I2C_WaitOnTXISFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e07b      	b.n	8005f7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	781a      	ldrb	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d034      	beq.n	8005f28 <HAL_I2C_Master_Transmit+0x184>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d130      	bne.n	8005f28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2180      	movs	r1, #128	; 0x80
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f974 	bl	80061be <I2C_WaitOnFlagUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e04d      	b.n	8005f7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2bff      	cmp	r3, #255	; 0xff
 8005ee8:	d90e      	bls.n	8005f08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	22ff      	movs	r2, #255	; 0xff
 8005eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	8979      	ldrh	r1, [r7, #10]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fb7f 	bl	8006604 <I2C_TransferConfig>
 8005f06:	e00f      	b.n	8005f28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	8979      	ldrh	r1, [r7, #10]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fb6e 	bl	8006604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d19e      	bne.n	8005e70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f9c1 	bl	80062be <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e01a      	b.n	8005f7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6859      	ldr	r1, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <HAL_I2C_Master_Transmit+0x1e4>)
 8005f5a:	400b      	ands	r3, r1
 8005f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e000      	b.n	8005f7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
  }
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	80002000 	.word	0x80002000
 8005f88:	fe00e800 	.word	0xfe00e800

08005f8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	461a      	mov	r2, r3
 8005f98:	460b      	mov	r3, r1
 8005f9a:	817b      	strh	r3, [r7, #10]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	f040 80db 	bne.w	8006164 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_I2C_Master_Receive+0x30>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e0d4      	b.n	8006166 <HAL_I2C_Master_Receive+0x1da>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fc4:	f7fc faa6 	bl	8002514 <HAL_GetTick>
 8005fc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	2319      	movs	r3, #25
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f8f1 	bl	80061be <I2C_WaitOnFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e0bf      	b.n	8006166 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2222      	movs	r2, #34	; 0x22
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	893a      	ldrh	r2, [r7, #8]
 8006006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	2bff      	cmp	r3, #255	; 0xff
 8006016:	d90e      	bls.n	8006036 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	22ff      	movs	r2, #255	; 0xff
 800601c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006022:	b2da      	uxtb	r2, r3
 8006024:	8979      	ldrh	r1, [r7, #10]
 8006026:	4b52      	ldr	r3, [pc, #328]	; (8006170 <HAL_I2C_Master_Receive+0x1e4>)
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fae8 	bl	8006604 <I2C_TransferConfig>
 8006034:	e06d      	b.n	8006112 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	b2da      	uxtb	r2, r3
 8006046:	8979      	ldrh	r1, [r7, #10]
 8006048:	4b49      	ldr	r3, [pc, #292]	; (8006170 <HAL_I2C_Master_Receive+0x1e4>)
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fad7 	bl	8006604 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006056:	e05c      	b.n	8006112 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	6a39      	ldr	r1, [r7, #32]
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f96b 	bl	8006338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e07c      	b.n	8006166 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d034      	beq.n	8006112 <HAL_I2C_Master_Receive+0x186>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d130      	bne.n	8006112 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f87f 	bl	80061be <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e04d      	b.n	8006166 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2bff      	cmp	r3, #255	; 0xff
 80060d2:	d90e      	bls.n	80060f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	22ff      	movs	r2, #255	; 0xff
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	8979      	ldrh	r1, [r7, #10]
 80060e2:	2300      	movs	r3, #0
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fa8a 	bl	8006604 <I2C_TransferConfig>
 80060f0:	e00f      	b.n	8006112 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006100:	b2da      	uxtb	r2, r3
 8006102:	8979      	ldrh	r1, [r7, #10]
 8006104:	2300      	movs	r3, #0
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fa79 	bl	8006604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d19d      	bne.n	8006058 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	6a39      	ldr	r1, [r7, #32]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f8cc 	bl	80062be <I2C_WaitOnSTOPFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e01a      	b.n	8006166 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2220      	movs	r2, #32
 8006136:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <HAL_I2C_Master_Receive+0x1e8>)
 8006144:	400b      	ands	r3, r1
 8006146:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	e000      	b.n	8006166 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006164:	2302      	movs	r3, #2
  }
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	80002400 	.word	0x80002400
 8006174:	fe00e800 	.word	0xfe00e800

08006178 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b02      	cmp	r3, #2
 800618c:	d103      	bne.n	8006196 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d007      	beq.n	80061b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	619a      	str	r2, [r3, #24]
  }
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc80      	pop	{r7}
 80061bc:	4770      	bx	lr

080061be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	4613      	mov	r3, r2
 80061cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ce:	e022      	b.n	8006216 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d01e      	beq.n	8006216 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d8:	f7fc f99c 	bl	8002514 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d302      	bcc.n	80061ee <I2C_WaitOnFlagUntilTimeout+0x30>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d113      	bne.n	8006216 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e00f      	b.n	8006236 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4013      	ands	r3, r2
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	429a      	cmp	r2, r3
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	429a      	cmp	r2, r3
 8006232:	d0cd      	beq.n	80061d0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800624a:	e02c      	b.n	80062a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f8eb 	bl	800642c <I2C_IsErrorOccurred>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e02a      	b.n	80062b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d01e      	beq.n	80062a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006268:	f7fc f954 	bl	8002514 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	429a      	cmp	r2, r3
 8006276:	d302      	bcc.n	800627e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d113      	bne.n	80062a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e007      	b.n	80062b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d1cb      	bne.n	800624c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062ca:	e028      	b.n	800631e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f8ab 	bl	800642c <I2C_IsErrorOccurred>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e026      	b.n	800632e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7fc f918 	bl	8002514 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d302      	bcc.n	80062f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d113      	bne.n	800631e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e007      	b.n	800632e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d1cf      	bne.n	80062cc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006344:	e064      	b.n	8006410 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f86e 	bl	800642c <I2C_IsErrorOccurred>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e062      	b.n	8006420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b20      	cmp	r3, #32
 8006366:	d138      	bne.n	80063da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d105      	bne.n	8006382 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e04e      	b.n	8006420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b10      	cmp	r3, #16
 800638e:	d107      	bne.n	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2210      	movs	r2, #16
 8006396:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2204      	movs	r2, #4
 800639c:	645a      	str	r2, [r3, #68]	; 0x44
 800639e:	e002      	b.n	80063a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2220      	movs	r2, #32
 80063ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6859      	ldr	r1, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80063ba:	400b      	ands	r3, r1
 80063bc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e022      	b.n	8006420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fc f89b 	bl	8002514 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10f      	bne.n	8006410 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e007      	b.n	8006420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b04      	cmp	r3, #4
 800641c:	d193      	bne.n	8006346 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	fe00e800 	.word	0xfe00e800

0800642c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	; 0x28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d075      	beq.n	8006544 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2210      	movs	r2, #16
 800645e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006460:	e056      	b.n	8006510 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d052      	beq.n	8006510 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800646a:	f7fc f853 	bl	8002514 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <I2C_IsErrorOccurred+0x54>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d147      	bne.n	8006510 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800649e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a2:	d12e      	bne.n	8006502 <I2C_IsErrorOccurred+0xd6>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064aa:	d02a      	beq.n	8006502 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80064ac:	7cfb      	ldrb	r3, [r7, #19]
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d027      	beq.n	8006502 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064c2:	f7fc f827 	bl	8002514 <HAL_GetTick>
 80064c6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c8:	e01b      	b.n	8006502 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064ca:	f7fc f823 	bl	8002514 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b19      	cmp	r3, #25
 80064d6:	d914      	bls.n	8006502 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b20      	cmp	r3, #32
 800650e:	d1dc      	bne.n	80064ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b20      	cmp	r3, #32
 800651c:	d003      	beq.n	8006526 <I2C_IsErrorOccurred+0xfa>
 800651e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006522:	2b00      	cmp	r3, #0
 8006524:	d09d      	beq.n	8006462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800652a:	2b00      	cmp	r3, #0
 800652c:	d103      	bne.n	8006536 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2220      	movs	r2, #32
 8006534:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f043 0304 	orr.w	r3, r3, #4
 800653c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	f043 0308 	orr.w	r3, r3, #8
 800657e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00b      	beq.n	80065b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01c      	beq.n	80065f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7ff fddc 	bl	8006178 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6859      	ldr	r1, [r3, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <I2C_IsErrorOccurred+0x1d4>)
 80065cc:	400b      	ands	r3, r1
 80065ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3728      	adds	r7, #40	; 0x28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	fe00e800 	.word	0xfe00e800

08006604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	460b      	mov	r3, r1
 8006610:	817b      	strh	r3, [r7, #10]
 8006612:	4613      	mov	r3, r2
 8006614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006616:	897b      	ldrh	r3, [r7, #10]
 8006618:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800661c:	7a7b      	ldrb	r3, [r7, #9]
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006624:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	4313      	orrs	r3, r2
 800662e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006632:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	0d5b      	lsrs	r3, r3, #21
 800663e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006642:	4b07      	ldr	r3, [pc, #28]	; (8006660 <I2C_TransferConfig+0x5c>)
 8006644:	430b      	orrs	r3, r1
 8006646:	43db      	mvns	r3, r3
 8006648:	ea02 0103 	and.w	r1, r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr
 8006660:	03ff63ff 	.word	0x03ff63ff

08006664 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b20      	cmp	r3, #32
 8006678:	d138      	bne.n	80066ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006684:	2302      	movs	r3, #2
 8006686:	e032      	b.n	80066ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2224      	movs	r2, #36	; 0x24
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0201 	bic.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6819      	ldr	r1, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e000      	b.n	80066ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066ec:	2302      	movs	r3, #2
  }
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b20      	cmp	r3, #32
 800670c:	d139      	bne.n	8006782 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006718:	2302      	movs	r3, #2
 800671a:	e033      	b.n	8006784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2224      	movs	r2, #36	; 0x24
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800674a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0201 	orr.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	e000      	b.n	8006784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006782:	2302      	movs	r3, #2
  }
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
	...

08006790 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a03      	ldr	r2, [pc, #12]	; (80067a8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800679a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679e:	6013      	str	r3, [r2, #0]
}
 80067a0:	bf00      	nop
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	58000400 	.word	0x58000400

080067ac <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10c      	bne.n	80067d8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <HAL_PWR_EnterSLEEPMode+0x60>)
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ca:	d10d      	bne.n	80067e8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80067cc:	f000 f83c 	bl	8006848 <HAL_PWREx_DisableLowPowerRunMode>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80067d6:	e015      	b.n	8006804 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <HAL_PWR_EnterSLEEPMode+0x60>)
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80067e4:	f000 f822 	bl	800682c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80067e8:	4b09      	ldr	r3, [pc, #36]	; (8006810 <HAL_PWR_EnterSLEEPMode+0x64>)
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	4a08      	ldr	r2, [pc, #32]	; (8006810 <HAL_PWR_EnterSLEEPMode+0x64>)
 80067ee:	f023 0304 	bic.w	r3, r3, #4
 80067f2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80067fa:	bf30      	wfi
 80067fc:	e002      	b.n	8006804 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80067fe:	bf40      	sev
    __WFE();
 8006800:	bf20      	wfe
    __WFE();
 8006802:	bf20      	wfe
  }
}
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	58000400 	.word	0x58000400
 8006810:	e000ed00 	.word	0xe000ed00

08006814 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006818:	4b03      	ldr	r3, [pc, #12]	; (8006828 <HAL_PWREx_GetVoltageRange+0x14>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006820:	4618      	mov	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr
 8006828:	58000400 	.word	0x58000400

0800682c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a03      	ldr	r2, [pc, #12]	; (8006844 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800683a:	6013      	str	r3, [r2, #0]
}
 800683c:	bf00      	nop
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	58000400 	.word	0x58000400

08006848 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006858:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2232      	movs	r2, #50	; 0x32
 8006860:	fb02 f303 	mul.w	r3, r2, r3
 8006864:	4a12      	ldr	r2, [pc, #72]	; (80068b0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	0c9b      	lsrs	r3, r3, #18
 800686c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800686e:	e002      	b.n	8006876 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3b01      	subs	r3, #1
 8006874:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800687e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006882:	d102      	bne.n	800688a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f2      	bne.n	8006870 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d101      	bne.n	800689c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e000      	b.n	800689e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr
 80068a8:	58000400 	.word	0x58000400
 80068ac:	20000004 	.word	0x20000004
 80068b0:	431bde83 	.word	0x431bde83

080068b4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80068be:	4b10      	ldr	r3, [pc, #64]	; (8006900 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80068d4:	f043 0304 	orr.w	r3, r3, #4
 80068d8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80068e0:	bf30      	wfi
 80068e2:	e002      	b.n	80068ea <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80068e4:	bf40      	sev
    __WFE();
 80068e6:	bf20      	wfe
    __WFE();
 80068e8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	4a05      	ldr	r2, [pc, #20]	; (8006904 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80068f0:	f023 0304 	bic.w	r3, r3, #4
 80068f4:	6113      	str	r3, [r2, #16]
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr
 8006900:	58000400 	.word	0x58000400
 8006904:	e000ed00 	.word	0xe000ed00

08006908 <LL_PWR_IsEnabledBkUpAccess>:
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006918:	d101      	bne.n	800691e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	58000400 	.word	0x58000400

0800692c <LL_RCC_HSE_EnableTcxo>:
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800693a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800693e:	6013      	str	r3, [r2, #0]
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr

08006948 <LL_RCC_HSE_DisableTcxo>:
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800694c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr

08006964 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006976:	d101      	bne.n	800697c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	bc80      	pop	{r7}
 8006984:	4770      	bx	lr

08006986 <LL_RCC_HSE_Enable>:
{
 8006986:	b480      	push	{r7}
 8006988:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800698a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006998:	6013      	str	r3, [r2, #0]
}
 800699a:	bf00      	nop
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <LL_RCC_HSE_Disable>:
{
 80069a2:	b480      	push	{r7}
 80069a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80069a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b4:	6013      	str	r3, [r2, #0]
}
 80069b6:	bf00      	nop
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <LL_RCC_HSE_IsReady>:
{
 80069be:	b480      	push	{r7}
 80069c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80069c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d0:	d101      	bne.n	80069d6 <LL_RCC_HSE_IsReady+0x18>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <LL_RCC_HSE_IsReady+0x1a>
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr

080069e0 <LL_RCC_HSI_Enable>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80069e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f2:	6013      	str	r3, [r2, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <LL_RCC_HSI_Disable>:
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0e:	6013      	str	r3, [r2, #0]
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <LL_RCC_HSI_IsReady>:
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2a:	d101      	bne.n	8006a30 <LL_RCC_HSI_IsReady+0x18>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <LL_RCC_HSI_IsReady+0x1a>
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <LL_RCC_HSI_SetCalibTrimming>:
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	061b      	lsls	r3, r3, #24
 8006a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a54:	4313      	orrs	r3, r2
 8006a56:	604b      	str	r3, [r1, #4]
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr

08006a62 <LL_RCC_LSE_IsReady>:
{
 8006a62:	b480      	push	{r7}
 8006a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d101      	bne.n	8006a7a <LL_RCC_LSE_IsReady+0x18>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <LL_RCC_LSE_IsReady+0x1a>
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <LL_RCC_LSI_Enable>:
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a94:	f043 0301 	orr.w	r3, r3, #1
 8006a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006a9c:	bf00      	nop
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_RCC_LSI_Disable>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006abc:	bf00      	nop
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <LL_RCC_LSI_IsReady>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d101      	bne.n	8006adc <LL_RCC_LSI_IsReady+0x18>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <LL_RCC_LSI_IsReady+0x1a>
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <LL_RCC_MSI_Enable>:
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	6013      	str	r3, [r2, #0]
}
 8006afa:	bf00      	nop
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <LL_RCC_MSI_Disable>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	6013      	str	r3, [r2, #0]
}
 8006b16:	bf00      	nop
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <LL_RCC_MSI_IsReady>:
{
 8006b1e:	b480      	push	{r7}
 8006b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d101      	bne.n	8006b34 <LL_RCC_MSI_IsReady+0x16>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <LL_RCC_MSI_IsReady+0x18>
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006b3e:	b480      	push	{r7}
 8006b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d101      	bne.n	8006b54 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <LL_RCC_MSI_GetRange>:
{
 8006b5e:	b480      	push	{r7}
 8006b60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <LL_RCC_MSI_SetCalibTrimming>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	604b      	str	r3, [r1, #4]
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr

08006bb4 <LL_RCC_SetSysClkSource>:
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f023 0203 	bic.w	r2, r3, #3
 8006bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	608b      	str	r3, [r1, #8]
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr

08006bda <LL_RCC_GetSysClkSource>:
{
 8006bda:	b480      	push	{r7}
 8006bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 030c 	and.w	r3, r3, #12
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <LL_RCC_SetAHBPrescaler>:
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	608b      	str	r3, [r1, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <LL_RCC_SetAHB3Prescaler>:
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006c26:	f023 020f 	bic.w	r2, r3, #15
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <LL_RCC_SetAPB1Prescaler>:
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <LL_RCC_SetAPB2Prescaler>:
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	608b      	str	r3, [r1, #8]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr

08006c8e <LL_RCC_GetAHBPrescaler>:
{
 8006c8e:	b480      	push	{r7}
 8006c90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <LL_RCC_GetAHB3Prescaler>:
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <LL_RCC_GetAPB1Prescaler>:
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <LL_RCC_GetAPB2Prescaler>:
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006cea:	b480      	push	{r7}
 8006cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cfc:	6013      	str	r3, [r2, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr

08006d06 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006d06:	b480      	push	{r7}
 8006d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d18:	6013      	str	r3, [r2, #0]
}
 8006d1a:	bf00      	nop
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006d22:	b480      	push	{r7}
 8006d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d34:	d101      	bne.n	8006d3a <LL_RCC_PLL_IsReady+0x18>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <LL_RCC_PLL_IsReady+0x1a>
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr

08006d44 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006d72:	b480      	push	{r7}
 8006d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0303 	and.w	r3, r3, #3
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db0:	d101      	bne.n	8006db6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr

08006dc0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd4:	d101      	bne.n	8006dda <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df6:	d101      	bne.n	8006dfc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006e06:	b480      	push	{r7}
 8006e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e18:	d101      	bne.n	8006e1e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e38b      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3a:	f7ff fece 	bl	8006bda <LL_RCC_GetSysClkSource>
 8006e3e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e40:	f7ff ffa2 	bl	8006d88 <LL_RCC_PLL_GetMainSource>
 8006e44:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80c9 	beq.w	8006fe6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_RCC_OscConfig+0x3e>
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2b0c      	cmp	r3, #12
 8006e5e:	d17b      	bne.n	8006f58 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d178      	bne.n	8006f58 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e66:	f7ff fe5a 	bl	8006b1e <LL_RCC_MSI_IsReady>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_RCC_OscConfig+0x54>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e36a      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <HAL_RCC_OscConfig+0x72>
 8006e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e98:	e006      	b.n	8006ea8 <HAL_RCC_OscConfig+0x80>
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d222      	bcs.n	8006ef2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fd51 	bl	8007958 <RCC_SetFlashLatencyFromMSIRange>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e348      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eca:	f043 0308 	orr.w	r3, r3, #8
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fe4e 	bl	8006b8c <LL_RCC_MSI_SetCalibTrimming>
 8006ef0:	e021      	b.n	8006f36 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006efc:	f043 0308 	orr.w	r3, r3, #8
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f14:	4313      	orrs	r3, r2
 8006f16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fe35 	bl	8006b8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fd16 	bl	8007958 <RCC_SetFlashLatencyFromMSIRange>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e30d      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f36:	f000 fcd7 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4aa1      	ldr	r2, [pc, #644]	; (80071c4 <HAL_RCC_OscConfig+0x39c>)
 8006f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f40:	4ba1      	ldr	r3, [pc, #644]	; (80071c8 <HAL_RCC_OscConfig+0x3a0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fb fadb 	bl	8002500 <HAL_InitTick>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006f4e:	7cfb      	ldrb	r3, [r7, #19]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d047      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006f54:	7cfb      	ldrb	r3, [r7, #19]
 8006f56:	e2fc      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d02c      	beq.n	8006fba <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f60:	f7ff fdc1 	bl	8006ae6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f64:	f7fb fad6 	bl	8002514 <HAL_GetTick>
 8006f68:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f6c:	f7fb fad2 	bl	8002514 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e2e9      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006f7e:	f7ff fdce 	bl	8006b1e <LL_RCC_MSI_IsReady>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f1      	beq.n	8006f6c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f92:	f043 0308 	orr.w	r3, r3, #8
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006faa:	4313      	orrs	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff fdea 	bl	8006b8c <LL_RCC_MSI_SetCalibTrimming>
 8006fb8:	e015      	b.n	8006fe6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006fba:	f7ff fda2 	bl	8006b02 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fbe:	f7fb faa9 	bl	8002514 <HAL_GetTick>
 8006fc2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fc6:	f7fb faa5 	bl	8002514 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e2bc      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006fd8:	f7ff fda1 	bl	8006b1e <LL_RCC_MSI_IsReady>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f1      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x19e>
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fe4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d05f      	beq.n	80070b2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d005      	beq.n	8007004 <HAL_RCC_OscConfig+0x1dc>
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d10d      	bne.n	800701a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d10a      	bne.n	800701a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007004:	f7ff fcdb 	bl	80069be <LL_RCC_HSE_IsReady>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d050      	beq.n	80070b0 <HAL_RCC_OscConfig+0x288>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d14c      	bne.n	80070b0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e29b      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800701a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800702c:	4313      	orrs	r3, r2
 800702e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d102      	bne.n	8007040 <HAL_RCC_OscConfig+0x218>
 800703a:	f7ff fca4 	bl	8006986 <LL_RCC_HSE_Enable>
 800703e:	e00d      	b.n	800705c <HAL_RCC_OscConfig+0x234>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007048:	d104      	bne.n	8007054 <HAL_RCC_OscConfig+0x22c>
 800704a:	f7ff fc6f 	bl	800692c <LL_RCC_HSE_EnableTcxo>
 800704e:	f7ff fc9a 	bl	8006986 <LL_RCC_HSE_Enable>
 8007052:	e003      	b.n	800705c <HAL_RCC_OscConfig+0x234>
 8007054:	f7ff fca5 	bl	80069a2 <LL_RCC_HSE_Disable>
 8007058:	f7ff fc76 	bl	8006948 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d012      	beq.n	800708a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007064:	f7fb fa56 	bl	8002514 <HAL_GetTick>
 8007068:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800706c:	f7fb fa52 	bl	8002514 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b64      	cmp	r3, #100	; 0x64
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e269      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800707e:	f7ff fc9e 	bl	80069be <LL_RCC_HSE_IsReady>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f1      	beq.n	800706c <HAL_RCC_OscConfig+0x244>
 8007088:	e013      	b.n	80070b2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708a:	f7fb fa43 	bl	8002514 <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007092:	f7fb fa3f 	bl	8002514 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b64      	cmp	r3, #100	; 0x64
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e256      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80070a4:	f7ff fc8b 	bl	80069be <LL_RCC_HSE_IsReady>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f1      	bne.n	8007092 <HAL_RCC_OscConfig+0x26a>
 80070ae:	e000      	b.n	80070b2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d04b      	beq.n	8007156 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_OscConfig+0x2a8>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b0c      	cmp	r3, #12
 80070c8:	d113      	bne.n	80070f2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d110      	bne.n	80070f2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070d0:	f7ff fca2 	bl	8006a18 <LL_RCC_HSI_IsReady>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_RCC_OscConfig+0x2be>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e235      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fca5 	bl	8006a3a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070f0:	e031      	b.n	8007156 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d019      	beq.n	800712e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070fa:	f7ff fc71 	bl	80069e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fe:	f7fb fa09 	bl	8002514 <HAL_GetTick>
 8007102:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007104:	e008      	b.n	8007118 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007106:	f7fb fa05 	bl	8002514 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e21c      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007118:	f7ff fc7e 	bl	8006a18 <LL_RCC_HSI_IsReady>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f1      	beq.n	8007106 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fc87 	bl	8006a3a <LL_RCC_HSI_SetCalibTrimming>
 800712c:	e013      	b.n	8007156 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800712e:	f7ff fc65 	bl	80069fc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007132:	f7fb f9ef 	bl	8002514 <HAL_GetTick>
 8007136:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007138:	e008      	b.n	800714c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800713a:	f7fb f9eb 	bl	8002514 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e202      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800714c:	f7ff fc64 	bl	8006a18 <LL_RCC_HSI_IsReady>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f1      	bne.n	800713a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d06f      	beq.n	8007242 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d057      	beq.n	800721a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800716a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007172:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	429a      	cmp	r2, r3
 8007180:	d036      	beq.n	80071f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d006      	beq.n	800719a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e1db      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d018      	beq.n	80071d6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80071a4:	f7ff fc7e 	bl	8006aa4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071a8:	f7fb f9b4 	bl	8002514 <HAL_GetTick>
 80071ac:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80071ae:	e00d      	b.n	80071cc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b0:	f7fb f9b0 	bl	8002514 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b11      	cmp	r3, #17
 80071bc:	d906      	bls.n	80071cc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e1c7      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
 80071c2:	bf00      	nop
 80071c4:	20000004 	.word	0x20000004
 80071c8:	2000000c 	.word	0x2000000c
          while (LL_RCC_LSI_IsReady() != 0U)
 80071cc:	f7ff fc7a 	bl	8006ac4 <LL_RCC_LSI_IsReady>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1ec      	bne.n	80071b0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80071d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071de:	f023 0210 	bic.w	r2, r3, #16
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f0:	f7ff fc48 	bl	8006a84 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f4:	f7fb f98e 	bl	8002514 <HAL_GetTick>
 80071f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071fc:	f7fb f98a 	bl	8002514 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b11      	cmp	r3, #17
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e1a1      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800720e:	f7ff fc59 	bl	8006ac4 <LL_RCC_LSI_IsReady>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f1      	beq.n	80071fc <HAL_RCC_OscConfig+0x3d4>
 8007218:	e013      	b.n	8007242 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800721a:	f7ff fc43 	bl	8006aa4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800721e:	f7fb f979 	bl	8002514 <HAL_GetTick>
 8007222:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007226:	f7fb f975 	bl	8002514 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b11      	cmp	r3, #17
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e18c      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007238:	f7ff fc44 	bl	8006ac4 <LL_RCC_LSI_IsReady>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f1      	bne.n	8007226 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 80d8 	beq.w	8007400 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007250:	f7ff fb5a 	bl	8006908 <LL_PWR_IsEnabledBkUpAccess>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d113      	bne.n	8007282 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800725a:	f7ff fa99 	bl	8006790 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800725e:	f7fb f959 	bl	8002514 <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007264:	e008      	b.n	8007278 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007266:	f7fb f955 	bl	8002514 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e16c      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007278:	f7ff fb46 	bl	8006908 <LL_PWR_IsEnabledBkUpAccess>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f1      	beq.n	8007266 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d07b      	beq.n	8007382 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2b85      	cmp	r3, #133	; 0x85
 8007290:	d003      	beq.n	800729a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b05      	cmp	r3, #5
 8007298:	d109      	bne.n	80072ae <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800729a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072a6:	f043 0304 	orr.w	r3, r3, #4
 80072aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ae:	f7fb f931 	bl	8002514 <HAL_GetTick>
 80072b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80072c8:	e00a      	b.n	80072e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ca:	f7fb f923 	bl	8002514 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d8:	4293      	cmp	r3, r2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e138      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80072e0:	f7ff fbbf 	bl	8006a62 <LL_RCC_LSE_IsReady>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0ef      	beq.n	80072ca <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b81      	cmp	r3, #129	; 0x81
 80072f0:	d003      	beq.n	80072fa <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b85      	cmp	r3, #133	; 0x85
 80072f8:	d121      	bne.n	800733e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fa:	f7fb f90b 	bl	8002514 <HAL_GetTick>
 80072fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800730c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007314:	e00a      	b.n	800732c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007316:	f7fb f8fd 	bl	8002514 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	f241 3288 	movw	r2, #5000	; 0x1388
 8007324:	4293      	cmp	r3, r2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e112      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800732c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0ec      	beq.n	8007316 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800733c:	e060      	b.n	8007400 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733e:	f7fb f8e9 	bl	8002514 <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007358:	e00a      	b.n	8007370 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735a:	f7fb f8db 	bl	8002514 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f241 3288 	movw	r2, #5000	; 0x1388
 8007368:	4293      	cmp	r3, r2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e0f0      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1ec      	bne.n	800735a <HAL_RCC_OscConfig+0x532>
 8007380:	e03e      	b.n	8007400 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fb f8c7 	bl	8002514 <HAL_GetTick>
 8007386:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800738c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fb f8b9 	bl	8002514 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e0ce      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1ec      	bne.n	800739e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c4:	f7fb f8a6 	bl	8002514 <HAL_GetTick>
 80073c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073d6:	f023 0301 	bic.w	r3, r3, #1
 80073da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80073de:	e00a      	b.n	80073f6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073e0:	f7fb f898 	bl	8002514 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e0ad      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80073f6:	f7ff fb34 	bl	8006a62 <LL_RCC_LSE_IsReady>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ef      	bne.n	80073e0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80a3 	beq.w	8007550 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	2b0c      	cmp	r3, #12
 800740e:	d076      	beq.n	80074fe <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	2b02      	cmp	r3, #2
 8007416:	d14b      	bne.n	80074b0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007418:	f7ff fc75 	bl	8006d06 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fb f87a 	bl	8002514 <HAL_GetTick>
 8007420:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007424:	f7fb f876 	bl	8002514 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b0a      	cmp	r3, #10
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e08d      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007436:	f7ff fc74 	bl	8006d22 <LL_RCC_PLL_IsReady>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f1      	bne.n	8007424 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	4b45      	ldr	r3, [pc, #276]	; (800755c <HAL_RCC_OscConfig+0x734>)
 8007448:	4013      	ands	r3, r2
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007452:	4311      	orrs	r1, r2
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007458:	0212      	lsls	r2, r2, #8
 800745a:	4311      	orrs	r1, r2
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007460:	4311      	orrs	r1, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007466:	4311      	orrs	r1, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800746c:	430a      	orrs	r2, r1
 800746e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007472:	4313      	orrs	r3, r2
 8007474:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007476:	f7ff fc38 	bl	8006cea <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800747a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007488:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748a:	f7fb f843 	bl	8002514 <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007492:	f7fb f83f 	bl	8002514 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b0a      	cmp	r3, #10
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e056      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80074a4:	f7ff fc3d 	bl	8006d22 <LL_RCC_PLL_IsReady>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0f1      	beq.n	8007492 <HAL_RCC_OscConfig+0x66a>
 80074ae:	e04f      	b.n	8007550 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b0:	f7ff fc29 	bl	8006d06 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80074c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ce:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80074d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d8:	f7fb f81c 	bl	8002514 <HAL_GetTick>
 80074dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fb f818 	bl	8002514 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b0a      	cmp	r3, #10
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e02f      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80074f2:	f7ff fc16 	bl	8006d22 <LL_RCC_PLL_IsReady>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f1      	bne.n	80074e0 <HAL_RCC_OscConfig+0x6b8>
 80074fc:	e028      	b.n	8007550 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e023      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800750a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f003 0203 	and.w	r2, r3, #3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	429a      	cmp	r2, r3
 800751e:	d115      	bne.n	800754c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	429a      	cmp	r2, r3
 800752c:	d10e      	bne.n	800754c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	429a      	cmp	r2, r3
 800753c:	d106      	bne.n	800754c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	11c1808c 	.word	0x11c1808c

08007560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e10f      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007574:	4b89      	ldr	r3, [pc, #548]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d91b      	bls.n	80075ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007582:	4b86      	ldr	r3, [pc, #536]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f023 0207 	bic.w	r2, r3, #7
 800758a:	4984      	ldr	r1, [pc, #528]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007592:	f7fa ffbf 	bl	8002514 <HAL_GetTick>
 8007596:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007598:	e008      	b.n	80075ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800759a:	f7fa ffbb 	bl	8002514 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e0f3      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ac:	4b7b      	ldr	r3, [pc, #492]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d1ef      	bne.n	800759a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d016      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7ff fb10 	bl	8006bf0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075d0:	f7fa ffa0 	bl	8002514 <HAL_GetTick>
 80075d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075d8:	f7fa ff9c 	bl	8002514 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e0d4      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075ea:	f7ff fbd8 	bl	8006d9e <LL_RCC_IsActiveFlag_HPRE>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0f1      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d016      	beq.n	800762e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fb06 	bl	8006c16 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800760a:	f7fa ff83 	bl	8002514 <HAL_GetTick>
 800760e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007610:	e008      	b.n	8007624 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007612:	f7fa ff7f 	bl	8002514 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e0b7      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007624:	f7ff fbcc 	bl	8006dc0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f1      	beq.n	8007612 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	d016      	beq.n	8007668 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff faff 	bl	8006c42 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007644:	f7fa ff66 	bl	8002514 <HAL_GetTick>
 8007648:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800764a:	e008      	b.n	800765e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800764c:	f7fa ff62 	bl	8002514 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d901      	bls.n	800765e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e09a      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800765e:	f7ff fbc1 	bl	8006de4 <LL_RCC_IsActiveFlag_PPRE1>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0f1      	beq.n	800764c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d017      	beq.n	80076a4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff faf4 	bl	8006c68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007680:	f7fa ff48 	bl	8002514 <HAL_GetTick>
 8007684:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007686:	e008      	b.n	800769a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007688:	f7fa ff44 	bl	8002514 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e07c      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800769a:	f7ff fbb4 	bl	8006e06 <LL_RCC_IsActiveFlag_PPRE2>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0f1      	beq.n	8007688 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d043      	beq.n	8007738 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d106      	bne.n	80076c6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80076b8:	f7ff f981 	bl	80069be <LL_RCC_HSE_IsReady>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d11e      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e066      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d106      	bne.n	80076dc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80076ce:	f7ff fb28 	bl	8006d22 <LL_RCC_PLL_IsReady>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d113      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e05b      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80076e4:	f7ff fa1b 	bl	8006b1e <LL_RCC_MSI_IsReady>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d108      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e050      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80076f2:	f7ff f991 	bl	8006a18 <LL_RCC_HSI_IsReady>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e049      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fa55 	bl	8006bb4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770a:	f7fa ff03 	bl	8002514 <HAL_GetTick>
 800770e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007710:	e00a      	b.n	8007728 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007712:	f7fa feff 	bl	8002514 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007720:	4293      	cmp	r3, r2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e035      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007728:	f7ff fa57 	bl	8006bda <LL_RCC_GetSysClkSource>
 800772c:	4602      	mov	r2, r0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	429a      	cmp	r2, r3
 8007736:	d1ec      	bne.n	8007712 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007738:	4b18      	ldr	r3, [pc, #96]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d21b      	bcs.n	800777e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007746:	4b15      	ldr	r3, [pc, #84]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f023 0207 	bic.w	r2, r3, #7
 800774e:	4913      	ldr	r1, [pc, #76]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	4313      	orrs	r3, r2
 8007754:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007756:	f7fa fedd 	bl	8002514 <HAL_GetTick>
 800775a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800775c:	e008      	b.n	8007770 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800775e:	f7fa fed9 	bl	8002514 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d901      	bls.n	8007770 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e011      	b.n	8007794 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <HAL_RCC_ClockConfig+0x23c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d1ef      	bne.n	800775e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800777e:	f000 f8b3 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8007782:	4603      	mov	r3, r0
 8007784:	4a06      	ldr	r2, [pc, #24]	; (80077a0 <HAL_RCC_ClockConfig+0x240>)
 8007786:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <HAL_RCC_ClockConfig+0x244>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f7fa feb7 	bl	8002500 <HAL_InitTick>
 8007792:	4603      	mov	r3, r0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	58004000 	.word	0x58004000
 80077a0:	20000004 	.word	0x20000004
 80077a4:	2000000c 	.word	0x2000000c

080077a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077b6:	f7ff fa10 	bl	8006bda <LL_RCC_GetSysClkSource>
 80077ba:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077bc:	f7ff fae4 	bl	8006d88 <LL_RCC_PLL_GetMainSource>
 80077c0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b0c      	cmp	r3, #12
 80077cc:	d139      	bne.n	8007842 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d136      	bne.n	8007842 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80077d4:	f7ff f9b3 	bl	8006b3e <LL_RCC_MSI_IsEnabledRangeSelect>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d115      	bne.n	800780a <HAL_RCC_GetSysClockFreq+0x62>
 80077de:	f7ff f9ae 	bl	8006b3e <LL_RCC_MSI_IsEnabledRangeSelect>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d106      	bne.n	80077f6 <HAL_RCC_GetSysClockFreq+0x4e>
 80077e8:	f7ff f9b9 	bl	8006b5e <LL_RCC_MSI_GetRange>
 80077ec:	4603      	mov	r3, r0
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	e005      	b.n	8007802 <HAL_RCC_GetSysClockFreq+0x5a>
 80077f6:	f7ff f9bd 	bl	8006b74 <LL_RCC_MSI_GetRangeAfterStandby>
 80077fa:	4603      	mov	r3, r0
 80077fc:	0a1b      	lsrs	r3, r3, #8
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	4a36      	ldr	r2, [pc, #216]	; (80078dc <HAL_RCC_GetSysClockFreq+0x134>)
 8007804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007808:	e014      	b.n	8007834 <HAL_RCC_GetSysClockFreq+0x8c>
 800780a:	f7ff f998 	bl	8006b3e <LL_RCC_MSI_IsEnabledRangeSelect>
 800780e:	4603      	mov	r3, r0
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <HAL_RCC_GetSysClockFreq+0x7a>
 8007814:	f7ff f9a3 	bl	8006b5e <LL_RCC_MSI_GetRange>
 8007818:	4603      	mov	r3, r0
 800781a:	091b      	lsrs	r3, r3, #4
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	e005      	b.n	800782e <HAL_RCC_GetSysClockFreq+0x86>
 8007822:	f7ff f9a7 	bl	8006b74 <LL_RCC_MSI_GetRangeAfterStandby>
 8007826:	4603      	mov	r3, r0
 8007828:	091b      	lsrs	r3, r3, #4
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <HAL_RCC_GetSysClockFreq+0x134>)
 8007830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007834:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d115      	bne.n	8007868 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007840:	e012      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b04      	cmp	r3, #4
 8007846:	d102      	bne.n	800784e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007848:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e00c      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b08      	cmp	r3, #8
 8007852:	d109      	bne.n	8007868 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007854:	f7ff f886 	bl	8006964 <LL_RCC_HSE_IsEnabledDiv2>
 8007858:	4603      	mov	r3, r0
 800785a:	2b01      	cmp	r3, #1
 800785c:	d102      	bne.n	8007864 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800785e:	4b20      	ldr	r3, [pc, #128]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	e001      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007864:	4b1f      	ldr	r3, [pc, #124]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007866:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007868:	f7ff f9b7 	bl	8006bda <LL_RCC_GetSysClkSource>
 800786c:	4603      	mov	r3, r0
 800786e:	2b0c      	cmp	r3, #12
 8007870:	d12f      	bne.n	80078d2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007872:	f7ff fa89 	bl	8006d88 <LL_RCC_PLL_GetMainSource>
 8007876:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d003      	beq.n	8007886 <HAL_RCC_GetSysClockFreq+0xde>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b03      	cmp	r3, #3
 8007882:	d003      	beq.n	800788c <HAL_RCC_GetSysClockFreq+0xe4>
 8007884:	e00d      	b.n	80078a2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007886:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007888:	60fb      	str	r3, [r7, #12]
        break;
 800788a:	e00d      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800788c:	f7ff f86a 	bl	8006964 <LL_RCC_HSE_IsEnabledDiv2>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d102      	bne.n	800789c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007896:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007898:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800789a:	e005      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800789c:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800789e:	60fb      	str	r3, [r7, #12]
        break;
 80078a0:	e002      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	60fb      	str	r3, [r7, #12]
        break;
 80078a6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80078a8:	f7ff fa4c 	bl	8006d44 <LL_RCC_PLL_GetN>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	fb03 f402 	mul.w	r4, r3, r2
 80078b4:	f7ff fa5d 	bl	8006d72 <LL_RCC_PLL_GetDivider>
 80078b8:	4603      	mov	r3, r0
 80078ba:	091b      	lsrs	r3, r3, #4
 80078bc:	3301      	adds	r3, #1
 80078be:	fbb4 f4f3 	udiv	r4, r4, r3
 80078c2:	f7ff fa4b 	bl	8006d5c <LL_RCC_PLL_GetR>
 80078c6:	4603      	mov	r3, r0
 80078c8:	0f5b      	lsrs	r3, r3, #29
 80078ca:	3301      	adds	r3, #1
 80078cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80078d0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80078d2:	697b      	ldr	r3, [r7, #20]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}
 80078dc:	0801d520 	.word	0x0801d520
 80078e0:	00f42400 	.word	0x00f42400
 80078e4:	01e84800 	.word	0x01e84800

080078e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e8:	b598      	push	{r3, r4, r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80078ec:	f7ff ff5c 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 80078f0:	4604      	mov	r4, r0
 80078f2:	f7ff f9cc 	bl	8006c8e <LL_RCC_GetAHBPrescaler>
 80078f6:	4603      	mov	r3, r0
 80078f8:	091b      	lsrs	r3, r3, #4
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	4a03      	ldr	r2, [pc, #12]	; (800790c <HAL_RCC_GetHCLKFreq+0x24>)
 8007900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007904:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	bd98      	pop	{r3, r4, r7, pc}
 800790c:	0801d4c0 	.word	0x0801d4c0

08007910 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007910:	b598      	push	{r3, r4, r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007914:	f7ff ffe8 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 8007918:	4604      	mov	r4, r0
 800791a:	f7ff f9d0 	bl	8006cbe <LL_RCC_GetAPB1Prescaler>
 800791e:	4603      	mov	r3, r0
 8007920:	0a1b      	lsrs	r3, r3, #8
 8007922:	4a03      	ldr	r2, [pc, #12]	; (8007930 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007928:	fa24 f303 	lsr.w	r3, r4, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd98      	pop	{r3, r4, r7, pc}
 8007930:	0801d500 	.word	0x0801d500

08007934 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007934:	b598      	push	{r3, r4, r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007938:	f7ff ffd6 	bl	80078e8 <HAL_RCC_GetHCLKFreq>
 800793c:	4604      	mov	r4, r0
 800793e:	f7ff f9c9 	bl	8006cd4 <LL_RCC_GetAPB2Prescaler>
 8007942:	4603      	mov	r3, r0
 8007944:	0adb      	lsrs	r3, r3, #11
 8007946:	4a03      	ldr	r2, [pc, #12]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800794c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd98      	pop	{r3, r4, r7, pc}
 8007954:	0801d500 	.word	0x0801d500

08007958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007958:	b590      	push	{r4, r7, lr}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	091b      	lsrs	r3, r3, #4
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	4a10      	ldr	r2, [pc, #64]	; (80079ac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800796a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007970:	f7ff f998 	bl	8006ca4 <LL_RCC_GetAHB3Prescaler>
 8007974:	4603      	mov	r3, r0
 8007976:	091b      	lsrs	r3, r3, #4
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	4a0c      	ldr	r2, [pc, #48]	; (80079b0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	0c9c      	lsrs	r4, r3, #18
 8007994:	f7fe ff3e 	bl	8006814 <HAL_PWREx_GetVoltageRange>
 8007998:	4603      	mov	r3, r0
 800799a:	4619      	mov	r1, r3
 800799c:	4620      	mov	r0, r4
 800799e:	f000 f80b 	bl	80079b8 <RCC_SetFlashLatency>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd90      	pop	{r4, r7, pc}
 80079ac:	0801d520 	.word	0x0801d520
 80079b0:	0801d4c0 	.word	0x0801d4c0
 80079b4:	431bde83 	.word	0x431bde83

080079b8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08e      	sub	sp, #56	; 0x38
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80079c2:	4a3a      	ldr	r2, [pc, #232]	; (8007aac <RCC_SetFlashLatency+0xf4>)
 80079c4:	f107 0320 	add.w	r3, r7, #32
 80079c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079cc:	6018      	str	r0, [r3, #0]
 80079ce:	3304      	adds	r3, #4
 80079d0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80079d2:	4a37      	ldr	r2, [pc, #220]	; (8007ab0 <RCC_SetFlashLatency+0xf8>)
 80079d4:	f107 0318 	add.w	r3, r7, #24
 80079d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079dc:	6018      	str	r0, [r3, #0]
 80079de:	3304      	adds	r3, #4
 80079e0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80079e2:	4a34      	ldr	r2, [pc, #208]	; (8007ab4 <RCC_SetFlashLatency+0xfc>)
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80079ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80079ee:	2300      	movs	r3, #0
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f8:	d11b      	bne.n	8007a32 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	633b      	str	r3, [r7, #48]	; 0x30
 80079fe:	e014      	b.n	8007a2a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	3338      	adds	r3, #56	; 0x38
 8007a06:	443b      	add	r3, r7
 8007a08:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d807      	bhi.n	8007a24 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	3338      	adds	r3, #56	; 0x38
 8007a1a:	443b      	add	r3, r7
 8007a1c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a22:	e021      	b.n	8007a68 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	3301      	adds	r3, #1
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d9e7      	bls.n	8007a00 <RCC_SetFlashLatency+0x48>
 8007a30:	e01a      	b.n	8007a68 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a36:	e014      	b.n	8007a62 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	3338      	adds	r3, #56	; 0x38
 8007a3e:	443b      	add	r3, r7
 8007a40:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d807      	bhi.n	8007a5c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	3338      	adds	r3, #56	; 0x38
 8007a52:	443b      	add	r3, r7
 8007a54:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a5a:	e005      	b.n	8007a68 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	3301      	adds	r3, #1
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d9e7      	bls.n	8007a38 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a68:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <RCC_SetFlashLatency+0x100>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f023 0207 	bic.w	r2, r3, #7
 8007a70:	4911      	ldr	r1, [pc, #68]	; (8007ab8 <RCC_SetFlashLatency+0x100>)
 8007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a74:	4313      	orrs	r3, r2
 8007a76:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a78:	f7fa fd4c 	bl	8002514 <HAL_GetTick>
 8007a7c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a7e:	e008      	b.n	8007a92 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a80:	f7fa fd48 	bl	8002514 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e007      	b.n	8007aa2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <RCC_SetFlashLatency+0x100>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d1ef      	bne.n	8007a80 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3738      	adds	r7, #56	; 0x38
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	0801cfec 	.word	0x0801cfec
 8007ab0:	0801cff4 	.word	0x0801cff4
 8007ab4:	0801cffc 	.word	0x0801cffc
 8007ab8:	58004000 	.word	0x58004000

08007abc <LL_RCC_LSE_IsReady>:
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d101      	bne.n	8007ad4 <LL_RCC_LSE_IsReady+0x18>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e000      	b.n	8007ad6 <LL_RCC_LSE_IsReady+0x1a>
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <LL_RCC_SetUSARTClockSource>:
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	43db      	mvns	r3, r3
 8007af4:	401a      	ands	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007afe:	4313      	orrs	r3, r2
 8007b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <LL_RCC_SetI2SClockSource>:
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <LL_RCC_SetLPUARTClockSource>:
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr

08007b62 <LL_RCC_SetI2CClockSource>:
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	091b      	lsrs	r3, r3, #4
 8007b76:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b7a:	43db      	mvns	r3, r3
 8007b7c:	401a      	ands	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr

08007b9a <LL_RCC_SetLPTIMClockSource>:
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	0c1b      	lsrs	r3, r3, #16
 8007bae:	041b      	lsls	r3, r3, #16
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bc80      	pop	{r7}
 8007bca:	4770      	bx	lr

08007bcc <LL_RCC_SetRNGClockSource>:
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bdc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007be0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <LL_RCC_SetADCClockSource>:
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <LL_RCC_SetRTCClockSource>:
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <LL_RCC_GetRTCClockSource>:
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr

08007c62 <LL_RCC_ForceBackupDomainReset>:
{
 8007c62:	b480      	push	{r7}
 8007c64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c7a:	bf00      	nop
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc80      	pop	{r7}
 8007c80:	4770      	bx	lr

08007c82 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007c82:	b480      	push	{r7}
 8007c84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c9a:	bf00      	nop
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
	...

08007ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d058      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007cc4:	f7fe fd64 	bl	8006790 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cc8:	f7fa fc24 	bl	8002514 <HAL_GetTick>
 8007ccc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007cce:	e009      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cd0:	f7fa fc20 	bl	8002514 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d902      	bls.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	74fb      	strb	r3, [r7, #19]
        break;
 8007ce2:	e006      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007ce4:	4b7b      	ldr	r3, [pc, #492]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf0:	d1ee      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007cf2:	7cfb      	ldrb	r3, [r7, #19]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d13c      	bne.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007cf8:	f7ff ffa7 	bl	8007c4a <LL_RCC_GetRTCClockSource>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d00f      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d12:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d14:	f7ff ffa5 	bl	8007c62 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d18:	f7ff ffb3 	bl	8007c82 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d014      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d30:	f7fa fbf0 	bl	8002514 <HAL_GetTick>
 8007d34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d36:	e00b      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d38:	f7fa fbec 	bl	8002514 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d902      	bls.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	74fb      	strb	r3, [r7, #19]
            break;
 8007d4e:	e004      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d50:	f7ff feb4 	bl	8007abc <LL_RCC_LSE_IsReady>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d1ee      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007d5a:	7cfb      	ldrb	r3, [r7, #19]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d105      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff ff5b 	bl	8007c20 <LL_RCC_SetRTCClockSource>
 8007d6a:	e004      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d6c:	7cfb      	ldrb	r3, [r7, #19]
 8007d6e:	74bb      	strb	r3, [r7, #18]
 8007d70:	e001      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d72:	7cfb      	ldrb	r3, [r7, #19]
 8007d74:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d004      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fea9 	bl	8007ade <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fe9e 	bl	8007ade <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d004      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff fec0 	bl	8007b38 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fee6 	bl	8007b9a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fedb 	bl	8007b9a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff fed0 	bl	8007b9a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fea9 	bl	8007b62 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fe9e 	bl	8007b62 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d004      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff fe93 	bl	8007b62 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d011      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff fe5e 	bl	8007b0e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5a:	d107      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d010      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fea5 	bl	8007bcc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e98:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d011      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff fea3 	bl	8007bf6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb8:	d107      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007eca:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	58000400 	.word	0x58000400

08007ed8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d068      	beq.n	8007fbc <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fa f810 	bl	8001f24 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f0c:	4b2e      	ldr	r3, [pc, #184]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f0e:	22ca      	movs	r2, #202	; 0xca
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24
 8007f12:	4b2d      	ldr	r3, [pc, #180]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f14:	2253      	movs	r2, #83	; 0x53
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa0f 	bl	800833c <RTC_EnterInitMode>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d13f      	bne.n	8007fa8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007f28:	4b27      	ldr	r3, [pc, #156]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	4a26      	ldr	r2, [pc, #152]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f2e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f36:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007f38:	4b23      	ldr	r3, [pc, #140]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f3a:	699a      	ldr	r2, [r3, #24]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6859      	ldr	r1, [r3, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	4319      	orrs	r1, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	491e      	ldr	r1, [pc, #120]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	491a      	ldr	r1, [pc, #104]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007f62:	4b19      	ldr	r3, [pc, #100]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	430b      	orrs	r3, r1
 8007f74:	4914      	ldr	r1, [pc, #80]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa12 	bl	80083a4 <RTC_ExitInitMode>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10e      	bne.n	8007fa8 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007f8a:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a19      	ldr	r1, [r3, #32]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	4319      	orrs	r1, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	4909      	ldr	r1, [pc, #36]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fa8:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <HAL_RTC_Init+0xf0>)
 8007faa:	22ff      	movs	r2, #255	; 0xff
 8007fac:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d103      	bne.n	8007fbc <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40002800 	.word	0x40002800

08007fcc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007fcc:	b590      	push	{r4, r7, lr}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_RTC_SetAlarm_IT+0x1e>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e0f3      	b.n	80081d2 <HAL_RTC_SetAlarm_IT+0x206>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007ffa:	4b78      	ldr	r3, [pc, #480]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008002:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800a:	d06a      	beq.n	80080e2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d13a      	bne.n	8008088 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008012:	4b72      	ldr	r3, [pc, #456]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2200      	movs	r2, #0
 8008022:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f9f5 	bl	8008420 <RTC_ByteToBcd2>
 8008036:	4603      	mov	r3, r0
 8008038:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f9ee 	bl	8008420 <RTC_ByteToBcd2>
 8008044:	4603      	mov	r3, r0
 8008046:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008048:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	789b      	ldrb	r3, [r3, #2]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f9e6 	bl	8008420 <RTC_ByteToBcd2>
 8008054:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008056:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	78db      	ldrb	r3, [r3, #3]
 800805e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008060:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f9d8 	bl	8008420 <RTC_ByteToBcd2>
 8008070:	4603      	mov	r3, r0
 8008072:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008074:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800807c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	e02c      	b.n	80080e2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008090:	d00d      	beq.n	80080ae <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800809a:	d008      	beq.n	80080ae <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800809c:	4b4f      	ldr	r3, [pc, #316]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	785b      	ldrb	r3, [r3, #1]
 80080b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080ba:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080c0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	78db      	ldrb	r3, [r3, #3]
 80080c6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080d0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080d2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080d8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080e2:	4b3e      	ldr	r3, [pc, #248]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 80080e4:	22ca      	movs	r2, #202	; 0xca
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24
 80080e8:	4b3c      	ldr	r3, [pc, #240]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 80080ea:	2253      	movs	r2, #83	; 0x53
 80080ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f6:	d12c      	bne.n	8008152 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80080f8:	4b38      	ldr	r3, [pc, #224]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	4a37      	ldr	r2, [pc, #220]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 80080fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008102:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008104:	4b35      	ldr	r3, [pc, #212]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008106:	2201      	movs	r2, #1
 8008108:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008110:	d107      	bne.n	8008122 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	4930      	ldr	r1, [pc, #192]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 800811c:	4313      	orrs	r3, r2
 800811e:	644b      	str	r3, [r1, #68]	; 0x44
 8008120:	e006      	b.n	8008130 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008122:	4a2e      	ldr	r2, [pc, #184]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008128:	4a2c      	ldr	r2, [pc, #176]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008130:	4a2a      	ldr	r2, [pc, #168]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	f043 0201 	orr.w	r2, r3, #1
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008144:	4b25      	ldr	r3, [pc, #148]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	4a24      	ldr	r2, [pc, #144]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 800814a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800814e:	6193      	str	r3, [r2, #24]
 8008150:	e02b      	b.n	80081aa <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008152:	4b22      	ldr	r3, [pc, #136]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	4a21      	ldr	r2, [pc, #132]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008158:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800815c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800815e:	4b1f      	ldr	r3, [pc, #124]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008160:	2202      	movs	r2, #2
 8008162:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816a:	d107      	bne.n	800817c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	4919      	ldr	r1, [pc, #100]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008176:	4313      	orrs	r3, r2
 8008178:	64cb      	str	r3, [r1, #76]	; 0x4c
 800817a:	e006      	b.n	800818a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800817c:	4a17      	ldr	r2, [pc, #92]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008182:	4a16      	ldr	r2, [pc, #88]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800818a:	4a14      	ldr	r2, [pc, #80]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	f043 0202 	orr.w	r2, r3, #2
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800819e:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	4a0e      	ldr	r2, [pc, #56]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 80081a4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80081a8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80081aa:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80081ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b0:	4a0b      	ldr	r2, [pc, #44]	; (80081e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80081b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <HAL_RTC_SetAlarm_IT+0x210>)
 80081bc:	22ff      	movs	r2, #255	; 0xff
 80081be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd90      	pop	{r4, r7, pc}
 80081da:	bf00      	nop
 80081dc:	40002800 	.word	0x40002800
 80081e0:	58000800 	.word	0x58000800

080081e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d101      	bne.n	80081fc <HAL_RTC_DeactivateAlarm+0x18>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e048      	b.n	800828e <HAL_RTC_DeactivateAlarm+0xaa>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800820c:	4b22      	ldr	r3, [pc, #136]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 800820e:	22ca      	movs	r2, #202	; 0xca
 8008210:	625a      	str	r2, [r3, #36]	; 0x24
 8008212:	4b21      	ldr	r3, [pc, #132]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008214:	2253      	movs	r2, #83	; 0x53
 8008216:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821e:	d115      	bne.n	800824c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008220:	4b1d      	ldr	r3, [pc, #116]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	4a1c      	ldr	r2, [pc, #112]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008226:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800822a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800822c:	4b1a      	ldr	r3, [pc, #104]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 800822e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008230:	4a19      	ldr	r2, [pc, #100]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008236:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	f023 0201 	bic.w	r2, r3, #1
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008244:	4b14      	ldr	r3, [pc, #80]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008246:	2201      	movs	r2, #1
 8008248:	65da      	str	r2, [r3, #92]	; 0x5c
 800824a:	e014      	b.n	8008276 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800824c:	4b12      	ldr	r3, [pc, #72]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	4a11      	ldr	r2, [pc, #68]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008252:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008256:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 800825a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825c:	4a0e      	ldr	r2, [pc, #56]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 800825e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008262:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	f023 0202 	bic.w	r2, r3, #2
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008270:	4b09      	ldr	r3, [pc, #36]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008272:	2202      	movs	r2, #2
 8008274:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008276:	4b08      	ldr	r3, [pc, #32]	; (8008298 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008278:	22ff      	movs	r2, #255	; 0xff
 800827a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr
 8008298:	40002800 	.word	0x40002800

0800829c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80082a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	4013      	ands	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80082ba:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80082bc:	2201      	movs	r2, #1
 80082be:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7fa fc1a 	bl	8002afa <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80082d2:	2202      	movs	r2, #2
 80082d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f94a 	bl	8008570 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40002800 	.word	0x40002800

080082f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80082f8:	4b0f      	ldr	r3, [pc, #60]	; (8008338 <HAL_RTC_WaitForSynchro+0x48>)
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <HAL_RTC_WaitForSynchro+0x48>)
 80082fe:	f023 0320 	bic.w	r3, r3, #32
 8008302:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008304:	f7fa f906 	bl	8002514 <HAL_GetTick>
 8008308:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800830a:	e009      	b.n	8008320 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800830c:	f7fa f902 	bl	8002514 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800831a:	d901      	bls.n	8008320 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e006      	b.n	800832e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <HAL_RTC_WaitForSynchro+0x48>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0ef      	beq.n	800830c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40002800 	.word	0x40002800

0800833c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008348:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <RTC_EnterInitMode+0x64>)
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008350:	2b00      	cmp	r3, #0
 8008352:	d120      	bne.n	8008396 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <RTC_EnterInitMode+0x64>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	4a11      	ldr	r2, [pc, #68]	; (80083a0 <RTC_EnterInitMode+0x64>)
 800835a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008360:	f7fa f8d8 	bl	8002514 <HAL_GetTick>
 8008364:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008366:	e00d      	b.n	8008384 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008368:	f7fa f8d4 	bl	8002514 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008376:	d905      	bls.n	8008384 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2203      	movs	r2, #3
 8008380:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008384:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <RTC_EnterInitMode+0x64>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <RTC_EnterInitMode+0x5a>
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	2b03      	cmp	r3, #3
 8008394:	d1e8      	bne.n	8008368 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	40002800 	.word	0x40002800

080083a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80083b0:	4b1a      	ldr	r3, [pc, #104]	; (800841c <RTC_ExitInitMode+0x78>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4a19      	ldr	r2, [pc, #100]	; (800841c <RTC_ExitInitMode+0x78>)
 80083b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80083bc:	4b17      	ldr	r3, [pc, #92]	; (800841c <RTC_ExitInitMode+0x78>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10c      	bne.n	80083e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ff91 	bl	80082f0 <HAL_RTC_WaitForSynchro>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01e      	beq.n	8008412 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2203      	movs	r2, #3
 80083d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	73fb      	strb	r3, [r7, #15]
 80083e0:	e017      	b.n	8008412 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80083e2:	4b0e      	ldr	r3, [pc, #56]	; (800841c <RTC_ExitInitMode+0x78>)
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	4a0d      	ldr	r2, [pc, #52]	; (800841c <RTC_ExitInitMode+0x78>)
 80083e8:	f023 0320 	bic.w	r3, r3, #32
 80083ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff ff7e 	bl	80082f0 <HAL_RTC_WaitForSynchro>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2203      	movs	r2, #3
 80083fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <RTC_ExitInitMode+0x78>)
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	4a04      	ldr	r2, [pc, #16]	; (800841c <RTC_ExitInitMode+0x78>)
 800840c:	f043 0320 	orr.w	r3, r3, #32
 8008410:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40002800 	.word	0x40002800

08008420 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008432:	e005      	b.n	8008440 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	3b0a      	subs	r3, #10
 800843e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008440:	7afb      	ldrb	r3, [r7, #11]
 8008442:	2b09      	cmp	r3, #9
 8008444:	d8f6      	bhi.n	8008434 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	b2da      	uxtb	r2, r3
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	4313      	orrs	r3, r2
 8008452:	b2db      	uxtb	r3, r3
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr
	...

08008460 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008472:	2302      	movs	r3, #2
 8008474:	e01f      	b.n	80084b6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008486:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008488:	22ca      	movs	r2, #202	; 0xca
 800848a:	625a      	str	r2, [r3, #36]	; 0x24
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800848e:	2253      	movs	r2, #83	; 0x53
 8008490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008492:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008498:	f043 0320 	orr.w	r3, r3, #32
 800849c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084a0:	22ff      	movs	r2, #255	; 0xff
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr
 80084c0:	40002800 	.word	0x40002800

080084c4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_RTCEx_SetSSRU_IT+0x16>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e027      	b.n	800852a <HAL_RTCEx_SetSSRU_IT+0x66>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084ea:	4b12      	ldr	r3, [pc, #72]	; (8008534 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80084ec:	22ca      	movs	r2, #202	; 0xca
 80084ee:	625a      	str	r2, [r3, #36]	; 0x24
 80084f0:	4b10      	ldr	r3, [pc, #64]	; (8008534 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80084f2:	2253      	movs	r2, #83	; 0x53
 80084f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80084f6:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	4a0e      	ldr	r2, [pc, #56]	; (8008534 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80084fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008500:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008508:	4a0b      	ldr	r2, [pc, #44]	; (8008538 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800850a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800850e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008512:	4b08      	ldr	r3, [pc, #32]	; (8008534 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008514:	22ff      	movs	r2, #255	; 0xff
 8008516:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	40002800 	.word	0x40002800
 8008538:	58000800 	.word	0x58000800

0800853c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008544:	4b09      	ldr	r3, [pc, #36]	; (800856c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008550:	4b06      	ldr	r3, [pc, #24]	; (800856c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008552:	2240      	movs	r2, #64	; 0x40
 8008554:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fa fad9 	bl	8002b0e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40002800 	.word	0x40002800

08008570 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr
	...

08008584 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008592:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4413      	add	r3, r2
 800859c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	4000b100 	.word	0x4000b100

080085b4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <HAL_RTCEx_BKUPRead+0x28>)
 80085c0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	4000b100 	.word	0x4000b100

080085e0 <LL_PWR_SetRadioBusyTrigger>:
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085f0:	4904      	ldr	r1, [pc, #16]	; (8008604 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	608b      	str	r3, [r1, #8]
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	58000400 	.word	0x58000400

08008608 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	4a04      	ldr	r2, [pc, #16]	; (8008624 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800861c:	bf00      	nop
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr
 8008624:	58000400 	.word	0x58000400

08008628 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800862c:	4b05      	ldr	r3, [pc, #20]	; (8008644 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	4a04      	ldr	r2, [pc, #16]	; (8008644 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800863c:	bf00      	nop
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr
 8008644:	58000400 	.word	0x58000400

08008648 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008648:	b480      	push	{r7}
 800864a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800864c:	4b03      	ldr	r3, [pc, #12]	; (800865c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800864e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008652:	619a      	str	r2, [r3, #24]
}
 8008654:	bf00      	nop
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr
 800865c:	58000400 	.word	0x58000400

08008660 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008664:	4b06      	ldr	r3, [pc, #24]	; (8008680 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b02      	cmp	r3, #2
 800866e:	d101      	bne.n	8008674 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	58000400 	.word	0x58000400

08008684 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008688:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b04      	cmp	r3, #4
 8008692:	d101      	bne.n	8008698 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	58000400 	.word	0x58000400

080086a8 <LL_RCC_RF_DisableReset>:
{
 80086a8:	b480      	push	{r7}
 80086aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80086ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80086c0:	bf00      	nop
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <LL_RCC_IsRFUnderReset>:
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80086cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086dc:	d101      	bne.n	80086e2 <LL_RCC_IsRFUnderReset+0x1a>
 80086de:	2301      	movs	r3, #1
 80086e0:	e000      	b.n	80086e4 <LL_RCC_IsRFUnderReset+0x1c>
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <LL_EXTI_EnableIT_32_63>:
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <LL_EXTI_EnableIT_32_63+0x24>)
 80086f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80086fa:	4905      	ldr	r1, [pc, #20]	; (8008710 <LL_EXTI_EnableIT_32_63+0x24>)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4313      	orrs	r3, r2
 8008700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	58000800 	.word	0x58000800

08008714 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
    return status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	e04b      	b.n	80087c2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	799b      	ldrb	r3, [r3, #6]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7f9 fd40 	bl	80021c4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800874a:	f7ff ffad 	bl	80086a8 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800874e:	4b1f      	ldr	r3, [pc, #124]	; (80087cc <HAL_SUBGHZ_Init+0xb8>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4613      	mov	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	0cdb      	lsrs	r3, r3, #19
 800875c:	2264      	movs	r2, #100	; 0x64
 800875e:	fb02 f303 	mul.w	r3, r2, r3
 8008762:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	609a      	str	r2, [r3, #8]
      break;
 8008774:	e007      	b.n	8008786 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	3b01      	subs	r3, #1
 800877a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800877c:	f7ff ffa4 	bl	80086c8 <LL_RCC_IsRFUnderReset>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1ee      	bne.n	8008764 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8008786:	f7ff ff3f 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800878a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800878e:	f7ff ffad 	bl	80086ec <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8008792:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008796:	f7ff ff23 	bl	80085e0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800879a:	f7ff ff55 	bl	8008648 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 faad 	bl	8008d08 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	719a      	strb	r2, [r3, #6]

  return status;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000004 	.word	0x20000004

080087d0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	461a      	mov	r2, r3
 80087dc:	460b      	mov	r3, r1
 80087de:	817b      	strh	r3, [r7, #10]
 80087e0:	4613      	mov	r3, r2
 80087e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	799b      	ldrb	r3, [r3, #6]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d14a      	bne.n	8008884 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	795b      	ldrb	r3, [r3, #5]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_SUBGHZ_WriteRegisters+0x2a>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e045      	b.n	8008886 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2202      	movs	r2, #2
 8008804:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fb4c 	bl	8008ea4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800880c:	f7ff ff0c 	bl	8008628 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008810:	210d      	movs	r1, #13
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 fa98 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008818:	897b      	ldrh	r3, [r7, #10]
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	b29b      	uxth	r3, r3
 800881e:	b2db      	uxtb	r3, r3
 8008820:	4619      	mov	r1, r3
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fa90 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008828:	897b      	ldrh	r3, [r7, #10]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	4619      	mov	r1, r3
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fa8a 	bl	8008d48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008834:	2300      	movs	r3, #0
 8008836:	82bb      	strh	r3, [r7, #20]
 8008838:	e00a      	b.n	8008850 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800883a:	8abb      	ldrh	r3, [r7, #20]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4413      	add	r3, r2
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	4619      	mov	r1, r3
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fa7f 	bl	8008d48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800884a:	8abb      	ldrh	r3, [r7, #20]
 800884c:	3301      	adds	r3, #1
 800884e:	82bb      	strh	r3, [r7, #20]
 8008850:	8aba      	ldrh	r2, [r7, #20]
 8008852:	893b      	ldrh	r3, [r7, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	d3f0      	bcc.n	800883a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008858:	f7ff fed6 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fb45 	bl	8008eec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	75fb      	strb	r3, [r7, #23]
 800886e:	e001      	b.n	8008874 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	715a      	strb	r2, [r3, #5]

    return status;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	e000      	b.n	8008886 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008884:	2302      	movs	r3, #2
  }
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b088      	sub	sp, #32
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	461a      	mov	r2, r3
 800889a:	460b      	mov	r3, r1
 800889c:	817b      	strh	r3, [r7, #10]
 800889e:	4613      	mov	r3, r2
 80088a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	799b      	ldrb	r3, [r3, #6]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d14a      	bne.n	8008946 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	795b      	ldrb	r3, [r3, #5]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e045      	b.n	8008948 <HAL_SUBGHZ_ReadRegisters+0xba>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 faee 	bl	8008ea4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80088c8:	f7ff feae 	bl	8008628 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80088cc:	211d      	movs	r1, #29
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 fa3a 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80088d4:	897b      	ldrh	r3, [r7, #10]
 80088d6:	0a1b      	lsrs	r3, r3, #8
 80088d8:	b29b      	uxth	r3, r3
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	4619      	mov	r1, r3
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fa32 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80088e4:	897b      	ldrh	r3, [r7, #10]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fa2c 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80088f0:	2100      	movs	r1, #0
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 fa28 	bl	8008d48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80088f8:	2300      	movs	r3, #0
 80088fa:	82fb      	strh	r3, [r7, #22]
 80088fc:	e009      	b.n	8008912 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80088fe:	69b9      	ldr	r1, [r7, #24]
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 fa77 	bl	8008df4 <SUBGHZSPI_Receive>
      pData++;
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	3301      	adds	r3, #1
 800890a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800890c:	8afb      	ldrh	r3, [r7, #22]
 800890e:	3301      	adds	r3, #1
 8008910:	82fb      	strh	r3, [r7, #22]
 8008912:	8afa      	ldrh	r2, [r7, #22]
 8008914:	893b      	ldrh	r3, [r7, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	d3f1      	bcc.n	80088fe <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800891a:	f7ff fe75 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 fae4 	bl	8008eec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	77fb      	strb	r3, [r7, #31]
 8008930:	e001      	b.n	8008936 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	715a      	strb	r2, [r3, #5]

    return status;
 8008942:	7ffb      	ldrb	r3, [r7, #31]
 8008944:	e000      	b.n	8008948 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008946:	2302      	movs	r3, #2
  }
}
 8008948:	4618      	mov	r0, r3
 800894a:	3720      	adds	r7, #32
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	461a      	mov	r2, r3
 800895c:	460b      	mov	r3, r1
 800895e:	72fb      	strb	r3, [r7, #11]
 8008960:	4613      	mov	r3, r2
 8008962:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	799b      	ldrb	r3, [r3, #6]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b01      	cmp	r3, #1
 800896c:	d14a      	bne.n	8008a04 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	795b      	ldrb	r3, [r3, #5]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008976:	2302      	movs	r3, #2
 8008978:	e045      	b.n	8008a06 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fa8f 	bl	8008ea4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008986:	7afb      	ldrb	r3, [r7, #11]
 8008988:	2b84      	cmp	r3, #132	; 0x84
 800898a:	d002      	beq.n	8008992 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	2b94      	cmp	r3, #148	; 0x94
 8008990:	d103      	bne.n	800899a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	711a      	strb	r2, [r3, #4]
 8008998:	e002      	b.n	80089a0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089a0:	f7ff fe42 	bl	8008628 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	4619      	mov	r1, r3
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 f9cd 	bl	8008d48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089ae:	2300      	movs	r3, #0
 80089b0:	82bb      	strh	r3, [r7, #20]
 80089b2:	e00a      	b.n	80089ca <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80089b4:	8abb      	ldrh	r3, [r7, #20]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f9c2 	bl	8008d48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80089c4:	8abb      	ldrh	r3, [r7, #20]
 80089c6:	3301      	adds	r3, #1
 80089c8:	82bb      	strh	r3, [r7, #20]
 80089ca:	8aba      	ldrh	r2, [r7, #20]
 80089cc:	893b      	ldrh	r3, [r7, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d3f0      	bcc.n	80089b4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80089d2:	f7ff fe19 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	2b84      	cmp	r3, #132	; 0x84
 80089da:	d002      	beq.n	80089e2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fa85 	bl	8008eec <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	75fb      	strb	r3, [r7, #23]
 80089ee:	e001      	b.n	80089f4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	715a      	strb	r2, [r3, #5]

    return status;
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	e000      	b.n	8008a06 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008a04:	2302      	movs	r3, #2
  }
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b088      	sub	sp, #32
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	72fb      	strb	r3, [r7, #11]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	799b      	ldrb	r3, [r3, #6]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d13d      	bne.n	8008aac <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	795b      	ldrb	r3, [r3, #5]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e038      	b.n	8008aae <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 fa2e 	bl	8008ea4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a48:	f7ff fdee 	bl	8008628 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f979 	bl	8008d48 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008a56:	2100      	movs	r1, #0
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f975 	bl	8008d48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a5e:	2300      	movs	r3, #0
 8008a60:	82fb      	strh	r3, [r7, #22]
 8008a62:	e009      	b.n	8008a78 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008a64:	69b9      	ldr	r1, [r7, #24]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 f9c4 	bl	8008df4 <SUBGHZSPI_Receive>
      pData++;
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008a72:	8afb      	ldrh	r3, [r7, #22]
 8008a74:	3301      	adds	r3, #1
 8008a76:	82fb      	strh	r3, [r7, #22]
 8008a78:	8afa      	ldrh	r2, [r7, #22]
 8008a7a:	893b      	ldrh	r3, [r7, #8]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d3f1      	bcc.n	8008a64 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a80:	f7ff fdc2 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fa31 	bl	8008eec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	77fb      	strb	r3, [r7, #31]
 8008a96:	e001      	b.n	8008a9c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	715a      	strb	r2, [r3, #5]

    return status;
 8008aa8:	7ffb      	ldrb	r3, [r7, #31]
 8008aaa:	e000      	b.n	8008aae <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008aac:	2302      	movs	r3, #2
  }
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3720      	adds	r7, #32
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b086      	sub	sp, #24
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	60f8      	str	r0, [r7, #12]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	72fb      	strb	r3, [r7, #11]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	799b      	ldrb	r3, [r3, #6]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d13e      	bne.n	8008b52 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	795b      	ldrb	r3, [r3, #5]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e039      	b.n	8008b54 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f9dc 	bl	8008ea4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008aec:	f7ff fd9c 	bl	8008628 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008af0:	210e      	movs	r1, #14
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f928 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	4619      	mov	r1, r3
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f923 	bl	8008d48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	82bb      	strh	r3, [r7, #20]
 8008b06:	e00a      	b.n	8008b1e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008b08:	8abb      	ldrh	r3, [r7, #20]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	4619      	mov	r1, r3
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 f918 	bl	8008d48 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008b18:	8abb      	ldrh	r3, [r7, #20]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	82bb      	strh	r3, [r7, #20]
 8008b1e:	8aba      	ldrh	r2, [r7, #20]
 8008b20:	893b      	ldrh	r3, [r7, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d3f0      	bcc.n	8008b08 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b26:	f7ff fd6f 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f9de 	bl	8008eec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
 8008b3c:	e001      	b.n	8008b42 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	715a      	strb	r2, [r3, #5]

    return status;
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	e000      	b.n	8008b54 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008b52:	2302      	movs	r3, #2
  }
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	461a      	mov	r2, r3
 8008b68:	460b      	mov	r3, r1
 8008b6a:	72fb      	strb	r3, [r7, #11]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	799b      	ldrb	r3, [r3, #6]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d141      	bne.n	8008c02 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	795b      	ldrb	r3, [r3, #5]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e03c      	b.n	8008c04 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 f987 	bl	8008ea4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b96:	f7ff fd47 	bl	8008628 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008b9a:	211e      	movs	r1, #30
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f8d3 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008ba2:	7afb      	ldrb	r3, [r7, #11]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 f8ce 	bl	8008d48 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008bac:	2100      	movs	r1, #0
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 f8ca 	bl	8008d48 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	82fb      	strh	r3, [r7, #22]
 8008bb8:	e009      	b.n	8008bce <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008bba:	69b9      	ldr	r1, [r7, #24]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f919 	bl	8008df4 <SUBGHZSPI_Receive>
      pData++;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008bc8:	8afb      	ldrh	r3, [r7, #22]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	82fb      	strh	r3, [r7, #22]
 8008bce:	8afa      	ldrh	r2, [r7, #22]
 8008bd0:	893b      	ldrh	r3, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3f1      	bcc.n	8008bba <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008bd6:	f7ff fd17 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f986 	bl	8008eec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e001      	b.n	8008bf2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	715a      	strb	r2, [r3, #5]

    return status;
 8008bfe:	7ffb      	ldrb	r3, [r7, #31]
 8008c00:	e000      	b.n	8008c04 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008c02:	2302      	movs	r3, #2
  }
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3720      	adds	r7, #32
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008c14:	2300      	movs	r3, #0
 8008c16:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008c18:	f107 020c 	add.w	r2, r7, #12
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	2112      	movs	r1, #18
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fef4 	bl	8008a0e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008c26:	7b3b      	ldrb	r3, [r7, #12]
 8008c28:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008c2a:	89fb      	ldrh	r3, [r7, #14]
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	b21a      	sxth	r2, r3
 8008c30:	7b7b      	ldrb	r3, [r7, #13]
 8008c32:	b21b      	sxth	r3, r3
 8008c34:	4313      	orrs	r3, r2
 8008c36:	b21b      	sxth	r3, r3
 8008c38:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008c3a:	89fb      	ldrh	r3, [r7, #14]
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f012 fb61 	bl	801b30c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008c4a:	89fb      	ldrh	r3, [r7, #14]
 8008c4c:	085b      	lsrs	r3, r3, #1
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f012 fb66 	bl	801b328 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008c5c:	89fb      	ldrh	r3, [r7, #14]
 8008c5e:	089b      	lsrs	r3, r3, #2
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f012 fbb5 	bl	801b3d8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008c6e:	89fb      	ldrh	r3, [r7, #14]
 8008c70:	08db      	lsrs	r3, r3, #3
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f012 fbba 	bl	801b3f4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008c80:	89fb      	ldrh	r3, [r7, #14]
 8008c82:	091b      	lsrs	r3, r3, #4
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f012 fbbf 	bl	801b410 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008c92:	89fb      	ldrh	r3, [r7, #14]
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f012 fb8c 	bl	801b3bc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	099b      	lsrs	r3, r3, #6
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f012 fb47 	bl	801b344 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008cb6:	89fb      	ldrh	r3, [r7, #14]
 8008cb8:	09db      	lsrs	r3, r3, #7
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008cc2:	89fb      	ldrh	r3, [r7, #14]
 8008cc4:	0a1b      	lsrs	r3, r3, #8
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008cce:	2101      	movs	r1, #1
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f012 fb45 	bl	801b360 <HAL_SUBGHZ_CADStatusCallback>
 8008cd6:	e003      	b.n	8008ce0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008cd8:	2100      	movs	r1, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f012 fb40 	bl	801b360 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008ce0:	89fb      	ldrh	r3, [r7, #14]
 8008ce2:	0a5b      	lsrs	r3, r3, #9
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f012 fb55 	bl	801b39c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8008cf2:	f107 020c 	add.w	r2, r7, #12
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	2102      	movs	r1, #2
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff fe28 	bl	8008950 <HAL_SUBGHZ_ExecSetCmd>
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d10:	4b0c      	ldr	r3, [pc, #48]	; (8008d44 <SUBGHZSPI_Init+0x3c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a0b      	ldr	r2, [pc, #44]	; (8008d44 <SUBGHZSPI_Init+0x3c>)
 8008d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d1a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008d1c:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <SUBGHZSPI_Init+0x3c>)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008d24:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008d26:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <SUBGHZSPI_Init+0x3c>)
 8008d28:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008d2c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <SUBGHZSPI_Init+0x3c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a04      	ldr	r2, [pc, #16]	; (8008d44 <SUBGHZSPI_Init+0x3c>)
 8008d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d38:	6013      	str	r3, [r2, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bc80      	pop	{r7}
 8008d42:	4770      	bx	lr
 8008d44:	58010000 	.word	0x58010000

08008d48 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008d58:	4b23      	ldr	r3, [pc, #140]	; (8008de8 <SUBGHZSPI_Transmit+0xa0>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	1a9b      	subs	r3, r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	0cdb      	lsrs	r3, r3, #19
 8008d66:	2264      	movs	r2, #100	; 0x64
 8008d68:	fb02 f303 	mul.w	r3, r2, r3
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d105      	bne.n	8008d80 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	609a      	str	r2, [r3, #8]
      break;
 8008d7e:	e008      	b.n	8008d92 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008d86:	4b19      	ldr	r3, [pc, #100]	; (8008dec <SUBGHZSPI_Transmit+0xa4>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d1ed      	bne.n	8008d6e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <SUBGHZSPI_Transmit+0xa8>)
 8008d94:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008d9c:	4b12      	ldr	r3, [pc, #72]	; (8008de8 <SUBGHZSPI_Transmit+0xa0>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	0cdb      	lsrs	r3, r3, #19
 8008daa:	2264      	movs	r2, #100	; 0x64
 8008dac:	fb02 f303 	mul.w	r3, r2, r3
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d105      	bne.n	8008dc4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	609a      	str	r2, [r3, #8]
      break;
 8008dc2:	e008      	b.n	8008dd6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008dca:	4b08      	ldr	r3, [pc, #32]	; (8008dec <SUBGHZSPI_Transmit+0xa4>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d1ed      	bne.n	8008db2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008dd6:	4b05      	ldr	r3, [pc, #20]	; (8008dec <SUBGHZSPI_Transmit+0xa4>)
 8008dd8:	68db      	ldr	r3, [r3, #12]

  return status;
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bc80      	pop	{r7}
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20000004 	.word	0x20000004
 8008dec:	58010000 	.word	0x58010000
 8008df0:	5801000c 	.word	0x5801000c

08008df4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e02:	4b25      	ldr	r3, [pc, #148]	; (8008e98 <SUBGHZSPI_Receive+0xa4>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4613      	mov	r3, r2
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	1a9b      	subs	r3, r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	0cdb      	lsrs	r3, r3, #19
 8008e10:	2264      	movs	r2, #100	; 0x64
 8008e12:	fb02 f303 	mul.w	r3, r2, r3
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	609a      	str	r2, [r3, #8]
      break;
 8008e28:	e008      	b.n	8008e3c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008e30:	4b1a      	ldr	r3, [pc, #104]	; (8008e9c <SUBGHZSPI_Receive+0xa8>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d1ed      	bne.n	8008e18 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008e3c:	4b18      	ldr	r3, [pc, #96]	; (8008ea0 <SUBGHZSPI_Receive+0xac>)
 8008e3e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	22ff      	movs	r2, #255	; 0xff
 8008e44:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e46:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <SUBGHZSPI_Receive+0xa4>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	1a9b      	subs	r3, r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	0cdb      	lsrs	r3, r3, #19
 8008e54:	2264      	movs	r2, #100	; 0x64
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d105      	bne.n	8008e6e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	609a      	str	r2, [r3, #8]
      break;
 8008e6c:	e008      	b.n	8008e80 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008e74:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <SUBGHZSPI_Receive+0xa8>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d1ed      	bne.n	8008e5c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <SUBGHZSPI_Receive+0xa8>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	701a      	strb	r2, [r3, #0]

  return status;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20000004 	.word	0x20000004
 8008e9c:	58010000 	.word	0x58010000
 8008ea0:	5801000c 	.word	0x5801000c

08008ea4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	791b      	ldrb	r3, [r3, #4]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d111      	bne.n	8008ed8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <SUBGHZ_CheckDeviceReady+0x44>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	0c1b      	lsrs	r3, r3, #16
 8008ec2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008ec4:	f7ff fbb0 	bl	8008628 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1f9      	bne.n	8008ec8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008ed4:	f7ff fb98 	bl	8008608 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f807 	bl	8008eec <SUBGHZ_WaitOnBusy>
 8008ede:	4603      	mov	r3, r0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000004 	.word	0x20000004

08008eec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008ef8:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <SUBGHZ_WaitOnBusy+0x58>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	4613      	mov	r3, r2
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	4413      	add	r3, r2
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	0d1b      	lsrs	r3, r3, #20
 8008f06:	2264      	movs	r2, #100	; 0x64
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008f0e:	f7ff fbb9 	bl	8008684 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008f12:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d105      	bne.n	8008f26 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	609a      	str	r2, [r3, #8]
      break;
 8008f24:	e009      	b.n	8008f3a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008f2c:	f7ff fb98 	bl	8008660 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008f30:	4602      	mov	r2, r0
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d0e9      	beq.n	8008f0e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20000004 	.word	0x20000004

08008f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e049      	b.n	8008fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7f9 fc36 	bl	80027e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f000 f9c6 	bl	8009318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	d001      	beq.n	8009010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e036      	b.n	800907e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0201 	orr.w	r2, r2, #1
 8009026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a16      	ldr	r2, [pc, #88]	; (8009088 <HAL_TIM_Base_Start_IT+0x90>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d004      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x44>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903a:	d115      	bne.n	8009068 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <HAL_TIM_Base_Start_IT+0x94>)
 8009044:	4013      	ands	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b06      	cmp	r3, #6
 800904c:	d015      	beq.n	800907a <HAL_TIM_Base_Start_IT+0x82>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009054:	d011      	beq.n	800907a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f042 0201 	orr.w	r2, r2, #1
 8009064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009066:	e008      	b.n	800907a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0201 	orr.w	r2, r2, #1
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e000      	b.n	800907c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	bc80      	pop	{r7}
 8009086:	4770      	bx	lr
 8009088:	40012c00 	.word	0x40012c00
 800908c:	00010007 	.word	0x00010007

08009090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d122      	bne.n	80090ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d11b      	bne.n	80090ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f06f 0202 	mvn.w	r2, #2
 80090bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f904 	bl	80092e0 <HAL_TIM_IC_CaptureCallback>
 80090d8:	e005      	b.n	80090e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f8f7 	bl	80092ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f906 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d122      	bne.n	8009140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b04      	cmp	r3, #4
 8009106:	d11b      	bne.n	8009140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f06f 0204 	mvn.w	r2, #4
 8009110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f8da 	bl	80092e0 <HAL_TIM_IC_CaptureCallback>
 800912c:	e005      	b.n	800913a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f8cd 	bl	80092ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f8dc 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b08      	cmp	r3, #8
 800914c:	d122      	bne.n	8009194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b08      	cmp	r3, #8
 800915a:	d11b      	bne.n	8009194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0208 	mvn.w	r2, #8
 8009164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2204      	movs	r2, #4
 800916a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f8b0 	bl	80092e0 <HAL_TIM_IC_CaptureCallback>
 8009180:	e005      	b.n	800918e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f8a3 	bl	80092ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8b2 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b10      	cmp	r3, #16
 80091a0:	d122      	bne.n	80091e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b10      	cmp	r3, #16
 80091ae:	d11b      	bne.n	80091e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f06f 0210 	mvn.w	r2, #16
 80091b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2208      	movs	r2, #8
 80091be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f886 	bl	80092e0 <HAL_TIM_IC_CaptureCallback>
 80091d4:	e005      	b.n	80091e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f879 	bl	80092ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f888 	bl	80092f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d10e      	bne.n	8009214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b01      	cmp	r3, #1
 8009202:	d107      	bne.n	8009214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f06f 0201 	mvn.w	r2, #1
 800920c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7f8 fd44 	bl	8001c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921e:	2b80      	cmp	r3, #128	; 0x80
 8009220:	d10e      	bne.n	8009240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800922c:	2b80      	cmp	r3, #128	; 0x80
 800922e:	d107      	bne.n	8009240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f8d7 	bl	80093ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924e:	d10e      	bne.n	800926e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925a:	2b80      	cmp	r3, #128	; 0x80
 800925c:	d107      	bne.n	800926e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8c9 	bl	8009400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b40      	cmp	r3, #64	; 0x40
 800927a:	d10e      	bne.n	800929a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b40      	cmp	r3, #64	; 0x40
 8009288:	d107      	bne.n	800929a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f835 	bl	8009304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d10e      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d107      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f06f 0220 	mvn.w	r2, #32
 80092be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f88b 	bl	80093dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	bc80      	pop	{r7}
 80092de:	4770      	bx	lr

080092e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bc80      	pop	{r7}
 80092f0:	4770      	bx	lr

080092f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr

08009304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
	...

08009318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a29      	ldr	r2, [pc, #164]	; (80093d0 <TIM_Base_SetConfig+0xb8>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d003      	beq.n	8009338 <TIM_Base_SetConfig+0x20>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009336:	d108      	bne.n	800934a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a20      	ldr	r2, [pc, #128]	; (80093d0 <TIM_Base_SetConfig+0xb8>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00b      	beq.n	800936a <TIM_Base_SetConfig+0x52>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009358:	d007      	beq.n	800936a <TIM_Base_SetConfig+0x52>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <TIM_Base_SetConfig+0xbc>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d003      	beq.n	800936a <TIM_Base_SetConfig+0x52>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a1c      	ldr	r2, [pc, #112]	; (80093d8 <TIM_Base_SetConfig+0xc0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d108      	bne.n	800937c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a0b      	ldr	r2, [pc, #44]	; (80093d0 <TIM_Base_SetConfig+0xb8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d007      	beq.n	80093b8 <TIM_Base_SetConfig+0xa0>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a0a      	ldr	r2, [pc, #40]	; (80093d4 <TIM_Base_SetConfig+0xbc>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d003      	beq.n	80093b8 <TIM_Base_SetConfig+0xa0>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a09      	ldr	r2, [pc, #36]	; (80093d8 <TIM_Base_SetConfig+0xc0>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d103      	bne.n	80093c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	691a      	ldr	r2, [r3, #16]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	615a      	str	r2, [r3, #20]
}
 80093c6:	bf00      	nop
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr
 80093d0:	40012c00 	.word	0x40012c00
 80093d4:	40014400 	.word	0x40014400
 80093d8:	40014800 	.word	0x40014800

080093dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr

080093ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr

08009400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr

08009412 <LL_RCC_GetUSARTClockSource>:
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800941a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800941e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	401a      	ands	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	4313      	orrs	r3, r2
}
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	bc80      	pop	{r7}
 8009434:	4770      	bx	lr

08009436 <LL_RCC_GetLPUARTClockSource>:
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800943e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009442:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4013      	ands	r3, r2
}
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr

08009454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e042      	b.n	80094ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7f9 fd3f 	bl	8002efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2224      	movs	r2, #36	; 0x24
 8009482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0201 	bic.w	r2, r2, #1
 8009494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fc48 	bl	8009d2c <UART_SetConfig>
 800949c:	4603      	mov	r3, r0
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e022      	b.n	80094ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d002      	beq.n	80094b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 feb0 	bl	800a214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0201 	orr.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 ff36 	bl	800a356 <UART_CheckIdleState>
 80094ea:	4603      	mov	r3, r0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08a      	sub	sp, #40	; 0x28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009508:	2b20      	cmp	r3, #32
 800950a:	d142      	bne.n	8009592 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_UART_Receive_IT+0x24>
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e03b      	b.n	8009594 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009522:	2b01      	cmp	r3, #1
 8009524:	d101      	bne.n	800952a <HAL_UART_Receive_IT+0x36>
 8009526:	2302      	movs	r3, #2
 8009528:	e034      	b.n	8009594 <HAL_UART_Receive_IT+0xa0>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a17      	ldr	r2, [pc, #92]	; (800959c <HAL_UART_Receive_IT+0xa8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d01f      	beq.n	8009582 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d018      	beq.n	8009582 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	613b      	str	r3, [r7, #16]
   return(result);
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	461a      	mov	r2, r3
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	623b      	str	r3, [r7, #32]
 8009570:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	69f9      	ldr	r1, [r7, #28]
 8009574:	6a3a      	ldr	r2, [r7, #32]
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	61bb      	str	r3, [r7, #24]
   return(result);
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e6      	bne.n	8009550 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	461a      	mov	r2, r3
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fff7 	bl	800a57c <UART_Start_Receive_IT>
 800958e:	4603      	mov	r3, r0
 8009590:	e000      	b.n	8009594 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009592:	2302      	movs	r3, #2
  }
}
 8009594:	4618      	mov	r0, r3
 8009596:	3728      	adds	r7, #40	; 0x28
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40008000 	.word	0x40008000

080095a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	; 0x28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	d17a      	bne.n	80096ae <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <HAL_UART_Transmit_DMA+0x24>
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e073      	b.n	80096b0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_UART_Transmit_DMA+0x36>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e06c      	b.n	80096b0 <HAL_UART_Transmit_DMA+0x110>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	88fa      	ldrh	r2, [r7, #6]
 80095f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2221      	movs	r2, #33	; 0x21
 8009600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009608:	2b00      	cmp	r3, #0
 800960a:	d02c      	beq.n	8009666 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009610:	4a29      	ldr	r2, [pc, #164]	; (80096b8 <HAL_UART_Transmit_DMA+0x118>)
 8009612:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009618:	4a28      	ldr	r2, [pc, #160]	; (80096bc <HAL_UART_Transmit_DMA+0x11c>)
 800961a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009620:	4a27      	ldr	r2, [pc, #156]	; (80096c0 <HAL_UART_Transmit_DMA+0x120>)
 8009622:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009628:	2200      	movs	r2, #0
 800962a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009634:	4619      	mov	r1, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3328      	adds	r3, #40	; 0x28
 800963c:	461a      	mov	r2, r3
 800963e:	88fb      	ldrh	r3, [r7, #6]
 8009640:	f7fb fb22 	bl	8004c88 <HAL_DMA_Start_IT>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00d      	beq.n	8009666 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2210      	movs	r2, #16
 800964e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2220      	movs	r2, #32
 800965e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e024      	b.n	80096b0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2240      	movs	r2, #64	; 0x40
 800966c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	613b      	str	r3, [r7, #16]
   return(result);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3308      	adds	r3, #8
 8009694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009696:	623a      	str	r2, [r7, #32]
 8009698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	69f9      	ldr	r1, [r7, #28]
 800969c:	6a3a      	ldr	r2, [r7, #32]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e5      	bne.n	8009676 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80096ae:	2302      	movs	r3, #2
  }
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3728      	adds	r7, #40	; 0x28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	0800aa67 	.word	0x0800aa67
 80096bc:	0800ab01 	.word	0x0800ab01
 80096c0:	0800ac7b 	.word	0x0800ac7b

080096c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b0ba      	sub	sp, #232	; 0xe8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80096ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80096f2:	4013      	ands	r3, r2
 80096f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80096f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d11b      	bne.n	8009738 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d015      	beq.n	8009738 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800970c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009710:	f003 0320 	and.w	r3, r3, #32
 8009714:	2b00      	cmp	r3, #0
 8009716:	d105      	bne.n	8009724 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800971c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d009      	beq.n	8009738 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 82d6 	beq.w	8009cda <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
      }
      return;
 8009736:	e2d0      	b.n	8009cda <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 811f 	beq.w	8009980 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009742:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009746:	4b8b      	ldr	r3, [pc, #556]	; (8009974 <HAL_UART_IRQHandler+0x2b0>)
 8009748:	4013      	ands	r3, r2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800974e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009752:	4b89      	ldr	r3, [pc, #548]	; (8009978 <HAL_UART_IRQHandler+0x2b4>)
 8009754:	4013      	ands	r3, r2
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 8112 	beq.w	8009980 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800975c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d011      	beq.n	800978c <HAL_UART_IRQHandler+0xc8>
 8009768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800976c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2201      	movs	r2, #1
 800977a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009782:	f043 0201 	orr.w	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800978c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009790:	f003 0302 	and.w	r3, r3, #2
 8009794:	2b00      	cmp	r3, #0
 8009796:	d011      	beq.n	80097bc <HAL_UART_IRQHandler+0xf8>
 8009798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2202      	movs	r2, #2
 80097aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b2:	f043 0204 	orr.w	r2, r3, #4
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d011      	beq.n	80097ec <HAL_UART_IRQHandler+0x128>
 80097c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2204      	movs	r2, #4
 80097da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e2:	f043 0202 	orr.w	r2, r3, #2
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f0:	f003 0308 	and.w	r3, r3, #8
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d017      	beq.n	8009828 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009804:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009808:	4b5a      	ldr	r3, [pc, #360]	; (8009974 <HAL_UART_IRQHandler+0x2b0>)
 800980a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2208      	movs	r2, #8
 8009816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800981e:	f043 0208 	orr.w	r2, r3, #8
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009830:	2b00      	cmp	r3, #0
 8009832:	d012      	beq.n	800985a <HAL_UART_IRQHandler+0x196>
 8009834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009850:	f043 0220 	orr.w	r2, r3, #32
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 823c 	beq.w	8009cde <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d013      	beq.n	800989a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b00      	cmp	r3, #0
 800987c:	d105      	bne.n	800988a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800987e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ae:	2b40      	cmp	r3, #64	; 0x40
 80098b0:	d005      	beq.n	80098be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d04f      	beq.n	800995e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 f86c 	bl	800a99c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	2b40      	cmp	r3, #64	; 0x40
 80098d0:	d141      	bne.n	8009956 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3308      	adds	r3, #8
 80098d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3308      	adds	r3, #8
 80098fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800990a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1d9      	bne.n	80098d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d013      	beq.n	800994e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800992a:	4a14      	ldr	r2, [pc, #80]	; (800997c <HAL_UART_IRQHandler+0x2b8>)
 800992c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009932:	4618      	mov	r0, r3
 8009934:	f7fb fa84 	bl	8004e40 <HAL_DMA_Abort_IT>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d017      	beq.n	800996e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994c:	e00f      	b.n	800996e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f9e2 	bl	8009d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009954:	e00b      	b.n	800996e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f9de 	bl	8009d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995c:	e007      	b.n	800996e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f9da 	bl	8009d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800996c:	e1b7      	b.n	8009cde <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996e:	bf00      	nop
    return;
 8009970:	e1b5      	b.n	8009cde <HAL_UART_IRQHandler+0x61a>
 8009972:	bf00      	nop
 8009974:	10000001 	.word	0x10000001
 8009978:	04000120 	.word	0x04000120
 800997c:	0800acfb 	.word	0x0800acfb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009984:	2b01      	cmp	r3, #1
 8009986:	f040 814a 	bne.w	8009c1e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800998a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 8143 	beq.w	8009c1e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 813c 	beq.w	8009c1e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2210      	movs	r2, #16
 80099ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b8:	2b40      	cmp	r3, #64	; 0x40
 80099ba:	f040 80b5 	bne.w	8009b28 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80099ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 8187 	beq.w	8009ce2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099de:	429a      	cmp	r2, r3
 80099e0:	f080 817f 	bcs.w	8009ce2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f040 8086 	bne.w	8009b0c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1da      	bne.n	8009a00 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3308      	adds	r3, #8
 8009a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a54:	e853 3f00 	ldrex	r3, [r3]
 8009a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a5c:	f023 0301 	bic.w	r3, r3, #1
 8009a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3308      	adds	r3, #8
 8009a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e1      	bne.n	8009a4a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e3      	bne.n	8009a86 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009adc:	f023 0310 	bic.w	r3, r3, #16
 8009ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009aee:	65bb      	str	r3, [r7, #88]	; 0x58
 8009af0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e4      	bne.n	8009acc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fb f93c 	bl	8004d84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7f8 f87d 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009b26:	e0dc      	b.n	8009ce2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 80ce 	beq.w	8009ce6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8009b4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 80c9 	beq.w	8009ce6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b76:	647b      	str	r3, [r7, #68]	; 0x44
 8009b78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e4      	bne.n	8009b54 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3308      	adds	r3, #8
 8009b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	623b      	str	r3, [r7, #32]
   return(result);
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ba0:	f023 0301 	bic.w	r3, r3, #1
 8009ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3308      	adds	r3, #8
 8009bae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bb2:	633a      	str	r2, [r7, #48]	; 0x30
 8009bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e1      	bne.n	8009b8a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 0310 	bic.w	r3, r3, #16
 8009bee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	69b9      	ldr	r1, [r7, #24]
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	617b      	str	r3, [r7, #20]
   return(result);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e4      	bne.n	8009bda <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7f8 f802 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009c1c:	e063      	b.n	8009ce6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00e      	beq.n	8009c48 <HAL_UART_IRQHandler+0x584>
 8009c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d008      	beq.n	8009c48 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 fcf7 	bl	800b634 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c46:	e051      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d014      	beq.n	8009c7e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d105      	bne.n	8009c6c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d008      	beq.n	8009c7e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d03a      	beq.n	8009cea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	4798      	blx	r3
    }
    return;
 8009c7c:	e035      	b.n	8009cea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d009      	beq.n	8009c9e <HAL_UART_IRQHandler+0x5da>
 8009c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 f845 	bl	800ad26 <UART_EndTransmit_IT>
    return;
 8009c9c:	e026      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <HAL_UART_IRQHandler+0x5fa>
 8009caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 fcce 	bl	800b658 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cbc:	e016      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d010      	beq.n	8009cec <HAL_UART_IRQHandler+0x628>
 8009cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da0c      	bge.n	8009cec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fcb7 	bl	800b646 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cd8:	e008      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
      return;
 8009cda:	bf00      	nop
 8009cdc:	e006      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
    return;
 8009cde:	bf00      	nop
 8009ce0:	e004      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
      return;
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
      return;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <HAL_UART_IRQHandler+0x628>
    return;
 8009cea:	bf00      	nop
  }
}
 8009cec:	37e8      	adds	r7, #232	; 0xe8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop

08009cf4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bc80      	pop	{r7}
 8009d04:	4770      	bx	lr

08009d06 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bc80      	pop	{r7}
 8009d16:	4770      	bx	lr

08009d18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr
	...

08009d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d30:	b08c      	sub	sp, #48	; 0x30
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	431a      	orrs	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	4b94      	ldr	r3, [pc, #592]	; (8009fac <UART_SetConfig+0x280>)
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d64:	430b      	orrs	r3, r1
 8009d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	68da      	ldr	r2, [r3, #12]
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a89      	ldr	r2, [pc, #548]	; (8009fb0 <UART_SetConfig+0x284>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d94:	4313      	orrs	r3, r2
 8009d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009da2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	6812      	ldr	r2, [r2, #0]
 8009daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dac:	430b      	orrs	r3, r1
 8009dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db6:	f023 010f 	bic.w	r1, r3, #15
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a7a      	ldr	r2, [pc, #488]	; (8009fb4 <UART_SetConfig+0x288>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d127      	bne.n	8009e20 <UART_SetConfig+0xf4>
 8009dd0:	2003      	movs	r0, #3
 8009dd2:	f7ff fb1e 	bl	8009412 <LL_RCC_GetUSARTClockSource>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d81b      	bhi.n	8009e18 <UART_SetConfig+0xec>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0xbc>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009df9 	.word	0x08009df9
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e01 	.word	0x08009e01
 8009df4:	08009e11 	.word	0x08009e11
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dfe:	e080      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e00:	2302      	movs	r3, #2
 8009e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e06:	e07c      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e0e:	e078      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e16:	e074      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e1e:	e070      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a64      	ldr	r2, [pc, #400]	; (8009fb8 <UART_SetConfig+0x28c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d138      	bne.n	8009e9c <UART_SetConfig+0x170>
 8009e2a:	200c      	movs	r0, #12
 8009e2c:	f7ff faf1 	bl	8009412 <LL_RCC_GetUSARTClockSource>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8009e36:	2b0c      	cmp	r3, #12
 8009e38:	d82c      	bhi.n	8009e94 <UART_SetConfig+0x168>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <UART_SetConfig+0x114>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009e75 	.word	0x08009e75
 8009e44:	08009e95 	.word	0x08009e95
 8009e48:	08009e95 	.word	0x08009e95
 8009e4c:	08009e95 	.word	0x08009e95
 8009e50:	08009e85 	.word	0x08009e85
 8009e54:	08009e95 	.word	0x08009e95
 8009e58:	08009e95 	.word	0x08009e95
 8009e5c:	08009e95 	.word	0x08009e95
 8009e60:	08009e7d 	.word	0x08009e7d
 8009e64:	08009e95 	.word	0x08009e95
 8009e68:	08009e95 	.word	0x08009e95
 8009e6c:	08009e95 	.word	0x08009e95
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	2300      	movs	r3, #0
 8009e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e7a:	e042      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e82:	e03e      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e84:	2304      	movs	r3, #4
 8009e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e8a:	e03a      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e92:	e036      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e94:	2310      	movs	r3, #16
 8009e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9a:	e032      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a43      	ldr	r2, [pc, #268]	; (8009fb0 <UART_SetConfig+0x284>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d12a      	bne.n	8009efc <UART_SetConfig+0x1d0>
 8009ea6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009eaa:	f7ff fac4 	bl	8009436 <LL_RCC_GetLPUARTClockSource>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009eb4:	d01a      	beq.n	8009eec <UART_SetConfig+0x1c0>
 8009eb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009eba:	d81b      	bhi.n	8009ef4 <UART_SetConfig+0x1c8>
 8009ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ec0:	d00c      	beq.n	8009edc <UART_SetConfig+0x1b0>
 8009ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ec6:	d815      	bhi.n	8009ef4 <UART_SetConfig+0x1c8>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <UART_SetConfig+0x1a8>
 8009ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ed0:	d008      	beq.n	8009ee4 <UART_SetConfig+0x1b8>
 8009ed2:	e00f      	b.n	8009ef4 <UART_SetConfig+0x1c8>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eda:	e012      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009edc:	2302      	movs	r3, #2
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ee2:	e00e      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eea:	e00a      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009eec:	2308      	movs	r3, #8
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ef2:	e006      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009efa:	e002      	b.n	8009f02 <UART_SetConfig+0x1d6>
 8009efc:	2310      	movs	r3, #16
 8009efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a2a      	ldr	r2, [pc, #168]	; (8009fb0 <UART_SetConfig+0x284>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	f040 80a4 	bne.w	800a056 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f12:	2b08      	cmp	r3, #8
 8009f14:	d823      	bhi.n	8009f5e <UART_SetConfig+0x232>
 8009f16:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <UART_SetConfig+0x1f0>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f41 	.word	0x08009f41
 8009f20:	08009f5f 	.word	0x08009f5f
 8009f24:	08009f49 	.word	0x08009f49
 8009f28:	08009f5f 	.word	0x08009f5f
 8009f2c:	08009f4f 	.word	0x08009f4f
 8009f30:	08009f5f 	.word	0x08009f5f
 8009f34:	08009f5f 	.word	0x08009f5f
 8009f38:	08009f5f 	.word	0x08009f5f
 8009f3c:	08009f57 	.word	0x08009f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f40:	f7fd fce6 	bl	8007910 <HAL_RCC_GetPCLK1Freq>
 8009f44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f46:	e010      	b.n	8009f6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <UART_SetConfig+0x290>)
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f4c:	e00d      	b.n	8009f6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f4e:	f7fd fc2b 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 8009f52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f54:	e009      	b.n	8009f6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f5c:	e005      	b.n	8009f6a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 8137 	beq.w	800a1e0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	4a12      	ldr	r2, [pc, #72]	; (8009fc0 <UART_SetConfig+0x294>)
 8009f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	005b      	lsls	r3, r3, #1
 8009f8e:	4413      	add	r3, r2
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d305      	bcc.n	8009fa2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9c:	69ba      	ldr	r2, [r7, #24]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d910      	bls.n	8009fc4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009fa8:	e11a      	b.n	800a1e0 <UART_SetConfig+0x4b4>
 8009faa:	bf00      	nop
 8009fac:	cfff69f3 	.word	0xcfff69f3
 8009fb0:	40008000 	.word	0x40008000
 8009fb4:	40013800 	.word	0x40013800
 8009fb8:	40004400 	.word	0x40004400
 8009fbc:	00f42400 	.word	0x00f42400
 8009fc0:	0801d5b0 	.word	0x0801d5b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	60fa      	str	r2, [r7, #12]
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	4a8e      	ldr	r2, [pc, #568]	; (800a20c <UART_SetConfig+0x4e0>)
 8009fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	2200      	movs	r2, #0
 8009fda:	603b      	str	r3, [r7, #0]
 8009fdc:	607a      	str	r2, [r7, #4]
 8009fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fe6:	f7f6 fed1 	bl	8000d8c <__aeabi_uldivmod>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4610      	mov	r0, r2
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	f04f 0300 	mov.w	r3, #0
 8009ffa:	020b      	lsls	r3, r1, #8
 8009ffc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a000:	0202      	lsls	r2, r0, #8
 800a002:	6979      	ldr	r1, [r7, #20]
 800a004:	6849      	ldr	r1, [r1, #4]
 800a006:	0849      	lsrs	r1, r1, #1
 800a008:	2000      	movs	r0, #0
 800a00a:	460c      	mov	r4, r1
 800a00c:	4605      	mov	r5, r0
 800a00e:	eb12 0804 	adds.w	r8, r2, r4
 800a012:	eb43 0905 	adc.w	r9, r3, r5
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	469a      	mov	sl, r3
 800a01e:	4693      	mov	fp, r2
 800a020:	4652      	mov	r2, sl
 800a022:	465b      	mov	r3, fp
 800a024:	4640      	mov	r0, r8
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 feb0 	bl	8000d8c <__aeabi_uldivmod>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4613      	mov	r3, r2
 800a032:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a03a:	d308      	bcc.n	800a04e <UART_SetConfig+0x322>
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a042:	d204      	bcs.n	800a04e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6a3a      	ldr	r2, [r7, #32]
 800a04a:	60da      	str	r2, [r3, #12]
 800a04c:	e0c8      	b.n	800a1e0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a054:	e0c4      	b.n	800a1e0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05e:	d168      	bne.n	800a132 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a064:	2b08      	cmp	r3, #8
 800a066:	d828      	bhi.n	800a0ba <UART_SetConfig+0x38e>
 800a068:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <UART_SetConfig+0x344>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	0800a0bb 	.word	0x0800a0bb
 800a080:	0800a0ab 	.word	0x0800a0ab
 800a084:	0800a0bb 	.word	0x0800a0bb
 800a088:	0800a0bb 	.word	0x0800a0bb
 800a08c:	0800a0bb 	.word	0x0800a0bb
 800a090:	0800a0b3 	.word	0x0800a0b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a094:	f7fd fc3c 	bl	8007910 <HAL_RCC_GetPCLK1Freq>
 800a098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a09a:	e014      	b.n	800a0c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a09c:	f7fd fc4a 	bl	8007934 <HAL_RCC_GetPCLK2Freq>
 800a0a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0a2:	e010      	b.n	800a0c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0a4:	4b5a      	ldr	r3, [pc, #360]	; (800a210 <UART_SetConfig+0x4e4>)
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0a8:	e00d      	b.n	800a0c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0aa:	f7fd fb7d 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0b0:	e009      	b.n	800a0c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0b8:	e005      	b.n	800a0c6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 8089 	beq.w	800a1e0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	4a4e      	ldr	r2, [pc, #312]	; (800a20c <UART_SetConfig+0x4e0>)
 800a0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0e0:	005a      	lsls	r2, r3, #1
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	085b      	lsrs	r3, r3, #1
 800a0e8:	441a      	add	r2, r3
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	2b0f      	cmp	r3, #15
 800a0fa:	d916      	bls.n	800a12a <UART_SetConfig+0x3fe>
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a102:	d212      	bcs.n	800a12a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	b29b      	uxth	r3, r3
 800a108:	f023 030f 	bic.w	r3, r3, #15
 800a10c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	085b      	lsrs	r3, r3, #1
 800a112:	b29b      	uxth	r3, r3
 800a114:	f003 0307 	and.w	r3, r3, #7
 800a118:	b29a      	uxth	r2, r3
 800a11a:	8bfb      	ldrh	r3, [r7, #30]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	8bfa      	ldrh	r2, [r7, #30]
 800a126:	60da      	str	r2, [r3, #12]
 800a128:	e05a      	b.n	800a1e0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a130:	e056      	b.n	800a1e0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a136:	2b08      	cmp	r3, #8
 800a138:	d827      	bhi.n	800a18a <UART_SetConfig+0x45e>
 800a13a:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <UART_SetConfig+0x414>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	0800a18b 	.word	0x0800a18b
 800a150:	0800a17b 	.word	0x0800a17b
 800a154:	0800a18b 	.word	0x0800a18b
 800a158:	0800a18b 	.word	0x0800a18b
 800a15c:	0800a18b 	.word	0x0800a18b
 800a160:	0800a183 	.word	0x0800a183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a164:	f7fd fbd4 	bl	8007910 <HAL_RCC_GetPCLK1Freq>
 800a168:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a16a:	e014      	b.n	800a196 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a16c:	f7fd fbe2 	bl	8007934 <HAL_RCC_GetPCLK2Freq>
 800a170:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a172:	e010      	b.n	800a196 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a174:	4b26      	ldr	r3, [pc, #152]	; (800a210 <UART_SetConfig+0x4e4>)
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a178:	e00d      	b.n	800a196 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a17a:	f7fd fb15 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 800a17e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a180:	e009      	b.n	800a196 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a188:	e005      	b.n	800a196 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a194:	bf00      	nop
    }

    if (pclk != 0U)
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d021      	beq.n	800a1e0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	4a1a      	ldr	r2, [pc, #104]	; (800a20c <UART_SetConfig+0x4e0>)
 800a1a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	085b      	lsrs	r3, r3, #1
 800a1b4:	441a      	add	r2, r3
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	2b0f      	cmp	r3, #15
 800a1c6:	d908      	bls.n	800a1da <UART_SetConfig+0x4ae>
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ce:	d204      	bcs.n	800a1da <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6a3a      	ldr	r2, [r7, #32]
 800a1d6:	60da      	str	r2, [r3, #12]
 800a1d8:	e002      	b.n	800a1e0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a1fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a200:	4618      	mov	r0, r3
 800a202:	3730      	adds	r7, #48	; 0x30
 800a204:	46bd      	mov	sp, r7
 800a206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a20a:	bf00      	nop
 800a20c:	0801d5b0 	.word	0x0801d5b0
 800a210:	00f42400 	.word	0x00f42400

0800a214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	430a      	orrs	r2, r1
 800a25e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	f003 0310 	and.w	r3, r3, #16
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00a      	beq.n	800a2c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00a      	beq.n	800a2e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d01a      	beq.n	800a32a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a312:	d10a      	bne.n	800a32a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	430a      	orrs	r2, r1
 800a328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	605a      	str	r2, [r3, #4]
  }
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	bc80      	pop	{r7}
 800a354:	4770      	bx	lr

0800a356 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af02      	add	r7, sp, #8
 800a35c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a366:	f7f8 f8d5 	bl	8002514 <HAL_GetTick>
 800a36a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0308 	and.w	r3, r3, #8
 800a376:	2b08      	cmp	r3, #8
 800a378:	d10e      	bne.n	800a398 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a37a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f82f 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e025      	b.n	800a3e4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d10e      	bne.n	800a3c4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f819 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d001      	beq.n	800a3c4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	e00f      	b.n	800a3e4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b09c      	sub	sp, #112	; 0x70
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fc:	e0a9      	b.n	800a552 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a404:	f000 80a5 	beq.w	800a552 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a408:	f7f8 f884 	bl	8002514 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a414:	429a      	cmp	r2, r3
 800a416:	d302      	bcc.n	800a41e <UART_WaitOnFlagUntilTimeout+0x32>
 800a418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d140      	bne.n	800a4a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a432:	667b      	str	r3, [r7, #100]	; 0x64
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a43c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a43e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a444:	e841 2300 	strex	r3, r2, [r1]
 800a448:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a44a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e6      	bne.n	800a41e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45a:	e853 3f00 	ldrex	r3, [r3]
 800a45e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	f023 0301 	bic.w	r3, r3, #1
 800a466:	663b      	str	r3, [r7, #96]	; 0x60
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a470:	64ba      	str	r2, [r7, #72]	; 0x48
 800a472:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a474:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a478:	e841 2300 	strex	r3, r2, [r1]
 800a47c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e5      	bne.n	800a450 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2220      	movs	r2, #32
 800a488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2220      	movs	r2, #32
 800a490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e069      	b.n	800a574 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0304 	and.w	r3, r3, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d051      	beq.n	800a552 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4bc:	d149      	bne.n	800a552 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e6      	bne.n	800a4c8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3308      	adds	r3, #8
 800a500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	613b      	str	r3, [r7, #16]
   return(result);
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f023 0301 	bic.w	r3, r3, #1
 800a510:	66bb      	str	r3, [r7, #104]	; 0x68
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3308      	adds	r3, #8
 800a518:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a51a:	623a      	str	r2, [r7, #32]
 800a51c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	69f9      	ldr	r1, [r7, #28]
 800a520:	6a3a      	ldr	r2, [r7, #32]
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	61bb      	str	r3, [r7, #24]
   return(result);
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e5      	bne.n	800a4fa <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2220      	movs	r2, #32
 800a53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2220      	movs	r2, #32
 800a542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e010      	b.n	800a574 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69da      	ldr	r2, [r3, #28]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4013      	ands	r3, r2
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	429a      	cmp	r2, r3
 800a560:	bf0c      	ite	eq
 800a562:	2301      	moveq	r3, #1
 800a564:	2300      	movne	r3, #0
 800a566:	b2db      	uxtb	r3, r3
 800a568:	461a      	mov	r2, r3
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	f43f af46 	beq.w	800a3fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3770      	adds	r7, #112	; 0x70
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b0a3      	sub	sp, #140	; 0x8c
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	88fa      	ldrh	r2, [r7, #6]
 800a594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	88fa      	ldrh	r2, [r7, #6]
 800a59c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ae:	d10e      	bne.n	800a5ce <UART_Start_Receive_IT+0x52>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d105      	bne.n	800a5c4 <UART_Start_Receive_IT+0x48>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a5be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5c2:	e02d      	b.n	800a620 <UART_Start_Receive_IT+0xa4>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	22ff      	movs	r2, #255	; 0xff
 800a5c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5cc:	e028      	b.n	800a620 <UART_Start_Receive_IT+0xa4>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10d      	bne.n	800a5f2 <UART_Start_Receive_IT+0x76>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d104      	bne.n	800a5e8 <UART_Start_Receive_IT+0x6c>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	22ff      	movs	r2, #255	; 0xff
 800a5e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5e6:	e01b      	b.n	800a620 <UART_Start_Receive_IT+0xa4>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	227f      	movs	r2, #127	; 0x7f
 800a5ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5f0:	e016      	b.n	800a620 <UART_Start_Receive_IT+0xa4>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5fa:	d10d      	bne.n	800a618 <UART_Start_Receive_IT+0x9c>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <UART_Start_Receive_IT+0x92>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	227f      	movs	r2, #127	; 0x7f
 800a608:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a60c:	e008      	b.n	800a620 <UART_Start_Receive_IT+0xa4>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	223f      	movs	r2, #63	; 0x3f
 800a612:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a616:	e003      	b.n	800a620 <UART_Start_Receive_IT+0xa4>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2222      	movs	r2, #34	; 0x22
 800a62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3308      	adds	r3, #8
 800a636:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63a:	e853 3f00 	ldrex	r3, [r3]
 800a63e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a642:	f043 0301 	orr.w	r3, r3, #1
 800a646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3308      	adds	r3, #8
 800a650:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a654:	673a      	str	r2, [r7, #112]	; 0x70
 800a656:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a65a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e3      	bne.n	800a630 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a670:	d153      	bne.n	800a71a <UART_Start_Receive_IT+0x19e>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a678:	88fa      	ldrh	r2, [r7, #6]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d34d      	bcc.n	800a71a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a686:	d107      	bne.n	800a698 <UART_Start_Receive_IT+0x11c>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d103      	bne.n	800a698 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	4a4a      	ldr	r2, [pc, #296]	; (800a7bc <UART_Start_Receive_IT+0x240>)
 800a694:	671a      	str	r2, [r3, #112]	; 0x70
 800a696:	e002      	b.n	800a69e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4a49      	ldr	r2, [pc, #292]	; (800a7c0 <UART_Start_Receive_IT+0x244>)
 800a69c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d01a      	beq.n	800a6e4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e4      	bne.n	800a6ae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ee:	e853 3f00 	ldrex	r3, [r3]
 800a6f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3308      	adds	r3, #8
 800a702:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a704:	64ba      	str	r2, [r7, #72]	; 0x48
 800a706:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a70a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a70c:	e841 2300 	strex	r3, r2, [r1]
 800a710:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1e5      	bne.n	800a6e4 <UART_Start_Receive_IT+0x168>
 800a718:	e04a      	b.n	800a7b0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a722:	d107      	bne.n	800a734 <UART_Start_Receive_IT+0x1b8>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d103      	bne.n	800a734 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4a25      	ldr	r2, [pc, #148]	; (800a7c4 <UART_Start_Receive_IT+0x248>)
 800a730:	671a      	str	r2, [r3, #112]	; 0x70
 800a732:	e002      	b.n	800a73a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4a24      	ldr	r2, [pc, #144]	; (800a7c8 <UART_Start_Receive_IT+0x24c>)
 800a738:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d019      	beq.n	800a77e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a75e:	677b      	str	r3, [r7, #116]	; 0x74
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
 800a76a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e6      	bne.n	800a74a <UART_Start_Receive_IT+0x1ce>
 800a77c:	e018      	b.n	800a7b0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	613b      	str	r3, [r7, #16]
   return(result);
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f043 0320 	orr.w	r3, r3, #32
 800a792:	67bb      	str	r3, [r7, #120]	; 0x78
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a79c:	623b      	str	r3, [r7, #32]
 800a79e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	69f9      	ldr	r1, [r7, #28]
 800a7a2:	6a3a      	ldr	r2, [r7, #32]
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e6      	bne.n	800a77e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	378c      	adds	r7, #140	; 0x8c
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bc80      	pop	{r7}
 800a7ba:	4770      	bx	lr
 800a7bc:	0800b335 	.word	0x0800b335
 800a7c0:	0800b03d 	.word	0x0800b03d
 800a7c4:	0800aedd 	.word	0x0800aedd
 800a7c8:	0800ad7d 	.word	0x0800ad7d

0800a7cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b096      	sub	sp, #88	; 0x58
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	88fa      	ldrh	r2, [r7, #6]
 800a7e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2222      	movs	r2, #34	; 0x22
 800a7f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d02c      	beq.n	800a85a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a804:	4a42      	ldr	r2, [pc, #264]	; (800a910 <UART_Start_Receive_DMA+0x144>)
 800a806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a80c:	4a41      	ldr	r2, [pc, #260]	; (800a914 <UART_Start_Receive_DMA+0x148>)
 800a80e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a814:	4a40      	ldr	r2, [pc, #256]	; (800a918 <UART_Start_Receive_DMA+0x14c>)
 800a816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a81c:	2200      	movs	r2, #0
 800a81e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3324      	adds	r3, #36	; 0x24
 800a82a:	4619      	mov	r1, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a830:	461a      	mov	r2, r3
 800a832:	88fb      	ldrh	r3, [r7, #6]
 800a834:	f7fa fa28 	bl	8004c88 <HAL_DMA_Start_IT>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00d      	beq.n	800a85a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2210      	movs	r2, #16
 800a842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e055      	b.n	800a906 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d018      	beq.n	800a89c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a872:	e853 3f00 	ldrex	r3, [r3]
 800a876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a87e:	657b      	str	r3, [r7, #84]	; 0x54
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a888:	64bb      	str	r3, [r7, #72]	; 0x48
 800a88a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a88e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e6      	bne.n	800a86a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	f043 0301 	orr.w	r3, r3, #1
 800a8b2:	653b      	str	r3, [r7, #80]	; 0x50
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8bc:	637a      	str	r2, [r7, #52]	; 0x34
 800a8be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e5      	bne.n	800a89c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	e853 3f00 	ldrex	r3, [r3]
 800a8de:	613b      	str	r3, [r7, #16]
   return(result);
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8f0:	623a      	str	r2, [r7, #32]
 800a8f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f4:	69f9      	ldr	r1, [r7, #28]
 800a8f6:	6a3a      	ldr	r2, [r7, #32]
 800a8f8:	e841 2300 	strex	r3, r2, [r1]
 800a8fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1e5      	bne.n	800a8d0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3758      	adds	r7, #88	; 0x58
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	0800ab1d 	.word	0x0800ab1d
 800a914:	0800ac43 	.word	0x0800ac43
 800a918:	0800ac7b 	.word	0x0800ac7b

0800a91c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b08f      	sub	sp, #60	; 0x3c
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	61fb      	str	r3, [r7, #28]
   return(result);
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a938:	637b      	str	r3, [r7, #52]	; 0x34
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a944:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a94a:	e841 2300 	strex	r3, r2, [r1]
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1e6      	bne.n	800a924 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3308      	adds	r3, #8
 800a95c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	60bb      	str	r3, [r7, #8]
   return(result);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a96c:	633b      	str	r3, [r7, #48]	; 0x30
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3308      	adds	r3, #8
 800a974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a976:	61ba      	str	r2, [r7, #24]
 800a978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6979      	ldr	r1, [r7, #20]
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	613b      	str	r3, [r7, #16]
   return(result);
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e5      	bne.n	800a956 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2220      	movs	r2, #32
 800a98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a992:	bf00      	nop
 800a994:	373c      	adds	r7, #60	; 0x3c
 800a996:	46bd      	mov	sp, r7
 800a998:	bc80      	pop	{r7}
 800a99a:	4770      	bx	lr

0800a99c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b095      	sub	sp, #84	; 0x54
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ac:	e853 3f00 	ldrex	r3, [r3]
 800a9b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a9c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e6      	bne.n	800a9a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9ec:	f023 0301 	bic.w	r3, r3, #1
 800a9f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e3      	bne.n	800a9d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d118      	bne.n	800aa48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f023 0310 	bic.w	r3, r3, #16
 800aa2a:	647b      	str	r3, [r7, #68]	; 0x44
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	461a      	mov	r2, r3
 800aa32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6979      	ldr	r1, [r7, #20]
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	613b      	str	r3, [r7, #16]
   return(result);
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e6      	bne.n	800aa16 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aa5c:	bf00      	nop
 800aa5e:	3754      	adds	r7, #84	; 0x54
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr

0800aa66 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b090      	sub	sp, #64	; 0x40
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0320 	and.w	r3, r3, #32
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d137      	bne.n	800aaf2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800aa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3308      	adds	r3, #8
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	623b      	str	r3, [r7, #32]
   return(result);
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa0:	63bb      	str	r3, [r7, #56]	; 0x38
 800aaa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaaa:	633a      	str	r2, [r7, #48]	; 0x30
 800aaac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e5      	bne.n	800aa8a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	e853 3f00 	ldrex	r3, [r3]
 800aaca:	60fb      	str	r3, [r7, #12]
   return(result);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad2:	637b      	str	r3, [r7, #52]	; 0x34
 800aad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	461a      	mov	r2, r3
 800aada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aadc:	61fb      	str	r3, [r7, #28]
 800aade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	69b9      	ldr	r1, [r7, #24]
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	e841 2300 	strex	r3, r2, [r1]
 800aae8:	617b      	str	r3, [r7, #20]
   return(result);
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e6      	bne.n	800aabe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aaf0:	e002      	b.n	800aaf8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aaf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aaf4:	f7f8 fc46 	bl	8003384 <HAL_UART_TxCpltCallback>
}
 800aaf8:	bf00      	nop
 800aafa:	3740      	adds	r7, #64	; 0x40
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff f8f0 	bl	8009cf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b09c      	sub	sp, #112	; 0x70
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab28:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d171      	bne.n	800ac1c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ab38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab54:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e6      	bne.n	800ab40 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3308      	adds	r3, #8
 800ab78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab84:	f023 0301 	bic.w	r3, r3, #1
 800ab88:	667b      	str	r3, [r7, #100]	; 0x64
 800ab8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3308      	adds	r3, #8
 800ab90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab92:	647a      	str	r2, [r7, #68]	; 0x44
 800ab94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e5      	bne.n	800ab72 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3308      	adds	r3, #8
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	623b      	str	r3, [r7, #32]
   return(result);
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abbc:	663b      	str	r3, [r7, #96]	; 0x60
 800abbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abc6:	633a      	str	r2, [r7, #48]	; 0x30
 800abc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e5      	bne.n	800aba6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abdc:	2220      	movs	r2, #32
 800abde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d118      	bne.n	800ac1c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	e853 3f00 	ldrex	r3, [r3]
 800abf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0310 	bic.w	r3, r3, #16
 800abfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac08:	61fb      	str	r3, [r7, #28]
 800ac0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0c:	69b9      	ldr	r1, [r7, #24]
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	e841 2300 	strex	r3, r2, [r1]
 800ac14:	617b      	str	r3, [r7, #20]
   return(result);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1e6      	bne.n	800abea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d107      	bne.n	800ac34 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac2e:	f7f6 fff7 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac32:	e002      	b.n	800ac3a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ac34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac36:	f7f8 fbbb 	bl	80033b0 <HAL_UART_RxCpltCallback>
}
 800ac3a:	bf00      	nop
 800ac3c:	3770      	adds	r7, #112	; 0x70
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d109      	bne.n	800ac6c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac5e:	085b      	lsrs	r3, r3, #1
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	4619      	mov	r1, r3
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7f6 ffdb 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac6a:	e002      	b.n	800ac72 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff f84a 	bl	8009d06 <HAL_UART_RxHalfCpltCallback>
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b086      	sub	sp, #24
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac86:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac8e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca2:	2b80      	cmp	r3, #128	; 0x80
 800aca4:	d109      	bne.n	800acba <UART_DMAError+0x40>
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b21      	cmp	r3, #33	; 0x21
 800acaa:	d106      	bne.n	800acba <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800acb4:	6978      	ldr	r0, [r7, #20]
 800acb6:	f7ff fe31 	bl	800a91c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc4:	2b40      	cmp	r3, #64	; 0x40
 800acc6:	d109      	bne.n	800acdc <UART_DMAError+0x62>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b22      	cmp	r3, #34	; 0x22
 800accc:	d106      	bne.n	800acdc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800acd6:	6978      	ldr	r0, [r7, #20]
 800acd8:	f7ff fe60 	bl	800a99c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ace2:	f043 0210 	orr.w	r2, r3, #16
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acec:	6978      	ldr	r0, [r7, #20]
 800acee:	f7ff f813 	bl	8009d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acf2:	bf00      	nop
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7fe fffd 	bl	8009d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b088      	sub	sp, #32
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	e853 3f00 	ldrex	r3, [r3]
 800ad3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad42:	61fb      	str	r3, [r7, #28]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	61bb      	str	r3, [r7, #24]
 800ad4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	6979      	ldr	r1, [r7, #20]
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	e841 2300 	strex	r3, r2, [r1]
 800ad58:	613b      	str	r3, [r7, #16]
   return(result);
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e6      	bne.n	800ad2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2220      	movs	r2, #32
 800ad64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7f8 fb08 	bl	8003384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad74:	bf00      	nop
 800ad76:	3720      	adds	r7, #32
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b096      	sub	sp, #88	; 0x58
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad94:	2b22      	cmp	r3, #34	; 0x22
 800ad96:	f040 8095 	bne.w	800aec4 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ada4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ada8:	b2d9      	uxtb	r1, r3
 800adaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb4:	400a      	ands	r2, r1
 800adb6:	b2d2      	uxtb	r2, r2
 800adb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adbe:	1c5a      	adds	r2, r3, #1
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adca:	b29b      	uxth	r3, r3
 800adcc:	3b01      	subs	r3, #1
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800addc:	b29b      	uxth	r3, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d178      	bne.n	800aed4 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	e853 3f00 	ldrex	r3, [r3]
 800adee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adf6:	653b      	str	r3, [r7, #80]	; 0x50
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	461a      	mov	r2, r3
 800adfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae00:	647b      	str	r3, [r7, #68]	; 0x44
 800ae02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae08:	e841 2300 	strex	r3, r2, [r1]
 800ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1e6      	bne.n	800ade2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3308      	adds	r3, #8
 800ae1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	e853 3f00 	ldrex	r3, [r3]
 800ae22:	623b      	str	r3, [r7, #32]
   return(result);
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	f023 0301 	bic.w	r3, r3, #1
 800ae2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	3308      	adds	r3, #8
 800ae32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae34:	633a      	str	r2, [r7, #48]	; 0x30
 800ae36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3c:	e841 2300 	strex	r3, r2, [r1]
 800ae40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1e5      	bne.n	800ae14 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d12e      	bne.n	800aebc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	e853 3f00 	ldrex	r3, [r3]
 800ae70:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f023 0310 	bic.w	r3, r3, #16
 800ae78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae82:	61fb      	str	r3, [r7, #28]
 800ae84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae86:	69b9      	ldr	r1, [r7, #24]
 800ae88:	69fa      	ldr	r2, [r7, #28]
 800ae8a:	e841 2300 	strex	r3, r2, [r1]
 800ae8e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1e6      	bne.n	800ae64 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f003 0310 	and.w	r3, r3, #16
 800aea0:	2b10      	cmp	r3, #16
 800aea2:	d103      	bne.n	800aeac <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2210      	movs	r2, #16
 800aeaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7f6 feb3 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aeba:	e00b      	b.n	800aed4 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7f8 fa77 	bl	80033b0 <HAL_UART_RxCpltCallback>
}
 800aec2:	e007      	b.n	800aed4 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699a      	ldr	r2, [r3, #24]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f042 0208 	orr.w	r2, r2, #8
 800aed2:	619a      	str	r2, [r3, #24]
}
 800aed4:	bf00      	nop
 800aed6:	3758      	adds	r7, #88	; 0x58
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b096      	sub	sp, #88	; 0x58
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aeea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef4:	2b22      	cmp	r3, #34	; 0x22
 800aef6:	f040 8095 	bne.w	800b024 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af08:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800af0a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800af0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800af12:	4013      	ands	r3, r2
 800af14:	b29a      	uxth	r2, r3
 800af16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1e:	1c9a      	adds	r2, r3, #2
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	3b01      	subs	r3, #1
 800af2e:	b29a      	uxth	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d178      	bne.n	800b034 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4a:	e853 3f00 	ldrex	r3, [r3]
 800af4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	461a      	mov	r2, r3
 800af5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af60:	643b      	str	r3, [r7, #64]	; 0x40
 800af62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af68:	e841 2300 	strex	r3, r2, [r1]
 800af6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1e6      	bne.n	800af42 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3308      	adds	r3, #8
 800af7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	e853 3f00 	ldrex	r3, [r3]
 800af82:	61fb      	str	r3, [r7, #28]
   return(result);
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	f023 0301 	bic.w	r3, r3, #1
 800af8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3308      	adds	r3, #8
 800af92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af9c:	e841 2300 	strex	r3, r2, [r1]
 800afa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1e5      	bne.n	800af74 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2220      	movs	r2, #32
 800afac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d12e      	bne.n	800b01c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f023 0310 	bic.w	r3, r3, #16
 800afd8:	647b      	str	r3, [r7, #68]	; 0x44
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afe2:	61bb      	str	r3, [r7, #24]
 800afe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe6:	6979      	ldr	r1, [r7, #20]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	e841 2300 	strex	r3, r2, [r1]
 800afee:	613b      	str	r3, [r7, #16]
   return(result);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1e6      	bne.n	800afc4 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	2b10      	cmp	r3, #16
 800b002:	d103      	bne.n	800b00c <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2210      	movs	r2, #16
 800b00a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7f6 fe03 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b01a:	e00b      	b.n	800b034 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7f8 f9c7 	bl	80033b0 <HAL_UART_RxCpltCallback>
}
 800b022:	e007      	b.n	800b034 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	699a      	ldr	r2, [r3, #24]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f042 0208 	orr.w	r2, r2, #8
 800b032:	619a      	str	r2, [r3, #24]
}
 800b034:	bf00      	nop
 800b036:	3758      	adds	r7, #88	; 0x58
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b0a6      	sub	sp, #152	; 0x98
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b04a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	69db      	ldr	r3, [r3, #28]
 800b054:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b072:	2b22      	cmp	r3, #34	; 0x22
 800b074:	f040 814f 	bne.w	800b316 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b07e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b082:	e0f6      	b.n	800b272 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b08e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b092:	b2d9      	uxtb	r1, r3
 800b094:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b09e:	400a      	ands	r2, r1
 800b0a0:	b2d2      	uxtb	r2, r2
 800b0a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a8:	1c5a      	adds	r2, r3, #1
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b0ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0ce:	f003 0307 	and.w	r3, r3, #7
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d053      	beq.n	800b17e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d011      	beq.n	800b106 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b0e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00b      	beq.n	800b106 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0fc:	f043 0201 	orr.w	r2, r3, #1
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d011      	beq.n	800b136 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2202      	movs	r2, #2
 800b124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b12c:	f043 0204 	orr.w	r2, r3, #4
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b136:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b13a:	f003 0304 	and.w	r3, r3, #4
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d011      	beq.n	800b166 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00b      	beq.n	800b166 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2204      	movs	r2, #4
 800b154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b15c:	f043 0202 	orr.w	r2, r3, #2
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7fe fdd1 	bl	8009d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b184:	b29b      	uxth	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d173      	bne.n	800b272 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b192:	e853 3f00 	ldrex	r3, [r3]
 800b196:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b19a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b19e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1ae:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b1b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1b4:	e841 2300 	strex	r3, r2, [r1]
 800b1b8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b1ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1e4      	bne.n	800b18a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1d6:	f023 0301 	bic.w	r3, r3, #1
 800b1da:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b1e4:	657a      	str	r2, [r7, #84]	; 0x54
 800b1e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ec:	e841 2300 	strex	r3, r2, [r1]
 800b1f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e3      	bne.n	800b1c0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2220      	movs	r2, #32
 800b1fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d12e      	bne.n	800b26c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21c:	e853 3f00 	ldrex	r3, [r3]
 800b220:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	f023 0310 	bic.w	r3, r3, #16
 800b228:	67bb      	str	r3, [r7, #120]	; 0x78
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b232:	643b      	str	r3, [r7, #64]	; 0x40
 800b234:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b236:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b23a:	e841 2300 	strex	r3, r2, [r1]
 800b23e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1e6      	bne.n	800b214 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	2b10      	cmp	r3, #16
 800b252:	d103      	bne.n	800b25c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2210      	movs	r2, #16
 800b25a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7f6 fcdb 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
 800b26a:	e002      	b.n	800b272 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7f8 f89f 	bl	80033b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b276:	2b00      	cmp	r3, #0
 800b278:	d006      	beq.n	800b288 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b27a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b27e:	f003 0320 	and.w	r3, r3, #32
 800b282:	2b00      	cmp	r3, #0
 800b284:	f47f aefe 	bne.w	800b084 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b28e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b292:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b296:	2b00      	cmp	r3, #0
 800b298:	d045      	beq.n	800b326 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d23e      	bcs.n	800b326 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	e853 3f00 	ldrex	r3, [r3]
 800b2b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2be:	673b      	str	r3, [r7, #112]	; 0x70
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b2c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2d0:	e841 2300 	strex	r3, r2, [r1]
 800b2d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e5      	bne.n	800b2a8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a14      	ldr	r2, [pc, #80]	; (800b330 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800b2e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f043 0320 	orr.w	r3, r3, #32
 800b2f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b304:	6979      	ldr	r1, [r7, #20]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	e841 2300 	strex	r3, r2, [r1]
 800b30c:	613b      	str	r3, [r7, #16]
   return(result);
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1e6      	bne.n	800b2e2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b314:	e007      	b.n	800b326 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	699a      	ldr	r2, [r3, #24]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f042 0208 	orr.w	r2, r2, #8
 800b324:	619a      	str	r2, [r3, #24]
}
 800b326:	bf00      	nop
 800b328:	3798      	adds	r7, #152	; 0x98
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	0800ad7d 	.word	0x0800ad7d

0800b334 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b0a8      	sub	sp, #160	; 0xa0
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b342:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b36a:	2b22      	cmp	r3, #34	; 0x22
 800b36c:	f040 8153 	bne.w	800b616 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b376:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b37a:	e0fa      	b.n	800b572 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b38e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b392:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b396:	4013      	ands	r3, r2
 800b398:	b29a      	uxth	r2, r3
 800b39a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b39e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a4:	1c9a      	adds	r2, r3, #2
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3ca:	f003 0307 	and.w	r3, r3, #7
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d053      	beq.n	800b47a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d011      	beq.n	800b402 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b3de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00b      	beq.n	800b402 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3f8:	f043 0201 	orr.w	r2, r3, #1
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d011      	beq.n	800b432 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b40e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00b      	beq.n	800b432 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2202      	movs	r2, #2
 800b420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b428:	f043 0204 	orr.w	r2, r3, #4
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b436:	f003 0304 	and.w	r3, r3, #4
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d011      	beq.n	800b462 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b43e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00b      	beq.n	800b462 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2204      	movs	r2, #4
 800b450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b458:	f043 0202 	orr.w	r2, r3, #2
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d006      	beq.n	800b47a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7fe fc53 	bl	8009d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b480:	b29b      	uxth	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d175      	bne.n	800b572 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b48e:	e853 3f00 	ldrex	r3, [r3]
 800b492:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b49a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4aa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4b0:	e841 2300 	strex	r3, r2, [r1]
 800b4b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e4      	bne.n	800b486 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3308      	adds	r3, #8
 800b4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c6:	e853 3f00 	ldrex	r3, [r3]
 800b4ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4d2:	f023 0301 	bic.w	r3, r3, #1
 800b4d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4e4:	65ba      	str	r2, [r7, #88]	; 0x58
 800b4e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e1      	bne.n	800b4bc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d12e      	bne.n	800b56c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b524:	f023 0310 	bic.w	r3, r3, #16
 800b528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b532:	647b      	str	r3, [r7, #68]	; 0x44
 800b534:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e6      	bne.n	800b514 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	69db      	ldr	r3, [r3, #28]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	2b10      	cmp	r3, #16
 800b552:	d103      	bne.n	800b55c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2210      	movs	r2, #16
 800b55a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7f6 fb5b 	bl	8001c20 <HAL_UARTEx_RxEventCallback>
 800b56a:	e002      	b.n	800b572 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7f7 ff1f 	bl	80033b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b572:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <UART_RxISR_16BIT_FIFOEN+0x254>
 800b57a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b57e:	f003 0320 	and.w	r3, r3, #32
 800b582:	2b00      	cmp	r3, #0
 800b584:	f47f aefa 	bne.w	800b37c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b58e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b592:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b596:	2b00      	cmp	r3, #0
 800b598:	d045      	beq.n	800b626 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5a0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d23e      	bcs.n	800b626 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	e853 3f00 	ldrex	r3, [r3]
 800b5b6:	623b      	str	r3, [r7, #32]
   return(result);
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5be:	677b      	str	r3, [r7, #116]	; 0x74
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b5c8:	633a      	str	r2, [r7, #48]	; 0x30
 800b5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5d0:	e841 2300 	strex	r3, r2, [r1]
 800b5d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e5      	bne.n	800b5a8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a14      	ldr	r2, [pc, #80]	; (800b630 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800b5e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	e853 3f00 	ldrex	r3, [r3]
 800b5ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f043 0320 	orr.w	r3, r3, #32
 800b5f6:	673b      	str	r3, [r7, #112]	; 0x70
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b600:	61fb      	str	r3, [r7, #28]
 800b602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b604:	69b9      	ldr	r1, [r7, #24]
 800b606:	69fa      	ldr	r2, [r7, #28]
 800b608:	e841 2300 	strex	r3, r2, [r1]
 800b60c:	617b      	str	r3, [r7, #20]
   return(result);
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1e6      	bne.n	800b5e2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b614:	e007      	b.n	800b626 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	699a      	ldr	r2, [r3, #24]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f042 0208 	orr.w	r2, r2, #8
 800b624:	619a      	str	r2, [r3, #24]
}
 800b626:	bf00      	nop
 800b628:	37a0      	adds	r7, #160	; 0xa0
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	0800aedd 	.word	0x0800aedd

0800b634 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	bc80      	pop	{r7}
 800b644:	4770      	bx	lr

0800b646 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b64e:	bf00      	nop
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	bc80      	pop	{r7}
 800b656:	4770      	bx	lr

0800b658 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	bc80      	pop	{r7}
 800b668:	4770      	bx	lr

0800b66a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b088      	sub	sp, #32
 800b66e:	af02      	add	r7, sp, #8
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	1d3b      	adds	r3, r7, #4
 800b674:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b682:	2b01      	cmp	r3, #1
 800b684:	d101      	bne.n	800b68a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b686:	2302      	movs	r3, #2
 800b688:	e046      	b.n	800b718 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2224      	movs	r2, #36	; 0x24
 800b696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f022 0201 	bic.w	r2, r2, #1
 800b6a8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	430a      	orrs	r2, r1
 800b6bc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d105      	bne.n	800b6d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b6c4:	1d3b      	adds	r3, r7, #4
 800b6c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 f9a5 	bl	800ba1a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f042 0201 	orr.w	r2, r2, #1
 800b6de:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6e0:	f7f6 ff18 	bl	8002514 <HAL_GetTick>
 800b6e4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f7fe fe79 	bl	800a3ec <UART_WaitOnFlagUntilTimeout>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b700:	2303      	movs	r3, #3
 800b702:	75fb      	strb	r3, [r7, #23]
 800b704:	e003      	b.n	800b70e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2220      	movs	r2, #32
 800b70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b720:	b480      	push	{r7}
 800b722:	b089      	sub	sp, #36	; 0x24
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d101      	bne.n	800b736 <HAL_UARTEx_EnableStopMode+0x16>
 800b732:	2302      	movs	r3, #2
 800b734:	e021      	b.n	800b77a <HAL_UARTEx_EnableStopMode+0x5a>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f043 0302 	orr.w	r3, r3, #2
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	461a      	mov	r2, r3
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6979      	ldr	r1, [r7, #20]
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	613b      	str	r3, [r7, #16]
   return(result);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e6      	bne.n	800b73e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3724      	adds	r7, #36	; 0x24
 800b77e:	46bd      	mov	sp, r7
 800b780:	bc80      	pop	{r7}
 800b782:	4770      	bx	lr

0800b784 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <HAL_UARTEx_EnableFifoMode+0x16>
 800b796:	2302      	movs	r3, #2
 800b798:	e02b      	b.n	800b7f2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2224      	movs	r2, #36	; 0x24
 800b7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f022 0201 	bic.w	r2, r2, #1
 800b7c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b7d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f940 	bl	800ba60 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d101      	bne.n	800b810 <HAL_UARTEx_DisableFifoMode+0x16>
 800b80c:	2302      	movs	r3, #2
 800b80e:	e027      	b.n	800b860 <HAL_UARTEx_DisableFifoMode+0x66>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2224      	movs	r2, #36	; 0x24
 800b81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f022 0201 	bic.w	r2, r2, #1
 800b836:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b83e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2220      	movs	r2, #32
 800b852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	bc80      	pop	{r7}
 800b868:	4770      	bx	lr

0800b86a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b084      	sub	sp, #16
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d101      	bne.n	800b882 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b87e:	2302      	movs	r3, #2
 800b880:	e02d      	b.n	800b8de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2224      	movs	r2, #36	; 0x24
 800b88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f022 0201 	bic.w	r2, r2, #1
 800b8a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	683a      	ldr	r2, [r7, #0]
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f8ce 	bl	800ba60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2220      	movs	r2, #32
 800b8d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d101      	bne.n	800b8fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	e02d      	b.n	800b95a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2224      	movs	r2, #36	; 0x24
 800b90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f022 0201 	bic.w	r2, r2, #1
 800b924:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	430a      	orrs	r2, r1
 800b938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f890 	bl	800ba60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2220      	movs	r2, #32
 800b94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b08c      	sub	sp, #48	; 0x30
 800b966:	af00      	add	r7, sp, #0
 800b968:	60f8      	str	r0, [r7, #12]
 800b96a:	60b9      	str	r1, [r7, #8]
 800b96c:	4613      	mov	r3, r2
 800b96e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b976:	2b20      	cmp	r3, #32
 800b978:	d14a      	bne.n	800ba10 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b980:	88fb      	ldrh	r3, [r7, #6]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e043      	b.n	800ba12 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b990:	2b01      	cmp	r3, #1
 800b992:	d101      	bne.n	800b998 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800b994:	2302      	movs	r3, #2
 800b996:	e03c      	b.n	800ba12 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b9a6:	88fb      	ldrh	r3, [r7, #6]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	68b9      	ldr	r1, [r7, #8]
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f7fe ff0d 	bl	800a7cc <UART_Start_Receive_DMA>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b9b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d124      	bne.n	800ba0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d11d      	bne.n	800ba04 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2210      	movs	r2, #16
 800b9ce:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f043 0310 	orr.w	r3, r3, #16
 800b9e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6a39      	ldr	r1, [r7, #32]
 800b9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e6      	bne.n	800b9d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800ba02:	e002      	b.n	800ba0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ba0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba0e:	e000      	b.n	800ba12 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ba10:	2302      	movs	r3, #2
  }
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3730      	adds	r7, #48	; 0x30
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b085      	sub	sp, #20
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	60f8      	str	r0, [r7, #12]
 800ba22:	1d3b      	adds	r3, r7, #4
 800ba24:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f023 0210 	bic.w	r2, r3, #16
 800ba32:	893b      	ldrh	r3, [r7, #8]
 800ba34:	4619      	mov	r1, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800ba48:	7abb      	ldrb	r3, [r7, #10]
 800ba4a:	061a      	lsls	r2, r3, #24
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	605a      	str	r2, [r3, #4]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr
	...

0800ba60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d108      	bne.n	800ba82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba80:	e031      	b.n	800bae6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba82:	2308      	movs	r3, #8
 800ba84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba86:	2308      	movs	r3, #8
 800ba88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	0e5b      	lsrs	r3, r3, #25
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0307 	and.w	r3, r3, #7
 800ba98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	0f5b      	lsrs	r3, r3, #29
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	f003 0307 	and.w	r3, r3, #7
 800baa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	7b3a      	ldrb	r2, [r7, #12]
 800baae:	4910      	ldr	r1, [pc, #64]	; (800baf0 <UARTEx_SetNbDataToProcess+0x90>)
 800bab0:	5c8a      	ldrb	r2, [r1, r2]
 800bab2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bab6:	7b3a      	ldrb	r2, [r7, #12]
 800bab8:	490e      	ldr	r1, [pc, #56]	; (800baf4 <UARTEx_SetNbDataToProcess+0x94>)
 800baba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800babc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	7b7a      	ldrb	r2, [r7, #13]
 800bacc:	4908      	ldr	r1, [pc, #32]	; (800baf0 <UARTEx_SetNbDataToProcess+0x90>)
 800bace:	5c8a      	ldrb	r2, [r1, r2]
 800bad0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bad4:	7b7a      	ldrb	r2, [r7, #13]
 800bad6:	4907      	ldr	r1, [pc, #28]	; (800baf4 <UARTEx_SetNbDataToProcess+0x94>)
 800bad8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bada:	fb93 f3f2 	sdiv	r3, r3, r2
 800bade:	b29a      	uxth	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bae6:	bf00      	nop
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	bc80      	pop	{r7}
 800baee:	4770      	bx	lr
 800baf0:	0801d5c8 	.word	0x0801d5c8
 800baf4:	0801d5d0 	.word	0x0801d5d0

0800baf8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800bafc:	f7f6 fbaa 	bl	8002254 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800bb00:	f000 f820 	bl	800bb44 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800bb04:	bf00      	nop
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	f010 fa70 	bl	801bff4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800bb14:	bf00      	nop
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bb1c:	f3bf 8f4f 	dsb	sy
}
 800bb20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bb22:	4b06      	ldr	r3, [pc, #24]	; (800bb3c <__NVIC_SystemReset+0x24>)
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bb2a:	4904      	ldr	r1, [pc, #16]	; (800bb3c <__NVIC_SystemReset+0x24>)
 800bb2c:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <__NVIC_SystemReset+0x28>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb32:	f3bf 8f4f 	dsb	sy
}
 800bb36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bb38:	bf00      	nop
 800bb3a:	e7fd      	b.n	800bb38 <__NVIC_SystemReset+0x20>
 800bb3c:	e000ed00 	.word	0xe000ed00
 800bb40:	05fa0004 	.word	0x05fa0004

0800bb44 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	607b      	str	r3, [r7, #4]
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800bb4e:	1d3b      	adds	r3, r7, #4
 800bb50:	4619      	mov	r1, r3
 800bb52:	2000      	movs	r0, #0
 800bb54:	f002 ff42 	bl	800e9dc <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800bb58:	1d3b      	adds	r3, r7, #4
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	f002 ff3d 	bl	800e9dc <LmHandlerGetVersion>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800bb62:	2300      	movs	r3, #0
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	4b2f      	ldr	r3, [pc, #188]	; (800bc24 <LoRaWAN_Init+0xe0>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bb6e:	482e      	ldr	r0, [pc, #184]	; (800bc28 <LoRaWAN_Init+0xe4>)
 800bb70:	f010 fbe0 	bl	801c334 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800bb74:	2300      	movs	r3, #0
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	4b2c      	ldr	r3, [pc, #176]	; (800bc2c <LoRaWAN_Init+0xe8>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bb80:	482b      	ldr	r0, [pc, #172]	; (800bc30 <LoRaWAN_Init+0xec>)
 800bb82:	f010 fbd7 	bl	801c334 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800bb86:	2300      	movs	r3, #0
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	4b2a      	ldr	r3, [pc, #168]	; (800bc34 <LoRaWAN_Init+0xf0>)
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bb92:	4829      	ldr	r0, [pc, #164]	; (800bc38 <LoRaWAN_Init+0xf4>)
 800bb94:	f010 fbce 	bl	801c334 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800bb98:	2300      	movs	r3, #0
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	4b27      	ldr	r3, [pc, #156]	; (800bc3c <LoRaWAN_Init+0xf8>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800bba4:	4826      	ldr	r0, [pc, #152]	; (800bc40 <LoRaWAN_Init+0xfc>)
 800bba6:	f010 fbc5 	bl	801c334 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800bbaa:	4a26      	ldr	r2, [pc, #152]	; (800bc44 <LoRaWAN_Init+0x100>)
 800bbac:	2100      	movs	r1, #0
 800bbae:	2001      	movs	r0, #1
 800bbb0:	f010 fb1c 	bl	801c1ec <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800bbb4:	4a24      	ldr	r2, [pc, #144]	; (800bc48 <LoRaWAN_Init+0x104>)
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	2002      	movs	r0, #2
 800bbba:	f010 fb17 	bl	801c1ec <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800bbbe:	4a23      	ldr	r2, [pc, #140]	; (800bc4c <LoRaWAN_Init+0x108>)
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	2004      	movs	r0, #4
 800bbc4:	f010 fb12 	bl	801c1ec <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800bbc8:	4a21      	ldr	r2, [pc, #132]	; (800bc50 <LoRaWAN_Init+0x10c>)
 800bbca:	2100      	movs	r1, #0
 800bbcc:	2008      	movs	r0, #8
 800bbce:	f010 fb0d 	bl	801c1ec <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800bbd2:	f000 fb3d 	bl	800c250 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800bbd6:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800bbda:	481e      	ldr	r0, [pc, #120]	; (800bc54 <LoRaWAN_Init+0x110>)
 800bbdc:	f002 f808 	bl	800dbf0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800bbe0:	481d      	ldr	r0, [pc, #116]	; (800bc58 <LoRaWAN_Init+0x114>)
 800bbe2:	f002 f851 	bl	800dc88 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800bbe6:	4814      	ldr	r0, [pc, #80]	; (800bc38 <LoRaWAN_Init+0xf4>)
 800bbe8:	f010 fbda 	bl	801c3a0 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800bbec:	4b1b      	ldr	r3, [pc, #108]	; (800bc5c <LoRaWAN_Init+0x118>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	4a1b      	ldr	r2, [pc, #108]	; (800bc60 <LoRaWAN_Init+0x11c>)
 800bbf2:	7812      	ldrb	r2, [r2, #0]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f002 f998 	bl	800df2c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800bbfc:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <LoRaWAN_Init+0x120>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10b      	bne.n	800bc1c <LoRaWAN_Init+0xd8>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800bc04:	4b18      	ldr	r3, [pc, #96]	; (800bc68 <LoRaWAN_Init+0x124>)
 800bc06:	6819      	ldr	r1, [r3, #0]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	4b17      	ldr	r3, [pc, #92]	; (800bc6c <LoRaWAN_Init+0x128>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4817      	ldr	r0, [pc, #92]	; (800bc70 <LoRaWAN_Init+0x12c>)
 800bc12:	f010 fb8f 	bl	801c334 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800bc16:	4816      	ldr	r0, [pc, #88]	; (800bc70 <LoRaWAN_Init+0x12c>)
 800bc18:	f010 fbc2 	bl	801c3a0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	0800bf8d 	.word	0x0800bf8d
 800bc28:	20000b4c 	.word	0x20000b4c
 800bc2c:	0800bf9f 	.word	0x0800bf9f
 800bc30:	20000b64 	.word	0x20000b64
 800bc34:	0800bfb1 	.word	0x0800bfb1
 800bc38:	20000b7c 	.word	0x20000b7c
 800bc3c:	0800c175 	.word	0x0800c175
 800bc40:	20000a40 	.word	0x20000a40
 800bc44:	0800df09 	.word	0x0800df09
 800bc48:	0800bd75 	.word	0x0800bd75
 800bc4c:	0800c199 	.word	0x0800c199
 800bc50:	0800c129 	.word	0x0800c129
 800bc54:	20000014 	.word	0x20000014
 800bc58:	20000060 	.word	0x20000060
 800bc5c:	20000010 	.word	0x20000010
 800bc60:	20000011 	.word	0x20000011
 800bc64:	20000a24 	.word	0x20000a24
 800bc68:	20000074 	.word	0x20000074
 800bc6c:	0800bf69 	.word	0x0800bf69
 800bc70:	20000a28 	.word	0x20000a28

0800bc74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800bc7e:	88fb      	ldrh	r3, [r7, #6]
 800bc80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc84:	d104      	bne.n	800bc90 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bc86:	2100      	movs	r1, #0
 800bc88:	2002      	movs	r0, #2
 800bc8a:	f010 fad1 	bl	801c230 <UTIL_SEQ_SetTask>
      }
      break;
 800bc8e:	e000      	b.n	800bc92 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800bc90:	bf00      	nop
  }
}
 800bc92:	bf00      	nop
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d057      	beq.n	800bd60 <OnRxData+0xc4>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800bcb0:	482d      	ldr	r0, [pc, #180]	; (800bd68 <OnRxData+0xcc>)
 800bcb2:	f010 fb75 	bl	801c3a0 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d04b      	beq.n	800bd56 <OnRxData+0xba>
    {
      if (appData != NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d048      	beq.n	800bd56 <OnRxData+0xba>
      {
        RxPort = appData->Port;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d041      	beq.n	800bd56 <OnRxData+0xba>
        {
    switch (appData->Port)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d021      	beq.n	800bd1e <OnRxData+0x82>
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d13d      	bne.n	800bd5a <OnRxData+0xbe>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	785b      	ldrb	r3, [r3, #1]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d117      	bne.n	800bd16 <OnRxData+0x7a>
        {
          switch (appData->Buffer[0])
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d00e      	beq.n	800bd0e <OnRxData+0x72>
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	dc12      	bgt.n	800bd1a <OnRxData+0x7e>
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <OnRxData+0x62>
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d004      	beq.n	800bd06 <OnRxData+0x6a>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800bcfc:	e00d      	b.n	800bd1a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_A);
 800bcfe:	2000      	movs	r0, #0
 800bd00:	f002 fab0 	bl	800e264 <LmHandlerRequestClass>
              break;
 800bd04:	e00a      	b.n	800bd1c <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_B);
 800bd06:	2001      	movs	r0, #1
 800bd08:	f002 faac 	bl	800e264 <LmHandlerRequestClass>
              break;
 800bd0c:	e006      	b.n	800bd1c <OnRxData+0x80>
              LmHandlerRequestClass(CLASS_C);
 800bd0e:	2002      	movs	r0, #2
 800bd10:	f002 faa8 	bl	800e264 <LmHandlerRequestClass>
              break;
 800bd14:	e002      	b.n	800bd1c <OnRxData+0x80>
          }
        }
 800bd16:	bf00      	nop
 800bd18:	e022      	b.n	800bd60 <OnRxData+0xc4>
              break;
 800bd1a:	bf00      	nop
        break;
 800bd1c:	e020      	b.n	800bd60 <OnRxData+0xc4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	785b      	ldrb	r3, [r3, #1]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d11b      	bne.n	800bd5e <OnRxData+0xc2>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	f003 0301 	and.w	r3, r3, #1
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	4b0e      	ldr	r3, [pc, #56]	; (800bd6c <OnRxData+0xd0>)
 800bd34:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800bd36:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <OnRxData+0xd0>)
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d105      	bne.n	800bd4a <OnRxData+0xae>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800bd3e:	2201      	movs	r2, #1
 800bd40:	2120      	movs	r1, #32
 800bd42:	480b      	ldr	r0, [pc, #44]	; (800bd70 <OnRxData+0xd4>)
 800bd44:	f7f9 ff6e 	bl	8005c24 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800bd48:	e009      	b.n	800bd5e <OnRxData+0xc2>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2120      	movs	r1, #32
 800bd4e:	4808      	ldr	r0, [pc, #32]	; (800bd70 <OnRxData+0xd4>)
 800bd50:	f7f9 ff68 	bl	8005c24 <HAL_GPIO_WritePin>
        break;
 800bd54:	e003      	b.n	800bd5e <OnRxData+0xc2>

      default:

        break;
    }
  }
 800bd56:	bf00      	nop
 800bd58:	e002      	b.n	800bd60 <OnRxData+0xc4>
        break;
 800bd5a:	bf00      	nop
 800bd5c:	e000      	b.n	800bd60 <OnRxData+0xc4>
        break;
 800bd5e:	bf00      	nop
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800bd60:	bf00      	nop
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	20000b64 	.word	0x20000b64
 800bd6c:	20000b4a 	.word	0x20000b4a
 800bd70:	48000400 	.word	0x48000400

0800bd74 <SendTxData>:

static void SendTxData(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08a      	sub	sp, #40	; 0x28
 800bd78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bd7a:	23ff      	movs	r3, #255	; 0xff
 800bd7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800bd80:	f7f6 fa9c 	bl	80022bc <GetBatteryLevel>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));

  AppData.Port = LORAWAN_USER_APP_PORT;
 800bd96:	4b69      	ldr	r3, [pc, #420]	; (800bf3c <SendTxData+0x1c8>)
 800bd98:	2202      	movs	r2, #2
 800bd9a:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800bd9c:	4b68      	ldr	r3, [pc, #416]	; (800bf40 <SendTxData+0x1cc>)
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	4a68      	ldr	r2, [pc, #416]	; (800bf44 <SendTxData+0x1d0>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	095b      	lsrs	r3, r3, #5
 800bda8:	b298      	uxth	r0, r3
 800bdaa:	4b64      	ldr	r3, [pc, #400]	; (800bf3c <SendTxData+0x1c8>)
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	1c59      	adds	r1, r3, #1
 800bdb2:	61f9      	str	r1, [r7, #28]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	b2c2      	uxtb	r2, r0
 800bdb8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800bdba:	4b61      	ldr	r3, [pc, #388]	; (800bf40 <SendTxData+0x1cc>)
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	4a61      	ldr	r2, [pc, #388]	; (800bf44 <SendTxData+0x1d0>)
 800bdc0:	fba2 1203 	umull	r1, r2, r2, r3
 800bdc4:	0952      	lsrs	r2, r2, #5
 800bdc6:	2164      	movs	r1, #100	; 0x64
 800bdc8:	fb01 f202 	mul.w	r2, r1, r2
 800bdcc:	1a9b      	subs	r3, r3, r2
 800bdce:	b298      	uxth	r0, r3
 800bdd0:	4b5a      	ldr	r3, [pc, #360]	; (800bf3c <SendTxData+0x1c8>)
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	1c59      	adds	r1, r3, #1
 800bdd8:	61f9      	str	r1, [r7, #28]
 800bdda:	4413      	add	r3, r2
 800bddc:	b2c2      	uxtb	r2, r0
 800bdde:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800bde0:	4b59      	ldr	r3, [pc, #356]	; (800bf48 <SendTxData+0x1d4>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7f4 fb33 	bl	8000450 <__aeabi_f2d>
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	4b57      	ldr	r3, [pc, #348]	; (800bf4c <SendTxData+0x1d8>)
 800bdf0:	f7f4 fb86 	bl	8000500 <__aeabi_dmul>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	f7f4 fe1a 	bl	8000a34 <__aeabi_d2iz>
 800be00:	4603      	mov	r3, r0
 800be02:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800be04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be08:	4a4e      	ldr	r2, [pc, #312]	; (800bf44 <SendTxData+0x1d0>)
 800be0a:	fb82 1203 	smull	r1, r2, r2, r3
 800be0e:	1152      	asrs	r2, r2, #5
 800be10:	17db      	asrs	r3, r3, #31
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	b218      	sxth	r0, r3
 800be16:	4b49      	ldr	r3, [pc, #292]	; (800bf3c <SendTxData+0x1c8>)
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	1c59      	adds	r1, r3, #1
 800be1e:	61f9      	str	r1, [r7, #28]
 800be20:	4413      	add	r3, r2
 800be22:	b2c2      	uxtb	r2, r0
 800be24:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800be26:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be2a:	4a46      	ldr	r2, [pc, #280]	; (800bf44 <SendTxData+0x1d0>)
 800be2c:	fb82 1203 	smull	r1, r2, r2, r3
 800be30:	1151      	asrs	r1, r2, #5
 800be32:	17da      	asrs	r2, r3, #31
 800be34:	1a8a      	subs	r2, r1, r2
 800be36:	2164      	movs	r1, #100	; 0x64
 800be38:	fb01 f202 	mul.w	r2, r1, r2
 800be3c:	1a9b      	subs	r3, r3, r2
 800be3e:	b218      	sxth	r0, r3
 800be40:	4b3e      	ldr	r3, [pc, #248]	; (800bf3c <SendTxData+0x1c8>)
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	1c59      	adds	r1, r3, #1
 800be48:	61f9      	str	r1, [r7, #28]
 800be4a:	4413      	add	r3, r2
 800be4c:	b2c2      	uxtb	r2, r0
 800be4e:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800be50:	4b3f      	ldr	r3, [pc, #252]	; (800bf50 <SendTxData+0x1dc>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4618      	mov	r0, r3
 800be56:	f7f4 fafb 	bl	8000450 <__aeabi_f2d>
 800be5a:	f04f 0200 	mov.w	r2, #0
 800be5e:	4b3b      	ldr	r3, [pc, #236]	; (800bf4c <SendTxData+0x1d8>)
 800be60:	f7f4 fb4e 	bl	8000500 <__aeabi_dmul>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4610      	mov	r0, r2
 800be6a:	4619      	mov	r1, r3
 800be6c:	f7f4 fde2 	bl	8000a34 <__aeabi_d2iz>
 800be70:	4603      	mov	r3, r0
 800be72:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800be74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be78:	4a32      	ldr	r2, [pc, #200]	; (800bf44 <SendTxData+0x1d0>)
 800be7a:	fb82 1203 	smull	r1, r2, r2, r3
 800be7e:	1152      	asrs	r2, r2, #5
 800be80:	17db      	asrs	r3, r3, #31
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	b218      	sxth	r0, r3
 800be86:	4b2d      	ldr	r3, [pc, #180]	; (800bf3c <SendTxData+0x1c8>)
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	1c59      	adds	r1, r3, #1
 800be8e:	61f9      	str	r1, [r7, #28]
 800be90:	4413      	add	r3, r2
 800be92:	b2c2      	uxtb	r2, r0
 800be94:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800be96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be9a:	4a2a      	ldr	r2, [pc, #168]	; (800bf44 <SendTxData+0x1d0>)
 800be9c:	fb82 1203 	smull	r1, r2, r2, r3
 800bea0:	1151      	asrs	r1, r2, #5
 800bea2:	17da      	asrs	r2, r3, #31
 800bea4:	1a8a      	subs	r2, r1, r2
 800bea6:	2164      	movs	r1, #100	; 0x64
 800bea8:	fb01 f202 	mul.w	r2, r1, r2
 800beac:	1a9b      	subs	r3, r3, r2
 800beae:	b218      	sxth	r0, r3
 800beb0:	4b22      	ldr	r3, [pc, #136]	; (800bf3c <SendTxData+0x1c8>)
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	1c59      	adds	r1, r3, #1
 800beb8:	61f9      	str	r1, [r7, #28]
 800beba:	4413      	add	r3, r2
 800bebc:	b2c2      	uxtb	r2, r0
 800bebe:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	4b1d      	ldr	r3, [pc, #116]	; (800bf3c <SendTxData+0x1c8>)
 800bec6:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800bec8:	4b22      	ldr	r3, [pc, #136]	; (800bf54 <SendTxData+0x1e0>)
 800beca:	7a5b      	ldrb	r3, [r3, #9]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d007      	beq.n	800bee0 <SendTxData+0x16c>
 800bed0:	f002 f8ac 	bl	800e02c <LmHandlerJoinStatus>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d102      	bne.n	800bee0 <SendTxData+0x16c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800beda:	481e      	ldr	r0, [pc, #120]	; (800bf54 <SendTxData+0x1e0>)
 800bedc:	f010 face 	bl	801c47c <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800bee0:	4b1d      	ldr	r3, [pc, #116]	; (800bf58 <SendTxData+0x1e4>)
 800bee2:	78db      	ldrb	r3, [r3, #3]
 800bee4:	2200      	movs	r2, #0
 800bee6:	4619      	mov	r1, r3
 800bee8:	4814      	ldr	r0, [pc, #80]	; (800bf3c <SendTxData+0x1c8>)
 800beea:	f002 f8bb 	bl	800e064 <LmHandlerSend>
 800beee:	4603      	mov	r3, r0
 800bef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800bef4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d007      	beq.n	800bf0c <SendTxData+0x198>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800befc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bf00:	f113 0f06 	cmn.w	r3, #6
 800bf04:	d102      	bne.n	800bf0c <SendTxData+0x198>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800bf06:	f002 f807 	bl	800df18 <LmHandlerGetDutyCycleWaitTime>
 800bf0a:	6278      	str	r0, [r7, #36]	; 0x24
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  }

  if (EventType == TX_ON_TIMER)
 800bf0c:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <SendTxData+0x1e8>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10f      	bne.n	800bf34 <SendTxData+0x1c0>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800bf14:	4812      	ldr	r0, [pc, #72]	; (800bf60 <SendTxData+0x1ec>)
 800bf16:	f010 fab1 	bl	801c47c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800bf1a:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <SendTxData+0x1f0>)
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	4293      	cmp	r3, r2
 800bf22:	bf38      	it	cc
 800bf24:	4613      	movcc	r3, r2
 800bf26:	4619      	mov	r1, r3
 800bf28:	480d      	ldr	r0, [pc, #52]	; (800bf60 <SendTxData+0x1ec>)
 800bf2a:	f010 fb17 	bl	801c55c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800bf2e:	480c      	ldr	r0, [pc, #48]	; (800bf60 <SendTxData+0x1ec>)
 800bf30:	f010 fa36 	bl	801c3a0 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800bf34:	bf00      	nop
 800bf36:	3728      	adds	r7, #40	; 0x28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20000078 	.word	0x20000078
 800bf40:	20000678 	.word	0x20000678
 800bf44:	51eb851f 	.word	0x51eb851f
 800bf48:	2000067c 	.word	0x2000067c
 800bf4c:	40590000 	.word	0x40590000
 800bf50:	20000680 	.word	0x20000680
 800bf54:	20000b7c 	.word	0x20000b7c
 800bf58:	20000060 	.word	0x20000060
 800bf5c:	20000a24 	.word	0x20000a24
 800bf60:	20000a28 	.word	0x20000a28
 800bf64:	20000074 	.word	0x20000074

0800bf68 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bf70:	2100      	movs	r1, #0
 800bf72:	2002      	movs	r0, #2
 800bf74:	f010 f95c 	bl	801c230 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800bf78:	4803      	ldr	r0, [pc, #12]	; (800bf88 <OnTxTimerEvent+0x20>)
 800bf7a:	f010 fa11 	bl	801c3a0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20000a28 	.word	0x20000a28

0800bf8c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bc80      	pop	{r7}
 800bf9c:	4770      	bx	lr

0800bf9e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b083      	sub	sp, #12
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800bfa6:	bf00      	nop
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bc80      	pop	{r7}
 800bfae:	4770      	bx	lr

0800bfb0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bc80      	pop	{r7}
 800bfc0:	4770      	bx	lr
	...

0800bfc4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d006      	beq.n	800bfe0 <OnTxData+0x1c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <OnTxData+0x1c>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800bfda:	4803      	ldr	r0, [pc, #12]	; (800bfe8 <OnTxData+0x24>)
 800bfdc:	f010 f9e0 	bl	801c3a0 <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20000b4c 	.word	0x20000b4c

0800bfec <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d012      	beq.n	800c020 <OnJoinRequest+0x34>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d103      	bne.n	800c00c <OnJoinRequest+0x20>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800c004:	4808      	ldr	r0, [pc, #32]	; (800c028 <OnJoinRequest+0x3c>)
 800c006:	f010 fa39 	bl	801c47c <UTIL_TIMER_Stop>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c00a:	e009      	b.n	800c020 <OnJoinRequest+0x34>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	799b      	ldrb	r3, [r3, #6]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d105      	bne.n	800c020 <OnJoinRequest+0x34>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <OnJoinRequest+0x40>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2101      	movs	r1, #1
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 ff86 	bl	800df2c <LmHandlerJoin>
}
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20000b7c 	.word	0x20000b7c
 800c02c:	20000010 	.word	0x20000010

0800c030 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d005      	beq.n	800c04a <OnBeaconStatusChange+0x1a>
  {
    switch (params->State)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	785b      	ldrb	r3, [r3, #1]
 800c042:	2b02      	cmp	r3, #2
 800c044:	d003      	beq.n	800c04e <OnBeaconStatusChange+0x1e>
 800c046:	2b03      	cmp	r3, #3
        break;
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
        break;
 800c048:	e002      	b.n	800c050 <OnBeaconStatusChange+0x20>
      }
    }
  }
 800c04a:	bf00      	nop
 800c04c:	e000      	b.n	800c050 <OnBeaconStatusChange+0x20>
        break;
 800c04e:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	bc80      	pop	{r7}
 800c058:	4770      	bx	lr

0800c05a <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b083      	sub	sp, #12
 800c05e:	af00      	add	r7, sp, #0
 800c060:	4603      	mov	r3, r0
 800c062:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
  /* USER CODE END OnClassChange_1 */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	bc80      	pop	{r7}
 800c06c:	4770      	bx	lr

0800c06e <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c072:	2100      	movs	r1, #0
 800c074:	2001      	movs	r0, #1
 800c076:	f010 f8db 	bl	801c230 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c07a:	bf00      	nop
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c088:	4a0d      	ldr	r2, [pc, #52]	; (800c0c0 <OnTxPeriodicityChanged+0x40>)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c08e:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <OnTxPeriodicityChanged+0x40>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c096:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <OnTxPeriodicityChanged+0x40>)
 800c098:	f242 7210 	movw	r2, #10000	; 0x2710
 800c09c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c09e:	4809      	ldr	r0, [pc, #36]	; (800c0c4 <OnTxPeriodicityChanged+0x44>)
 800c0a0:	f010 f9ec 	bl	801c47c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c0a4:	4b06      	ldr	r3, [pc, #24]	; (800c0c0 <OnTxPeriodicityChanged+0x40>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4806      	ldr	r0, [pc, #24]	; (800c0c4 <OnTxPeriodicityChanged+0x44>)
 800c0ac:	f010 fa56 	bl	801c55c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c0b0:	4804      	ldr	r0, [pc, #16]	; (800c0c4 <OnTxPeriodicityChanged+0x44>)
 800c0b2:	f010 f975 	bl	801c3a0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000074 	.word	0x20000074
 800c0c4:	20000a28 	.word	0x20000a28

0800c0c8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c0d2:	4a04      	ldr	r2, [pc, #16]	; (800c0e4 <OnTxFrameCtrlChanged+0x1c>)
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bc80      	pop	{r7}
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20000060 	.word	0x20000060

0800c0e8 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c0f2:	4a04      	ldr	r2, [pc, #16]	; (800c104 <OnPingSlotPeriodicityChanged+0x1c>)
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bc80      	pop	{r7}
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	20000060 	.word	0x20000060

0800c108 <OnSystemReset>:

static void OnSystemReset(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c10c:	f002 fc97 	bl	800ea3e <LmHandlerHalt>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d106      	bne.n	800c124 <OnSystemReset+0x1c>
 800c116:	f001 ff89 	bl	800e02c <LmHandlerJoinStatus>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d101      	bne.n	800c124 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c120:	f7ff fcfa 	bl	800bb18 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c124:	bf00      	nop
 800c126:	bd80      	pop	{r7, pc}

0800c128 <StopJoin>:

static void StopJoin(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c12c:	480d      	ldr	r0, [pc, #52]	; (800c164 <StopJoin+0x3c>)
 800c12e:	f010 f9a5 	bl	801c47c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c132:	f002 fc77 	bl	800ea24 <LmHandlerStop>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10e      	bne.n	800c15a <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800c13c:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <StopJoin+0x40>)
 800c13e:	2201      	movs	r2, #1
 800c140:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c142:	480a      	ldr	r0, [pc, #40]	; (800c16c <StopJoin+0x44>)
 800c144:	f001 fda0 	bl	800dc88 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c148:	4b07      	ldr	r3, [pc, #28]	; (800c168 <StopJoin+0x40>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2101      	movs	r1, #1
 800c14e:	4618      	mov	r0, r3
 800c150:	f001 feec 	bl	800df2c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c154:	4803      	ldr	r0, [pc, #12]	; (800c164 <StopJoin+0x3c>)
 800c156:	f010 f923 	bl	801c3a0 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c15a:	4805      	ldr	r0, [pc, #20]	; (800c170 <StopJoin+0x48>)
 800c15c:	f010 f920 	bl	801c3a0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c160:	bf00      	nop
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20000a28 	.word	0x20000a28
 800c168:	20000010 	.word	0x20000010
 800c16c:	20000060 	.word	0x20000060
 800c170:	20000a40 	.word	0x20000a40

0800c174 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <OnStopJoinTimerEvent+0x20>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	2b02      	cmp	r3, #2
 800c182:	d103      	bne.n	800c18c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c184:	2100      	movs	r1, #0
 800c186:	2008      	movs	r0, #8
 800c188:	f010 f852 	bl	801c230 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20000010 	.word	0x20000010

0800c198 <StoreContext>:

static void StoreContext(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c19e:	23ff      	movs	r3, #255	; 0xff
 800c1a0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c1a2:	f002 fc59 	bl	800ea58 <LmHandlerNvmDataStore>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c1aa:	bf00      	nop
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bc80      	pop	{r7}
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800c1d2:	f7f9 f8db 	bl	800538c <HAL_FLASH_Unlock>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d11c      	bne.n	800c216 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800c1dc:	4b10      	ldr	r3, [pc, #64]	; (800c220 <OnStoreContextRequest+0x58>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	029a      	lsls	r2, r3, #10
 800c1e2:	4b10      	ldr	r3, [pc, #64]	; (800c224 <OnStoreContextRequest+0x5c>)
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800c1ea:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1ee:	fb01 f303 	mul.w	r3, r1, r3
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	0adb      	lsrs	r3, r3, #11
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7f5 f9a5 	bl	800154a <FLASH_IF_EraseByPages>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d105      	bne.n	800c212 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800c206:	2300      	movs	r3, #0
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	4806      	ldr	r0, [pc, #24]	; (800c228 <OnStoreContextRequest+0x60>)
 800c20e:	f7f5 f8bb 	bl	8001388 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800c212:	f7f9 f8dd 	bl	80053d0 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c216:	bf00      	nop
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	1fff75e0 	.word	0x1fff75e0
 800c224:	03fffc00 	.word	0x03fffc00
 800c228:	0803f000 	.word	0x0803f000

0800c22c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	b29b      	uxth	r3, r3
 800c23a:	461a      	mov	r2, r3
 800c23c:	4903      	ldr	r1, [pc, #12]	; (800c24c <OnRestoreContextRequest+0x20>)
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f00f fad6 	bl	801b7f0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	0803f000 	.word	0x0803f000

0800c250 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800c254:	4b15      	ldr	r3, [pc, #84]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c25a:	4b14      	ldr	r3, [pc, #80]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c260:	4b12      	ldr	r3, [pc, #72]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c262:	2200      	movs	r2, #0
 800c264:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c266:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c268:	2200      	movs	r2, #0
 800c26a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800c26c:	4b0f      	ldr	r3, [pc, #60]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f043 0320 	orr.w	r3, r3, #32
 800c274:	4a0d      	ldr	r2, [pc, #52]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c276:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c278:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10c      	bne.n	800c29a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c280:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <LoraInfo_Init+0x60>)
 800c282:	2200      	movs	r2, #0
 800c284:	2100      	movs	r1, #0
 800c286:	2000      	movs	r0, #0
 800c288:	f010 fb02 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c28c:	bf00      	nop
 800c28e:	f010 faed 	bl	801c86c <UTIL_ADV_TRACE_IsBufferEmpty>
 800c292:	4603      	mov	r3, r0
 800c294:	2b01      	cmp	r3, #1
 800c296:	d1fa      	bne.n	800c28e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c298:	e7fe      	b.n	800c298 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c29a:	4b04      	ldr	r3, [pc, #16]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800c2a0:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <LoraInfo_Init+0x5c>)
 800c2a2:	2203      	movs	r2, #3
 800c2a4:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c2a6:	bf00      	nop
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20000b94 	.word	0x20000b94
 800c2b0:	0801d008 	.word	0x0801d008

0800c2b4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c2b8:	4b02      	ldr	r3, [pc, #8]	; (800c2c4 <LoraInfo_GetPtr+0x10>)
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bc80      	pop	{r7}
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	20000b94 	.word	0x20000b94

0800c2c8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c2cc:	f7f7 f8d3 	bl	8003476 <BSP_RADIO_Init>
 800c2d0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b082      	sub	sp, #8
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	4603      	mov	r3, r0
 800c2de:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f7 f8f8 	bl	80034d8 <BSP_RADIO_ConfigRFSwitch>
 800c2e8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c2f6:	f7f7 f93d 	bl	8003574 <BSP_RADIO_GetTxConfig>
 800c2fa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c304:	f7f7 f93d 	bl	8003582 <BSP_RADIO_IsTCXO>
 800c308:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c312:	f7f7 f93d 	bl	8003590 <BSP_RADIO_IsDCDC>
 800c316:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c318:	4618      	mov	r0, r3
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7f7 f938 	bl	800359e <BSP_RADIO_GetRFOMaxPowerConfig>
 800c32e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	33f1      	adds	r3, #241	; 0xf1
 800c344:	2210      	movs	r2, #16
 800c346:	2100      	movs	r1, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	f00b ff87 	bl	801825c <memset1>
    ctx->M_n = 0;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	22f0      	movs	r2, #240	; 0xf0
 800c35a:	2100      	movs	r1, #0
 800c35c:	4618      	mov	r0, r3
 800c35e:	f00b ff7d 	bl	801825c <memset1>
}
 800c362:	bf00      	nop
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	461a      	mov	r2, r3
 800c378:	2110      	movs	r1, #16
 800c37a:	6838      	ldr	r0, [r7, #0]
 800c37c:	f000 fe5c 	bl	800d038 <lorawan_aes_set_key>
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08c      	sub	sp, #48	; 0x30
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 80a1 	beq.w	800c4e2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3a6:	f1c3 0310 	rsb	r3, r3, #16
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	bf28      	it	cs
 800c3b0:	4613      	movcs	r3, r2
 800c3b2:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f203 1201 	addw	r2, r3, #257	; 0x101
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3c0:	4413      	add	r3, r2
 800c3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c4:	b292      	uxth	r2, r2
 800c3c6:	68b9      	ldr	r1, [r7, #8]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f00b ff0c 	bl	80181e6 <memcpy1>
        ctx->M_n += mlen;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	441a      	add	r2, r3
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c3e4:	2b0f      	cmp	r3, #15
 800c3e6:	f240 808d 	bls.w	800c504 <AES_CMAC_Update+0x17c>
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	f000 8088 	beq.w	800c504 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3f8:	e015      	b.n	800c426 <AES_CMAC_Update+0x9e>
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fe:	4413      	add	r3, r2
 800c400:	33f1      	adds	r3, #241	; 0xf1
 800c402:	781a      	ldrb	r2, [r3, #0]
 800c404:	68f9      	ldr	r1, [r7, #12]
 800c406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c408:	440b      	add	r3, r1
 800c40a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	4053      	eors	r3, r2
 800c412:	b2d9      	uxtb	r1, r3
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	4413      	add	r3, r2
 800c41a:	33f1      	adds	r3, #241	; 0xf1
 800c41c:	460a      	mov	r2, r1
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	3301      	adds	r3, #1
 800c424:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	2b0f      	cmp	r3, #15
 800c42a:	dde6      	ble.n	800c3fa <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c432:	f107 0314 	add.w	r3, r7, #20
 800c436:	2210      	movs	r2, #16
 800c438:	4618      	mov	r0, r3
 800c43a:	f00b fed4 	bl	80181e6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	f107 0114 	add.w	r1, r7, #20
 800c444:	f107 0314 	add.w	r3, r7, #20
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fed3 	bl	800d1f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	33f1      	adds	r3, #241	; 0xf1
 800c452:	f107 0114 	add.w	r1, r7, #20
 800c456:	2210      	movs	r2, #16
 800c458:	4618      	mov	r0, r3
 800c45a:	f00b fec4 	bl	80181e6 <memcpy1>

        data += mlen;
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	4413      	add	r3, r2
 800c464:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c46e:	e038      	b.n	800c4e2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c470:	2300      	movs	r3, #0
 800c472:	62bb      	str	r3, [r7, #40]	; 0x28
 800c474:	e013      	b.n	800c49e <AES_CMAC_Update+0x116>
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	4413      	add	r3, r2
 800c47c:	33f1      	adds	r3, #241	; 0xf1
 800c47e:	781a      	ldrb	r2, [r3, #0]
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	440b      	add	r3, r1
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	4053      	eors	r3, r2
 800c48a:	b2d9      	uxtb	r1, r3
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c490:	4413      	add	r3, r2
 800c492:	33f1      	adds	r3, #241	; 0xf1
 800c494:	460a      	mov	r2, r1
 800c496:	701a      	strb	r2, [r3, #0]
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	3301      	adds	r3, #1
 800c49c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	2b0f      	cmp	r3, #15
 800c4a2:	dde8      	ble.n	800c476 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c4aa:	f107 0314 	add.w	r3, r7, #20
 800c4ae:	2210      	movs	r2, #16
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f00b fe98 	bl	80181e6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	f107 0114 	add.w	r1, r7, #20
 800c4bc:	f107 0314 	add.w	r3, r7, #20
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 fe97 	bl	800d1f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	33f1      	adds	r3, #241	; 0xf1
 800c4ca:	f107 0114 	add.w	r1, r7, #20
 800c4ce:	2210      	movs	r2, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f00b fe88 	bl	80181e6 <memcpy1>

        data += 16;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	3310      	adds	r3, #16
 800c4da:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	3b10      	subs	r3, #16
 800c4e0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2b10      	cmp	r3, #16
 800c4e6:	d8c3      	bhi.n	800c470 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	b292      	uxth	r2, r2
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f00b fe76 	bl	80181e6 <memcpy1>
    ctx->M_n = len;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c502:	e000      	b.n	800c506 <AES_CMAC_Update+0x17e>
            return;
 800c504:	bf00      	nop
}
 800c506:	3730      	adds	r7, #48	; 0x30
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b092      	sub	sp, #72	; 0x48
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c516:	f107 031c 	add.w	r3, r7, #28
 800c51a:	2210      	movs	r2, #16
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f00b fe9c 	bl	801825c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	f107 011c 	add.w	r1, r7, #28
 800c52a:	f107 031c 	add.w	r3, r7, #28
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 fe60 	bl	800d1f4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c534:	7f3b      	ldrb	r3, [r7, #28]
 800c536:	b25b      	sxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	da30      	bge.n	800c59e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c53c:	2300      	movs	r3, #0
 800c53e:	647b      	str	r3, [r7, #68]	; 0x44
 800c540:	e01b      	b.n	800c57a <AES_CMAC_Final+0x6e>
 800c542:	f107 021c 	add.w	r2, r7, #28
 800c546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c548:	4413      	add	r3, r2
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	b25a      	sxtb	r2, r3
 800c550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c552:	3301      	adds	r3, #1
 800c554:	3348      	adds	r3, #72	; 0x48
 800c556:	443b      	add	r3, r7
 800c558:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c55c:	09db      	lsrs	r3, r3, #7
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	b25b      	sxtb	r3, r3
 800c562:	4313      	orrs	r3, r2
 800c564:	b25b      	sxtb	r3, r3
 800c566:	b2d9      	uxtb	r1, r3
 800c568:	f107 021c 	add.w	r2, r7, #28
 800c56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c56e:	4413      	add	r3, r2
 800c570:	460a      	mov	r2, r1
 800c572:	701a      	strb	r2, [r3, #0]
 800c574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c576:	3301      	adds	r3, #1
 800c578:	647b      	str	r3, [r7, #68]	; 0x44
 800c57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c57c:	2b0e      	cmp	r3, #14
 800c57e:	dde0      	ble.n	800c542 <AES_CMAC_Final+0x36>
 800c580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	b2db      	uxtb	r3, r3
 800c588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800c58c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c590:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c594:	43db      	mvns	r3, r3
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c59c:	e027      	b.n	800c5ee <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c59e:	2300      	movs	r3, #0
 800c5a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c5a2:	e01b      	b.n	800c5dc <AES_CMAC_Final+0xd0>
 800c5a4:	f107 021c 	add.w	r2, r7, #28
 800c5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5aa:	4413      	add	r3, r2
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	b25a      	sxtb	r2, r3
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	3348      	adds	r3, #72	; 0x48
 800c5b8:	443b      	add	r3, r7
 800c5ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c5be:	09db      	lsrs	r3, r3, #7
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	b25b      	sxtb	r3, r3
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	b25b      	sxtb	r3, r3
 800c5c8:	b2d9      	uxtb	r1, r3
 800c5ca:	f107 021c 	add.w	r2, r7, #28
 800c5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d0:	4413      	add	r3, r2
 800c5d2:	460a      	mov	r2, r1
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d8:	3301      	adds	r3, #1
 800c5da:	643b      	str	r3, [r7, #64]	; 0x40
 800c5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5de:	2b0e      	cmp	r3, #14
 800c5e0:	dde0      	ble.n	800c5a4 <AES_CMAC_Final+0x98>
 800c5e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c5f4:	2b10      	cmp	r3, #16
 800c5f6:	d11d      	bne.n	800c634 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5fc:	e016      	b.n	800c62c <AES_CMAC_Final+0x120>
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c602:	4413      	add	r3, r2
 800c604:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c608:	781a      	ldrb	r2, [r3, #0]
 800c60a:	f107 011c 	add.w	r1, r7, #28
 800c60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c610:	440b      	add	r3, r1
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	4053      	eors	r3, r2
 800c616:	b2d9      	uxtb	r1, r3
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61c:	4413      	add	r3, r2
 800c61e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c622:	460a      	mov	r2, r1
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c628:	3301      	adds	r3, #1
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c62e:	2b0f      	cmp	r3, #15
 800c630:	dde5      	ble.n	800c5fe <AES_CMAC_Final+0xf2>
 800c632:	e096      	b.n	800c762 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c634:	7f3b      	ldrb	r3, [r7, #28]
 800c636:	b25b      	sxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	da30      	bge.n	800c69e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c63c:	2300      	movs	r3, #0
 800c63e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c640:	e01b      	b.n	800c67a <AES_CMAC_Final+0x16e>
 800c642:	f107 021c 	add.w	r2, r7, #28
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	005b      	lsls	r3, r3, #1
 800c64e:	b25a      	sxtb	r2, r3
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	3301      	adds	r3, #1
 800c654:	3348      	adds	r3, #72	; 0x48
 800c656:	443b      	add	r3, r7
 800c658:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c65c:	09db      	lsrs	r3, r3, #7
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	b25b      	sxtb	r3, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	b25b      	sxtb	r3, r3
 800c666:	b2d9      	uxtb	r1, r3
 800c668:	f107 021c 	add.w	r2, r7, #28
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	4413      	add	r3, r2
 800c670:	460a      	mov	r2, r1
 800c672:	701a      	strb	r2, [r3, #0]
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	3301      	adds	r3, #1
 800c678:	63bb      	str	r3, [r7, #56]	; 0x38
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	2b0e      	cmp	r3, #14
 800c67e:	dde0      	ble.n	800c642 <AES_CMAC_Final+0x136>
 800c680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	b2db      	uxtb	r3, r3
 800c688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800c68c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c690:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c694:	43db      	mvns	r3, r3
 800c696:	b2db      	uxtb	r3, r3
 800c698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c69c:	e027      	b.n	800c6ee <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c69e:	2300      	movs	r3, #0
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c6a2:	e01b      	b.n	800c6dc <AES_CMAC_Final+0x1d0>
 800c6a4:	f107 021c 	add.w	r2, r7, #28
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	4413      	add	r3, r2
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	b25a      	sxtb	r2, r3
 800c6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	3348      	adds	r3, #72	; 0x48
 800c6b8:	443b      	add	r3, r7
 800c6ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c6be:	09db      	lsrs	r3, r3, #7
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	b25b      	sxtb	r3, r3
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	b25b      	sxtb	r3, r3
 800c6c8:	b2d9      	uxtb	r1, r3
 800c6ca:	f107 021c 	add.w	r2, r7, #28
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d0:	4413      	add	r3, r2
 800c6d2:	460a      	mov	r2, r1
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d8:	3301      	adds	r3, #1
 800c6da:	637b      	str	r3, [r7, #52]	; 0x34
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6de:	2b0e      	cmp	r3, #14
 800c6e0:	dde0      	ble.n	800c6a4 <AES_CMAC_Final+0x198>
 800c6e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	2280      	movs	r2, #128	; 0x80
 800c6fa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c6fe:	e007      	b.n	800c710 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	4413      	add	r3, r2
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c716:	1c5a      	adds	r2, r3, #1
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c724:	2b0f      	cmp	r3, #15
 800c726:	d9eb      	bls.n	800c700 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c728:	2300      	movs	r3, #0
 800c72a:	633b      	str	r3, [r7, #48]	; 0x30
 800c72c:	e016      	b.n	800c75c <AES_CMAC_Final+0x250>
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	4413      	add	r3, r2
 800c734:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c738:	781a      	ldrb	r2, [r3, #0]
 800c73a:	f107 011c 	add.w	r1, r7, #28
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	440b      	add	r3, r1
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	4053      	eors	r3, r2
 800c746:	b2d9      	uxtb	r1, r3
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	4413      	add	r3, r2
 800c74e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c752:	460a      	mov	r2, r1
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	3301      	adds	r3, #1
 800c75a:	633b      	str	r3, [r7, #48]	; 0x30
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	2b0f      	cmp	r3, #15
 800c760:	dde5      	ble.n	800c72e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c762:	2300      	movs	r3, #0
 800c764:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c766:	e015      	b.n	800c794 <AES_CMAC_Final+0x288>
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76c:	4413      	add	r3, r2
 800c76e:	33f1      	adds	r3, #241	; 0xf1
 800c770:	781a      	ldrb	r2, [r3, #0]
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	440b      	add	r3, r1
 800c778:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	4053      	eors	r3, r2
 800c780:	b2d9      	uxtb	r1, r3
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	4413      	add	r3, r2
 800c788:	33f1      	adds	r3, #241	; 0xf1
 800c78a:	460a      	mov	r2, r1
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	3301      	adds	r3, #1
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	2b0f      	cmp	r3, #15
 800c798:	dde6      	ble.n	800c768 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c7a0:	f107 030c 	add.w	r3, r7, #12
 800c7a4:	2210      	movs	r2, #16
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f00b fd1d 	bl	80181e6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	f107 030c 	add.w	r3, r7, #12
 800c7b2:	6879      	ldr	r1, [r7, #4]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fd1d 	bl	800d1f4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c7ba:	f107 031c 	add.w	r3, r7, #28
 800c7be:	2210      	movs	r2, #16
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f00b fd4a 	bl	801825c <memset1>
}
 800c7c8:	bf00      	nop
 800c7ca:	3748      	adds	r7, #72	; 0x48
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781a      	ldrb	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	7852      	ldrb	r2, [r2, #1]
 800c7ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	3302      	adds	r3, #2
 800c7f0:	683a      	ldr	r2, [r7, #0]
 800c7f2:	7892      	ldrb	r2, [r2, #2]
 800c7f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	78d2      	ldrb	r2, [r2, #3]
 800c7fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3304      	adds	r3, #4
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	7912      	ldrb	r2, [r2, #4]
 800c808:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3305      	adds	r3, #5
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	7952      	ldrb	r2, [r2, #5]
 800c812:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3306      	adds	r3, #6
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	7992      	ldrb	r2, [r2, #6]
 800c81c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3307      	adds	r3, #7
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	79d2      	ldrb	r2, [r2, #7]
 800c826:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3308      	adds	r3, #8
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	7a12      	ldrb	r2, [r2, #8]
 800c830:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3309      	adds	r3, #9
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	7a52      	ldrb	r2, [r2, #9]
 800c83a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	330a      	adds	r3, #10
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	7a92      	ldrb	r2, [r2, #10]
 800c844:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	330b      	adds	r3, #11
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	7ad2      	ldrb	r2, [r2, #11]
 800c84e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	330c      	adds	r3, #12
 800c854:	683a      	ldr	r2, [r7, #0]
 800c856:	7b12      	ldrb	r2, [r2, #12]
 800c858:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	330d      	adds	r3, #13
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	7b52      	ldrb	r2, [r2, #13]
 800c862:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	330e      	adds	r3, #14
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	7b92      	ldrb	r2, [r2, #14]
 800c86c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	330f      	adds	r3, #15
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	7bd2      	ldrb	r2, [r2, #15]
 800c876:	701a      	strb	r2, [r3, #0]
#endif
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bc80      	pop	{r7}
 800c880:	4770      	bx	lr

0800c882 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c882:	b480      	push	{r7}
 800c884:	b085      	sub	sp, #20
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	4613      	mov	r3, r2
 800c88e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c890:	e007      	b.n	800c8a2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	1c53      	adds	r3, r2, #1
 800c896:	60bb      	str	r3, [r7, #8]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	1c59      	adds	r1, r3, #1
 800c89c:	60f9      	str	r1, [r7, #12]
 800c89e:	7812      	ldrb	r2, [r2, #0]
 800c8a0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c8a2:	79fb      	ldrb	r3, [r7, #7]
 800c8a4:	1e5a      	subs	r2, r3, #1
 800c8a6:	71fa      	strb	r2, [r7, #7]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1f2      	bne.n	800c892 <copy_block_nn+0x10>
}
 800c8ac:	bf00      	nop
 800c8ae:	bf00      	nop
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bc80      	pop	{r7}
 800c8b6:	4770      	bx	lr

0800c8b8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	781a      	ldrb	r2, [r3, #0]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	4053      	eors	r3, r2
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	7819      	ldrb	r1, [r3, #0]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	781a      	ldrb	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	404a      	eors	r2, r1
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3302      	adds	r3, #2
 800c8ec:	7819      	ldrb	r1, [r3, #0]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	3302      	adds	r3, #2
 800c8f2:	781a      	ldrb	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	3302      	adds	r3, #2
 800c8f8:	404a      	eors	r2, r1
 800c8fa:	b2d2      	uxtb	r2, r2
 800c8fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	3303      	adds	r3, #3
 800c902:	7819      	ldrb	r1, [r3, #0]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	3303      	adds	r3, #3
 800c908:	781a      	ldrb	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3303      	adds	r3, #3
 800c90e:	404a      	eors	r2, r1
 800c910:	b2d2      	uxtb	r2, r2
 800c912:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	3304      	adds	r3, #4
 800c918:	7819      	ldrb	r1, [r3, #0]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	3304      	adds	r3, #4
 800c91e:	781a      	ldrb	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	3304      	adds	r3, #4
 800c924:	404a      	eors	r2, r1
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	3305      	adds	r3, #5
 800c92e:	7819      	ldrb	r1, [r3, #0]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	3305      	adds	r3, #5
 800c934:	781a      	ldrb	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3305      	adds	r3, #5
 800c93a:	404a      	eors	r2, r1
 800c93c:	b2d2      	uxtb	r2, r2
 800c93e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3306      	adds	r3, #6
 800c944:	7819      	ldrb	r1, [r3, #0]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	3306      	adds	r3, #6
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	3306      	adds	r3, #6
 800c950:	404a      	eors	r2, r1
 800c952:	b2d2      	uxtb	r2, r2
 800c954:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	3307      	adds	r3, #7
 800c95a:	7819      	ldrb	r1, [r3, #0]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	3307      	adds	r3, #7
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3307      	adds	r3, #7
 800c966:	404a      	eors	r2, r1
 800c968:	b2d2      	uxtb	r2, r2
 800c96a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3308      	adds	r3, #8
 800c970:	7819      	ldrb	r1, [r3, #0]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	3308      	adds	r3, #8
 800c976:	781a      	ldrb	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3308      	adds	r3, #8
 800c97c:	404a      	eors	r2, r1
 800c97e:	b2d2      	uxtb	r2, r2
 800c980:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3309      	adds	r3, #9
 800c986:	7819      	ldrb	r1, [r3, #0]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	3309      	adds	r3, #9
 800c98c:	781a      	ldrb	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3309      	adds	r3, #9
 800c992:	404a      	eors	r2, r1
 800c994:	b2d2      	uxtb	r2, r2
 800c996:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	330a      	adds	r3, #10
 800c99c:	7819      	ldrb	r1, [r3, #0]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	330a      	adds	r3, #10
 800c9a2:	781a      	ldrb	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	330a      	adds	r3, #10
 800c9a8:	404a      	eors	r2, r1
 800c9aa:	b2d2      	uxtb	r2, r2
 800c9ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	330b      	adds	r3, #11
 800c9b2:	7819      	ldrb	r1, [r3, #0]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	330b      	adds	r3, #11
 800c9b8:	781a      	ldrb	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	330b      	adds	r3, #11
 800c9be:	404a      	eors	r2, r1
 800c9c0:	b2d2      	uxtb	r2, r2
 800c9c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	330c      	adds	r3, #12
 800c9c8:	7819      	ldrb	r1, [r3, #0]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	330c      	adds	r3, #12
 800c9ce:	781a      	ldrb	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	330c      	adds	r3, #12
 800c9d4:	404a      	eors	r2, r1
 800c9d6:	b2d2      	uxtb	r2, r2
 800c9d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	330d      	adds	r3, #13
 800c9de:	7819      	ldrb	r1, [r3, #0]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	330d      	adds	r3, #13
 800c9e4:	781a      	ldrb	r2, [r3, #0]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	330d      	adds	r3, #13
 800c9ea:	404a      	eors	r2, r1
 800c9ec:	b2d2      	uxtb	r2, r2
 800c9ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	330e      	adds	r3, #14
 800c9f4:	7819      	ldrb	r1, [r3, #0]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	330e      	adds	r3, #14
 800c9fa:	781a      	ldrb	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	330e      	adds	r3, #14
 800ca00:	404a      	eors	r2, r1
 800ca02:	b2d2      	uxtb	r2, r2
 800ca04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	330f      	adds	r3, #15
 800ca0a:	7819      	ldrb	r1, [r3, #0]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	330f      	adds	r3, #15
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	330f      	adds	r3, #15
 800ca16:	404a      	eors	r2, r1
 800ca18:	b2d2      	uxtb	r2, r2
 800ca1a:	701a      	strb	r2, [r3, #0]
#endif
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bc80      	pop	{r7}
 800ca24:	4770      	bx	lr

0800ca26 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ca26:	b480      	push	{r7}
 800ca28:	b085      	sub	sp, #20
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	4053      	eors	r3, r2
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	3301      	adds	r3, #1
 800ca46:	7819      	ldrb	r1, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	781a      	ldrb	r2, [r3, #0]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	404a      	eors	r2, r1
 800ca54:	b2d2      	uxtb	r2, r2
 800ca56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	3302      	adds	r3, #2
 800ca5c:	7819      	ldrb	r1, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3302      	adds	r3, #2
 800ca62:	781a      	ldrb	r2, [r3, #0]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3302      	adds	r3, #2
 800ca68:	404a      	eors	r2, r1
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	3303      	adds	r3, #3
 800ca72:	7819      	ldrb	r1, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3303      	adds	r3, #3
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3303      	adds	r3, #3
 800ca7e:	404a      	eors	r2, r1
 800ca80:	b2d2      	uxtb	r2, r2
 800ca82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	3304      	adds	r3, #4
 800ca88:	7819      	ldrb	r1, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	781a      	ldrb	r2, [r3, #0]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3304      	adds	r3, #4
 800ca94:	404a      	eors	r2, r1
 800ca96:	b2d2      	uxtb	r2, r2
 800ca98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	3305      	adds	r3, #5
 800ca9e:	7819      	ldrb	r1, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	3305      	adds	r3, #5
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3305      	adds	r3, #5
 800caaa:	404a      	eors	r2, r1
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	3306      	adds	r3, #6
 800cab4:	7819      	ldrb	r1, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	3306      	adds	r3, #6
 800caba:	781a      	ldrb	r2, [r3, #0]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3306      	adds	r3, #6
 800cac0:	404a      	eors	r2, r1
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	3307      	adds	r3, #7
 800caca:	7819      	ldrb	r1, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3307      	adds	r3, #7
 800cad0:	781a      	ldrb	r2, [r3, #0]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3307      	adds	r3, #7
 800cad6:	404a      	eors	r2, r1
 800cad8:	b2d2      	uxtb	r2, r2
 800cada:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	3308      	adds	r3, #8
 800cae0:	7819      	ldrb	r1, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3308      	adds	r3, #8
 800cae6:	781a      	ldrb	r2, [r3, #0]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	3308      	adds	r3, #8
 800caec:	404a      	eors	r2, r1
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	3309      	adds	r3, #9
 800caf6:	7819      	ldrb	r1, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3309      	adds	r3, #9
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3309      	adds	r3, #9
 800cb02:	404a      	eors	r2, r1
 800cb04:	b2d2      	uxtb	r2, r2
 800cb06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	330a      	adds	r3, #10
 800cb0c:	7819      	ldrb	r1, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	330a      	adds	r3, #10
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	330a      	adds	r3, #10
 800cb18:	404a      	eors	r2, r1
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	330b      	adds	r3, #11
 800cb22:	7819      	ldrb	r1, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	330b      	adds	r3, #11
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	330b      	adds	r3, #11
 800cb2e:	404a      	eors	r2, r1
 800cb30:	b2d2      	uxtb	r2, r2
 800cb32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	330c      	adds	r3, #12
 800cb38:	7819      	ldrb	r1, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	330c      	adds	r3, #12
 800cb3e:	781a      	ldrb	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	330c      	adds	r3, #12
 800cb44:	404a      	eors	r2, r1
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	330d      	adds	r3, #13
 800cb4e:	7819      	ldrb	r1, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	330d      	adds	r3, #13
 800cb54:	781a      	ldrb	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	330d      	adds	r3, #13
 800cb5a:	404a      	eors	r2, r1
 800cb5c:	b2d2      	uxtb	r2, r2
 800cb5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	330e      	adds	r3, #14
 800cb64:	7819      	ldrb	r1, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	330e      	adds	r3, #14
 800cb6a:	781a      	ldrb	r2, [r3, #0]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	330e      	adds	r3, #14
 800cb70:	404a      	eors	r2, r1
 800cb72:	b2d2      	uxtb	r2, r2
 800cb74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	330f      	adds	r3, #15
 800cb7a:	7819      	ldrb	r1, [r3, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	330f      	adds	r3, #15
 800cb80:	781a      	ldrb	r2, [r3, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	330f      	adds	r3, #15
 800cb86:	404a      	eors	r2, r1
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cb8c:	bf00      	nop
 800cb8e:	3714      	adds	r7, #20
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bc80      	pop	{r7}
 800cb94:	4770      	bx	lr

0800cb96 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff fe88 	bl	800c8b8 <xor_block>
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	4b48      	ldr	r3, [pc, #288]	; (800cce0 <shift_sub_rows+0x130>)
 800cbc0:	5c9a      	ldrb	r2, [r3, r2]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	3304      	adds	r3, #4
 800cbd2:	4a43      	ldr	r2, [pc, #268]	; (800cce0 <shift_sub_rows+0x130>)
 800cbd4:	5c52      	ldrb	r2, [r2, r1]
 800cbd6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3308      	adds	r3, #8
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	4a3e      	ldr	r2, [pc, #248]	; (800cce0 <shift_sub_rows+0x130>)
 800cbe6:	5c52      	ldrb	r2, [r2, r1]
 800cbe8:	701a      	strb	r2, [r3, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	330c      	adds	r3, #12
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	330c      	adds	r3, #12
 800cbf6:	4a3a      	ldr	r2, [pc, #232]	; (800cce0 <shift_sub_rows+0x130>)
 800cbf8:	5c52      	ldrb	r2, [r2, r1]
 800cbfa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	785b      	ldrb	r3, [r3, #1]
 800cc00:	73fb      	strb	r3, [r7, #15]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	3305      	adds	r3, #5
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	4619      	mov	r1, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	4a34      	ldr	r2, [pc, #208]	; (800cce0 <shift_sub_rows+0x130>)
 800cc10:	5c52      	ldrb	r2, [r2, r1]
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	3309      	adds	r3, #9
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3305      	adds	r3, #5
 800cc20:	4a2f      	ldr	r2, [pc, #188]	; (800cce0 <shift_sub_rows+0x130>)
 800cc22:	5c52      	ldrb	r2, [r2, r1]
 800cc24:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	330d      	adds	r3, #13
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3309      	adds	r3, #9
 800cc32:	4a2b      	ldr	r2, [pc, #172]	; (800cce0 <shift_sub_rows+0x130>)
 800cc34:	5c52      	ldrb	r2, [r2, r1]
 800cc36:	701a      	strb	r2, [r3, #0]
 800cc38:	7bfa      	ldrb	r2, [r7, #15]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	330d      	adds	r3, #13
 800cc3e:	4928      	ldr	r1, [pc, #160]	; (800cce0 <shift_sub_rows+0x130>)
 800cc40:	5c8a      	ldrb	r2, [r1, r2]
 800cc42:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	789b      	ldrb	r3, [r3, #2]
 800cc48:	73fb      	strb	r3, [r7, #15]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	330a      	adds	r3, #10
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	4619      	mov	r1, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3302      	adds	r3, #2
 800cc56:	4a22      	ldr	r2, [pc, #136]	; (800cce0 <shift_sub_rows+0x130>)
 800cc58:	5c52      	ldrb	r2, [r2, r1]
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	7bfa      	ldrb	r2, [r7, #15]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	330a      	adds	r3, #10
 800cc62:	491f      	ldr	r1, [pc, #124]	; (800cce0 <shift_sub_rows+0x130>)
 800cc64:	5c8a      	ldrb	r2, [r1, r2]
 800cc66:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	799b      	ldrb	r3, [r3, #6]
 800cc6c:	73fb      	strb	r3, [r7, #15]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	330e      	adds	r3, #14
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	4619      	mov	r1, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3306      	adds	r3, #6
 800cc7a:	4a19      	ldr	r2, [pc, #100]	; (800cce0 <shift_sub_rows+0x130>)
 800cc7c:	5c52      	ldrb	r2, [r2, r1]
 800cc7e:	701a      	strb	r2, [r3, #0]
 800cc80:	7bfa      	ldrb	r2, [r7, #15]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	330e      	adds	r3, #14
 800cc86:	4916      	ldr	r1, [pc, #88]	; (800cce0 <shift_sub_rows+0x130>)
 800cc88:	5c8a      	ldrb	r2, [r1, r2]
 800cc8a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	7bdb      	ldrb	r3, [r3, #15]
 800cc90:	73fb      	strb	r3, [r7, #15]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	330b      	adds	r3, #11
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	4619      	mov	r1, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	330f      	adds	r3, #15
 800cc9e:	4a10      	ldr	r2, [pc, #64]	; (800cce0 <shift_sub_rows+0x130>)
 800cca0:	5c52      	ldrb	r2, [r2, r1]
 800cca2:	701a      	strb	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3307      	adds	r3, #7
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	330b      	adds	r3, #11
 800ccb0:	4a0b      	ldr	r2, [pc, #44]	; (800cce0 <shift_sub_rows+0x130>)
 800ccb2:	5c52      	ldrb	r2, [r2, r1]
 800ccb4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	3303      	adds	r3, #3
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	3307      	adds	r3, #7
 800ccc2:	4a07      	ldr	r2, [pc, #28]	; (800cce0 <shift_sub_rows+0x130>)
 800ccc4:	5c52      	ldrb	r2, [r2, r1]
 800ccc6:	701a      	strb	r2, [r3, #0]
 800ccc8:	7bfa      	ldrb	r2, [r7, #15]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3303      	adds	r3, #3
 800ccce:	4904      	ldr	r1, [pc, #16]	; (800cce0 <shift_sub_rows+0x130>)
 800ccd0:	5c8a      	ldrb	r2, [r1, r2]
 800ccd2:	701a      	strb	r2, [r3, #0]
}
 800ccd4:	bf00      	nop
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bc80      	pop	{r7}
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	0801d5d8 	.word	0x0801d5d8

0800cce4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ccec:	f107 0308 	add.w	r3, r7, #8
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff fd6c 	bl	800c7d0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ccf8:	7a3b      	ldrb	r3, [r7, #8]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	4b9a      	ldr	r3, [pc, #616]	; (800cf68 <mix_sub_columns+0x284>)
 800ccfe:	5c9a      	ldrb	r2, [r3, r2]
 800cd00:	7b7b      	ldrb	r3, [r7, #13]
 800cd02:	4619      	mov	r1, r3
 800cd04:	4b99      	ldr	r3, [pc, #612]	; (800cf6c <mix_sub_columns+0x288>)
 800cd06:	5c5b      	ldrb	r3, [r3, r1]
 800cd08:	4053      	eors	r3, r2
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	7cbb      	ldrb	r3, [r7, #18]
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4b97      	ldr	r3, [pc, #604]	; (800cf70 <mix_sub_columns+0x28c>)
 800cd12:	5c5b      	ldrb	r3, [r3, r1]
 800cd14:	4053      	eors	r3, r2
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4b94      	ldr	r3, [pc, #592]	; (800cf70 <mix_sub_columns+0x28c>)
 800cd1e:	5c5b      	ldrb	r3, [r3, r1]
 800cd20:	4053      	eors	r3, r2
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cd28:	7a3b      	ldrb	r3, [r7, #8]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	4b90      	ldr	r3, [pc, #576]	; (800cf70 <mix_sub_columns+0x28c>)
 800cd2e:	5c9a      	ldrb	r2, [r3, r2]
 800cd30:	7b7b      	ldrb	r3, [r7, #13]
 800cd32:	4619      	mov	r1, r3
 800cd34:	4b8c      	ldr	r3, [pc, #560]	; (800cf68 <mix_sub_columns+0x284>)
 800cd36:	5c5b      	ldrb	r3, [r3, r1]
 800cd38:	4053      	eors	r3, r2
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	7cbb      	ldrb	r3, [r7, #18]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4b8a      	ldr	r3, [pc, #552]	; (800cf6c <mix_sub_columns+0x288>)
 800cd42:	5c5b      	ldrb	r3, [r3, r1]
 800cd44:	4053      	eors	r3, r2
 800cd46:	b2d9      	uxtb	r1, r3
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	4b88      	ldr	r3, [pc, #544]	; (800cf70 <mix_sub_columns+0x28c>)
 800cd4e:	5c9a      	ldrb	r2, [r3, r2]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	3301      	adds	r3, #1
 800cd54:	404a      	eors	r2, r1
 800cd56:	b2d2      	uxtb	r2, r2
 800cd58:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cd5a:	7a3b      	ldrb	r3, [r7, #8]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4b84      	ldr	r3, [pc, #528]	; (800cf70 <mix_sub_columns+0x28c>)
 800cd60:	5c9a      	ldrb	r2, [r3, r2]
 800cd62:	7b7b      	ldrb	r3, [r7, #13]
 800cd64:	4619      	mov	r1, r3
 800cd66:	4b82      	ldr	r3, [pc, #520]	; (800cf70 <mix_sub_columns+0x28c>)
 800cd68:	5c5b      	ldrb	r3, [r3, r1]
 800cd6a:	4053      	eors	r3, r2
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	7cbb      	ldrb	r3, [r7, #18]
 800cd70:	4619      	mov	r1, r3
 800cd72:	4b7d      	ldr	r3, [pc, #500]	; (800cf68 <mix_sub_columns+0x284>)
 800cd74:	5c5b      	ldrb	r3, [r3, r1]
 800cd76:	4053      	eors	r3, r2
 800cd78:	b2d9      	uxtb	r1, r3
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	4b7b      	ldr	r3, [pc, #492]	; (800cf6c <mix_sub_columns+0x288>)
 800cd80:	5c9a      	ldrb	r2, [r3, r2]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	3302      	adds	r3, #2
 800cd86:	404a      	eors	r2, r1
 800cd88:	b2d2      	uxtb	r2, r2
 800cd8a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cd8c:	7a3b      	ldrb	r3, [r7, #8]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	4b76      	ldr	r3, [pc, #472]	; (800cf6c <mix_sub_columns+0x288>)
 800cd92:	5c9a      	ldrb	r2, [r3, r2]
 800cd94:	7b7b      	ldrb	r3, [r7, #13]
 800cd96:	4619      	mov	r1, r3
 800cd98:	4b75      	ldr	r3, [pc, #468]	; (800cf70 <mix_sub_columns+0x28c>)
 800cd9a:	5c5b      	ldrb	r3, [r3, r1]
 800cd9c:	4053      	eors	r3, r2
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	7cbb      	ldrb	r3, [r7, #18]
 800cda2:	4619      	mov	r1, r3
 800cda4:	4b72      	ldr	r3, [pc, #456]	; (800cf70 <mix_sub_columns+0x28c>)
 800cda6:	5c5b      	ldrb	r3, [r3, r1]
 800cda8:	4053      	eors	r3, r2
 800cdaa:	b2d9      	uxtb	r1, r3
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	4b6d      	ldr	r3, [pc, #436]	; (800cf68 <mix_sub_columns+0x284>)
 800cdb2:	5c9a      	ldrb	r2, [r3, r2]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3303      	adds	r3, #3
 800cdb8:	404a      	eors	r2, r1
 800cdba:	b2d2      	uxtb	r2, r2
 800cdbc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cdbe:	7b3b      	ldrb	r3, [r7, #12]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	4b69      	ldr	r3, [pc, #420]	; (800cf68 <mix_sub_columns+0x284>)
 800cdc4:	5c9a      	ldrb	r2, [r3, r2]
 800cdc6:	7c7b      	ldrb	r3, [r7, #17]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4b68      	ldr	r3, [pc, #416]	; (800cf6c <mix_sub_columns+0x288>)
 800cdcc:	5c5b      	ldrb	r3, [r3, r1]
 800cdce:	4053      	eors	r3, r2
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	7dbb      	ldrb	r3, [r7, #22]
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	4b66      	ldr	r3, [pc, #408]	; (800cf70 <mix_sub_columns+0x28c>)
 800cdd8:	5c5b      	ldrb	r3, [r3, r1]
 800cdda:	4053      	eors	r3, r2
 800cddc:	b2d9      	uxtb	r1, r3
 800cdde:	7afb      	ldrb	r3, [r7, #11]
 800cde0:	461a      	mov	r2, r3
 800cde2:	4b63      	ldr	r3, [pc, #396]	; (800cf70 <mix_sub_columns+0x28c>)
 800cde4:	5c9a      	ldrb	r2, [r3, r2]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	3304      	adds	r3, #4
 800cdea:	404a      	eors	r2, r1
 800cdec:	b2d2      	uxtb	r2, r2
 800cdee:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cdf0:	7b3b      	ldrb	r3, [r7, #12]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	4b5e      	ldr	r3, [pc, #376]	; (800cf70 <mix_sub_columns+0x28c>)
 800cdf6:	5c9a      	ldrb	r2, [r3, r2]
 800cdf8:	7c7b      	ldrb	r3, [r7, #17]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4b5a      	ldr	r3, [pc, #360]	; (800cf68 <mix_sub_columns+0x284>)
 800cdfe:	5c5b      	ldrb	r3, [r3, r1]
 800ce00:	4053      	eors	r3, r2
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	7dbb      	ldrb	r3, [r7, #22]
 800ce06:	4619      	mov	r1, r3
 800ce08:	4b58      	ldr	r3, [pc, #352]	; (800cf6c <mix_sub_columns+0x288>)
 800ce0a:	5c5b      	ldrb	r3, [r3, r1]
 800ce0c:	4053      	eors	r3, r2
 800ce0e:	b2d9      	uxtb	r1, r3
 800ce10:	7afb      	ldrb	r3, [r7, #11]
 800ce12:	461a      	mov	r2, r3
 800ce14:	4b56      	ldr	r3, [pc, #344]	; (800cf70 <mix_sub_columns+0x28c>)
 800ce16:	5c9a      	ldrb	r2, [r3, r2]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3305      	adds	r3, #5
 800ce1c:	404a      	eors	r2, r1
 800ce1e:	b2d2      	uxtb	r2, r2
 800ce20:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ce22:	7b3b      	ldrb	r3, [r7, #12]
 800ce24:	461a      	mov	r2, r3
 800ce26:	4b52      	ldr	r3, [pc, #328]	; (800cf70 <mix_sub_columns+0x28c>)
 800ce28:	5c9a      	ldrb	r2, [r3, r2]
 800ce2a:	7c7b      	ldrb	r3, [r7, #17]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4b50      	ldr	r3, [pc, #320]	; (800cf70 <mix_sub_columns+0x28c>)
 800ce30:	5c5b      	ldrb	r3, [r3, r1]
 800ce32:	4053      	eors	r3, r2
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	7dbb      	ldrb	r3, [r7, #22]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	4b4b      	ldr	r3, [pc, #300]	; (800cf68 <mix_sub_columns+0x284>)
 800ce3c:	5c5b      	ldrb	r3, [r3, r1]
 800ce3e:	4053      	eors	r3, r2
 800ce40:	b2d9      	uxtb	r1, r3
 800ce42:	7afb      	ldrb	r3, [r7, #11]
 800ce44:	461a      	mov	r2, r3
 800ce46:	4b49      	ldr	r3, [pc, #292]	; (800cf6c <mix_sub_columns+0x288>)
 800ce48:	5c9a      	ldrb	r2, [r3, r2]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	3306      	adds	r3, #6
 800ce4e:	404a      	eors	r2, r1
 800ce50:	b2d2      	uxtb	r2, r2
 800ce52:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ce54:	7b3b      	ldrb	r3, [r7, #12]
 800ce56:	461a      	mov	r2, r3
 800ce58:	4b44      	ldr	r3, [pc, #272]	; (800cf6c <mix_sub_columns+0x288>)
 800ce5a:	5c9a      	ldrb	r2, [r3, r2]
 800ce5c:	7c7b      	ldrb	r3, [r7, #17]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4b43      	ldr	r3, [pc, #268]	; (800cf70 <mix_sub_columns+0x28c>)
 800ce62:	5c5b      	ldrb	r3, [r3, r1]
 800ce64:	4053      	eors	r3, r2
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	7dbb      	ldrb	r3, [r7, #22]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4b40      	ldr	r3, [pc, #256]	; (800cf70 <mix_sub_columns+0x28c>)
 800ce6e:	5c5b      	ldrb	r3, [r3, r1]
 800ce70:	4053      	eors	r3, r2
 800ce72:	b2d9      	uxtb	r1, r3
 800ce74:	7afb      	ldrb	r3, [r7, #11]
 800ce76:	461a      	mov	r2, r3
 800ce78:	4b3b      	ldr	r3, [pc, #236]	; (800cf68 <mix_sub_columns+0x284>)
 800ce7a:	5c9a      	ldrb	r2, [r3, r2]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	3307      	adds	r3, #7
 800ce80:	404a      	eors	r2, r1
 800ce82:	b2d2      	uxtb	r2, r2
 800ce84:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ce86:	7c3b      	ldrb	r3, [r7, #16]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4b37      	ldr	r3, [pc, #220]	; (800cf68 <mix_sub_columns+0x284>)
 800ce8c:	5c9a      	ldrb	r2, [r3, r2]
 800ce8e:	7d7b      	ldrb	r3, [r7, #21]
 800ce90:	4619      	mov	r1, r3
 800ce92:	4b36      	ldr	r3, [pc, #216]	; (800cf6c <mix_sub_columns+0x288>)
 800ce94:	5c5b      	ldrb	r3, [r3, r1]
 800ce96:	4053      	eors	r3, r2
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	7abb      	ldrb	r3, [r7, #10]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	4b34      	ldr	r3, [pc, #208]	; (800cf70 <mix_sub_columns+0x28c>)
 800cea0:	5c5b      	ldrb	r3, [r3, r1]
 800cea2:	4053      	eors	r3, r2
 800cea4:	b2d9      	uxtb	r1, r3
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4b31      	ldr	r3, [pc, #196]	; (800cf70 <mix_sub_columns+0x28c>)
 800ceac:	5c9a      	ldrb	r2, [r3, r2]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3308      	adds	r3, #8
 800ceb2:	404a      	eors	r2, r1
 800ceb4:	b2d2      	uxtb	r2, r2
 800ceb6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ceb8:	7c3b      	ldrb	r3, [r7, #16]
 800ceba:	461a      	mov	r2, r3
 800cebc:	4b2c      	ldr	r3, [pc, #176]	; (800cf70 <mix_sub_columns+0x28c>)
 800cebe:	5c9a      	ldrb	r2, [r3, r2]
 800cec0:	7d7b      	ldrb	r3, [r7, #21]
 800cec2:	4619      	mov	r1, r3
 800cec4:	4b28      	ldr	r3, [pc, #160]	; (800cf68 <mix_sub_columns+0x284>)
 800cec6:	5c5b      	ldrb	r3, [r3, r1]
 800cec8:	4053      	eors	r3, r2
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	7abb      	ldrb	r3, [r7, #10]
 800cece:	4619      	mov	r1, r3
 800ced0:	4b26      	ldr	r3, [pc, #152]	; (800cf6c <mix_sub_columns+0x288>)
 800ced2:	5c5b      	ldrb	r3, [r3, r1]
 800ced4:	4053      	eors	r3, r2
 800ced6:	b2d9      	uxtb	r1, r3
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
 800ceda:	461a      	mov	r2, r3
 800cedc:	4b24      	ldr	r3, [pc, #144]	; (800cf70 <mix_sub_columns+0x28c>)
 800cede:	5c9a      	ldrb	r2, [r3, r2]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	3309      	adds	r3, #9
 800cee4:	404a      	eors	r2, r1
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ceea:	7c3b      	ldrb	r3, [r7, #16]
 800ceec:	461a      	mov	r2, r3
 800ceee:	4b20      	ldr	r3, [pc, #128]	; (800cf70 <mix_sub_columns+0x28c>)
 800cef0:	5c9a      	ldrb	r2, [r3, r2]
 800cef2:	7d7b      	ldrb	r3, [r7, #21]
 800cef4:	4619      	mov	r1, r3
 800cef6:	4b1e      	ldr	r3, [pc, #120]	; (800cf70 <mix_sub_columns+0x28c>)
 800cef8:	5c5b      	ldrb	r3, [r3, r1]
 800cefa:	4053      	eors	r3, r2
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	7abb      	ldrb	r3, [r7, #10]
 800cf00:	4619      	mov	r1, r3
 800cf02:	4b19      	ldr	r3, [pc, #100]	; (800cf68 <mix_sub_columns+0x284>)
 800cf04:	5c5b      	ldrb	r3, [r3, r1]
 800cf06:	4053      	eors	r3, r2
 800cf08:	b2d9      	uxtb	r1, r3
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	4b17      	ldr	r3, [pc, #92]	; (800cf6c <mix_sub_columns+0x288>)
 800cf10:	5c9a      	ldrb	r2, [r3, r2]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	330a      	adds	r3, #10
 800cf16:	404a      	eors	r2, r1
 800cf18:	b2d2      	uxtb	r2, r2
 800cf1a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cf1c:	7c3b      	ldrb	r3, [r7, #16]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	4b12      	ldr	r3, [pc, #72]	; (800cf6c <mix_sub_columns+0x288>)
 800cf22:	5c9a      	ldrb	r2, [r3, r2]
 800cf24:	7d7b      	ldrb	r3, [r7, #21]
 800cf26:	4619      	mov	r1, r3
 800cf28:	4b11      	ldr	r3, [pc, #68]	; (800cf70 <mix_sub_columns+0x28c>)
 800cf2a:	5c5b      	ldrb	r3, [r3, r1]
 800cf2c:	4053      	eors	r3, r2
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	7abb      	ldrb	r3, [r7, #10]
 800cf32:	4619      	mov	r1, r3
 800cf34:	4b0e      	ldr	r3, [pc, #56]	; (800cf70 <mix_sub_columns+0x28c>)
 800cf36:	5c5b      	ldrb	r3, [r3, r1]
 800cf38:	4053      	eors	r3, r2
 800cf3a:	b2d9      	uxtb	r1, r3
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <mix_sub_columns+0x284>)
 800cf42:	5c9a      	ldrb	r2, [r3, r2]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	330b      	adds	r3, #11
 800cf48:	404a      	eors	r2, r1
 800cf4a:	b2d2      	uxtb	r2, r2
 800cf4c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cf4e:	7d3b      	ldrb	r3, [r7, #20]
 800cf50:	461a      	mov	r2, r3
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <mix_sub_columns+0x284>)
 800cf54:	5c9a      	ldrb	r2, [r3, r2]
 800cf56:	7a7b      	ldrb	r3, [r7, #9]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <mix_sub_columns+0x288>)
 800cf5c:	5c5b      	ldrb	r3, [r3, r1]
 800cf5e:	4053      	eors	r3, r2
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	7bbb      	ldrb	r3, [r7, #14]
 800cf64:	4619      	mov	r1, r3
 800cf66:	e005      	b.n	800cf74 <mix_sub_columns+0x290>
 800cf68:	0801d6d8 	.word	0x0801d6d8
 800cf6c:	0801d7d8 	.word	0x0801d7d8
 800cf70:	0801d5d8 	.word	0x0801d5d8
 800cf74:	4b2d      	ldr	r3, [pc, #180]	; (800d02c <mix_sub_columns+0x348>)
 800cf76:	5c5b      	ldrb	r3, [r3, r1]
 800cf78:	4053      	eors	r3, r2
 800cf7a:	b2d9      	uxtb	r1, r3
 800cf7c:	7cfb      	ldrb	r3, [r7, #19]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	4b2a      	ldr	r3, [pc, #168]	; (800d02c <mix_sub_columns+0x348>)
 800cf82:	5c9a      	ldrb	r2, [r3, r2]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	330c      	adds	r3, #12
 800cf88:	404a      	eors	r2, r1
 800cf8a:	b2d2      	uxtb	r2, r2
 800cf8c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cf8e:	7d3b      	ldrb	r3, [r7, #20]
 800cf90:	461a      	mov	r2, r3
 800cf92:	4b26      	ldr	r3, [pc, #152]	; (800d02c <mix_sub_columns+0x348>)
 800cf94:	5c9a      	ldrb	r2, [r3, r2]
 800cf96:	7a7b      	ldrb	r3, [r7, #9]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4b25      	ldr	r3, [pc, #148]	; (800d030 <mix_sub_columns+0x34c>)
 800cf9c:	5c5b      	ldrb	r3, [r3, r1]
 800cf9e:	4053      	eors	r3, r2
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	7bbb      	ldrb	r3, [r7, #14]
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4b23      	ldr	r3, [pc, #140]	; (800d034 <mix_sub_columns+0x350>)
 800cfa8:	5c5b      	ldrb	r3, [r3, r1]
 800cfaa:	4053      	eors	r3, r2
 800cfac:	b2d9      	uxtb	r1, r3
 800cfae:	7cfb      	ldrb	r3, [r7, #19]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	4b1e      	ldr	r3, [pc, #120]	; (800d02c <mix_sub_columns+0x348>)
 800cfb4:	5c9a      	ldrb	r2, [r3, r2]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	330d      	adds	r3, #13
 800cfba:	404a      	eors	r2, r1
 800cfbc:	b2d2      	uxtb	r2, r2
 800cfbe:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cfc0:	7d3b      	ldrb	r3, [r7, #20]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4b19      	ldr	r3, [pc, #100]	; (800d02c <mix_sub_columns+0x348>)
 800cfc6:	5c9a      	ldrb	r2, [r3, r2]
 800cfc8:	7a7b      	ldrb	r3, [r7, #9]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	4b17      	ldr	r3, [pc, #92]	; (800d02c <mix_sub_columns+0x348>)
 800cfce:	5c5b      	ldrb	r3, [r3, r1]
 800cfd0:	4053      	eors	r3, r2
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	7bbb      	ldrb	r3, [r7, #14]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4b15      	ldr	r3, [pc, #84]	; (800d030 <mix_sub_columns+0x34c>)
 800cfda:	5c5b      	ldrb	r3, [r3, r1]
 800cfdc:	4053      	eors	r3, r2
 800cfde:	b2d9      	uxtb	r1, r3
 800cfe0:	7cfb      	ldrb	r3, [r7, #19]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4b13      	ldr	r3, [pc, #76]	; (800d034 <mix_sub_columns+0x350>)
 800cfe6:	5c9a      	ldrb	r2, [r3, r2]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	330e      	adds	r3, #14
 800cfec:	404a      	eors	r2, r1
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800cff2:	7d3b      	ldrb	r3, [r7, #20]
 800cff4:	461a      	mov	r2, r3
 800cff6:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <mix_sub_columns+0x350>)
 800cff8:	5c9a      	ldrb	r2, [r3, r2]
 800cffa:	7a7b      	ldrb	r3, [r7, #9]
 800cffc:	4619      	mov	r1, r3
 800cffe:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <mix_sub_columns+0x348>)
 800d000:	5c5b      	ldrb	r3, [r3, r1]
 800d002:	4053      	eors	r3, r2
 800d004:	b2da      	uxtb	r2, r3
 800d006:	7bbb      	ldrb	r3, [r7, #14]
 800d008:	4619      	mov	r1, r3
 800d00a:	4b08      	ldr	r3, [pc, #32]	; (800d02c <mix_sub_columns+0x348>)
 800d00c:	5c5b      	ldrb	r3, [r3, r1]
 800d00e:	4053      	eors	r3, r2
 800d010:	b2d9      	uxtb	r1, r3
 800d012:	7cfb      	ldrb	r3, [r7, #19]
 800d014:	461a      	mov	r2, r3
 800d016:	4b06      	ldr	r3, [pc, #24]	; (800d030 <mix_sub_columns+0x34c>)
 800d018:	5c9a      	ldrb	r2, [r3, r2]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	330f      	adds	r3, #15
 800d01e:	404a      	eors	r2, r1
 800d020:	b2d2      	uxtb	r2, r2
 800d022:	701a      	strb	r2, [r3, #0]
  }
 800d024:	bf00      	nop
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	0801d5d8 	.word	0x0801d5d8
 800d030:	0801d6d8 	.word	0x0801d6d8
 800d034:	0801d7d8 	.word	0x0801d7d8

0800d038 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	460b      	mov	r3, r1
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d046:	7afb      	ldrb	r3, [r7, #11]
 800d048:	3b10      	subs	r3, #16
 800d04a:	2b10      	cmp	r3, #16
 800d04c:	bf8c      	ite	hi
 800d04e:	2201      	movhi	r2, #1
 800d050:	2200      	movls	r2, #0
 800d052:	b2d2      	uxtb	r2, r2
 800d054:	2a00      	cmp	r2, #0
 800d056:	d10d      	bne.n	800d074 <lorawan_aes_set_key+0x3c>
 800d058:	2201      	movs	r2, #1
 800d05a:	fa02 f303 	lsl.w	r3, r2, r3
 800d05e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d066:	2b00      	cmp	r3, #0
 800d068:	bf14      	ite	ne
 800d06a:	2301      	movne	r3, #1
 800d06c:	2300      	moveq	r3, #0
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	d105      	bne.n	800d080 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800d07c:	23ff      	movs	r3, #255	; 0xff
 800d07e:	e0b2      	b.n	800d1e6 <lorawan_aes_set_key+0x1ae>
        break;
 800d080:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7afa      	ldrb	r2, [r7, #11]
 800d086:	68f9      	ldr	r1, [r7, #12]
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff fbfa 	bl	800c882 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d08e:	7afb      	ldrb	r3, [r7, #11]
 800d090:	331c      	adds	r3, #28
 800d092:	b2db      	uxtb	r3, r3
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d098:	7c7b      	ldrb	r3, [r7, #17]
 800d09a:	091b      	lsrs	r3, r3, #4
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d0a8:	7afb      	ldrb	r3, [r7, #11]
 800d0aa:	75fb      	strb	r3, [r7, #23]
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	75bb      	strb	r3, [r7, #22]
 800d0b0:	e093      	b.n	800d1da <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	3b04      	subs	r3, #4
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	5cd3      	ldrb	r3, [r2, r3]
 800d0ba:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	3b03      	subs	r3, #3
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	5cd3      	ldrb	r3, [r2, r3]
 800d0c4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
 800d0c8:	3b02      	subs	r3, #2
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	5cd3      	ldrb	r3, [r2, r3]
 800d0ce:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	5cd3      	ldrb	r3, [r2, r3]
 800d0d8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	7afa      	ldrb	r2, [r7, #11]
 800d0de:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0e2:	fb01 f202 	mul.w	r2, r1, r2
 800d0e6:	1a9b      	subs	r3, r3, r2
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d127      	bne.n	800d13e <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800d0ee:	7d7b      	ldrb	r3, [r7, #21]
 800d0f0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d0f2:	7d3b      	ldrb	r3, [r7, #20]
 800d0f4:	4a3e      	ldr	r2, [pc, #248]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d0f6:	5cd2      	ldrb	r2, [r2, r3]
 800d0f8:	7dbb      	ldrb	r3, [r7, #22]
 800d0fa:	4053      	eors	r3, r2
 800d0fc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d0fe:	7cfb      	ldrb	r3, [r7, #19]
 800d100:	4a3b      	ldr	r2, [pc, #236]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d102:	5cd3      	ldrb	r3, [r2, r3]
 800d104:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d106:	7cbb      	ldrb	r3, [r7, #18]
 800d108:	4a39      	ldr	r2, [pc, #228]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d10a:	5cd3      	ldrb	r3, [r2, r3]
 800d10c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d10e:	7c3b      	ldrb	r3, [r7, #16]
 800d110:	4a37      	ldr	r2, [pc, #220]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d112:	5cd3      	ldrb	r3, [r2, r3]
 800d114:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d116:	7dbb      	ldrb	r3, [r7, #22]
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	b25a      	sxtb	r2, r3
 800d11c:	7dbb      	ldrb	r3, [r7, #22]
 800d11e:	09db      	lsrs	r3, r3, #7
 800d120:	b2db      	uxtb	r3, r3
 800d122:	4619      	mov	r1, r3
 800d124:	0049      	lsls	r1, r1, #1
 800d126:	440b      	add	r3, r1
 800d128:	4619      	mov	r1, r3
 800d12a:	00c8      	lsls	r0, r1, #3
 800d12c:	4619      	mov	r1, r3
 800d12e:	4603      	mov	r3, r0
 800d130:	440b      	add	r3, r1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	b25b      	sxtb	r3, r3
 800d136:	4053      	eors	r3, r2
 800d138:	b25b      	sxtb	r3, r3
 800d13a:	75bb      	strb	r3, [r7, #22]
 800d13c:	e01c      	b.n	800d178 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d13e:	7afb      	ldrb	r3, [r7, #11]
 800d140:	2b18      	cmp	r3, #24
 800d142:	d919      	bls.n	800d178 <lorawan_aes_set_key+0x140>
 800d144:	7dfb      	ldrb	r3, [r7, #23]
 800d146:	7afa      	ldrb	r2, [r7, #11]
 800d148:	fbb3 f1f2 	udiv	r1, r3, r2
 800d14c:	fb01 f202 	mul.w	r2, r1, r2
 800d150:	1a9b      	subs	r3, r3, r2
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b10      	cmp	r3, #16
 800d156:	d10f      	bne.n	800d178 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800d158:	7d7b      	ldrb	r3, [r7, #21]
 800d15a:	4a25      	ldr	r2, [pc, #148]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d15c:	5cd3      	ldrb	r3, [r2, r3]
 800d15e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d160:	7d3b      	ldrb	r3, [r7, #20]
 800d162:	4a23      	ldr	r2, [pc, #140]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d164:	5cd3      	ldrb	r3, [r2, r3]
 800d166:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d168:	7cfb      	ldrb	r3, [r7, #19]
 800d16a:	4a21      	ldr	r2, [pc, #132]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d16c:	5cd3      	ldrb	r3, [r2, r3]
 800d16e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d170:	7cbb      	ldrb	r3, [r7, #18]
 800d172:	4a1f      	ldr	r2, [pc, #124]	; (800d1f0 <lorawan_aes_set_key+0x1b8>)
 800d174:	5cd3      	ldrb	r3, [r2, r3]
 800d176:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d178:	7dfa      	ldrb	r2, [r7, #23]
 800d17a:	7afb      	ldrb	r3, [r7, #11]
 800d17c:	1ad3      	subs	r3, r2, r3
 800d17e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d180:	7c3b      	ldrb	r3, [r7, #16]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	5cd1      	ldrb	r1, [r2, r3]
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	7d7a      	ldrb	r2, [r7, #21]
 800d18a:	404a      	eors	r2, r1
 800d18c:	b2d1      	uxtb	r1, r2
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d192:	7c3b      	ldrb	r3, [r7, #16]
 800d194:	3301      	adds	r3, #1
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	5cd1      	ldrb	r1, [r2, r3]
 800d19a:	7dfb      	ldrb	r3, [r7, #23]
 800d19c:	3301      	adds	r3, #1
 800d19e:	7d3a      	ldrb	r2, [r7, #20]
 800d1a0:	404a      	eors	r2, r1
 800d1a2:	b2d1      	uxtb	r1, r2
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d1a8:	7c3b      	ldrb	r3, [r7, #16]
 800d1aa:	3302      	adds	r3, #2
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	5cd1      	ldrb	r1, [r2, r3]
 800d1b0:	7dfb      	ldrb	r3, [r7, #23]
 800d1b2:	3302      	adds	r3, #2
 800d1b4:	7cfa      	ldrb	r2, [r7, #19]
 800d1b6:	404a      	eors	r2, r1
 800d1b8:	b2d1      	uxtb	r1, r2
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d1be:	7c3b      	ldrb	r3, [r7, #16]
 800d1c0:	3303      	adds	r3, #3
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	5cd1      	ldrb	r1, [r2, r3]
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
 800d1c8:	3303      	adds	r3, #3
 800d1ca:	7cba      	ldrb	r2, [r7, #18]
 800d1cc:	404a      	eors	r2, r1
 800d1ce:	b2d1      	uxtb	r1, r2
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d1d4:	7dfb      	ldrb	r3, [r7, #23]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	75fb      	strb	r3, [r7, #23]
 800d1da:	7dfa      	ldrb	r2, [r7, #23]
 800d1dc:	7c7b      	ldrb	r3, [r7, #17]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	f4ff af67 	bcc.w	800d0b2 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	0801d5d8 	.word	0x0801d5d8

0800d1f4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	; 0x28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d038      	beq.n	800d27c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	f107 0314 	add.w	r3, r7, #20
 800d210:	68f9      	ldr	r1, [r7, #12]
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff fc07 	bl	800ca26 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d218:	2301      	movs	r3, #1
 800d21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d21e:	e014      	b.n	800d24a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d220:	f107 0314 	add.w	r3, r7, #20
 800d224:	4618      	mov	r0, r3
 800d226:	f7ff fd5d 	bl	800cce4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d230:	0112      	lsls	r2, r2, #4
 800d232:	441a      	add	r2, r3
 800d234:	f107 0314 	add.w	r3, r7, #20
 800d238:	4611      	mov	r1, r2
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff fcab 	bl	800cb96 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d244:	3301      	adds	r3, #1
 800d246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d250:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d254:	429a      	cmp	r2, r3
 800d256:	d3e3      	bcc.n	800d220 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d258:	f107 0314 	add.w	r3, r7, #20
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fca7 	bl	800cbb0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d268:	0112      	lsls	r2, r2, #4
 800d26a:	441a      	add	r2, r3
 800d26c:	f107 0314 	add.w	r3, r7, #20
 800d270:	4619      	mov	r1, r3
 800d272:	68b8      	ldr	r0, [r7, #8]
 800d274:	f7ff fbd7 	bl	800ca26 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	e000      	b.n	800d27e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d27c:	23ff      	movs	r3, #255	; 0xff
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3728      	adds	r7, #40	; 0x28
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
	...

0800d288 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800d288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d28a:	b09d      	sub	sp, #116	; 0x74
 800d28c:	af10      	add	r7, sp, #64	; 0x40
 800d28e:	4603      	mov	r3, r0
 800d290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d294:	2306      	movs	r3, #6
 800d296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800d29a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d29e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 f9a7 	bl	800d5f8 <SecureElementGetKeyByID>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800d2b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f040 80b0 	bne.w	800d41a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800d2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d106      	bne.n	800d2d0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800d2c2:	4b58      	ldr	r3, [pc, #352]	; (800d424 <PrintKey+0x19c>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2002      	movs	r0, #2
 800d2ca:	f00f fae1 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d2ce:	e056      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800d2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d106      	bne.n	800d2e6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800d2d8:	4b53      	ldr	r3, [pc, #332]	; (800d428 <PrintKey+0x1a0>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2100      	movs	r1, #0
 800d2de:	2002      	movs	r0, #2
 800d2e0:	f00f fad6 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d2e4:	e04b      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800d2e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d106      	bne.n	800d2fc <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800d2ee:	4b4f      	ldr	r3, [pc, #316]	; (800d42c <PrintKey+0x1a4>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	2002      	movs	r0, #2
 800d2f6:	f00f facb 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d2fa:	e040      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800d2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d300:	2b02      	cmp	r3, #2
 800d302:	d106      	bne.n	800d312 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800d304:	4b4a      	ldr	r3, [pc, #296]	; (800d430 <PrintKey+0x1a8>)
 800d306:	2200      	movs	r2, #0
 800d308:	2100      	movs	r1, #0
 800d30a:	2002      	movs	r0, #2
 800d30c:	f00f fac0 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d310:	e035      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800d312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d316:	2b04      	cmp	r3, #4
 800d318:	d106      	bne.n	800d328 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800d31a:	4b46      	ldr	r3, [pc, #280]	; (800d434 <PrintKey+0x1ac>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	2100      	movs	r1, #0
 800d320:	2002      	movs	r0, #2
 800d322:	f00f fab5 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d326:	e02a      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800d328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d32c:	2b7f      	cmp	r3, #127	; 0x7f
 800d32e:	d106      	bne.n	800d33e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800d330:	4b41      	ldr	r3, [pc, #260]	; (800d438 <PrintKey+0x1b0>)
 800d332:	2200      	movs	r2, #0
 800d334:	2100      	movs	r1, #0
 800d336:	2002      	movs	r0, #2
 800d338:	f00f faaa 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d33c:	e01f      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800d33e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d342:	2b80      	cmp	r3, #128	; 0x80
 800d344:	d106      	bne.n	800d354 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800d346:	4b3d      	ldr	r3, [pc, #244]	; (800d43c <PrintKey+0x1b4>)
 800d348:	2200      	movs	r2, #0
 800d34a:	2100      	movs	r1, #0
 800d34c:	2002      	movs	r0, #2
 800d34e:	f00f fa9f 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d352:	e014      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800d354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d358:	2b81      	cmp	r3, #129	; 0x81
 800d35a:	d106      	bne.n	800d36a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800d35c:	4b38      	ldr	r3, [pc, #224]	; (800d440 <PrintKey+0x1b8>)
 800d35e:	2200      	movs	r2, #0
 800d360:	2100      	movs	r1, #0
 800d362:	2002      	movs	r0, #2
 800d364:	f00f fa94 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 800d368:	e009      	b.n	800d37e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800d36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d36e:	2b82      	cmp	r3, #130	; 0x82
 800d370:	d105      	bne.n	800d37e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800d372:	4b34      	ldr	r3, [pc, #208]	; (800d444 <PrintKey+0x1bc>)
 800d374:	2200      	movs	r2, #0
 800d376:	2100      	movs	r1, #0
 800d378:	2002      	movs	r0, #2
 800d37a:	f00f fa89 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	785b      	ldrb	r3, [r3, #1]
 800d382:	4618      	mov	r0, r3
 800d384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d386:	789b      	ldrb	r3, [r3, #2]
 800d388:	461c      	mov	r4, r3
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38c:	78db      	ldrb	r3, [r3, #3]
 800d38e:	461d      	mov	r5, r3
 800d390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d392:	791b      	ldrb	r3, [r3, #4]
 800d394:	461e      	mov	r6, r3
 800d396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d398:	795b      	ldrb	r3, [r3, #5]
 800d39a:	623b      	str	r3, [r7, #32]
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	799b      	ldrb	r3, [r3, #6]
 800d3a0:	61fb      	str	r3, [r7, #28]
 800d3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a4:	79db      	ldrb	r3, [r3, #7]
 800d3a6:	61bb      	str	r3, [r7, #24]
 800d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3aa:	7a1b      	ldrb	r3, [r3, #8]
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b0:	7a5b      	ldrb	r3, [r3, #9]
 800d3b2:	613b      	str	r3, [r7, #16]
 800d3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b6:	7a9b      	ldrb	r3, [r3, #10]
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3bc:	7adb      	ldrb	r3, [r3, #11]
 800d3be:	60bb      	str	r3, [r7, #8]
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	7b1b      	ldrb	r3, [r3, #12]
 800d3c4:	607b      	str	r3, [r7, #4]
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	7b5b      	ldrb	r3, [r3, #13]
 800d3ca:	603b      	str	r3, [r7, #0]
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	7b9b      	ldrb	r3, [r3, #14]
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d4:	7bdb      	ldrb	r3, [r3, #15]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	7c1b      	ldrb	r3, [r3, #16]
 800d3dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3de:	920e      	str	r2, [sp, #56]	; 0x38
 800d3e0:	910d      	str	r1, [sp, #52]	; 0x34
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	920c      	str	r2, [sp, #48]	; 0x30
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d3ea:	68ba      	ldr	r2, [r7, #8]
 800d3ec:	920a      	str	r2, [sp, #40]	; 0x28
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	9209      	str	r2, [sp, #36]	; 0x24
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	9208      	str	r2, [sp, #32]
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	9207      	str	r2, [sp, #28]
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	9206      	str	r2, [sp, #24]
 800d3fe:	69fa      	ldr	r2, [r7, #28]
 800d400:	9205      	str	r2, [sp, #20]
 800d402:	6a3b      	ldr	r3, [r7, #32]
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	9603      	str	r6, [sp, #12]
 800d408:	9502      	str	r5, [sp, #8]
 800d40a:	9401      	str	r4, [sp, #4]
 800d40c:	9000      	str	r0, [sp, #0]
 800d40e:	4b0e      	ldr	r3, [pc, #56]	; (800d448 <PrintKey+0x1c0>)
 800d410:	2200      	movs	r2, #0
 800d412:	2100      	movs	r1, #0
 800d414:	2002      	movs	r0, #2
 800d416:	f00f fa3b 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800d41a:	bf00      	nop
 800d41c:	3734      	adds	r7, #52	; 0x34
 800d41e:	46bd      	mov	sp, r7
 800d420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d422:	bf00      	nop
 800d424:	0801d058 	.word	0x0801d058
 800d428:	0801d070 	.word	0x0801d070
 800d42c:	0801d088 	.word	0x0801d088
 800d430:	0801d0a0 	.word	0x0801d0a0
 800d434:	0801d0b8 	.word	0x0801d0b8
 800d438:	0801d0d0 	.word	0x0801d0d0
 800d43c:	0801d0e8 	.word	0x0801d0e8
 800d440:	0801d100 	.word	0x0801d100
 800d444:	0801d118 	.word	0x0801d118
 800d448:	0801d130 	.word	0x0801d130

0800d44c <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	6039      	str	r1, [r7, #0]
 800d456:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d458:	2300      	movs	r3, #0
 800d45a:	73fb      	strb	r3, [r7, #15]
 800d45c:	e01a      	b.n	800d494 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d45e:	4b12      	ldr	r3, [pc, #72]	; (800d4a8 <GetKeyByID+0x5c>)
 800d460:	6819      	ldr	r1, [r3, #0]
 800d462:	7bfa      	ldrb	r2, [r7, #15]
 800d464:	4613      	mov	r3, r2
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	4413      	add	r3, r2
 800d46a:	440b      	add	r3, r1
 800d46c:	3310      	adds	r3, #16
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	79fa      	ldrb	r2, [r7, #7]
 800d472:	429a      	cmp	r2, r3
 800d474:	d10b      	bne.n	800d48e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d476:	4b0c      	ldr	r3, [pc, #48]	; (800d4a8 <GetKeyByID+0x5c>)
 800d478:	6819      	ldr	r1, [r3, #0]
 800d47a:	7bfa      	ldrb	r2, [r7, #15]
 800d47c:	4613      	mov	r3, r2
 800d47e:	011b      	lsls	r3, r3, #4
 800d480:	4413      	add	r3, r2
 800d482:	3310      	adds	r3, #16
 800d484:	18ca      	adds	r2, r1, r3
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d48a:	2300      	movs	r3, #0
 800d48c:	e006      	b.n	800d49c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
 800d490:	3301      	adds	r3, #1
 800d492:	73fb      	strb	r3, [r7, #15]
 800d494:	7bfb      	ldrb	r3, [r7, #15]
 800d496:	2b09      	cmp	r3, #9
 800d498:	d9e1      	bls.n	800d45e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d49a:	2303      	movs	r3, #3
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bc80      	pop	{r7}
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	20000ba4 	.word	0x20000ba4

0800d4ac <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800d4ac:	b590      	push	{r4, r7, lr}
 800d4ae:	b0d1      	sub	sp, #324	; 0x144
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800d4b6:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800d4ba:	6020      	str	r0, [r4, #0]
 800d4bc:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800d4c0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800d4c4:	6001      	str	r1, [r0, #0]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d4cc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d4d0:	801a      	strh	r2, [r3, #0]
 800d4d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d4d6:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800d4da:	460a      	mov	r2, r1
 800d4dc:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d4de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d4e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <ComputeCmac+0x48>
 800d4ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d101      	bne.n	800d4f8 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e05c      	b.n	800d5b2 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d4f8:	f107 0314 	add.w	r3, r7, #20
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe ff1b 	bl	800c338 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d502:	f107 0210 	add.w	r2, r7, #16
 800d506:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d50a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	4611      	mov	r1, r2
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff ff9a 	bl	800d44c <GetKeyByID>
 800d518:	4603      	mov	r3, r0
 800d51a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d51e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d522:	2b00      	cmp	r3, #0
 800d524:	d143      	bne.n	800d5ae <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d526:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d52a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	1c5a      	adds	r2, r3, #1
 800d532:	f107 0314 	add.w	r3, r7, #20
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fe ff16 	bl	800c36a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d53e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d542:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d009      	beq.n	800d560 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800d54c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d550:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d554:	f107 0014 	add.w	r0, r7, #20
 800d558:	2210      	movs	r2, #16
 800d55a:	6819      	ldr	r1, [r3, #0]
 800d55c:	f7fe ff14 	bl	800c388 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d560:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d564:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800d568:	881a      	ldrh	r2, [r3, #0]
 800d56a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d56e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d572:	f107 0014 	add.w	r0, r7, #20
 800d576:	6819      	ldr	r1, [r3, #0]
 800d578:	f7fe ff06 	bl	800c388 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d57c:	f107 0214 	add.w	r2, r7, #20
 800d580:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d584:	4611      	mov	r1, r2
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe ffc0 	bl	800c50c <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d58c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800d590:	061a      	lsls	r2, r3, #24
 800d592:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800d596:	041b      	lsls	r3, r3, #16
 800d598:	431a      	orrs	r2, r3
 800d59a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800d59e:	021b      	lsls	r3, r3, #8
 800d5a0:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800d5a2:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800d5a6:	431a      	orrs	r2, r3
 800d5a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d5ac:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d5ae:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd90      	pop	{r4, r7, pc}

0800d5bc <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d101      	bne.n	800d5d0 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	e00a      	b.n	800d5e6 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800d5d0:	4a07      	ldr	r2, [pc, #28]	; (800d5f0 <SecureElementInit+0x34>)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800d5d6:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <SecureElementInit+0x34>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	22c0      	movs	r2, #192	; 0xc0
 800d5dc:	4905      	ldr	r1, [pc, #20]	; (800d5f4 <SecureElementInit+0x38>)
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f00a fe01 	bl	80181e6 <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20000ba4 	.word	0x20000ba4
 800d5f4:	0801da6c 	.word	0x0801da6c

0800d5f8 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d604:	2300      	movs	r3, #0
 800d606:	73fb      	strb	r3, [r7, #15]
 800d608:	e01a      	b.n	800d640 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800d60a:	4b12      	ldr	r3, [pc, #72]	; (800d654 <SecureElementGetKeyByID+0x5c>)
 800d60c:	6819      	ldr	r1, [r3, #0]
 800d60e:	7bfa      	ldrb	r2, [r7, #15]
 800d610:	4613      	mov	r3, r2
 800d612:	011b      	lsls	r3, r3, #4
 800d614:	4413      	add	r3, r2
 800d616:	440b      	add	r3, r1
 800d618:	3310      	adds	r3, #16
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	79fa      	ldrb	r2, [r7, #7]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d10b      	bne.n	800d63a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800d622:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <SecureElementGetKeyByID+0x5c>)
 800d624:	6819      	ldr	r1, [r3, #0]
 800d626:	7bfa      	ldrb	r2, [r7, #15]
 800d628:	4613      	mov	r3, r2
 800d62a:	011b      	lsls	r3, r3, #4
 800d62c:	4413      	add	r3, r2
 800d62e:	3310      	adds	r3, #16
 800d630:	18ca      	adds	r2, r1, r3
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d636:	2300      	movs	r3, #0
 800d638:	e006      	b.n	800d648 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d63a:	7bfb      	ldrb	r3, [r7, #15]
 800d63c:	3301      	adds	r3, #1
 800d63e:	73fb      	strb	r3, [r7, #15]
 800d640:	7bfb      	ldrb	r3, [r7, #15]
 800d642:	2b09      	cmp	r3, #9
 800d644:	d9e1      	bls.n	800d60a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d646:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3714      	adds	r7, #20
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bc80      	pop	{r7}
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	20000ba4 	.word	0x20000ba4

0800d658 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d65a:	b08b      	sub	sp, #44	; 0x2c
 800d65c:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d65e:	4b3f      	ldr	r3, [pc, #252]	; (800d75c <SecureElementPrintKeys+0x104>)
 800d660:	2200      	movs	r2, #0
 800d662:	2100      	movs	r1, #0
 800d664:	2002      	movs	r0, #2
 800d666:	f00f f913 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800d66a:	2000      	movs	r0, #0
 800d66c:	f7ff fe0c 	bl	800d288 <PrintKey>
    PrintKey(NWK_KEY);
 800d670:	2001      	movs	r0, #1
 800d672:	f7ff fe09 	bl	800d288 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d676:	4b3a      	ldr	r3, [pc, #232]	; (800d760 <SecureElementPrintKeys+0x108>)
 800d678:	2200      	movs	r2, #0
 800d67a:	2100      	movs	r1, #0
 800d67c:	2002      	movs	r0, #2
 800d67e:	f00f f907 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800d682:	2003      	movs	r0, #3
 800d684:	f7ff fe00 	bl	800d288 <PrintKey>
    PrintKey(NWK_S_KEY);
 800d688:	2002      	movs	r0, #2
 800d68a:	f7ff fdfd 	bl	800d288 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800d68e:	4b35      	ldr	r3, [pc, #212]	; (800d764 <SecureElementPrintKeys+0x10c>)
 800d690:	2200      	movs	r2, #0
 800d692:	2100      	movs	r1, #0
 800d694:	2002      	movs	r0, #2
 800d696:	f00f f8fb 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d69a:	4b33      	ldr	r3, [pc, #204]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	4b31      	ldr	r3, [pc, #196]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	785b      	ldrb	r3, [r3, #1]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	4b2f      	ldr	r3, [pc, #188]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	789b      	ldrb	r3, [r3, #2]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	4b2d      	ldr	r3, [pc, #180]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	78db      	ldrb	r3, [r3, #3]
 800d6b8:	461c      	mov	r4, r3
 800d6ba:	4b2b      	ldr	r3, [pc, #172]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	791b      	ldrb	r3, [r3, #4]
 800d6c0:	461d      	mov	r5, r3
 800d6c2:	4b29      	ldr	r3, [pc, #164]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	795b      	ldrb	r3, [r3, #5]
 800d6c8:	461e      	mov	r6, r3
 800d6ca:	4b27      	ldr	r3, [pc, #156]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	799b      	ldrb	r3, [r3, #6]
 800d6d0:	607b      	str	r3, [r7, #4]
 800d6d2:	4b25      	ldr	r3, [pc, #148]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	79db      	ldrb	r3, [r3, #7]
 800d6d8:	9307      	str	r3, [sp, #28]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	9306      	str	r3, [sp, #24]
 800d6de:	9605      	str	r6, [sp, #20]
 800d6e0:	9504      	str	r5, [sp, #16]
 800d6e2:	9403      	str	r4, [sp, #12]
 800d6e4:	9002      	str	r0, [sp, #8]
 800d6e6:	9101      	str	r1, [sp, #4]
 800d6e8:	9200      	str	r2, [sp, #0]
 800d6ea:	4b20      	ldr	r3, [pc, #128]	; (800d76c <SecureElementPrintKeys+0x114>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	2002      	movs	r0, #2
 800d6f2:	f00f f8cd 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d6f6:	4b1c      	ldr	r3, [pc, #112]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	7a1b      	ldrb	r3, [r3, #8]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	4b1a      	ldr	r3, [pc, #104]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	7a5b      	ldrb	r3, [r3, #9]
 800d704:	4619      	mov	r1, r3
 800d706:	4b18      	ldr	r3, [pc, #96]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	7a9b      	ldrb	r3, [r3, #10]
 800d70c:	4618      	mov	r0, r3
 800d70e:	4b16      	ldr	r3, [pc, #88]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	7adb      	ldrb	r3, [r3, #11]
 800d714:	461c      	mov	r4, r3
 800d716:	4b14      	ldr	r3, [pc, #80]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	7b1b      	ldrb	r3, [r3, #12]
 800d71c:	461d      	mov	r5, r3
 800d71e:	4b12      	ldr	r3, [pc, #72]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	7b5b      	ldrb	r3, [r3, #13]
 800d724:	461e      	mov	r6, r3
 800d726:	4b10      	ldr	r3, [pc, #64]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	7b9b      	ldrb	r3, [r3, #14]
 800d72c:	607b      	str	r3, [r7, #4]
 800d72e:	4b0e      	ldr	r3, [pc, #56]	; (800d768 <SecureElementPrintKeys+0x110>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	7bdb      	ldrb	r3, [r3, #15]
 800d734:	9307      	str	r3, [sp, #28]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	9306      	str	r3, [sp, #24]
 800d73a:	9605      	str	r6, [sp, #20]
 800d73c:	9504      	str	r5, [sp, #16]
 800d73e:	9403      	str	r4, [sp, #12]
 800d740:	9002      	str	r0, [sp, #8]
 800d742:	9101      	str	r1, [sp, #4]
 800d744:	9200      	str	r2, [sp, #0]
 800d746:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <SecureElementPrintKeys+0x118>)
 800d748:	2200      	movs	r2, #0
 800d74a:	2100      	movs	r1, #0
 800d74c:	2002      	movs	r0, #2
 800d74e:	f00f f89f 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d75c:	0801d184 	.word	0x0801d184
 800d760:	0801d19c 	.word	0x0801d19c
 800d764:	0801d1b4 	.word	0x0801d1b4
 800d768:	20000ba4 	.word	0x20000ba4
 800d76c:	0801d1cc 	.word	0x0801d1cc
 800d770:	0801d20c 	.word	0x0801d20c

0800d774 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800d778:	2004      	movs	r0, #4
 800d77a:	f7ff fd85 	bl	800d288 <PrintKey>
    PrintKey(MC_KE_KEY);
 800d77e:	207f      	movs	r0, #127	; 0x7f
 800d780:	f7ff fd82 	bl	800d288 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800d784:	2002      	movs	r0, #2
 800d786:	f7ff fd7f 	bl	800d288 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800d78a:	2003      	movs	r0, #3
 800d78c:	f7ff fd7c 	bl	800d288 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	bd80      	pop	{r7, pc}
	...

0800d798 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b088      	sub	sp, #32
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	4603      	mov	r3, r0
 800d7a0:	6039      	str	r1, [r7, #0]
 800d7a2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d101      	bne.n	800d7ae <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d7aa:	2302      	movs	r3, #2
 800d7ac:	e04c      	b.n	800d848 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	77fb      	strb	r3, [r7, #31]
 800d7b2:	e045      	b.n	800d840 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d7b4:	4b26      	ldr	r3, [pc, #152]	; (800d850 <SecureElementSetKey+0xb8>)
 800d7b6:	6819      	ldr	r1, [r3, #0]
 800d7b8:	7ffa      	ldrb	r2, [r7, #31]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	011b      	lsls	r3, r3, #4
 800d7be:	4413      	add	r3, r2
 800d7c0:	440b      	add	r3, r1
 800d7c2:	3310      	adds	r3, #16
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	79fa      	ldrb	r2, [r7, #7]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d136      	bne.n	800d83a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800d7cc:	79fb      	ldrb	r3, [r7, #7]
 800d7ce:	2b80      	cmp	r3, #128	; 0x80
 800d7d0:	d123      	bne.n	800d81a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800d7d2:	2306      	movs	r3, #6
 800d7d4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	60fb      	str	r3, [r7, #12]
 800d7da:	f107 0310 	add.w	r3, r7, #16
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
 800d7e2:	605a      	str	r2, [r3, #4]
 800d7e4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d7e6:	f107 030c 	add.w	r3, r7, #12
 800d7ea:	227f      	movs	r2, #127	; 0x7f
 800d7ec:	2110      	movs	r1, #16
 800d7ee:	6838      	ldr	r0, [r7, #0]
 800d7f0:	f000 f87d 	bl	800d8ee <SecureElementAesEncrypt>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d7f8:	4b15      	ldr	r3, [pc, #84]	; (800d850 <SecureElementSetKey+0xb8>)
 800d7fa:	6819      	ldr	r1, [r3, #0]
 800d7fc:	7ffa      	ldrb	r2, [r7, #31]
 800d7fe:	4613      	mov	r3, r2
 800d800:	011b      	lsls	r3, r3, #4
 800d802:	4413      	add	r3, r2
 800d804:	3310      	adds	r3, #16
 800d806:	440b      	add	r3, r1
 800d808:	3301      	adds	r3, #1
 800d80a:	f107 010c 	add.w	r1, r7, #12
 800d80e:	2210      	movs	r2, #16
 800d810:	4618      	mov	r0, r3
 800d812:	f00a fce8 	bl	80181e6 <memcpy1>
                return retval;
 800d816:	7fbb      	ldrb	r3, [r7, #30]
 800d818:	e016      	b.n	800d848 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d81a:	4b0d      	ldr	r3, [pc, #52]	; (800d850 <SecureElementSetKey+0xb8>)
 800d81c:	6819      	ldr	r1, [r3, #0]
 800d81e:	7ffa      	ldrb	r2, [r7, #31]
 800d820:	4613      	mov	r3, r2
 800d822:	011b      	lsls	r3, r3, #4
 800d824:	4413      	add	r3, r2
 800d826:	3310      	adds	r3, #16
 800d828:	440b      	add	r3, r1
 800d82a:	3301      	adds	r3, #1
 800d82c:	2210      	movs	r2, #16
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	4618      	mov	r0, r3
 800d832:	f00a fcd8 	bl	80181e6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d836:	2300      	movs	r3, #0
 800d838:	e006      	b.n	800d848 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d83a:	7ffb      	ldrb	r3, [r7, #31]
 800d83c:	3301      	adds	r3, #1
 800d83e:	77fb      	strb	r3, [r7, #31]
 800d840:	7ffb      	ldrb	r3, [r7, #31]
 800d842:	2b09      	cmp	r3, #9
 800d844:	d9b6      	bls.n	800d7b4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d846:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3720      	adds	r7, #32
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20000ba4 	.word	0x20000ba4

0800d854 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b086      	sub	sp, #24
 800d858:	af02      	add	r7, sp, #8
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	4611      	mov	r1, r2
 800d860:	461a      	mov	r2, r3
 800d862:	460b      	mov	r3, r1
 800d864:	80fb      	strh	r3, [r7, #6]
 800d866:	4613      	mov	r3, r2
 800d868:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d86a:	797b      	ldrb	r3, [r7, #5]
 800d86c:	2b7e      	cmp	r3, #126	; 0x7e
 800d86e:	d901      	bls.n	800d874 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d870:	2303      	movs	r3, #3
 800d872:	e009      	b.n	800d888 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d874:	7979      	ldrb	r1, [r7, #5]
 800d876:	88fa      	ldrh	r2, [r7, #6]
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	460b      	mov	r3, r1
 800d87e:	68b9      	ldr	r1, [r7, #8]
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f7ff fe13 	bl	800d4ac <ComputeCmac>
 800d886:	4603      	mov	r3, r0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b088      	sub	sp, #32
 800d894:	af02      	add	r7, sp, #8
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	607a      	str	r2, [r7, #4]
 800d89a:	461a      	mov	r2, r3
 800d89c:	460b      	mov	r3, r1
 800d89e:	817b      	strh	r3, [r7, #10]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d101      	bne.n	800d8ae <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d8aa:	2302      	movs	r3, #2
 800d8ac:	e01b      	b.n	800d8e6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d8ae:	2306      	movs	r3, #6
 800d8b0:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d8b6:	7a79      	ldrb	r1, [r7, #9]
 800d8b8:	897a      	ldrh	r2, [r7, #10]
 800d8ba:	f107 0310 	add.w	r3, r7, #16
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	68f9      	ldr	r1, [r7, #12]
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	f7ff fdf1 	bl	800d4ac <ComputeCmac>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d8ce:	7dfb      	ldrb	r3, [r7, #23]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
 800d8d6:	e006      	b.n	800d8e6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d001      	beq.n	800d8e4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d8e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b0c2      	sub	sp, #264	; 0x108
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	60f8      	str	r0, [r7, #12]
 800d8f6:	4608      	mov	r0, r1
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d8fe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d902:	6013      	str	r3, [r2, #0]
 800d904:	4603      	mov	r3, r0
 800d906:	817b      	strh	r3, [r7, #10]
 800d908:	460b      	mov	r3, r1
 800d90a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d006      	beq.n	800d920 <SecureElementAesEncrypt+0x32>
 800d912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d920:	2302      	movs	r3, #2
 800d922:	e046      	b.n	800d9b2 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d924:	897b      	ldrh	r3, [r7, #10]
 800d926:	f003 030f 	and.w	r3, r3, #15
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d930:	2305      	movs	r3, #5
 800d932:	e03e      	b.n	800d9b2 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d934:	f107 0314 	add.w	r3, r7, #20
 800d938:	22f0      	movs	r2, #240	; 0xf0
 800d93a:	2100      	movs	r1, #0
 800d93c:	4618      	mov	r0, r3
 800d93e:	f00a fc8d 	bl	801825c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d942:	f107 0210 	add.w	r2, r7, #16
 800d946:	7a7b      	ldrb	r3, [r7, #9]
 800d948:	4611      	mov	r1, r2
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7ff fd7e 	bl	800d44c <GetKeyByID>
 800d950:	4603      	mov	r3, r0
 800d952:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d956:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d127      	bne.n	800d9ae <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	3301      	adds	r3, #1
 800d962:	f107 0214 	add.w	r2, r7, #20
 800d966:	2110      	movs	r1, #16
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff fb65 	bl	800d038 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d974:	e018      	b.n	800d9a8 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d976:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	18d0      	adds	r0, r2, r3
 800d97e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d982:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d986:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d98a:	6812      	ldr	r2, [r2, #0]
 800d98c:	4413      	add	r3, r2
 800d98e:	f107 0214 	add.w	r2, r7, #20
 800d992:	4619      	mov	r1, r3
 800d994:	f7ff fc2e 	bl	800d1f4 <lorawan_aes_encrypt>
            block = block + 16;
 800d998:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d99c:	3310      	adds	r3, #16
 800d99e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d9a2:	897b      	ldrh	r3, [r7, #10]
 800d9a4:	3b10      	subs	r3, #16
 800d9a6:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d9a8:	897b      	ldrh	r3, [r7, #10]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1e3      	bne.n	800d976 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d9ae:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	70fb      	strb	r3, [r7, #3]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	e02e      	b.n	800da34 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d9d6:	2306      	movs	r3, #6
 800d9d8:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d9da:	78bb      	ldrb	r3, [r7, #2]
 800d9dc:	2b7f      	cmp	r3, #127	; 0x7f
 800d9de:	d104      	bne.n	800d9ea <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d9e0:	78fb      	ldrb	r3, [r7, #3]
 800d9e2:	2b04      	cmp	r3, #4
 800d9e4:	d001      	beq.n	800d9ea <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e024      	b.n	800da34 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	f107 0310 	add.w	r3, r7, #16
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	605a      	str	r2, [r3, #4]
 800d9f8:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d9fa:	f107 030c 	add.w	r3, r7, #12
 800d9fe:	78fa      	ldrb	r2, [r7, #3]
 800da00:	2110      	movs	r1, #16
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff ff73 	bl	800d8ee <SecureElementAesEncrypt>
 800da08:	4603      	mov	r3, r0
 800da0a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800da0c:	7ffb      	ldrb	r3, [r7, #31]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d001      	beq.n	800da16 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800da12:	7ffb      	ldrb	r3, [r7, #31]
 800da14:	e00e      	b.n	800da34 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800da16:	f107 020c 	add.w	r2, r7, #12
 800da1a:	78bb      	ldrb	r3, [r7, #2]
 800da1c:	4611      	mov	r1, r2
 800da1e:	4618      	mov	r0, r3
 800da20:	f7ff feba 	bl	800d798 <SecureElementSetKey>
 800da24:	4603      	mov	r3, r0
 800da26:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800da28:	7ffb      	ldrb	r3, [r7, #31]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800da2e:	7ffb      	ldrb	r3, [r7, #31]
 800da30:	e000      	b.n	800da34 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800da32:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800da34:	4618      	mov	r0, r3
 800da36:	3720      	adds	r7, #32
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af00      	add	r7, sp, #0
 800da42:	60b9      	str	r1, [r7, #8]
 800da44:	607b      	str	r3, [r7, #4]
 800da46:	4603      	mov	r3, r0
 800da48:	73fb      	strb	r3, [r7, #15]
 800da4a:	4613      	mov	r3, r2
 800da4c:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d005      	beq.n	800da60 <SecureElementProcessJoinAccept+0x24>
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <SecureElementProcessJoinAccept+0x24>
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800da60:	2302      	movs	r3, #2
 800da62:	e064      	b.n	800db2e <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800da64:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da68:	2b21      	cmp	r3, #33	; 0x21
 800da6a:	d901      	bls.n	800da70 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800da6c:	2305      	movs	r3, #5
 800da6e:	e05e      	b.n	800db2e <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800da70:	2301      	movs	r3, #1
 800da72:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800da74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da78:	b29b      	uxth	r3, r3
 800da7a:	461a      	mov	r2, r3
 800da7c:	6879      	ldr	r1, [r7, #4]
 800da7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da80:	f00a fbb1 	bl	80181e6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	1c58      	adds	r0, r3, #1
 800da88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	3b01      	subs	r3, #1
 800da90:	b299      	uxth	r1, r3
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	3301      	adds	r3, #1
 800da96:	7dfa      	ldrb	r2, [r7, #23]
 800da98:	f7ff ff29 	bl	800d8ee <SecureElementAesEncrypt>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800daa2:	2307      	movs	r3, #7
 800daa4:	e043      	b.n	800db2e <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	330b      	adds	r3, #11
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	09db      	lsrs	r3, r3, #7
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800dab4:	2300      	movs	r3, #0
 800dab6:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800dab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dabc:	3b04      	subs	r3, #4
 800dabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dac0:	4413      	add	r3, r2
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800dac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800daca:	3b03      	subs	r3, #3
 800dacc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dace:	4413      	add	r3, r2
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	021b      	lsls	r3, r3, #8
 800dad4:	693a      	ldr	r2, [r7, #16]
 800dad6:	4313      	orrs	r3, r2
 800dad8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800dada:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dade:	3b02      	subs	r3, #2
 800dae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae2:	4413      	add	r3, r2
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	041b      	lsls	r3, r3, #16
 800dae8:	693a      	ldr	r2, [r7, #16]
 800daea:	4313      	orrs	r3, r2
 800daec:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800daee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800daf2:	3b01      	subs	r3, #1
 800daf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf6:	4413      	add	r3, r2
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	061b      	lsls	r3, r3, #24
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	4313      	orrs	r3, r2
 800db00:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800db02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10e      	bne.n	800db28 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800db0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	3b04      	subs	r3, #4
 800db12:	b299      	uxth	r1, r3
 800db14:	2301      	movs	r3, #1
 800db16:	693a      	ldr	r2, [r7, #16]
 800db18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db1a:	f7ff feb9 	bl	800d890 <SecureElementVerifyAesCmac>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d003      	beq.n	800db2c <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800db24:	2301      	movs	r3, #1
 800db26:	e002      	b.n	800db2e <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800db28:	2304      	movs	r3, #4
 800db2a:	e000      	b.n	800db2e <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
	...

0800db38 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db46:	2302      	movs	r3, #2
 800db48:	e006      	b.n	800db58 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800db4a:	4b05      	ldr	r3, [pc, #20]	; (800db60 <SecureElementRandomNumber+0x28>)
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	4798      	blx	r3
 800db50:	4602      	mov	r2, r0
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	0801d920 	.word	0x0801d920

0800db64 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db72:	2302      	movs	r3, #2
 800db74:	e007      	b.n	800db86 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800db76:	4b06      	ldr	r3, [pc, #24]	; (800db90 <SecureElementSetDevEui+0x2c>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2208      	movs	r2, #8
 800db7c:	6879      	ldr	r1, [r7, #4]
 800db7e:	4618      	mov	r0, r3
 800db80:	f00a fb31 	bl	80181e6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20000ba4 	.word	0x20000ba4

0800db94 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800db94:	b480      	push	{r7}
 800db96:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800db98:	4b02      	ldr	r3, [pc, #8]	; (800dba4 <SecureElementGetDevEui+0x10>)
 800db9a:	681b      	ldr	r3, [r3, #0]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bc80      	pop	{r7}
 800dba2:	4770      	bx	lr
 800dba4:	20000ba4 	.word	0x20000ba4

0800dba8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	e008      	b.n	800dbcc <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800dbba:	4b06      	ldr	r3, [pc, #24]	; (800dbd4 <SecureElementSetJoinEui+0x2c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	3308      	adds	r3, #8
 800dbc0:	2208      	movs	r2, #8
 800dbc2:	6879      	ldr	r1, [r7, #4]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f00a fb0e 	bl	80181e6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800dbca:	2300      	movs	r3, #0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	20000ba4 	.word	0x20000ba4

0800dbd8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800dbdc:	4b03      	ldr	r3, [pc, #12]	; (800dbec <SecureElementGetJoinEui+0x14>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3308      	adds	r3, #8
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bc80      	pop	{r7}
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	20000ba4 	.word	0x20000ba4

0800dbf0 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800dbfa:	4a1a      	ldr	r2, [pc, #104]	; (800dc64 <LmHandlerInit+0x74>)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dc00:	4b19      	ldr	r3, [pc, #100]	; (800dc68 <LmHandlerInit+0x78>)
 800dc02:	4a1a      	ldr	r2, [pc, #104]	; (800dc6c <LmHandlerInit+0x7c>)
 800dc04:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dc06:	4b18      	ldr	r3, [pc, #96]	; (800dc68 <LmHandlerInit+0x78>)
 800dc08:	4a19      	ldr	r2, [pc, #100]	; (800dc70 <LmHandlerInit+0x80>)
 800dc0a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dc0c:	4b16      	ldr	r3, [pc, #88]	; (800dc68 <LmHandlerInit+0x78>)
 800dc0e:	4a19      	ldr	r2, [pc, #100]	; (800dc74 <LmHandlerInit+0x84>)
 800dc10:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dc12:	4b15      	ldr	r3, [pc, #84]	; (800dc68 <LmHandlerInit+0x78>)
 800dc14:	4a18      	ldr	r2, [pc, #96]	; (800dc78 <LmHandlerInit+0x88>)
 800dc16:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800dc18:	4b12      	ldr	r3, [pc, #72]	; (800dc64 <LmHandlerInit+0x74>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a17      	ldr	r2, [pc, #92]	; (800dc7c <LmHandlerInit+0x8c>)
 800dc20:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800dc22:	4b10      	ldr	r3, [pc, #64]	; (800dc64 <LmHandlerInit+0x74>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4a14      	ldr	r2, [pc, #80]	; (800dc7c <LmHandlerInit+0x8c>)
 800dc2a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800dc2c:	4b0d      	ldr	r3, [pc, #52]	; (800dc64 <LmHandlerInit+0x74>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	4a12      	ldr	r2, [pc, #72]	; (800dc7c <LmHandlerInit+0x8c>)
 800dc34:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800dc36:	4b11      	ldr	r3, [pc, #68]	; (800dc7c <LmHandlerInit+0x8c>)
 800dc38:	4a11      	ldr	r2, [pc, #68]	; (800dc80 <LmHandlerInit+0x90>)
 800dc3a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800dc3c:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <LmHandlerInit+0x74>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	4a0e      	ldr	r2, [pc, #56]	; (800dc7c <LmHandlerInit+0x8c>)
 800dc44:	6113      	str	r3, [r2, #16]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800dc46:	490f      	ldr	r1, [pc, #60]	; (800dc84 <LmHandlerInit+0x94>)
 800dc48:	2000      	movs	r0, #0
 800dc4a:	f000 fd8f 	bl	800e76c <LmHandlerPackageRegister>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <LmHandlerInit+0x6a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc54:	f04f 33ff 	mov.w	r3, #4294967295
 800dc58:	e000      	b.n	800dc5c <LmHandlerInit+0x6c>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	20000bd0 	.word	0x20000bd0
 800dc68:	20000bd4 	.word	0x20000bd4
 800dc6c:	0800e439 	.word	0x0800e439
 800dc70:	0800e4a1 	.word	0x0800e4a1
 800dc74:	0800e57d 	.word	0x0800e57d
 800dc78:	0800e699 	.word	0x0800e699
 800dc7c:	20000be4 	.word	0x20000be4
 800dc80:	0800eb09 	.word	0x0800eb09
 800dc84:	20000098 	.word	0x20000098

0800dc88 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b094      	sub	sp, #80	; 0x50
 800dc8c:	af04      	add	r7, sp, #16
 800dc8e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800dc90:	2214      	movs	r2, #20
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	488f      	ldr	r0, [pc, #572]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800dc96:	f00d fdab 	bl	801b7f0 <UTIL_MEM_cpy_8>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800dc9a:	f7fe fb0b 	bl	800c2b4 <LoraInfo_GetPtr>
 800dc9e:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800dca0:	4b8c      	ldr	r3, [pc, #560]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	461a      	mov	r2, r3
 800dca6:	2301      	movs	r3, #1
 800dca8:	4093      	lsls	r3, r2
 800dcaa:	461a      	mov	r2, r3
 800dcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d106      	bne.n	800dcc4 <LmHandlerConfigure+0x3c>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800dcb6:	4b88      	ldr	r3, [pc, #544]	; (800ded8 <LmHandlerConfigure+0x250>)
 800dcb8:	2201      	movs	r2, #1
 800dcba:	2100      	movs	r1, #0
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	f00e fde7 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800dcc2:	e7fe      	b.n	800dcc2 <LmHandlerConfigure+0x3a>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800dcc4:	4b83      	ldr	r3, [pc, #524]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4984      	ldr	r1, [pc, #528]	; (800dedc <LmHandlerConfigure+0x254>)
 800dccc:	4884      	ldr	r0, [pc, #528]	; (800dee0 <LmHandlerConfigure+0x258>)
 800dcce:	f004 fc01 	bl	80124d4 <LoRaMacInitialization>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800dcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcdc:	e0f5      	b.n	800deca <LmHandlerConfigure+0x242>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800dcde:	2326      	movs	r3, #38	; 0x26
 800dce0:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dce2:	f107 0318 	add.w	r3, r7, #24
 800dce6:	4618      	mov	r0, r3
 800dce8:	f005 f918 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d103      	bne.n	800dcfa <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800dcf2:	4b7c      	ldr	r3, [pc, #496]	; (800dee4 <LmHandlerConfigure+0x25c>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	701a      	strb	r2, [r3, #0]
 800dcf8:	e02a      	b.n	800dd50 <LmHandlerConfigure+0xc8>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800dcfa:	2327      	movs	r3, #39	; 0x27
 800dcfc:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800dcfe:	4b7a      	ldr	r3, [pc, #488]	; (800dee8 <LmHandlerConfigure+0x260>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00c      	beq.n	800dd22 <LmHandlerConfigure+0x9a>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dd08:	f107 0318 	add.w	r3, r7, #24
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f004 ff7f 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800dd12:	4b75      	ldr	r3, [pc, #468]	; (800dee8 <LmHandlerConfigure+0x260>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	69fa      	ldr	r2, [r7, #28]
 800dd1a:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800dd1e:	4610      	mov	r0, r2
 800dd20:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800dd22:	2326      	movs	r3, #38	; 0x26
 800dd24:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dd26:	f107 0318 	add.w	r3, r7, #24
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f005 f8f6 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d10c      	bne.n	800dd50 <LmHandlerConfigure+0xc8>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dd36:	2301      	movs	r3, #1
 800dd38:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dd3a:	f107 0318 	add.w	r3, r7, #24
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f004 ff66 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800dd44:	7f3b      	ldrb	r3, [r7, #28]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <LmHandlerConfigure+0xc8>
            {
                CtxRestoreDone = true;
 800dd4a:	4b66      	ldr	r3, [pc, #408]	; (800dee4 <LmHandlerConfigure+0x25c>)
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800dd50:	4b64      	ldr	r3, [pc, #400]	; (800dee4 <LmHandlerConfigure+0x25c>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d02a      	beq.n	800ddae <LmHandlerConfigure+0x126>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800dd58:	4b63      	ldr	r3, [pc, #396]	; (800dee8 <LmHandlerConfigure+0x260>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	69db      	ldr	r3, [r3, #28]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d004      	beq.n	800dd6c <LmHandlerConfigure+0xe4>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800dd62:	4b61      	ldr	r3, [pc, #388]	; (800dee8 <LmHandlerConfigure+0x260>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	69db      	ldr	r3, [r3, #28]
 800dd68:	2000      	movs	r0, #0
 800dd6a:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800dd6c:	2306      	movs	r3, #6
 800dd6e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dd70:	f107 0318 	add.w	r3, r7, #24
 800dd74:	4618      	mov	r0, r3
 800dd76:	f004 ff4b 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	4a5b      	ldr	r2, [pc, #364]	; (800deec <LmHandlerConfigure+0x264>)
 800dd7e:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800dd80:	2326      	movs	r3, #38	; 0x26
 800dd82:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dd84:	f107 0318 	add.w	r3, r7, #24
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f004 ff41 	bl	8012c10 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dd94:	4b4f      	ldr	r3, [pc, #316]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800dd96:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800dd9e:	4b4d      	ldr	r3, [pc, #308]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800dda0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800dda8:	4b4a      	ldr	r3, [pc, #296]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800ddaa:	709a      	strb	r2, [r3, #2]
 800ddac:	e019      	b.n	800dde2 <LmHandlerConfigure+0x15a>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800ddae:	2305      	movs	r3, #5
 800ddb0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ddb6:	f107 0318 	add.w	r3, r7, #24
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f005 f8ae 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800ddc0:	4b49      	ldr	r3, [pc, #292]	; (800dee8 <LmHandlerConfigure+0x260>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	4798      	blx	r3
 800ddc8:	4603      	mov	r3, r0
 800ddca:	4a48      	ldr	r2, [pc, #288]	; (800deec <LmHandlerConfigure+0x264>)
 800ddcc:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800ddce:	2306      	movs	r3, #6
 800ddd0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800ddd2:	4b46      	ldr	r3, [pc, #280]	; (800deec <LmHandlerConfigure+0x264>)
 800ddd4:	695b      	ldr	r3, [r3, #20]
 800ddd6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ddd8:	f107 0318 	add.w	r3, r7, #24
 800dddc:	4618      	mov	r0, r3
 800ddde:	f005 f89d 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800dde2:	2302      	movs	r3, #2
 800dde4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dde6:	f107 0318 	add.w	r3, r7, #24
 800ddea:	4618      	mov	r0, r3
 800ddec:	f004 ff10 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	2208      	movs	r2, #8
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	483d      	ldr	r0, [pc, #244]	; (800deec <LmHandlerConfigure+0x264>)
 800ddf8:	f00a f9f5 	bl	80181e6 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800de00:	f107 0318 	add.w	r3, r7, #24
 800de04:	4618      	mov	r0, r3
 800de06:	f004 ff03 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	2208      	movs	r2, #8
 800de0e:	4619      	mov	r1, r3
 800de10:	4837      	ldr	r0, [pc, #220]	; (800def0 <LmHandlerConfigure+0x268>)
 800de12:	f00a f9e8 	bl	80181e6 <memcpy1>

    SecureElementPrintKeys();
 800de16:	f7ff fc1f 	bl	800d658 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800de1a:	4b36      	ldr	r3, [pc, #216]	; (800def4 <LmHandlerConfigure+0x26c>)
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	461a      	mov	r2, r3
 800de20:	4b35      	ldr	r3, [pc, #212]	; (800def8 <LmHandlerConfigure+0x270>)
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	4619      	mov	r1, r3
 800de26:	4b35      	ldr	r3, [pc, #212]	; (800defc <LmHandlerConfigure+0x274>)
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	4b34      	ldr	r3, [pc, #208]	; (800df00 <LmHandlerConfigure+0x278>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	9303      	str	r3, [sp, #12]
 800de32:	9002      	str	r0, [sp, #8]
 800de34:	9101      	str	r1, [sp, #4]
 800de36:	9200      	str	r2, [sp, #0]
 800de38:	4b32      	ldr	r3, [pc, #200]	; (800df04 <LmHandlerConfigure+0x27c>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	2100      	movs	r1, #0
 800de3e:	2002      	movs	r0, #2
 800de40:	f00e fd26 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800de44:	230f      	movs	r3, #15
 800de46:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800de48:	2301      	movs	r3, #1
 800de4a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800de4c:	f107 0318 	add.w	r3, r7, #24
 800de50:	4618      	mov	r0, r3
 800de52:	f005 f863 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800de56:	2310      	movs	r3, #16
 800de58:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800de5a:	2300      	movs	r3, #0
 800de5c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800de5e:	f107 0318 	add.w	r3, r7, #24
 800de62:	4618      	mov	r0, r3
 800de64:	f005 f85a 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800de68:	2304      	movs	r3, #4
 800de6a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800de6c:	4b19      	ldr	r3, [pc, #100]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800de6e:	789b      	ldrb	r3, [r3, #2]
 800de70:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800de72:	f107 0318 	add.w	r3, r7, #24
 800de76:	4618      	mov	r0, r3
 800de78:	f005 f850 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800de7c:	2337      	movs	r3, #55	; 0x37
 800de7e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800de80:	4b14      	ldr	r3, [pc, #80]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800de82:	691b      	ldr	r3, [r3, #16]
 800de84:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800de86:	f107 0318 	add.w	r3, r7, #24
 800de8a:	4618      	mov	r0, r3
 800de8c:	f005 f846 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800de90:	230f      	movs	r3, #15
 800de92:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800de94:	4b0f      	ldr	r3, [pc, #60]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	f107 0210 	add.w	r2, r7, #16
 800de9c:	4611      	mov	r1, r2
 800de9e:	4618      	mov	r0, r3
 800dea0:	f007 fe8e 	bl	8015bc0 <RegionGetPhyParam>
 800dea4:	4603      	mov	r3, r0
 800dea6:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	bf14      	ite	ne
 800deae:	2301      	movne	r3, #1
 800deb0:	2300      	moveq	r3, #0
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	4b07      	ldr	r3, [pc, #28]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800deb6:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800deb8:	2014      	movs	r0, #20
 800deba:	f000 faa5 	bl	800e408 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800debe:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <LmHandlerConfigure+0x24c>)
 800dec0:	799b      	ldrb	r3, [r3, #6]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f005 fdba 	bl	8013a3c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3740      	adds	r7, #64	; 0x40
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20000bbc 	.word	0x20000bbc
 800ded8:	0801d24c 	.word	0x0801d24c
 800dedc:	20000be4 	.word	0x20000be4
 800dee0:	20000bd4 	.word	0x20000bd4
 800dee4:	20000cee 	.word	0x20000cee
 800dee8:	20000bd0 	.word	0x20000bd0
 800deec:	20000080 	.word	0x20000080
 800def0:	20000088 	.word	0x20000088
 800def4:	20000097 	.word	0x20000097
 800def8:	20000096 	.word	0x20000096
 800defc:	20000095 	.word	0x20000095
 800df00:	20000094 	.word	0x20000094
 800df04:	0801d298 	.word	0x0801d298

0800df08 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800df0c:	f002 fab4 	bl	8010478 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800df10:	f000 fd30 	bl	800e974 <LmHandlerPackagesProcess>
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800df14:	bf00      	nop
 800df16:	bd80      	pop	{r7, pc}

0800df18 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800df18:	b480      	push	{r7}
 800df1a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800df1c:	4b02      	ldr	r3, [pc, #8]	; (800df28 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800df1e:	681b      	ldr	r3, [r3, #0]
}
 800df20:	4618      	mov	r0, r3
 800df22:	46bd      	mov	sp, r7
 800df24:	bc80      	pop	{r7}
 800df26:	4770      	bx	lr
 800df28:	20000bf8 	.word	0x20000bf8

0800df2c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b090      	sub	sp, #64	; 0x40
 800df30:	af00      	add	r7, sp, #0
 800df32:	4603      	mov	r3, r0
 800df34:	460a      	mov	r2, r1
 800df36:	71fb      	strb	r3, [r7, #7]
 800df38:	4613      	mov	r3, r2
 800df3a:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800df3c:	2301      	movs	r3, #1
 800df3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800df42:	4b35      	ldr	r3, [pc, #212]	; (800e018 <LmHandlerJoin+0xec>)
 800df44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800df4e:	79fb      	ldrb	r3, [r7, #7]
 800df50:	2b02      	cmp	r3, #2
 800df52:	d110      	bne.n	800df76 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800df54:	2302      	movs	r3, #2
 800df56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800df5a:	4b30      	ldr	r3, [pc, #192]	; (800e01c <LmHandlerJoin+0xf0>)
 800df5c:	2202      	movs	r2, #2
 800df5e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800df60:	4a2e      	ldr	r2, [pc, #184]	; (800e01c <LmHandlerJoin+0xf0>)
 800df62:	79bb      	ldrb	r3, [r7, #6]
 800df64:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800df66:	f004 fd69 	bl	8012a3c <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800df6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df6e:	4618      	mov	r0, r3
 800df70:	f005 fb2e 	bl	80135d0 <LoRaMacMlmeRequest>
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800df74:	e04b      	b.n	800e00e <LmHandlerJoin+0xe2>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800df76:	2301      	movs	r3, #1
 800df78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800df7c:	4b27      	ldr	r3, [pc, #156]	; (800e01c <LmHandlerJoin+0xf0>)
 800df7e:	2201      	movs	r2, #1
 800df80:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800df82:	4b25      	ldr	r3, [pc, #148]	; (800e018 <LmHandlerJoin+0xec>)
 800df84:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800df88:	4b24      	ldr	r3, [pc, #144]	; (800e01c <LmHandlerJoin+0xf0>)
 800df8a:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800df8c:	4b23      	ldr	r3, [pc, #140]	; (800e01c <LmHandlerJoin+0xf0>)
 800df8e:	2200      	movs	r2, #0
 800df90:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800df92:	4a22      	ldr	r2, [pc, #136]	; (800e01c <LmHandlerJoin+0xf0>)
 800df94:	79bb      	ldrb	r3, [r7, #6]
 800df96:	71d3      	strb	r3, [r2, #7]
        if (CtxRestoreDone == false)
 800df98:	4b21      	ldr	r3, [pc, #132]	; (800e020 <LmHandlerJoin+0xf4>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f083 0301 	eor.w	r3, r3, #1
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d01e      	beq.n	800dfe4 <LmHandlerJoin+0xb8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800dfa6:	231e      	movs	r3, #30
 800dfa8:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800dfaa:	4b1b      	ldr	r3, [pc, #108]	; (800e018 <LmHandlerJoin+0xec>)
 800dfac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dfb0:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dfb2:	f107 0308 	add.w	r3, r7, #8
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f004 ffb0 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800dfbc:	231f      	movs	r3, #31
 800dfbe:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800dfc0:	4b15      	ldr	r3, [pc, #84]	; (800e018 <LmHandlerJoin+0xec>)
 800dfc2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dfc6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dfc8:	f107 0308 	add.w	r3, r7, #8
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f004 ffa5 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800dfd2:	2328      	movs	r3, #40	; 0x28
 800dfd4:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800dfd6:	4b13      	ldr	r3, [pc, #76]	; (800e024 <LmHandlerJoin+0xf8>)
 800dfd8:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800dfda:	f107 0308 	add.w	r3, r7, #8
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f004 ff9c 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800dfe4:	f004 fd2a 	bl	8012a3c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800dfec:	2301      	movs	r3, #1
 800dfee:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dff0:	f107 0308 	add.w	r3, r7, #8
 800dff4:	4618      	mov	r0, r3
 800dff6:	f004 ff91 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800dffa:	4b0b      	ldr	r3, [pc, #44]	; (800e028 <LmHandlerJoin+0xfc>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e000:	4806      	ldr	r0, [pc, #24]	; (800e01c <LmHandlerJoin+0xf0>)
 800e002:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e004:	4b04      	ldr	r3, [pc, #16]	; (800e018 <LmHandlerJoin+0xec>)
 800e006:	785b      	ldrb	r3, [r3, #1]
 800e008:	4618      	mov	r0, r3
 800e00a:	f000 f92b 	bl	800e264 <LmHandlerRequestClass>
}
 800e00e:	bf00      	nop
 800e010:	3740      	adds	r7, #64	; 0x40
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	20000bbc 	.word	0x20000bbc
 800e01c:	200000a4 	.word	0x200000a4
 800e020:	20000cee 	.word	0x20000cee
 800e024:	01000300 	.word	0x01000300
 800e028:	20000bd0 	.word	0x20000bd0

0800e02c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	; 0x28
 800e030:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e032:	2301      	movs	r3, #1
 800e034:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e036:	463b      	mov	r3, r7
 800e038:	4618      	mov	r0, r3
 800e03a:	f004 fde9 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
 800e03e:	4603      	mov	r3, r0
 800e040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800e044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d106      	bne.n	800e05a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e04c:	793b      	ldrb	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e052:	2300      	movs	r3, #0
 800e054:	e002      	b.n	800e05c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e056:	2301      	movs	r3, #1
 800e058:	e000      	b.n	800e05c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e05a:	2300      	movs	r3, #0
    }
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3728      	adds	r7, #40	; 0x28
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08a      	sub	sp, #40	; 0x28
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
 800e070:	4613      	mov	r3, r2
 800e072:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e074:	23ff      	movs	r3, #255	; 0xff
 800e076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800e07a:	f001 ff8b 	bl	800ff94 <LoRaMacIsBusy>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e084:	f06f 0301 	mvn.w	r3, #1
 800e088:	e0b6      	b.n	800e1f8 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e08a:	f7ff ffcf 	bl	800e02c <LmHandlerJoinStatus>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b01      	cmp	r3, #1
 800e092:	d00a      	beq.n	800e0aa <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e094:	4b5a      	ldr	r3, [pc, #360]	; (800e200 <LmHandlerSend+0x19c>)
 800e096:	799b      	ldrb	r3, [r3, #6]
 800e098:	4a59      	ldr	r2, [pc, #356]	; (800e200 <LmHandlerSend+0x19c>)
 800e09a:	79d2      	ldrb	r2, [r2, #7]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7ff ff44 	bl	800df2c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e0a4:	f06f 0302 	mvn.w	r3, #2
 800e0a8:	e0a6      	b.n	800e1f8 <LmHandlerSend+0x194>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800e0aa:	4b56      	ldr	r3, [pc, #344]	; (800e204 <LmHandlerSend+0x1a0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	4798      	blx	r3
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00d      	beq.n	800e0d4 <LmHandlerSend+0x70>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	781a      	ldrb	r2, [r3, #0]
 800e0bc:	4b51      	ldr	r3, [pc, #324]	; (800e204 <LmHandlerSend+0x1a0>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d006      	beq.n	800e0d4 <LmHandlerSend+0x70>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d002      	beq.n	800e0d4 <LmHandlerSend+0x70>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e0ce:	f06f 0303 	mvn.w	r3, #3
 800e0d2:	e091      	b.n	800e1f8 <LmHandlerSend+0x194>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e0d4:	4a4c      	ldr	r2, [pc, #304]	; (800e208 <LmHandlerSend+0x1a4>)
 800e0d6:	78fb      	ldrb	r3, [r7, #3]
 800e0d8:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	bf14      	ite	ne
 800e0e0:	2301      	movne	r3, #1
 800e0e2:	2300      	moveq	r3, #0
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e0e8:	4b48      	ldr	r3, [pc, #288]	; (800e20c <LmHandlerSend+0x1a8>)
 800e0ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e0ee:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	785b      	ldrb	r3, [r3, #1]
 800e0f4:	f107 020c 	add.w	r2, r7, #12
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f004 fd00 	bl	8012b00 <LoRaMacQueryTxPossible>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d009      	beq.n	800e11a <LmHandlerSend+0xb6>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e106:	2300      	movs	r3, #0
 800e108:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e10a:	2300      	movs	r3, #0
 800e10c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e10e:	2300      	movs	r3, #0
 800e110:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e112:	23f9      	movs	r3, #249	; 0xf9
 800e114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e118:	e009      	b.n	800e12e <LmHandlerSend+0xca>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	785b      	ldrb	r3, [r3, #1]
 800e124:	b29b      	uxth	r3, r3
 800e126:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e12e:	4b36      	ldr	r3, [pc, #216]	; (800e208 <LmHandlerSend+0x1a4>)
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	3310      	adds	r3, #16
 800e134:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e138:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e13c:	4b33      	ldr	r3, [pc, #204]	; (800e20c <LmHandlerSend+0x1a8>)
 800e13e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e142:	4b31      	ldr	r3, [pc, #196]	; (800e208 <LmHandlerSend+0x1a4>)
 800e144:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e146:	78ba      	ldrb	r2, [r7, #2]
 800e148:	f107 0310 	add.w	r3, r7, #16
 800e14c:	4611      	mov	r1, r2
 800e14e:	4618      	mov	r0, r3
 800e150:	f005 fb7e 	bl	8013850 <LoRaMacMcpsRequest>
 800e154:	4603      	mov	r3, r0
 800e156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e15a:	6a3b      	ldr	r3, [r7, #32]
 800e15c:	4a2c      	ldr	r2, [pc, #176]	; (800e210 <LmHandlerSend+0x1ac>)
 800e15e:	6013      	str	r3, [r2, #0]

    switch (status)
 800e160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e164:	2b11      	cmp	r3, #17
 800e166:	d840      	bhi.n	800e1ea <LmHandlerSend+0x186>
 800e168:	a201      	add	r2, pc, #4	; (adr r2, 800e170 <LmHandlerSend+0x10c>)
 800e16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e16e:	bf00      	nop
 800e170:	0800e1b9 	.word	0x0800e1b9
 800e174:	0800e1cb 	.word	0x0800e1cb
 800e178:	0800e1eb 	.word	0x0800e1eb
 800e17c:	0800e1eb 	.word	0x0800e1eb
 800e180:	0800e1eb 	.word	0x0800e1eb
 800e184:	0800e1eb 	.word	0x0800e1eb
 800e188:	0800e1eb 	.word	0x0800e1eb
 800e18c:	0800e1d3 	.word	0x0800e1d3
 800e190:	0800e1eb 	.word	0x0800e1eb
 800e194:	0800e1eb 	.word	0x0800e1eb
 800e198:	0800e1eb 	.word	0x0800e1eb
 800e19c:	0800e1e3 	.word	0x0800e1e3
 800e1a0:	0800e1eb 	.word	0x0800e1eb
 800e1a4:	0800e1eb 	.word	0x0800e1eb
 800e1a8:	0800e1cb 	.word	0x0800e1cb
 800e1ac:	0800e1cb 	.word	0x0800e1cb
 800e1b0:	0800e1cb 	.word	0x0800e1cb
 800e1b4:	0800e1db 	.word	0x0800e1db
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800e1b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1bc:	f113 0f07 	cmn.w	r3, #7
 800e1c0:	d017      	beq.n	800e1f2 <LmHandlerSend+0x18e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800e1c8:	e013      	b.n	800e1f2 <LmHandlerSend+0x18e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e1ca:	23fe      	movs	r3, #254	; 0xfe
 800e1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e1d0:	e010      	b.n	800e1f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e1d2:	23fd      	movs	r3, #253	; 0xfd
 800e1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e1d8:	e00c      	b.n	800e1f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e1da:	23fb      	movs	r3, #251	; 0xfb
 800e1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e1e0:	e008      	b.n	800e1f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e1e2:	23fa      	movs	r3, #250	; 0xfa
 800e1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e1e8:	e004      	b.n	800e1f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e1ea:	23ff      	movs	r3, #255	; 0xff
 800e1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e1f0:	e000      	b.n	800e1f4 <LmHandlerSend+0x190>
            break;
 800e1f2:	bf00      	nop
    }

    return lmhStatus;
 800e1f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3728      	adds	r7, #40	; 0x28
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	200000a4 	.word	0x200000a4
 800e204:	20000ba8 	.word	0x20000ba8
 800e208:	200000ac 	.word	0x200000ac
 800e20c:	20000bbc 	.word	0x20000bbc
 800e210:	20000bf8 	.word	0x20000bf8

0800e214 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e21a:	230a      	movs	r3, #10
 800e21c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e21e:	463b      	mov	r3, r7
 800e220:	4618      	mov	r0, r3
 800e222:	f005 f9d5 	bl	80135d0 <LoRaMacMlmeRequest>
 800e226:	4603      	mov	r3, r0
 800e228:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	4a06      	ldr	r2, [pc, #24]	; (800e248 <LmHandlerDeviceTimeReq+0x34>)
 800e22e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e230:	7dfb      	ldrb	r3, [r7, #23]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d101      	bne.n	800e23a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e236:	2300      	movs	r3, #0
 800e238:	e001      	b.n	800e23e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e23a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	20000bf8 	.word	0x20000bf8

0800e24c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	4603      	mov	r3, r0
 800e254:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e256:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	bc80      	pop	{r7}
 800e262:	4770      	bx	lr

0800e264 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08c      	sub	sp, #48	; 0x30
 800e268:	af00      	add	r7, sp, #0
 800e26a:	4603      	mov	r3, r0
 800e26c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e26e:	2300      	movs	r3, #0
 800e270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800e274:	f001 fe8e 	bl	800ff94 <LoRaMacIsBusy>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e27e:	f06f 0301 	mvn.w	r3, #1
 800e282:	e073      	b.n	800e36c <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e284:	f7ff fed2 	bl	800e02c <LmHandlerJoinStatus>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d002      	beq.n	800e294 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e28e:	f06f 0302 	mvn.w	r3, #2
 800e292:	e06b      	b.n	800e36c <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e294:	2300      	movs	r3, #0
 800e296:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e298:	f107 0308 	add.w	r3, r7, #8
 800e29c:	4618      	mov	r0, r3
 800e29e:	f004 fcb7 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ac:	e05e      	b.n	800e36c <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800e2ae:	7b3b      	ldrb	r3, [r7, #12]
 800e2b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800e2b4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e2b8:	79fb      	ldrb	r3, [r7, #7]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d04d      	beq.n	800e35a <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800e2be:	79fb      	ldrb	r3, [r7, #7]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d028      	beq.n	800e316 <LmHandlerRequestClass+0xb2>
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	dc4a      	bgt.n	800e35e <LmHandlerRequestClass+0xfa>
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <LmHandlerRequestClass+0x6e>
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d01e      	beq.n	800e30e <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800e2d0:	e045      	b.n	800e35e <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800e2d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d043      	beq.n	800e362 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e2de:	f107 0308 	add.w	r3, r7, #8
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f004 fe1a 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10b      	bne.n	800e306 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e2ee:	4b21      	ldr	r3, [pc, #132]	; (800e374 <LmHandlerRequestClass+0x110>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d034      	beq.n	800e362 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e2f8:	4b1e      	ldr	r3, [pc, #120]	; (800e374 <LmHandlerRequestClass+0x110>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2fe:	79fa      	ldrb	r2, [r7, #7]
 800e300:	4610      	mov	r0, r2
 800e302:	4798      	blx	r3
            break;
 800e304:	e02d      	b.n	800e362 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e306:	23ff      	movs	r3, #255	; 0xff
 800e308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e30c:	e029      	b.n	800e362 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800e30e:	23ff      	movs	r3, #255	; 0xff
 800e310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e314:	e028      	b.n	800e368 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800e316:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d003      	beq.n	800e326 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e31e:	23ff      	movs	r3, #255	; 0xff
 800e320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e324:	e01f      	b.n	800e366 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800e32a:	f107 0308 	add.w	r3, r7, #8
 800e32e:	4618      	mov	r0, r3
 800e330:	f004 fdf4 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10b      	bne.n	800e352 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800e33a:	4b0e      	ldr	r3, [pc, #56]	; (800e374 <LmHandlerRequestClass+0x110>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e340:	2b00      	cmp	r3, #0
 800e342:	d010      	beq.n	800e366 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800e344:	4b0b      	ldr	r3, [pc, #44]	; (800e374 <LmHandlerRequestClass+0x110>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34a:	79fa      	ldrb	r2, [r7, #7]
 800e34c:	4610      	mov	r0, r2
 800e34e:	4798      	blx	r3
            break;
 800e350:	e009      	b.n	800e366 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e352:	23ff      	movs	r3, #255	; 0xff
 800e354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800e358:	e005      	b.n	800e366 <LmHandlerRequestClass+0x102>
        }
    }
 800e35a:	bf00      	nop
 800e35c:	e004      	b.n	800e368 <LmHandlerRequestClass+0x104>
            break;
 800e35e:	bf00      	nop
 800e360:	e002      	b.n	800e368 <LmHandlerRequestClass+0x104>
            break;
 800e362:	bf00      	nop
 800e364:	e000      	b.n	800e368 <LmHandlerRequestClass+0x104>
            break;
 800e366:	bf00      	nop
    return errorStatus;
 800e368:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3730      	adds	r7, #48	; 0x30
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	20000bd0 	.word	0x20000bd0

0800e378 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08c      	sub	sp, #48	; 0x30
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d102      	bne.n	800e38c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e386:	f04f 33ff 	mov.w	r3, #4294967295
 800e38a:	e010      	b.n	800e3ae <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e38c:	2300      	movs	r3, #0
 800e38e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800e390:	f107 030c 	add.w	r3, r7, #12
 800e394:	4618      	mov	r0, r3
 800e396:	f004 fc3b 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d002      	beq.n	800e3a6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a4:	e003      	b.n	800e3ae <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e3a6:	7c3a      	ldrb	r2, [r7, #16]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3730      	adds	r7, #48	; 0x30
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08c      	sub	sp, #48	; 0x30
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ca:	e016      	b.n	800e3fa <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e3cc:	231f      	movs	r3, #31
 800e3ce:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800e3d0:	f107 030c 	add.w	r3, r7, #12
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f004 fc1b 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e4:	e009      	b.n	800e3fa <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e3e6:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f993 2000 	ldrsb.w	r2, [r3]
 800e3f4:	4b03      	ldr	r3, [pc, #12]	; (800e404 <LmHandlerGetTxDatarate+0x4c>)
 800e3f6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3730      	adds	r7, #48	; 0x30
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20000bbc 	.word	0x20000bbc

0800e408 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08c      	sub	sp, #48	; 0x30
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e410:	2322      	movs	r3, #34	; 0x22
 800e412:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e418:	f107 030c 	add.w	r3, r7, #12
 800e41c:	4618      	mov	r0, r3
 800e41e:	f004 fd7d 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d002      	beq.n	800e42e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e428:	f04f 33ff 	mov.w	r3, #4294967295
 800e42c:	e000      	b.n	800e430 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3730      	adds	r7, #48	; 0x30
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e440:	4b15      	ldr	r3, [pc, #84]	; (800e498 <McpsConfirm+0x60>)
 800e442:	2201      	movs	r2, #1
 800e444:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	785a      	ldrb	r2, [r3, #1]
 800e44a:	4b13      	ldr	r3, [pc, #76]	; (800e498 <McpsConfirm+0x60>)
 800e44c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	789b      	ldrb	r3, [r3, #2]
 800e452:	b25a      	sxtb	r2, r3
 800e454:	4b10      	ldr	r3, [pc, #64]	; (800e498 <McpsConfirm+0x60>)
 800e456:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	4a0e      	ldr	r2, [pc, #56]	; (800e498 <McpsConfirm+0x60>)
 800e45e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e466:	4b0c      	ldr	r3, [pc, #48]	; (800e498 <McpsConfirm+0x60>)
 800e468:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	4b09      	ldr	r3, [pc, #36]	; (800e498 <McpsConfirm+0x60>)
 800e472:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	791b      	ldrb	r3, [r3, #4]
 800e478:	461a      	mov	r2, r3
 800e47a:	4b07      	ldr	r3, [pc, #28]	; (800e498 <McpsConfirm+0x60>)
 800e47c:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800e47e:	4b07      	ldr	r3, [pc, #28]	; (800e49c <McpsConfirm+0x64>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e484:	4804      	ldr	r0, [pc, #16]	; (800e498 <McpsConfirm+0x60>)
 800e486:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e488:	6879      	ldr	r1, [r7, #4]
 800e48a:	2000      	movs	r0, #0
 800e48c:	f000 f9de 	bl	800e84c <LmHandlerPackagesNotify>
}
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	200000ac 	.word	0x200000ac
 800e49c:	20000bd0 	.word	0x20000bd0

0800e4a0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b088      	sub	sp, #32
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800e4ae:	4b31      	ldr	r3, [pc, #196]	; (800e574 <McpsIndication+0xd4>)
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	785a      	ldrb	r2, [r3, #1]
 800e4b8:	4b2e      	ldr	r3, [pc, #184]	; (800e574 <McpsIndication+0xd4>)
 800e4ba:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e4bc:	4b2d      	ldr	r3, [pc, #180]	; (800e574 <McpsIndication+0xd4>)
 800e4be:	785b      	ldrb	r3, [r3, #1]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d153      	bne.n	800e56c <McpsIndication+0xcc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	791b      	ldrb	r3, [r3, #4]
 800e4c8:	b25a      	sxtb	r2, r3
 800e4ca:	4b2a      	ldr	r3, [pc, #168]	; (800e574 <McpsIndication+0xd4>)
 800e4cc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4d4:	b25a      	sxtb	r2, r3
 800e4d6:	4b27      	ldr	r3, [pc, #156]	; (800e574 <McpsIndication+0xd4>)
 800e4d8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e4e0:	4b24      	ldr	r3, [pc, #144]	; (800e574 <McpsIndication+0xd4>)
 800e4e2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	78da      	ldrb	r2, [r3, #3]
 800e4e8:	4b22      	ldr	r3, [pc, #136]	; (800e574 <McpsIndication+0xd4>)
 800e4ea:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	4a20      	ldr	r2, [pc, #128]	; (800e574 <McpsIndication+0xd4>)
 800e4f2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	78db      	ldrb	r3, [r3, #3]
 800e4f8:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	7b1b      	ldrb	r3, [r3, #12]
 800e4fe:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e506:	4b1c      	ldr	r3, [pc, #112]	; (800e578 <McpsIndication+0xd8>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50c:	f107 0218 	add.w	r2, r7, #24
 800e510:	4918      	ldr	r1, [pc, #96]	; (800e574 <McpsIndication+0xd4>)
 800e512:	4610      	mov	r0, r2
 800e514:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800e516:	4b18      	ldr	r3, [pc, #96]	; (800e578 <McpsIndication+0xd8>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d007      	beq.n	800e530 <McpsIndication+0x90>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	7e1b      	ldrb	r3, [r3, #24]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e528:	4b13      	ldr	r3, [pc, #76]	; (800e578 <McpsIndication+0xd8>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	2001      	movs	r0, #1
 800e534:	f000 f98a 	bl	800e84c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e538:	f107 0317 	add.w	r3, r7, #23
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff ff1b 	bl	800e378 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	795b      	ldrb	r3, [r3, #5]
 800e546:	2b01      	cmp	r3, #1
 800e548:	d111      	bne.n	800e56e <McpsIndication+0xce>
 800e54a:	7dfb      	ldrb	r3, [r7, #23]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10e      	bne.n	800e56e <McpsIndication+0xce>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800e550:	2300      	movs	r3, #0
 800e552:	733b      	strb	r3, [r7, #12]
 800e554:	2300      	movs	r3, #0
 800e556:	737b      	strb	r3, [r7, #13]
 800e558:	2300      	movs	r3, #0
 800e55a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 800e55c:	f107 030c 	add.w	r3, r7, #12
 800e560:	2201      	movs	r2, #1
 800e562:	2100      	movs	r1, #0
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff fd7d 	bl	800e064 <LmHandlerSend>
 800e56a:	e000      	b.n	800e56e <McpsIndication+0xce>
        return;
 800e56c:	bf00      	nop
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800e56e:	3720      	adds	r7, #32
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	200000c8 	.word	0x200000c8
 800e578:	20000bd0 	.word	0x20000bd0

0800e57c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b08c      	sub	sp, #48	; 0x30
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e584:	4b3d      	ldr	r3, [pc, #244]	; (800e67c <MlmeConfirm+0x100>)
 800e586:	2200      	movs	r2, #0
 800e588:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	785a      	ldrb	r2, [r3, #1]
 800e58e:	4b3b      	ldr	r3, [pc, #236]	; (800e67c <MlmeConfirm+0x100>)
 800e590:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800e592:	4b3b      	ldr	r3, [pc, #236]	; (800e680 <MlmeConfirm+0x104>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e598:	4838      	ldr	r0, [pc, #224]	; (800e67c <MlmeConfirm+0x100>)
 800e59a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e59c:	6879      	ldr	r1, [r7, #4]
 800e59e:	2002      	movs	r0, #2
 800e5a0:	f000 f954 	bl	800e84c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	2b0c      	cmp	r3, #12
 800e5ac:	d85e      	bhi.n	800e66c <MlmeConfirm+0xf0>
 800e5ae:	a201      	add	r2, pc, #4	; (adr r2, 800e5b4 <MlmeConfirm+0x38>)
 800e5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b4:	0800e5e9 	.word	0x0800e5e9
 800e5b8:	0800e66d 	.word	0x0800e66d
 800e5bc:	0800e66d 	.word	0x0800e66d
 800e5c0:	0800e63b 	.word	0x0800e63b
 800e5c4:	0800e66d 	.word	0x0800e66d
 800e5c8:	0800e66d 	.word	0x0800e66d
 800e5cc:	0800e66d 	.word	0x0800e66d
 800e5d0:	0800e66d 	.word	0x0800e66d
 800e5d4:	0800e66d 	.word	0x0800e66d
 800e5d8:	0800e66d 	.word	0x0800e66d
 800e5dc:	0800e66d 	.word	0x0800e66d
 800e5e0:	0800e653 	.word	0x0800e653
 800e5e4:	0800e66d 	.word	0x0800e66d
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800e5e8:	2306      	movs	r3, #6
 800e5ea:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e5ec:	f107 030c 	add.w	r3, r7, #12
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f004 fb0d 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	4a22      	ldr	r2, [pc, #136]	; (800e684 <MlmeConfirm+0x108>)
 800e5fa:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e5fc:	4822      	ldr	r0, [pc, #136]	; (800e688 <MlmeConfirm+0x10c>)
 800e5fe:	f7ff fedb 	bl	800e3b8 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	785b      	ldrb	r3, [r3, #1]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d108      	bne.n	800e61c <MlmeConfirm+0xa0>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e60a:	4b20      	ldr	r3, [pc, #128]	; (800e68c <MlmeConfirm+0x110>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e610:	4b1f      	ldr	r3, [pc, #124]	; (800e690 <MlmeConfirm+0x114>)
 800e612:	785b      	ldrb	r3, [r3, #1]
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff fe25 	bl	800e264 <LmHandlerRequestClass>
 800e61a:	e002      	b.n	800e622 <MlmeConfirm+0xa6>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e61c:	4b1b      	ldr	r3, [pc, #108]	; (800e68c <MlmeConfirm+0x110>)
 800e61e:	22ff      	movs	r2, #255	; 0xff
 800e620:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e622:	4b17      	ldr	r3, [pc, #92]	; (800e680 <MlmeConfirm+0x104>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e628:	4818      	ldr	r0, [pc, #96]	; (800e68c <MlmeConfirm+0x110>)
 800e62a:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	785b      	ldrb	r3, [r3, #1]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d11d      	bne.n	800e670 <MlmeConfirm+0xf4>
            {
                SecureElementPrintSessionKeys();
 800e634:	f7ff f89e 	bl	800d774 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800e638:	e01a      	b.n	800e670 <MlmeConfirm+0xf4>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800e63a:	4b16      	ldr	r3, [pc, #88]	; (800e694 <MlmeConfirm+0x118>)
 800e63c:	2201      	movs	r2, #1
 800e63e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	7a1a      	ldrb	r2, [r3, #8]
 800e644:	4b13      	ldr	r3, [pc, #76]	; (800e694 <MlmeConfirm+0x118>)
 800e646:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	7a5a      	ldrb	r2, [r3, #9]
 800e64c:	4b11      	ldr	r3, [pc, #68]	; (800e694 <MlmeConfirm+0x118>)
 800e64e:	74da      	strb	r2, [r3, #19]
        }
        break;
 800e650:	e00f      	b.n	800e672 <MlmeConfirm+0xf6>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	785b      	ldrb	r3, [r3, #1]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d105      	bne.n	800e666 <MlmeConfirm+0xea>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <MlmeConfirm+0x114>)
 800e65c:	7b1b      	ldrb	r3, [r3, #12]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff fdf4 	bl	800e24c <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800e664:	e005      	b.n	800e672 <MlmeConfirm+0xf6>
                LmHandlerDeviceTimeReq( );
 800e666:	f7ff fdd5 	bl	800e214 <LmHandlerDeviceTimeReq>
        break;
 800e66a:	e002      	b.n	800e672 <MlmeConfirm+0xf6>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e66c:	bf00      	nop
 800e66e:	e000      	b.n	800e672 <MlmeConfirm+0xf6>
        break;
 800e670:	bf00      	nop
    }
}
 800e672:	bf00      	nop
 800e674:	3730      	adds	r7, #48	; 0x30
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	200000ac 	.word	0x200000ac
 800e680:	20000bd0 	.word	0x20000bd0
 800e684:	20000080 	.word	0x20000080
 800e688:	200000a8 	.word	0x200000a8
 800e68c:	200000a4 	.word	0x200000a4
 800e690:	20000bbc 	.word	0x20000bbc
 800e694:	200000c8 	.word	0x200000c8

0800e698 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e6a2:	4b2f      	ldr	r3, [pc, #188]	; (800e760 <MlmeIndication+0xc8>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	785a      	ldrb	r2, [r3, #1]
 800e6ac:	4b2c      	ldr	r3, [pc, #176]	; (800e760 <MlmeIndication+0xc8>)
 800e6ae:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	789b      	ldrb	r3, [r3, #2]
 800e6b4:	b25a      	sxtb	r2, r3
 800e6b6:	4b2a      	ldr	r3, [pc, #168]	; (800e760 <MlmeIndication+0xc8>)
 800e6b8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6c0:	b25a      	sxtb	r2, r3
 800e6c2:	4b27      	ldr	r3, [pc, #156]	; (800e760 <MlmeIndication+0xc8>)
 800e6c4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e6cc:	4b24      	ldr	r3, [pc, #144]	; (800e760 <MlmeIndication+0xc8>)
 800e6ce:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	78da      	ldrb	r2, [r3, #3]
 800e6d4:	4b22      	ldr	r3, [pc, #136]	; (800e760 <MlmeIndication+0xc8>)
 800e6d6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	4a20      	ldr	r2, [pc, #128]	; (800e760 <MlmeIndication+0xc8>)
 800e6de:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	2b0b      	cmp	r3, #11
 800e6e6:	d009      	beq.n	800e6fc <MlmeIndication+0x64>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	2b0f      	cmp	r3, #15
 800e6ee:	d005      	beq.n	800e6fc <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e6f0:	4b1c      	ldr	r3, [pc, #112]	; (800e764 <MlmeIndication+0xcc>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f6:	491a      	ldr	r1, [pc, #104]	; (800e760 <MlmeIndication+0xc8>)
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e6fc:	6879      	ldr	r1, [r7, #4]
 800e6fe:	2003      	movs	r0, #3
 800e700:	f000 f8a4 	bl	800e84c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2b0f      	cmp	r3, #15
 800e70a:	d01e      	beq.n	800e74a <MlmeIndication+0xb2>
 800e70c:	2b0f      	cmp	r3, #15
 800e70e:	dc1e      	bgt.n	800e74e <MlmeIndication+0xb6>
 800e710:	2b07      	cmp	r3, #7
 800e712:	d002      	beq.n	800e71a <MlmeIndication+0x82>
 800e714:	2b0b      	cmp	r3, #11
 800e716:	d01c      	beq.n	800e752 <MlmeIndication+0xba>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800e718:	e019      	b.n	800e74e <MlmeIndication+0xb6>
            LmHandlerAppData_t appData =
 800e71a:	2300      	movs	r3, #0
 800e71c:	723b      	strb	r3, [r7, #8]
 800e71e:	2300      	movs	r3, #0
 800e720:	727b      	strb	r3, [r7, #9]
 800e722:	2300      	movs	r3, #0
 800e724:	60fb      	str	r3, [r7, #12]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800e726:	4b10      	ldr	r3, [pc, #64]	; (800e768 <MlmeIndication+0xd0>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	4798      	blx	r3
 800e72e:	4603      	mov	r3, r0
 800e730:	f083 0301 	eor.w	r3, r3, #1
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00d      	beq.n	800e756 <MlmeIndication+0xbe>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800e73a:	f107 0308 	add.w	r3, r7, #8
 800e73e:	2201      	movs	r2, #1
 800e740:	2100      	movs	r1, #0
 800e742:	4618      	mov	r0, r3
 800e744:	f7ff fc8e 	bl	800e064 <LmHandlerSend>
        break;
 800e748:	e005      	b.n	800e756 <MlmeIndication+0xbe>
        break;
 800e74a:	bf00      	nop
 800e74c:	e004      	b.n	800e758 <MlmeIndication+0xc0>
        break;
 800e74e:	bf00      	nop
 800e750:	e002      	b.n	800e758 <MlmeIndication+0xc0>
        break;
 800e752:	bf00      	nop
 800e754:	e000      	b.n	800e758 <MlmeIndication+0xc0>
        break;
 800e756:	bf00      	nop
    }
}
 800e758:	bf00      	nop
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	200000c8 	.word	0x200000c8
 800e764:	20000bd0 	.word	0x20000bd0
 800e768:	20000ba8 	.word	0x20000ba8

0800e76c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	4603      	mov	r3, r0
 800e774:	6039      	str	r1, [r7, #0]
 800e776:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e778:	2300      	movs	r3, #0
 800e77a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d103      	bne.n	800e78a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800e782:	f000 f9db 	bl	800eb3c <LmhpCompliancePackageFactory>
 800e786:	60f8      	str	r0, [r7, #12]
            break;
 800e788:	e000      	b.n	800e78c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800e78a:	bf00      	nop
        }
    }
    if( package != NULL )
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d02b      	beq.n	800e7ea <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800e792:	79fb      	ldrb	r3, [r7, #7]
 800e794:	4918      	ldr	r1, [pc, #96]	; (800e7f8 <LmHandlerPackageRegister+0x8c>)
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e79c:	79fb      	ldrb	r3, [r7, #7]
 800e79e:	4a16      	ldr	r2, [pc, #88]	; (800e7f8 <LmHandlerPackageRegister+0x8c>)
 800e7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7a4:	4a15      	ldr	r2, [pc, #84]	; (800e7fc <LmHandlerPackageRegister+0x90>)
 800e7a6:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e7a8:	79fb      	ldrb	r3, [r7, #7]
 800e7aa:	4a13      	ldr	r2, [pc, #76]	; (800e7f8 <LmHandlerPackageRegister+0x8c>)
 800e7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7b0:	4a13      	ldr	r2, [pc, #76]	; (800e800 <LmHandlerPackageRegister+0x94>)
 800e7b2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	4a10      	ldr	r2, [pc, #64]	; (800e7f8 <LmHandlerPackageRegister+0x8c>)
 800e7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7bc:	4a11      	ldr	r2, [pc, #68]	; (800e804 <LmHandlerPackageRegister+0x98>)
 800e7be:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e7c0:	4b11      	ldr	r3, [pc, #68]	; (800e808 <LmHandlerPackageRegister+0x9c>)
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	79fb      	ldrb	r3, [r7, #7]
 800e7c6:	490c      	ldr	r1, [pc, #48]	; (800e7f8 <LmHandlerPackageRegister+0x8c>)
 800e7c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e7cc:	6992      	ldr	r2, [r2, #24]
 800e7ce:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	4a09      	ldr	r2, [pc, #36]	; (800e7f8 <LmHandlerPackageRegister+0x8c>)
 800e7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	4a0c      	ldr	r2, [pc, #48]	; (800e80c <LmHandlerPackageRegister+0xa0>)
 800e7dc:	6851      	ldr	r1, [r2, #4]
 800e7de:	4a0b      	ldr	r2, [pc, #44]	; (800e80c <LmHandlerPackageRegister+0xa0>)
 800e7e0:	7852      	ldrb	r2, [r2, #1]
 800e7e2:	6838      	ldr	r0, [r7, #0]
 800e7e4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e001      	b.n	800e7ee <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e7ea:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20000ba8 	.word	0x20000ba8
 800e7fc:	0800df2d 	.word	0x0800df2d
 800e800:	0800e065 	.word	0x0800e065
 800e804:	0800e215 	.word	0x0800e215
 800e808:	20000bd0 	.word	0x20000bd0
 800e80c:	200000dc 	.word	0x200000dc

0800e810 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e81a:	79fb      	ldrb	r3, [r7, #7]
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	d80e      	bhi.n	800e83e <LmHandlerPackageIsInitialized+0x2e>
 800e820:	79fb      	ldrb	r3, [r7, #7]
 800e822:	4a09      	ldr	r2, [pc, #36]	; (800e848 <LmHandlerPackageIsInitialized+0x38>)
 800e824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d007      	beq.n	800e83e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e82e:	79fb      	ldrb	r3, [r7, #7]
 800e830:	4a05      	ldr	r2, [pc, #20]	; (800e848 <LmHandlerPackageIsInitialized+0x38>)
 800e832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	4798      	blx	r3
 800e83a:	4603      	mov	r3, r0
 800e83c:	e000      	b.n	800e840 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e83e:	2300      	movs	r3, #0
    }
}
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20000ba8 	.word	0x20000ba8

0800e84c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	4603      	mov	r3, r0
 800e854:	6039      	str	r1, [r7, #0]
 800e856:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e858:	2300      	movs	r3, #0
 800e85a:	73fb      	strb	r3, [r7, #15]
 800e85c:	e07e      	b.n	800e95c <LmHandlerPackagesNotify+0x110>
    {
        if( LmHandlerPackages[i] != NULL )
 800e85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e862:	4a43      	ldr	r2, [pc, #268]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d066      	beq.n	800e93a <LmHandlerPackagesNotify+0xee>
        {
            switch( notifyType )
 800e86c:	79fb      	ldrb	r3, [r7, #7]
 800e86e:	2b03      	cmp	r3, #3
 800e870:	d865      	bhi.n	800e93e <LmHandlerPackagesNotify+0xf2>
 800e872:	a201      	add	r2, pc, #4	; (adr r2, 800e878 <LmHandlerPackagesNotify+0x2c>)
 800e874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e878:	0800e889 	.word	0x0800e889
 800e87c:	0800e8ab 	.word	0x0800e8ab
 800e880:	0800e8f7 	.word	0x0800e8f7
 800e884:	0800e919 	.word	0x0800e919
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e88c:	4a38      	ldr	r2, [pc, #224]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e88e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d054      	beq.n	800e942 <LmHandlerPackagesNotify+0xf6>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800e898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e89c:	4a34      	ldr	r2, [pc, #208]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8a2:	699b      	ldr	r3, [r3, #24]
 800e8a4:	6838      	ldr	r0, [r7, #0]
 800e8a6:	4798      	blx	r3
                    }
                    break;
 800e8a8:	e04b      	b.n	800e942 <LmHandlerPackagesNotify+0xf6>
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e8aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ae:	4a30      	ldr	r2, [pc, #192]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8b4:	69db      	ldr	r3, [r3, #28]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d045      	beq.n	800e946 <LmHandlerPackagesNotify+0xfa>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8be:	4a2c      	ldr	r2, [pc, #176]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8c4:	781a      	ldrb	r2, [r3, #0]
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d00a      	beq.n	800e8e4 <LmHandlerPackagesNotify+0x98>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800e8ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d137      	bne.n	800e946 <LmHandlerPackagesNotify+0xfa>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800e8d6:	4b26      	ldr	r3, [pc, #152]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	4798      	blx	r3
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d030      	beq.n	800e946 <LmHandlerPackagesNotify+0xfa>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e8:	4a21      	ldr	r2, [pc, #132]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ee:	69db      	ldr	r3, [r3, #28]
 800e8f0:	6838      	ldr	r0, [r7, #0]
 800e8f2:	4798      	blx	r3
                    }
                    break;
 800e8f4:	e027      	b.n	800e946 <LmHandlerPackagesNotify+0xfa>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8fa:	4a1d      	ldr	r2, [pc, #116]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e900:	6a1b      	ldr	r3, [r3, #32]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d021      	beq.n	800e94a <LmHandlerPackagesNotify+0xfe>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e90a:	4a19      	ldr	r2, [pc, #100]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e910:	6a1b      	ldr	r3, [r3, #32]
 800e912:	6838      	ldr	r0, [r7, #0]
 800e914:	4798      	blx	r3
                    }
                    break;
 800e916:	e018      	b.n	800e94a <LmHandlerPackagesNotify+0xfe>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e91c:	4a14      	ldr	r2, [pc, #80]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e924:	2b00      	cmp	r3, #0
 800e926:	d012      	beq.n	800e94e <LmHandlerPackagesNotify+0x102>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e92c:	4a10      	ldr	r2, [pc, #64]	; (800e970 <LmHandlerPackagesNotify+0x124>)
 800e92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e934:	6838      	ldr	r0, [r7, #0]
 800e936:	4798      	blx	r3
                    }
                    break;
 800e938:	e009      	b.n	800e94e <LmHandlerPackagesNotify+0x102>
                default:
                {
                    break;
                }
            }
        }
 800e93a:	bf00      	nop
 800e93c:	e008      	b.n	800e950 <LmHandlerPackagesNotify+0x104>
                    break;
 800e93e:	bf00      	nop
 800e940:	e006      	b.n	800e950 <LmHandlerPackagesNotify+0x104>
                    break;
 800e942:	bf00      	nop
 800e944:	e004      	b.n	800e950 <LmHandlerPackagesNotify+0x104>
                    break;
 800e946:	bf00      	nop
 800e948:	e002      	b.n	800e950 <LmHandlerPackagesNotify+0x104>
                    break;
 800e94a:	bf00      	nop
 800e94c:	e000      	b.n	800e950 <LmHandlerPackagesNotify+0x104>
                    break;
 800e94e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e954:	b2db      	uxtb	r3, r3
 800e956:	3301      	adds	r3, #1
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	73fb      	strb	r3, [r7, #15]
 800e95c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e960:	2b04      	cmp	r3, #4
 800e962:	f77f af7c 	ble.w	800e85e <LmHandlerPackagesNotify+0x12>
    }
}
 800e966:	bf00      	nop
 800e968:	bf00      	nop
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	20000ba8 	.word	0x20000ba8

0800e974 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e97a:	2300      	movs	r3, #0
 800e97c:	71fb      	strb	r3, [r7, #7]
 800e97e:	e022      	b.n	800e9c6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e984:	4a14      	ldr	r2, [pc, #80]	; (800e9d8 <LmHandlerPackagesProcess+0x64>)
 800e986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d015      	beq.n	800e9ba <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e98e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e992:	4a11      	ldr	r2, [pc, #68]	; (800e9d8 <LmHandlerPackagesProcess+0x64>)
 800e994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e998:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00d      	beq.n	800e9ba <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e99e:	79fb      	ldrb	r3, [r7, #7]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7ff ff35 	bl	800e810 <LmHandlerPackageIsInitialized>
 800e9a6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d006      	beq.n	800e9ba <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e9ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9b0:	4a09      	ldr	r2, [pc, #36]	; (800e9d8 <LmHandlerPackagesProcess+0x64>)
 800e9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e9ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	71fb      	strb	r3, [r7, #7]
 800e9c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9ca:	2b04      	cmp	r3, #4
 800e9cc:	ddd8      	ble.n	800e980 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e9ce:	bf00      	nop
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20000ba8 	.word	0x20000ba8

0800e9dc <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	6039      	str	r1, [r7, #0]
 800e9e6:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f2:	e00e      	b.n	800ea12 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800e9f4:	79fb      	ldrb	r3, [r7, #7]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <LmHandlerGetVersion+0x24>
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d004      	beq.n	800ea08 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800e9fe:	e007      	b.n	800ea10 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	4a06      	ldr	r2, [pc, #24]	; (800ea1c <LmHandlerGetVersion+0x40>)
 800ea04:	601a      	str	r2, [r3, #0]
            break;
 800ea06:	e003      	b.n	800ea10 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	4a05      	ldr	r2, [pc, #20]	; (800ea20 <LmHandlerGetVersion+0x44>)
 800ea0c:	601a      	str	r2, [r3, #0]
            break;
 800ea0e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bc80      	pop	{r7}
 800ea1a:	4770      	bx	lr
 800ea1c:	01000300 	.word	0x01000300
 800ea20:	01010003 	.word	0x01010003

0800ea24 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800ea28:	f005 f826 	bl	8013a78 <LoRaMacDeInitialization>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e001      	b.n	800ea3a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea36:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800ea42:	f004 f825 	bl	8012a90 <LoRaMacHalt>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d101      	bne.n	800ea50 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	e001      	b.n	800ea54 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ea50:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b08e      	sub	sp, #56	; 0x38
 800ea5c:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800ea68:	f7ff ffe9 	bl	800ea3e <LmHandlerHalt>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800ea72:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d12f      	bne.n	800eada <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800ea7a:	f000 f84f 	bl	800eb1c <NvmDataMgmtStoreBegin>
 800ea7e:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800ea80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea82:	f113 0f02 	cmn.w	r3, #2
 800ea86:	d103      	bne.n	800ea90 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800ea88:	23f8      	movs	r3, #248	; 0xf8
 800ea8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea8e:	e01c      	b.n	800eaca <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800ea90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d104      	bne.n	800eaa0 <LmHandlerNvmDataStore+0x48>
 800ea96:	4b1b      	ldr	r3, [pc, #108]	; (800eb04 <LmHandlerNvmDataStore+0xac>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	695b      	ldr	r3, [r3, #20]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d103      	bne.n	800eaa8 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800eaa0:	23ff      	movs	r3, #255	; 0xff
 800eaa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eaa6:	e010      	b.n	800eaca <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800eaa8:	2326      	movs	r3, #38	; 0x26
 800eaaa:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800eaac:	1d3b      	adds	r3, r7, #4
 800eaae:	4618      	mov	r0, r3
 800eab0:	f004 f8ae 	bl	8012c10 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800eab8:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 800eabc:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800eabe:	4b11      	ldr	r3, [pc, #68]	; (800eb04 <LmHandlerNvmDataStore+0xac>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eac8:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800eaca:	f000 f82f 	bl	800eb2c <NvmDataMgmtStoreEnd>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d002      	beq.n	800eada <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ead4:	23ff      	movs	r3, #255	; 0xff
 800ead6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800eada:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d109      	bne.n	800eaf6 <LmHandlerNvmDataStore+0x9e>
 800eae2:	4b08      	ldr	r3, [pc, #32]	; (800eb04 <LmHandlerNvmDataStore+0xac>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	69db      	ldr	r3, [r3, #28]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d004      	beq.n	800eaf6 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800eaec:	4b05      	ldr	r3, [pc, #20]	; (800eb04 <LmHandlerNvmDataStore+0xac>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	69db      	ldr	r3, [r3, #28]
 800eaf2:	2001      	movs	r0, #1
 800eaf4:	4798      	blx	r3
    }

    return lmhStatus;
 800eaf6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3738      	adds	r7, #56	; 0x38
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20000bd0 	.word	0x20000bd0

0800eb08 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800eb12:	bf00      	nop
 800eb14:	370c      	adds	r7, #12
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bc80      	pop	{r7}
 800eb1a:	4770      	bx	lr

0800eb1c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	af00      	add	r7, sp, #0
    {
        return NVM_DATA_NOT_AVAILABLE;
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800eb20:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bc80      	pop	{r7}
 800eb2a:	4770      	bx	lr

0800eb2c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
 800eb30:	f06f 0304 	mvn.w	r3, #4
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bc80      	pop	{r7}
 800eb3a:	4770      	bx	lr

0800eb3c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800eb40:	4b02      	ldr	r3, [pc, #8]	; (800eb4c <LmhpCompliancePackageFactory+0x10>)
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bc80      	pop	{r7}
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	200000e4 	.word	0x200000e4

0800eb50 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00f      	beq.n	800eb84 <LmhpComplianceInit+0x34>
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00c      	beq.n	800eb84 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800eb6a:	4a0c      	ldr	r2, [pc, #48]	; (800eb9c <LmhpComplianceInit+0x4c>)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800eb70:	4a0b      	ldr	r2, [pc, #44]	; (800eba0 <LmhpComplianceInit+0x50>)
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800eb76:	4a0a      	ldr	r2, [pc, #40]	; (800eba0 <LmhpComplianceInit+0x50>)
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800eb7c:	4b08      	ldr	r3, [pc, #32]	; (800eba0 <LmhpComplianceInit+0x50>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	701a      	strb	r2, [r3, #0]
 800eb82:	e006      	b.n	800eb92 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800eb84:	4b05      	ldr	r3, [pc, #20]	; (800eb9c <LmhpComplianceInit+0x4c>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800eb8a:	4b05      	ldr	r3, [pc, #20]	; (800eba0 <LmhpComplianceInit+0x50>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	701a      	strb	r2, [r3, #0]
    }
}
 800eb90:	bf00      	nop
 800eb92:	bf00      	nop
 800eb94:	3714      	adds	r7, #20
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bc80      	pop	{r7}
 800eb9a:	4770      	bx	lr
 800eb9c:	20000d1c 	.word	0x20000d1c
 800eba0:	20000d08 	.word	0x20000d08

0800eba4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800eba4:	b480      	push	{r7}
 800eba6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800eba8:	4b02      	ldr	r3, [pc, #8]	; (800ebb4 <LmhpComplianceIsInitialized+0x10>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bc80      	pop	{r7}
 800ebb2:	4770      	bx	lr
 800ebb4:	20000d08 	.word	0x20000d08

0800ebb8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800ebbc:	4b07      	ldr	r3, [pc, #28]	; (800ebdc <LmhpComplianceIsRunning+0x24>)
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	f083 0301 	eor.w	r3, r3, #1
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e001      	b.n	800ebd2 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800ebce:	4b03      	ldr	r3, [pc, #12]	; (800ebdc <LmhpComplianceIsRunning+0x24>)
 800ebd0:	785b      	ldrb	r3, [r3, #1]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bc80      	pop	{r7}
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	20000d08 	.word	0x20000d08

0800ebe0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800ebe8:	4b0f      	ldr	r3, [pc, #60]	; (800ec28 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	f083 0301 	eor.w	r3, r3, #1
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d112      	bne.n	800ec1c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800ebf6:	4b0c      	ldr	r3, [pc, #48]	; (800ec28 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ebf8:	785b      	ldrb	r3, [r3, #1]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00f      	beq.n	800ec1e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d10b      	bne.n	800ec1e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800ec0e:	4b06      	ldr	r3, [pc, #24]	; (800ec28 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ec10:	899b      	ldrh	r3, [r3, #12]
 800ec12:	3301      	adds	r3, #1
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	4b04      	ldr	r3, [pc, #16]	; (800ec28 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ec18:	819a      	strh	r2, [r3, #12]
 800ec1a:	e000      	b.n	800ec1e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800ec1c:	bf00      	nop
    }
}
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bc80      	pop	{r7}
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	20000d08 	.word	0x20000d08

0800ec2c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ec34:	4b12      	ldr	r3, [pc, #72]	; (800ec80 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	f083 0301 	eor.w	r3, r3, #1
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d116      	bne.n	800ec70 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800ec42:	4b0f      	ldr	r3, [pc, #60]	; (800ec80 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ec44:	785b      	ldrb	r3, [r3, #1]
 800ec46:	f083 0301 	eor.w	r3, r3, #1
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d111      	bne.n	800ec74 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b04      	cmp	r3, #4
 800ec56:	d10e      	bne.n	800ec76 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800ec58:	4b09      	ldr	r3, [pc, #36]	; (800ec80 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7a1a      	ldrb	r2, [r3, #8]
 800ec62:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ec64:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7a5a      	ldrb	r2, [r3, #9]
 800ec6a:	4b05      	ldr	r3, [pc, #20]	; (800ec80 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ec6c:	741a      	strb	r2, [r3, #16]
 800ec6e:	e002      	b.n	800ec76 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800ec70:	bf00      	nop
 800ec72:	e000      	b.n	800ec76 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800ec74:	bf00      	nop
    }
}
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bc80      	pop	{r7}
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	20000d08 	.word	0x20000d08

0800ec84 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800ec8a:	4b33      	ldr	r3, [pc, #204]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	f083 0301 	eor.w	r3, r3, #1
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d002      	beq.n	800ec9e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ec98:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9c:	e057      	b.n	800ed4e <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.IsRunning == false )
 800ec9e:	4b2e      	ldr	r3, [pc, #184]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800eca0:	785b      	ldrb	r3, [r3, #1]
 800eca2:	f083 0301 	eor.w	r3, r3, #1
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d001      	beq.n	800ecb0 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ecac:	2300      	movs	r3, #0
 800ecae:	e04e      	b.n	800ed4e <LmhpComplianceTxProcess+0xca>
    }

    if( ComplianceTestState.LinkCheck == true )
 800ecb0:	4b29      	ldr	r3, [pc, #164]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecb2:	7b9b      	ldrb	r3, [r3, #14]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d019      	beq.n	800ecec <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800ecb8:	4b27      	ldr	r3, [pc, #156]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecba:	2200      	movs	r2, #0
 800ecbc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800ecbe:	4b26      	ldr	r3, [pc, #152]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecc0:	2203      	movs	r2, #3
 800ecc2:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800ecc4:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	2205      	movs	r2, #5
 800ecca:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800eccc:	4b22      	ldr	r3, [pc, #136]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	4a21      	ldr	r2, [pc, #132]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecd4:	7bd2      	ldrb	r2, [r2, #15]
 800ecd6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800ecd8:	4b1f      	ldr	r3, [pc, #124]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecda:	689b      	ldr	r3, [r3, #8]
 800ecdc:	3302      	adds	r3, #2
 800ecde:	4a1e      	ldr	r2, [pc, #120]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ece0:	7c12      	ldrb	r2, [r2, #16]
 800ece2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800ece4:	4b1c      	ldr	r3, [pc, #112]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ece6:	2201      	movs	r2, #1
 800ece8:	709a      	strb	r2, [r3, #2]
 800ecea:	e01c      	b.n	800ed26 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800ecec:	4b1a      	ldr	r3, [pc, #104]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecee:	789b      	ldrb	r3, [r3, #2]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d005      	beq.n	800ed00 <LmhpComplianceTxProcess+0x7c>
 800ecf4:	2b04      	cmp	r3, #4
 800ecf6:	d116      	bne.n	800ed26 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800ecf8:	4b17      	ldr	r3, [pc, #92]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	709a      	strb	r2, [r3, #2]
            break;
 800ecfe:	e012      	b.n	800ed26 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800ed00:	4b15      	ldr	r3, [pc, #84]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed02:	2202      	movs	r2, #2
 800ed04:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed08:	899b      	ldrh	r3, [r3, #12]
 800ed0a:	0a1b      	lsrs	r3, r3, #8
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	b2d2      	uxtb	r2, r2
 800ed14:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800ed16:	4b10      	ldr	r3, [pc, #64]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed18:	899a      	ldrh	r2, [r3, #12]
 800ed1a:	4b0f      	ldr	r3, [pc, #60]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	b2d2      	uxtb	r2, r2
 800ed22:	701a      	strb	r2, [r3, #0]
            break;
 800ed24:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800ed26:	23e0      	movs	r3, #224	; 0xe0
 800ed28:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800ed2a:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed2c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800ed2e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800ed30:	4b09      	ldr	r3, [pc, #36]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed32:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800ed34:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800ed36:	4809      	ldr	r0, [pc, #36]	; (800ed5c <LmhpComplianceTxProcess+0xd8>)
 800ed38:	f00d fb32 	bl	801c3a0 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800ed3c:	4b08      	ldr	r3, [pc, #32]	; (800ed60 <LmhpComplianceTxProcess+0xdc>)
 800ed3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed40:	4a05      	ldr	r2, [pc, #20]	; (800ed58 <LmhpComplianceTxProcess+0xd4>)
 800ed42:	78d2      	ldrb	r2, [r2, #3]
 800ed44:	4611      	mov	r1, r2
 800ed46:	4638      	mov	r0, r7
 800ed48:	2201      	movs	r2, #1
 800ed4a:	4798      	blx	r3
 800ed4c:	4603      	mov	r3, r0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20000d08 	.word	0x20000d08
 800ed5c:	20000cf0 	.word	0x20000cf0
 800ed60:	200000e4 	.word	0x200000e4

0800ed64 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b0a2      	sub	sp, #136	; 0x88
 800ed68:	af02      	add	r7, sp, #8
 800ed6a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ed6c:	4ba3      	ldr	r3, [pc, #652]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	f083 0301 	eor.w	r3, r3, #1
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f040 81c2 	bne.w	800f100 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	7b5b      	ldrb	r3, [r3, #13]
 800ed80:	f083 0301 	eor.w	r3, r3, #1
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f040 81bc 	bne.w	800f104 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800ed8c:	4b9b      	ldr	r3, [pc, #620]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00c      	beq.n	800edae <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	7b9b      	ldrb	r3, [r3, #14]
 800ed98:	f083 0301 	eor.w	r3, r3, #1
 800ed9c:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d005      	beq.n	800edae <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800eda2:	4b96      	ldr	r3, [pc, #600]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800eda4:	899b      	ldrh	r3, [r3, #12]
 800eda6:	3301      	adds	r3, #1
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	4b94      	ldr	r3, [pc, #592]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800edac:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	78db      	ldrb	r3, [r3, #3]
 800edb2:	2be0      	cmp	r3, #224	; 0xe0
 800edb4:	f040 81a8 	bne.w	800f108 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800edb8:	4b90      	ldr	r3, [pc, #576]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800edba:	785b      	ldrb	r3, [r3, #1]
 800edbc:	f083 0301 	eor.w	r3, r3, #1
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d060      	beq.n	800ee88 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	7b1b      	ldrb	r3, [r3, #12]
 800edca:	2b04      	cmp	r3, #4
 800edcc:	f040 81a1 	bne.w	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	f040 819b 	bne.w	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	3301      	adds	r3, #1
 800ede2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	f040 8194 	bne.w	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	3302      	adds	r3, #2
 800edf0:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	f040 818d 	bne.w	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	3303      	adds	r3, #3
 800edfe:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	f040 8186 	bne.w	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800ee06:	4b7d      	ldr	r3, [pc, #500]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee08:	2200      	movs	r2, #0
 800ee0a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800ee0c:	4b7b      	ldr	r3, [pc, #492]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee0e:	22e0      	movs	r2, #224	; 0xe0
 800ee10:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800ee12:	4b7a      	ldr	r3, [pc, #488]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee14:	2202      	movs	r2, #2
 800ee16:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800ee18:	4b78      	ldr	r3, [pc, #480]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800ee1e:	4b77      	ldr	r3, [pc, #476]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800ee24:	4b75      	ldr	r3, [pc, #468]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800ee2a:	4b74      	ldr	r3, [pc, #464]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800ee30:	4b72      	ldr	r3, [pc, #456]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee32:	2201      	movs	r2, #1
 800ee34:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800ee36:	4b71      	ldr	r3, [pc, #452]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee38:	2201      	movs	r2, #1
 800ee3a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800ee3c:	2304      	movs	r3, #4
 800ee3e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800ee40:	2301      	movs	r3, #1
 800ee42:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ee44:	f107 0308 	add.w	r3, r7, #8
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f004 f867 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800ee4e:	2000      	movs	r0, #0
 800ee50:	f004 fdf4 	bl	8013a3c <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800ee54:	4b6a      	ldr	r3, [pc, #424]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800ee5e:	4b68      	ldr	r3, [pc, #416]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800ee66:	2300      	movs	r3, #0
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	4b66      	ldr	r3, [pc, #408]	; (800f004 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f04f 31ff 	mov.w	r1, #4294967295
 800ee72:	4865      	ldr	r0, [pc, #404]	; (800f008 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ee74:	f00d fa5e 	bl	801c334 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800ee78:	f241 3188 	movw	r1, #5000	; 0x1388
 800ee7c:	4862      	ldr	r0, [pc, #392]	; (800f008 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ee7e:	f00d fb6d 	bl	801c55c <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800ee82:	f7ff feff 	bl	800ec84 <LmhpComplianceTxProcess>
 800ee86:	e144      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	781a      	ldrb	r2, [r3, #0]
 800ee8e:	4b5b      	ldr	r3, [pc, #364]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee90:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800ee92:	4b5a      	ldr	r3, [pc, #360]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ee94:	789b      	ldrb	r3, [r3, #2]
 800ee96:	2b0a      	cmp	r3, #10
 800ee98:	f200 8138 	bhi.w	800f10c <LmhpComplianceOnMcpsIndication+0x3a8>
 800ee9c:	a201      	add	r2, pc, #4	; (adr r2, 800eea4 <LmhpComplianceOnMcpsIndication+0x140>)
 800ee9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea2:	bf00      	nop
 800eea4:	0800eed1 	.word	0x0800eed1
 800eea8:	0800ef1b 	.word	0x0800ef1b
 800eeac:	0800ef23 	.word	0x0800ef23
 800eeb0:	0800ef31 	.word	0x0800ef31
 800eeb4:	0800ef3f 	.word	0x0800ef3f
 800eeb8:	0800ef97 	.word	0x0800ef97
 800eebc:	0800efa9 	.word	0x0800efa9
 800eec0:	0800f011 	.word	0x0800f011
 800eec4:	0800f0b9 	.word	0x0800f0b9
 800eec8:	0800f0cb 	.word	0x0800f0cb
 800eecc:	0800f0e5 	.word	0x0800f0e5
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800eed0:	484d      	ldr	r0, [pc, #308]	; (800f008 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800eed2:	f00d fad3 	bl	801c47c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800eed6:	4b49      	ldr	r3, [pc, #292]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800eed8:	2200      	movs	r2, #0
 800eeda:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800eedc:	4b47      	ldr	r3, [pc, #284]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800eede:	2200      	movs	r2, #0
 800eee0:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800eee2:	2304      	movs	r3, #4
 800eee4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800eee6:	4b46      	ldr	r3, [pc, #280]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800eeee:	f107 0308 	add.w	r3, r7, #8
 800eef2:	4618      	mov	r0, r3
 800eef4:	f004 f812 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800eef8:	4b41      	ldr	r3, [pc, #260]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	785b      	ldrb	r3, [r3, #1]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f004 fd9c 	bl	8013a3c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800ef04:	4b3e      	ldr	r3, [pc, #248]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 8100 	beq.w	800f110 <LmhpComplianceOnMcpsIndication+0x3ac>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800ef10:	4b3b      	ldr	r3, [pc, #236]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	4798      	blx	r3
                }
            }
            break;
 800ef18:	e0fa      	b.n	800f110 <LmhpComplianceOnMcpsIndication+0x3ac>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800ef1a:	4b38      	ldr	r3, [pc, #224]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	719a      	strb	r2, [r3, #6]
            break;
 800ef20:	e0f7      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800ef22:	4b36      	ldr	r3, [pc, #216]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef24:	2201      	movs	r2, #1
 800ef26:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800ef28:	4b34      	ldr	r3, [pc, #208]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	709a      	strb	r2, [r3, #2]
            break;
 800ef2e:	e0f0      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800ef30:	4b32      	ldr	r3, [pc, #200]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef32:	2200      	movs	r2, #0
 800ef34:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800ef36:	4b31      	ldr	r3, [pc, #196]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef38:	2201      	movs	r2, #1
 800ef3a:	709a      	strb	r2, [r3, #2]
            break;
 800ef3c:	e0e9      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	7b1a      	ldrb	r2, [r3, #12]
 800ef42:	4b2e      	ldr	r3, [pc, #184]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef44:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800ef46:	4b2d      	ldr	r3, [pc, #180]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	2204      	movs	r2, #4
 800ef4c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800ef4e:	2301      	movs	r3, #1
 800ef50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ef54:	e012      	b.n	800ef7c <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	689a      	ldr	r2, [r3, #8]
 800ef5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef5e:	4413      	add	r3, r2
 800ef60:	781a      	ldrb	r2, [r3, #0]
 800ef62:	4b26      	ldr	r3, [pc, #152]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef64:	6899      	ldr	r1, [r3, #8]
 800ef66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef6a:	440b      	add	r3, r1
 800ef6c:	3201      	adds	r2, #1
 800ef6e:	b2d2      	uxtb	r2, r2
 800ef70:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800ef72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef76:	3301      	adds	r3, #1
 800ef78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ef7c:	4b1f      	ldr	r3, [pc, #124]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef7e:	795a      	ldrb	r2, [r3, #5]
 800ef80:	4b1e      	ldr	r3, [pc, #120]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800ef82:	799b      	ldrb	r3, [r3, #6]
 800ef84:	4293      	cmp	r3, r2
 800ef86:	bf28      	it	cs
 800ef88:	4613      	movcs	r3, r2
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d3e0      	bcc.n	800ef56 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800ef94:	e0bd      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800ef96:	2304      	movs	r3, #4
 800ef98:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800ef9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800efa0:	4618      	mov	r0, r3
 800efa2:	f004 fb15 	bl	80135d0 <LoRaMacMlmeRequest>
            }
            break;
 800efa6:	e0b4      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800efa8:	4817      	ldr	r0, [pc, #92]	; (800f008 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800efaa:	f00d fa67 	bl	801c47c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800efae:	4b13      	ldr	r3, [pc, #76]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800efb4:	4b11      	ldr	r3, [pc, #68]	; (800effc <LmhpComplianceOnMcpsIndication+0x298>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR setting
                mibReq.Type = MIB_ADR;
 800efba:	2304      	movs	r3, #4
 800efbc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800efbe:	4b10      	ldr	r3, [pc, #64]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800efc6:	f107 0308 	add.w	r3, r7, #8
 800efca:	4618      	mov	r0, r3
 800efcc:	f003 ffa6 	bl	8012f1c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800efd0:	4b0b      	ldr	r3, [pc, #44]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	785b      	ldrb	r3, [r3, #1]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f004 fd30 	bl	8013a3c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800efdc:	4b08      	ldr	r3, [pc, #32]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d003      	beq.n	800efee <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800efe6:	4b06      	ldr	r3, [pc, #24]	; (800f000 <LmhpComplianceOnMcpsIndication+0x29c>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800efee:	4b07      	ldr	r3, [pc, #28]	; (800f00c <LmhpComplianceOnMcpsIndication+0x2a8>)
 800eff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff2:	2101      	movs	r1, #1
 800eff4:	2002      	movs	r0, #2
 800eff6:	4798      	blx	r3
            }
            break;
 800eff8:	e08b      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
 800effa:	bf00      	nop
 800effc:	20000d08 	.word	0x20000d08
 800f000:	20000d1c 	.word	0x20000d1c
 800f004:	0800f129 	.word	0x0800f129
 800f008:	20000cf0 	.word	0x20000cf0
 800f00c:	200000e4 	.word	0x200000e4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	7b1b      	ldrb	r3, [r3, #12]
 800f014:	2b03      	cmp	r3, #3
 800f016:	d113      	bne.n	800f040 <LmhpComplianceOnMcpsIndication+0x2dc>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f018:	2305      	movs	r3, #5
 800f01a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	3301      	adds	r3, #1
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	021b      	lsls	r3, r3, #8
 800f028:	b21a      	sxth	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	3302      	adds	r3, #2
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	b21b      	sxth	r3, r3
 800f034:	4313      	orrs	r3, r2
 800f036:	b21b      	sxth	r3, r3
 800f038:	b29b      	uxth	r3, r3
 800f03a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800f03e:	e032      	b.n	800f0a6 <LmhpComplianceOnMcpsIndication+0x342>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	7b1b      	ldrb	r3, [r3, #12]
 800f044:	2b07      	cmp	r3, #7
 800f046:	d12e      	bne.n	800f0a6 <LmhpComplianceOnMcpsIndication+0x342>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800f048:	2306      	movs	r3, #6
 800f04a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	3301      	adds	r3, #1
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	021b      	lsls	r3, r3, #8
 800f058:	b21a      	sxth	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	3302      	adds	r3, #2
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	b21b      	sxth	r3, r3
 800f064:	4313      	orrs	r3, r2
 800f066:	b21b      	sxth	r3, r3
 800f068:	b29b      	uxth	r3, r3
 800f06a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	3303      	adds	r3, #3
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	041a      	lsls	r2, r3, #16
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	3304      	adds	r3, #4
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	021b      	lsls	r3, r3, #8
 800f082:	4313      	orrs	r3, r2
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	6892      	ldr	r2, [r2, #8]
 800f088:	3205      	adds	r2, #5
 800f08a:	7812      	ldrb	r2, [r2, #0]
 800f08c:	4313      	orrs	r3, r2
 800f08e:	461a      	mov	r2, r3
 800f090:	2364      	movs	r3, #100	; 0x64
 800f092:	fb02 f303 	mul.w	r3, r2, r3
 800f096:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	3306      	adds	r3, #6
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	b25b      	sxtb	r3, r3
 800f0a2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800f0a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f004 fa90 	bl	80135d0 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800f0b0:	4b19      	ldr	r3, [pc, #100]	; (800f118 <LmhpComplianceOnMcpsIndication+0x3b4>)
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	709a      	strb	r2, [r3, #2]
            }
            break;
 800f0b6:	e02c      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800f0b8:	230a      	movs	r3, #10
 800f0ba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800f0be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f004 fa84 	bl	80135d0 <LoRaMacMlmeRequest>
            }
            break;
 800f0c8:	e023      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f0d8:	f107 0308 	add.w	r3, r7, #8
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f003 ff1d 	bl	8012f1c <LoRaMacMibSetRequestConfirm>
            }
            break;
 800f0e2:	e016      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800f0e4:	230d      	movs	r3, #13
 800f0e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	689b      	ldr	r3, [r3, #8]
 800f0ee:	785b      	ldrb	r3, [r3, #1]
 800f0f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800f0f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f004 fa69 	bl	80135d0 <LoRaMacMlmeRequest>
            }
            break;
 800f0fe:	e008      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f100:	bf00      	nop
 800f102:	e006      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f104:	bf00      	nop
 800f106:	e004      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        return;
 800f108:	bf00      	nop
 800f10a:	e002      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
        default:
            break;
 800f10c:	bf00      	nop
 800f10e:	e000      	b.n	800f112 <LmhpComplianceOnMcpsIndication+0x3ae>
            break;
 800f110:	bf00      	nop
        }
    }
}
 800f112:	3780      	adds	r7, #128	; 0x80
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	20000d08 	.word	0x20000d08

0800f11c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f11c:	b480      	push	{r7}
 800f11e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800f120:	bf00      	nop
 800f122:	46bd      	mov	sp, r7
 800f124:	bc80      	pop	{r7}
 800f126:	4770      	bx	lr

0800f128 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800f130:	f7ff fda8 	bl	800ec84 <LmhpComplianceTxProcess>
}
 800f134:	bf00      	nop
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800f13c:	b590      	push	{r4, r7, lr}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f142:	f00d fab5 	bl	801c6b0 <UTIL_TIMER_GetCurrentTime>
 800f146:	4603      	mov	r3, r0
 800f148:	4a16      	ldr	r2, [pc, #88]	; (800f1a4 <OnRadioTxDone+0x68>)
 800f14a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f14c:	4c16      	ldr	r4, [pc, #88]	; (800f1a8 <OnRadioTxDone+0x6c>)
 800f14e:	463b      	mov	r3, r7
 800f150:	4618      	mov	r0, r3
 800f152:	f00c fc27 	bl	801b9a4 <SysTimeGet>
 800f156:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800f15a:	463a      	mov	r2, r7
 800f15c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f160:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f164:	4a11      	ldr	r2, [pc, #68]	; (800f1ac <OnRadioTxDone+0x70>)
 800f166:	7813      	ldrb	r3, [r2, #0]
 800f168:	f043 0310 	orr.w	r3, r3, #16
 800f16c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f16e:	4b0e      	ldr	r3, [pc, #56]	; (800f1a8 <OnRadioTxDone+0x6c>)
 800f170:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00a      	beq.n	800f18e <OnRadioTxDone+0x52>
 800f178:	4b0b      	ldr	r3, [pc, #44]	; (800f1a8 <OnRadioTxDone+0x6c>)
 800f17a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f17e:	691b      	ldr	r3, [r3, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d004      	beq.n	800f18e <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f184:	4b08      	ldr	r3, [pc, #32]	; (800f1a8 <OnRadioTxDone+0x6c>)
 800f186:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f18e:	4b08      	ldr	r3, [pc, #32]	; (800f1b0 <OnRadioTxDone+0x74>)
 800f190:	2201      	movs	r2, #1
 800f192:	2100      	movs	r1, #0
 800f194:	2002      	movs	r0, #2
 800f196:	f00d fb7b 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
}
 800f19a:	bf00      	nop
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd90      	pop	{r4, r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	20002080 	.word	0x20002080
 800f1a8:	20000d20 	.word	0x20000d20
 800f1ac:	2000207c 	.word	0x2000207c
 800f1b0:	0801d2c4 	.word	0x0801d2c4

0800f1b4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	4608      	mov	r0, r1
 800f1be:	4611      	mov	r1, r2
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	817b      	strh	r3, [r7, #10]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	813b      	strh	r3, [r7, #8]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f1ce:	f00d fa6f 	bl	801c6b0 <UTIL_TIMER_GetCurrentTime>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	4a16      	ldr	r2, [pc, #88]	; (800f230 <OnRadioRxDone+0x7c>)
 800f1d6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f1d8:	4a15      	ldr	r2, [pc, #84]	; (800f230 <OnRadioRxDone+0x7c>)
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f1de:	4a14      	ldr	r2, [pc, #80]	; (800f230 <OnRadioRxDone+0x7c>)
 800f1e0:	897b      	ldrh	r3, [r7, #10]
 800f1e2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f1e4:	4a12      	ldr	r2, [pc, #72]	; (800f230 <OnRadioRxDone+0x7c>)
 800f1e6:	893b      	ldrh	r3, [r7, #8]
 800f1e8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f1ea:	4a11      	ldr	r2, [pc, #68]	; (800f230 <OnRadioRxDone+0x7c>)
 800f1ec:	79fb      	ldrb	r3, [r7, #7]
 800f1ee:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f1f0:	4a10      	ldr	r2, [pc, #64]	; (800f234 <OnRadioRxDone+0x80>)
 800f1f2:	7813      	ldrb	r3, [r2, #0]
 800f1f4:	f043 0308 	orr.w	r3, r3, #8
 800f1f8:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f1fa:	4b0f      	ldr	r3, [pc, #60]	; (800f238 <OnRadioRxDone+0x84>)
 800f1fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00a      	beq.n	800f21a <OnRadioRxDone+0x66>
 800f204:	4b0c      	ldr	r3, [pc, #48]	; (800f238 <OnRadioRxDone+0x84>)
 800f206:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f20a:	691b      	ldr	r3, [r3, #16]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d004      	beq.n	800f21a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f210:	4b09      	ldr	r3, [pc, #36]	; (800f238 <OnRadioRxDone+0x84>)
 800f212:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f216:	691b      	ldr	r3, [r3, #16]
 800f218:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f21a:	4b08      	ldr	r3, [pc, #32]	; (800f23c <OnRadioRxDone+0x88>)
 800f21c:	2201      	movs	r2, #1
 800f21e:	2100      	movs	r1, #0
 800f220:	2002      	movs	r0, #2
 800f222:	f00d fb35 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
}
 800f226:	bf00      	nop
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	20002084 	.word	0x20002084
 800f234:	2000207c 	.word	0x2000207c
 800f238:	20000d20 	.word	0x20000d20
 800f23c:	0801d2d4 	.word	0x0801d2d4

0800f240 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f244:	4a0e      	ldr	r2, [pc, #56]	; (800f280 <OnRadioTxTimeout+0x40>)
 800f246:	7813      	ldrb	r3, [r2, #0]
 800f248:	f043 0304 	orr.w	r3, r3, #4
 800f24c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f24e:	4b0d      	ldr	r3, [pc, #52]	; (800f284 <OnRadioTxTimeout+0x44>)
 800f250:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00a      	beq.n	800f26e <OnRadioTxTimeout+0x2e>
 800f258:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <OnRadioTxTimeout+0x44>)
 800f25a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d004      	beq.n	800f26e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f264:	4b07      	ldr	r3, [pc, #28]	; (800f284 <OnRadioTxTimeout+0x44>)
 800f266:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f26e:	4b06      	ldr	r3, [pc, #24]	; (800f288 <OnRadioTxTimeout+0x48>)
 800f270:	2201      	movs	r2, #1
 800f272:	2100      	movs	r1, #0
 800f274:	2002      	movs	r0, #2
 800f276:	f00d fb0b 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
}
 800f27a:	bf00      	nop
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	2000207c 	.word	0x2000207c
 800f284:	20000d20 	.word	0x20000d20
 800f288:	0801d2e4 	.word	0x0801d2e4

0800f28c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f290:	4a0b      	ldr	r2, [pc, #44]	; (800f2c0 <OnRadioRxError+0x34>)
 800f292:	7813      	ldrb	r3, [r2, #0]
 800f294:	f043 0302 	orr.w	r3, r3, #2
 800f298:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f29a:	4b0a      	ldr	r3, [pc, #40]	; (800f2c4 <OnRadioRxError+0x38>)
 800f29c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00a      	beq.n	800f2ba <OnRadioRxError+0x2e>
 800f2a4:	4b07      	ldr	r3, [pc, #28]	; (800f2c4 <OnRadioRxError+0x38>)
 800f2a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d004      	beq.n	800f2ba <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f2b0:	4b04      	ldr	r3, [pc, #16]	; (800f2c4 <OnRadioRxError+0x38>)
 800f2b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	4798      	blx	r3
    }
}
 800f2ba:	bf00      	nop
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	2000207c 	.word	0x2000207c
 800f2c4:	20000d20 	.word	0x20000d20

0800f2c8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f2cc:	4a0e      	ldr	r2, [pc, #56]	; (800f308 <OnRadioRxTimeout+0x40>)
 800f2ce:	7813      	ldrb	r3, [r2, #0]
 800f2d0:	f043 0301 	orr.w	r3, r3, #1
 800f2d4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f2d6:	4b0d      	ldr	r3, [pc, #52]	; (800f30c <OnRadioRxTimeout+0x44>)
 800f2d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00a      	beq.n	800f2f6 <OnRadioRxTimeout+0x2e>
 800f2e0:	4b0a      	ldr	r3, [pc, #40]	; (800f30c <OnRadioRxTimeout+0x44>)
 800f2e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d004      	beq.n	800f2f6 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f2ec:	4b07      	ldr	r3, [pc, #28]	; (800f30c <OnRadioRxTimeout+0x44>)
 800f2ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f2f6:	4b06      	ldr	r3, [pc, #24]	; (800f310 <OnRadioRxTimeout+0x48>)
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	2100      	movs	r1, #0
 800f2fc:	2002      	movs	r0, #2
 800f2fe:	f00d fac7 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
}
 800f302:	bf00      	nop
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2000207c 	.word	0x2000207c
 800f30c:	20000d20 	.word	0x20000d20
 800f310:	0801d2f4 	.word	0x0801d2f4

0800f314 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f314:	b480      	push	{r7}
 800f316:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f318:	4b08      	ldr	r3, [pc, #32]	; (800f33c <UpdateRxSlotIdleState+0x28>)
 800f31a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d004      	beq.n	800f32c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f322:	4b07      	ldr	r3, [pc, #28]	; (800f340 <UpdateRxSlotIdleState+0x2c>)
 800f324:	2206      	movs	r2, #6
 800f326:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f32a:	e003      	b.n	800f334 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f32c:	4b04      	ldr	r3, [pc, #16]	; (800f340 <UpdateRxSlotIdleState+0x2c>)
 800f32e:	2202      	movs	r2, #2
 800f330:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
}
 800f334:	bf00      	nop
 800f336:	46bd      	mov	sp, r7
 800f338:	bc80      	pop	{r7}
 800f33a:	4770      	bx	lr
 800f33c:	2000122c 	.word	0x2000122c
 800f340:	20000d20 	.word	0x20000d20

0800f344 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08e      	sub	sp, #56	; 0x38
 800f348:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f34a:	4b44      	ldr	r3, [pc, #272]	; (800f45c <ProcessRadioTxDone+0x118>)
 800f34c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f350:	2b02      	cmp	r3, #2
 800f352:	d002      	beq.n	800f35a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f354:	4b42      	ldr	r3, [pc, #264]	; (800f460 <ProcessRadioTxDone+0x11c>)
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f35a:	4b42      	ldr	r3, [pc, #264]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f35c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800f360:	4619      	mov	r1, r3
 800f362:	4841      	ldr	r0, [pc, #260]	; (800f468 <ProcessRadioTxDone+0x124>)
 800f364:	f00d f8fa 	bl	801c55c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f368:	483f      	ldr	r0, [pc, #252]	; (800f468 <ProcessRadioTxDone+0x124>)
 800f36a:	f00d f819 	bl	801c3a0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f36e:	4b3d      	ldr	r3, [pc, #244]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f370:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f374:	4619      	mov	r1, r3
 800f376:	483d      	ldr	r0, [pc, #244]	; (800f46c <ProcessRadioTxDone+0x128>)
 800f378:	f00d f8f0 	bl	801c55c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f37c:	483b      	ldr	r0, [pc, #236]	; (800f46c <ProcessRadioTxDone+0x128>)
 800f37e:	f00d f80f 	bl	801c3a0 <UTIL_TIMER_Start>
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f382:	4b36      	ldr	r3, [pc, #216]	; (800f45c <ProcessRadioTxDone+0x118>)
 800f384:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d004      	beq.n	800f396 <ProcessRadioTxDone+0x52>
 800f38c:	4b35      	ldr	r3, [pc, #212]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f38e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f392:	2b00      	cmp	r3, #0
 800f394:	d019      	beq.n	800f3ca <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f396:	2316      	movs	r3, #22
 800f398:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f39c:	4b2f      	ldr	r3, [pc, #188]	; (800f45c <ProcessRadioTxDone+0x118>)
 800f39e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3a2:	f107 0220 	add.w	r2, r7, #32
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f006 fc09 	bl	8015bc0 <RegionGetPhyParam>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f3b2:	4b2c      	ldr	r3, [pc, #176]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f3b4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	4619      	mov	r1, r3
 800f3be:	482c      	ldr	r0, [pc, #176]	; (800f470 <ProcessRadioTxDone+0x12c>)
 800f3c0:	f00d f8cc 	bl	801c55c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f3c4:	482a      	ldr	r0, [pc, #168]	; (800f470 <ProcessRadioTxDone+0x12c>)
 800f3c6:	f00c ffeb 	bl	801c3a0 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f3ca:	4b2a      	ldr	r3, [pc, #168]	; (800f474 <ProcessRadioTxDone+0x130>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4a23      	ldr	r2, [pc, #140]	; (800f45c <ProcessRadioTxDone+0x118>)
 800f3d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f3d2:	4b24      	ldr	r3, [pc, #144]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f3d4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f3d8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f3da:	4b26      	ldr	r3, [pc, #152]	; (800f474 <ProcessRadioTxDone+0x130>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f3e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f00c fb15 	bl	801ba14 <SysTimeGetMcuTime>
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	4b1b      	ldr	r3, [pc, #108]	; (800f45c <ProcessRadioTxDone+0x118>)
 800f3ee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800f3f2:	9200      	str	r2, [sp, #0]
 800f3f4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f3f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f3fc:	ca06      	ldmia	r2, {r1, r2}
 800f3fe:	f00c fa6a 	bl	801b8d6 <SysTimeSub>
 800f402:	f107 0314 	add.w	r3, r7, #20
 800f406:	463a      	mov	r2, r7
 800f408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f40c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f410:	4b14      	ldr	r3, [pc, #80]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f412:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f416:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f418:	2301      	movs	r3, #1
 800f41a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f41c:	4b0f      	ldr	r3, [pc, #60]	; (800f45c <ProcessRadioTxDone+0x118>)
 800f41e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800f426:	2300      	movs	r3, #0
 800f428:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f42a:	4b0c      	ldr	r3, [pc, #48]	; (800f45c <ProcessRadioTxDone+0x118>)
 800f42c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f430:	f107 0208 	add.w	r2, r7, #8
 800f434:	4611      	mov	r1, r2
 800f436:	4618      	mov	r0, r3
 800f438:	f006 fbda 	bl	8015bf0 <RegionSetBandTxDone>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800f43c:	4b09      	ldr	r3, [pc, #36]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f43e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f442:	f083 0301 	eor.w	r3, r3, #1
 800f446:	b2db      	uxtb	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d003      	beq.n	800f454 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f44c:	4b05      	ldr	r3, [pc, #20]	; (800f464 <ProcessRadioTxDone+0x120>)
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
#endif /* LORAMAC_VERSION */
}
 800f454:	bf00      	nop
 800f456:	3730      	adds	r7, #48	; 0x30
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	2000122c 	.word	0x2000122c
 800f460:	0801d920 	.word	0x0801d920
 800f464:	20000d20 	.word	0x20000d20
 800f468:	200010a0 	.word	0x200010a0
 800f46c:	200010b8 	.word	0x200010b8
 800f470:	20001118 	.word	0x20001118
 800f474:	20002080 	.word	0x20002080

0800f478 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f47c:	4b10      	ldr	r3, [pc, #64]	; (800f4c0 <PrepareRxDoneAbort+0x48>)
 800f47e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f486:	4a0e      	ldr	r2, [pc, #56]	; (800f4c0 <PrepareRxDoneAbort+0x48>)
 800f488:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800f48c:	4b0c      	ldr	r3, [pc, #48]	; (800f4c0 <PrepareRxDoneAbort+0x48>)
 800f48e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f492:	2b00      	cmp	r3, #0
 800f494:	d002      	beq.n	800f49c <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800f496:	2000      	movs	r0, #0
 800f498:	f001 f8f2 	bl	8010680 <OnAckTimeoutTimerEvent>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f49c:	4a08      	ldr	r2, [pc, #32]	; (800f4c0 <PrepareRxDoneAbort+0x48>)
 800f49e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f4a2:	f043 0302 	orr.w	r3, r3, #2
 800f4a6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f4aa:	4a05      	ldr	r2, [pc, #20]	; (800f4c0 <PrepareRxDoneAbort+0x48>)
 800f4ac:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f4b0:	f043 0320 	orr.w	r3, r3, #32
 800f4b4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

    UpdateRxSlotIdleState( );
 800f4b8:	f7ff ff2c 	bl	800f314 <UpdateRxSlotIdleState>
}
 800f4bc:	bf00      	nop
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	20000d20 	.word	0x20000d20

0800f4c4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f4c4:	b5b0      	push	{r4, r5, r7, lr}
 800f4c6:	b0a6      	sub	sp, #152	; 0x98
 800f4c8:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f4ca:	2313      	movs	r3, #19
 800f4cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f4d0:	4bb9      	ldr	r3, [pc, #740]	; (800f7b8 <ProcessRadioRxDone+0x2f4>)
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f4d6:	4bb8      	ldr	r3, [pc, #736]	; (800f7b8 <ProcessRadioRxDone+0x2f4>)
 800f4d8:	891b      	ldrh	r3, [r3, #8]
 800f4da:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800f4de:	4bb6      	ldr	r3, [pc, #728]	; (800f7b8 <ProcessRadioRxDone+0x2f4>)
 800f4e0:	895b      	ldrh	r3, [r3, #10]
 800f4e2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800f4e6:	4bb4      	ldr	r3, [pc, #720]	; (800f7b8 <ProcessRadioRxDone+0x2f4>)
 800f4e8:	7b1b      	ldrb	r3, [r3, #12]
 800f4ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f4f8:	4bb0      	ldr	r3, [pc, #704]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f4fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f4fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f508:	2301      	movs	r3, #1
 800f50a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f50e:	4bac      	ldr	r3, [pc, #688]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f510:	2200      	movs	r2, #0
 800f512:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800f516:	4aaa      	ldr	r2, [pc, #680]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f518:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800f51c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800f520:	4aa7      	ldr	r2, [pc, #668]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f522:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f526:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f52a:	4ba5      	ldr	r3, [pc, #660]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f52c:	f893 2484 	ldrb.w	r2, [r3, #1156]	; 0x484
 800f530:	4ba3      	ldr	r3, [pc, #652]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f532:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 800f536:	4ba2      	ldr	r3, [pc, #648]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f538:	2200      	movs	r2, #0
 800f53a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800f53e:	4ba0      	ldr	r3, [pc, #640]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f540:	2200      	movs	r2, #0
 800f542:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800f546:	4b9e      	ldr	r3, [pc, #632]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800f54e:	4b9c      	ldr	r3, [pc, #624]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f550:	2200      	movs	r2, #0
 800f552:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800f556:	4b9a      	ldr	r3, [pc, #616]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800f55e:	4b98      	ldr	r3, [pc, #608]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800f566:	4b96      	ldr	r3, [pc, #600]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f568:	2200      	movs	r2, #0
 800f56a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f56e:	4b94      	ldr	r3, [pc, #592]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f570:	2200      	movs	r2, #0
 800f572:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f576:	4b92      	ldr	r3, [pc, #584]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f578:	2200      	movs	r2, #0
 800f57a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800f57e:	4b90      	ldr	r3, [pc, #576]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f580:	2200      	movs	r2, #0
 800f582:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f586:	4b8e      	ldr	r3, [pc, #568]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f588:	2200      	movs	r2, #0
 800f58a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f58e:	4b8d      	ldr	r3, [pc, #564]	; (800f7c4 <ProcessRadioRxDone+0x300>)
 800f590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f592:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f594:	488c      	ldr	r0, [pc, #560]	; (800f7c8 <ProcessRadioRxDone+0x304>)
 800f596:	f00c ff71 	bl	801c47c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f59a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f59e:	4619      	mov	r1, r3
 800f5a0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800f5a2:	f004 fbaa 	bl	8013cfa <LoRaMacClassBRxBeacon>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00a      	beq.n	800f5c2 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f5ac:	4a84      	ldr	r2, [pc, #528]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f5ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800f5b2:	f8a2 3476 	strh.w	r3, [r2, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f5b6:	4a82      	ldr	r2, [pc, #520]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f5b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f5bc:	f882 3478 	strb.w	r3, [r2, #1144]	; 0x478
        return;
 800f5c0:	e3c7      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f5c2:	4b7e      	ldr	r3, [pc, #504]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f5c4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d11e      	bne.n	800f60a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f5cc:	f004 fba8 	bl	8013d20 <LoRaMacClassBIsPingExpected>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00a      	beq.n	800f5ec <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	f004 fb59 	bl	8013c8e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f5dc:	2000      	movs	r0, #0
 800f5de:	f004 fb7a 	bl	8013cd6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f5e2:	4b77      	ldr	r3, [pc, #476]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f5e4:	2204      	movs	r2, #4
 800f5e6:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800f5ea:	e00e      	b.n	800f60a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f5ec:	f004 fb9f 	bl	8013d2e <LoRaMacClassBIsMulticastExpected>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d009      	beq.n	800f60a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	f004 fb53 	bl	8013ca2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	f004 fb73 	bl	8013ce8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f602:	4b6f      	ldr	r3, [pc, #444]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f604:	2205      	movs	r2, #5
 800f606:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f60a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f60e:	1c5a      	adds	r2, r3, #1
 800f610:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800f614:	461a      	mov	r2, r3
 800f616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f618:	4413      	add	r3, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800f620:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f624:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	3b01      	subs	r3, #1
 800f62c:	2b06      	cmp	r3, #6
 800f62e:	f200 836a 	bhi.w	800fd06 <ProcessRadioRxDone+0x842>
 800f632:	a201      	add	r2, pc, #4	; (adr r2, 800f638 <ProcessRadioRxDone+0x174>)
 800f634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f638:	0800f655 	.word	0x0800f655
 800f63c:	0800fd07 	.word	0x0800fd07
 800f640:	0800f7d5 	.word	0x0800f7d5
 800f644:	0800fd07 	.word	0x0800fd07
 800f648:	0800f7cd 	.word	0x0800f7cd
 800f64c:	0800fd07 	.word	0x0800fd07
 800f650:	0800fcad 	.word	0x0800fcad
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f654:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f658:	2b10      	cmp	r3, #16
 800f65a:	d806      	bhi.n	800f66a <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f65c:	4b58      	ldr	r3, [pc, #352]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f65e:	2201      	movs	r2, #1
 800f660:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f664:	f7ff ff08 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800f668:	e373      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
            }
            macMsgJoinAccept.Buffer = payload;
 800f66a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f66c:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800f66e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f672:	b2db      	uxtb	r3, r3
 800f674:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f676:	4b51      	ldr	r3, [pc, #324]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f678:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d006      	beq.n	800f68e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f680:	4b4f      	ldr	r3, [pc, #316]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f682:	2201      	movs	r2, #1
 800f684:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f688:	f7ff fef6 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800f68c:	e361      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f68e:	f7fe faa3 	bl	800dbd8 <SecureElementGetJoinEui>
 800f692:	4601      	mov	r1, r0
 800f694:	f107 0308 	add.w	r3, r7, #8
 800f698:	461a      	mov	r2, r3
 800f69a:	20ff      	movs	r0, #255	; 0xff
 800f69c:	f005 fd14 	bl	80150c8 <LoRaMacCryptoHandleJoinAccept>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f6a6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d172      	bne.n	800f794 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f6ae:	7c7b      	ldrb	r3, [r7, #17]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	4b42      	ldr	r3, [pc, #264]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f6b4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f6b8:	4b40      	ldr	r3, [pc, #256]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f6ba:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f6be:	7cbb      	ldrb	r3, [r7, #18]
 800f6c0:	021b      	lsls	r3, r3, #8
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	4a3d      	ldr	r2, [pc, #244]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f6c6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f6ca:	4b3c      	ldr	r3, [pc, #240]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f6cc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f6d0:	7cfb      	ldrb	r3, [r7, #19]
 800f6d2:	041b      	lsls	r3, r3, #16
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	4a39      	ldr	r2, [pc, #228]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f6d8:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	4a37      	ldr	r2, [pc, #220]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f6e0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f6e4:	7e3b      	ldrb	r3, [r7, #24]
 800f6e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	4b33      	ldr	r3, [pc, #204]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f6f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f6f4:	7e3b      	ldrb	r3, [r7, #24]
 800f6f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	4b2f      	ldr	r3, [pc, #188]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f700:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f704:	7e3b      	ldrb	r3, [r7, #24]
 800f706:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	461a      	mov	r2, r3
 800f70e:	4b2b      	ldr	r3, [pc, #172]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f710:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f714:	7e7b      	ldrb	r3, [r7, #25]
 800f716:	461a      	mov	r2, r3
 800f718:	4b28      	ldr	r3, [pc, #160]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f71a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800f71c:	4b27      	ldr	r3, [pc, #156]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800f724:	4b25      	ldr	r3, [pc, #148]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f726:	2201      	movs	r2, #1
 800f728:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800f72a:	4b24      	ldr	r3, [pc, #144]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f72e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f732:	fb02 f303 	mul.w	r3, r2, r3
 800f736:	4a21      	ldr	r2, [pc, #132]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f738:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f73a:	4b20      	ldr	r3, [pc, #128]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f73e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f742:	4a1e      	ldr	r2, [pc, #120]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f744:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800f746:	4b1d      	ldr	r3, [pc, #116]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f74e:	f107 0308 	add.w	r3, r7, #8
 800f752:	3312      	adds	r3, #18
 800f754:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f756:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	3b11      	subs	r3, #17
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f764:	4b15      	ldr	r3, [pc, #84]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f76a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f76e:	4611      	mov	r1, r2
 800f770:	4618      	mov	r0, r3
 800f772:	f006 fa77 	bl	8015c64 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f776:	4b11      	ldr	r3, [pc, #68]	; (800f7bc <ProcessRadioRxDone+0x2f8>)
 800f778:	2202      	movs	r2, #2
 800f77a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f77e:	2001      	movs	r0, #1
 800f780:	f004 ff9a 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00e      	beq.n	800f7a8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f78a:	2101      	movs	r1, #1
 800f78c:	2000      	movs	r0, #0
 800f78e:	f004 ff07 	bl	80145a0 <LoRaMacConfirmQueueSetStatus>
 800f792:	e009      	b.n	800f7a8 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f794:	2001      	movs	r0, #1
 800f796:	f004 ff8f 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d003      	beq.n	800f7a8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	2007      	movs	r0, #7
 800f7a4:	f004 fefc 	bl	80145a0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f7a8:	4a05      	ldr	r2, [pc, #20]	; (800f7c0 <ProcessRadioRxDone+0x2fc>)
 800f7aa:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800f7ae:	f043 0308 	orr.w	r3, r3, #8
 800f7b2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800f7b6:	e2ad      	b.n	800fd14 <ProcessRadioRxDone+0x850>
 800f7b8:	20002084 	.word	0x20002084
 800f7bc:	2000122c 	.word	0x2000122c
 800f7c0:	20000d20 	.word	0x20000d20
 800f7c4:	0801d920 	.word	0x0801d920
 800f7c8:	200010b8 	.word	0x200010b8
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f7cc:	4bb0      	ldr	r3, [pc, #704]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f7d4:	4baf      	ldr	r3, [pc, #700]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f7d6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f7da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f7de:	4bac      	ldr	r3, [pc, #688]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f7e0:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800f7e4:	b25b      	sxtb	r3, r3
 800f7e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f7ea:	230d      	movs	r3, #13
 800f7ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f7f0:	4ba8      	ldr	r3, [pc, #672]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f7f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d002      	beq.n	800f800 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f7fa:	230e      	movs	r3, #14
 800f7fc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f800:	4ba4      	ldr	r3, [pc, #656]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f806:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f80a:	4611      	mov	r1, r2
 800f80c:	4618      	mov	r0, r3
 800f80e:	f006 f9d7 	bl	8015bc0 <RegionGetPhyParam>
 800f812:	4603      	mov	r3, r0
 800f814:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f816:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f81a:	3b0d      	subs	r3, #13
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	b21b      	sxth	r3, r3
 800f820:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f824:	b21a      	sxth	r2, r3
 800f826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f828:	b21b      	sxth	r3, r3
 800f82a:	429a      	cmp	r2, r3
 800f82c:	dc03      	bgt.n	800f836 <ProcessRadioRxDone+0x372>
 800f82e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f832:	2b0b      	cmp	r3, #11
 800f834:	d806      	bhi.n	800f844 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f836:	4b96      	ldr	r3, [pc, #600]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f838:	2201      	movs	r2, #1
 800f83a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f83e:	f7ff fe1b 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800f842:	e286      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
            }
            macMsgData.Buffer = payload;
 800f844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f846:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800f848:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f852:	4b91      	ldr	r3, [pc, #580]	; (800fa98 <ProcessRadioRxDone+0x5d4>)
 800f854:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f856:	23ff      	movs	r3, #255	; 0xff
 800f858:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f85c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f860:	4618      	mov	r0, r3
 800f862:	f005 ff30 	bl	80156c6 <LoRaMacParserData>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d006      	beq.n	800f87a <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f86c:	4b88      	ldr	r3, [pc, #544]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f874:	f7ff fe00 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800f878:	e26b      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87c:	4a84      	ldr	r2, [pc, #528]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f87e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f882:	1cba      	adds	r2, r7, #2
 800f884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f888:	4611      	mov	r1, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f002 fc9e 	bl	80121cc <DetermineFrameType>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d006      	beq.n	800f8a4 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f896:	4b7e      	ldr	r3, [pc, #504]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f898:	2201      	movs	r2, #1
 800f89a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f89e:	f7ff fdeb 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800f8a2:	e256      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800f8b4:	e049      	b.n	800f94a <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f8b6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f8ba:	4a76      	ldr	r2, [pc, #472]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f8bc:	212c      	movs	r1, #44	; 0x2c
 800f8be:	fb01 f303 	mul.w	r3, r1, r3
 800f8c2:	4413      	add	r3, r2
 800f8c4:	33dc      	adds	r3, #220	; 0xdc
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d138      	bne.n	800f940 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f8ce:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f8d2:	4a70      	ldr	r2, [pc, #448]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f8d4:	212c      	movs	r1, #44	; 0x2c
 800f8d6:	fb01 f303 	mul.w	r3, r1, r3
 800f8da:	4413      	add	r3, r2
 800f8dc:	33da      	adds	r3, #218	; 0xda
 800f8de:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d02d      	beq.n	800f940 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f8ea:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f8ee:	4a69      	ldr	r2, [pc, #420]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f8f0:	212c      	movs	r1, #44	; 0x2c
 800f8f2:	fb01 f303 	mul.w	r3, r1, r3
 800f8f6:	4413      	add	r3, r2
 800f8f8:	33db      	adds	r3, #219	; 0xdb
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f900:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f904:	4a63      	ldr	r2, [pc, #396]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f906:	212c      	movs	r1, #44	; 0x2c
 800f908:	fb01 f303 	mul.w	r3, r1, r3
 800f90c:	4413      	add	r3, r2
 800f90e:	33f8      	adds	r3, #248	; 0xf8
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f916:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f91a:	4a5e      	ldr	r2, [pc, #376]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f91c:	212c      	movs	r1, #44	; 0x2c
 800f91e:	fb01 f303 	mul.w	r3, r1, r3
 800f922:	4413      	add	r3, r2
 800f924:	33dc      	adds	r3, #220	; 0xdc
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f92c:	4b59      	ldr	r3, [pc, #356]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f92e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f932:	2b02      	cmp	r3, #2
 800f934:	d10e      	bne.n	800f954 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f936:	4b56      	ldr	r3, [pc, #344]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f938:	2203      	movs	r2, #3
 800f93a:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
                    }
                    break;
 800f93e:	e009      	b.n	800f954 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f940:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f944:	3301      	adds	r3, #1
 800f946:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800f94a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d0b1      	beq.n	800f8b6 <ProcessRadioRxDone+0x3f2>
 800f952:	e000      	b.n	800f956 <ProcessRadioRxDone+0x492>
                    break;
 800f954:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f956:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d117      	bne.n	800f98e <ProcessRadioRxDone+0x4ca>
 800f95e:	78bb      	ldrb	r3, [r7, #2]
 800f960:	2b03      	cmp	r3, #3
 800f962:	d10d      	bne.n	800f980 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f964:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f968:	f003 0320 	and.w	r3, r3, #32
 800f96c:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f972:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f97a:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d006      	beq.n	800f98e <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f980:	4b43      	ldr	r3, [pc, #268]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f982:	2201      	movs	r2, #1
 800f984:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800f988:	f7ff fd76 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800f98c:	e1e1      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f98e:	2315      	movs	r3, #21
 800f990:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f994:	4b3f      	ldr	r3, [pc, #252]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f99a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f99e:	4611      	mov	r1, r2
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f006 f90d 	bl	8015bc0 <RegionGetPhyParam>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f9aa:	78b9      	ldrb	r1, [r7, #2]
 800f9ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	4d38      	ldr	r5, [pc, #224]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f9b2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800f9b6:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f9ba:	1d3a      	adds	r2, r7, #4
 800f9bc:	9202      	str	r2, [sp, #8]
 800f9be:	1cfa      	adds	r2, r7, #3
 800f9c0:	9201      	str	r2, [sp, #4]
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	f000 fe8f 	bl	80106ec <GetFCntDown>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f9d4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d035      	beq.n	800fa48 <ProcessRadioRxDone+0x584>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f9dc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f9e0:	2b07      	cmp	r3, #7
 800f9e2:	d119      	bne.n	800fa18 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f9e4:	4b2a      	ldr	r3, [pc, #168]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800f9e6:	2208      	movs	r2, #8
 800f9e8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800f9ec:	4b29      	ldr	r3, [pc, #164]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800f9ee:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d11d      	bne.n	800fa32 <ProcessRadioRxDone+0x56e>
 800f9f6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f9fa:	f023 031f 	bic.w	r3, r3, #31
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	2ba0      	cmp	r3, #160	; 0xa0
 800fa02:	d116      	bne.n	800fa32 <ProcessRadioRxDone+0x56e>
 800fa04:	4b23      	ldr	r3, [pc, #140]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800fa06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d111      	bne.n	800fa32 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800fa0e:	4b21      	ldr	r3, [pc, #132]	; (800fa94 <ProcessRadioRxDone+0x5d0>)
 800fa10:	2201      	movs	r2, #1
 800fa12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800fa16:	e00c      	b.n	800fa32 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800fa18:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fa1c:	2b08      	cmp	r3, #8
 800fa1e:	d104      	bne.n	800fa2a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800fa20:	4b1b      	ldr	r3, [pc, #108]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800fa22:	220a      	movs	r2, #10
 800fa24:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800fa28:	e003      	b.n	800fa32 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa2a:	4b19      	ldr	r3, [pc, #100]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a16      	ldr	r2, [pc, #88]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800fa36:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a14      	ldr	r2, [pc, #80]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800fa3e:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
                PrepareRxDoneAbort( );
 800fa42:	f7ff fd19 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800fa46:	e184      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800fa48:	78fa      	ldrb	r2, [r7, #3]
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800fa50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa54:	9300      	str	r3, [sp, #0]
 800fa56:	460b      	mov	r3, r1
 800fa58:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fa5c:	f005 fc80 	bl	8015360 <LoRaMacCryptoUnsecureMessage>
 800fa60:	4603      	mov	r3, r0
 800fa62:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fa66:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d016      	beq.n	800fa9c <ProcessRadioRxDone+0x5d8>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fa6e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d104      	bne.n	800fa80 <ProcessRadioRxDone+0x5bc>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fa76:	4b06      	ldr	r3, [pc, #24]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800fa78:	220b      	movs	r2, #11
 800fa7a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800fa7e:	e003      	b.n	800fa88 <ProcessRadioRxDone+0x5c4>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fa80:	4b03      	ldr	r3, [pc, #12]	; (800fa90 <ProcessRadioRxDone+0x5cc>)
 800fa82:	220c      	movs	r2, #12
 800fa84:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800fa88:	f7ff fcf6 	bl	800f478 <PrepareRxDoneAbort>
                return;
 800fa8c:	e161      	b.n	800fd52 <ProcessRadioRxDone+0x88e>
 800fa8e:	bf00      	nop
 800fa90:	20000d20 	.word	0x20000d20
 800fa94:	2000122c 	.word	0x2000122c
 800fa98:	20000f58 	.word	0x20000f58
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fa9c:	4bae      	ldr	r3, [pc, #696]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800faa4:	4aac      	ldr	r2, [pc, #688]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800faa6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800faaa:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800faae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fab2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	461a      	mov	r2, r3
 800faba:	4ba7      	ldr	r3, [pc, #668]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fabc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800fac0:	4ba5      	ldr	r3, [pc, #660]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800fac8:	4ba3      	ldr	r3, [pc, #652]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800faca:	2200      	movs	r2, #0
 800facc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4aa1      	ldr	r2, [pc, #644]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fad4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a9f      	ldr	r2, [pc, #636]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fadc:	f8c2 3464 	str.w	r3, [r2, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fae0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fae4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	bf14      	ite	ne
 800faee:	2301      	movne	r3, #1
 800faf0:	2300      	moveq	r3, #0
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	4b98      	ldr	r3, [pc, #608]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800faf6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fafa:	4b97      	ldr	r3, [pc, #604]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fafc:	2200      	movs	r2, #0
 800fafe:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fb02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fb06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bf14      	ite	ne
 800fb10:	2301      	movne	r3, #1
 800fb12:	2300      	moveq	r3, #0
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	4b90      	ldr	r3, [pc, #576]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb18:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fb1c:	4b8e      	ldr	r3, [pc, #568]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb1e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d004      	beq.n	800fb30 <ProcessRadioRxDone+0x66c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800fb26:	4b8c      	ldr	r3, [pc, #560]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb28:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d102      	bne.n	800fb36 <ProcessRadioRxDone+0x672>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800fb30:	4b8a      	ldr	r3, [pc, #552]	; (800fd5c <ProcessRadioRxDone+0x898>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800fb36:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d104      	bne.n	800fb48 <ProcessRadioRxDone+0x684>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800fb3e:	4b86      	ldr	r3, [pc, #536]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb40:	2202      	movs	r2, #2
 800fb42:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800fb46:	e01f      	b.n	800fb88 <ProcessRadioRxDone+0x6c4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800fb48:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800fb4c:	f023 031f 	bic.w	r3, r3, #31
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	2ba0      	cmp	r3, #160	; 0xa0
 800fb54:	d110      	bne.n	800fb78 <ProcessRadioRxDone+0x6b4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800fb56:	4b81      	ldr	r3, [pc, #516]	; (800fd5c <ProcessRadioRxDone+0x898>)
 800fb58:	2201      	movs	r2, #1
 800fb5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800fb5e:	4b7f      	ldr	r3, [pc, #508]	; (800fd5c <ProcessRadioRxDone+0x898>)
 800fb60:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d102      	bne.n	800fb6e <ProcessRadioRxDone+0x6aa>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800fb68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb6a:	4a7c      	ldr	r2, [pc, #496]	; (800fd5c <ProcessRadioRxDone+0x898>)
 800fb6c:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fb6e:	4b7a      	ldr	r3, [pc, #488]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb70:	2201      	movs	r2, #1
 800fb72:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800fb76:	e007      	b.n	800fb88 <ProcessRadioRxDone+0x6c4>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800fb78:	4b78      	ldr	r3, [pc, #480]	; (800fd5c <ProcessRadioRxDone+0x898>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fb80:	4b75      	ldr	r3, [pc, #468]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fb88:	4b73      	ldr	r3, [pc, #460]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb8a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800fb8e:	4a72      	ldr	r2, [pc, #456]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fb90:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800fb94:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f001 fee9 	bl	8011970 <RemoveMacCommands>

            switch( fType )
 800fb9e:	78bb      	ldrb	r3, [r7, #2]
 800fba0:	2b03      	cmp	r3, #3
 800fba2:	d874      	bhi.n	800fc8e <ProcessRadioRxDone+0x7ca>
 800fba4:	a201      	add	r2, pc, #4	; (adr r2, 800fbac <ProcessRadioRxDone+0x6e8>)
 800fba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbaa:	bf00      	nop
 800fbac:	0800fbbd 	.word	0x0800fbbd
 800fbb0:	0800fc0d 	.word	0x0800fc0d
 800fbb4:	0800fc43 	.word	0x0800fc43
 800fbb8:	0800fc69 	.word	0x0800fc69
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fbbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fbc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	461c      	mov	r4, r3
 800fbc8:	4b63      	ldr	r3, [pc, #396]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fbca:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800fbce:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800fbd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fbd6:	f102 0010 	add.w	r0, r2, #16
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	460b      	mov	r3, r1
 800fbde:	4622      	mov	r2, r4
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	f000 fee5 	bl	80109b0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fbe6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800fbea:	4b5b      	ldr	r3, [pc, #364]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fbec:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbf2:	4a59      	ldr	r2, [pc, #356]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fbf4:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fbf8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800fbfc:	4b56      	ldr	r3, [pc, #344]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fbfe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800fc02:	4b55      	ldr	r3, [pc, #340]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc04:	2201      	movs	r2, #1
 800fc06:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800fc0a:	e047      	b.n	800fc9c <ProcessRadioRxDone+0x7d8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fc0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc10:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	461c      	mov	r4, r3
 800fc18:	4b4f      	ldr	r3, [pc, #316]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc1a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800fc1e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800fc22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fc26:	f102 0010 	add.w	r0, r2, #16
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	4622      	mov	r2, r4
 800fc30:	2100      	movs	r1, #0
 800fc32:	f000 febd 	bl	80109b0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fc36:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800fc3a:	4b47      	ldr	r3, [pc, #284]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc3c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800fc40:	e02c      	b.n	800fc9c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800fc42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fc44:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800fc48:	4b43      	ldr	r3, [pc, #268]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc4a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800fc4e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	460b      	mov	r3, r1
 800fc56:	2100      	movs	r1, #0
 800fc58:	f000 feaa 	bl	80109b0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fc5c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800fc60:	4b3d      	ldr	r3, [pc, #244]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc62:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800fc66:	e019      	b.n	800fc9c <ProcessRadioRxDone+0x7d8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fc68:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800fc6c:	4b3a      	ldr	r3, [pc, #232]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc6e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fc72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc74:	4a38      	ldr	r2, [pc, #224]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc76:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fc7a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800fc7e:	4b36      	ldr	r3, [pc, #216]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc80:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800fc84:	4b34      	ldr	r3, [pc, #208]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc86:	2201      	movs	r2, #1
 800fc88:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800fc8c:	e006      	b.n	800fc9c <ProcessRadioRxDone+0x7d8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc8e:	4b32      	ldr	r3, [pc, #200]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc90:	2201      	movs	r2, #1
 800fc92:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800fc96:	f7ff fbef 	bl	800f478 <PrepareRxDoneAbort>
                    break;
 800fc9a:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fc9c:	4a2e      	ldr	r2, [pc, #184]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fc9e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fca2:	f043 0302 	orr.w	r3, r3, #2
 800fca6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485

            break;
 800fcaa:	e033      	b.n	800fd14 <ProcessRadioRxDone+0x850>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fcac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fcb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fcb2:	18d1      	adds	r1, r2, r3
 800fcb4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	4826      	ldr	r0, [pc, #152]	; (800fd60 <ProcessRadioRxDone+0x89c>)
 800fcc6:	f008 fa8e 	bl	80181e6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fcca:	4b23      	ldr	r3, [pc, #140]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fccc:	2203      	movs	r2, #3
 800fcce:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fcd2:	4b21      	ldr	r3, [pc, #132]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fcda:	4b1f      	ldr	r3, [pc, #124]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fcdc:	4a20      	ldr	r2, [pc, #128]	; (800fd60 <ProcessRadioRxDone+0x89c>)
 800fcde:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fce2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	4b19      	ldr	r3, [pc, #100]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fcf2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fcf6:	4a18      	ldr	r2, [pc, #96]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fcf8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fcfc:	f043 0302 	orr.w	r3, r3, #2
 800fd00:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 800fd04:	e006      	b.n	800fd14 <ProcessRadioRxDone+0x850>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd06:	4b14      	ldr	r3, [pc, #80]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fd08:	2201      	movs	r2, #1
 800fd0a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800fd0e:	f7ff fbb3 	bl	800f478 <PrepareRxDoneAbort>
            break;
 800fd12:	bf00      	nop
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800fd14:	4b10      	ldr	r3, [pc, #64]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fd16:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d008      	beq.n	800fd30 <ProcessRadioRxDone+0x86c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fd1e:	4b0e      	ldr	r3, [pc, #56]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fd20:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00b      	beq.n	800fd40 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fd28:	2000      	movs	r0, #0
 800fd2a:	f000 fca9 	bl	8010680 <OnAckTimeoutTimerEvent>
 800fd2e:	e007      	b.n	800fd40 <ProcessRadioRxDone+0x87c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fd30:	4b0a      	ldr	r3, [pc, #40]	; (800fd5c <ProcessRadioRxDone+0x898>)
 800fd32:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d102      	bne.n	800fd40 <ProcessRadioRxDone+0x87c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	f000 fca0 	bl	8010680 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fd40:	4a05      	ldr	r2, [pc, #20]	; (800fd58 <ProcessRadioRxDone+0x894>)
 800fd42:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fd46:	f043 0320 	orr.w	r3, r3, #32
 800fd4a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800fd4e:	f7ff fae1 	bl	800f314 <UpdateRxSlotIdleState>
}
 800fd52:	3788      	adds	r7, #136	; 0x88
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bdb0      	pop	{r4, r5, r7, pc}
 800fd58:	20000d20 	.word	0x20000d20
 800fd5c:	2000122c 	.word	0x2000122c
 800fd60:	20000f58 	.word	0x20000f58

0800fd64 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fd68:	4b11      	ldr	r3, [pc, #68]	; (800fdb0 <ProcessRadioTxTimeout+0x4c>)
 800fd6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d002      	beq.n	800fd78 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800fd72:	4b10      	ldr	r3, [pc, #64]	; (800fdb4 <ProcessRadioTxTimeout+0x50>)
 800fd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd76:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fd78:	f7ff facc 	bl	800f314 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fd7c:	4b0e      	ldr	r3, [pc, #56]	; (800fdb8 <ProcessRadioTxTimeout+0x54>)
 800fd7e:	2202      	movs	r2, #2
 800fd80:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fd84:	2002      	movs	r0, #2
 800fd86:	f004 fc63 	bl	8014650 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fd8a:	4b0b      	ldr	r3, [pc, #44]	; (800fdb8 <ProcessRadioTxTimeout+0x54>)
 800fd8c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d003      	beq.n	800fd9c <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800fd94:	4b08      	ldr	r3, [pc, #32]	; (800fdb8 <ProcessRadioTxTimeout+0x54>)
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fd9c:	4a06      	ldr	r2, [pc, #24]	; (800fdb8 <ProcessRadioTxTimeout+0x54>)
 800fd9e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fda2:	f043 0320 	orr.w	r3, r3, #32
 800fda6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 800fdaa:	bf00      	nop
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	2000122c 	.word	0x2000122c
 800fdb4:	0801d920 	.word	0x0801d920
 800fdb8:	20000d20 	.word	0x20000d20

0800fdbc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	460a      	mov	r2, r1
 800fdc6:	71fb      	strb	r3, [r7, #7]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fdd0:	4b40      	ldr	r3, [pc, #256]	; (800fed4 <HandleRadioRxErrorTimeout+0x118>)
 800fdd2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d002      	beq.n	800fde0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800fdda:	4b3f      	ldr	r3, [pc, #252]	; (800fed8 <HandleRadioRxErrorTimeout+0x11c>)
 800fddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdde:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fde0:	f003 ff97 	bl	8013d12 <LoRaMacClassBIsBeaconExpected>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d007      	beq.n	800fdfa <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fdea:	2002      	movs	r0, #2
 800fdec:	f003 ff45 	bl	8013c7a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	f003 ff67 	bl	8013cc4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fdfa:	4b36      	ldr	r3, [pc, #216]	; (800fed4 <HandleRadioRxErrorTimeout+0x118>)
 800fdfc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d119      	bne.n	800fe38 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fe04:	f003 ff8c 	bl	8013d20 <LoRaMacClassBIsPingExpected>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d007      	beq.n	800fe1e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe0e:	2000      	movs	r0, #0
 800fe10:	f003 ff3d 	bl	8013c8e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fe14:	2000      	movs	r0, #0
 800fe16:	f003 ff5e 	bl	8013cd6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe1e:	f003 ff86 	bl	8013d2e <LoRaMacClassBIsMulticastExpected>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d007      	beq.n	800fe38 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fe28:	2000      	movs	r0, #0
 800fe2a:	f003 ff3a 	bl	8013ca2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fe2e:	2000      	movs	r0, #0
 800fe30:	f003 ff5a 	bl	8013ce8 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fe34:	2301      	movs	r3, #1
 800fe36:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800fe38:	7bfb      	ldrb	r3, [r7, #15]
 800fe3a:	f083 0301 	eor.w	r3, r3, #1
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d040      	beq.n	800fec6 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fe44:	4b25      	ldr	r3, [pc, #148]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800fe46:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d122      	bne.n	800fe94 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800fe4e:	4b23      	ldr	r3, [pc, #140]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800fe50:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d003      	beq.n	800fe60 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fe58:	4a20      	ldr	r2, [pc, #128]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800fe5a:	79fb      	ldrb	r3, [r7, #7]
 800fe5c:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fe60:	79fb      	ldrb	r3, [r7, #7]
 800fe62:	4618      	mov	r0, r3
 800fe64:	f004 fbf4 	bl	8014650 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fe68:	4b1a      	ldr	r3, [pc, #104]	; (800fed4 <HandleRadioRxErrorTimeout+0x118>)
 800fe6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f00c fc31 	bl	801c6d4 <UTIL_TIMER_GetElapsedTime>
 800fe72:	4602      	mov	r2, r0
 800fe74:	4b19      	ldr	r3, [pc, #100]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800fe76:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d323      	bcc.n	800fec6 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fe7e:	4818      	ldr	r0, [pc, #96]	; (800fee0 <HandleRadioRxErrorTimeout+0x124>)
 800fe80:	f00c fafc 	bl	801c47c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fe84:	4a15      	ldr	r2, [pc, #84]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800fe86:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800fe8a:	f043 0320 	orr.w	r3, r3, #32
 800fe8e:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 800fe92:	e018      	b.n	800fec6 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fe94:	4b11      	ldr	r3, [pc, #68]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800fe96:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d003      	beq.n	800fea6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fe9e:	4a0f      	ldr	r2, [pc, #60]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800fea0:	79bb      	ldrb	r3, [r7, #6]
 800fea2:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fea6:	79bb      	ldrb	r3, [r7, #6]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f004 fbd1 	bl	8014650 <LoRaMacConfirmQueueSetStatusCmn>

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800feae:	4b09      	ldr	r3, [pc, #36]	; (800fed4 <HandleRadioRxErrorTimeout+0x118>)
 800feb0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800feb4:	2b02      	cmp	r3, #2
 800feb6:	d006      	beq.n	800fec6 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800feb8:	4a08      	ldr	r2, [pc, #32]	; (800fedc <HandleRadioRxErrorTimeout+0x120>)
 800feba:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800febe:	f043 0320 	orr.w	r3, r3, #32
 800fec2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800fec6:	f7ff fa25 	bl	800f314 <UpdateRxSlotIdleState>
}
 800feca:	bf00      	nop
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	2000122c 	.word	0x2000122c
 800fed8:	0801d920 	.word	0x0801d920
 800fedc:	20000d20 	.word	0x20000d20
 800fee0:	200010b8 	.word	0x200010b8

0800fee4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fee8:	2106      	movs	r1, #6
 800feea:	2005      	movs	r0, #5
 800feec:	f7ff ff66 	bl	800fdbc <HandleRadioRxErrorTimeout>
}
 800fef0:	bf00      	nop
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fef8:	2104      	movs	r1, #4
 800fefa:	2003      	movs	r0, #3
 800fefc:	f7ff ff5e 	bl	800fdbc <HandleRadioRxErrorTimeout>
}
 800ff00:	bf00      	nop
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ff0e:	607b      	str	r3, [r7, #4]
  return(result);
 800ff10:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800ff12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff14:	b672      	cpsid	i
}
 800ff16:	bf00      	nop
    events = LoRaMacRadioEvents;
 800ff18:	4b1d      	ldr	r3, [pc, #116]	; (800ff90 <LoRaMacHandleIrqEvents+0x8c>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800ff1e:	4b1c      	ldr	r3, [pc, #112]	; (800ff90 <LoRaMacHandleIrqEvents+0x8c>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	601a      	str	r2, [r3, #0]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	f383 8810 	msr	PRIMASK, r3
}
 800ff2e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d027      	beq.n	800ff86 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ff36:	783b      	ldrb	r3, [r7, #0]
 800ff38:	f003 0310 	and.w	r3, r3, #16
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d001      	beq.n	800ff46 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ff42:	f7ff f9ff 	bl	800f344 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ff46:	783b      	ldrb	r3, [r7, #0]
 800ff48:	f003 0308 	and.w	r3, r3, #8
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d001      	beq.n	800ff56 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ff52:	f7ff fab7 	bl	800f4c4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ff56:	783b      	ldrb	r3, [r7, #0]
 800ff58:	f003 0304 	and.w	r3, r3, #4
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d001      	beq.n	800ff66 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ff62:	f7ff feff 	bl	800fd64 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ff66:	783b      	ldrb	r3, [r7, #0]
 800ff68:	f003 0302 	and.w	r3, r3, #2
 800ff6c:	b2db      	uxtb	r3, r3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ff72:	f7ff ffb7 	bl	800fee4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ff76:	783b      	ldrb	r3, [r7, #0]
 800ff78:	f003 0301 	and.w	r3, r3, #1
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d001      	beq.n	800ff86 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ff82:	f7ff ffb7 	bl	800fef4 <ProcessRadioRxTimeout>
        }
    }
}
 800ff86:	bf00      	nop
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	2000207c 	.word	0x2000207c

0800ff94 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ff94:	b480      	push	{r7}
 800ff96:	af00      	add	r7, sp, #0
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ff98:	4b08      	ldr	r3, [pc, #32]	; (800ffbc <LoRaMacIsBusy+0x28>)
 800ff9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800ffa2:	4b06      	ldr	r3, [pc, #24]	; (800ffbc <LoRaMacIsBusy+0x28>)
 800ffa4:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d101      	bne.n	800ffb0 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800ffac:	2300      	movs	r3, #0
 800ffae:	e000      	b.n	800ffb2 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800ffb0:	2301      	movs	r3, #1
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bc80      	pop	{r7}
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	20000d20 	.word	0x20000d20

0800ffc0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ffca:	4a04      	ldr	r2, [pc, #16]	; (800ffdc <LoRaMacEnableRequests+0x1c>)
 800ffcc:	79fb      	ldrb	r3, [r7, #7]
 800ffce:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
}
 800ffd2:	bf00      	nop
 800ffd4:	370c      	adds	r7, #12
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bc80      	pop	{r7}
 800ffda:	4770      	bx	lr
 800ffdc:	20000d20 	.word	0x20000d20

0800ffe0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ffe6:	4b2c      	ldr	r3, [pc, #176]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 800ffe8:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800ffec:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ffee:	4b2a      	ldr	r3, [pc, #168]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 800fff0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d14a      	bne.n	801008e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fff8:	4b27      	ldr	r3, [pc, #156]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 800fffa:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	b2db      	uxtb	r3, r3
 8010004:	2b00      	cmp	r3, #0
 8010006:	d006      	beq.n	8010016 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010008:	4a23      	ldr	r2, [pc, #140]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 801000a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801000e:	f36f 0300 	bfc	r3, #0, #1
 8010012:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010016:	4b20      	ldr	r3, [pc, #128]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 8010018:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801001c:	f003 0304 	and.w	r3, r3, #4
 8010020:	b2db      	uxtb	r3, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	d006      	beq.n	8010034 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010026:	4a1c      	ldr	r2, [pc, #112]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 8010028:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801002c:	f36f 0382 	bfc	r3, #2, #1
 8010030:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010034:	2001      	movs	r0, #1
 8010036:	f7ff ffc3 	bl	800ffc0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801003a:	793b      	ldrb	r3, [r7, #4]
 801003c:	f003 0301 	and.w	r3, r3, #1
 8010040:	b2db      	uxtb	r3, r3
 8010042:	2b00      	cmp	r3, #0
 8010044:	d005      	beq.n	8010052 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010046:	4b14      	ldr	r3, [pc, #80]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 8010048:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4813      	ldr	r0, [pc, #76]	; (801009c <LoRaMacHandleRequestEvents+0xbc>)
 8010050:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010052:	793b      	ldrb	r3, [r7, #4]
 8010054:	f003 0304 	and.w	r3, r3, #4
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00e      	beq.n	801007c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801005e:	4810      	ldr	r0, [pc, #64]	; (80100a0 <LoRaMacHandleRequestEvents+0xc0>)
 8010060:	f004 fb44 	bl	80146ec <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010064:	f004 fb8e 	bl	8014784 <LoRaMacConfirmQueueGetCnt>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d006      	beq.n	801007c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801006e:	4a0a      	ldr	r2, [pc, #40]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 8010070:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010074:	f043 0304 	orr.w	r3, r3, #4
 8010078:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 801007c:	f003 fe75 	bl	8013d6a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010080:	4a05      	ldr	r2, [pc, #20]	; (8010098 <LoRaMacHandleRequestEvents+0xb8>)
 8010082:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010086:	f36f 1345 	bfc	r3, #5, #1
 801008a:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
}
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	20000d20 	.word	0x20000d20
 801009c:	20001158 	.word	0x20001158
 80100a0:	2000116c 	.word	0x2000116c

080100a4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 80100aa:	4b07      	ldr	r3, [pc, #28]	; (80100c8 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 80100ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d105      	bne.n	80100c0 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 80100b4:	2300      	movs	r3, #0
 80100b6:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80100b8:	1dfb      	adds	r3, r7, #7
 80100ba:	4618      	mov	r0, r3
 80100bc:	f004 f8fc 	bl	80142b8 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 80100c0:	bf00      	nop
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	20000d20 	.word	0x20000d20

080100cc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80100d0:	4b16      	ldr	r3, [pc, #88]	; (801012c <LoRaMacHandleIndicationEvents+0x60>)
 80100d2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80100d6:	f003 0308 	and.w	r3, r3, #8
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00d      	beq.n	80100fc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80100e0:	4a12      	ldr	r2, [pc, #72]	; (801012c <LoRaMacHandleIndicationEvents+0x60>)
 80100e2:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80100e6:	f36f 03c3 	bfc	r3, #3, #1
 80100ea:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80100ee:	4b0f      	ldr	r3, [pc, #60]	; (801012c <LoRaMacHandleIndicationEvents+0x60>)
 80100f0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	490e      	ldr	r1, [pc, #56]	; (8010130 <LoRaMacHandleIndicationEvents+0x64>)
 80100f8:	480e      	ldr	r0, [pc, #56]	; (8010134 <LoRaMacHandleIndicationEvents+0x68>)
 80100fa:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80100fc:	4b0b      	ldr	r3, [pc, #44]	; (801012c <LoRaMacHandleIndicationEvents+0x60>)
 80100fe:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010102:	f003 0302 	and.w	r3, r3, #2
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00d      	beq.n	8010128 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801010c:	4a07      	ldr	r2, [pc, #28]	; (801012c <LoRaMacHandleIndicationEvents+0x60>)
 801010e:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8010112:	f36f 0341 	bfc	r3, #1, #1
 8010116:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801011a:	4b04      	ldr	r3, [pc, #16]	; (801012c <LoRaMacHandleIndicationEvents+0x60>)
 801011c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	4903      	ldr	r1, [pc, #12]	; (8010130 <LoRaMacHandleIndicationEvents+0x64>)
 8010124:	4804      	ldr	r0, [pc, #16]	; (8010138 <LoRaMacHandleIndicationEvents+0x6c>)
 8010126:	4798      	blx	r3
    }
}
 8010128:	bf00      	nop
 801012a:	bd80      	pop	{r7, pc}
 801012c:	20000d20 	.word	0x20000d20
 8010130:	200011a0 	.word	0x200011a0
 8010134:	20001180 	.word	0x20001180
 8010138:	2000113c 	.word	0x2000113c

0801013c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010142:	4b32      	ldr	r3, [pc, #200]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 8010144:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	b2db      	uxtb	r3, r3
 801014e:	2b00      	cmp	r3, #0
 8010150:	d058      	beq.n	8010204 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8010152:	2300      	movs	r3, #0
 8010154:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010156:	2300      	movs	r3, #0
 8010158:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801015a:	4b2c      	ldr	r3, [pc, #176]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 801015c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8010160:	2b00      	cmp	r3, #0
 8010162:	d004      	beq.n	801016e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010164:	4b29      	ldr	r3, [pc, #164]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 8010166:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801016a:	2b03      	cmp	r3, #3
 801016c:	d104      	bne.n	8010178 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801016e:	f002 f87b 	bl	8012268 <CheckRetransUnconfirmedUplink>
 8010172:	4603      	mov	r3, r0
 8010174:	71fb      	strb	r3, [r7, #7]
 8010176:	e020      	b.n	80101ba <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010178:	4b24      	ldr	r3, [pc, #144]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 801017a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801017e:	2b01      	cmp	r3, #1
 8010180:	d11b      	bne.n	80101ba <LoRaMacHandleMcpsRequest+0x7e>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8010182:	4b22      	ldr	r3, [pc, #136]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 8010184:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8010188:	2b00      	cmp	r3, #0
 801018a:	d014      	beq.n	80101b6 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 801018c:	f002 f898 	bl	80122c0 <CheckRetransConfirmedUplink>
 8010190:	4603      	mov	r3, r0
 8010192:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010194:	4b1e      	ldr	r3, [pc, #120]	; (8010210 <LoRaMacHandleMcpsRequest+0xd4>)
 8010196:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 801019a:	2b00      	cmp	r3, #0
 801019c:	d10d      	bne.n	80101ba <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 801019e:	79fb      	ldrb	r3, [r7, #7]
 80101a0:	f083 0301 	eor.w	r3, r3, #1
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d002      	beq.n	80101b0 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 80101aa:	f002 f905 	bl	80123b8 <AckTimeoutRetriesProcess>
 80101ae:	e004      	b.n	80101ba <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 80101b0:	f002 f940 	bl	8012434 <AckTimeoutRetriesFinalize>
 80101b4:	e001      	b.n	80101ba <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 80101b6:	2301      	movs	r3, #1
 80101b8:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00d      	beq.n	80101dc <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80101c0:	4814      	ldr	r0, [pc, #80]	; (8010214 <LoRaMacHandleMcpsRequest+0xd8>)
 80101c2:	f00c f95b 	bl	801c47c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80101c6:	4b11      	ldr	r3, [pc, #68]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 80101c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80101cc:	f023 0320 	bic.w	r3, r3, #32
 80101d0:	4a0e      	ldr	r2, [pc, #56]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 80101d2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80101d6:	f002 f895 	bl	8012304 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80101da:	e013      	b.n	8010204 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 80101dc:	79bb      	ldrb	r3, [r7, #6]
 80101de:	f083 0301 	eor.w	r3, r3, #1
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d00d      	beq.n	8010204 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80101e8:	4a08      	ldr	r2, [pc, #32]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 80101ea:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80101ee:	f36f 1345 	bfc	r3, #5, #1
 80101f2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 80101f6:	4b05      	ldr	r3, [pc, #20]	; (801020c <LoRaMacHandleMcpsRequest+0xd0>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 80101fe:	2000      	movs	r0, #0
 8010200:	f000 f994 	bl	801052c <OnTxDelayedTimerEvent>
}
 8010204:	bf00      	nop
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	20000d20 	.word	0x20000d20
 8010210:	2000122c 	.word	0x2000122c
 8010214:	20001088 	.word	0x20001088

08010218 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801021c:	4b1b      	ldr	r3, [pc, #108]	; (801028c <LoRaMacHandleMlmeRequest+0x74>)
 801021e:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010222:	f003 0304 	and.w	r3, r3, #4
 8010226:	b2db      	uxtb	r3, r3
 8010228:	2b00      	cmp	r3, #0
 801022a:	d02c      	beq.n	8010286 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801022c:	2001      	movs	r0, #1
 801022e:	f004 fa43 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d012      	beq.n	801025e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010238:	2001      	movs	r0, #1
 801023a:	f004 f9df 	bl	80145fc <LoRaMacConfirmQueueGetStatus>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d103      	bne.n	801024c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010244:	4b11      	ldr	r3, [pc, #68]	; (801028c <LoRaMacHandleMlmeRequest+0x74>)
 8010246:	2200      	movs	r2, #0
 8010248:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801024c:	4b0f      	ldr	r3, [pc, #60]	; (801028c <LoRaMacHandleMlmeRequest+0x74>)
 801024e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010252:	f023 0302 	bic.w	r3, r3, #2
 8010256:	4a0d      	ldr	r2, [pc, #52]	; (801028c <LoRaMacHandleMlmeRequest+0x74>)
 8010258:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 801025c:	e013      	b.n	8010286 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801025e:	2005      	movs	r0, #5
 8010260:	f004 fa2a 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 8010264:	4603      	mov	r3, r0
 8010266:	2b00      	cmp	r3, #0
 8010268:	d105      	bne.n	8010276 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 801026a:	2006      	movs	r0, #6
 801026c:	f004 fa24 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 8010270:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010272:	2b00      	cmp	r3, #0
 8010274:	d007      	beq.n	8010286 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010276:	4b05      	ldr	r3, [pc, #20]	; (801028c <LoRaMacHandleMlmeRequest+0x74>)
 8010278:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801027c:	f023 0302 	bic.w	r3, r3, #2
 8010280:	4a02      	ldr	r2, [pc, #8]	; (801028c <LoRaMacHandleMlmeRequest+0x74>)
 8010282:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8010286:	bf00      	nop
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	20000d20 	.word	0x20000d20

08010290 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010294:	200c      	movs	r0, #12
 8010296:	f004 fa0f 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d019      	beq.n	80102d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80102a0:	4b0e      	ldr	r3, [pc, #56]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102a2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80102a6:	f003 0301 	and.w	r3, r3, #1
 80102aa:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d111      	bne.n	80102d4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80102b0:	4b0a      	ldr	r3, [pc, #40]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102b2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80102b6:	f003 0304 	and.w	r3, r3, #4
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d009      	beq.n	80102d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80102c0:	4b06      	ldr	r3, [pc, #24]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80102c6:	f023 0302 	bic.w	r3, r3, #2
 80102ca:	4a04      	ldr	r2, [pc, #16]	; (80102dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80102cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80102d0:	2301      	movs	r3, #1
 80102d2:	e000      	b.n	80102d6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	20000d20 	.word	0x20000d20

080102e0 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80102e0:	b480      	push	{r7}
 80102e2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80102e4:	4b0d      	ldr	r3, [pc, #52]	; (801031c <LoRaMacCheckForRxAbort+0x3c>)
 80102e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80102ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00f      	beq.n	8010312 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80102f2:	4b0a      	ldr	r3, [pc, #40]	; (801031c <LoRaMacCheckForRxAbort+0x3c>)
 80102f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80102f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102fc:	4a07      	ldr	r2, [pc, #28]	; (801031c <LoRaMacCheckForRxAbort+0x3c>)
 80102fe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010302:	4b06      	ldr	r3, [pc, #24]	; (801031c <LoRaMacCheckForRxAbort+0x3c>)
 8010304:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010308:	f023 0302 	bic.w	r3, r3, #2
 801030c:	4a03      	ldr	r2, [pc, #12]	; (801031c <LoRaMacCheckForRxAbort+0x3c>)
 801030e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8010312:	bf00      	nop
 8010314:	46bd      	mov	sp, r7
 8010316:	bc80      	pop	{r7}
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	20000d20 	.word	0x20000d20

08010320 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010328:	2300      	movs	r3, #0
 801032a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 801032c:	2300      	movs	r3, #0
 801032e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010330:	4b50      	ldr	r3, [pc, #320]	; (8010474 <LoRaMacHandleNvm+0x154>)
 8010332:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010336:	2b00      	cmp	r3, #0
 8010338:	f040 8098 	bne.w	801046c <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2124      	movs	r1, #36	; 0x24
 8010340:	4618      	mov	r0, r3
 8010342:	f007 ffa5 	bl	8018290 <Crc32>
 8010346:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	429a      	cmp	r2, r3
 8010350:	d006      	beq.n	8010360 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010358:	89fb      	ldrh	r3, [r7, #14]
 801035a:	f043 0301 	orr.w	r3, r3, #1
 801035e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	3328      	adds	r3, #40	; 0x28
 8010364:	2114      	movs	r1, #20
 8010366:	4618      	mov	r0, r3
 8010368:	f007 ff92 	bl	8018290 <Crc32>
 801036c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010372:	68ba      	ldr	r2, [r7, #8]
 8010374:	429a      	cmp	r2, r3
 8010376:	d006      	beq.n	8010386 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	68ba      	ldr	r2, [r7, #8]
 801037c:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801037e:	89fb      	ldrh	r3, [r7, #14]
 8010380:	f043 0302 	orr.w	r3, r3, #2
 8010384:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	3340      	adds	r3, #64	; 0x40
 801038a:	21dc      	movs	r1, #220	; 0xdc
 801038c:	4618      	mov	r0, r3
 801038e:	f007 ff7f 	bl	8018290 <Crc32>
 8010392:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801039a:	68ba      	ldr	r2, [r7, #8]
 801039c:	429a      	cmp	r2, r3
 801039e:	d007      	beq.n	80103b0 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80103a8:	89fb      	ldrh	r3, [r7, #14]
 80103aa:	f043 0304 	orr.w	r3, r3, #4
 80103ae:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80103b6:	21bc      	movs	r1, #188	; 0xbc
 80103b8:	4618      	mov	r0, r3
 80103ba:	f007 ff69 	bl	8018290 <Crc32>
 80103be:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80103c6:	68ba      	ldr	r2, [r7, #8]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d007      	beq.n	80103dc <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80103d4:	89fb      	ldrh	r3, [r7, #14]
 80103d6:	f043 0308 	orr.w	r3, r3, #8
 80103da:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80103e2:	2190      	movs	r1, #144	; 0x90
 80103e4:	4618      	mov	r0, r3
 80103e6:	f007 ff53 	bl	8018290 <Crc32>
 80103ea:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80103f2:	68ba      	ldr	r2, [r7, #8]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d007      	beq.n	8010408 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010400:	89fb      	ldrh	r3, [r7, #14]
 8010402:	f043 0310 	orr.w	r3, r3, #16
 8010406:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801040e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8010412:	4618      	mov	r0, r3
 8010414:	f007 ff3c 	bl	8018290 <Crc32>
 8010418:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8010420:	68ba      	ldr	r2, [r7, #8]
 8010422:	429a      	cmp	r2, r3
 8010424:	d007      	beq.n	8010436 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801042e:	89fb      	ldrh	r3, [r7, #14]
 8010430:	f043 0320 	orr.w	r3, r3, #32
 8010434:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 801043c:	2114      	movs	r1, #20
 801043e:	4618      	mov	r0, r3
 8010440:	f007 ff26 	bl	8018290 <Crc32>
 8010444:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	429a      	cmp	r2, r3
 8010450:	d007      	beq.n	8010462 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	68ba      	ldr	r2, [r7, #8]
 8010456:	f8c3 2724 	str.w	r2, [r3, #1828]	; 0x724
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 801045a:	89fb      	ldrh	r3, [r7, #14]
 801045c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010460:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010462:	89fb      	ldrh	r3, [r7, #14]
 8010464:	4618      	mov	r0, r3
 8010466:	f001 ff89 	bl	801237c <CallNvmDataChangeCallback>
 801046a:	e000      	b.n	801046e <LoRaMacHandleNvm+0x14e>
        return;
 801046c:	bf00      	nop
}
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	20000d20 	.word	0x20000d20

08010478 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801047e:	2300      	movs	r3, #0
 8010480:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8010482:	f7ff fd3f 	bl	800ff04 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010486:	f003 fcd4 	bl	8013e32 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 801048a:	4b26      	ldr	r3, [pc, #152]	; (8010524 <LoRaMacProcess+0xac>)
 801048c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8010490:	f003 0320 	and.w	r3, r3, #32
 8010494:	b2db      	uxtb	r3, r3
 8010496:	2b00      	cmp	r3, #0
 8010498:	d025      	beq.n	80104e6 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 801049a:	2000      	movs	r0, #0
 801049c:	f7ff fd90 	bl	800ffc0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80104a0:	f7ff ff1e 	bl	80102e0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80104a4:	f001 fffa 	bl	801249c <IsRequestPending>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d006      	beq.n	80104bc <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80104ae:	f7ff feef 	bl	8010290 <LoRaMacCheckForBeaconAcquisition>
 80104b2:	4603      	mov	r3, r0
 80104b4:	461a      	mov	r2, r3
 80104b6:	79fb      	ldrb	r3, [r7, #7]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 80104bc:	79fb      	ldrb	r3, [r7, #7]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d103      	bne.n	80104ca <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 80104c2:	f7ff fea9 	bl	8010218 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80104c6:	f7ff fe39 	bl	801013c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80104ca:	f7ff fd89 	bl	800ffe0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 80104ce:	f7ff fde9 	bl	80100a4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80104d2:	2001      	movs	r0, #1
 80104d4:	f7ff fd74 	bl	800ffc0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80104d8:	4a12      	ldr	r2, [pc, #72]	; (8010524 <LoRaMacProcess+0xac>)
 80104da:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80104de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104e2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    LoRaMacHandleIndicationEvents( );
 80104e6:	f7ff fdf1 	bl	80100cc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80104ea:	4b0e      	ldr	r3, [pc, #56]	; (8010524 <LoRaMacProcess+0xac>)
 80104ec:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 80104f0:	2b02      	cmp	r3, #2
 80104f2:	d101      	bne.n	80104f8 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 80104f4:	f001 fb7e 	bl	8011bf4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80104f8:	4b0a      	ldr	r3, [pc, #40]	; (8010524 <LoRaMacProcess+0xac>)
 80104fa:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80104fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d009      	beq.n	801051c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010508:	4a06      	ldr	r2, [pc, #24]	; (8010524 <LoRaMacProcess+0xac>)
 801050a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 801050e:	f36f 1386 	bfc	r3, #6, #1
 8010512:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8010516:	4804      	ldr	r0, [pc, #16]	; (8010528 <LoRaMacProcess+0xb0>)
 8010518:	f7ff ff02 	bl	8010320 <LoRaMacHandleNvm>
    }
}
 801051c:	bf00      	nop
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	20000d20 	.word	0x20000d20
 8010528:	2000122c 	.word	0x2000122c

0801052c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010534:	4817      	ldr	r0, [pc, #92]	; (8010594 <OnTxDelayedTimerEvent+0x68>)
 8010536:	f00b ffa1 	bl	801c47c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801053a:	4b17      	ldr	r3, [pc, #92]	; (8010598 <OnTxDelayedTimerEvent+0x6c>)
 801053c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010540:	f023 0320 	bic.w	r3, r3, #32
 8010544:	4a14      	ldr	r2, [pc, #80]	; (8010598 <OnTxDelayedTimerEvent+0x6c>)
 8010546:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801054a:	2001      	movs	r0, #1
 801054c:	f001 f8e6 	bl	801171c <ScheduleTx>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d018      	beq.n	8010588 <OnTxDelayedTimerEvent+0x5c>
 8010556:	2b0b      	cmp	r3, #11
 8010558:	d016      	beq.n	8010588 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801055a:	4b10      	ldr	r3, [pc, #64]	; (801059c <OnTxDelayedTimerEvent+0x70>)
 801055c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010560:	b2da      	uxtb	r2, r3
 8010562:	4b0d      	ldr	r3, [pc, #52]	; (8010598 <OnTxDelayedTimerEvent+0x6c>)
 8010564:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010568:	4b0b      	ldr	r3, [pc, #44]	; (8010598 <OnTxDelayedTimerEvent+0x6c>)
 801056a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801056e:	4b0a      	ldr	r3, [pc, #40]	; (8010598 <OnTxDelayedTimerEvent+0x6c>)
 8010570:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010574:	4b08      	ldr	r3, [pc, #32]	; (8010598 <OnTxDelayedTimerEvent+0x6c>)
 8010576:	2209      	movs	r2, #9
 8010578:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801057c:	2009      	movs	r0, #9
 801057e:	f004 f867 	bl	8014650 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010582:	f001 febf 	bl	8012304 <StopRetransmission>
            break;
 8010586:	e000      	b.n	801058a <OnTxDelayedTimerEvent+0x5e>
            break;
 8010588:	bf00      	nop
        }
    }
}
 801058a:	bf00      	nop
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	20001088 	.word	0x20001088
 8010598:	20000d20 	.word	0x20000d20
 801059c:	2000122c 	.word	0x2000122c

080105a0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80105a8:	4b14      	ldr	r3, [pc, #80]	; (80105fc <OnRxWindow1TimerEvent+0x5c>)
 80105aa:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80105ae:	4b13      	ldr	r3, [pc, #76]	; (80105fc <OnRxWindow1TimerEvent+0x5c>)
 80105b0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80105b4:	4b12      	ldr	r3, [pc, #72]	; (8010600 <OnRxWindow1TimerEvent+0x60>)
 80105b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80105ba:	b25a      	sxtb	r2, r3
 80105bc:	4b0f      	ldr	r3, [pc, #60]	; (80105fc <OnRxWindow1TimerEvent+0x5c>)
 80105be:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80105c2:	4b0f      	ldr	r3, [pc, #60]	; (8010600 <OnRxWindow1TimerEvent+0x60>)
 80105c4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80105c8:	4b0c      	ldr	r3, [pc, #48]	; (80105fc <OnRxWindow1TimerEvent+0x5c>)
 80105ca:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80105ce:	4b0c      	ldr	r3, [pc, #48]	; (8010600 <OnRxWindow1TimerEvent+0x60>)
 80105d0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80105d4:	4b09      	ldr	r3, [pc, #36]	; (80105fc <OnRxWindow1TimerEvent+0x5c>)
 80105d6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80105da:	4b08      	ldr	r3, [pc, #32]	; (80105fc <OnRxWindow1TimerEvent+0x5c>)
 80105dc:	2200      	movs	r2, #0
 80105de:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80105e2:	4b06      	ldr	r3, [pc, #24]	; (80105fc <OnRxWindow1TimerEvent+0x5c>)
 80105e4:	2200      	movs	r2, #0
 80105e6:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80105ea:	4906      	ldr	r1, [pc, #24]	; (8010604 <OnRxWindow1TimerEvent+0x64>)
 80105ec:	4806      	ldr	r0, [pc, #24]	; (8010608 <OnRxWindow1TimerEvent+0x68>)
 80105ee:	f001 facd 	bl	8011b8c <RxWindowSetup>
}
 80105f2:	bf00      	nop
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	20000d20 	.word	0x20000d20
 8010600:	2000122c 	.word	0x2000122c
 8010604:	200010d8 	.word	0x200010d8
 8010608:	200010a0 	.word	0x200010a0

0801060c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010614:	4b16      	ldr	r3, [pc, #88]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 8010616:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 801061a:	2b00      	cmp	r3, #0
 801061c:	d023      	beq.n	8010666 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801061e:	4b14      	ldr	r3, [pc, #80]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 8010620:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010624:	4b12      	ldr	r3, [pc, #72]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 8010626:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801062a:	4b12      	ldr	r3, [pc, #72]	; (8010674 <OnRxWindow2TimerEvent+0x68>)
 801062c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801062e:	4a10      	ldr	r2, [pc, #64]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 8010630:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010634:	4b0f      	ldr	r3, [pc, #60]	; (8010674 <OnRxWindow2TimerEvent+0x68>)
 8010636:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801063a:	4b0d      	ldr	r3, [pc, #52]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 801063c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010640:	4b0c      	ldr	r3, [pc, #48]	; (8010674 <OnRxWindow2TimerEvent+0x68>)
 8010642:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010646:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 8010648:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801064c:	4b08      	ldr	r3, [pc, #32]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 801064e:	2200      	movs	r2, #0
 8010650:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010654:	4b06      	ldr	r3, [pc, #24]	; (8010670 <OnRxWindow2TimerEvent+0x64>)
 8010656:	2201      	movs	r2, #1
 8010658:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801065c:	4906      	ldr	r1, [pc, #24]	; (8010678 <OnRxWindow2TimerEvent+0x6c>)
 801065e:	4807      	ldr	r0, [pc, #28]	; (801067c <OnRxWindow2TimerEvent+0x70>)
 8010660:	f001 fa94 	bl	8011b8c <RxWindowSetup>
 8010664:	e000      	b.n	8010668 <OnRxWindow2TimerEvent+0x5c>
        return;
 8010666:	bf00      	nop
}
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20000d20 	.word	0x20000d20
 8010674:	2000122c 	.word	0x2000122c
 8010678:	200010ec 	.word	0x200010ec
 801067c:	200010b8 	.word	0x200010b8

08010680 <OnAckTimeoutTimerEvent>:
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010688:	4815      	ldr	r0, [pc, #84]	; (80106e0 <OnAckTimeoutTimerEvent+0x60>)
 801068a:	f00b fef7 	bl	801c47c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801068e:	4b15      	ldr	r3, [pc, #84]	; (80106e4 <OnAckTimeoutTimerEvent+0x64>)
 8010690:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010694:	2b00      	cmp	r3, #0
 8010696:	d003      	beq.n	80106a0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8010698:	4b12      	ldr	r3, [pc, #72]	; (80106e4 <OnAckTimeoutTimerEvent+0x64>)
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80106a0:	4b11      	ldr	r3, [pc, #68]	; (80106e8 <OnAckTimeoutTimerEvent+0x68>)
 80106a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80106a6:	2b02      	cmp	r3, #2
 80106a8:	d106      	bne.n	80106b8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80106aa:	4a0e      	ldr	r2, [pc, #56]	; (80106e4 <OnAckTimeoutTimerEvent+0x64>)
 80106ac:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80106b0:	f043 0320 	orr.w	r3, r3, #32
 80106b4:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80106b8:	4b0a      	ldr	r3, [pc, #40]	; (80106e4 <OnAckTimeoutTimerEvent+0x64>)
 80106ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00a      	beq.n	80106d8 <OnAckTimeoutTimerEvent+0x58>
 80106c2:	4b08      	ldr	r3, [pc, #32]	; (80106e4 <OnAckTimeoutTimerEvent+0x64>)
 80106c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80106c8:	691b      	ldr	r3, [r3, #16]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d004      	beq.n	80106d8 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80106ce:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <OnAckTimeoutTimerEvent+0x64>)
 80106d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80106d4:	691b      	ldr	r3, [r3, #16]
 80106d6:	4798      	blx	r3
    }
}
 80106d8:	bf00      	nop
 80106da:	3708      	adds	r7, #8
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	20001118 	.word	0x20001118
 80106e4:	20000d20 	.word	0x20000d20
 80106e8:	2000122c 	.word	0x2000122c

080106ec <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60ba      	str	r2, [r7, #8]
 80106f4:	607b      	str	r3, [r7, #4]
 80106f6:	4603      	mov	r3, r0
 80106f8:	73fb      	strb	r3, [r7, #15]
 80106fa:	460b      	mov	r3, r1
 80106fc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d005      	beq.n	8010710 <GetFCntDown+0x24>
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d002      	beq.n	8010710 <GetFCntDown+0x24>
 801070a:	6a3b      	ldr	r3, [r7, #32]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010710:	230a      	movs	r3, #10
 8010712:	e029      	b.n	8010768 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010714:	7bfb      	ldrb	r3, [r7, #15]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d016      	beq.n	8010748 <GetFCntDown+0x5c>
 801071a:	2b01      	cmp	r3, #1
 801071c:	d118      	bne.n	8010750 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801071e:	79bb      	ldrb	r3, [r7, #6]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d10d      	bne.n	8010740 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010724:	7bbb      	ldrb	r3, [r7, #14]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d002      	beq.n	8010730 <GetFCntDown+0x44>
 801072a:	7bbb      	ldrb	r3, [r7, #14]
 801072c:	2b03      	cmp	r3, #3
 801072e:	d103      	bne.n	8010738 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	2202      	movs	r2, #2
 8010734:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010736:	e00d      	b.n	8010754 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	2201      	movs	r2, #1
 801073c:	701a      	strb	r2, [r3, #0]
            break;
 801073e:	e009      	b.n	8010754 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	2203      	movs	r2, #3
 8010744:	701a      	strb	r2, [r3, #0]
            break;
 8010746:	e005      	b.n	8010754 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	2204      	movs	r2, #4
 801074c:	701a      	strb	r2, [r3, #0]
            break;
 801074e:	e001      	b.n	8010754 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010750:	2305      	movs	r3, #5
 8010752:	e009      	b.n	8010768 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	7818      	ldrb	r0, [r3, #0]
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	89db      	ldrh	r3, [r3, #14]
 801075c:	461a      	mov	r2, r3
 801075e:	8b39      	ldrh	r1, [r7, #24]
 8010760:	6a3b      	ldr	r3, [r7, #32]
 8010762:	f004 fb9f 	bl	8014ea4 <LoRaMacCryptoGetFCntDown>
 8010766:	4603      	mov	r3, r0
}
 8010768:	4618      	mov	r0, r3
 801076a:	3710      	adds	r7, #16
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010770:	b5b0      	push	{r4, r5, r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	4603      	mov	r3, r0
 8010778:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801077a:	2303      	movs	r3, #3
 801077c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801077e:	4b61      	ldr	r3, [pc, #388]	; (8010904 <SwitchClass+0x194>)
 8010780:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010784:	2b02      	cmp	r3, #2
 8010786:	f000 80a5 	beq.w	80108d4 <SwitchClass+0x164>
 801078a:	2b02      	cmp	r3, #2
 801078c:	f300 80b4 	bgt.w	80108f8 <SwitchClass+0x188>
 8010790:	2b00      	cmp	r3, #0
 8010792:	d003      	beq.n	801079c <SwitchClass+0x2c>
 8010794:	2b01      	cmp	r3, #1
 8010796:	f000 808f 	beq.w	80108b8 <SwitchClass+0x148>
 801079a:	e0ad      	b.n	80108f8 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 801079c:	79fb      	ldrb	r3, [r7, #7]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d107      	bne.n	80107b2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80107a2:	4b58      	ldr	r3, [pc, #352]	; (8010904 <SwitchClass+0x194>)
 80107a4:	4a57      	ldr	r2, [pc, #348]	; (8010904 <SwitchClass+0x194>)
 80107a6:	336c      	adds	r3, #108	; 0x6c
 80107a8:	3264      	adds	r2, #100	; 0x64
 80107aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107ae:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80107b2:	79fb      	ldrb	r3, [r7, #7]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d10c      	bne.n	80107d2 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80107b8:	79fb      	ldrb	r3, [r7, #7]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f003 fadb 	bl	8013d76 <LoRaMacClassBSwitchClass>
 80107c0:	4603      	mov	r3, r0
 80107c2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d103      	bne.n	80107d2 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80107ca:	4a4e      	ldr	r2, [pc, #312]	; (8010904 <SwitchClass+0x194>)
 80107cc:	79fb      	ldrb	r3, [r7, #7]
 80107ce:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 80107d2:	79fb      	ldrb	r3, [r7, #7]
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	f040 808a 	bne.w	80108ee <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80107da:	4a4a      	ldr	r2, [pc, #296]	; (8010904 <SwitchClass+0x194>)
 80107dc:	79fb      	ldrb	r3, [r7, #7]
 80107de:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80107e2:	4a49      	ldr	r2, [pc, #292]	; (8010908 <SwitchClass+0x198>)
 80107e4:	4b48      	ldr	r3, [pc, #288]	; (8010908 <SwitchClass+0x198>)
 80107e6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80107ea:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80107ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107f2:	682b      	ldr	r3, [r5, #0]
 80107f4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80107f6:	4b44      	ldr	r3, [pc, #272]	; (8010908 <SwitchClass+0x198>)
 80107f8:	2202      	movs	r2, #2
 80107fa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80107fe:	2300      	movs	r3, #0
 8010800:	73bb      	strb	r3, [r7, #14]
 8010802:	e049      	b.n	8010898 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010808:	4a3e      	ldr	r2, [pc, #248]	; (8010904 <SwitchClass+0x194>)
 801080a:	212c      	movs	r1, #44	; 0x2c
 801080c:	fb01 f303 	mul.w	r3, r1, r3
 8010810:	4413      	add	r3, r2
 8010812:	33da      	adds	r3, #218	; 0xda
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d038      	beq.n	801088c <SwitchClass+0x11c>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 801081a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801081e:	4a39      	ldr	r2, [pc, #228]	; (8010904 <SwitchClass+0x194>)
 8010820:	212c      	movs	r1, #44	; 0x2c
 8010822:	fb01 f303 	mul.w	r3, r1, r3
 8010826:	4413      	add	r3, r2
 8010828:	33f0      	adds	r3, #240	; 0xf0
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a35      	ldr	r2, [pc, #212]	; (8010904 <SwitchClass+0x194>)
 801082e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010834:	4a33      	ldr	r2, [pc, #204]	; (8010904 <SwitchClass+0x194>)
 8010836:	212c      	movs	r1, #44	; 0x2c
 8010838:	fb01 f303 	mul.w	r3, r1, r3
 801083c:	4413      	add	r3, r2
 801083e:	33f4      	adds	r3, #244	; 0xf4
 8010840:	f993 3000 	ldrsb.w	r3, [r3]
 8010844:	b2da      	uxtb	r2, r3
 8010846:	4b2f      	ldr	r3, [pc, #188]	; (8010904 <SwitchClass+0x194>)
 8010848:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801084c:	4b2e      	ldr	r3, [pc, #184]	; (8010908 <SwitchClass+0x198>)
 801084e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010852:	4b2d      	ldr	r3, [pc, #180]	; (8010908 <SwitchClass+0x198>)
 8010854:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010858:	4b2a      	ldr	r3, [pc, #168]	; (8010904 <SwitchClass+0x194>)
 801085a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801085c:	4a2a      	ldr	r2, [pc, #168]	; (8010908 <SwitchClass+0x198>)
 801085e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010862:	4b28      	ldr	r3, [pc, #160]	; (8010904 <SwitchClass+0x194>)
 8010864:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010868:	4b27      	ldr	r3, [pc, #156]	; (8010908 <SwitchClass+0x198>)
 801086a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801086e:	4b25      	ldr	r3, [pc, #148]	; (8010904 <SwitchClass+0x194>)
 8010870:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010874:	4b24      	ldr	r3, [pc, #144]	; (8010908 <SwitchClass+0x198>)
 8010876:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801087a:	4b23      	ldr	r3, [pc, #140]	; (8010908 <SwitchClass+0x198>)
 801087c:	2203      	movs	r2, #3
 801087e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010882:	4b21      	ldr	r3, [pc, #132]	; (8010908 <SwitchClass+0x198>)
 8010884:	2201      	movs	r2, #1
 8010886:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 801088a:	e009      	b.n	80108a0 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801088c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010890:	b2db      	uxtb	r3, r3
 8010892:	3301      	adds	r3, #1
 8010894:	b2db      	uxtb	r3, r3
 8010896:	73bb      	strb	r3, [r7, #14]
 8010898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801089c:	2b00      	cmp	r3, #0
 801089e:	ddb1      	ble.n	8010804 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80108a0:	4b19      	ldr	r3, [pc, #100]	; (8010908 <SwitchClass+0x198>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80108a8:	4b18      	ldr	r3, [pc, #96]	; (801090c <SwitchClass+0x19c>)
 80108aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ac:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80108ae:	f001 f9a1 	bl	8011bf4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80108b6:	e01a      	b.n	80108ee <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80108b8:	79fb      	ldrb	r3, [r7, #7]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f003 fa5b 	bl	8013d76 <LoRaMacClassBSwitchClass>
 80108c0:	4603      	mov	r3, r0
 80108c2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d113      	bne.n	80108f2 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80108ca:	4a0e      	ldr	r2, [pc, #56]	; (8010904 <SwitchClass+0x194>)
 80108cc:	79fb      	ldrb	r3, [r7, #7]
 80108ce:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 80108d2:	e00e      	b.n	80108f2 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80108d4:	79fb      	ldrb	r3, [r7, #7]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d10d      	bne.n	80108f6 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80108da:	4a0a      	ldr	r2, [pc, #40]	; (8010904 <SwitchClass+0x194>)
 80108dc:	79fb      	ldrb	r3, [r7, #7]
 80108de:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80108e2:	4b0a      	ldr	r3, [pc, #40]	; (801090c <SwitchClass+0x19c>)
 80108e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e6:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80108e8:	2300      	movs	r3, #0
 80108ea:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80108ec:	e003      	b.n	80108f6 <SwitchClass+0x186>
            break;
 80108ee:	bf00      	nop
 80108f0:	e002      	b.n	80108f8 <SwitchClass+0x188>
            break;
 80108f2:	bf00      	nop
 80108f4:	e000      	b.n	80108f8 <SwitchClass+0x188>
            break;
 80108f6:	bf00      	nop
        }
    }

    return status;
 80108f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bdb0      	pop	{r4, r5, r7, pc}
 8010902:	bf00      	nop
 8010904:	2000122c 	.word	0x2000122c
 8010908:	20000d20 	.word	0x20000d20
 801090c:	0801d920 	.word	0x0801d920

08010910 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	4603      	mov	r3, r0
 8010918:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801091a:	4b10      	ldr	r3, [pc, #64]	; (801095c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801091c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010920:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010922:	79fb      	ldrb	r3, [r7, #7]
 8010924:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010926:	230d      	movs	r3, #13
 8010928:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801092a:	4b0c      	ldr	r3, [pc, #48]	; (801095c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801092c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010934:	230e      	movs	r3, #14
 8010936:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010938:	4b08      	ldr	r3, [pc, #32]	; (801095c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801093a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801093e:	f107 0210 	add.w	r2, r7, #16
 8010942:	4611      	mov	r1, r2
 8010944:	4618      	mov	r0, r3
 8010946:	f005 f93b 	bl	8015bc0 <RegionGetPhyParam>
 801094a:	4603      	mov	r3, r0
 801094c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	b2db      	uxtb	r3, r3
}
 8010952:	4618      	mov	r0, r3
 8010954:	3718      	adds	r7, #24
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	2000122c 	.word	0x2000122c

08010960 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	4603      	mov	r3, r0
 8010968:	71fb      	strb	r3, [r7, #7]
 801096a:	460b      	mov	r3, r1
 801096c:	71bb      	strb	r3, [r7, #6]
 801096e:	4613      	mov	r3, r2
 8010970:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010972:	2300      	movs	r3, #0
 8010974:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801097a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801097e:	4618      	mov	r0, r3
 8010980:	f7ff ffc6 	bl	8010910 <GetMaxAppPayloadWithoutFOptsLength>
 8010984:	4603      	mov	r3, r0
 8010986:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010988:	79fb      	ldrb	r3, [r7, #7]
 801098a:	b29a      	uxth	r2, r3
 801098c:	797b      	ldrb	r3, [r7, #5]
 801098e:	b29b      	uxth	r3, r3
 8010990:	4413      	add	r3, r2
 8010992:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010994:	89ba      	ldrh	r2, [r7, #12]
 8010996:	89fb      	ldrh	r3, [r7, #14]
 8010998:	429a      	cmp	r2, r3
 801099a:	d804      	bhi.n	80109a6 <ValidatePayloadLength+0x46>
 801099c:	89bb      	ldrh	r3, [r7, #12]
 801099e:	2bff      	cmp	r3, #255	; 0xff
 80109a0:	d801      	bhi.n	80109a6 <ValidatePayloadLength+0x46>
    {
        return true;
 80109a2:	2301      	movs	r3, #1
 80109a4:	e000      	b.n	80109a8 <ValidatePayloadLength+0x48>
    }
    return false;
 80109a6:	2300      	movs	r3, #0
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3710      	adds	r7, #16
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80109b0:	b590      	push	{r4, r7, lr}
 80109b2:	b0a5      	sub	sp, #148	; 0x94
 80109b4:	af02      	add	r7, sp, #8
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	4608      	mov	r0, r1
 80109ba:	4611      	mov	r1, r2
 80109bc:	461a      	mov	r2, r3
 80109be:	4603      	mov	r3, r0
 80109c0:	70fb      	strb	r3, [r7, #3]
 80109c2:	460b      	mov	r3, r1
 80109c4:	70bb      	strb	r3, [r7, #2]
 80109c6:	4613      	mov	r3, r2
 80109c8:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80109ca:	2300      	movs	r3, #0
 80109cc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80109d0:	2300      	movs	r3, #0
 80109d2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80109d6:	2300      	movs	r3, #0
 80109d8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 80109dc:	f000 bc6d 	b.w	80112ba <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80109e0:	78fb      	ldrb	r3, [r7, #3]
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	4413      	add	r3, r2
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f003 fc8d 	bl	8014308 <LoRaMacCommandsGetCmdSize>
 80109ee:	4603      	mov	r3, r0
 80109f0:	461a      	mov	r2, r3
 80109f2:	78fb      	ldrb	r3, [r7, #3]
 80109f4:	441a      	add	r2, r3
 80109f6:	78bb      	ldrb	r3, [r7, #2]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	f300 8464 	bgt.w	80112c6 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80109fe:	78fb      	ldrb	r3, [r7, #3]
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	70fa      	strb	r2, [r7, #3]
 8010a04:	461a      	mov	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4413      	add	r3, r2
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	3b02      	subs	r3, #2
 8010a0e:	2b11      	cmp	r3, #17
 8010a10:	f200 845b 	bhi.w	80112ca <ProcessMacCommands+0x91a>
 8010a14:	a201      	add	r2, pc, #4	; (adr r2, 8010a1c <ProcessMacCommands+0x6c>)
 8010a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a1a:	bf00      	nop
 8010a1c:	08010a65 	.word	0x08010a65
 8010a20:	08010aa7 	.word	0x08010aa7
 8010a24:	08010bc3 	.word	0x08010bc3
 8010a28:	08010c01 	.word	0x08010c01
 8010a2c:	08010ced 	.word	0x08010ced
 8010a30:	08010d49 	.word	0x08010d49
 8010a34:	08010e05 	.word	0x08010e05
 8010a38:	08010e5b 	.word	0x08010e5b
 8010a3c:	08010f3f 	.word	0x08010f3f
 8010a40:	080112cb 	.word	0x080112cb
 8010a44:	080112cb 	.word	0x080112cb
 8010a48:	08010fe5 	.word	0x08010fe5
 8010a4c:	080112cb 	.word	0x080112cb
 8010a50:	080112cb 	.word	0x080112cb
 8010a54:	080110fb 	.word	0x080110fb
 8010a58:	0801112f 	.word	0x0801112f
 8010a5c:	080111bf 	.word	0x080111bf
 8010a60:	08011235 	.word	0x08011235
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010a64:	2004      	movs	r0, #4
 8010a66:	f003 fe27 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 8424 	beq.w	80112ba <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010a72:	2104      	movs	r1, #4
 8010a74:	2000      	movs	r0, #0
 8010a76:	f003 fd93 	bl	80145a0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010a7a:	78fb      	ldrb	r3, [r7, #3]
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	70fa      	strb	r2, [r7, #3]
 8010a80:	461a      	mov	r2, r3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4413      	add	r3, r2
 8010a86:	781a      	ldrb	r2, [r3, #0]
 8010a88:	4bac      	ldr	r3, [pc, #688]	; (8010d3c <ProcessMacCommands+0x38c>)
 8010a8a:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010a8e:	78fb      	ldrb	r3, [r7, #3]
 8010a90:	1c5a      	adds	r2, r3, #1
 8010a92:	70fa      	strb	r2, [r7, #3]
 8010a94:	461a      	mov	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4413      	add	r3, r2
 8010a9a:	781a      	ldrb	r2, [r3, #0]
 8010a9c:	4ba7      	ldr	r3, [pc, #668]	; (8010d3c <ProcessMacCommands+0x38c>)
 8010a9e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 8010aa2:	f000 bc0a 	b.w	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8010abe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010ac2:	f083 0301 	eor.w	r3, r3, #1
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d078      	beq.n	8010bbe <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8010acc:	2301      	movs	r3, #1
 8010ace:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010ad2:	78fb      	ldrb	r3, [r7, #3]
 8010ad4:	3b01      	subs	r3, #1
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	4413      	add	r3, r2
 8010ada:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010adc:	78ba      	ldrb	r2, [r7, #2]
 8010ade:	78fb      	ldrb	r3, [r7, #3]
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010aec:	4b94      	ldr	r3, [pc, #592]	; (8010d40 <ProcessMacCommands+0x390>)
 8010aee:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8010af2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010af6:	4b92      	ldr	r3, [pc, #584]	; (8010d40 <ProcessMacCommands+0x390>)
 8010af8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010afc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b00:	4b8f      	ldr	r3, [pc, #572]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b02:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b06:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010b0a:	4b8d      	ldr	r3, [pc, #564]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b0c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010b10:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010b14:	4b8a      	ldr	r3, [pc, #552]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b16:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010b1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8010b1e:	4b88      	ldr	r3, [pc, #544]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010b24:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8010b26:	4b86      	ldr	r3, [pc, #536]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b28:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010b2c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8010b30:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8010b34:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010b38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010b3c:	9301      	str	r3, [sp, #4]
 8010b3e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	4623      	mov	r3, r4
 8010b46:	f005 f8f8 	bl	8015d3a <RegionLinkAdrReq>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010b50:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010b54:	f003 0307 	and.w	r3, r3, #7
 8010b58:	2b07      	cmp	r3, #7
 8010b5a:	d10e      	bne.n	8010b7a <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010b5c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8010b60:	4b77      	ldr	r3, [pc, #476]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010b66:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8010b6a:	4b75      	ldr	r3, [pc, #468]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010b70:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010b74:	4b72      	ldr	r3, [pc, #456]	; (8010d40 <ProcessMacCommands+0x390>)
 8010b76:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010b80:	e00b      	b.n	8010b9a <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010b82:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8010b86:	2201      	movs	r2, #1
 8010b88:	4619      	mov	r1, r3
 8010b8a:	2003      	movs	r0, #3
 8010b8c:	f003 fa6c 	bl	8014068 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b90:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010b94:	3301      	adds	r3, #1
 8010b96:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010b9a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8010b9e:	4a69      	ldr	r2, [pc, #420]	; (8010d44 <ProcessMacCommands+0x394>)
 8010ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba4:	089b      	lsrs	r3, r3, #2
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d3e8      	bcc.n	8010b82 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010bb0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8010bb4:	78fb      	ldrb	r3, [r7, #3]
 8010bb6:	4413      	add	r3, r2
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010bbe:	bf00      	nop
 8010bc0:	e37b      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8010bc2:	78fb      	ldrb	r3, [r7, #3]
 8010bc4:	1c5a      	adds	r2, r3, #1
 8010bc6:	70fa      	strb	r2, [r7, #3]
 8010bc8:	461a      	mov	r2, r3
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4413      	add	r3, r2
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	f003 030f 	and.w	r3, r3, #15
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	4b5a      	ldr	r3, [pc, #360]	; (8010d40 <ProcessMacCommands+0x390>)
 8010bd8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010bdc:	4b58      	ldr	r3, [pc, #352]	; (8010d40 <ProcessMacCommands+0x390>)
 8010bde:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8010be2:	461a      	mov	r2, r3
 8010be4:	2301      	movs	r3, #1
 8010be6:	4093      	lsls	r3, r2
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	4b55      	ldr	r3, [pc, #340]	; (8010d40 <ProcessMacCommands+0x390>)
 8010bec:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010bf0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	2004      	movs	r0, #4
 8010bfa:	f003 fa35 	bl	8014068 <LoRaMacCommandsAddCmd>
                break;
 8010bfe:	e35c      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010c00:	2307      	movs	r3, #7
 8010c02:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010c06:	78fb      	ldrb	r3, [r7, #3]
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	091b      	lsrs	r3, r3, #4
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	b25b      	sxtb	r3, r3
 8010c14:	f003 0307 	and.w	r3, r3, #7
 8010c18:	b25b      	sxtb	r3, r3
 8010c1a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010c1e:	78fb      	ldrb	r3, [r7, #3]
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	4413      	add	r3, r2
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	b25b      	sxtb	r3, r3
 8010c28:	f003 030f 	and.w	r3, r3, #15
 8010c2c:	b25b      	sxtb	r3, r3
 8010c2e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8010c32:	78fb      	ldrb	r3, [r7, #3]
 8010c34:	3301      	adds	r3, #1
 8010c36:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	1c5a      	adds	r2, r3, #1
 8010c3c:	70fa      	strb	r2, [r7, #3]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	4413      	add	r3, r2
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010c48:	78fb      	ldrb	r3, [r7, #3]
 8010c4a:	1c5a      	adds	r2, r3, #1
 8010c4c:	70fa      	strb	r2, [r7, #3]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4413      	add	r3, r2
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	021a      	lsls	r2, r3, #8
 8010c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010c5e:	78fb      	ldrb	r3, [r7, #3]
 8010c60:	1c5a      	adds	r2, r3, #1
 8010c62:	70fa      	strb	r2, [r7, #3]
 8010c64:	461a      	mov	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4413      	add	r3, r2
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	041a      	lsls	r2, r3, #16
 8010c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c70:	4313      	orrs	r3, r2
 8010c72:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c76:	2264      	movs	r2, #100	; 0x64
 8010c78:	fb02 f303 	mul.w	r3, r2, r3
 8010c7c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010c7e:	4b30      	ldr	r3, [pc, #192]	; (8010d40 <ProcessMacCommands+0x390>)
 8010c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c84:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010c88:	4611      	mov	r1, r2
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f005 f86f 	bl	8015d6e <RegionRxParamSetupReq>
 8010c90:	4603      	mov	r3, r0
 8010c92:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010c96:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010c9a:	f003 0307 	and.w	r3, r3, #7
 8010c9e:	2b07      	cmp	r3, #7
 8010ca0:	d117      	bne.n	8010cd2 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010ca2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	4b25      	ldr	r3, [pc, #148]	; (8010d40 <ProcessMacCommands+0x390>)
 8010caa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010cae:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010cb2:	b2da      	uxtb	r2, r3
 8010cb4:	4b22      	ldr	r3, [pc, #136]	; (8010d40 <ProcessMacCommands+0x390>)
 8010cb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cbc:	4a20      	ldr	r2, [pc, #128]	; (8010d40 <ProcessMacCommands+0x390>)
 8010cbe:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cc2:	4a1f      	ldr	r2, [pc, #124]	; (8010d40 <ProcessMacCommands+0x390>)
 8010cc4:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010cc6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	4b1c      	ldr	r3, [pc, #112]	; (8010d40 <ProcessMacCommands+0x390>)
 8010cce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8010cd2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010cd6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010cda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010cde:	2201      	movs	r2, #1
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	2005      	movs	r0, #5
 8010ce4:	f003 f9c0 	bl	8014068 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010ce8:	bf00      	nop
 8010cea:	e2e6      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010cec:	23ff      	movs	r3, #255	; 0xff
 8010cee:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010cf2:	4b12      	ldr	r3, [pc, #72]	; (8010d3c <ProcessMacCommands+0x38c>)
 8010cf4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00d      	beq.n	8010d18 <ProcessMacCommands+0x368>
 8010cfc:	4b0f      	ldr	r3, [pc, #60]	; (8010d3c <ProcessMacCommands+0x38c>)
 8010cfe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d007      	beq.n	8010d18 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010d08:	4b0c      	ldr	r3, [pc, #48]	; (8010d3c <ProcessMacCommands+0x38c>)
 8010d0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4798      	blx	r3
 8010d12:	4603      	mov	r3, r0
 8010d14:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010d18:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010d1c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010d20:	787b      	ldrb	r3, [r7, #1]
 8010d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010d2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010d30:	2202      	movs	r2, #2
 8010d32:	4619      	mov	r1, r3
 8010d34:	2006      	movs	r0, #6
 8010d36:	f003 f997 	bl	8014068 <LoRaMacCommandsAddCmd>
                break;
 8010d3a:	e2be      	b.n	80112ba <ProcessMacCommands+0x90a>
 8010d3c:	20000d20 	.word	0x20000d20
 8010d40:	2000122c 	.word	0x2000122c
 8010d44:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010d48:	2303      	movs	r3, #3
 8010d4a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010d4e:	78fb      	ldrb	r3, [r7, #3]
 8010d50:	1c5a      	adds	r2, r3, #1
 8010d52:	70fa      	strb	r2, [r7, #3]
 8010d54:	461a      	mov	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4413      	add	r3, r2
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	b25b      	sxtb	r3, r3
 8010d5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8010d62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010d66:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010d68:	78fb      	ldrb	r3, [r7, #3]
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	70fa      	strb	r2, [r7, #3]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4413      	add	r3, r2
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010d78:	78fb      	ldrb	r3, [r7, #3]
 8010d7a:	1c5a      	adds	r2, r3, #1
 8010d7c:	70fa      	strb	r2, [r7, #3]
 8010d7e:	461a      	mov	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4413      	add	r3, r2
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	021a      	lsls	r2, r3, #8
 8010d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010d8e:	78fb      	ldrb	r3, [r7, #3]
 8010d90:	1c5a      	adds	r2, r3, #1
 8010d92:	70fa      	strb	r2, [r7, #3]
 8010d94:	461a      	mov	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4413      	add	r3, r2
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	041a      	lsls	r2, r3, #16
 8010d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da0:	4313      	orrs	r3, r2
 8010da2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8010da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da6:	2264      	movs	r2, #100	; 0x64
 8010da8:	fb02 f303 	mul.w	r3, r2, r3
 8010dac:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010db2:	78fb      	ldrb	r3, [r7, #3]
 8010db4:	1c5a      	adds	r2, r3, #1
 8010db6:	70fa      	strb	r2, [r7, #3]
 8010db8:	461a      	mov	r2, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	b25b      	sxtb	r3, r3
 8010dc2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010dc6:	4b85      	ldr	r3, [pc, #532]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dcc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f004 ffde 	bl	8015d94 <RegionNewChannelReq>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010de0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010de4:	b25b      	sxtb	r3, r3
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	db0a      	blt.n	8010e00 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8010dea:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010dee:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010df2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010df6:	2201      	movs	r2, #1
 8010df8:	4619      	mov	r1, r3
 8010dfa:	2007      	movs	r0, #7
 8010dfc:	f003 f934 	bl	8014068 <LoRaMacCommandsAddCmd>
                }
                break;
 8010e00:	bf00      	nop
 8010e02:	e25a      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010e04:	78fb      	ldrb	r3, [r7, #3]
 8010e06:	1c5a      	adds	r2, r3, #1
 8010e08:	70fa      	strb	r2, [r7, #3]
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4413      	add	r3, r2
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	f003 030f 	and.w	r3, r3, #15
 8010e16:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8010e1a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d104      	bne.n	8010e2c <ProcessMacCommands+0x47c>
                {
                    delay++;
 8010e22:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010e26:	3301      	adds	r3, #1
 8010e28:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010e2c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010e34:	fb02 f303 	mul.w	r3, r2, r3
 8010e38:	461a      	mov	r2, r3
 8010e3a:	4b68      	ldr	r3, [pc, #416]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010e3c:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010e3e:	4b67      	ldr	r3, [pc, #412]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e42:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010e46:	4a65      	ldr	r2, [pc, #404]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010e48:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010e4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e4e:	2200      	movs	r2, #0
 8010e50:	4619      	mov	r1, r3
 8010e52:	2008      	movs	r0, #8
 8010e54:	f003 f908 	bl	8014068 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010e58:	e22f      	b.n	80112ba <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010e5a:	78fb      	ldrb	r3, [r7, #3]
 8010e5c:	1c5a      	adds	r2, r3, #1
 8010e5e:	70fa      	strb	r2, [r7, #3]
 8010e60:	461a      	mov	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4413      	add	r3, r2
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010e78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010e7c:	f003 0320 	and.w	r3, r3, #32
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010e84:	2301      	movs	r3, #1
 8010e86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010e8a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010e8e:	f003 0310 	and.w	r3, r3, #16
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d002      	beq.n	8010e9c <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010e96:	2301      	movs	r3, #1
 8010e98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010e9c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010ea0:	f003 030f 	and.w	r3, r3, #15
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010eaa:	4b4c      	ldr	r3, [pc, #304]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010eb0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f004 ff7f 	bl	8015dba <RegionTxParamSetupReq>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec2:	d03a      	beq.n	8010f3a <ProcessMacCommands+0x58a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010ec4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010ec8:	4b44      	ldr	r3, [pc, #272]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010ece:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010ed2:	4b42      	ldr	r3, [pc, #264]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010ed4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010ed8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010edc:	461a      	mov	r2, r3
 8010ede:	4b40      	ldr	r3, [pc, #256]	; (8010fe0 <ProcessMacCommands+0x630>)
 8010ee0:	5c9b      	ldrb	r3, [r3, r2]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7ef fed4 	bl	8000c90 <__aeabi_ui2f>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	4a3c      	ldr	r2, [pc, #240]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010eec:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010eee:	2302      	movs	r3, #2
 8010ef0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010ef4:	4b39      	ldr	r3, [pc, #228]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010ef6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010efa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010efe:	4b37      	ldr	r3, [pc, #220]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010f00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f04:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010f08:	4611      	mov	r1, r2
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f004 fe58 	bl	8015bc0 <RegionGetPhyParam>
 8010f10:	4603      	mov	r3, r0
 8010f12:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f16:	b25a      	sxtb	r2, r3
 8010f18:	4b30      	ldr	r3, [pc, #192]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010f1a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	bfb8      	it	lt
 8010f22:	4613      	movlt	r3, r2
 8010f24:	b25a      	sxtb	r2, r3
 8010f26:	4b2d      	ldr	r3, [pc, #180]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010f2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010f30:	2200      	movs	r2, #0
 8010f32:	4619      	mov	r1, r3
 8010f34:	2009      	movs	r0, #9
 8010f36:	f003 f897 	bl	8014068 <LoRaMacCommandsAddCmd>
                }
                break;
 8010f3a:	bf00      	nop
 8010f3c:	e1bd      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010f3e:	2303      	movs	r3, #3
 8010f40:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010f44:	78fb      	ldrb	r3, [r7, #3]
 8010f46:	1c5a      	adds	r2, r3, #1
 8010f48:	70fa      	strb	r2, [r7, #3]
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4413      	add	r3, r2
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010f56:	78fb      	ldrb	r3, [r7, #3]
 8010f58:	1c5a      	adds	r2, r3, #1
 8010f5a:	70fa      	strb	r2, [r7, #3]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4413      	add	r3, r2
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010f66:	78fb      	ldrb	r3, [r7, #3]
 8010f68:	1c5a      	adds	r2, r3, #1
 8010f6a:	70fa      	strb	r2, [r7, #3]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4413      	add	r3, r2
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	021a      	lsls	r2, r3, #8
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010f7c:	78fb      	ldrb	r3, [r7, #3]
 8010f7e:	1c5a      	adds	r2, r3, #1
 8010f80:	70fa      	strb	r2, [r7, #3]
 8010f82:	461a      	mov	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	4413      	add	r3, r2
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	041a      	lsls	r2, r3, #16
 8010f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f94:	2264      	movs	r2, #100	; 0x64
 8010f96:	fb02 f303 	mul.w	r3, r2, r3
 8010f9a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010f9c:	4b0f      	ldr	r3, [pc, #60]	; (8010fdc <ProcessMacCommands+0x62c>)
 8010f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fa2:	f107 0220 	add.w	r2, r7, #32
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f004 ff19 	bl	8015de0 <RegionDlChannelReq>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010fb6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010fba:	b25b      	sxtb	r3, r3
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	db0a      	blt.n	8010fd6 <ProcessMacCommands+0x626>
                {
                    macCmdPayload[0] = status;
 8010fc0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010fc4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010fc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010fcc:	2201      	movs	r2, #1
 8010fce:	4619      	mov	r1, r3
 8010fd0:	200a      	movs	r0, #10
 8010fd2:	f003 f849 	bl	8014068 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8010fd6:	bf00      	nop
 8010fd8:	e16f      	b.n	80112ba <ProcessMacCommands+0x90a>
 8010fda:	bf00      	nop
 8010fdc:	2000122c 	.word	0x2000122c
 8010fe0:	0801d8d8 	.word	0x0801d8d8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010fe4:	200a      	movs	r0, #10
 8010fe6:	f003 fb67 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f000 8164 	beq.w	80112ba <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010ff2:	210a      	movs	r1, #10
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	f003 fad3 	bl	80145a0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010ffa:	f107 0318 	add.w	r3, r7, #24
 8010ffe:	2200      	movs	r2, #0
 8011000:	601a      	str	r2, [r3, #0]
 8011002:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011004:	f107 0310 	add.w	r3, r7, #16
 8011008:	2200      	movs	r2, #0
 801100a:	601a      	str	r2, [r3, #0]
 801100c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801100e:	f107 0308 	add.w	r3, r7, #8
 8011012:	2200      	movs	r2, #0
 8011014:	601a      	str	r2, [r3, #0]
 8011016:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011018:	78fb      	ldrb	r3, [r7, #3]
 801101a:	1c5a      	adds	r2, r3, #1
 801101c:	70fa      	strb	r2, [r7, #3]
 801101e:	461a      	mov	r2, r3
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	4413      	add	r3, r2
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011028:	78fb      	ldrb	r3, [r7, #3]
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	70fa      	strb	r2, [r7, #3]
 801102e:	461a      	mov	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	4413      	add	r3, r2
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	021a      	lsls	r2, r3, #8
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	4313      	orrs	r3, r2
 801103c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801103e:	78fb      	ldrb	r3, [r7, #3]
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	70fa      	strb	r2, [r7, #3]
 8011044:	461a      	mov	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4413      	add	r3, r2
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	041a      	lsls	r2, r3, #16
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	4313      	orrs	r3, r2
 8011052:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011054:	78fb      	ldrb	r3, [r7, #3]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	70fa      	strb	r2, [r7, #3]
 801105a:	461a      	mov	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	4413      	add	r3, r2
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	061a      	lsls	r2, r3, #24
 8011064:	69bb      	ldr	r3, [r7, #24]
 8011066:	4313      	orrs	r3, r2
 8011068:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801106a:	78fb      	ldrb	r3, [r7, #3]
 801106c:	1c5a      	adds	r2, r3, #1
 801106e:	70fa      	strb	r2, [r7, #3]
 8011070:	461a      	mov	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	4413      	add	r3, r2
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	b21b      	sxth	r3, r3
 801107a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801107c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011080:	461a      	mov	r2, r3
 8011082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011086:	fb02 f303 	mul.w	r3, r2, r3
 801108a:	121b      	asrs	r3, r3, #8
 801108c:	b21b      	sxth	r3, r3
 801108e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011090:	f107 0310 	add.w	r3, r7, #16
 8011094:	f107 0218 	add.w	r2, r7, #24
 8011098:	e892 0003 	ldmia.w	r2, {r0, r1}
 801109c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80110a0:	693a      	ldr	r2, [r7, #16]
 80110a2:	4b8c      	ldr	r3, [pc, #560]	; (80112d4 <ProcessMacCommands+0x924>)
 80110a4:	4413      	add	r3, r2
 80110a6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80110a8:	f107 0308 	add.w	r3, r7, #8
 80110ac:	4618      	mov	r0, r3
 80110ae:	f00a fc79 	bl	801b9a4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80110b2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80110b6:	4b88      	ldr	r3, [pc, #544]	; (80112d8 <ProcessMacCommands+0x928>)
 80110b8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80110bc:	9200      	str	r2, [sp, #0]
 80110be:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80110c2:	f107 0210 	add.w	r2, r7, #16
 80110c6:	ca06      	ldmia	r2, {r1, r2}
 80110c8:	f00a fc05 	bl	801b8d6 <SysTimeSub>
 80110cc:	f107 0010 	add.w	r0, r7, #16
 80110d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80110d6:	f107 0208 	add.w	r2, r7, #8
 80110da:	ca06      	ldmia	r2, {r1, r2}
 80110dc:	f00a fbc2 	bl	801b864 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80110e0:	f107 0310 	add.w	r3, r7, #16
 80110e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80110e8:	f00a fc2e 	bl	801b948 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80110ec:	f002 fe81 	bl	8013df2 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80110f0:	4b79      	ldr	r3, [pc, #484]	; (80112d8 <ProcessMacCommands+0x928>)
 80110f2:	2201      	movs	r2, #1
 80110f4:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 80110f8:	e0df      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80110fa:	200d      	movs	r0, #13
 80110fc:	f003 fadc 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 8011100:	4603      	mov	r3, r0
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 80d9 	beq.w	80112ba <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011108:	210d      	movs	r1, #13
 801110a:	2000      	movs	r0, #0
 801110c:	f003 fa48 	bl	80145a0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011110:	4b71      	ldr	r3, [pc, #452]	; (80112d8 <ProcessMacCommands+0x928>)
 8011112:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011116:	2b04      	cmp	r3, #4
 8011118:	f000 80cf 	beq.w	80112ba <ProcessMacCommands+0x90a>
 801111c:	4b6e      	ldr	r3, [pc, #440]	; (80112d8 <ProcessMacCommands+0x928>)
 801111e:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8011122:	2b05      	cmp	r3, #5
 8011124:	f000 80c9 	beq.w	80112ba <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011128:	f002 fe44 	bl	8013db4 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801112c:	e0c5      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801112e:	2303      	movs	r3, #3
 8011130:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8011134:	2300      	movs	r3, #0
 8011136:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011138:	78fb      	ldrb	r3, [r7, #3]
 801113a:	1c5a      	adds	r2, r3, #1
 801113c:	70fa      	strb	r2, [r7, #3]
 801113e:	461a      	mov	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4413      	add	r3, r2
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011148:	78fb      	ldrb	r3, [r7, #3]
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	70fa      	strb	r2, [r7, #3]
 801114e:	461a      	mov	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4413      	add	r3, r2
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	021b      	lsls	r3, r3, #8
 8011158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801115a:	4313      	orrs	r3, r2
 801115c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801115e:	78fb      	ldrb	r3, [r7, #3]
 8011160:	1c5a      	adds	r2, r3, #1
 8011162:	70fa      	strb	r2, [r7, #3]
 8011164:	461a      	mov	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4413      	add	r3, r2
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	041b      	lsls	r3, r3, #16
 801116e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011170:	4313      	orrs	r3, r2
 8011172:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011176:	2264      	movs	r2, #100	; 0x64
 8011178:	fb02 f303 	mul.w	r3, r2, r3
 801117c:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 801117e:	78fb      	ldrb	r3, [r7, #3]
 8011180:	1c5a      	adds	r2, r3, #1
 8011182:	70fa      	strb	r2, [r7, #3]
 8011184:	461a      	mov	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4413      	add	r3, r2
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	f003 030f 	and.w	r3, r3, #15
 8011190:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011194:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011198:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801119a:	4618      	mov	r0, r3
 801119c:	f002 fe10 	bl	8013dc0 <LoRaMacClassBPingSlotChannelReq>
 80111a0:	4603      	mov	r3, r0
 80111a2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80111a6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80111aa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80111ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111b2:	2201      	movs	r2, #1
 80111b4:	4619      	mov	r1, r3
 80111b6:	2011      	movs	r0, #17
 80111b8:	f002 ff56 	bl	8014068 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80111bc:	e07d      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80111be:	200e      	movs	r0, #14
 80111c0:	f003 fa7a 	bl	80146b8 <LoRaMacConfirmQueueIsCmdActive>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d077      	beq.n	80112ba <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80111ca:	210e      	movs	r1, #14
 80111cc:	2000      	movs	r0, #0
 80111ce:	f003 f9e7 	bl	80145a0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80111d8:	2300      	movs	r3, #0
 80111da:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80111de:	78fb      	ldrb	r3, [r7, #3]
 80111e0:	1c5a      	adds	r2, r3, #1
 80111e2:	70fa      	strb	r2, [r7, #3]
 80111e4:	461a      	mov	r2, r3
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4413      	add	r3, r2
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80111f0:	78fb      	ldrb	r3, [r7, #3]
 80111f2:	1c5a      	adds	r2, r3, #1
 80111f4:	70fa      	strb	r2, [r7, #3]
 80111f6:	461a      	mov	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	4413      	add	r3, r2
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	021b      	lsls	r3, r3, #8
 8011200:	b21a      	sxth	r2, r3
 8011202:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8011206:	4313      	orrs	r3, r2
 8011208:	b21b      	sxth	r3, r3
 801120a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801120e:	78fb      	ldrb	r3, [r7, #3]
 8011210:	1c5a      	adds	r2, r3, #1
 8011212:	70fa      	strb	r2, [r7, #3]
 8011214:	461a      	mov	r2, r3
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	4413      	add	r3, r2
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011220:	4b2e      	ldr	r3, [pc, #184]	; (80112dc <ProcessMacCommands+0x92c>)
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8011228:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801122c:	4618      	mov	r0, r3
 801122e:	f002 fdd3 	bl	8013dd8 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011232:	e042      	b.n	80112ba <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011234:	2300      	movs	r3, #0
 8011236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801123a:	78fb      	ldrb	r3, [r7, #3]
 801123c:	1c5a      	adds	r2, r3, #1
 801123e:	70fa      	strb	r2, [r7, #3]
 8011240:	461a      	mov	r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4413      	add	r3, r2
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801124c:	78fb      	ldrb	r3, [r7, #3]
 801124e:	1c5a      	adds	r2, r3, #1
 8011250:	70fa      	strb	r2, [r7, #3]
 8011252:	461a      	mov	r2, r3
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4413      	add	r3, r2
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	021b      	lsls	r3, r3, #8
 801125c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011260:	4313      	orrs	r3, r2
 8011262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011266:	78fb      	ldrb	r3, [r7, #3]
 8011268:	1c5a      	adds	r2, r3, #1
 801126a:	70fa      	strb	r2, [r7, #3]
 801126c:	461a      	mov	r2, r3
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4413      	add	r3, r2
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	041b      	lsls	r3, r3, #16
 8011276:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801127a:	4313      	orrs	r3, r2
 801127c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8011280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011284:	2264      	movs	r2, #100	; 0x64
 8011286:	fb02 f303 	mul.w	r3, r2, r3
 801128a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801128e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011292:	f002 fdb4 	bl	8013dfe <LoRaMacClassBBeaconFreqReq>
 8011296:	4603      	mov	r3, r0
 8011298:	2b00      	cmp	r3, #0
 801129a:	d003      	beq.n	80112a4 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 801129c:	2301      	movs	r3, #1
 801129e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80112a2:	e002      	b.n	80112aa <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80112a4:	2300      	movs	r3, #0
 80112a6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80112aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80112ae:	2201      	movs	r2, #1
 80112b0:	4619      	mov	r1, r3
 80112b2:	2013      	movs	r0, #19
 80112b4:	f002 fed8 	bl	8014068 <LoRaMacCommandsAddCmd>
                }
                break;
 80112b8:	bf00      	nop
    while( macIndex < commandsSize )
 80112ba:	78fa      	ldrb	r2, [r7, #3]
 80112bc:	78bb      	ldrb	r3, [r7, #2]
 80112be:	429a      	cmp	r2, r3
 80112c0:	f4ff ab8e 	bcc.w	80109e0 <ProcessMacCommands+0x30>
 80112c4:	e002      	b.n	80112cc <ProcessMacCommands+0x91c>
            return;
 80112c6:	bf00      	nop
 80112c8:	e000      	b.n	80112cc <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80112ca:	bf00      	nop
        }
    }
}
 80112cc:	378c      	adds	r7, #140	; 0x8c
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd90      	pop	{r4, r7, pc}
 80112d2:	bf00      	nop
 80112d4:	12d53d80 	.word	0x12d53d80
 80112d8:	20000d20 	.word	0x20000d20
 80112dc:	20002084 	.word	0x20002084

080112e0 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b08e      	sub	sp, #56	; 0x38
 80112e4:	af02      	add	r7, sp, #8
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	607a      	str	r2, [r7, #4]
 80112ea:	461a      	mov	r2, r3
 80112ec:	460b      	mov	r3, r1
 80112ee:	72fb      	strb	r3, [r7, #11]
 80112f0:	4613      	mov	r3, r2
 80112f2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112f4:	2303      	movs	r3, #3
 80112f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80112fa:	4b65      	ldr	r3, [pc, #404]	; (8011490 <Send+0x1b0>)
 80112fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011300:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011304:	4b62      	ldr	r3, [pc, #392]	; (8011490 <Send+0x1b0>)
 8011306:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801130a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801130e:	4b60      	ldr	r3, [pc, #384]	; (8011490 <Send+0x1b0>)
 8011310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011312:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011314:	4b5e      	ldr	r3, [pc, #376]	; (8011490 <Send+0x1b0>)
 8011316:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801131a:	2b00      	cmp	r3, #0
 801131c:	d101      	bne.n	8011322 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801131e:	2307      	movs	r3, #7
 8011320:	e0b1      	b.n	8011486 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011322:	4b5b      	ldr	r3, [pc, #364]	; (8011490 <Send+0x1b0>)
 8011324:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8011328:	2b00      	cmp	r3, #0
 801132a:	d102      	bne.n	8011332 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 801132c:	4b58      	ldr	r3, [pc, #352]	; (8011490 <Send+0x1b0>)
 801132e:	2200      	movs	r2, #0
 8011330:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011338:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801133c:	f36f 0303 	bfc	r3, #0, #4
 8011340:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011344:	4b52      	ldr	r3, [pc, #328]	; (8011490 <Send+0x1b0>)
 8011346:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801134a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801134e:	f362 13c7 	bfi	r3, r2, #7, #1
 8011352:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011356:	4b4e      	ldr	r3, [pc, #312]	; (8011490 <Send+0x1b0>)
 8011358:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801135c:	2b01      	cmp	r3, #1
 801135e:	d106      	bne.n	801136e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011364:	f043 0310 	orr.w	r3, r3, #16
 8011368:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801136c:	e005      	b.n	801137a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801136e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011372:	f36f 1304 	bfc	r3, #4, #1
 8011376:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801137a:	4b45      	ldr	r3, [pc, #276]	; (8011490 <Send+0x1b0>)
 801137c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011380:	2b00      	cmp	r3, #0
 8011382:	d005      	beq.n	8011390 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011384:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011388:	f043 0320 	orr.w	r3, r3, #32
 801138c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011390:	4b3f      	ldr	r3, [pc, #252]	; (8011490 <Send+0x1b0>)
 8011392:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8011396:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8011398:	2301      	movs	r3, #1
 801139a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801139c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80113a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	bf14      	ite	ne
 80113aa:	2301      	movne	r3, #1
 80113ac:	2300      	moveq	r3, #0
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80113b2:	4b37      	ldr	r3, [pc, #220]	; (8011490 <Send+0x1b0>)
 80113b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113b6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80113b8:	4b36      	ldr	r3, [pc, #216]	; (8011494 <Send+0x1b4>)
 80113ba:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80113be:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80113c0:	4b34      	ldr	r3, [pc, #208]	; (8011494 <Send+0x1b4>)
 80113c2:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80113c6:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80113c8:	4b31      	ldr	r3, [pc, #196]	; (8011490 <Send+0x1b0>)
 80113ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80113ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80113d2:	4b2f      	ldr	r3, [pc, #188]	; (8011490 <Send+0x1b0>)
 80113d4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80113d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80113dc:	4b2c      	ldr	r3, [pc, #176]	; (8011490 <Send+0x1b0>)
 80113de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80113e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80113e6:	4b2a      	ldr	r3, [pc, #168]	; (8011490 <Send+0x1b0>)
 80113e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80113f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113f4:	f107 0014 	add.w	r0, r7, #20
 80113f8:	4a27      	ldr	r2, [pc, #156]	; (8011498 <Send+0x1b8>)
 80113fa:	4928      	ldr	r1, [pc, #160]	; (801149c <Send+0x1bc>)
 80113fc:	f002 fc1a 	bl	8013c34 <LoRaMacAdrCalcNext>
 8011400:	4603      	mov	r3, r0
 8011402:	461a      	mov	r2, r3
 8011404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011408:	f362 1386 	bfi	r3, r2, #6, #1
 801140c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011410:	7afa      	ldrb	r2, [r7, #11]
 8011412:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011416:	893b      	ldrh	r3, [r7, #8]
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	68f8      	ldr	r0, [r7, #12]
 801141e:	f000 fc2d 	bl	8011c7c <PrepareFrame>
 8011422:	4603      	mov	r3, r0
 8011424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801142c:	2b00      	cmp	r3, #0
 801142e:	d003      	beq.n	8011438 <Send+0x158>
 8011430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011434:	2b0a      	cmp	r3, #10
 8011436:	d107      	bne.n	8011448 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011438:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801143c:	4618      	mov	r0, r3
 801143e:	f000 f96d 	bl	801171c <ScheduleTx>
 8011442:	4603      	mov	r3, r0
 8011444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801144c:	2b00      	cmp	r3, #0
 801144e:	d00a      	beq.n	8011466 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011450:	4a0f      	ldr	r2, [pc, #60]	; (8011490 <Send+0x1b0>)
 8011452:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011456:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801145a:	4a0d      	ldr	r2, [pc, #52]	; (8011490 <Send+0x1b0>)
 801145c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011460:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8011464:	e00d      	b.n	8011482 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011466:	4b0a      	ldr	r3, [pc, #40]	; (8011490 <Send+0x1b0>)
 8011468:	2200      	movs	r2, #0
 801146a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011470:	4a07      	ldr	r2, [pc, #28]	; (8011490 <Send+0x1b0>)
 8011472:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011474:	f002 fe70 	bl	8014158 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d001      	beq.n	8011482 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801147e:	2313      	movs	r3, #19
 8011480:	e001      	b.n	8011486 <Send+0x1a6>
        }
    }
    return status;
 8011482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011486:	4618      	mov	r0, r3
 8011488:	3730      	adds	r7, #48	; 0x30
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
 801148e:	bf00      	nop
 8011490:	2000122c 	.word	0x2000122c
 8011494:	20000d20 	.word	0x20000d20
 8011498:	20001264 	.word	0x20001264
 801149c:	20001265 	.word	0x20001265

080114a0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80114aa:	2300      	movs	r3, #0
 80114ac:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80114ae:	2300      	movs	r3, #0
 80114b0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80114b2:	2301      	movs	r3, #1
 80114b4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80114b6:	79fb      	ldrb	r3, [r7, #7]
 80114b8:	2bff      	cmp	r3, #255	; 0xff
 80114ba:	d129      	bne.n	8011510 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80114bc:	2000      	movs	r0, #0
 80114be:	f7ff f957 	bl	8010770 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80114c2:	4b1a      	ldr	r3, [pc, #104]	; (801152c <SendReJoinReq+0x8c>)
 80114c4:	2200      	movs	r2, #0
 80114c6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80114ca:	4b18      	ldr	r3, [pc, #96]	; (801152c <SendReJoinReq+0x8c>)
 80114cc:	4a18      	ldr	r2, [pc, #96]	; (8011530 <SendReJoinReq+0x90>)
 80114ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80114d2:	4b16      	ldr	r3, [pc, #88]	; (801152c <SendReJoinReq+0x8c>)
 80114d4:	22ff      	movs	r2, #255	; 0xff
 80114d6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80114da:	7b3b      	ldrb	r3, [r7, #12]
 80114dc:	f36f 1347 	bfc	r3, #5, #3
 80114e0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80114e2:	7b3a      	ldrb	r2, [r7, #12]
 80114e4:	4b11      	ldr	r3, [pc, #68]	; (801152c <SendReJoinReq+0x8c>)
 80114e6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80114ea:	f7fc fb75 	bl	800dbd8 <SecureElementGetJoinEui>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2208      	movs	r2, #8
 80114f2:	4619      	mov	r1, r3
 80114f4:	480f      	ldr	r0, [pc, #60]	; (8011534 <SendReJoinReq+0x94>)
 80114f6:	f006 fe76 	bl	80181e6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80114fa:	f7fc fb4b 	bl	800db94 <SecureElementGetDevEui>
 80114fe:	4603      	mov	r3, r0
 8011500:	2208      	movs	r2, #8
 8011502:	4619      	mov	r1, r3
 8011504:	480c      	ldr	r0, [pc, #48]	; (8011538 <SendReJoinReq+0x98>)
 8011506:	f006 fe6e 	bl	80181e6 <memcpy1>

            allowDelayedTx = false;
 801150a:	2300      	movs	r3, #0
 801150c:	73fb      	strb	r3, [r7, #15]

            break;
 801150e:	e002      	b.n	8011516 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011510:	2302      	movs	r3, #2
 8011512:	73bb      	strb	r3, [r7, #14]
            break;
 8011514:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011516:	7bfb      	ldrb	r3, [r7, #15]
 8011518:	4618      	mov	r0, r3
 801151a:	f000 f8ff 	bl	801171c <ScheduleTx>
 801151e:	4603      	mov	r3, r0
 8011520:	73bb      	strb	r3, [r7, #14]
    return status;
 8011522:	7bbb      	ldrb	r3, [r7, #14]
}
 8011524:	4618      	mov	r0, r3
 8011526:	3710      	adds	r7, #16
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	20000d20 	.word	0x20000d20
 8011530:	20000d22 	.word	0x20000d22
 8011534:	20000e2e 	.word	0x20000e2e
 8011538:	20000e36 	.word	0x20000e36

0801153c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 801153c:	b580      	push	{r7, lr}
 801153e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011540:	f002 fbe7 	bl	8013d12 <LoRaMacClassBIsBeaconExpected>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d001      	beq.n	801154e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801154a:	230e      	movs	r3, #14
 801154c:	e013      	b.n	8011576 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801154e:	4b0b      	ldr	r3, [pc, #44]	; (801157c <CheckForClassBCollision+0x40>)
 8011550:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011554:	2b01      	cmp	r3, #1
 8011556:	d10d      	bne.n	8011574 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011558:	f002 fbe2 	bl	8013d20 <LoRaMacClassBIsPingExpected>
 801155c:	4603      	mov	r3, r0
 801155e:	2b00      	cmp	r3, #0
 8011560:	d001      	beq.n	8011566 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011562:	230f      	movs	r3, #15
 8011564:	e007      	b.n	8011576 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011566:	f002 fbe2 	bl	8013d2e <LoRaMacClassBIsMulticastExpected>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011570:	230f      	movs	r3, #15
 8011572:	e000      	b.n	8011576 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	2000122c 	.word	0x2000122c

08011580 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011580:	b590      	push	{r4, r7, lr}
 8011582:	b083      	sub	sp, #12
 8011584:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011586:	4b2d      	ldr	r3, [pc, #180]	; (801163c <ComputeRxWindowParameters+0xbc>)
 8011588:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801158c:	4b2b      	ldr	r3, [pc, #172]	; (801163c <ComputeRxWindowParameters+0xbc>)
 801158e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011592:	4b2a      	ldr	r3, [pc, #168]	; (801163c <ComputeRxWindowParameters+0xbc>)
 8011594:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8011598:	4b28      	ldr	r3, [pc, #160]	; (801163c <ComputeRxWindowParameters+0xbc>)
 801159a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801159e:	4b27      	ldr	r3, [pc, #156]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80115a4:	b25b      	sxtb	r3, r3
 80115a6:	f004 fc72 	bl	8015e8e <RegionApplyDrOffset>
 80115aa:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115ac:	b259      	sxtb	r1, r3
 80115ae:	4b23      	ldr	r3, [pc, #140]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80115b4:	4b21      	ldr	r3, [pc, #132]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115b8:	4821      	ldr	r0, [pc, #132]	; (8011640 <ComputeRxWindowParameters+0xc0>)
 80115ba:	9000      	str	r0, [sp, #0]
 80115bc:	4620      	mov	r0, r4
 80115be:	f004 fb76 	bl	8015cae <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115c2:	4b1e      	ldr	r3, [pc, #120]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80115c8:	4b1c      	ldr	r3, [pc, #112]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115ca:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80115ce:	b259      	sxtb	r1, r3
 80115d0:	4b1a      	ldr	r3, [pc, #104]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115d2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80115d6:	4b19      	ldr	r3, [pc, #100]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115da:	4c1a      	ldr	r4, [pc, #104]	; (8011644 <ComputeRxWindowParameters+0xc4>)
 80115dc:	9400      	str	r4, [sp, #0]
 80115de:	f004 fb66 	bl	8015cae <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80115e2:	4b16      	ldr	r3, [pc, #88]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115e6:	4a18      	ldr	r2, [pc, #96]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 80115e8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80115ec:	4413      	add	r3, r2
 80115ee:	4a16      	ldr	r2, [pc, #88]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 80115f0:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80115f4:	4b11      	ldr	r3, [pc, #68]	; (801163c <ComputeRxWindowParameters+0xbc>)
 80115f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115f8:	4a13      	ldr	r2, [pc, #76]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 80115fa:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80115fe:	4413      	add	r3, r2
 8011600:	4a11      	ldr	r2, [pc, #68]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 8011602:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011606:	4b0d      	ldr	r3, [pc, #52]	; (801163c <ComputeRxWindowParameters+0xbc>)
 8011608:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801160c:	2b00      	cmp	r3, #0
 801160e:	d111      	bne.n	8011634 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011610:	4b0a      	ldr	r3, [pc, #40]	; (801163c <ComputeRxWindowParameters+0xbc>)
 8011612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011614:	4a0c      	ldr	r2, [pc, #48]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 8011616:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801161a:	4413      	add	r3, r2
 801161c:	4a0a      	ldr	r2, [pc, #40]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 801161e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011622:	4b06      	ldr	r3, [pc, #24]	; (801163c <ComputeRxWindowParameters+0xbc>)
 8011624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011626:	4a08      	ldr	r2, [pc, #32]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 8011628:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801162c:	4413      	add	r3, r2
 801162e:	4a06      	ldr	r2, [pc, #24]	; (8011648 <ComputeRxWindowParameters+0xc8>)
 8011630:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011634:	bf00      	nop
 8011636:	3704      	adds	r7, #4
 8011638:	46bd      	mov	sp, r7
 801163a:	bd90      	pop	{r4, r7, pc}
 801163c:	2000122c 	.word	0x2000122c
 8011640:	200010d8 	.word	0x200010d8
 8011644:	200010ec 	.word	0x200010ec
 8011648:	20000d20 	.word	0x20000d20

0801164c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011656:	4b13      	ldr	r3, [pc, #76]	; (80116a4 <VerifyTxFrame+0x58>)
 8011658:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801165c:	2b00      	cmp	r3, #0
 801165e:	d01b      	beq.n	8011698 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011660:	1d3b      	adds	r3, r7, #4
 8011662:	4618      	mov	r0, r3
 8011664:	f002 fdbe 	bl	80141e4 <LoRaMacCommandsGetSizeSerializedCmds>
 8011668:	4603      	mov	r3, r0
 801166a:	2b00      	cmp	r3, #0
 801166c:	d001      	beq.n	8011672 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801166e:	2313      	movs	r3, #19
 8011670:	e013      	b.n	801169a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011672:	4b0d      	ldr	r3, [pc, #52]	; (80116a8 <VerifyTxFrame+0x5c>)
 8011674:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011678:	4a0a      	ldr	r2, [pc, #40]	; (80116a4 <VerifyTxFrame+0x58>)
 801167a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	b2d2      	uxtb	r2, r2
 8011682:	4618      	mov	r0, r3
 8011684:	f7ff f96c 	bl	8010960 <ValidatePayloadLength>
 8011688:	4603      	mov	r3, r0
 801168a:	f083 0301 	eor.w	r3, r3, #1
 801168e:	b2db      	uxtb	r3, r3
 8011690:	2b00      	cmp	r3, #0
 8011692:	d001      	beq.n	8011698 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011694:	2308      	movs	r3, #8
 8011696:	e000      	b.n	801169a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011698:	2300      	movs	r3, #0
}
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	2000122c 	.word	0x2000122c
 80116a8:	20000d20 	.word	0x20000d20

080116ac <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80116b2:	4b18      	ldr	r3, [pc, #96]	; (8011714 <SerializeTxFrame+0x68>)
 80116b4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d002      	beq.n	80116c2 <SerializeTxFrame+0x16>
 80116bc:	2b04      	cmp	r3, #4
 80116be:	d011      	beq.n	80116e4 <SerializeTxFrame+0x38>
 80116c0:	e021      	b.n	8011706 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80116c2:	4815      	ldr	r0, [pc, #84]	; (8011718 <SerializeTxFrame+0x6c>)
 80116c4:	f004 f8f3 	bl	80158ae <LoRaMacSerializerJoinRequest>
 80116c8:	4603      	mov	r3, r0
 80116ca:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80116cc:	79fb      	ldrb	r3, [r7, #7]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d001      	beq.n	80116d6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80116d2:	2311      	movs	r3, #17
 80116d4:	e01a      	b.n	801170c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80116d6:	4b0f      	ldr	r3, [pc, #60]	; (8011714 <SerializeTxFrame+0x68>)
 80116d8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80116dc:	b29a      	uxth	r2, r3
 80116de:	4b0d      	ldr	r3, [pc, #52]	; (8011714 <SerializeTxFrame+0x68>)
 80116e0:	801a      	strh	r2, [r3, #0]
            break;
 80116e2:	e012      	b.n	801170a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80116e4:	480c      	ldr	r0, [pc, #48]	; (8011718 <SerializeTxFrame+0x6c>)
 80116e6:	f004 f964 	bl	80159b2 <LoRaMacSerializerData>
 80116ea:	4603      	mov	r3, r0
 80116ec:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80116ee:	79fb      	ldrb	r3, [r7, #7]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d001      	beq.n	80116f8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80116f4:	2311      	movs	r3, #17
 80116f6:	e009      	b.n	801170c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80116f8:	4b06      	ldr	r3, [pc, #24]	; (8011714 <SerializeTxFrame+0x68>)
 80116fa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80116fe:	b29a      	uxth	r2, r3
 8011700:	4b04      	ldr	r3, [pc, #16]	; (8011714 <SerializeTxFrame+0x68>)
 8011702:	801a      	strh	r2, [r3, #0]
            break;
 8011704:	e001      	b.n	801170a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011706:	2303      	movs	r3, #3
 8011708:	e000      	b.n	801170c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	20000d20 	.word	0x20000d20
 8011718:	20000e28 	.word	0x20000e28

0801171c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b090      	sub	sp, #64	; 0x40
 8011720:	af02      	add	r7, sp, #8
 8011722:	4603      	mov	r3, r0
 8011724:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011726:	2303      	movs	r3, #3
 8011728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 801172c:	f7ff ff06 	bl	801153c <CheckForClassBCollision>
 8011730:	4603      	mov	r3, r0
 8011732:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801173a:	2b00      	cmp	r3, #0
 801173c:	d002      	beq.n	8011744 <ScheduleTx+0x28>
    {
        return status;
 801173e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011742:	e08f      	b.n	8011864 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011744:	f000 f8fa 	bl	801193c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011748:	f7ff ffb0 	bl	80116ac <SerializeTxFrame>
 801174c:	4603      	mov	r3, r0
 801174e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011752:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011756:	2b00      	cmp	r3, #0
 8011758:	d002      	beq.n	8011760 <ScheduleTx+0x44>
    {
        return status;
 801175a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801175e:	e081      	b.n	8011864 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011760:	4b42      	ldr	r3, [pc, #264]	; (801186c <ScheduleTx+0x150>)
 8011762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011764:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011766:	4b41      	ldr	r3, [pc, #260]	; (801186c <ScheduleTx+0x150>)
 8011768:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801176c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801176e:	4b3f      	ldr	r3, [pc, #252]	; (801186c <ScheduleTx+0x150>)
 8011770:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8011774:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801177a:	4618      	mov	r0, r3
 801177c:	f00a f94a 	bl	801ba14 <SysTimeGetMcuTime>
 8011780:	4638      	mov	r0, r7
 8011782:	4b3a      	ldr	r3, [pc, #232]	; (801186c <ScheduleTx+0x150>)
 8011784:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8011788:	9200      	str	r2, [sp, #0]
 801178a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801178e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011792:	ca06      	ldmia	r2, {r1, r2}
 8011794:	f00a f89f 	bl	801b8d6 <SysTimeSub>
 8011798:	f107 0320 	add.w	r3, r7, #32
 801179c:	463a      	mov	r2, r7
 801179e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117a2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80117a6:	4b31      	ldr	r3, [pc, #196]	; (801186c <ScheduleTx+0x150>)
 80117a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117aa:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80117ac:	2300      	movs	r3, #0
 80117ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80117b2:	2301      	movs	r3, #1
 80117b4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80117b6:	4b2e      	ldr	r3, [pc, #184]	; (8011870 <ScheduleTx+0x154>)
 80117b8:	881b      	ldrh	r3, [r3, #0]
 80117ba:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80117bc:	4b2b      	ldr	r3, [pc, #172]	; (801186c <ScheduleTx+0x150>)
 80117be:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d104      	bne.n	80117d0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80117c6:	2301      	movs	r3, #1
 80117c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80117cc:	2300      	movs	r3, #0
 80117ce:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80117d0:	4b26      	ldr	r3, [pc, #152]	; (801186c <ScheduleTx+0x150>)
 80117d2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80117d6:	f107 0114 	add.w	r1, r7, #20
 80117da:	4b26      	ldr	r3, [pc, #152]	; (8011874 <ScheduleTx+0x158>)
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	4b26      	ldr	r3, [pc, #152]	; (8011878 <ScheduleTx+0x15c>)
 80117e0:	4a26      	ldr	r2, [pc, #152]	; (801187c <ScheduleTx+0x160>)
 80117e2:	f004 fb2a 	bl	8015e3a <RegionNextChannel>
 80117e6:	4603      	mov	r3, r0
 80117e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80117ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d022      	beq.n	801183a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80117f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117f8:	2b0b      	cmp	r3, #11
 80117fa:	d11b      	bne.n	8011834 <ScheduleTx+0x118>
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d018      	beq.n	8011834 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011802:	4b1b      	ldr	r3, [pc, #108]	; (8011870 <ScheduleTx+0x154>)
 8011804:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8011808:	2b00      	cmp	r3, #0
 801180a:	d011      	beq.n	8011830 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 801180c:	4b18      	ldr	r3, [pc, #96]	; (8011870 <ScheduleTx+0x154>)
 801180e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011812:	f043 0320 	orr.w	r3, r3, #32
 8011816:	4a16      	ldr	r2, [pc, #88]	; (8011870 <ScheduleTx+0x154>)
 8011818:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 801181c:	4b14      	ldr	r3, [pc, #80]	; (8011870 <ScheduleTx+0x154>)
 801181e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 8011822:	4619      	mov	r1, r3
 8011824:	4816      	ldr	r0, [pc, #88]	; (8011880 <ScheduleTx+0x164>)
 8011826:	f00a fe99 	bl	801c55c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801182a:	4815      	ldr	r0, [pc, #84]	; (8011880 <ScheduleTx+0x164>)
 801182c:	f00a fdb8 	bl	801c3a0 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011830:	2300      	movs	r3, #0
 8011832:	e017      	b.n	8011864 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011838:	e014      	b.n	8011864 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801183a:	f7ff fea1 	bl	8011580 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801183e:	f7ff ff05 	bl	801164c <VerifyTxFrame>
 8011842:	4603      	mov	r3, r0
 8011844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801184c:	2b00      	cmp	r3, #0
 801184e:	d002      	beq.n	8011856 <ScheduleTx+0x13a>
    {
        return status;
 8011850:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011854:	e006      	b.n	8011864 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011856:	4b06      	ldr	r3, [pc, #24]	; (8011870 <ScheduleTx+0x154>)
 8011858:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 801185c:	4618      	mov	r0, r3
 801185e:	f000 fb29 	bl	8011eb4 <SendFrameOnChannel>
 8011862:	4603      	mov	r3, r0
}
 8011864:	4618      	mov	r0, r3
 8011866:	3738      	adds	r7, #56	; 0x38
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	2000122c 	.word	0x2000122c
 8011870:	20000d20 	.word	0x20000d20
 8011874:	2000125c 	.word	0x2000125c
 8011878:	200011a8 	.word	0x200011a8
 801187c:	20001135 	.word	0x20001135
 8011880:	20001088 	.word	0x20001088

08011884 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	4603      	mov	r3, r0
 801188c:	460a      	mov	r2, r1
 801188e:	71fb      	strb	r3, [r7, #7]
 8011890:	4613      	mov	r3, r2
 8011892:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011894:	2313      	movs	r3, #19
 8011896:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011898:	2300      	movs	r3, #0
 801189a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801189c:	4b25      	ldr	r3, [pc, #148]	; (8011934 <SecureFrame+0xb0>)
 801189e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d002      	beq.n	80118ac <SecureFrame+0x28>
 80118a6:	2b04      	cmp	r3, #4
 80118a8:	d011      	beq.n	80118ce <SecureFrame+0x4a>
 80118aa:	e03b      	b.n	8011924 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80118ac:	4822      	ldr	r0, [pc, #136]	; (8011938 <SecureFrame+0xb4>)
 80118ae:	f003 fbc7 	bl	8015040 <LoRaMacCryptoPrepareJoinRequest>
 80118b2:	4603      	mov	r3, r0
 80118b4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80118b6:	7bfb      	ldrb	r3, [r7, #15]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80118bc:	2311      	movs	r3, #17
 80118be:	e034      	b.n	801192a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80118c0:	4b1c      	ldr	r3, [pc, #112]	; (8011934 <SecureFrame+0xb0>)
 80118c2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	4b1a      	ldr	r3, [pc, #104]	; (8011934 <SecureFrame+0xb0>)
 80118ca:	801a      	strh	r2, [r3, #0]
            break;
 80118cc:	e02c      	b.n	8011928 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80118ce:	f107 0308 	add.w	r3, r7, #8
 80118d2:	4618      	mov	r0, r3
 80118d4:	f003 face 	bl	8014e74 <LoRaMacCryptoGetFCntUp>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d001      	beq.n	80118e2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80118de:	2312      	movs	r3, #18
 80118e0:	e023      	b.n	801192a <SecureFrame+0xa6>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80118e2:	4b14      	ldr	r3, [pc, #80]	; (8011934 <SecureFrame+0xb0>)
 80118e4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d104      	bne.n	80118f6 <SecureFrame+0x72>
 80118ec:	4b11      	ldr	r3, [pc, #68]	; (8011934 <SecureFrame+0xb0>)
 80118ee:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d902      	bls.n	80118fc <SecureFrame+0x78>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	3b01      	subs	r3, #1
 80118fa:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80118fc:	68b8      	ldr	r0, [r7, #8]
 80118fe:	79ba      	ldrb	r2, [r7, #6]
 8011900:	79f9      	ldrb	r1, [r7, #7]
 8011902:	4b0d      	ldr	r3, [pc, #52]	; (8011938 <SecureFrame+0xb4>)
 8011904:	f003 fcb4 	bl	8015270 <LoRaMacCryptoSecureMessage>
 8011908:	4603      	mov	r3, r0
 801190a:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801190c:	7bfb      	ldrb	r3, [r7, #15]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d001      	beq.n	8011916 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011912:	2311      	movs	r3, #17
 8011914:	e009      	b.n	801192a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011916:	4b07      	ldr	r3, [pc, #28]	; (8011934 <SecureFrame+0xb0>)
 8011918:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801191c:	b29a      	uxth	r2, r3
 801191e:	4b05      	ldr	r3, [pc, #20]	; (8011934 <SecureFrame+0xb0>)
 8011920:	801a      	strh	r2, [r3, #0]
            break;
 8011922:	e001      	b.n	8011928 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011924:	2303      	movs	r3, #3
 8011926:	e000      	b.n	801192a <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	20000d20 	.word	0x20000d20
 8011938:	20000e28 	.word	0x20000e28

0801193c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801193c:	b480      	push	{r7}
 801193e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011940:	4b09      	ldr	r3, [pc, #36]	; (8011968 <CalculateBackOff+0x2c>)
 8011942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011944:	2b00      	cmp	r3, #0
 8011946:	d10a      	bne.n	801195e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011948:	4b07      	ldr	r3, [pc, #28]	; (8011968 <CalculateBackOff+0x2c>)
 801194a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 801194e:	3b01      	subs	r3, #1
 8011950:	4a06      	ldr	r2, [pc, #24]	; (801196c <CalculateBackOff+0x30>)
 8011952:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8011956:	fb02 f303 	mul.w	r3, r2, r3
 801195a:	4a03      	ldr	r2, [pc, #12]	; (8011968 <CalculateBackOff+0x2c>)
 801195c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801195e:	bf00      	nop
 8011960:	46bd      	mov	sp, r7
 8011962:	bc80      	pop	{r7}
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	2000122c 	.word	0x2000122c
 801196c:	20000d20 	.word	0x20000d20

08011970 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	7139      	strb	r1, [r7, #4]
 801197a:	71fb      	strb	r3, [r7, #7]
 801197c:	4613      	mov	r3, r2
 801197e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011980:	79fb      	ldrb	r3, [r7, #7]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d002      	beq.n	801198c <RemoveMacCommands+0x1c>
 8011986:	79fb      	ldrb	r3, [r7, #7]
 8011988:	2b01      	cmp	r3, #1
 801198a:	d10d      	bne.n	80119a8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801198c:	79bb      	ldrb	r3, [r7, #6]
 801198e:	2b01      	cmp	r3, #1
 8011990:	d108      	bne.n	80119a4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011992:	793b      	ldrb	r3, [r7, #4]
 8011994:	f003 0320 	and.w	r3, r3, #32
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b00      	cmp	r3, #0
 801199c:	d004      	beq.n	80119a8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801199e:	f002 fbff 	bl	80141a0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80119a2:	e001      	b.n	80119a8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80119a4:	f002 fbfc 	bl	80141a0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80119b0:	b5b0      	push	{r4, r5, r7, lr}
 80119b2:	b08e      	sub	sp, #56	; 0x38
 80119b4:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80119b6:	4b68      	ldr	r3, [pc, #416]	; (8011b58 <ResetMacParameters+0x1a8>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80119be:	4b66      	ldr	r3, [pc, #408]	; (8011b58 <ResetMacParameters+0x1a8>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80119c4:	4b65      	ldr	r3, [pc, #404]	; (8011b5c <ResetMacParameters+0x1ac>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80119cc:	4b63      	ldr	r3, [pc, #396]	; (8011b5c <ResetMacParameters+0x1ac>)
 80119ce:	2201      	movs	r2, #1
 80119d0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 80119d4:	4b61      	ldr	r3, [pc, #388]	; (8011b5c <ResetMacParameters+0x1ac>)
 80119d6:	2201      	movs	r2, #1
 80119d8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 80119dc:	4b5f      	ldr	r3, [pc, #380]	; (8011b5c <ResetMacParameters+0x1ac>)
 80119de:	2200      	movs	r2, #0
 80119e0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80119e4:	4b5c      	ldr	r3, [pc, #368]	; (8011b58 <ResetMacParameters+0x1a8>)
 80119e6:	2200      	movs	r2, #0
 80119e8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80119ec:	4b5a      	ldr	r3, [pc, #360]	; (8011b58 <ResetMacParameters+0x1a8>)
 80119ee:	2201      	movs	r2, #1
 80119f0:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80119f4:	4b58      	ldr	r3, [pc, #352]	; (8011b58 <ResetMacParameters+0x1a8>)
 80119f6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80119fa:	4b57      	ldr	r3, [pc, #348]	; (8011b58 <ResetMacParameters+0x1a8>)
 80119fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011a00:	4b55      	ldr	r3, [pc, #340]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a02:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8011a06:	4b54      	ldr	r3, [pc, #336]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011a0c:	4b52      	ldr	r3, [pc, #328]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a0e:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8011a12:	4b51      	ldr	r3, [pc, #324]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011a18:	4b4f      	ldr	r3, [pc, #316]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a1a:	4a4f      	ldr	r2, [pc, #316]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a1c:	3364      	adds	r3, #100	; 0x64
 8011a1e:	32a8      	adds	r2, #168	; 0xa8
 8011a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a24:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011a28:	4b4b      	ldr	r3, [pc, #300]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a2a:	4a4b      	ldr	r2, [pc, #300]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a2c:	336c      	adds	r3, #108	; 0x6c
 8011a2e:	32b0      	adds	r2, #176	; 0xb0
 8011a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a34:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011a38:	4b47      	ldr	r3, [pc, #284]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a3a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011a3e:	4b46      	ldr	r3, [pc, #280]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011a44:	4b44      	ldr	r3, [pc, #272]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a46:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8011a4a:	4b43      	ldr	r3, [pc, #268]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a4c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011a50:	4b41      	ldr	r3, [pc, #260]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011a56:	4a40      	ldr	r2, [pc, #256]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a58:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011a5a:	4b3f      	ldr	r3, [pc, #252]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011a60:	4a3d      	ldr	r2, [pc, #244]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a62:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8011a64:	4b3d      	ldr	r3, [pc, #244]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011a66:	2200      	movs	r2, #0
 8011a68:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8011a6c:	4b3a      	ldr	r3, [pc, #232]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011a74:	2301      	movs	r3, #1
 8011a76:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011a78:	4b39      	ldr	r3, [pc, #228]	; (8011b60 <ResetMacParameters+0x1b0>)
 8011a7a:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011a7c:	4b39      	ldr	r3, [pc, #228]	; (8011b64 <ResetMacParameters+0x1b4>)
 8011a7e:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011a80:	4b35      	ldr	r3, [pc, #212]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a86:	1d3a      	adds	r2, r7, #4
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f004 f8c1 	bl	8015c12 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011a90:	4b32      	ldr	r3, [pc, #200]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011a98:	4b30      	ldr	r3, [pc, #192]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011a9a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011a9e:	4b2f      	ldr	r3, [pc, #188]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011aa0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011aa4:	4b2c      	ldr	r3, [pc, #176]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011aa8:	4a2c      	ldr	r2, [pc, #176]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011aaa:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011aae:	4b2a      	ldr	r3, [pc, #168]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011ab0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011ab4:	4b29      	ldr	r3, [pc, #164]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011ab6:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8011aba:	4b27      	ldr	r3, [pc, #156]	; (8011b58 <ResetMacParameters+0x1a8>)
 8011abc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011ac0:	4b26      	ldr	r3, [pc, #152]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011ac2:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011ac6:	4b25      	ldr	r3, [pc, #148]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011ace:	4b23      	ldr	r3, [pc, #140]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011ad6:	4a21      	ldr	r2, [pc, #132]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011ad8:	4b20      	ldr	r3, [pc, #128]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011ada:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011ade:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ae6:	682b      	ldr	r3, [r5, #0]
 8011ae8:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011aea:	4b1c      	ldr	r3, [pc, #112]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011aec:	2201      	movs	r2, #1
 8011aee:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011af2:	4b1a      	ldr	r3, [pc, #104]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011af4:	2202      	movs	r2, #2
 8011af6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8011b02:	4b16      	ldr	r3, [pc, #88]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011b04:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d009      	beq.n	8011b20 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011b0c:	4b13      	ldr	r3, [pc, #76]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011b0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011b16:	4b11      	ldr	r3, [pc, #68]	; (8011b5c <ResetMacParameters+0x1ac>)
 8011b18:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b1c:	691b      	ldr	r3, [r3, #16]
 8011b1e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011b20:	4b11      	ldr	r3, [pc, #68]	; (8011b68 <ResetMacParameters+0x1b8>)
 8011b22:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011b24:	4b11      	ldr	r3, [pc, #68]	; (8011b6c <ResetMacParameters+0x1bc>)
 8011b26:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011b28:	4b11      	ldr	r3, [pc, #68]	; (8011b70 <ResetMacParameters+0x1c0>)
 8011b2a:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011b2c:	4b11      	ldr	r3, [pc, #68]	; (8011b74 <ResetMacParameters+0x1c4>)
 8011b2e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011b30:	4b11      	ldr	r3, [pc, #68]	; (8011b78 <ResetMacParameters+0x1c8>)
 8011b32:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011b34:	4b11      	ldr	r3, [pc, #68]	; (8011b7c <ResetMacParameters+0x1cc>)
 8011b36:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011b38:	4b11      	ldr	r3, [pc, #68]	; (8011b80 <ResetMacParameters+0x1d0>)
 8011b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011b3c:	4b11      	ldr	r3, [pc, #68]	; (8011b84 <ResetMacParameters+0x1d4>)
 8011b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011b40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011b44:	f107 0310 	add.w	r3, r7, #16
 8011b48:	4a0f      	ldr	r2, [pc, #60]	; (8011b88 <ResetMacParameters+0x1d8>)
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f002 f88a 	bl	8013c64 <LoRaMacClassBInit>
}
 8011b50:	bf00      	nop
 8011b52:	3738      	adds	r7, #56	; 0x38
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bdb0      	pop	{r4, r5, r7, pc}
 8011b58:	2000122c 	.word	0x2000122c
 8011b5c:	20000d20 	.word	0x20000d20
 8011b60:	2000140c 	.word	0x2000140c
 8011b64:	200014a0 	.word	0x200014a0
 8011b68:	20001180 	.word	0x20001180
 8011b6c:	2000113c 	.word	0x2000113c
 8011b70:	2000116c 	.word	0x2000116c
 8011b74:	200011a5 	.word	0x200011a5
 8011b78:	20001300 	.word	0x20001300
 8011b7c:	2000126c 	.word	0x2000126c
 8011b80:	20001270 	.word	0x20001270
 8011b84:	20001304 	.word	0x20001304
 8011b88:	2000193c 	.word	0x2000193c

08011b8c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f00a fc70 	bl	801c47c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011b9c:	4b11      	ldr	r3, [pc, #68]	; (8011be4 <RxWindowSetup+0x58>)
 8011b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ba0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011ba2:	4b11      	ldr	r3, [pc, #68]	; (8011be8 <RxWindowSetup+0x5c>)
 8011ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ba8:	4a10      	ldr	r2, [pc, #64]	; (8011bec <RxWindowSetup+0x60>)
 8011baa:	6839      	ldr	r1, [r7, #0]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f004 f898 	bl	8015ce2 <RegionRxConfig>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d010      	beq.n	8011bda <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011bb8:	4b0d      	ldr	r3, [pc, #52]	; (8011bf0 <RxWindowSetup+0x64>)
 8011bba:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8011bbe:	4b0c      	ldr	r3, [pc, #48]	; (8011bf0 <RxWindowSetup+0x64>)
 8011bc0:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011bc4:	4b07      	ldr	r3, [pc, #28]	; (8011be4 <RxWindowSetup+0x58>)
 8011bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bc8:	4a07      	ldr	r2, [pc, #28]	; (8011be8 <RxWindowSetup+0x5c>)
 8011bca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011bcc:	4610      	mov	r0, r2
 8011bce:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	7cda      	ldrb	r2, [r3, #19]
 8011bd4:	4b06      	ldr	r3, [pc, #24]	; (8011bf0 <RxWindowSetup+0x64>)
 8011bd6:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8011bda:	bf00      	nop
 8011bdc:	3708      	adds	r7, #8
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	0801d920 	.word	0x0801d920
 8011be8:	2000122c 	.word	0x2000122c
 8011bec:	20001140 	.word	0x20001140
 8011bf0:	20000d20 	.word	0x20000d20

08011bf4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011bf4:	b590      	push	{r4, r7, lr}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bfa:	4b1b      	ldr	r3, [pc, #108]	; (8011c68 <OpenContinuousRxCWindow+0x74>)
 8011bfc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011c00:	4b19      	ldr	r3, [pc, #100]	; (8011c68 <OpenContinuousRxCWindow+0x74>)
 8011c02:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011c06:	b259      	sxtb	r1, r3
 8011c08:	4b17      	ldr	r3, [pc, #92]	; (8011c68 <OpenContinuousRxCWindow+0x74>)
 8011c0a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011c0e:	4b16      	ldr	r3, [pc, #88]	; (8011c68 <OpenContinuousRxCWindow+0x74>)
 8011c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c12:	4c16      	ldr	r4, [pc, #88]	; (8011c6c <OpenContinuousRxCWindow+0x78>)
 8011c14:	9400      	str	r4, [sp, #0]
 8011c16:	f004 f84a 	bl	8015cae <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011c1a:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <OpenContinuousRxCWindow+0x7c>)
 8011c1c:	2202      	movs	r2, #2
 8011c1e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011c22:	4b13      	ldr	r3, [pc, #76]	; (8011c70 <OpenContinuousRxCWindow+0x7c>)
 8011c24:	2201      	movs	r2, #1
 8011c26:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011c2a:	4b0f      	ldr	r3, [pc, #60]	; (8011c68 <OpenContinuousRxCWindow+0x74>)
 8011c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c30:	4a10      	ldr	r2, [pc, #64]	; (8011c74 <OpenContinuousRxCWindow+0x80>)
 8011c32:	490e      	ldr	r1, [pc, #56]	; (8011c6c <OpenContinuousRxCWindow+0x78>)
 8011c34:	4618      	mov	r0, r3
 8011c36:	f004 f854 	bl	8015ce2 <RegionRxConfig>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00f      	beq.n	8011c60 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011c40:	4b0b      	ldr	r3, [pc, #44]	; (8011c70 <OpenContinuousRxCWindow+0x7c>)
 8011c42:	f893 2420 	ldrb.w	r2, [r3, #1056]	; 0x420
 8011c46:	4b0a      	ldr	r3, [pc, #40]	; (8011c70 <OpenContinuousRxCWindow+0x7c>)
 8011c48:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 8011c4c:	4b0a      	ldr	r3, [pc, #40]	; (8011c78 <OpenContinuousRxCWindow+0x84>)
 8011c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c50:	2000      	movs	r0, #0
 8011c52:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011c54:	4b06      	ldr	r3, [pc, #24]	; (8011c70 <OpenContinuousRxCWindow+0x7c>)
 8011c56:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8011c5a:	4b05      	ldr	r3, [pc, #20]	; (8011c70 <OpenContinuousRxCWindow+0x7c>)
 8011c5c:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 8011c60:	bf00      	nop
 8011c62:	3704      	adds	r7, #4
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd90      	pop	{r4, r7, pc}
 8011c68:	2000122c 	.word	0x2000122c
 8011c6c:	20001100 	.word	0x20001100
 8011c70:	20000d20 	.word	0x20000d20
 8011c74:	20001140 	.word	0x20001140
 8011c78:	0801d920 	.word	0x0801d920

08011c7c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b088      	sub	sp, #32
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	4613      	mov	r3, r2
 8011c8a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011c8c:	4b82      	ldr	r3, [pc, #520]	; (8011e98 <PrepareFrame+0x21c>)
 8011c8e:	2200      	movs	r2, #0
 8011c90:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011c92:	4b81      	ldr	r3, [pc, #516]	; (8011e98 <PrepareFrame+0x21c>)
 8011c94:	2200      	movs	r2, #0
 8011c96:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d101      	bne.n	8011cb0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011cac:	2300      	movs	r3, #0
 8011cae:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011cb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	4879      	ldr	r0, [pc, #484]	; (8011e9c <PrepareFrame+0x220>)
 8011cb8:	f006 fa95 	bl	80181e6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011cbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	4b75      	ldr	r3, [pc, #468]	; (8011e98 <PrepareFrame+0x21c>)
 8011cc2:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	781a      	ldrb	r2, [r3, #0]
 8011cca:	4b73      	ldr	r3, [pc, #460]	; (8011e98 <PrepareFrame+0x21c>)
 8011ccc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	2b07      	cmp	r3, #7
 8011cda:	f000 80b9 	beq.w	8011e50 <PrepareFrame+0x1d4>
 8011cde:	2b07      	cmp	r3, #7
 8011ce0:	f300 80d0 	bgt.w	8011e84 <PrepareFrame+0x208>
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d006      	beq.n	8011cf6 <PrepareFrame+0x7a>
 8011ce8:	2b04      	cmp	r3, #4
 8011cea:	f040 80cb 	bne.w	8011e84 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011cee:	4b6a      	ldr	r3, [pc, #424]	; (8011e98 <PrepareFrame+0x21c>)
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011cf6:	4b68      	ldr	r3, [pc, #416]	; (8011e98 <PrepareFrame+0x21c>)
 8011cf8:	2204      	movs	r2, #4
 8011cfa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011cfe:	4b66      	ldr	r3, [pc, #408]	; (8011e98 <PrepareFrame+0x21c>)
 8011d00:	4a67      	ldr	r2, [pc, #412]	; (8011ea0 <PrepareFrame+0x224>)
 8011d02:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011d06:	4b64      	ldr	r3, [pc, #400]	; (8011e98 <PrepareFrame+0x21c>)
 8011d08:	22ff      	movs	r2, #255	; 0xff
 8011d0a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	781a      	ldrb	r2, [r3, #0]
 8011d12:	4b61      	ldr	r3, [pc, #388]	; (8011e98 <PrepareFrame+0x21c>)
 8011d14:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011d18:	4a5f      	ldr	r2, [pc, #380]	; (8011e98 <PrepareFrame+0x21c>)
 8011d1a:	79fb      	ldrb	r3, [r7, #7]
 8011d1c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011d20:	4b60      	ldr	r3, [pc, #384]	; (8011ea4 <PrepareFrame+0x228>)
 8011d22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8011d26:	4a5c      	ldr	r2, [pc, #368]	; (8011e98 <PrepareFrame+0x21c>)
 8011d28:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	781a      	ldrb	r2, [r3, #0]
 8011d30:	4b59      	ldr	r3, [pc, #356]	; (8011e98 <PrepareFrame+0x21c>)
 8011d32:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011d36:	4b58      	ldr	r3, [pc, #352]	; (8011e98 <PrepareFrame+0x21c>)
 8011d38:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8011d3c:	4b56      	ldr	r3, [pc, #344]	; (8011e98 <PrepareFrame+0x21c>)
 8011d3e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011d42:	4b55      	ldr	r3, [pc, #340]	; (8011e98 <PrepareFrame+0x21c>)
 8011d44:	4a55      	ldr	r2, [pc, #340]	; (8011e9c <PrepareFrame+0x220>)
 8011d46:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011d4a:	f107 0318 	add.w	r3, r7, #24
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f003 f890 	bl	8014e74 <LoRaMacCryptoGetFCntUp>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d001      	beq.n	8011d5e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011d5a:	2312      	movs	r3, #18
 8011d5c:	e098      	b.n	8011e90 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	4b4d      	ldr	r3, [pc, #308]	; (8011e98 <PrepareFrame+0x21c>)
 8011d64:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8011d68:	4b4b      	ldr	r3, [pc, #300]	; (8011e98 <PrepareFrame+0x21c>)
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011d70:	4b49      	ldr	r3, [pc, #292]	; (8011e98 <PrepareFrame+0x21c>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	4a47      	ldr	r2, [pc, #284]	; (8011e98 <PrepareFrame+0x21c>)
 8011d7c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011d80:	f107 0314 	add.w	r3, r7, #20
 8011d84:	4618      	mov	r0, r3
 8011d86:	f002 fa2d 	bl	80141e4 <LoRaMacCommandsGetSizeSerializedCmds>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d001      	beq.n	8011d94 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d90:	2313      	movs	r3, #19
 8011d92:	e07d      	b.n	8011e90 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d076      	beq.n	8011e88 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011d9a:	4b42      	ldr	r3, [pc, #264]	; (8011ea4 <PrepareFrame+0x228>)
 8011d9c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fe fdb5 	bl	8010910 <GetMaxAppPayloadWithoutFOptsLength>
 8011da6:	4603      	mov	r3, r0
 8011da8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011daa:	4b3b      	ldr	r3, [pc, #236]	; (8011e98 <PrepareFrame+0x21c>)
 8011dac:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d01d      	beq.n	8011df0 <PrepareFrame+0x174>
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	2b0f      	cmp	r3, #15
 8011db8:	d81a      	bhi.n	8011df0 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011dba:	f107 0314 	add.w	r3, r7, #20
 8011dbe:	4a3a      	ldr	r2, [pc, #232]	; (8011ea8 <PrepareFrame+0x22c>)
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	200f      	movs	r0, #15
 8011dc4:	f002 fa24 	bl	8014210 <LoRaMacCommandsSerializeCmds>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d001      	beq.n	8011dd2 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011dce:	2313      	movs	r3, #19
 8011dd0:	e05e      	b.n	8011e90 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	f003 030f 	and.w	r3, r3, #15
 8011dd8:	b2d9      	uxtb	r1, r3
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	7813      	ldrb	r3, [r2, #0]
 8011dde:	f361 0303 	bfi	r3, r1, #0, #4
 8011de2:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	781a      	ldrb	r2, [r3, #0]
 8011de8:	4b2b      	ldr	r3, [pc, #172]	; (8011e98 <PrepareFrame+0x21c>)
 8011dea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011dee:	e04b      	b.n	8011e88 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011df0:	4b29      	ldr	r3, [pc, #164]	; (8011e98 <PrepareFrame+0x21c>)
 8011df2:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d010      	beq.n	8011e1c <PrepareFrame+0x1a0>
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	2b0f      	cmp	r3, #15
 8011dfe:	d90d      	bls.n	8011e1c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011e00:	7ffb      	ldrb	r3, [r7, #31]
 8011e02:	f107 0114 	add.w	r1, r7, #20
 8011e06:	4a29      	ldr	r2, [pc, #164]	; (8011eac <PrepareFrame+0x230>)
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f002 fa01 	bl	8014210 <LoRaMacCommandsSerializeCmds>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d001      	beq.n	8011e18 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e14:	2313      	movs	r3, #19
 8011e16:	e03b      	b.n	8011e90 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011e18:	230a      	movs	r3, #10
 8011e1a:	e039      	b.n	8011e90 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011e1c:	7ffb      	ldrb	r3, [r7, #31]
 8011e1e:	f107 0114 	add.w	r1, r7, #20
 8011e22:	4a22      	ldr	r2, [pc, #136]	; (8011eac <PrepareFrame+0x230>)
 8011e24:	4618      	mov	r0, r3
 8011e26:	f002 f9f3 	bl	8014210 <LoRaMacCommandsSerializeCmds>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d001      	beq.n	8011e34 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e30:	2313      	movs	r3, #19
 8011e32:	e02d      	b.n	8011e90 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011e34:	4b18      	ldr	r3, [pc, #96]	; (8011e98 <PrepareFrame+0x21c>)
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011e3c:	4b16      	ldr	r3, [pc, #88]	; (8011e98 <PrepareFrame+0x21c>)
 8011e3e:	4a1b      	ldr	r2, [pc, #108]	; (8011eac <PrepareFrame+0x230>)
 8011e40:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	b2da      	uxtb	r2, r3
 8011e48:	4b13      	ldr	r3, [pc, #76]	; (8011e98 <PrepareFrame+0x21c>)
 8011e4a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8011e4e:	e01b      	b.n	8011e88 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d01a      	beq.n	8011e8c <PrepareFrame+0x210>
 8011e56:	4b10      	ldr	r3, [pc, #64]	; (8011e98 <PrepareFrame+0x21c>)
 8011e58:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d015      	beq.n	8011e8c <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011e60:	4813      	ldr	r0, [pc, #76]	; (8011eb0 <PrepareFrame+0x234>)
 8011e62:	4b0d      	ldr	r3, [pc, #52]	; (8011e98 <PrepareFrame+0x21c>)
 8011e64:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	f006 f9ba 	bl	80181e6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011e72:	4b09      	ldr	r3, [pc, #36]	; (8011e98 <PrepareFrame+0x21c>)
 8011e74:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	4b06      	ldr	r3, [pc, #24]	; (8011e98 <PrepareFrame+0x21c>)
 8011e80:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011e82:	e003      	b.n	8011e8c <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e84:	2302      	movs	r3, #2
 8011e86:	e003      	b.n	8011e90 <PrepareFrame+0x214>
            break;
 8011e88:	bf00      	nop
 8011e8a:	e000      	b.n	8011e8e <PrepareFrame+0x212>
            break;
 8011e8c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011e8e:	2300      	movs	r3, #0
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3720      	adds	r7, #32
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	20000d20 	.word	0x20000d20
 8011e9c:	20000e58 	.word	0x20000e58
 8011ea0:	20000d22 	.word	0x20000d22
 8011ea4:	2000122c 	.word	0x2000122c
 8011ea8:	20000e38 	.word	0x20000e38
 8011eac:	200011ac 	.word	0x200011ac
 8011eb0:	20000d23 	.word	0x20000d23

08011eb4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b08a      	sub	sp, #40	; 0x28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ebe:	2303      	movs	r3, #3
 8011ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011ec8:	79fb      	ldrb	r3, [r7, #7]
 8011eca:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011ecc:	4b47      	ldr	r3, [pc, #284]	; (8011fec <SendFrameOnChannel+0x138>)
 8011ece:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011ed2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011ed4:	4b45      	ldr	r3, [pc, #276]	; (8011fec <SendFrameOnChannel+0x138>)
 8011ed6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011eda:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011edc:	4b43      	ldr	r3, [pc, #268]	; (8011fec <SendFrameOnChannel+0x138>)
 8011ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ee0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011ee2:	4b42      	ldr	r3, [pc, #264]	; (8011fec <SendFrameOnChannel+0x138>)
 8011ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ee6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011ee8:	4b41      	ldr	r3, [pc, #260]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011eea:	881b      	ldrh	r3, [r3, #0]
 8011eec:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011eee:	4b3f      	ldr	r3, [pc, #252]	; (8011fec <SendFrameOnChannel+0x138>)
 8011ef0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011ef4:	f107 020f 	add.w	r2, r7, #15
 8011ef8:	f107 0110 	add.w	r1, r7, #16
 8011efc:	4b3d      	ldr	r3, [pc, #244]	; (8011ff4 <SendFrameOnChannel+0x140>)
 8011efe:	f003 ff05 	bl	8015d0c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f02:	4b3b      	ldr	r3, [pc, #236]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f04:	2201      	movs	r2, #1
 8011f06:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011f0a:	4b38      	ldr	r3, [pc, #224]	; (8011fec <SendFrameOnChannel+0x138>)
 8011f0c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011f10:	b2da      	uxtb	r2, r3
 8011f12:	4b37      	ldr	r3, [pc, #220]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f14:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8011f18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011f1c:	4b34      	ldr	r3, [pc, #208]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f1e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8011f22:	79fb      	ldrb	r3, [r7, #7]
 8011f24:	4a32      	ldr	r2, [pc, #200]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f26:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011f2a:	4b31      	ldr	r3, [pc, #196]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f2c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011f30:	4a2f      	ldr	r2, [pc, #188]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f32:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011f36:	4b2e      	ldr	r3, [pc, #184]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f38:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011f3c:	4a2c      	ldr	r2, [pc, #176]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f3e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011f42:	f001 fefb 	bl	8013d3c <LoRaMacClassBIsBeaconModeActive>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d00b      	beq.n	8011f64 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011f4c:	4b28      	ldr	r3, [pc, #160]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f4e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011f52:	4618      	mov	r0, r3
 8011f54:	f001 ff5d 	bl	8013e12 <LoRaMacClassBIsUplinkCollision>
 8011f58:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011f5a:	6a3b      	ldr	r3, [r7, #32]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011f60:	2310      	movs	r3, #16
 8011f62:	e03e      	b.n	8011fe2 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011f64:	4b21      	ldr	r3, [pc, #132]	; (8011fec <SendFrameOnChannel+0x138>)
 8011f66:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d101      	bne.n	8011f72 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011f6e:	f001 ff5a 	bl	8013e26 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011f72:	f001 fef4 	bl	8013d5e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011f76:	4b1d      	ldr	r3, [pc, #116]	; (8011fec <SendFrameOnChannel+0x138>)
 8011f78:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	4a1c      	ldr	r2, [pc, #112]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011f80:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8011f84:	4611      	mov	r1, r2
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7ff fc7c 	bl	8011884 <SecureFrame>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8011f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d002      	beq.n	8011fa0 <SendFrameOnChannel+0xec>
    {
        return status;
 8011f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f9e:	e020      	b.n	8011fe2 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011fa0:	4b13      	ldr	r3, [pc, #76]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011fa2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fa6:	f043 0302 	orr.w	r3, r3, #2
 8011faa:	4a11      	ldr	r2, [pc, #68]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011fac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8011fb0:	4b0f      	ldr	r3, [pc, #60]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011fb2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011fb6:	f083 0301 	eor.w	r3, r3, #1
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d007      	beq.n	8011fd0 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011fc0:	4b0b      	ldr	r3, [pc, #44]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011fc2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	b2da      	uxtb	r2, r3
 8011fca:	4b09      	ldr	r3, [pc, #36]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011fcc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011fd0:	4b09      	ldr	r3, [pc, #36]	; (8011ff8 <SendFrameOnChannel+0x144>)
 8011fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fd4:	4a06      	ldr	r2, [pc, #24]	; (8011ff0 <SendFrameOnChannel+0x13c>)
 8011fd6:	8812      	ldrh	r2, [r2, #0]
 8011fd8:	b2d2      	uxtb	r2, r2
 8011fda:	4611      	mov	r1, r2
 8011fdc:	4807      	ldr	r0, [pc, #28]	; (8011ffc <SendFrameOnChannel+0x148>)
 8011fde:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011fe0:	2300      	movs	r3, #0
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3728      	adds	r7, #40	; 0x28
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	2000122c 	.word	0x2000122c
 8011ff0:	20000d20 	.word	0x20000d20
 8011ff4:	20001138 	.word	0x20001138
 8011ff8:	0801d920 	.word	0x0801d920
 8011ffc:	20000d22 	.word	0x20000d22

08012000 <SetTxContinuousWave>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b086      	sub	sp, #24
 8012004:	af00      	add	r7, sp, #0
 8012006:	4603      	mov	r3, r0
 8012008:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801200a:	4b15      	ldr	r3, [pc, #84]	; (8012060 <SetTxContinuousWave+0x60>)
 801200c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8012010:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012012:	4b14      	ldr	r3, [pc, #80]	; (8012064 <SetTxContinuousWave+0x64>)
 8012014:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012018:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801201a:	4b12      	ldr	r3, [pc, #72]	; (8012064 <SetTxContinuousWave+0x64>)
 801201c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012020:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012022:	4b10      	ldr	r3, [pc, #64]	; (8012064 <SetTxContinuousWave+0x64>)
 8012024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012026:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012028:	4b0e      	ldr	r3, [pc, #56]	; (8012064 <SetTxContinuousWave+0x64>)
 801202a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801202c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801202e:	88fb      	ldrh	r3, [r7, #6]
 8012030:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8012032:	4b0c      	ldr	r3, [pc, #48]	; (8012064 <SetTxContinuousWave+0x64>)
 8012034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012038:	f107 0208 	add.w	r2, r7, #8
 801203c:	4611      	mov	r1, r2
 801203e:	4618      	mov	r0, r3
 8012040:	f003 ff13 	bl	8015e6a <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012044:	4b06      	ldr	r3, [pc, #24]	; (8012060 <SetTxContinuousWave+0x60>)
 8012046:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801204a:	f043 0302 	orr.w	r3, r3, #2
 801204e:	4a04      	ldr	r2, [pc, #16]	; (8012060 <SetTxContinuousWave+0x60>)
 8012050:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012054:	2300      	movs	r3, #0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3718      	adds	r7, #24
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	20000d20 	.word	0x20000d20
 8012064:	2000122c 	.word	0x2000122c

08012068 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	4603      	mov	r3, r0
 8012070:	6039      	str	r1, [r7, #0]
 8012072:	80fb      	strh	r3, [r7, #6]
 8012074:	4613      	mov	r3, r2
 8012076:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012078:	4b09      	ldr	r3, [pc, #36]	; (80120a0 <SetTxContinuousWave1+0x38>)
 801207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801207c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012080:	88fa      	ldrh	r2, [r7, #6]
 8012082:	6838      	ldr	r0, [r7, #0]
 8012084:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012086:	4b07      	ldr	r3, [pc, #28]	; (80120a4 <SetTxContinuousWave1+0x3c>)
 8012088:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801208c:	f043 0302 	orr.w	r3, r3, #2
 8012090:	4a04      	ldr	r2, [pc, #16]	; (80120a4 <SetTxContinuousWave1+0x3c>)
 8012092:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012096:	2300      	movs	r3, #0
}
 8012098:	4618      	mov	r0, r3
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	0801d920 	.word	0x0801d920
 80120a4:	20000d20 	.word	0x20000d20

080120a8 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 80120ae:	2300      	movs	r3, #0
 80120b0:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80120b2:	4b3e      	ldr	r3, [pc, #248]	; (80121ac <RestoreNvmData+0x104>)
 80120b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d001      	beq.n	80120c0 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80120bc:	2301      	movs	r3, #1
 80120be:	e071      	b.n	80121a4 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80120c0:	2124      	movs	r1, #36	; 0x24
 80120c2:	483b      	ldr	r0, [pc, #236]	; (80121b0 <RestoreNvmData+0x108>)
 80120c4:	f006 f8e4 	bl	8018290 <Crc32>
 80120c8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80120ca:	4b39      	ldr	r3, [pc, #228]	; (80121b0 <RestoreNvmData+0x108>)
 80120cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d001      	beq.n	80120d8 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80120d4:	2317      	movs	r3, #23
 80120d6:	e065      	b.n	80121a4 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80120d8:	2114      	movs	r1, #20
 80120da:	4836      	ldr	r0, [pc, #216]	; (80121b4 <RestoreNvmData+0x10c>)
 80120dc:	f006 f8d8 	bl	8018290 <Crc32>
 80120e0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80120e2:	4b33      	ldr	r3, [pc, #204]	; (80121b0 <RestoreNvmData+0x108>)
 80120e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d001      	beq.n	80120f0 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80120ec:	2317      	movs	r3, #23
 80120ee:	e059      	b.n	80121a4 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80120f0:	21dc      	movs	r1, #220	; 0xdc
 80120f2:	4831      	ldr	r0, [pc, #196]	; (80121b8 <RestoreNvmData+0x110>)
 80120f4:	f006 f8cc 	bl	8018290 <Crc32>
 80120f8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80120fa:	4b2d      	ldr	r3, [pc, #180]	; (80121b0 <RestoreNvmData+0x108>)
 80120fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	429a      	cmp	r2, r3
 8012104:	d001      	beq.n	801210a <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012106:	2317      	movs	r3, #23
 8012108:	e04c      	b.n	80121a4 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801210a:	21bc      	movs	r1, #188	; 0xbc
 801210c:	482b      	ldr	r0, [pc, #172]	; (80121bc <RestoreNvmData+0x114>)
 801210e:	f006 f8bf 	bl	8018290 <Crc32>
 8012112:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012114:	4b26      	ldr	r3, [pc, #152]	; (80121b0 <RestoreNvmData+0x108>)
 8012116:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	429a      	cmp	r2, r3
 801211e:	d001      	beq.n	8012124 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012120:	2317      	movs	r3, #23
 8012122:	e03f      	b.n	80121a4 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8012124:	2190      	movs	r1, #144	; 0x90
 8012126:	4826      	ldr	r0, [pc, #152]	; (80121c0 <RestoreNvmData+0x118>)
 8012128:	f006 f8b2 	bl	8018290 <Crc32>
 801212c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801212e:	4b20      	ldr	r3, [pc, #128]	; (80121b0 <RestoreNvmData+0x108>)
 8012130:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	429a      	cmp	r2, r3
 8012138:	d001      	beq.n	801213e <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801213a:	2317      	movs	r3, #23
 801213c:	e032      	b.n	80121a4 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801213e:	2114      	movs	r1, #20
 8012140:	4820      	ldr	r0, [pc, #128]	; (80121c4 <RestoreNvmData+0x11c>)
 8012142:	f006 f8a5 	bl	8018290 <Crc32>
 8012146:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8012148:	4b19      	ldr	r3, [pc, #100]	; (80121b0 <RestoreNvmData+0x108>)
 801214a:	f8d3 3724 	ldr.w	r3, [r3, #1828]	; 0x724
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	429a      	cmp	r2, r3
 8012152:	d001      	beq.n	8012158 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012154:	2317      	movs	r3, #23
 8012156:	e025      	b.n	80121a4 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8012158:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801215c:	4914      	ldr	r1, [pc, #80]	; (80121b0 <RestoreNvmData+0x108>)
 801215e:	481a      	ldr	r0, [pc, #104]	; (80121c8 <RestoreNvmData+0x120>)
 8012160:	f006 f841 	bl	80181e6 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012164:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8012168:	2100      	movs	r1, #0
 801216a:	4811      	ldr	r0, [pc, #68]	; (80121b0 <RestoreNvmData+0x108>)
 801216c:	f006 f876 	bl	801825c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012170:	4b0e      	ldr	r3, [pc, #56]	; (80121ac <RestoreNvmData+0x104>)
 8012172:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012176:	4b0d      	ldr	r3, [pc, #52]	; (80121ac <RestoreNvmData+0x104>)
 8012178:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801217c:	4b12      	ldr	r3, [pc, #72]	; (80121c8 <RestoreNvmData+0x120>)
 801217e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012180:	4a0a      	ldr	r2, [pc, #40]	; (80121ac <RestoreNvmData+0x104>)
 8012182:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012186:	4b10      	ldr	r3, [pc, #64]	; (80121c8 <RestoreNvmData+0x120>)
 8012188:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801218c:	4b07      	ldr	r3, [pc, #28]	; (80121ac <RestoreNvmData+0x104>)
 801218e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012192:	4b06      	ldr	r3, [pc, #24]	; (80121ac <RestoreNvmData+0x104>)
 8012194:	2201      	movs	r2, #1
 8012196:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801219a:	4b04      	ldr	r3, [pc, #16]	; (80121ac <RestoreNvmData+0x104>)
 801219c:	2202      	movs	r2, #2
 801219e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    return LORAMAC_STATUS_OK;
 80121a2:	2300      	movs	r3, #0
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	20000d20 	.word	0x20000d20
 80121b0:	20001954 	.word	0x20001954
 80121b4:	2000197c 	.word	0x2000197c
 80121b8:	20001994 	.word	0x20001994
 80121bc:	20001a74 	.word	0x20001a74
 80121c0:	20001b34 	.word	0x20001b34
 80121c4:	20002064 	.word	0x20002064
 80121c8:	2000122c 	.word	0x2000122c

080121cc <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d002      	beq.n	80121e2 <DetermineFrameType+0x16>
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d101      	bne.n	80121e6 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121e2:	2303      	movs	r3, #3
 80121e4:	e03b      	b.n	801225e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	7b1b      	ldrb	r3, [r3, #12]
 80121ea:	f003 030f 	and.w	r3, r3, #15
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d008      	beq.n	8012206 <DetermineFrameType+0x3a>
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d003      	beq.n	8012206 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	2200      	movs	r2, #0
 8012202:	701a      	strb	r2, [r3, #0]
 8012204:	e02a      	b.n	801225c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801220c:	2b00      	cmp	r3, #0
 801220e:	d103      	bne.n	8012218 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	2201      	movs	r2, #1
 8012214:	701a      	strb	r2, [r3, #0]
 8012216:	e021      	b.n	801225c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	7b1b      	ldrb	r3, [r3, #12]
 801221c:	f003 030f 	and.w	r3, r3, #15
 8012220:	b2db      	uxtb	r3, r3
 8012222:	2b00      	cmp	r3, #0
 8012224:	d108      	bne.n	8012238 <DetermineFrameType+0x6c>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f893 3020 	ldrb.w	r3, [r3, #32]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d103      	bne.n	8012238 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	2202      	movs	r2, #2
 8012234:	701a      	strb	r2, [r3, #0]
 8012236:	e011      	b.n	801225c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	7b1b      	ldrb	r3, [r3, #12]
 801223c:	f003 030f 	and.w	r3, r3, #15
 8012240:	b2db      	uxtb	r3, r3
 8012242:	2b00      	cmp	r3, #0
 8012244:	d108      	bne.n	8012258 <DetermineFrameType+0x8c>
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f893 3020 	ldrb.w	r3, [r3, #32]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d003      	beq.n	8012258 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	2203      	movs	r2, #3
 8012254:	701a      	strb	r2, [r3, #0]
 8012256:	e001      	b.n	801225c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012258:	2318      	movs	r3, #24
 801225a:	e000      	b.n	801225e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801225c:	2300      	movs	r3, #0
}
 801225e:	4618      	mov	r0, r3
 8012260:	370c      	adds	r7, #12
 8012262:	46bd      	mov	sp, r7
 8012264:	bc80      	pop	{r7}
 8012266:	4770      	bx	lr

08012268 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8012268:	b480      	push	{r7}
 801226a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 801226c:	4b12      	ldr	r3, [pc, #72]	; (80122b8 <CheckRetransUnconfirmedUplink+0x50>)
 801226e:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8012272:	4b12      	ldr	r3, [pc, #72]	; (80122bc <CheckRetransUnconfirmedUplink+0x54>)
 8012274:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8012278:	429a      	cmp	r2, r3
 801227a:	d301      	bcc.n	8012280 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801227c:	2301      	movs	r3, #1
 801227e:	e016      	b.n	80122ae <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012280:	4b0d      	ldr	r3, [pc, #52]	; (80122b8 <CheckRetransUnconfirmedUplink+0x50>)
 8012282:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8012286:	f003 0302 	and.w	r3, r3, #2
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b00      	cmp	r3, #0
 801228e:	d00d      	beq.n	80122ac <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012290:	4b0a      	ldr	r3, [pc, #40]	; (80122bc <CheckRetransUnconfirmedUplink+0x54>)
 8012292:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012296:	2b00      	cmp	r3, #0
 8012298:	d101      	bne.n	801229e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801229a:	2301      	movs	r3, #1
 801229c:	e007      	b.n	80122ae <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801229e:	4b06      	ldr	r3, [pc, #24]	; (80122b8 <CheckRetransUnconfirmedUplink+0x50>)
 80122a0:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d101      	bne.n	80122ac <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80122a8:	2301      	movs	r3, #1
 80122aa:	e000      	b.n	80122ae <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80122ac:	2300      	movs	r3, #0
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bc80      	pop	{r7}
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	20000d20 	.word	0x20000d20
 80122bc:	2000122c 	.word	0x2000122c

080122c0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80122c0:	b480      	push	{r7}
 80122c2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80122c4:	4b0e      	ldr	r3, [pc, #56]	; (8012300 <CheckRetransConfirmedUplink+0x40>)
 80122c6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80122ca:	4b0d      	ldr	r3, [pc, #52]	; (8012300 <CheckRetransConfirmedUplink+0x40>)
 80122cc:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d301      	bcc.n	80122d8 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80122d4:	2301      	movs	r3, #1
 80122d6:	e00f      	b.n	80122f8 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80122d8:	4b09      	ldr	r3, [pc, #36]	; (8012300 <CheckRetransConfirmedUplink+0x40>)
 80122da:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80122de:	f003 0302 	and.w	r3, r3, #2
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d006      	beq.n	80122f6 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80122e8:	4b05      	ldr	r3, [pc, #20]	; (8012300 <CheckRetransConfirmedUplink+0x40>)
 80122ea:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bc80      	pop	{r7}
 80122fe:	4770      	bx	lr
 8012300:	20000d20 	.word	0x20000d20

08012304 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012304:	b480      	push	{r7}
 8012306:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012308:	4b1a      	ldr	r3, [pc, #104]	; (8012374 <StopRetransmission+0x70>)
 801230a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 801230e:	f003 0302 	and.w	r3, r3, #2
 8012312:	b2db      	uxtb	r3, r3
 8012314:	2b00      	cmp	r3, #0
 8012316:	d009      	beq.n	801232c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012318:	4b16      	ldr	r3, [pc, #88]	; (8012374 <StopRetransmission+0x70>)
 801231a:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00e      	beq.n	8012340 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012322:	4b14      	ldr	r3, [pc, #80]	; (8012374 <StopRetransmission+0x70>)
 8012324:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012328:	2b01      	cmp	r3, #1
 801232a:	d009      	beq.n	8012340 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801232c:	4b12      	ldr	r3, [pc, #72]	; (8012378 <StopRetransmission+0x74>)
 801232e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012332:	2b00      	cmp	r3, #0
 8012334:	d004      	beq.n	8012340 <StopRetransmission+0x3c>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8012336:	4b10      	ldr	r3, [pc, #64]	; (8012378 <StopRetransmission+0x74>)
 8012338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801233a:	3301      	adds	r3, #1
 801233c:	4a0e      	ldr	r2, [pc, #56]	; (8012378 <StopRetransmission+0x74>)
 801233e:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012340:	4b0c      	ldr	r3, [pc, #48]	; (8012374 <StopRetransmission+0x70>)
 8012342:	2200      	movs	r2, #0
 8012344:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8012348:	4b0a      	ldr	r3, [pc, #40]	; (8012374 <StopRetransmission+0x70>)
 801234a:	2200      	movs	r2, #0
 801234c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8012350:	4b08      	ldr	r3, [pc, #32]	; (8012374 <StopRetransmission+0x70>)
 8012352:	2200      	movs	r2, #0
 8012354:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012358:	4b06      	ldr	r3, [pc, #24]	; (8012374 <StopRetransmission+0x70>)
 801235a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801235e:	f023 0302 	bic.w	r3, r3, #2
 8012362:	4a04      	ldr	r2, [pc, #16]	; (8012374 <StopRetransmission+0x70>)
 8012364:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8012368:	2301      	movs	r3, #1
}
 801236a:	4618      	mov	r0, r3
 801236c:	46bd      	mov	sp, r7
 801236e:	bc80      	pop	{r7}
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop
 8012374:	20000d20 	.word	0x20000d20
 8012378:	2000122c 	.word	0x2000122c

0801237c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	4603      	mov	r3, r0
 8012384:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8012386:	4b0b      	ldr	r3, [pc, #44]	; (80123b4 <CallNvmDataChangeCallback+0x38>)
 8012388:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00c      	beq.n	80123aa <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012390:	4b08      	ldr	r3, [pc, #32]	; (80123b4 <CallNvmDataChangeCallback+0x38>)
 8012392:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012396:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8012398:	2b00      	cmp	r3, #0
 801239a:	d006      	beq.n	80123aa <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801239c:	4b05      	ldr	r3, [pc, #20]	; (80123b4 <CallNvmDataChangeCallback+0x38>)
 801239e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	88fa      	ldrh	r2, [r7, #6]
 80123a6:	4610      	mov	r0, r2
 80123a8:	4798      	blx	r3
    }
}
 80123aa:	bf00      	nop
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	20000d20 	.word	0x20000d20

080123b8 <AckTimeoutRetriesProcess>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80123be:	4b1b      	ldr	r3, [pc, #108]	; (801242c <AckTimeoutRetriesProcess+0x74>)
 80123c0:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80123c4:	4b19      	ldr	r3, [pc, #100]	; (801242c <AckTimeoutRetriesProcess+0x74>)
 80123c6:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d229      	bcs.n	8012422 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80123ce:	4b17      	ldr	r3, [pc, #92]	; (801242c <AckTimeoutRetriesProcess+0x74>)
 80123d0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80123d4:	3301      	adds	r3, #1
 80123d6:	b2da      	uxtb	r2, r3
 80123d8:	4b14      	ldr	r3, [pc, #80]	; (801242c <AckTimeoutRetriesProcess+0x74>)
 80123da:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80123de:	4b13      	ldr	r3, [pc, #76]	; (801242c <AckTimeoutRetriesProcess+0x74>)
 80123e0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	b2db      	uxtb	r3, r3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d019      	beq.n	8012422 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80123ee:	2322      	movs	r3, #34	; 0x22
 80123f0:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80123f2:	4b0f      	ldr	r3, [pc, #60]	; (8012430 <AckTimeoutRetriesProcess+0x78>)
 80123f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80123f8:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80123fa:	4b0d      	ldr	r3, [pc, #52]	; (8012430 <AckTimeoutRetriesProcess+0x78>)
 80123fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012400:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012402:	4b0b      	ldr	r3, [pc, #44]	; (8012430 <AckTimeoutRetriesProcess+0x78>)
 8012404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012408:	f107 0208 	add.w	r2, r7, #8
 801240c:	4611      	mov	r1, r2
 801240e:	4618      	mov	r0, r3
 8012410:	f003 fbd6 	bl	8015bc0 <RegionGetPhyParam>
 8012414:	4603      	mov	r3, r0
 8012416:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	b25a      	sxtb	r2, r3
 801241c:	4b04      	ldr	r3, [pc, #16]	; (8012430 <AckTimeoutRetriesProcess+0x78>)
 801241e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8012422:	bf00      	nop
 8012424:	3710      	adds	r7, #16
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
 801242a:	bf00      	nop
 801242c:	20000d20 	.word	0x20000d20
 8012430:	2000122c 	.word	0x2000122c

08012434 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801243a:	4b14      	ldr	r3, [pc, #80]	; (801248c <AckTimeoutRetriesFinalize+0x58>)
 801243c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8012440:	f083 0301 	eor.w	r3, r3, #1
 8012444:	b2db      	uxtb	r3, r3
 8012446:	2b00      	cmp	r3, #0
 8012448:	d015      	beq.n	8012476 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801244a:	2302      	movs	r3, #2
 801244c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801244e:	4b10      	ldr	r3, [pc, #64]	; (8012490 <AckTimeoutRetriesFinalize+0x5c>)
 8012450:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8012452:	4b10      	ldr	r3, [pc, #64]	; (8012494 <AckTimeoutRetriesFinalize+0x60>)
 8012454:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012456:	4b10      	ldr	r3, [pc, #64]	; (8012498 <AckTimeoutRetriesFinalize+0x64>)
 8012458:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801245c:	1d3a      	adds	r2, r7, #4
 801245e:	4611      	mov	r1, r2
 8012460:	4618      	mov	r0, r3
 8012462:	f003 fbd6 	bl	8015c12 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012466:	4b09      	ldr	r3, [pc, #36]	; (801248c <AckTimeoutRetriesFinalize+0x58>)
 8012468:	2200      	movs	r2, #0
 801246a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 801246e:	4b07      	ldr	r3, [pc, #28]	; (801248c <AckTimeoutRetriesFinalize+0x58>)
 8012470:	2200      	movs	r2, #0
 8012472:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012476:	4b05      	ldr	r3, [pc, #20]	; (801248c <AckTimeoutRetriesFinalize+0x58>)
 8012478:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801247c:	4b03      	ldr	r3, [pc, #12]	; (801248c <AckTimeoutRetriesFinalize+0x58>)
 801247e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8012482:	bf00      	nop
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	20000d20 	.word	0x20000d20
 8012490:	2000140c 	.word	0x2000140c
 8012494:	200014a0 	.word	0x200014a0
 8012498:	2000122c 	.word	0x2000122c

0801249c <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 801249c:	b480      	push	{r7}
 801249e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80124a0:	4b0b      	ldr	r3, [pc, #44]	; (80124d0 <IsRequestPending+0x34>)
 80124a2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80124a6:	f003 0304 	and.w	r3, r3, #4
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d107      	bne.n	80124c0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80124b0:	4b07      	ldr	r3, [pc, #28]	; (80124d0 <IsRequestPending+0x34>)
 80124b2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 80124b6:	f003 0301 	and.w	r3, r3, #1
 80124ba:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d001      	beq.n	80124c4 <IsRequestPending+0x28>
    {
        return 1;
 80124c0:	2301      	movs	r3, #1
 80124c2:	e000      	b.n	80124c6 <IsRequestPending+0x2a>
    }
    return 0;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bc80      	pop	{r7}
 80124cc:	4770      	bx	lr
 80124ce:	bf00      	nop
 80124d0:	20000d20 	.word	0x20000d20

080124d4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80124d4:	b590      	push	{r4, r7, lr}
 80124d6:	b08f      	sub	sp, #60	; 0x3c
 80124d8:	af02      	add	r7, sp, #8
 80124da:	6178      	str	r0, [r7, #20]
 80124dc:	6139      	str	r1, [r7, #16]
 80124de:	4613      	mov	r3, r2
 80124e0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d002      	beq.n	80124ee <LoRaMacInitialization+0x1a>
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d101      	bne.n	80124f2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124ee:	2303      	movs	r3, #3
 80124f0:	e275      	b.n	80129de <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00b      	beq.n	8012512 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d007      	beq.n	8012512 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012506:	2b00      	cmp	r3, #0
 8012508:	d003      	beq.n	8012512 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801250e:	2b00      	cmp	r3, #0
 8012510:	d101      	bne.n	8012516 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012512:	2303      	movs	r3, #3
 8012514:	e263      	b.n	80129de <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012516:	7bfb      	ldrb	r3, [r7, #15]
 8012518:	4618      	mov	r0, r3
 801251a:	f003 fb41 	bl	8015ba0 <RegionIsActive>
 801251e:	4603      	mov	r3, r0
 8012520:	f083 0301 	eor.w	r3, r3, #1
 8012524:	b2db      	uxtb	r3, r3
 8012526:	2b00      	cmp	r3, #0
 8012528:	d001      	beq.n	801252e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801252a:	2309      	movs	r3, #9
 801252c:	e257      	b.n	80129de <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801252e:	6978      	ldr	r0, [r7, #20]
 8012530:	f001 ffb8 	bl	80144a4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012534:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8012538:	2100      	movs	r1, #0
 801253a:	48c7      	ldr	r0, [pc, #796]	; (8012858 <LoRaMacInitialization+0x384>)
 801253c:	f005 fe8e 	bl	801825c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012540:	f240 520c 	movw	r2, #1292	; 0x50c
 8012544:	2100      	movs	r1, #0
 8012546:	48c5      	ldr	r0, [pc, #788]	; (801285c <LoRaMacInitialization+0x388>)
 8012548:	f005 fe88 	bl	801825c <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 801254c:	4bc3      	ldr	r3, [pc, #780]	; (801285c <LoRaMacInitialization+0x388>)
 801254e:	2201      	movs	r2, #1
 8012550:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8012554:	4bc1      	ldr	r3, [pc, #772]	; (801285c <LoRaMacInitialization+0x388>)
 8012556:	2201      	movs	r2, #1
 8012558:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801255c:	4abe      	ldr	r2, [pc, #760]	; (8012858 <LoRaMacInitialization+0x384>)
 801255e:	7bfb      	ldrb	r3, [r7, #15]
 8012560:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012564:	4bbc      	ldr	r3, [pc, #752]	; (8012858 <LoRaMacInitialization+0x384>)
 8012566:	2200      	movs	r2, #0
 8012568:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 801256c:	4bba      	ldr	r3, [pc, #744]	; (8012858 <LoRaMacInitialization+0x384>)
 801256e:	2200      	movs	r2, #0
 8012570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012574:	4bb8      	ldr	r3, [pc, #736]	; (8012858 <LoRaMacInitialization+0x384>)
 8012576:	4aba      	ldr	r2, [pc, #744]	; (8012860 <LoRaMacInitialization+0x38c>)
 8012578:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801257c:	230f      	movs	r3, #15
 801257e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012582:	4bb5      	ldr	r3, [pc, #724]	; (8012858 <LoRaMacInitialization+0x384>)
 8012584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012588:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801258c:	4611      	mov	r1, r2
 801258e:	4618      	mov	r0, r3
 8012590:	f003 fb16 	bl	8015bc0 <RegionGetPhyParam>
 8012594:	4603      	mov	r3, r0
 8012596:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	2b00      	cmp	r3, #0
 801259c:	bf14      	ite	ne
 801259e:	2301      	movne	r3, #1
 80125a0:	2300      	moveq	r3, #0
 80125a2:	b2da      	uxtb	r2, r3
 80125a4:	4bac      	ldr	r3, [pc, #688]	; (8012858 <LoRaMacInitialization+0x384>)
 80125a6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80125aa:	230a      	movs	r3, #10
 80125ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125b0:	4ba9      	ldr	r3, [pc, #676]	; (8012858 <LoRaMacInitialization+0x384>)
 80125b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80125ba:	4611      	mov	r1, r2
 80125bc:	4618      	mov	r0, r3
 80125be:	f003 faff 	bl	8015bc0 <RegionGetPhyParam>
 80125c2:	4603      	mov	r3, r0
 80125c4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80125c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c8:	b25a      	sxtb	r2, r3
 80125ca:	4ba3      	ldr	r3, [pc, #652]	; (8012858 <LoRaMacInitialization+0x384>)
 80125cc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80125d0:	2306      	movs	r3, #6
 80125d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125d6:	4ba0      	ldr	r3, [pc, #640]	; (8012858 <LoRaMacInitialization+0x384>)
 80125d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80125e0:	4611      	mov	r1, r2
 80125e2:	4618      	mov	r0, r3
 80125e4:	f003 faec 	bl	8015bc0 <RegionGetPhyParam>
 80125e8:	4603      	mov	r3, r0
 80125ea:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80125ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ee:	b25a      	sxtb	r2, r3
 80125f0:	4b99      	ldr	r3, [pc, #612]	; (8012858 <LoRaMacInitialization+0x384>)
 80125f2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80125f6:	2310      	movs	r3, #16
 80125f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125fc:	4b96      	ldr	r3, [pc, #600]	; (8012858 <LoRaMacInitialization+0x384>)
 80125fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012602:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012606:	4611      	mov	r1, r2
 8012608:	4618      	mov	r0, r3
 801260a:	f003 fad9 	bl	8015bc0 <RegionGetPhyParam>
 801260e:	4603      	mov	r3, r0
 8012610:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012614:	4a90      	ldr	r2, [pc, #576]	; (8012858 <LoRaMacInitialization+0x384>)
 8012616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801261a:	2311      	movs	r3, #17
 801261c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012620:	4b8d      	ldr	r3, [pc, #564]	; (8012858 <LoRaMacInitialization+0x384>)
 8012622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801262a:	4611      	mov	r1, r2
 801262c:	4618      	mov	r0, r3
 801262e:	f003 fac7 	bl	8015bc0 <RegionGetPhyParam>
 8012632:	4603      	mov	r3, r0
 8012634:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012638:	4a87      	ldr	r2, [pc, #540]	; (8012858 <LoRaMacInitialization+0x384>)
 801263a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801263e:	2312      	movs	r3, #18
 8012640:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012644:	4b84      	ldr	r3, [pc, #528]	; (8012858 <LoRaMacInitialization+0x384>)
 8012646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801264a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801264e:	4611      	mov	r1, r2
 8012650:	4618      	mov	r0, r3
 8012652:	f003 fab5 	bl	8015bc0 <RegionGetPhyParam>
 8012656:	4603      	mov	r3, r0
 8012658:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265c:	4a7e      	ldr	r2, [pc, #504]	; (8012858 <LoRaMacInitialization+0x384>)
 801265e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012662:	2313      	movs	r3, #19
 8012664:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012668:	4b7b      	ldr	r3, [pc, #492]	; (8012858 <LoRaMacInitialization+0x384>)
 801266a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801266e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012672:	4611      	mov	r1, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f003 faa3 	bl	8015bc0 <RegionGetPhyParam>
 801267a:	4603      	mov	r3, r0
 801267c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012680:	4a75      	ldr	r2, [pc, #468]	; (8012858 <LoRaMacInitialization+0x384>)
 8012682:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012686:	2314      	movs	r3, #20
 8012688:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801268c:	4b72      	ldr	r3, [pc, #456]	; (8012858 <LoRaMacInitialization+0x384>)
 801268e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012692:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012696:	4611      	mov	r1, r2
 8012698:	4618      	mov	r0, r3
 801269a:	f003 fa91 	bl	8015bc0 <RegionGetPhyParam>
 801269e:	4603      	mov	r3, r0
 80126a0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80126a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a4:	4a6c      	ldr	r2, [pc, #432]	; (8012858 <LoRaMacInitialization+0x384>)
 80126a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80126aa:	2317      	movs	r3, #23
 80126ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126b0:	4b69      	ldr	r3, [pc, #420]	; (8012858 <LoRaMacInitialization+0x384>)
 80126b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80126b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80126ba:	4611      	mov	r1, r2
 80126bc:	4618      	mov	r0, r3
 80126be:	f003 fa7f 	bl	8015bc0 <RegionGetPhyParam>
 80126c2:	4603      	mov	r3, r0
 80126c4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	b2da      	uxtb	r2, r3
 80126ca:	4b63      	ldr	r3, [pc, #396]	; (8012858 <LoRaMacInitialization+0x384>)
 80126cc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80126d0:	2318      	movs	r3, #24
 80126d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126d6:	4b60      	ldr	r3, [pc, #384]	; (8012858 <LoRaMacInitialization+0x384>)
 80126d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80126dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80126e0:	4611      	mov	r1, r2
 80126e2:	4618      	mov	r0, r3
 80126e4:	f003 fa6c 	bl	8015bc0 <RegionGetPhyParam>
 80126e8:	4603      	mov	r3, r0
 80126ea:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ee:	4a5a      	ldr	r2, [pc, #360]	; (8012858 <LoRaMacInitialization+0x384>)
 80126f0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	4a58      	ldr	r2, [pc, #352]	; (8012858 <LoRaMacInitialization+0x384>)
 80126f8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80126fc:	2319      	movs	r3, #25
 80126fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012702:	4b55      	ldr	r3, [pc, #340]	; (8012858 <LoRaMacInitialization+0x384>)
 8012704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012708:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801270c:	4611      	mov	r1, r2
 801270e:	4618      	mov	r0, r3
 8012710:	f003 fa56 	bl	8015bc0 <RegionGetPhyParam>
 8012714:	4603      	mov	r3, r0
 8012716:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	b2da      	uxtb	r2, r3
 801271c:	4b4e      	ldr	r3, [pc, #312]	; (8012858 <LoRaMacInitialization+0x384>)
 801271e:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012724:	b2da      	uxtb	r2, r3
 8012726:	4b4c      	ldr	r3, [pc, #304]	; (8012858 <LoRaMacInitialization+0x384>)
 8012728:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801272c:	231e      	movs	r3, #30
 801272e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012732:	4b49      	ldr	r3, [pc, #292]	; (8012858 <LoRaMacInitialization+0x384>)
 8012734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012738:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801273c:	4611      	mov	r1, r2
 801273e:	4618      	mov	r0, r3
 8012740:	f003 fa3e 	bl	8015bc0 <RegionGetPhyParam>
 8012744:	4603      	mov	r3, r0
 8012746:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274a:	b2da      	uxtb	r2, r3
 801274c:	4b42      	ldr	r3, [pc, #264]	; (8012858 <LoRaMacInitialization+0x384>)
 801274e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012752:	231f      	movs	r3, #31
 8012754:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012758:	4b3f      	ldr	r3, [pc, #252]	; (8012858 <LoRaMacInitialization+0x384>)
 801275a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801275e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012762:	4611      	mov	r1, r2
 8012764:	4618      	mov	r0, r3
 8012766:	f003 fa2b 	bl	8015bc0 <RegionGetPhyParam>
 801276a:	4603      	mov	r3, r0
 801276c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012770:	b2da      	uxtb	r2, r3
 8012772:	4b39      	ldr	r3, [pc, #228]	; (8012858 <LoRaMacInitialization+0x384>)
 8012774:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012778:	2320      	movs	r3, #32
 801277a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801277e:	4b36      	ldr	r3, [pc, #216]	; (8012858 <LoRaMacInitialization+0x384>)
 8012780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012784:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012788:	4611      	mov	r1, r2
 801278a:	4618      	mov	r0, r3
 801278c:	f003 fa18 	bl	8015bc0 <RegionGetPhyParam>
 8012790:	4603      	mov	r3, r0
 8012792:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012796:	4a30      	ldr	r2, [pc, #192]	; (8012858 <LoRaMacInitialization+0x384>)
 8012798:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801279c:	2321      	movs	r3, #33	; 0x21
 801279e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127a2:	4b2d      	ldr	r3, [pc, #180]	; (8012858 <LoRaMacInitialization+0x384>)
 80127a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80127ac:	4611      	mov	r1, r2
 80127ae:	4618      	mov	r0, r3
 80127b0:	f003 fa06 	bl	8015bc0 <RegionGetPhyParam>
 80127b4:	4603      	mov	r3, r0
 80127b6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80127b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ba:	4a27      	ldr	r2, [pc, #156]	; (8012858 <LoRaMacInitialization+0x384>)
 80127bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80127c0:	230b      	movs	r3, #11
 80127c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127c6:	4b24      	ldr	r3, [pc, #144]	; (8012858 <LoRaMacInitialization+0x384>)
 80127c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80127d0:	4611      	mov	r1, r2
 80127d2:	4618      	mov	r0, r3
 80127d4:	f003 f9f4 	bl	8015bc0 <RegionGetPhyParam>
 80127d8:	4603      	mov	r3, r0
 80127da:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	b29a      	uxth	r2, r3
 80127e0:	4b1e      	ldr	r3, [pc, #120]	; (801285c <LoRaMacInitialization+0x388>)
 80127e2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80127e6:	230c      	movs	r3, #12
 80127e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127ec:	4b1a      	ldr	r3, [pc, #104]	; (8012858 <LoRaMacInitialization+0x384>)
 80127ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80127f6:	4611      	mov	r1, r2
 80127f8:	4618      	mov	r0, r3
 80127fa:	f003 f9e1 	bl	8015bc0 <RegionGetPhyParam>
 80127fe:	4603      	mov	r3, r0
 8012800:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	b29a      	uxth	r2, r3
 8012806:	4b15      	ldr	r3, [pc, #84]	; (801285c <LoRaMacInitialization+0x388>)
 8012808:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801280c:	4b12      	ldr	r3, [pc, #72]	; (8012858 <LoRaMacInitialization+0x384>)
 801280e:	2201      	movs	r2, #1
 8012810:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012814:	4b10      	ldr	r3, [pc, #64]	; (8012858 <LoRaMacInitialization+0x384>)
 8012816:	220a      	movs	r2, #10
 8012818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 801281c:	4b0e      	ldr	r3, [pc, #56]	; (8012858 <LoRaMacInitialization+0x384>)
 801281e:	2206      	movs	r2, #6
 8012820:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012824:	4b0c      	ldr	r3, [pc, #48]	; (8012858 <LoRaMacInitialization+0x384>)
 8012826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801282a:	4a0b      	ldr	r2, [pc, #44]	; (8012858 <LoRaMacInitialization+0x384>)
 801282c:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801282e:	4b0a      	ldr	r3, [pc, #40]	; (8012858 <LoRaMacInitialization+0x384>)
 8012830:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012834:	4b08      	ldr	r3, [pc, #32]	; (8012858 <LoRaMacInitialization+0x384>)
 8012836:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801283a:	4b07      	ldr	r3, [pc, #28]	; (8012858 <LoRaMacInitialization+0x384>)
 801283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012840:	4a05      	ldr	r2, [pc, #20]	; (8012858 <LoRaMacInitialization+0x384>)
 8012842:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012844:	4b04      	ldr	r3, [pc, #16]	; (8012858 <LoRaMacInitialization+0x384>)
 8012846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801284a:	4a03      	ldr	r2, [pc, #12]	; (8012858 <LoRaMacInitialization+0x384>)
 801284c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801284e:	4b02      	ldr	r3, [pc, #8]	; (8012858 <LoRaMacInitialization+0x384>)
 8012850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012854:	e006      	b.n	8012864 <LoRaMacInitialization+0x390>
 8012856:	bf00      	nop
 8012858:	2000122c 	.word	0x2000122c
 801285c:	20000d20 	.word	0x20000d20
 8012860:	01000300 	.word	0x01000300
 8012864:	4a60      	ldr	r2, [pc, #384]	; (80129e8 <LoRaMacInitialization+0x514>)
 8012866:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012868:	4b5f      	ldr	r3, [pc, #380]	; (80129e8 <LoRaMacInitialization+0x514>)
 801286a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801286e:	4a5e      	ldr	r2, [pc, #376]	; (80129e8 <LoRaMacInitialization+0x514>)
 8012870:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012872:	4b5d      	ldr	r3, [pc, #372]	; (80129e8 <LoRaMacInitialization+0x514>)
 8012874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012878:	4a5b      	ldr	r2, [pc, #364]	; (80129e8 <LoRaMacInitialization+0x514>)
 801287a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 801287c:	4b5a      	ldr	r3, [pc, #360]	; (80129e8 <LoRaMacInitialization+0x514>)
 801287e:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8012882:	4b59      	ldr	r3, [pc, #356]	; (80129e8 <LoRaMacInitialization+0x514>)
 8012884:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012888:	2300      	movs	r3, #0
 801288a:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801288e:	4b57      	ldr	r3, [pc, #348]	; (80129ec <LoRaMacInitialization+0x518>)
 8012890:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012892:	4b57      	ldr	r3, [pc, #348]	; (80129f0 <LoRaMacInitialization+0x51c>)
 8012894:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012896:	4b54      	ldr	r3, [pc, #336]	; (80129e8 <LoRaMacInitialization+0x514>)
 8012898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801289c:	f107 0218 	add.w	r2, r7, #24
 80128a0:	4611      	mov	r1, r2
 80128a2:	4618      	mov	r0, r3
 80128a4:	f003 f9b5 	bl	8015c12 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80128a8:	4a52      	ldr	r2, [pc, #328]	; (80129f4 <LoRaMacInitialization+0x520>)
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 80128b0:	f7ff f87e 	bl	80119b0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80128b4:	4b4c      	ldr	r3, [pc, #304]	; (80129e8 <LoRaMacInitialization+0x514>)
 80128b6:	2201      	movs	r2, #1
 80128b8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 80128bc:	4a4d      	ldr	r2, [pc, #308]	; (80129f4 <LoRaMacInitialization+0x520>)
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80128c4:	4b4b      	ldr	r3, [pc, #300]	; (80129f4 <LoRaMacInitialization+0x520>)
 80128c6:	2200      	movs	r2, #0
 80128c8:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 80128cc:	4b49      	ldr	r3, [pc, #292]	; (80129f4 <LoRaMacInitialization+0x520>)
 80128ce:	2201      	movs	r2, #1
 80128d0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80128d4:	4b44      	ldr	r3, [pc, #272]	; (80129e8 <LoRaMacInitialization+0x514>)
 80128d6:	2200      	movs	r2, #0
 80128d8:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80128da:	4b43      	ldr	r3, [pc, #268]	; (80129e8 <LoRaMacInitialization+0x514>)
 80128dc:	2200      	movs	r2, #0
 80128de:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80128e0:	2300      	movs	r3, #0
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	4b44      	ldr	r3, [pc, #272]	; (80129f8 <LoRaMacInitialization+0x524>)
 80128e6:	2200      	movs	r2, #0
 80128e8:	f04f 31ff 	mov.w	r1, #4294967295
 80128ec:	4843      	ldr	r0, [pc, #268]	; (80129fc <LoRaMacInitialization+0x528>)
 80128ee:	f009 fd21 	bl	801c334 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80128f2:	2300      	movs	r3, #0
 80128f4:	9300      	str	r3, [sp, #0]
 80128f6:	4b42      	ldr	r3, [pc, #264]	; (8012a00 <LoRaMacInitialization+0x52c>)
 80128f8:	2200      	movs	r2, #0
 80128fa:	f04f 31ff 	mov.w	r1, #4294967295
 80128fe:	4841      	ldr	r0, [pc, #260]	; (8012a04 <LoRaMacInitialization+0x530>)
 8012900:	f009 fd18 	bl	801c334 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012904:	2300      	movs	r3, #0
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	4b3f      	ldr	r3, [pc, #252]	; (8012a08 <LoRaMacInitialization+0x534>)
 801290a:	2200      	movs	r2, #0
 801290c:	f04f 31ff 	mov.w	r1, #4294967295
 8012910:	483e      	ldr	r0, [pc, #248]	; (8012a0c <LoRaMacInitialization+0x538>)
 8012912:	f009 fd0f 	bl	801c334 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8012916:	2300      	movs	r3, #0
 8012918:	9300      	str	r3, [sp, #0]
 801291a:	4b3d      	ldr	r3, [pc, #244]	; (8012a10 <LoRaMacInitialization+0x53c>)
 801291c:	2200      	movs	r2, #0
 801291e:	f04f 31ff 	mov.w	r1, #4294967295
 8012922:	483c      	ldr	r0, [pc, #240]	; (8012a14 <LoRaMacInitialization+0x540>)
 8012924:	f009 fd06 	bl	801c334 <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012928:	4c2f      	ldr	r4, [pc, #188]	; (80129e8 <LoRaMacInitialization+0x514>)
 801292a:	463b      	mov	r3, r7
 801292c:	4618      	mov	r0, r3
 801292e:	f009 f871 	bl	801ba14 <SysTimeGetMcuTime>
 8012932:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8012936:	463a      	mov	r2, r7
 8012938:	e892 0003 	ldmia.w	r2, {r0, r1}
 801293c:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012940:	4b2c      	ldr	r3, [pc, #176]	; (80129f4 <LoRaMacInitialization+0x520>)
 8012942:	4a35      	ldr	r2, [pc, #212]	; (8012a18 <LoRaMacInitialization+0x544>)
 8012944:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012948:	4b2a      	ldr	r3, [pc, #168]	; (80129f4 <LoRaMacInitialization+0x520>)
 801294a:	4a34      	ldr	r2, [pc, #208]	; (8012a1c <LoRaMacInitialization+0x548>)
 801294c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012950:	4b28      	ldr	r3, [pc, #160]	; (80129f4 <LoRaMacInitialization+0x520>)
 8012952:	4a33      	ldr	r2, [pc, #204]	; (8012a20 <LoRaMacInitialization+0x54c>)
 8012954:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012958:	4b26      	ldr	r3, [pc, #152]	; (80129f4 <LoRaMacInitialization+0x520>)
 801295a:	4a32      	ldr	r2, [pc, #200]	; (8012a24 <LoRaMacInitialization+0x550>)
 801295c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012960:	4b24      	ldr	r3, [pc, #144]	; (80129f4 <LoRaMacInitialization+0x520>)
 8012962:	4a31      	ldr	r2, [pc, #196]	; (8012a28 <LoRaMacInitialization+0x554>)
 8012964:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012968:	4b30      	ldr	r3, [pc, #192]	; (8012a2c <LoRaMacInitialization+0x558>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4830      	ldr	r0, [pc, #192]	; (8012a30 <LoRaMacInitialization+0x55c>)
 801296e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	689b      	ldr	r3, [r3, #8]
 8012974:	4619      	mov	r1, r3
 8012976:	482f      	ldr	r0, [pc, #188]	; (8012a34 <LoRaMacInitialization+0x560>)
 8012978:	f7fa fe20 	bl	800d5bc <SecureElementInit>
 801297c:	4603      	mov	r3, r0
 801297e:	2b00      	cmp	r3, #0
 8012980:	d001      	beq.n	8012986 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012982:	2311      	movs	r3, #17
 8012984:	e02b      	b.n	80129de <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012986:	4818      	ldr	r0, [pc, #96]	; (80129e8 <LoRaMacInitialization+0x514>)
 8012988:	f002 fa38 	bl	8014dfc <LoRaMacCryptoInit>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d001      	beq.n	8012996 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012992:	2311      	movs	r3, #17
 8012994:	e023      	b.n	80129de <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012996:	f001 fb57 	bl	8014048 <LoRaMacCommandsInit>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80129a0:	2313      	movs	r3, #19
 80129a2:	e01c      	b.n	80129de <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80129a4:	4824      	ldr	r0, [pc, #144]	; (8012a38 <LoRaMacInitialization+0x564>)
 80129a6:	f002 faf3 	bl	8014f90 <LoRaMacCryptoSetMulticastReference>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80129b0:	2311      	movs	r3, #17
 80129b2:	e014      	b.n	80129de <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80129b4:	4b1d      	ldr	r3, [pc, #116]	; (8012a2c <LoRaMacInitialization+0x558>)
 80129b6:	695b      	ldr	r3, [r3, #20]
 80129b8:	4798      	blx	r3
 80129ba:	4603      	mov	r3, r0
 80129bc:	4618      	mov	r0, r3
 80129be:	f005 fbed 	bl	801819c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80129c2:	4b1a      	ldr	r3, [pc, #104]	; (8012a2c <LoRaMacInitialization+0x558>)
 80129c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129c6:	4a08      	ldr	r2, [pc, #32]	; (80129e8 <LoRaMacInitialization+0x514>)
 80129c8:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80129cc:	4610      	mov	r0, r2
 80129ce:	4798      	blx	r3
    Radio.Sleep( );
 80129d0:	4b16      	ldr	r3, [pc, #88]	; (8012a2c <LoRaMacInitialization+0x558>)
 80129d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d4:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80129d6:	2001      	movs	r0, #1
 80129d8:	f7fd faf2 	bl	800ffc0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80129dc:	2300      	movs	r3, #0
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3734      	adds	r7, #52	; 0x34
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd90      	pop	{r4, r7, pc}
 80129e6:	bf00      	nop
 80129e8:	2000122c 	.word	0x2000122c
 80129ec:	2000140c 	.word	0x2000140c
 80129f0:	200014a0 	.word	0x200014a0
 80129f4:	20000d20 	.word	0x20000d20
 80129f8:	0801052d 	.word	0x0801052d
 80129fc:	20001088 	.word	0x20001088
 8012a00:	080105a1 	.word	0x080105a1
 8012a04:	200010a0 	.word	0x200010a0
 8012a08:	0801060d 	.word	0x0801060d
 8012a0c:	200010b8 	.word	0x200010b8
 8012a10:	08010681 	.word	0x08010681
 8012a14:	20001118 	.word	0x20001118
 8012a18:	0800f13d 	.word	0x0800f13d
 8012a1c:	0800f1b5 	.word	0x0800f1b5
 8012a20:	0800f28d 	.word	0x0800f28d
 8012a24:	0800f241 	.word	0x0800f241
 8012a28:	0800f2c9 	.word	0x0800f2c9
 8012a2c:	0801d920 	.word	0x0801d920
 8012a30:	2000106c 	.word	0x2000106c
 8012a34:	2000134c 	.word	0x2000134c
 8012a38:	20001304 	.word	0x20001304

08012a3c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <LoRaMacStart+0x18>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8012a48:	2300      	movs	r3, #0
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bc80      	pop	{r7}
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop
 8012a54:	20000d20 	.word	0x20000d20

08012a58 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8012a5c:	f7fd fa9a 	bl	800ff94 <LoRaMacIsBusy>
 8012a60:	4603      	mov	r3, r0
 8012a62:	f083 0301 	eor.w	r3, r3, #1
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d005      	beq.n	8012a78 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8012a6c:	4b07      	ldr	r3, [pc, #28]	; (8012a8c <LoRaMacStop+0x34>)
 8012a6e:	2201      	movs	r2, #1
 8012a70:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8012a74:	2300      	movs	r3, #0
 8012a76:	e007      	b.n	8012a88 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8012a78:	4b04      	ldr	r3, [pc, #16]	; (8012a8c <LoRaMacStop+0x34>)
 8012a7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d101      	bne.n	8012a86 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8012a82:	2300      	movs	r3, #0
 8012a84:	e000      	b.n	8012a88 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8012a86:	2301      	movs	r3, #1
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	20000d20 	.word	0x20000d20

08012a90 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012a94:	4812      	ldr	r0, [pc, #72]	; (8012ae0 <LoRaMacHalt+0x50>)
 8012a96:	f009 fcf1 	bl	801c47c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8012a9a:	4812      	ldr	r0, [pc, #72]	; (8012ae4 <LoRaMacHalt+0x54>)
 8012a9c:	f009 fcee 	bl	801c47c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012aa0:	4811      	ldr	r0, [pc, #68]	; (8012ae8 <LoRaMacHalt+0x58>)
 8012aa2:	f009 fceb 	bl	801c47c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012aa6:	4811      	ldr	r0, [pc, #68]	; (8012aec <LoRaMacHalt+0x5c>)
 8012aa8:	f009 fce8 	bl	801c47c <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012aac:	f001 f957 	bl	8013d5e <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012ab0:	4b0f      	ldr	r3, [pc, #60]	; (8012af0 <LoRaMacHalt+0x60>)
 8012ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8012ab6:	4b0f      	ldr	r3, [pc, #60]	; (8012af4 <LoRaMacHalt+0x64>)
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8012abe:	480e      	ldr	r0, [pc, #56]	; (8012af8 <LoRaMacHalt+0x68>)
 8012ac0:	f7fd fc2e 	bl	8010320 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012ac4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8012ac8:	490b      	ldr	r1, [pc, #44]	; (8012af8 <LoRaMacHalt+0x68>)
 8012aca:	480c      	ldr	r0, [pc, #48]	; (8012afc <LoRaMacHalt+0x6c>)
 8012acc:	f005 fb8b 	bl	80181e6 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012ad0:	4b08      	ldr	r3, [pc, #32]	; (8012af4 <LoRaMacHalt+0x64>)
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012ad8:	2300      	movs	r3, #0
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	20001088 	.word	0x20001088
 8012ae4:	200010a0 	.word	0x200010a0
 8012ae8:	200010b8 	.word	0x200010b8
 8012aec:	20001118 	.word	0x20001118
 8012af0:	0801d920 	.word	0x0801d920
 8012af4:	20000d20 	.word	0x20000d20
 8012af8:	2000122c 	.word	0x2000122c
 8012afc:	20001954 	.word	0x20001954

08012b00 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b08a      	sub	sp, #40	; 0x28
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	4603      	mov	r3, r0
 8012b08:	6039      	str	r1, [r7, #0]
 8012b0a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012b0c:	4b3e      	ldr	r3, [pc, #248]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b10:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012b12:	4b3d      	ldr	r3, [pc, #244]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b14:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8012b18:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012b1a:	4b3b      	ldr	r3, [pc, #236]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b1c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8012b20:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8012b22:	2300      	movs	r3, #0
 8012b24:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d101      	bne.n	8012b30 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b2c:	2303      	movs	r3, #3
 8012b2e:	e066      	b.n	8012bfe <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012b30:	4b35      	ldr	r3, [pc, #212]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012b36:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012b3c:	4b32      	ldr	r3, [pc, #200]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b3e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012b42:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012b44:	4b30      	ldr	r3, [pc, #192]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b48:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012b4a:	4b30      	ldr	r3, [pc, #192]	; (8012c0c <LoRaMacQueryTxPossible+0x10c>)
 8012b4c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8012b50:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012b52:	4b2e      	ldr	r3, [pc, #184]	; (8012c0c <LoRaMacQueryTxPossible+0x10c>)
 8012b54:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8012b58:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012b5a:	4b2b      	ldr	r3, [pc, #172]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b5c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012b60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012b64:	4b28      	ldr	r3, [pc, #160]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b66:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012b6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012b6e:	4b26      	ldr	r3, [pc, #152]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012b78:	4b23      	ldr	r3, [pc, #140]	; (8012c08 <LoRaMacQueryTxPossible+0x108>)
 8012b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012b82:	f107 0310 	add.w	r3, r7, #16
 8012b86:	f107 020e 	add.w	r2, r7, #14
 8012b8a:	f107 010f 	add.w	r1, r7, #15
 8012b8e:	f107 0014 	add.w	r0, r7, #20
 8012b92:	f001 f84f 	bl	8013c34 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7fd feb8 	bl	8010910 <GetMaxAppPayloadWithoutFOptsLength>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012ba8:	f107 0308 	add.w	r3, r7, #8
 8012bac:	4618      	mov	r0, r3
 8012bae:	f001 fb19 	bl	80141e4 <LoRaMacCommandsGetSizeSerializedCmds>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d001      	beq.n	8012bbc <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012bb8:	2313      	movs	r3, #19
 8012bba:	e020      	b.n	8012bfe <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	2b0f      	cmp	r3, #15
 8012bc0:	d819      	bhi.n	8012bf6 <LoRaMacQueryTxPossible+0xf6>
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	785b      	ldrb	r3, [r3, #1]
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d313      	bcc.n	8012bf6 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	785a      	ldrb	r2, [r3, #1]
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	b2db      	uxtb	r3, r3
 8012bd6:	1ad3      	subs	r3, r2, r3
 8012bd8:	b2da      	uxtb	r2, r3
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	785b      	ldrb	r3, [r3, #1]
 8012be2:	4619      	mov	r1, r3
 8012be4:	79fa      	ldrb	r2, [r7, #7]
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	4413      	add	r3, r2
 8012bea:	4299      	cmp	r1, r3
 8012bec:	d301      	bcc.n	8012bf2 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e005      	b.n	8012bfe <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012bf2:	2308      	movs	r3, #8
 8012bf4:	e003      	b.n	8012bfe <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012bfc:	2308      	movs	r3, #8
    }
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3728      	adds	r7, #40	; 0x28
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	2000122c 	.word	0x2000122c
 8012c0c:	20000d20 	.word	0x20000d20

08012c10 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012c10:	b590      	push	{r4, r7, lr}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d101      	bne.n	8012c26 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c22:	2303      	movs	r3, #3
 8012c24:	e171      	b.n	8012f0a <LoRaMacMibGetRequestConfirm+0x2fa>
    }

    switch( mibGet->Type )
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2b37      	cmp	r3, #55	; 0x37
 8012c2c:	f200 8166 	bhi.w	8012efc <LoRaMacMibGetRequestConfirm+0x2ec>
 8012c30:	a201      	add	r2, pc, #4	; (adr r2, 8012c38 <LoRaMacMibGetRequestConfirm+0x28>)
 8012c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c36:	bf00      	nop
 8012c38:	08012d19 	.word	0x08012d19
 8012c3c:	08012d25 	.word	0x08012d25
 8012c40:	08012d31 	.word	0x08012d31
 8012c44:	08012d3d 	.word	0x08012d3d
 8012c48:	08012d49 	.word	0x08012d49
 8012c4c:	08012d55 	.word	0x08012d55
 8012c50:	08012d61 	.word	0x08012d61
 8012c54:	08012efd 	.word	0x08012efd
 8012c58:	08012efd 	.word	0x08012efd
 8012c5c:	08012efd 	.word	0x08012efd
 8012c60:	08012efd 	.word	0x08012efd
 8012c64:	08012efd 	.word	0x08012efd
 8012c68:	08012efd 	.word	0x08012efd
 8012c6c:	08012efd 	.word	0x08012efd
 8012c70:	08012efd 	.word	0x08012efd
 8012c74:	08012d6d 	.word	0x08012d6d
 8012c78:	08012d79 	.word	0x08012d79
 8012c7c:	08012d85 	.word	0x08012d85
 8012c80:	08012da7 	.word	0x08012da7
 8012c84:	08012db9 	.word	0x08012db9
 8012c88:	08012dcb 	.word	0x08012dcb
 8012c8c:	08012ddd 	.word	0x08012ddd
 8012c90:	08012e11 	.word	0x08012e11
 8012c94:	08012def 	.word	0x08012def
 8012c98:	08012e33 	.word	0x08012e33
 8012c9c:	08012e3f 	.word	0x08012e3f
 8012ca0:	08012e49 	.word	0x08012e49
 8012ca4:	08012e53 	.word	0x08012e53
 8012ca8:	08012e5d 	.word	0x08012e5d
 8012cac:	08012e67 	.word	0x08012e67
 8012cb0:	08012e71 	.word	0x08012e71
 8012cb4:	08012e7d 	.word	0x08012e7d
 8012cb8:	08012e95 	.word	0x08012e95
 8012cbc:	08012e89 	.word	0x08012e89
 8012cc0:	08012ea1 	.word	0x08012ea1
 8012cc4:	08012eab 	.word	0x08012eab
 8012cc8:	08012eb7 	.word	0x08012eb7
 8012ccc:	08012ed1 	.word	0x08012ed1
 8012cd0:	08012ec1 	.word	0x08012ec1
 8012cd4:	08012ec9 	.word	0x08012ec9
 8012cd8:	08012efd 	.word	0x08012efd
 8012cdc:	08012edd 	.word	0x08012edd
 8012ce0:	08012efd 	.word	0x08012efd
 8012ce4:	08012efd 	.word	0x08012efd
 8012ce8:	08012efd 	.word	0x08012efd
 8012cec:	08012efd 	.word	0x08012efd
 8012cf0:	08012efd 	.word	0x08012efd
 8012cf4:	08012efd 	.word	0x08012efd
 8012cf8:	08012efd 	.word	0x08012efd
 8012cfc:	08012efd 	.word	0x08012efd
 8012d00:	08012efd 	.word	0x08012efd
 8012d04:	08012efd 	.word	0x08012efd
 8012d08:	08012efd 	.word	0x08012efd
 8012d0c:	08012efd 	.word	0x08012efd
 8012d10:	08012efd 	.word	0x08012efd
 8012d14:	08012ef1 	.word	0x08012ef1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012d18:	4b7e      	ldr	r3, [pc, #504]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d1a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	711a      	strb	r2, [r3, #4]
            break;
 8012d22:	e0f1      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012d24:	4b7b      	ldr	r3, [pc, #492]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d26:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	711a      	strb	r2, [r3, #4]
            break;
 8012d2e:	e0eb      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8012d30:	f7fa ff30 	bl	800db94 <SecureElementGetDevEui>
 8012d34:	4602      	mov	r2, r0
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	605a      	str	r2, [r3, #4]
            break;
 8012d3a:	e0e5      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012d3c:	f7fa ff4c 	bl	800dbd8 <SecureElementGetJoinEui>
 8012d40:	4602      	mov	r2, r0
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	605a      	str	r2, [r3, #4]
            break;
 8012d46:	e0df      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012d48:	4b72      	ldr	r3, [pc, #456]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d4a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	711a      	strb	r2, [r3, #4]
            break;
 8012d52:	e0d9      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012d54:	4b6f      	ldr	r3, [pc, #444]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d56:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	605a      	str	r2, [r3, #4]
            break;
 8012d5e:	e0d3      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8012d60:	4b6c      	ldr	r3, [pc, #432]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	605a      	str	r2, [r3, #4]
            break;
 8012d6a:	e0cd      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012d6c:	4b69      	ldr	r3, [pc, #420]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d6e:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	711a      	strb	r2, [r3, #4]
            break;
 8012d76:	e0c7      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012d78:	4b66      	ldr	r3, [pc, #408]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d7a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	711a      	strb	r2, [r3, #4]
            break;
 8012d82:	e0c1      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012d84:	231d      	movs	r3, #29
 8012d86:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d88:	4b62      	ldr	r3, [pc, #392]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d8e:	f107 0210 	add.w	r2, r7, #16
 8012d92:	4611      	mov	r1, r2
 8012d94:	4618      	mov	r0, r3
 8012d96:	f002 ff13 	bl	8015bc0 <RegionGetPhyParam>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	605a      	str	r2, [r3, #4]
            break;
 8012da4:	e0b0      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	4a5a      	ldr	r2, [pc, #360]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012daa:	3304      	adds	r3, #4
 8012dac:	3264      	adds	r2, #100	; 0x64
 8012dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012db2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012db6:	e0a7      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	4a56      	ldr	r2, [pc, #344]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012dbc:	3304      	adds	r3, #4
 8012dbe:	32a8      	adds	r2, #168	; 0xa8
 8012dc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012dc4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012dc8:	e09e      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	4a51      	ldr	r2, [pc, #324]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012dce:	3304      	adds	r3, #4
 8012dd0:	326c      	adds	r2, #108	; 0x6c
 8012dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012dd6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012dda:	e095      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	4a4d      	ldr	r2, [pc, #308]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012de0:	3304      	adds	r3, #4
 8012de2:	32b0      	adds	r2, #176	; 0xb0
 8012de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012de8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012dec:	e08c      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012dee:	231b      	movs	r3, #27
 8012df0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012df2:	4b48      	ldr	r3, [pc, #288]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012df8:	f107 0210 	add.w	r2, r7, #16
 8012dfc:	4611      	mov	r1, r2
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f002 fede 	bl	8015bc0 <RegionGetPhyParam>
 8012e04:	4603      	mov	r3, r0
 8012e06:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012e08:	68fa      	ldr	r2, [r7, #12]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	605a      	str	r2, [r3, #4]
            break;
 8012e0e:	e07b      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012e10:	231a      	movs	r3, #26
 8012e12:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e14:	4b3f      	ldr	r3, [pc, #252]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e1a:	f107 0210 	add.w	r2, r7, #16
 8012e1e:	4611      	mov	r1, r2
 8012e20:	4618      	mov	r0, r3
 8012e22:	f002 fecd 	bl	8015bc0 <RegionGetPhyParam>
 8012e26:	4603      	mov	r3, r0
 8012e28:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012e2a:	68fa      	ldr	r2, [r7, #12]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	605a      	str	r2, [r3, #4]
            break;
 8012e30:	e06a      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012e32:	4b38      	ldr	r3, [pc, #224]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e34:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	711a      	strb	r2, [r3, #4]
            break;
 8012e3c:	e064      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012e3e:	4b35      	ldr	r3, [pc, #212]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	605a      	str	r2, [r3, #4]
            break;
 8012e46:	e05f      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012e48:	4b32      	ldr	r3, [pc, #200]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	605a      	str	r2, [r3, #4]
            break;
 8012e50:	e05a      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012e52:	4b30      	ldr	r3, [pc, #192]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	605a      	str	r2, [r3, #4]
            break;
 8012e5a:	e055      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012e5c:	4b2d      	ldr	r3, [pc, #180]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	605a      	str	r2, [r3, #4]
            break;
 8012e64:	e050      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012e66:	4b2b      	ldr	r3, [pc, #172]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	605a      	str	r2, [r3, #4]
            break;
 8012e6e:	e04b      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012e70:	4b28      	ldr	r3, [pc, #160]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e72:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	711a      	strb	r2, [r3, #4]
            break;
 8012e7a:	e045      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e7c:	4b25      	ldr	r3, [pc, #148]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e7e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	711a      	strb	r2, [r3, #4]
            break;
 8012e86:	e03f      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012e88:	4b22      	ldr	r3, [pc, #136]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e8a:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	711a      	strb	r2, [r3, #4]
            break;
 8012e92:	e039      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e94:	4b1f      	ldr	r3, [pc, #124]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012e96:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	711a      	strb	r2, [r3, #4]
            break;
 8012e9e:	e033      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012ea0:	4b1c      	ldr	r3, [pc, #112]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	605a      	str	r2, [r3, #4]
            break;
 8012ea8:	e02e      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012eaa:	4b1a      	ldr	r3, [pc, #104]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012eac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	711a      	strb	r2, [r3, #4]
            break;
 8012eb4:	e028      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012eb6:	4b17      	ldr	r3, [pc, #92]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012eb8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	605a      	str	r2, [r3, #4]
            break;
 8012ebe:	e023      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	4a14      	ldr	r2, [pc, #80]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012ec4:	605a      	str	r2, [r3, #4]
            break;
 8012ec6:	e01f      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	4a13      	ldr	r2, [pc, #76]	; (8012f18 <LoRaMacMibGetRequestConfirm+0x308>)
 8012ecc:	605a      	str	r2, [r3, #4]
            break;
 8012ece:	e01b      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012ed0:	4b10      	ldr	r3, [pc, #64]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012ed2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	605a      	str	r2, [r3, #4]
            break;
 8012eda:	e015      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	4a0d      	ldr	r2, [pc, #52]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012ee0:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8012ee4:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012ee6:	687c      	ldr	r4, [r7, #4]
 8012ee8:	f002 fff2 	bl	8015ed0 <RegionGetVersion>
 8012eec:	60a0      	str	r0, [r4, #8]
            break;
 8012eee:	e00b      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012ef0:	4b08      	ldr	r3, [pc, #32]	; (8012f14 <LoRaMacMibGetRequestConfirm+0x304>)
 8012ef2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	605a      	str	r2, [r3, #4]
            break;
 8012efa:	e005      	b.n	8012f08 <LoRaMacMibGetRequestConfirm+0x2f8>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f000 ff45 	bl	8013d8c <LoRaMacClassBMibGetRequestConfirm>
 8012f02:	4603      	mov	r3, r0
 8012f04:	75fb      	strb	r3, [r7, #23]
            break;
 8012f06:	bf00      	nop
        }
    }
    return status;
 8012f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	371c      	adds	r7, #28
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd90      	pop	{r4, r7, pc}
 8012f12:	bf00      	nop
 8012f14:	2000122c 	.word	0x2000122c
 8012f18:	20001954 	.word	0x20001954

08012f1c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b086      	sub	sp, #24
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012f24:	2300      	movs	r3, #0
 8012f26:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d101      	bne.n	8012f32 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f2e:	2303      	movs	r3, #3
 8012f30:	e348      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012f32:	4bb7      	ldr	r3, [pc, #732]	; (8013210 <LoRaMacMibSetRequestConfirm+0x2f4>)
 8012f34:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012f38:	f003 0302 	and.w	r3, r3, #2
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d001      	beq.n	8012f44 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012f40:	2301      	movs	r3, #1
 8012f42:	e33f      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
    }

    switch( mibSet->Type )
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	2b37      	cmp	r3, #55	; 0x37
 8012f4a:	f200 8319 	bhi.w	8013580 <LoRaMacMibSetRequestConfirm+0x664>
 8012f4e:	a201      	add	r2, pc, #4	; (adr r2, 8012f54 <LoRaMacMibSetRequestConfirm+0x38>)
 8012f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f54:	08013035 	.word	0x08013035
 8012f58:	08013045 	.word	0x08013045
 8012f5c:	0801305f 	.word	0x0801305f
 8012f60:	08013077 	.word	0x08013077
 8012f64:	0801308f 	.word	0x0801308f
 8012f68:	0801309b 	.word	0x0801309b
 8012f6c:	080130a7 	.word	0x080130a7
 8012f70:	080130b3 	.word	0x080130b3
 8012f74:	080130d9 	.word	0x080130d9
 8012f78:	080130ff 	.word	0x080130ff
 8012f7c:	08013125 	.word	0x08013125
 8012f80:	0801314b 	.word	0x0801314b
 8012f84:	08013171 	.word	0x08013171
 8012f88:	08013197 	.word	0x08013197
 8012f8c:	080131bd 	.word	0x080131bd
 8012f90:	080131e3 	.word	0x080131e3
 8012f94:	08013203 	.word	0x08013203
 8012f98:	08013581 	.word	0x08013581
 8012f9c:	0801321d 	.word	0x0801321d
 8012fa0:	0801328d 	.word	0x0801328d
 8012fa4:	080132cd 	.word	0x080132cd
 8012fa8:	0801332f 	.word	0x0801332f
 8012fac:	0801339f 	.word	0x0801339f
 8012fb0:	0801336f 	.word	0x0801336f
 8012fb4:	080133cf 	.word	0x080133cf
 8012fb8:	080133f1 	.word	0x080133f1
 8012fbc:	080133fb 	.word	0x080133fb
 8012fc0:	08013405 	.word	0x08013405
 8012fc4:	0801340f 	.word	0x0801340f
 8012fc8:	08013419 	.word	0x08013419
 8012fcc:	08013423 	.word	0x08013423
 8012fd0:	08013455 	.word	0x08013455
 8012fd4:	080134c1 	.word	0x080134c1
 8012fd8:	0801348f 	.word	0x0801348f
 8012fdc:	080134fd 	.word	0x080134fd
 8012fe0:	08013513 	.word	0x08013513
 8012fe4:	0801352b 	.word	0x0801352b
 8012fe8:	08013535 	.word	0x08013535
 8012fec:	08013541 	.word	0x08013541
 8012ff0:	08013581 	.word	0x08013581
 8012ff4:	0801354b 	.word	0x0801354b
 8012ff8:	08013581 	.word	0x08013581
 8012ffc:	08013581 	.word	0x08013581
 8013000:	08013581 	.word	0x08013581
 8013004:	08013581 	.word	0x08013581
 8013008:	08013581 	.word	0x08013581
 801300c:	08013581 	.word	0x08013581
 8013010:	08013581 	.word	0x08013581
 8013014:	08013581 	.word	0x08013581
 8013018:	08013581 	.word	0x08013581
 801301c:	08013581 	.word	0x08013581
 8013020:	08013581 	.word	0x08013581
 8013024:	08013581 	.word	0x08013581
 8013028:	08013581 	.word	0x08013581
 801302c:	08013581 	.word	0x08013581
 8013030:	08013575 	.word	0x08013575
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	791b      	ldrb	r3, [r3, #4]
 8013038:	4618      	mov	r0, r3
 801303a:	f7fd fb99 	bl	8010770 <SwitchClass>
 801303e:	4603      	mov	r3, r0
 8013040:	75fb      	strb	r3, [r7, #23]
            break;
 8013042:	e2be      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	791b      	ldrb	r3, [r3, #4]
 8013048:	2b02      	cmp	r3, #2
 801304a:	d005      	beq.n	8013058 <LoRaMacMibSetRequestConfirm+0x13c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	791a      	ldrb	r2, [r3, #4]
 8013050:	4b70      	ldr	r3, [pc, #448]	; (8013214 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013052:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013056:	e2b4      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013058:	2303      	movs	r3, #3
 801305a:	75fb      	strb	r3, [r7, #23]
            break;
 801305c:	e2b1      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	4618      	mov	r0, r3
 8013064:	f7fa fd7e 	bl	800db64 <SecureElementSetDevEui>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	f000 828e 	beq.w	801358c <LoRaMacMibSetRequestConfirm+0x670>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013070:	2303      	movs	r3, #3
 8013072:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013074:	e28a      	b.n	801358c <LoRaMacMibSetRequestConfirm+0x670>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	4618      	mov	r0, r3
 801307c:	f7fa fd94 	bl	800dba8 <SecureElementSetJoinEui>
 8013080:	4603      	mov	r3, r0
 8013082:	2b00      	cmp	r3, #0
 8013084:	f000 8284 	beq.w	8013590 <LoRaMacMibSetRequestConfirm+0x674>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013088:	2303      	movs	r3, #3
 801308a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801308c:	e280      	b.n	8013590 <LoRaMacMibSetRequestConfirm+0x674>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	791a      	ldrb	r2, [r3, #4]
 8013092:	4b60      	ldr	r3, [pc, #384]	; (8013214 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013094:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8013098:	e293      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	4a5d      	ldr	r2, [pc, #372]	; (8013214 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80130a0:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 80130a4:	e28d      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	4a5a      	ldr	r2, [pc, #360]	; (8013214 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80130ac:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 80130b0:	e287      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d00b      	beq.n	80130d2 <LoRaMacMibSetRequestConfirm+0x1b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	4619      	mov	r1, r3
 80130c0:	2000      	movs	r0, #0
 80130c2:	f001 ff8d 	bl	8014fe0 <LoRaMacCryptoSetKey>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f000 8263 	beq.w	8013594 <LoRaMacMibSetRequestConfirm+0x678>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130ce:	2311      	movs	r3, #17
 80130d0:	e278      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130d2:	2303      	movs	r3, #3
 80130d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130d6:	e25d      	b.n	8013594 <LoRaMacMibSetRequestConfirm+0x678>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d00b      	beq.n	80130f8 <LoRaMacMibSetRequestConfirm+0x1dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	4619      	mov	r1, r3
 80130e6:	2001      	movs	r0, #1
 80130e8:	f001 ff7a 	bl	8014fe0 <LoRaMacCryptoSetKey>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f000 8252 	beq.w	8013598 <LoRaMacMibSetRequestConfirm+0x67c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130f4:	2311      	movs	r3, #17
 80130f6:	e265      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130f8:	2303      	movs	r3, #3
 80130fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130fc:	e24c      	b.n	8013598 <LoRaMacMibSetRequestConfirm+0x67c>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d00b      	beq.n	801311e <LoRaMacMibSetRequestConfirm+0x202>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	4619      	mov	r1, r3
 801310c:	2002      	movs	r0, #2
 801310e:	f001 ff67 	bl	8014fe0 <LoRaMacCryptoSetKey>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	f000 8241 	beq.w	801359c <LoRaMacMibSetRequestConfirm+0x680>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801311a:	2311      	movs	r3, #17
 801311c:	e252      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801311e:	2303      	movs	r3, #3
 8013120:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013122:	e23b      	b.n	801359c <LoRaMacMibSetRequestConfirm+0x680>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	685b      	ldr	r3, [r3, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d00b      	beq.n	8013144 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	4619      	mov	r1, r3
 8013132:	2003      	movs	r0, #3
 8013134:	f001 ff54 	bl	8014fe0 <LoRaMacCryptoSetKey>
 8013138:	4603      	mov	r3, r0
 801313a:	2b00      	cmp	r3, #0
 801313c:	f000 8230 	beq.w	80135a0 <LoRaMacMibSetRequestConfirm+0x684>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013140:	2311      	movs	r3, #17
 8013142:	e23f      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013144:	2303      	movs	r3, #3
 8013146:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013148:	e22a      	b.n	80135a0 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d00b      	beq.n	801316a <LoRaMacMibSetRequestConfirm+0x24e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	685b      	ldr	r3, [r3, #4]
 8013156:	4619      	mov	r1, r3
 8013158:	207f      	movs	r0, #127	; 0x7f
 801315a:	f001 ff41 	bl	8014fe0 <LoRaMacCryptoSetKey>
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	f000 821f 	beq.w	80135a4 <LoRaMacMibSetRequestConfirm+0x688>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013166:	2311      	movs	r3, #17
 8013168:	e22c      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801316a:	2303      	movs	r3, #3
 801316c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801316e:	e219      	b.n	80135a4 <LoRaMacMibSetRequestConfirm+0x688>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00b      	beq.n	8013190 <LoRaMacMibSetRequestConfirm+0x274>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	4619      	mov	r1, r3
 801317e:	2080      	movs	r0, #128	; 0x80
 8013180:	f001 ff2e 	bl	8014fe0 <LoRaMacCryptoSetKey>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	f000 820e 	beq.w	80135a8 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801318c:	2311      	movs	r3, #17
 801318e:	e219      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013190:	2303      	movs	r3, #3
 8013192:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013194:	e208      	b.n	80135a8 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00b      	beq.n	80131b6 <LoRaMacMibSetRequestConfirm+0x29a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	4619      	mov	r1, r3
 80131a4:	2081      	movs	r0, #129	; 0x81
 80131a6:	f001 ff1b 	bl	8014fe0 <LoRaMacCryptoSetKey>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	f000 81fd 	beq.w	80135ac <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80131b2:	2311      	movs	r3, #17
 80131b4:	e206      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131b6:	2303      	movs	r3, #3
 80131b8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80131ba:	e1f7      	b.n	80135ac <LoRaMacMibSetRequestConfirm+0x690>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00b      	beq.n	80131dc <LoRaMacMibSetRequestConfirm+0x2c0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	4619      	mov	r1, r3
 80131ca:	2082      	movs	r0, #130	; 0x82
 80131cc:	f001 ff08 	bl	8014fe0 <LoRaMacCryptoSetKey>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f000 81ec 	beq.w	80135b0 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80131d8:	2311      	movs	r3, #17
 80131da:	e1f3      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131dc:	2303      	movs	r3, #3
 80131de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80131e0:	e1e6      	b.n	80135b0 <LoRaMacMibSetRequestConfirm+0x694>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	791a      	ldrb	r2, [r3, #4]
 80131e6:	4b0b      	ldr	r3, [pc, #44]	; (8013214 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80131e8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80131ec:	4b0a      	ldr	r3, [pc, #40]	; (8013218 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80131ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131f0:	4a08      	ldr	r2, [pc, #32]	; (8013214 <LoRaMacMibSetRequestConfirm+0x2f8>)
 80131f2:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80131f6:	4610      	mov	r0, r2
 80131f8:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80131fa:	4b07      	ldr	r3, [pc, #28]	; (8013218 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80131fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131fe:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013200:	e1df      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	791a      	ldrb	r2, [r3, #4]
 8013206:	4b03      	ldr	r3, [pc, #12]	; (8013214 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8013208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 801320c:	e1d9      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
 801320e:	bf00      	nop
 8013210:	20000d20 	.word	0x20000d20
 8013214:	2000122c 	.word	0x2000122c
 8013218:	0801d920 	.word	0x0801d920
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	7a1b      	ldrb	r3, [r3, #8]
 8013220:	b25b      	sxtb	r3, r3
 8013222:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013224:	4bb3      	ldr	r3, [pc, #716]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013226:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801322a:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801322c:	4bb1      	ldr	r3, [pc, #708]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801322e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013232:	f107 0108 	add.w	r1, r7, #8
 8013236:	2207      	movs	r2, #7
 8013238:	4618      	mov	r0, r3
 801323a:	f002 fcfc 	bl	8015c36 <RegionVerify>
 801323e:	4603      	mov	r3, r0
 8013240:	f083 0301 	eor.w	r3, r3, #1
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	d002      	beq.n	8013250 <LoRaMacMibSetRequestConfirm+0x334>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801324a:	2303      	movs	r3, #3
 801324c:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801324e:	e1b8      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013256:	4ba7      	ldr	r3, [pc, #668]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801325c:	f107 0108 	add.w	r1, r7, #8
 8013260:	2200      	movs	r2, #0
 8013262:	4618      	mov	r0, r3
 8013264:	f002 fce7 	bl	8015c36 <RegionVerify>
 8013268:	4603      	mov	r3, r0
 801326a:	f083 0301 	eor.w	r3, r3, #1
 801326e:	b2db      	uxtb	r3, r3
 8013270:	2b00      	cmp	r3, #0
 8013272:	d002      	beq.n	801327a <LoRaMacMibSetRequestConfirm+0x35e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013274:	2303      	movs	r3, #3
 8013276:	75fb      	strb	r3, [r7, #23]
            break;
 8013278:	e1a3      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801327a:	4b9e      	ldr	r3, [pc, #632]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	3364      	adds	r3, #100	; 0x64
 8013280:	3204      	adds	r2, #4
 8013282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013286:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801328a:	e19a      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	7a1b      	ldrb	r3, [r3, #8]
 8013290:	b25b      	sxtb	r3, r3
 8013292:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013294:	4b97      	ldr	r3, [pc, #604]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013296:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801329a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801329c:	4b95      	ldr	r3, [pc, #596]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801329e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80132a2:	f107 0108 	add.w	r1, r7, #8
 80132a6:	2207      	movs	r2, #7
 80132a8:	4618      	mov	r0, r3
 80132aa:	f002 fcc4 	bl	8015c36 <RegionVerify>
 80132ae:	4603      	mov	r3, r0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d008      	beq.n	80132c6 <LoRaMacMibSetRequestConfirm+0x3aa>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80132b4:	4b8f      	ldr	r3, [pc, #572]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	33a8      	adds	r3, #168	; 0xa8
 80132ba:	3204      	adds	r2, #4
 80132bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132c0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132c4:	e17d      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132c6:	2303      	movs	r3, #3
 80132c8:	75fb      	strb	r3, [r7, #23]
            break;
 80132ca:	e17a      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	7a1b      	ldrb	r3, [r3, #8]
 80132d0:	b25b      	sxtb	r3, r3
 80132d2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80132d4:	4b87      	ldr	r3, [pc, #540]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80132d6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80132da:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80132dc:	4b85      	ldr	r3, [pc, #532]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80132de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80132e2:	f107 0108 	add.w	r1, r7, #8
 80132e6:	2207      	movs	r2, #7
 80132e8:	4618      	mov	r0, r3
 80132ea:	f002 fca4 	bl	8015c36 <RegionVerify>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d019      	beq.n	8013328 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80132f4:	4b7f      	ldr	r3, [pc, #508]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	336c      	adds	r3, #108	; 0x6c
 80132fa:	3204      	adds	r2, #4
 80132fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013300:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013304:	4b7b      	ldr	r3, [pc, #492]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013306:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801330a:	2b02      	cmp	r3, #2
 801330c:	f040 8152 	bne.w	80135b4 <LoRaMacMibSetRequestConfirm+0x698>
 8013310:	4b78      	ldr	r3, [pc, #480]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013312:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013316:	2b00      	cmp	r3, #0
 8013318:	f000 814c 	beq.w	80135b4 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801331c:	4b76      	ldr	r3, [pc, #472]	; (80134f8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013320:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013322:	f7fe fc67 	bl	8011bf4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013326:	e145      	b.n	80135b4 <LoRaMacMibSetRequestConfirm+0x698>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013328:	2303      	movs	r3, #3
 801332a:	75fb      	strb	r3, [r7, #23]
            break;
 801332c:	e142      	b.n	80135b4 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	7a1b      	ldrb	r3, [r3, #8]
 8013332:	b25b      	sxtb	r3, r3
 8013334:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013336:	4b6f      	ldr	r3, [pc, #444]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013338:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801333c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801333e:	4b6d      	ldr	r3, [pc, #436]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013344:	f107 0108 	add.w	r1, r7, #8
 8013348:	2207      	movs	r2, #7
 801334a:	4618      	mov	r0, r3
 801334c:	f002 fc73 	bl	8015c36 <RegionVerify>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d008      	beq.n	8013368 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013356:	4b67      	ldr	r3, [pc, #412]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	33b0      	adds	r3, #176	; 0xb0
 801335c:	3204      	adds	r2, #4
 801335e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013362:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013366:	e12c      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013368:	2303      	movs	r3, #3
 801336a:	75fb      	strb	r3, [r7, #23]
            break;
 801336c:	e129      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013374:	2301      	movs	r3, #1
 8013376:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013378:	4b5e      	ldr	r3, [pc, #376]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801337a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801337e:	f107 020c 	add.w	r2, r7, #12
 8013382:	4611      	mov	r1, r2
 8013384:	4618      	mov	r0, r3
 8013386:	f002 fc7f 	bl	8015c88 <RegionChanMaskSet>
 801338a:	4603      	mov	r3, r0
 801338c:	f083 0301 	eor.w	r3, r3, #1
 8013390:	b2db      	uxtb	r3, r3
 8013392:	2b00      	cmp	r3, #0
 8013394:	f000 8110 	beq.w	80135b8 <LoRaMacMibSetRequestConfirm+0x69c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013398:	2303      	movs	r3, #3
 801339a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801339c:	e10c      	b.n	80135b8 <LoRaMacMibSetRequestConfirm+0x69c>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80133a4:	2300      	movs	r3, #0
 80133a6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80133a8:	4b52      	ldr	r3, [pc, #328]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80133aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80133ae:	f107 020c 	add.w	r2, r7, #12
 80133b2:	4611      	mov	r1, r2
 80133b4:	4618      	mov	r0, r3
 80133b6:	f002 fc67 	bl	8015c88 <RegionChanMaskSet>
 80133ba:	4603      	mov	r3, r0
 80133bc:	f083 0301 	eor.w	r3, r3, #1
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f000 80fa 	beq.w	80135bc <LoRaMacMibSetRequestConfirm+0x6a0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133c8:	2303      	movs	r3, #3
 80133ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80133cc:	e0f6      	b.n	80135bc <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	791b      	ldrb	r3, [r3, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d009      	beq.n	80133ea <LoRaMacMibSetRequestConfirm+0x4ce>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80133da:	2b0f      	cmp	r3, #15
 80133dc:	d805      	bhi.n	80133ea <LoRaMacMibSetRequestConfirm+0x4ce>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	791a      	ldrb	r2, [r3, #4]
 80133e2:	4b44      	ldr	r3, [pc, #272]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80133e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133e8:	e0eb      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133ea:	2303      	movs	r3, #3
 80133ec:	75fb      	strb	r3, [r7, #23]
            break;
 80133ee:	e0e8      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	4a3f      	ldr	r2, [pc, #252]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80133f6:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80133f8:	e0e3      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	4a3d      	ldr	r2, [pc, #244]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013400:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8013402:	e0de      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	4a3a      	ldr	r2, [pc, #232]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801340a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801340c:	e0d9      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	4a38      	ldr	r2, [pc, #224]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013414:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8013416:	e0d4      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	4a35      	ldr	r2, [pc, #212]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801341e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8013420:	e0cf      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013428:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801342a:	4b32      	ldr	r3, [pc, #200]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801342c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013430:	f107 0108 	add.w	r1, r7, #8
 8013434:	2206      	movs	r2, #6
 8013436:	4618      	mov	r0, r3
 8013438:	f002 fbfd 	bl	8015c36 <RegionVerify>
 801343c:	4603      	mov	r3, r0
 801343e:	2b00      	cmp	r3, #0
 8013440:	d005      	beq.n	801344e <LoRaMacMibSetRequestConfirm+0x532>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013442:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013446:	4b2b      	ldr	r3, [pc, #172]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013448:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801344c:	e0b9      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801344e:	2303      	movs	r3, #3
 8013450:	75fb      	strb	r3, [r7, #23]
            break;
 8013452:	e0b6      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801345a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801345c:	4b25      	ldr	r3, [pc, #148]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 801345e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013462:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013464:	4b23      	ldr	r3, [pc, #140]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801346a:	f107 0108 	add.w	r1, r7, #8
 801346e:	2205      	movs	r2, #5
 8013470:	4618      	mov	r0, r3
 8013472:	f002 fbe0 	bl	8015c36 <RegionVerify>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d005      	beq.n	8013488 <LoRaMacMibSetRequestConfirm+0x56c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801347c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013480:	4b1c      	ldr	r3, [pc, #112]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013486:	e09c      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013488:	2303      	movs	r3, #3
 801348a:	75fb      	strb	r3, [r7, #23]
            break;
 801348c:	e099      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013494:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013496:	4b17      	ldr	r3, [pc, #92]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 8013498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801349c:	f107 0108 	add.w	r1, r7, #8
 80134a0:	220a      	movs	r2, #10
 80134a2:	4618      	mov	r0, r3
 80134a4:	f002 fbc7 	bl	8015c36 <RegionVerify>
 80134a8:	4603      	mov	r3, r0
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d005      	beq.n	80134ba <LoRaMacMibSetRequestConfirm+0x59e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80134ae:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80134b2:	4b10      	ldr	r3, [pc, #64]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80134b4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80134b8:	e083      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134ba:	2303      	movs	r3, #3
 80134bc:	75fb      	strb	r3, [r7, #23]
            break;
 80134be:	e080      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80134c6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80134c8:	4b0a      	ldr	r3, [pc, #40]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80134ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80134ce:	f107 0108 	add.w	r1, r7, #8
 80134d2:	2209      	movs	r2, #9
 80134d4:	4618      	mov	r0, r3
 80134d6:	f002 fbae 	bl	8015c36 <RegionVerify>
 80134da:	4603      	mov	r3, r0
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d005      	beq.n	80134ec <LoRaMacMibSetRequestConfirm+0x5d0>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80134e0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80134e4:	4b03      	ldr	r3, [pc, #12]	; (80134f4 <LoRaMacMibSetRequestConfirm+0x5d8>)
 80134e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80134ea:	e06a      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134ec:	2303      	movs	r3, #3
 80134ee:	75fb      	strb	r3, [r7, #23]
            break;
 80134f0:	e067      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
 80134f2:	bf00      	nop
 80134f4:	2000122c 	.word	0x2000122c
 80134f8:	0801d920 	.word	0x0801d920
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	4a32      	ldr	r2, [pc, #200]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013502:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8013506:	4b31      	ldr	r3, [pc, #196]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801350c:	4a2f      	ldr	r2, [pc, #188]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 801350e:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8013510:	e057      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	791a      	ldrb	r2, [r3, #4]
 8013516:	4b2d      	ldr	r3, [pc, #180]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013518:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 801351c:	4b2b      	ldr	r3, [pc, #172]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 801351e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013522:	4b2a      	ldr	r3, [pc, #168]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8013528:	e04b      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	4a27      	ldr	r2, [pc, #156]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013530:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8013532:	e046      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	4a24      	ldr	r2, [pc, #144]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 801353a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 801353e:	e040      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013540:	f7fe fdb2 	bl	80120a8 <RestoreNvmData>
 8013544:	4603      	mov	r3, r0
 8013546:	75fb      	strb	r3, [r7, #23]
            break;
 8013548:	e03b      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	799b      	ldrb	r3, [r3, #6]
 801354e:	2b01      	cmp	r3, #1
 8013550:	d80d      	bhi.n	801356e <LoRaMacMibSetRequestConfirm+0x652>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013552:	4a1e      	ldr	r2, [pc, #120]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	685b      	ldr	r3, [r3, #4]
 8013558:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6858      	ldr	r0, [r3, #4]
 8013560:	f001 fc78 	bl	8014e54 <LoRaMacCryptoSetLrWanVersion>
 8013564:	4603      	mov	r3, r0
 8013566:	2b00      	cmp	r3, #0
 8013568:	d02a      	beq.n	80135c0 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801356a:	2311      	movs	r3, #17
 801356c:	e02a      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6a8>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801356e:	2303      	movs	r3, #3
 8013570:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013572:	e025      	b.n	80135c0 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	4a14      	ldr	r2, [pc, #80]	; (80135cc <LoRaMacMibSetRequestConfirm+0x6b0>)
 801357a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801357e:	e020      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 fc0d 	bl	8013da0 <LoRaMacMibClassBSetRequestConfirm>
 8013586:	4603      	mov	r3, r0
 8013588:	75fb      	strb	r3, [r7, #23]
            break;
 801358a:	e01a      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801358c:	bf00      	nop
 801358e:	e018      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013590:	bf00      	nop
 8013592:	e016      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013594:	bf00      	nop
 8013596:	e014      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 8013598:	bf00      	nop
 801359a:	e012      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 801359c:	bf00      	nop
 801359e:	e010      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135a0:	bf00      	nop
 80135a2:	e00e      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135a4:	bf00      	nop
 80135a6:	e00c      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135a8:	bf00      	nop
 80135aa:	e00a      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135ac:	bf00      	nop
 80135ae:	e008      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135b0:	bf00      	nop
 80135b2:	e006      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135b4:	bf00      	nop
 80135b6:	e004      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135b8:	bf00      	nop
 80135ba:	e002      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135bc:	bf00      	nop
 80135be:	e000      	b.n	80135c2 <LoRaMacMibSetRequestConfirm+0x6a6>
            break;
 80135c0:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 80135c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3718      	adds	r7, #24
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	2000122c 	.word	0x2000122c

080135d0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b086      	sub	sp, #24
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80135d8:	2302      	movs	r3, #2
 80135da:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80135dc:	2300      	movs	r3, #0
 80135de:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d101      	bne.n	80135ea <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80135e6:	2303      	movs	r3, #3
 80135e8:	e127      	b.n	801383a <LoRaMacMlmeRequest+0x26a>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80135ea:	f7fc fcd3 	bl	800ff94 <LoRaMacIsBusy>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d001      	beq.n	80135f8 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80135f4:	2301      	movs	r3, #1
 80135f6:	e120      	b.n	801383a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80135f8:	f001 f8d0 	bl	801479c <LoRaMacConfirmQueueIsFull>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d001      	beq.n	8013606 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013602:	2301      	movs	r3, #1
 8013604:	e119      	b.n	801383a <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013606:	f001 f8bd 	bl	8014784 <LoRaMacConfirmQueueGetCnt>
 801360a:	4603      	mov	r3, r0
 801360c:	2b00      	cmp	r3, #0
 801360e:	d104      	bne.n	801361a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013610:	2214      	movs	r2, #20
 8013612:	2100      	movs	r1, #0
 8013614:	488b      	ldr	r0, [pc, #556]	; (8013844 <LoRaMacMlmeRequest+0x274>)
 8013616:	f004 fe21 	bl	801825c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801361a:	4b8b      	ldr	r3, [pc, #556]	; (8013848 <LoRaMacMlmeRequest+0x278>)
 801361c:	2201      	movs	r2, #1
 801361e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013622:	4a89      	ldr	r2, [pc, #548]	; (8013848 <LoRaMacMlmeRequest+0x278>)
 8013624:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013628:	f043 0304 	orr.w	r3, r3, #4
 801362c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013636:	2301      	movs	r3, #1
 8013638:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801363a:	2300      	movs	r3, #0
 801363c:	74fb      	strb	r3, [r7, #19]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	3b01      	subs	r3, #1
 8013644:	2b0d      	cmp	r3, #13
 8013646:	f200 80ce 	bhi.w	80137e6 <LoRaMacMlmeRequest+0x216>
 801364a:	a201      	add	r2, pc, #4	; (adr r2, 8013650 <LoRaMacMlmeRequest+0x80>)
 801364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013650:	08013689 	.word	0x08013689
 8013654:	080137e7 	.word	0x080137e7
 8013658:	080137e7 	.word	0x080137e7
 801365c:	080136f3 	.word	0x080136f3
 8013660:	08013711 	.word	0x08013711
 8013664:	08013721 	.word	0x08013721
 8013668:	080137e7 	.word	0x080137e7
 801366c:	080137e7 	.word	0x080137e7
 8013670:	080137e7 	.word	0x080137e7
 8013674:	0801373d 	.word	0x0801373d
 8013678:	080137e7 	.word	0x080137e7
 801367c:	080137bb 	.word	0x080137bb
 8013680:	0801375b 	.word	0x0801375b
 8013684:	0801379d 	.word	0x0801379d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013688:	4b6f      	ldr	r3, [pc, #444]	; (8013848 <LoRaMacMlmeRequest+0x278>)
 801368a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801368e:	f003 0320 	and.w	r3, r3, #32
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8013696:	2301      	movs	r3, #1
 8013698:	e0cf      	b.n	801383a <LoRaMacMlmeRequest+0x26a>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( );
 801369a:	f7fe f989 	bl	80119b0 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801369e:	4b6b      	ldr	r3, [pc, #428]	; (801384c <LoRaMacMlmeRequest+0x27c>)
 80136a0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	795b      	ldrb	r3, [r3, #5]
 80136a8:	b25b      	sxtb	r3, r3
 80136aa:	2200      	movs	r2, #0
 80136ac:	4619      	mov	r1, r3
 80136ae:	f002 fbaa 	bl	8015e06 <RegionAlternateDr>
 80136b2:	4603      	mov	r3, r0
 80136b4:	461a      	mov	r2, r3
 80136b6:	4b65      	ldr	r3, [pc, #404]	; (801384c <LoRaMacMlmeRequest+0x27c>)
 80136b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80136bc:	2307      	movs	r3, #7
 80136be:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80136c0:	20ff      	movs	r0, #255	; 0xff
 80136c2:	f7fd feed 	bl	80114a0 <SendReJoinReq>
 80136c6:	4603      	mov	r3, r0
 80136c8:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80136ca:	7dfb      	ldrb	r3, [r7, #23]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f000 808c 	beq.w	80137ea <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80136d2:	4b5e      	ldr	r3, [pc, #376]	; (801384c <LoRaMacMlmeRequest+0x27c>)
 80136d4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	795b      	ldrb	r3, [r3, #5]
 80136dc:	b25b      	sxtb	r3, r3
 80136de:	2201      	movs	r2, #1
 80136e0:	4619      	mov	r1, r3
 80136e2:	f002 fb90 	bl	8015e06 <RegionAlternateDr>
 80136e6:	4603      	mov	r3, r0
 80136e8:	461a      	mov	r2, r3
 80136ea:	4b58      	ldr	r3, [pc, #352]	; (801384c <LoRaMacMlmeRequest+0x27c>)
 80136ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80136f0:	e07b      	b.n	80137ea <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80136f2:	2300      	movs	r3, #0
 80136f4:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80136f6:	f107 030c 	add.w	r3, r7, #12
 80136fa:	2200      	movs	r2, #0
 80136fc:	4619      	mov	r1, r3
 80136fe:	2002      	movs	r0, #2
 8013700:	f000 fcb2 	bl	8014068 <LoRaMacCommandsAddCmd>
 8013704:	4603      	mov	r3, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d071      	beq.n	80137ee <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801370a:	2313      	movs	r3, #19
 801370c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801370e:	e06e      	b.n	80137ee <LoRaMacMlmeRequest+0x21e>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	889b      	ldrh	r3, [r3, #4]
 8013714:	4618      	mov	r0, r3
 8013716:	f7fe fc73 	bl	8012000 <SetTxContinuousWave>
 801371a:	4603      	mov	r3, r0
 801371c:	75fb      	strb	r3, [r7, #23]
            break;
 801371e:	e06d      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	8898      	ldrh	r0, [r3, #4]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6899      	ldr	r1, [r3, #8]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801372e:	b2db      	uxtb	r3, r3
 8013730:	461a      	mov	r2, r3
 8013732:	f7fe fc99 	bl	8012068 <SetTxContinuousWave1>
 8013736:	4603      	mov	r3, r0
 8013738:	75fb      	strb	r3, [r7, #23]
            break;
 801373a:	e05f      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801373c:	2300      	movs	r3, #0
 801373e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013740:	f107 030c 	add.w	r3, r7, #12
 8013744:	2200      	movs	r2, #0
 8013746:	4619      	mov	r1, r3
 8013748:	200d      	movs	r0, #13
 801374a:	f000 fc8d 	bl	8014068 <LoRaMacCommandsAddCmd>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d04e      	beq.n	80137f2 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013754:	2313      	movs	r3, #19
 8013756:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013758:	e04b      	b.n	80137f2 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801375a:	4b3c      	ldr	r3, [pc, #240]	; (801384c <LoRaMacMlmeRequest+0x27c>)
 801375c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013760:	2b00      	cmp	r3, #0
 8013762:	d148      	bne.n	80137f6 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	791b      	ldrb	r3, [r3, #4]
 8013768:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	791b      	ldrb	r3, [r3, #4]
 801376e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013772:	b2db      	uxtb	r3, r3
 8013774:	4618      	mov	r0, r3
 8013776:	f000 fae8 	bl	8013d4a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801377a:	7dbb      	ldrb	r3, [r7, #22]
 801377c:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 801377e:	2300      	movs	r3, #0
 8013780:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013782:	f107 030c 	add.w	r3, r7, #12
 8013786:	2201      	movs	r2, #1
 8013788:	4619      	mov	r1, r3
 801378a:	2010      	movs	r0, #16
 801378c:	f000 fc6c 	bl	8014068 <LoRaMacCommandsAddCmd>
 8013790:	4603      	mov	r3, r0
 8013792:	2b00      	cmp	r3, #0
 8013794:	d02f      	beq.n	80137f6 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013796:	2313      	movs	r3, #19
 8013798:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 801379a:	e02c      	b.n	80137f6 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801379c:	2300      	movs	r3, #0
 801379e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80137a0:	f107 030c 	add.w	r3, r7, #12
 80137a4:	2200      	movs	r2, #0
 80137a6:	4619      	mov	r1, r3
 80137a8:	2012      	movs	r0, #18
 80137aa:	f000 fc5d 	bl	8014068 <LoRaMacCommandsAddCmd>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d022      	beq.n	80137fa <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137b4:	2313      	movs	r3, #19
 80137b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80137b8:	e01f      	b.n	80137fa <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80137ba:	2301      	movs	r3, #1
 80137bc:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80137be:	f000 fa7a 	bl	8013cb6 <LoRaMacClassBIsAcquisitionInProgress>
 80137c2:	4603      	mov	r3, r0
 80137c4:	f083 0301 	eor.w	r3, r3, #1
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d008      	beq.n	80137e0 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80137ce:	2000      	movs	r0, #0
 80137d0:	f000 fa53 	bl	8013c7a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80137d4:	2000      	movs	r0, #0
 80137d6:	f000 fa75 	bl	8013cc4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80137da:	2300      	movs	r3, #0
 80137dc:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80137de:	e00d      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 80137e0:	2301      	movs	r3, #1
 80137e2:	75fb      	strb	r3, [r7, #23]
            break;
 80137e4:	e00a      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 80137e6:	bf00      	nop
 80137e8:	e008      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
            break;
 80137ea:	bf00      	nop
 80137ec:	e006      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
            break;
 80137ee:	bf00      	nop
 80137f0:	e004      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
            break;
 80137f2:	bf00      	nop
 80137f4:	e002      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
            break;
 80137f6:	bf00      	nop
 80137f8:	e000      	b.n	80137fc <LoRaMacMlmeRequest+0x22c>
            break;
 80137fa:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80137fc:	4b12      	ldr	r3, [pc, #72]	; (8013848 <LoRaMacMlmeRequest+0x278>)
 80137fe:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013806:	7dfb      	ldrb	r3, [r7, #23]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d010      	beq.n	801382e <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801380c:	f000 ffba 	bl	8014784 <LoRaMacConfirmQueueGetCnt>
 8013810:	4603      	mov	r3, r0
 8013812:	2b00      	cmp	r3, #0
 8013814:	d110      	bne.n	8013838 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8013816:	4b0c      	ldr	r3, [pc, #48]	; (8013848 <LoRaMacMlmeRequest+0x278>)
 8013818:	2200      	movs	r2, #0
 801381a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801381e:	4a0a      	ldr	r2, [pc, #40]	; (8013848 <LoRaMacMlmeRequest+0x278>)
 8013820:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013824:	f36f 0382 	bfc	r3, #2, #1
 8013828:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 801382c:	e004      	b.n	8013838 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801382e:	f107 0310 	add.w	r3, r7, #16
 8013832:	4618      	mov	r0, r3
 8013834:	f000 fe58 	bl	80144e8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8013838:	7dfb      	ldrb	r3, [r7, #23]
}
 801383a:	4618      	mov	r0, r3
 801383c:	3718      	adds	r7, #24
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	2000116c 	.word	0x2000116c
 8013848:	20000d20 	.word	0x20000d20
 801384c:	2000122c 	.word	0x2000122c

08013850 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b08c      	sub	sp, #48	; 0x30
 8013854:	af02      	add	r7, sp, #8
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801385c:	2302      	movs	r3, #2
 801385e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8013862:	2300      	movs	r3, #0
 8013864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8013868:	2300      	movs	r3, #0
 801386a:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801386c:	2300      	movs	r3, #0
 801386e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8013870:	2300      	movs	r3, #0
 8013872:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d101      	bne.n	801387e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801387a:	2303      	movs	r3, #3
 801387c:	e0d4      	b.n	8013a28 <LoRaMacMcpsRequest+0x1d8>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 801387e:	f7fc fb89 	bl	800ff94 <LoRaMacIsBusy>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d001      	beq.n	801388c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8013888:	2301      	movs	r3, #1
 801388a:	e0cd      	b.n	8013a28 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 801388c:	2300      	movs	r3, #0
 801388e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013890:	2214      	movs	r2, #20
 8013892:	2100      	movs	r1, #0
 8013894:	4866      	ldr	r0, [pc, #408]	; (8013a30 <LoRaMacMcpsRequest+0x1e0>)
 8013896:	f004 fce1 	bl	801825c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801389a:	4b66      	ldr	r3, [pc, #408]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 801389c:	2201      	movs	r2, #1
 801389e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80138a2:	4b64      	ldr	r3, [pc, #400]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 80138a4:	2201      	movs	r2, #1
 80138a6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	2b03      	cmp	r3, #3
 80138b0:	d03d      	beq.n	801392e <LoRaMacMcpsRequest+0xde>
 80138b2:	2b03      	cmp	r3, #3
 80138b4:	dc4f      	bgt.n	8013956 <LoRaMacMcpsRequest+0x106>
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d002      	beq.n	80138c0 <LoRaMacMcpsRequest+0x70>
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d019      	beq.n	80138f2 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80138be:	e04a      	b.n	8013956 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80138c0:	2301      	movs	r3, #1
 80138c2:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80138c4:	4b5b      	ldr	r3, [pc, #364]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 80138c6:	2201      	movs	r2, #1
 80138c8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80138cc:	7b3b      	ldrb	r3, [r7, #12]
 80138ce:	2202      	movs	r2, #2
 80138d0:	f362 1347 	bfi	r3, r2, #5, #3
 80138d4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	791b      	ldrb	r3, [r3, #4]
 80138da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	899b      	ldrh	r3, [r3, #12]
 80138e8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	7b9b      	ldrb	r3, [r3, #14]
 80138ee:	777b      	strb	r3, [r7, #29]
            break;
 80138f0:	e032      	b.n	8013958 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80138f2:	2301      	movs	r3, #1
 80138f4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	7bdb      	ldrb	r3, [r3, #15]
 80138fa:	2b08      	cmp	r3, #8
 80138fc:	bf28      	it	cs
 80138fe:	2308      	movcs	r3, #8
 8013900:	b2da      	uxtb	r2, r3
 8013902:	4b4c      	ldr	r3, [pc, #304]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 8013904:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8013908:	7b3b      	ldrb	r3, [r7, #12]
 801390a:	2204      	movs	r2, #4
 801390c:	f362 1347 	bfi	r3, r2, #5, #3
 8013910:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	791b      	ldrb	r3, [r3, #4]
 8013916:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	689b      	ldr	r3, [r3, #8]
 801391e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	899b      	ldrh	r3, [r3, #12]
 8013924:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	7b9b      	ldrb	r3, [r3, #14]
 801392a:	777b      	strb	r3, [r7, #29]
            break;
 801392c:	e014      	b.n	8013958 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801392e:	2301      	movs	r3, #1
 8013930:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013932:	4b40      	ldr	r3, [pc, #256]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 8013934:	2201      	movs	r2, #1
 8013936:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801393a:	7b3b      	ldrb	r3, [r7, #12]
 801393c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8013940:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	891b      	ldrh	r3, [r3, #8]
 801394c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	7a9b      	ldrb	r3, [r3, #10]
 8013952:	777b      	strb	r3, [r7, #29]
            break;
 8013954:	e000      	b.n	8013958 <LoRaMacMcpsRequest+0x108>
            break;
 8013956:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013958:	2302      	movs	r3, #2
 801395a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801395c:	4b36      	ldr	r3, [pc, #216]	; (8013a38 <LoRaMacMcpsRequest+0x1e8>)
 801395e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013962:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013964:	4b34      	ldr	r3, [pc, #208]	; (8013a38 <LoRaMacMcpsRequest+0x1e8>)
 8013966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801396a:	f107 0214 	add.w	r2, r7, #20
 801396e:	4611      	mov	r1, r2
 8013970:	4618      	mov	r0, r3
 8013972:	f002 f925 	bl	8015bc0 <RegionGetPhyParam>
 8013976:	4603      	mov	r3, r0
 8013978:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	b25b      	sxtb	r3, r3
 801397e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8013982:	4293      	cmp	r3, r2
 8013984:	bfb8      	it	lt
 8013986:	4613      	movlt	r3, r2
 8013988:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801398a:	7f3b      	ldrb	r3, [r7, #28]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d044      	beq.n	8013a1a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8013990:	4b29      	ldr	r3, [pc, #164]	; (8013a38 <LoRaMacMcpsRequest+0x1e8>)
 8013992:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013996:	f083 0301 	eor.w	r3, r3, #1
 801399a:	b2db      	uxtb	r3, r3
 801399c:	2b00      	cmp	r3, #0
 801399e:	d019      	beq.n	80139d4 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80139a0:	7f7b      	ldrb	r3, [r7, #29]
 80139a2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80139a4:	4b24      	ldr	r3, [pc, #144]	; (8013a38 <LoRaMacMcpsRequest+0x1e8>)
 80139a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80139aa:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80139ac:	4b22      	ldr	r3, [pc, #136]	; (8013a38 <LoRaMacMcpsRequest+0x1e8>)
 80139ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80139b2:	f107 0108 	add.w	r1, r7, #8
 80139b6:	2205      	movs	r2, #5
 80139b8:	4618      	mov	r0, r3
 80139ba:	f002 f93c 	bl	8015c36 <RegionVerify>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d005      	beq.n	80139d0 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80139c4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80139c8:	4b1b      	ldr	r3, [pc, #108]	; (8013a38 <LoRaMacMcpsRequest+0x1e8>)
 80139ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80139ce:	e001      	b.n	80139d4 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80139d0:	2303      	movs	r3, #3
 80139d2:	e029      	b.n	8013a28 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80139d4:	8bfa      	ldrh	r2, [r7, #30]
 80139d6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80139da:	f107 000c 	add.w	r0, r7, #12
 80139de:	78fb      	ldrb	r3, [r7, #3]
 80139e0:	9300      	str	r3, [sp, #0]
 80139e2:	4613      	mov	r3, r2
 80139e4:	6a3a      	ldr	r2, [r7, #32]
 80139e6:	f7fd fc7b 	bl	80112e0 <Send>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 80139f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d10c      	bne.n	8013a12 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	781a      	ldrb	r2, [r3, #0]
 80139fc:	4b0d      	ldr	r3, [pc, #52]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 80139fe:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013a02:	4a0c      	ldr	r2, [pc, #48]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 8013a04:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8013a08:	f043 0301 	orr.w	r3, r3, #1
 8013a0c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8013a10:	e003      	b.n	8013a1a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013a12:	4b08      	ldr	r3, [pc, #32]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 8013a14:	2200      	movs	r2, #0
 8013a16:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013a1a:	4b06      	ldr	r3, [pc, #24]	; (8013a34 <LoRaMacMcpsRequest+0x1e4>)
 8013a1c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	611a      	str	r2, [r3, #16]

    return status;
 8013a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3728      	adds	r7, #40	; 0x28
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	20001158 	.word	0x20001158
 8013a34:	20000d20 	.word	0x20000d20
 8013a38:	2000122c 	.word	0x2000122c

08013a3c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b084      	sub	sp, #16
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	4603      	mov	r3, r0
 8013a44:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013a46:	79fb      	ldrb	r3, [r7, #7]
 8013a48:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013a4a:	4b0a      	ldr	r3, [pc, #40]	; (8013a74 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a50:	f107 010c 	add.w	r1, r7, #12
 8013a54:	220f      	movs	r2, #15
 8013a56:	4618      	mov	r0, r3
 8013a58:	f002 f8ed 	bl	8015c36 <RegionVerify>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d003      	beq.n	8013a6a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013a62:	4a04      	ldr	r2, [pc, #16]	; (8013a74 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013a64:	79fb      	ldrb	r3, [r7, #7]
 8013a66:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 8013a6a:	bf00      	nop
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	2000122c 	.word	0x2000122c

08013a78 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013a7c:	f7fe ffec 	bl	8012a58 <LoRaMacStop>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d114      	bne.n	8013ab0 <LoRaMacDeInitialization+0x38>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013a86:	480c      	ldr	r0, [pc, #48]	; (8013ab8 <LoRaMacDeInitialization+0x40>)
 8013a88:	f008 fcf8 	bl	801c47c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013a8c:	480b      	ldr	r0, [pc, #44]	; (8013abc <LoRaMacDeInitialization+0x44>)
 8013a8e:	f008 fcf5 	bl	801c47c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013a92:	480b      	ldr	r0, [pc, #44]	; (8013ac0 <LoRaMacDeInitialization+0x48>)
 8013a94:	f008 fcf2 	bl	801c47c <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8013a98:	480a      	ldr	r0, [pc, #40]	; (8013ac4 <LoRaMacDeInitialization+0x4c>)
 8013a9a:	f008 fcef 	bl	801c47c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013a9e:	f000 f95e 	bl	8013d5e <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8013aa2:	f7fd ff85 	bl	80119b0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013aa6:	4b08      	ldr	r3, [pc, #32]	; (8013ac8 <LoRaMacDeInitialization+0x50>)
 8013aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aaa:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013aac:	2300      	movs	r3, #0
 8013aae:	e000      	b.n	8013ab2 <LoRaMacDeInitialization+0x3a>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013ab0:	2301      	movs	r3, #1
    }
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	20001088 	.word	0x20001088
 8013abc:	200010a0 	.word	0x200010a0
 8013ac0:	200010b8 	.word	0x200010b8
 8013ac4:	20001118 	.word	0x20001118
 8013ac8:	0801d920 	.word	0x0801d920

08013acc <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b08c      	sub	sp, #48	; 0x30
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	607a      	str	r2, [r7, #4]
 8013ad8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013ada:	2300      	movs	r3, #0
 8013adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	7c1b      	ldrb	r3, [r3, #16]
 8013ae4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	7c5b      	ldrb	r3, [r3, #17]
 8013aec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	689a      	ldr	r2, [r3, #8]
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	795b      	ldrb	r3, [r3, #5]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	f000 808b 	beq.w	8013c18 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013b02:	2302      	movs	r3, #2
 8013b04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	7c9b      	ldrb	r3, [r3, #18]
 8013b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	7cdb      	ldrb	r3, [r3, #19]
 8013b14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013b18:	4611      	mov	r1, r2
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f002 f850 	bl	8015bc0 <RegionGetPhyParam>
 8013b20:	4603      	mov	r3, r0
 8013b22:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013b24:	6a3b      	ldr	r3, [r7, #32]
 8013b26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8013b2a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8013b2e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8013b32:	4293      	cmp	r3, r2
 8013b34:	bfb8      	it	lt
 8013b36:	4613      	movlt	r3, r2
 8013b38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8013b3c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013b40:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d106      	bne.n	8013b56 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b54:	e060      	b.n	8013c18 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	689b      	ldr	r3, [r3, #8]
 8013b5a:	68fa      	ldr	r2, [r7, #12]
 8013b5c:	8992      	ldrh	r2, [r2, #12]
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d303      	bcc.n	8013b6a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8013b62:	2301      	movs	r3, #1
 8013b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013b68:	e002      	b.n	8013b70 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	689b      	ldr	r3, [r3, #8]
 8013b74:	68fa      	ldr	r2, [r7, #12]
 8013b76:	8992      	ldrh	r2, [r2, #12]
 8013b78:	4611      	mov	r1, r2
 8013b7a:	68fa      	ldr	r2, [r7, #12]
 8013b7c:	89d2      	ldrh	r2, [r2, #14]
 8013b7e:	440a      	add	r2, r1
 8013b80:	4293      	cmp	r3, r2
 8013b82:	d349      	bcc.n	8013c18 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013b84:	2308      	movs	r3, #8
 8013b86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	7cdb      	ldrb	r3, [r3, #19]
 8013b8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013b92:	4611      	mov	r1, r2
 8013b94:	4618      	mov	r0, r3
 8013b96:	f002 f813 	bl	8015bc0 <RegionGetPhyParam>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8013b9e:	6a3b      	ldr	r3, [r7, #32]
 8013ba0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	89d2      	ldrh	r2, [r2, #14]
 8013bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bb0:	fb01 f202 	mul.w	r2, r1, r2
 8013bb4:	1a9b      	subs	r3, r3, r2
 8013bb6:	2b01      	cmp	r3, #1
 8013bb8:	d12e      	bne.n	8013c18 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013bba:	2322      	movs	r3, #34	; 0x22
 8013bbc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8013bc0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013bc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	7c9b      	ldrb	r3, [r3, #18]
 8013bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	7cdb      	ldrb	r3, [r3, #19]
 8013bd4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013bd8:	4611      	mov	r1, r2
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f001 fff0 	bl	8015bc0 <RegionGetPhyParam>
 8013be0:	4603      	mov	r3, r0
 8013be2:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8013be4:	6a3b      	ldr	r3, [r7, #32]
 8013be6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8013bea:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013bee:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d110      	bne.n	8013c18 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	791b      	ldrb	r3, [r3, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d009      	beq.n	8013c18 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013c04:	2302      	movs	r3, #2
 8013c06:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	7cdb      	ldrb	r3, [r3, #19]
 8013c0c:	f107 0214 	add.w	r2, r7, #20
 8013c10:	4611      	mov	r1, r2
 8013c12:	4618      	mov	r0, r3
 8013c14:	f001 fffd 	bl	8015c12 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013c1e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013c26:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3730      	adds	r7, #48	; 0x30
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b084      	sub	sp, #16
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	60f8      	str	r0, [r7, #12]
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	607a      	str	r2, [r7, #4]
 8013c40:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	789b      	ldrb	r3, [r3, #2]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d107      	bne.n	8013c5a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	68b9      	ldr	r1, [r7, #8]
 8013c50:	68f8      	ldr	r0, [r7, #12]
 8013c52:	f7ff ff3b 	bl	8013acc <CalcNextV10X>
 8013c56:	4603      	mov	r3, r0
 8013c58:	e000      	b.n	8013c5c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8013c5a:	2300      	movs	r3, #0
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3710      	adds	r7, #16
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013c64:	b480      	push	{r7}
 8013c66:	b085      	sub	sp, #20
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	60f8      	str	r0, [r7, #12]
 8013c6c:	60b9      	str	r1, [r7, #8]
 8013c6e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c70:	bf00      	nop
 8013c72:	3714      	adds	r7, #20
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bc80      	pop	{r7}
 8013c78:	4770      	bx	lr

08013c7a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013c7a:	b480      	push	{r7}
 8013c7c:	b083      	sub	sp, #12
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	4603      	mov	r3, r0
 8013c82:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c84:	bf00      	nop
 8013c86:	370c      	adds	r7, #12
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bc80      	pop	{r7}
 8013c8c:	4770      	bx	lr

08013c8e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013c8e:	b480      	push	{r7}
 8013c90:	b083      	sub	sp, #12
 8013c92:	af00      	add	r7, sp, #0
 8013c94:	4603      	mov	r3, r0
 8013c96:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013c98:	bf00      	nop
 8013c9a:	370c      	adds	r7, #12
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bc80      	pop	{r7}
 8013ca0:	4770      	bx	lr

08013ca2 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013ca2:	b480      	push	{r7}
 8013ca4:	b083      	sub	sp, #12
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	4603      	mov	r3, r0
 8013caa:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cac:	bf00      	nop
 8013cae:	370c      	adds	r7, #12
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bc80      	pop	{r7}
 8013cb4:	4770      	bx	lr

08013cb6 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013cb6:	b480      	push	{r7}
 8013cb8:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013cba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bc80      	pop	{r7}
 8013cc2:	4770      	bx	lr

08013cc4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ccc:	bf00      	nop
 8013cce:	370c      	adds	r7, #12
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bc80      	pop	{r7}
 8013cd4:	4770      	bx	lr

08013cd6 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013cd6:	b480      	push	{r7}
 8013cd8:	b083      	sub	sp, #12
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cde:	bf00      	nop
 8013ce0:	370c      	adds	r7, #12
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bc80      	pop	{r7}
 8013ce6:	4770      	bx	lr

08013ce8 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cf0:	bf00      	nop
 8013cf2:	370c      	adds	r7, #12
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bc80      	pop	{r7}
 8013cf8:	4770      	bx	lr

08013cfa <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013cfa:	b480      	push	{r7}
 8013cfc:	b083      	sub	sp, #12
 8013cfe:	af00      	add	r7, sp, #0
 8013d00:	6078      	str	r0, [r7, #4]
 8013d02:	460b      	mov	r3, r1
 8013d04:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013d06:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bc80      	pop	{r7}
 8013d10:	4770      	bx	lr

08013d12 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013d12:	b480      	push	{r7}
 8013d14:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d16:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bc80      	pop	{r7}
 8013d1e:	4770      	bx	lr

08013d20 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013d20:	b480      	push	{r7}
 8013d22:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bc80      	pop	{r7}
 8013d2c:	4770      	bx	lr

08013d2e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013d2e:	b480      	push	{r7}
 8013d30:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d32:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bc80      	pop	{r7}
 8013d3a:	4770      	bx	lr

08013d3c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d40:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bc80      	pop	{r7}
 8013d48:	4770      	bx	lr

08013d4a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013d4a:	b480      	push	{r7}
 8013d4c:	b083      	sub	sp, #12
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	4603      	mov	r3, r0
 8013d52:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d54:	bf00      	nop
 8013d56:	370c      	adds	r7, #12
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bc80      	pop	{r7}
 8013d5c:	4770      	bx	lr

08013d5e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013d5e:	b480      	push	{r7}
 8013d60:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d62:	bf00      	nop
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bc80      	pop	{r7}
 8013d68:	4770      	bx	lr

08013d6a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013d6a:	b480      	push	{r7}
 8013d6c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d6e:	bf00      	nop
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bc80      	pop	{r7}
 8013d74:	4770      	bx	lr

08013d76 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013d76:	b480      	push	{r7}
 8013d78:	b083      	sub	sp, #12
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d80:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	370c      	adds	r7, #12
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bc80      	pop	{r7}
 8013d8a:	4770      	bx	lr

08013d8c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d94:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	370c      	adds	r7, #12
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bc80      	pop	{r7}
 8013d9e:	4770      	bx	lr

08013da0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013da0:	b480      	push	{r7}
 8013da2:	b083      	sub	sp, #12
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013da8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	370c      	adds	r7, #12
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bc80      	pop	{r7}
 8013db2:	4770      	bx	lr

08013db4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013db4:	b480      	push	{r7}
 8013db6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013db8:	bf00      	nop
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bc80      	pop	{r7}
 8013dbe:	4770      	bx	lr

08013dc0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	6039      	str	r1, [r7, #0]
 8013dca:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013dcc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	370c      	adds	r7, #12
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bc80      	pop	{r7}
 8013dd6:	4770      	bx	lr

08013dd8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	4603      	mov	r3, r0
 8013de0:	603a      	str	r2, [r7, #0]
 8013de2:	80fb      	strh	r3, [r7, #6]
 8013de4:	460b      	mov	r3, r1
 8013de6:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013de8:	bf00      	nop
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bc80      	pop	{r7}
 8013df0:	4770      	bx	lr

08013df2 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013df2:	b480      	push	{r7}
 8013df4:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013df6:	bf00      	nop
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bc80      	pop	{r7}
 8013dfc:	4770      	bx	lr

08013dfe <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013dfe:	b480      	push	{r7}
 8013e00:	b083      	sub	sp, #12
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013e06:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	370c      	adds	r7, #12
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bc80      	pop	{r7}
 8013e10:	4770      	bx	lr

08013e12 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013e12:	b480      	push	{r7}
 8013e14:	b083      	sub	sp, #12
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013e1a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	370c      	adds	r7, #12
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bc80      	pop	{r7}
 8013e24:	4770      	bx	lr

08013e26 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013e26:	b480      	push	{r7}
 8013e28:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e2a:	bf00      	nop
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bc80      	pop	{r7}
 8013e30:	4770      	bx	lr

08013e32 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013e32:	b480      	push	{r7}
 8013e34:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e36:	bf00      	nop
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bc80      	pop	{r7}
 8013e3c:	4770      	bx	lr

08013e3e <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013e3e:	b480      	push	{r7}
 8013e40:	b085      	sub	sp, #20
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	81fb      	strh	r3, [r7, #14]
 8013e4e:	e00a      	b.n	8013e66 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013e50:	89fb      	ldrh	r3, [r7, #14]
 8013e52:	68ba      	ldr	r2, [r7, #8]
 8013e54:	4413      	add	r3, r2
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <IsSlotFree+0x22>
        {
            return false;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	e006      	b.n	8013e6e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e60:	89fb      	ldrh	r3, [r7, #14]
 8013e62:	3301      	adds	r3, #1
 8013e64:	81fb      	strh	r3, [r7, #14]
 8013e66:	89fb      	ldrh	r3, [r7, #14]
 8013e68:	2b0f      	cmp	r3, #15
 8013e6a:	d9f1      	bls.n	8013e50 <IsSlotFree+0x12>
        }
    }
    return true;
 8013e6c:	2301      	movs	r3, #1
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3714      	adds	r7, #20
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bc80      	pop	{r7}
 8013e76:	4770      	bx	lr

08013e78 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013e82:	e007      	b.n	8013e94 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013e84:	79fb      	ldrb	r3, [r7, #7]
 8013e86:	3301      	adds	r3, #1
 8013e88:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	2b0f      	cmp	r3, #15
 8013e8e:	d101      	bne.n	8013e94 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013e90:	2300      	movs	r3, #0
 8013e92:	e012      	b.n	8013eba <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013e94:	79fb      	ldrb	r3, [r7, #7]
 8013e96:	011b      	lsls	r3, r3, #4
 8013e98:	3308      	adds	r3, #8
 8013e9a:	4a0a      	ldr	r2, [pc, #40]	; (8013ec4 <MallocNewMacCommandSlot+0x4c>)
 8013e9c:	4413      	add	r3, r2
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7ff ffcd 	bl	8013e3e <IsSlotFree>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	f083 0301 	eor.w	r3, r3, #1
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1e9      	bne.n	8013e84 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013eb0:	79fb      	ldrb	r3, [r7, #7]
 8013eb2:	011b      	lsls	r3, r3, #4
 8013eb4:	3308      	adds	r3, #8
 8013eb6:	4a03      	ldr	r2, [pc, #12]	; (8013ec4 <MallocNewMacCommandSlot+0x4c>)
 8013eb8:	4413      	add	r3, r2
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3708      	adds	r7, #8
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
 8013ec2:	bf00      	nop
 8013ec4:	20002094 	.word	0x20002094

08013ec8 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <FreeMacCommandSlot+0x12>
    {
        return false;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	e005      	b.n	8013ee6 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013eda:	2210      	movs	r2, #16
 8013edc:	2100      	movs	r1, #0
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f004 f9bc 	bl	801825c <memset1>

    return true;
 8013ee4:	2301      	movs	r3, #1
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3708      	adds	r7, #8
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}

08013eee <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013eee:	b480      	push	{r7}
 8013ef0:	b083      	sub	sp, #12
 8013ef2:	af00      	add	r7, sp, #0
 8013ef4:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d101      	bne.n	8013f00 <LinkedListInit+0x12>
    {
        return false;
 8013efc:	2300      	movs	r3, #0
 8013efe:	e006      	b.n	8013f0e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2200      	movs	r2, #0
 8013f04:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	605a      	str	r2, [r3, #4]

    return true;
 8013f0c:	2301      	movs	r3, #1
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	370c      	adds	r7, #12
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bc80      	pop	{r7}
 8013f16:	4770      	bx	lr

08013f18 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d002      	beq.n	8013f2e <LinkedListAdd+0x16>
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d101      	bne.n	8013f32 <LinkedListAdd+0x1a>
    {
        return false;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	e015      	b.n	8013f5e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d102      	bne.n	8013f40 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	683a      	ldr	r2, [r7, #0]
 8013f3e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d003      	beq.n	8013f50 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	683a      	ldr	r2, [r7, #0]
 8013f4e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	2200      	movs	r2, #0
 8013f54:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	605a      	str	r2, [r3, #4]

    return true;
 8013f5c:	2301      	movs	r3, #1
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	370c      	adds	r7, #12
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bc80      	pop	{r7}
 8013f66:	4770      	bx	lr

08013f68 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b085      	sub	sp, #20
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d002      	beq.n	8013f7e <LinkedListGetPrevious+0x16>
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d101      	bne.n	8013f82 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	e016      	b.n	8013fb0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013f88:	683a      	ldr	r2, [r7, #0]
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d00c      	beq.n	8013faa <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013f90:	e002      	b.n	8013f98 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d007      	beq.n	8013fae <LinkedListGetPrevious+0x46>
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	683a      	ldr	r2, [r7, #0]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d1f4      	bne.n	8013f92 <LinkedListGetPrevious+0x2a>
 8013fa8:	e001      	b.n	8013fae <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013faa:	2300      	movs	r3, #0
 8013fac:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013fae:	68fb      	ldr	r3, [r7, #12]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3714      	adds	r7, #20
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bc80      	pop	{r7}
 8013fb8:	4770      	bx	lr

08013fba <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013fba:	b580      	push	{r7, lr}
 8013fbc:	b084      	sub	sp, #16
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
 8013fc2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d002      	beq.n	8013fd0 <LinkedListRemove+0x16>
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d101      	bne.n	8013fd4 <LinkedListRemove+0x1a>
    {
        return false;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	e020      	b.n	8014016 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013fd4:	6839      	ldr	r1, [r7, #0]
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7ff ffc6 	bl	8013f68 <LinkedListGetPrevious>
 8013fdc:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	683a      	ldr	r2, [r7, #0]
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d103      	bne.n	8013ff0 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	d102      	bne.n	8014000 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d003      	beq.n	801400e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	681a      	ldr	r2, [r3, #0]
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	2200      	movs	r2, #0
 8014012:	601a      	str	r2, [r3, #0]

    return true;
 8014014:	2301      	movs	r3, #1
}
 8014016:	4618      	mov	r0, r3
 8014018:	3710      	adds	r7, #16
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}

0801401e <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801401e:	b480      	push	{r7}
 8014020:	b083      	sub	sp, #12
 8014022:	af00      	add	r7, sp, #0
 8014024:	4603      	mov	r3, r0
 8014026:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8014028:	79fb      	ldrb	r3, [r7, #7]
 801402a:	2b05      	cmp	r3, #5
 801402c:	d004      	beq.n	8014038 <IsSticky+0x1a>
 801402e:	2b05      	cmp	r3, #5
 8014030:	db04      	blt.n	801403c <IsSticky+0x1e>
 8014032:	3b08      	subs	r3, #8
 8014034:	2b02      	cmp	r3, #2
 8014036:	d801      	bhi.n	801403c <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8014038:	2301      	movs	r3, #1
 801403a:	e000      	b.n	801403e <IsSticky+0x20>
        default:
            return false;
 801403c:	2300      	movs	r3, #0
    }
}
 801403e:	4618      	mov	r0, r3
 8014040:	370c      	adds	r7, #12
 8014042:	46bd      	mov	sp, r7
 8014044:	bc80      	pop	{r7}
 8014046:	4770      	bx	lr

08014048 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014048:	b580      	push	{r7, lr}
 801404a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801404c:	22fc      	movs	r2, #252	; 0xfc
 801404e:	2100      	movs	r1, #0
 8014050:	4804      	ldr	r0, [pc, #16]	; (8014064 <LoRaMacCommandsInit+0x1c>)
 8014052:	f004 f903 	bl	801825c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014056:	4803      	ldr	r0, [pc, #12]	; (8014064 <LoRaMacCommandsInit+0x1c>)
 8014058:	f7ff ff49 	bl	8013eee <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801405c:	2300      	movs	r3, #0
}
 801405e:	4618      	mov	r0, r3
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	20002094 	.word	0x20002094

08014068 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b086      	sub	sp, #24
 801406c:	af00      	add	r7, sp, #0
 801406e:	4603      	mov	r3, r0
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
 8014074:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d101      	bne.n	8014080 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801407c:	2301      	movs	r3, #1
 801407e:	e033      	b.n	80140e8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014080:	f7ff fefa 	bl	8013e78 <MallocNewMacCommandSlot>
 8014084:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d101      	bne.n	8014090 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801408c:	2302      	movs	r3, #2
 801408e:	e02b      	b.n	80140e8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014090:	6979      	ldr	r1, [r7, #20]
 8014092:	4817      	ldr	r0, [pc, #92]	; (80140f0 <LoRaMacCommandsAddCmd+0x88>)
 8014094:	f7ff ff40 	bl	8013f18 <LinkedListAdd>
 8014098:	4603      	mov	r3, r0
 801409a:	f083 0301 	eor.w	r3, r3, #1
 801409e:	b2db      	uxtb	r3, r3
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d001      	beq.n	80140a8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80140a4:	2305      	movs	r3, #5
 80140a6:	e01f      	b.n	80140e8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	7bfa      	ldrb	r2, [r7, #15]
 80140ac:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	687a      	ldr	r2, [r7, #4]
 80140b2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	3305      	adds	r3, #5
 80140b8:	687a      	ldr	r2, [r7, #4]
 80140ba:	b292      	uxth	r2, r2
 80140bc:	68b9      	ldr	r1, [r7, #8]
 80140be:	4618      	mov	r0, r3
 80140c0:	f004 f891 	bl	80181e6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80140c4:	7bfb      	ldrb	r3, [r7, #15]
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7ff ffa9 	bl	801401e <IsSticky>
 80140cc:	4603      	mov	r3, r0
 80140ce:	461a      	mov	r2, r3
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80140d4:	4b06      	ldr	r3, [pc, #24]	; (80140f0 <LoRaMacCommandsAddCmd+0x88>)
 80140d6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	4413      	add	r3, r2
 80140de:	3301      	adds	r3, #1
 80140e0:	4a03      	ldr	r2, [pc, #12]	; (80140f0 <LoRaMacCommandsAddCmd+0x88>)
 80140e2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80140e6:	2300      	movs	r3, #0
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	3718      	adds	r7, #24
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}
 80140f0:	20002094 	.word	0x20002094

080140f4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d101      	bne.n	8014106 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014102:	2301      	movs	r3, #1
 8014104:	e021      	b.n	801414a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014106:	6879      	ldr	r1, [r7, #4]
 8014108:	4812      	ldr	r0, [pc, #72]	; (8014154 <LoRaMacCommandsRemoveCmd+0x60>)
 801410a:	f7ff ff56 	bl	8013fba <LinkedListRemove>
 801410e:	4603      	mov	r3, r0
 8014110:	f083 0301 	eor.w	r3, r3, #1
 8014114:	b2db      	uxtb	r3, r3
 8014116:	2b00      	cmp	r3, #0
 8014118:	d001      	beq.n	801411e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801411a:	2303      	movs	r3, #3
 801411c:	e015      	b.n	801414a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801411e:	4b0d      	ldr	r3, [pc, #52]	; (8014154 <LoRaMacCommandsRemoveCmd+0x60>)
 8014120:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	689b      	ldr	r3, [r3, #8]
 8014128:	1ad3      	subs	r3, r2, r3
 801412a:	3b01      	subs	r3, #1
 801412c:	4a09      	ldr	r2, [pc, #36]	; (8014154 <LoRaMacCommandsRemoveCmd+0x60>)
 801412e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f7ff fec8 	bl	8013ec8 <FreeMacCommandSlot>
 8014138:	4603      	mov	r3, r0
 801413a:	f083 0301 	eor.w	r3, r3, #1
 801413e:	b2db      	uxtb	r3, r3
 8014140:	2b00      	cmp	r3, #0
 8014142:	d001      	beq.n	8014148 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014144:	2305      	movs	r3, #5
 8014146:	e000      	b.n	801414a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3708      	adds	r7, #8
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}
 8014152:	bf00      	nop
 8014154:	20002094 	.word	0x20002094

08014158 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801415e:	4b0f      	ldr	r3, [pc, #60]	; (801419c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014164:	e012      	b.n	801418c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	7b1b      	ldrb	r3, [r3, #12]
 801416a:	f083 0301 	eor.w	r3, r3, #1
 801416e:	b2db      	uxtb	r3, r3
 8014170:	2b00      	cmp	r3, #0
 8014172:	d008      	beq.n	8014186 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7ff ffba 	bl	80140f4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	607b      	str	r3, [r7, #4]
 8014184:	e002      	b.n	801418c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d1e9      	bne.n	8014166 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014192:	2300      	movs	r3, #0
}
 8014194:	4618      	mov	r0, r3
 8014196:	3708      	adds	r7, #8
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	20002094 	.word	0x20002094

080141a0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80141a6:	4b0e      	ldr	r3, [pc, #56]	; (80141e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80141ac:	e00f      	b.n	80141ce <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	791b      	ldrb	r3, [r3, #4]
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7ff ff30 	bl	801401e <IsSticky>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d002      	beq.n	80141ca <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f7ff ff95 	bl	80140f4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d1ec      	bne.n	80141ae <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	20002094 	.word	0x20002094

080141e4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80141e4:	b480      	push	{r7}
 80141e6:	b083      	sub	sp, #12
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d101      	bne.n	80141f6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80141f2:	2301      	movs	r3, #1
 80141f4:	e005      	b.n	8014202 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80141f6:	4b05      	ldr	r3, [pc, #20]	; (801420c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80141f8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014200:	2300      	movs	r3, #0
}
 8014202:	4618      	mov	r0, r3
 8014204:	370c      	adds	r7, #12
 8014206:	46bd      	mov	sp, r7
 8014208:	bc80      	pop	{r7}
 801420a:	4770      	bx	lr
 801420c:	20002094 	.word	0x20002094

08014210 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b088      	sub	sp, #32
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	60b9      	str	r1, [r7, #8]
 801421a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801421c:	4b25      	ldr	r3, [pc, #148]	; (80142b4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014222:	2300      	movs	r3, #0
 8014224:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d002      	beq.n	8014232 <LoRaMacCommandsSerializeCmds+0x22>
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d126      	bne.n	8014280 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014232:	2301      	movs	r3, #1
 8014234:	e039      	b.n	80142aa <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014236:	7efb      	ldrb	r3, [r7, #27]
 8014238:	68fa      	ldr	r2, [r7, #12]
 801423a:	1ad2      	subs	r2, r2, r3
 801423c:	69fb      	ldr	r3, [r7, #28]
 801423e:	689b      	ldr	r3, [r3, #8]
 8014240:	3301      	adds	r3, #1
 8014242:	429a      	cmp	r2, r3
 8014244:	d320      	bcc.n	8014288 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014246:	7efb      	ldrb	r3, [r7, #27]
 8014248:	1c5a      	adds	r2, r3, #1
 801424a:	76fa      	strb	r2, [r7, #27]
 801424c:	461a      	mov	r2, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4413      	add	r3, r2
 8014252:	69fa      	ldr	r2, [r7, #28]
 8014254:	7912      	ldrb	r2, [r2, #4]
 8014256:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014258:	7efb      	ldrb	r3, [r7, #27]
 801425a:	687a      	ldr	r2, [r7, #4]
 801425c:	18d0      	adds	r0, r2, r3
 801425e:	69fb      	ldr	r3, [r7, #28]
 8014260:	1d59      	adds	r1, r3, #5
 8014262:	69fb      	ldr	r3, [r7, #28]
 8014264:	689b      	ldr	r3, [r3, #8]
 8014266:	b29b      	uxth	r3, r3
 8014268:	461a      	mov	r2, r3
 801426a:	f003 ffbc 	bl	80181e6 <memcpy1>
            itr += curElement->PayloadSize;
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	689b      	ldr	r3, [r3, #8]
 8014272:	b2da      	uxtb	r2, r3
 8014274:	7efb      	ldrb	r3, [r7, #27]
 8014276:	4413      	add	r3, r2
 8014278:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d1d7      	bne.n	8014236 <LoRaMacCommandsSerializeCmds+0x26>
 8014286:	e009      	b.n	801429c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014288:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801428a:	e007      	b.n	801429c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801428c:	69fb      	ldr	r3, [r7, #28]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014292:	69f8      	ldr	r0, [r7, #28]
 8014294:	f7ff ff2e 	bl	80140f4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d1f4      	bne.n	801428c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80142a2:	68b8      	ldr	r0, [r7, #8]
 80142a4:	f7ff ff9e 	bl	80141e4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80142a8:	2300      	movs	r3, #0
}
 80142aa:	4618      	mov	r0, r3
 80142ac:	3720      	adds	r7, #32
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	bf00      	nop
 80142b4:	20002094 	.word	0x20002094

080142b8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80142b8:	b480      	push	{r7}
 80142ba:	b085      	sub	sp, #20
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d101      	bne.n	80142ca <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142c6:	2301      	movs	r3, #1
 80142c8:	e016      	b.n	80142f8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80142ca:	4b0e      	ldr	r3, [pc, #56]	; (8014304 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2200      	movs	r2, #0
 80142d4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80142d6:	e00b      	b.n	80142f0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	7b1b      	ldrb	r3, [r3, #12]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d004      	beq.n	80142ea <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2201      	movs	r2, #1
 80142e4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80142e6:	2300      	movs	r3, #0
 80142e8:	e006      	b.n	80142f8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d1f0      	bne.n	80142d8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80142f6:	2300      	movs	r3, #0
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3714      	adds	r7, #20
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bc80      	pop	{r7}
 8014300:	4770      	bx	lr
 8014302:	bf00      	nop
 8014304:	20002094 	.word	0x20002094

08014308 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014308:	b480      	push	{r7}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	4603      	mov	r3, r0
 8014310:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014312:	2300      	movs	r3, #0
 8014314:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014316:	79fb      	ldrb	r3, [r7, #7]
 8014318:	3b02      	subs	r3, #2
 801431a:	2b11      	cmp	r3, #17
 801431c:	d850      	bhi.n	80143c0 <LoRaMacCommandsGetCmdSize+0xb8>
 801431e:	a201      	add	r2, pc, #4	; (adr r2, 8014324 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014324:	0801436d 	.word	0x0801436d
 8014328:	08014373 	.word	0x08014373
 801432c:	08014379 	.word	0x08014379
 8014330:	0801437f 	.word	0x0801437f
 8014334:	08014385 	.word	0x08014385
 8014338:	0801438b 	.word	0x0801438b
 801433c:	08014391 	.word	0x08014391
 8014340:	08014397 	.word	0x08014397
 8014344:	0801439d 	.word	0x0801439d
 8014348:	080143c1 	.word	0x080143c1
 801434c:	080143c1 	.word	0x080143c1
 8014350:	080143a3 	.word	0x080143a3
 8014354:	080143c1 	.word	0x080143c1
 8014358:	080143c1 	.word	0x080143c1
 801435c:	080143a9 	.word	0x080143a9
 8014360:	080143af 	.word	0x080143af
 8014364:	080143b5 	.word	0x080143b5
 8014368:	080143bb 	.word	0x080143bb
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801436c:	2303      	movs	r3, #3
 801436e:	73fb      	strb	r3, [r7, #15]
            break;
 8014370:	e027      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014372:	2305      	movs	r3, #5
 8014374:	73fb      	strb	r3, [r7, #15]
            break;
 8014376:	e024      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014378:	2302      	movs	r3, #2
 801437a:	73fb      	strb	r3, [r7, #15]
            break;
 801437c:	e021      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801437e:	2305      	movs	r3, #5
 8014380:	73fb      	strb	r3, [r7, #15]
            break;
 8014382:	e01e      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014384:	2301      	movs	r3, #1
 8014386:	73fb      	strb	r3, [r7, #15]
            break;
 8014388:	e01b      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801438a:	2306      	movs	r3, #6
 801438c:	73fb      	strb	r3, [r7, #15]
            break;
 801438e:	e018      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014390:	2302      	movs	r3, #2
 8014392:	73fb      	strb	r3, [r7, #15]
            break;
 8014394:	e015      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014396:	2302      	movs	r3, #2
 8014398:	73fb      	strb	r3, [r7, #15]
            break;
 801439a:	e012      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801439c:	2305      	movs	r3, #5
 801439e:	73fb      	strb	r3, [r7, #15]
            break;
 80143a0:	e00f      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80143a2:	2306      	movs	r3, #6
 80143a4:	73fb      	strb	r3, [r7, #15]
            break;
 80143a6:	e00c      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80143a8:	2301      	movs	r3, #1
 80143aa:	73fb      	strb	r3, [r7, #15]
            break;
 80143ac:	e009      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80143ae:	2305      	movs	r3, #5
 80143b0:	73fb      	strb	r3, [r7, #15]
            break;
 80143b2:	e006      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80143b4:	2304      	movs	r3, #4
 80143b6:	73fb      	strb	r3, [r7, #15]
            break;
 80143b8:	e003      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80143ba:	2304      	movs	r3, #4
 80143bc:	73fb      	strb	r3, [r7, #15]
            break;
 80143be:	e000      	b.n	80143c2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80143c0:	bf00      	nop
        }
    }
    return cidSize;
 80143c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	3714      	adds	r7, #20
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bc80      	pop	{r7}
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop

080143d0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80143d0:	b480      	push	{r7}
 80143d2:	b083      	sub	sp, #12
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	4a07      	ldr	r2, [pc, #28]	; (80143f8 <IncreaseBufferPointer+0x28>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d102      	bne.n	80143e6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80143e0:	4b06      	ldr	r3, [pc, #24]	; (80143fc <IncreaseBufferPointer+0x2c>)
 80143e2:	607b      	str	r3, [r7, #4]
 80143e4:	e002      	b.n	80143ec <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	3304      	adds	r3, #4
 80143ea:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80143ec:	687b      	ldr	r3, [r7, #4]
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	370c      	adds	r7, #12
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bc80      	pop	{r7}
 80143f6:	4770      	bx	lr
 80143f8:	200021ac 	.word	0x200021ac
 80143fc:	2000219c 	.word	0x2000219c

08014400 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014400:	b480      	push	{r7}
 8014402:	b083      	sub	sp, #12
 8014404:	af00      	add	r7, sp, #0
 8014406:	4603      	mov	r3, r0
 8014408:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801440a:	79fb      	ldrb	r3, [r7, #7]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d101      	bne.n	8014414 <IsListEmpty+0x14>
    {
        return true;
 8014410:	2301      	movs	r3, #1
 8014412:	e000      	b.n	8014416 <IsListEmpty+0x16>
    }
    return false;
 8014414:	2300      	movs	r3, #0
}
 8014416:	4618      	mov	r0, r3
 8014418:	370c      	adds	r7, #12
 801441a:	46bd      	mov	sp, r7
 801441c:	bc80      	pop	{r7}
 801441e:	4770      	bx	lr

08014420 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	4603      	mov	r3, r0
 8014428:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801442a:	79fb      	ldrb	r3, [r7, #7]
 801442c:	2b04      	cmp	r3, #4
 801442e:	d901      	bls.n	8014434 <IsListFull+0x14>
    {
        return true;
 8014430:	2301      	movs	r3, #1
 8014432:	e000      	b.n	8014436 <IsListFull+0x16>
    }
    return false;
 8014434:	2300      	movs	r3, #0
}
 8014436:	4618      	mov	r0, r3
 8014438:	370c      	adds	r7, #12
 801443a:	46bd      	mov	sp, r7
 801443c:	bc80      	pop	{r7}
 801443e:	4770      	bx	lr

08014440 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af00      	add	r7, sp, #0
 8014446:	4603      	mov	r3, r0
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014452:	4b13      	ldr	r3, [pc, #76]	; (80144a0 <GetElement+0x60>)
 8014454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014458:	4618      	mov	r0, r3
 801445a:	f7ff ffd1 	bl	8014400 <IsListEmpty>
 801445e:	4603      	mov	r3, r0
 8014460:	2b00      	cmp	r3, #0
 8014462:	d001      	beq.n	8014468 <GetElement+0x28>
    {
        return NULL;
 8014464:	2300      	movs	r3, #0
 8014466:	e017      	b.n	8014498 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014468:	2300      	movs	r3, #0
 801446a:	74fb      	strb	r3, [r7, #19]
 801446c:	e00d      	b.n	801448a <GetElement+0x4a>
    {
        if( element->Request == request )
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	7bfa      	ldrb	r2, [r7, #15]
 8014474:	429a      	cmp	r2, r3
 8014476:	d101      	bne.n	801447c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	e00d      	b.n	8014498 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801447c:	6978      	ldr	r0, [r7, #20]
 801447e:	f7ff ffa7 	bl	80143d0 <IncreaseBufferPointer>
 8014482:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014484:	7cfb      	ldrb	r3, [r7, #19]
 8014486:	3301      	adds	r3, #1
 8014488:	74fb      	strb	r3, [r7, #19]
 801448a:	4b05      	ldr	r3, [pc, #20]	; (80144a0 <GetElement+0x60>)
 801448c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014490:	7cfa      	ldrb	r2, [r7, #19]
 8014492:	429a      	cmp	r2, r3
 8014494:	d3eb      	bcc.n	801446e <GetElement+0x2e>
    }

    return NULL;
 8014496:	2300      	movs	r3, #0
}
 8014498:	4618      	mov	r0, r3
 801449a:	3718      	adds	r7, #24
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	20002190 	.word	0x20002190

080144a4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80144ac:	4a0c      	ldr	r2, [pc, #48]	; (80144e0 <LoRaMacConfirmQueueInit+0x3c>)
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80144b2:	4b0b      	ldr	r3, [pc, #44]	; (80144e0 <LoRaMacConfirmQueueInit+0x3c>)
 80144b4:	2200      	movs	r2, #0
 80144b6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80144ba:	4b09      	ldr	r3, [pc, #36]	; (80144e0 <LoRaMacConfirmQueueInit+0x3c>)
 80144bc:	4a09      	ldr	r2, [pc, #36]	; (80144e4 <LoRaMacConfirmQueueInit+0x40>)
 80144be:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80144c0:	4b07      	ldr	r3, [pc, #28]	; (80144e0 <LoRaMacConfirmQueueInit+0x3c>)
 80144c2:	4a08      	ldr	r2, [pc, #32]	; (80144e4 <LoRaMacConfirmQueueInit+0x40>)
 80144c4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80144c6:	2214      	movs	r2, #20
 80144c8:	21ff      	movs	r1, #255	; 0xff
 80144ca:	4806      	ldr	r0, [pc, #24]	; (80144e4 <LoRaMacConfirmQueueInit+0x40>)
 80144cc:	f003 fec6 	bl	801825c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80144d0:	4b03      	ldr	r3, [pc, #12]	; (80144e0 <LoRaMacConfirmQueueInit+0x3c>)
 80144d2:	2201      	movs	r2, #1
 80144d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80144d8:	bf00      	nop
 80144da:	3708      	adds	r7, #8
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	20002190 	.word	0x20002190
 80144e4:	2000219c 	.word	0x2000219c

080144e8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80144f0:	4b19      	ldr	r3, [pc, #100]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 80144f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7ff ff92 	bl	8014420 <IsListFull>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d001      	beq.n	8014506 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014502:	2300      	movs	r3, #0
 8014504:	e023      	b.n	801454e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014506:	4b14      	ldr	r3, [pc, #80]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 8014508:	689b      	ldr	r3, [r3, #8]
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	7812      	ldrb	r2, [r2, #0]
 801450e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014510:	4b11      	ldr	r3, [pc, #68]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 8014512:	689b      	ldr	r3, [r3, #8]
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	7852      	ldrb	r2, [r2, #1]
 8014518:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801451a:	4b0f      	ldr	r3, [pc, #60]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 801451c:	689b      	ldr	r3, [r3, #8]
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	78d2      	ldrb	r2, [r2, #3]
 8014522:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8014524:	4b0c      	ldr	r3, [pc, #48]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 8014526:	689b      	ldr	r3, [r3, #8]
 8014528:	2200      	movs	r2, #0
 801452a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801452c:	4b0a      	ldr	r3, [pc, #40]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 801452e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014532:	3301      	adds	r3, #1
 8014534:	b2da      	uxtb	r2, r3
 8014536:	4b08      	ldr	r3, [pc, #32]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 8014538:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801453c:	4b06      	ldr	r3, [pc, #24]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 801453e:	689b      	ldr	r3, [r3, #8]
 8014540:	4618      	mov	r0, r3
 8014542:	f7ff ff45 	bl	80143d0 <IncreaseBufferPointer>
 8014546:	4603      	mov	r3, r0
 8014548:	4a03      	ldr	r2, [pc, #12]	; (8014558 <LoRaMacConfirmQueueAdd+0x70>)
 801454a:	6093      	str	r3, [r2, #8]

    return true;
 801454c:	2301      	movs	r3, #1
}
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	20002190 	.word	0x20002190

0801455c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801455c:	b580      	push	{r7, lr}
 801455e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014560:	4b0e      	ldr	r3, [pc, #56]	; (801459c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014566:	4618      	mov	r0, r3
 8014568:	f7ff ff4a 	bl	8014400 <IsListEmpty>
 801456c:	4603      	mov	r3, r0
 801456e:	2b00      	cmp	r3, #0
 8014570:	d001      	beq.n	8014576 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014572:	2300      	movs	r3, #0
 8014574:	e010      	b.n	8014598 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014576:	4b09      	ldr	r3, [pc, #36]	; (801459c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014578:	f893 3020 	ldrb.w	r3, [r3, #32]
 801457c:	3b01      	subs	r3, #1
 801457e:	b2da      	uxtb	r2, r3
 8014580:	4b06      	ldr	r3, [pc, #24]	; (801459c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014582:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014586:	4b05      	ldr	r3, [pc, #20]	; (801459c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	4618      	mov	r0, r3
 801458c:	f7ff ff20 	bl	80143d0 <IncreaseBufferPointer>
 8014590:	4603      	mov	r3, r0
 8014592:	4a02      	ldr	r2, [pc, #8]	; (801459c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014594:	6053      	str	r3, [r2, #4]

    return true;
 8014596:	2301      	movs	r3, #1
}
 8014598:	4618      	mov	r0, r3
 801459a:	bd80      	pop	{r7, pc}
 801459c:	20002190 	.word	0x20002190

080145a0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b084      	sub	sp, #16
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	4603      	mov	r3, r0
 80145a8:	460a      	mov	r2, r1
 80145aa:	71fb      	strb	r3, [r7, #7]
 80145ac:	4613      	mov	r3, r2
 80145ae:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80145b0:	2300      	movs	r3, #0
 80145b2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80145b4:	4b10      	ldr	r3, [pc, #64]	; (80145f8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80145b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7ff ff20 	bl	8014400 <IsListEmpty>
 80145c0:	4603      	mov	r3, r0
 80145c2:	f083 0301 	eor.w	r3, r3, #1
 80145c6:	b2db      	uxtb	r3, r3
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d011      	beq.n	80145f0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80145cc:	4b0a      	ldr	r3, [pc, #40]	; (80145f8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80145ce:	6859      	ldr	r1, [r3, #4]
 80145d0:	4b09      	ldr	r3, [pc, #36]	; (80145f8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80145d2:	689a      	ldr	r2, [r3, #8]
 80145d4:	79bb      	ldrb	r3, [r7, #6]
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7ff ff32 	bl	8014440 <GetElement>
 80145dc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d005      	beq.n	80145f0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	79fa      	ldrb	r2, [r7, #7]
 80145e8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2201      	movs	r2, #1
 80145ee:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80145f0:	bf00      	nop
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	20002190 	.word	0x20002190

080145fc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	4603      	mov	r3, r0
 8014604:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014606:	2300      	movs	r3, #0
 8014608:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801460a:	4b10      	ldr	r3, [pc, #64]	; (801464c <LoRaMacConfirmQueueGetStatus+0x50>)
 801460c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014610:	4618      	mov	r0, r3
 8014612:	f7ff fef5 	bl	8014400 <IsListEmpty>
 8014616:	4603      	mov	r3, r0
 8014618:	f083 0301 	eor.w	r3, r3, #1
 801461c:	b2db      	uxtb	r3, r3
 801461e:	2b00      	cmp	r3, #0
 8014620:	d00e      	beq.n	8014640 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014622:	4b0a      	ldr	r3, [pc, #40]	; (801464c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014624:	6859      	ldr	r1, [r3, #4]
 8014626:	4b09      	ldr	r3, [pc, #36]	; (801464c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014628:	689a      	ldr	r2, [r3, #8]
 801462a:	79fb      	ldrb	r3, [r7, #7]
 801462c:	4618      	mov	r0, r3
 801462e:	f7ff ff07 	bl	8014440 <GetElement>
 8014632:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d002      	beq.n	8014640 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	785b      	ldrb	r3, [r3, #1]
 801463e:	e000      	b.n	8014642 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014640:	2301      	movs	r3, #1
}
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	20002190 	.word	0x20002190

08014650 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	4603      	mov	r3, r0
 8014658:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801465a:	4b16      	ldr	r3, [pc, #88]	; (80146b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014660:	4a14      	ldr	r2, [pc, #80]	; (80146b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014662:	79fb      	ldrb	r3, [r7, #7]
 8014664:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014668:	4b12      	ldr	r3, [pc, #72]	; (80146b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801466a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801466e:	4618      	mov	r0, r3
 8014670:	f7ff fec6 	bl	8014400 <IsListEmpty>
 8014674:	4603      	mov	r3, r0
 8014676:	f083 0301 	eor.w	r3, r3, #1
 801467a:	b2db      	uxtb	r3, r3
 801467c:	2b00      	cmp	r3, #0
 801467e:	d015      	beq.n	80146ac <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	79fa      	ldrb	r2, [r7, #7]
 8014684:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	78db      	ldrb	r3, [r3, #3]
 801468a:	f083 0301 	eor.w	r3, r3, #1
 801468e:	b2db      	uxtb	r3, r3
 8014690:	2b00      	cmp	r3, #0
 8014692:	d002      	beq.n	801469a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2201      	movs	r2, #1
 8014698:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801469a:	68f8      	ldr	r0, [r7, #12]
 801469c:	f7ff fe98 	bl	80143d0 <IncreaseBufferPointer>
 80146a0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80146a2:	4b04      	ldr	r3, [pc, #16]	; (80146b4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80146a4:	689b      	ldr	r3, [r3, #8]
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d1e9      	bne.n	8014680 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80146ac:	bf00      	nop
 80146ae:	3710      	adds	r7, #16
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	20002190 	.word	0x20002190

080146b8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b082      	sub	sp, #8
 80146bc:	af00      	add	r7, sp, #0
 80146be:	4603      	mov	r3, r0
 80146c0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80146c2:	4b09      	ldr	r3, [pc, #36]	; (80146e8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80146c4:	6859      	ldr	r1, [r3, #4]
 80146c6:	4b08      	ldr	r3, [pc, #32]	; (80146e8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80146c8:	689a      	ldr	r2, [r3, #8]
 80146ca:	79fb      	ldrb	r3, [r7, #7]
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7ff feb7 	bl	8014440 <GetElement>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d001      	beq.n	80146dc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80146d8:	2301      	movs	r3, #1
 80146da:	e000      	b.n	80146de <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80146dc:	2300      	movs	r3, #0
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	20002190 	.word	0x20002190

080146ec <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80146f4:	4b22      	ldr	r3, [pc, #136]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 80146f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80146fa:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80146fc:	2300      	movs	r3, #0
 80146fe:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014700:	2300      	movs	r3, #0
 8014702:	73fb      	strb	r3, [r7, #15]
 8014704:	e032      	b.n	801476c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014706:	4b1e      	ldr	r3, [pc, #120]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	781a      	ldrb	r2, [r3, #0]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014710:	4b1b      	ldr	r3, [pc, #108]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	785a      	ldrb	r2, [r3, #1]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801471a:	4b19      	ldr	r3, [pc, #100]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	789b      	ldrb	r3, [r3, #2]
 8014720:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014722:	7b7b      	ldrb	r3, [r7, #13]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d005      	beq.n	8014734 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014728:	4b15      	ldr	r3, [pc, #84]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	689b      	ldr	r3, [r3, #8]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	4798      	blx	r3
 8014732:	e00b      	b.n	801474c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014734:	4b12      	ldr	r3, [pc, #72]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014736:	685b      	ldr	r3, [r3, #4]
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801473c:	4b10      	ldr	r3, [pc, #64]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	785b      	ldrb	r3, [r3, #1]
 8014742:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014744:	4b0e      	ldr	r3, [pc, #56]	; (8014780 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	78db      	ldrb	r3, [r3, #3]
 801474a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801474c:	f7ff ff06 	bl	801455c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014750:	7b7b      	ldrb	r3, [r7, #13]
 8014752:	f083 0301 	eor.w	r3, r3, #1
 8014756:	b2db      	uxtb	r3, r3
 8014758:	2b00      	cmp	r3, #0
 801475a:	d004      	beq.n	8014766 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801475c:	f107 0308 	add.w	r3, r7, #8
 8014760:	4618      	mov	r0, r3
 8014762:	f7ff fec1 	bl	80144e8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014766:	7bfb      	ldrb	r3, [r7, #15]
 8014768:	3301      	adds	r3, #1
 801476a:	73fb      	strb	r3, [r7, #15]
 801476c:	7bfa      	ldrb	r2, [r7, #15]
 801476e:	7bbb      	ldrb	r3, [r7, #14]
 8014770:	429a      	cmp	r2, r3
 8014772:	d3c8      	bcc.n	8014706 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8014774:	bf00      	nop
 8014776:	bf00      	nop
 8014778:	3710      	adds	r7, #16
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	20002190 	.word	0x20002190

08014784 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014784:	b480      	push	{r7}
 8014786:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014788:	4b03      	ldr	r3, [pc, #12]	; (8014798 <LoRaMacConfirmQueueGetCnt+0x14>)
 801478a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801478e:	4618      	mov	r0, r3
 8014790:	46bd      	mov	sp, r7
 8014792:	bc80      	pop	{r7}
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	20002190 	.word	0x20002190

0801479c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801479c:	b580      	push	{r7, lr}
 801479e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80147a0:	4b06      	ldr	r3, [pc, #24]	; (80147bc <LoRaMacConfirmQueueIsFull+0x20>)
 80147a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7ff fe3a 	bl	8014420 <IsListFull>
 80147ac:	4603      	mov	r3, r0
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d001      	beq.n	80147b6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80147b2:	2301      	movs	r3, #1
 80147b4:	e000      	b.n	80147b8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80147b6:	2300      	movs	r3, #0
    }
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	20002190 	.word	0x20002190

080147c0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b08e      	sub	sp, #56	; 0x38
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	607b      	str	r3, [r7, #4]
 80147ca:	460b      	mov	r3, r1
 80147cc:	817b      	strh	r3, [r7, #10]
 80147ce:	4613      	mov	r3, r2
 80147d0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d101      	bne.n	80147dc <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147d8:	230a      	movs	r3, #10
 80147da:	e086      	b.n	80148ea <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80147dc:	2300      	movs	r3, #0
 80147de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80147e2:	2301      	movs	r3, #1
 80147e4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80147e6:	2300      	movs	r3, #0
 80147e8:	623b      	str	r3, [r7, #32]
 80147ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147ee:	2200      	movs	r2, #0
 80147f0:	601a      	str	r2, [r3, #0]
 80147f2:	605a      	str	r2, [r3, #4]
 80147f4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80147f6:	2300      	movs	r3, #0
 80147f8:	613b      	str	r3, [r7, #16]
 80147fa:	f107 0314 	add.w	r3, r7, #20
 80147fe:	2200      	movs	r2, #0
 8014800:	601a      	str	r2, [r3, #0]
 8014802:	605a      	str	r2, [r3, #4]
 8014804:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8014806:	2301      	movs	r3, #1
 8014808:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801480a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801480e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	b2db      	uxtb	r3, r3
 8014814:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	0a1b      	lsrs	r3, r3, #8
 801481a:	b2db      	uxtb	r3, r3
 801481c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	0c1b      	lsrs	r3, r3, #16
 8014822:	b2db      	uxtb	r3, r3
 8014824:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	0e1b      	lsrs	r3, r3, #24
 801482a:	b2db      	uxtb	r3, r3
 801482c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801482e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014830:	b2db      	uxtb	r3, r3
 8014832:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014836:	0a1b      	lsrs	r3, r3, #8
 8014838:	b2db      	uxtb	r3, r3
 801483a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801483c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801483e:	0c1b      	lsrs	r3, r3, #16
 8014840:	b2db      	uxtb	r3, r3
 8014842:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014846:	0e1b      	lsrs	r3, r3, #24
 8014848:	b2db      	uxtb	r3, r3
 801484a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801484c:	e048      	b.n	80148e0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801484e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014850:	b2db      	uxtb	r3, r3
 8014852:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014854:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014856:	3301      	adds	r3, #1
 8014858:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801485a:	f107 0320 	add.w	r3, r7, #32
 801485e:	7a7a      	ldrb	r2, [r7, #9]
 8014860:	f107 0010 	add.w	r0, r7, #16
 8014864:	2110      	movs	r1, #16
 8014866:	f7f9 f842 	bl	800d8ee <SecureElementAesEncrypt>
 801486a:	4603      	mov	r3, r0
 801486c:	2b00      	cmp	r3, #0
 801486e:	d001      	beq.n	8014874 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014870:	230f      	movs	r3, #15
 8014872:	e03a      	b.n	80148ea <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014874:	2300      	movs	r3, #0
 8014876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801487a:	e01e      	b.n	80148ba <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801487c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014884:	4413      	add	r3, r2
 8014886:	461a      	mov	r2, r3
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	4413      	add	r3, r2
 801488c:	7819      	ldrb	r1, [r3, #0]
 801488e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014892:	3338      	adds	r3, #56	; 0x38
 8014894:	443b      	add	r3, r7
 8014896:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801489a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801489e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148a2:	4403      	add	r3, r0
 80148a4:	4618      	mov	r0, r3
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	4403      	add	r3, r0
 80148aa:	404a      	eors	r2, r1
 80148ac:	b2d2      	uxtb	r2, r2
 80148ae:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80148b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148b4:	3301      	adds	r3, #1
 80148b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80148ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80148c2:	2a10      	cmp	r2, #16
 80148c4:	bfa8      	it	ge
 80148c6:	2210      	movge	r2, #16
 80148c8:	b212      	sxth	r2, r2
 80148ca:	4293      	cmp	r3, r2
 80148cc:	dbd6      	blt.n	801487c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80148ce:	897b      	ldrh	r3, [r7, #10]
 80148d0:	3b10      	subs	r3, #16
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80148d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80148da:	3310      	adds	r3, #16
 80148dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80148e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	dcb2      	bgt.n	801484e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80148e8:	2300      	movs	r3, #0
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3738      	adds	r7, #56	; 0x38
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80148f2:	b490      	push	{r4, r7}
 80148f4:	b082      	sub	sp, #8
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	4604      	mov	r4, r0
 80148fa:	4608      	mov	r0, r1
 80148fc:	4611      	mov	r1, r2
 80148fe:	461a      	mov	r2, r3
 8014900:	4623      	mov	r3, r4
 8014902:	80fb      	strh	r3, [r7, #6]
 8014904:	4603      	mov	r3, r0
 8014906:	717b      	strb	r3, [r7, #5]
 8014908:	460b      	mov	r3, r1
 801490a:	713b      	strb	r3, [r7, #4]
 801490c:	4613      	mov	r3, r2
 801490e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014910:	69bb      	ldr	r3, [r7, #24]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d101      	bne.n	801491a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014916:	230a      	movs	r3, #10
 8014918:	e04e      	b.n	80149b8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801491a:	69bb      	ldr	r3, [r7, #24]
 801491c:	2249      	movs	r2, #73	; 0x49
 801491e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	3301      	adds	r3, #1
 8014924:	2200      	movs	r2, #0
 8014926:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	3302      	adds	r3, #2
 801492c:	2200      	movs	r2, #0
 801492e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	3303      	adds	r3, #3
 8014934:	2200      	movs	r2, #0
 8014936:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	3304      	adds	r3, #4
 801493c:	2200      	movs	r2, #0
 801493e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014940:	69bb      	ldr	r3, [r7, #24]
 8014942:	3305      	adds	r3, #5
 8014944:	78fa      	ldrb	r2, [r7, #3]
 8014946:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014948:	69bb      	ldr	r3, [r7, #24]
 801494a:	3306      	adds	r3, #6
 801494c:	693a      	ldr	r2, [r7, #16]
 801494e:	b2d2      	uxtb	r2, r2
 8014950:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	0a1a      	lsrs	r2, r3, #8
 8014956:	69bb      	ldr	r3, [r7, #24]
 8014958:	3307      	adds	r3, #7
 801495a:	b2d2      	uxtb	r2, r2
 801495c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	0c1a      	lsrs	r2, r3, #16
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	3308      	adds	r3, #8
 8014966:	b2d2      	uxtb	r2, r2
 8014968:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	0e1a      	lsrs	r2, r3, #24
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	3309      	adds	r3, #9
 8014972:	b2d2      	uxtb	r2, r2
 8014974:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	330a      	adds	r3, #10
 801497a:	697a      	ldr	r2, [r7, #20]
 801497c:	b2d2      	uxtb	r2, r2
 801497e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	0a1a      	lsrs	r2, r3, #8
 8014984:	69bb      	ldr	r3, [r7, #24]
 8014986:	330b      	adds	r3, #11
 8014988:	b2d2      	uxtb	r2, r2
 801498a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	0c1a      	lsrs	r2, r3, #16
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	330c      	adds	r3, #12
 8014994:	b2d2      	uxtb	r2, r2
 8014996:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	0e1a      	lsrs	r2, r3, #24
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	330d      	adds	r3, #13
 80149a0:	b2d2      	uxtb	r2, r2
 80149a2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80149a4:	69bb      	ldr	r3, [r7, #24]
 80149a6:	330e      	adds	r3, #14
 80149a8:	2200      	movs	r2, #0
 80149aa:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80149ac:	69bb      	ldr	r3, [r7, #24]
 80149ae:	330f      	adds	r3, #15
 80149b0:	88fa      	ldrh	r2, [r7, #6]
 80149b2:	b2d2      	uxtb	r2, r2
 80149b4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bc90      	pop	{r4, r7}
 80149c0:	4770      	bx	lr

080149c2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80149c2:	b590      	push	{r4, r7, lr}
 80149c4:	b08b      	sub	sp, #44	; 0x2c
 80149c6:	af04      	add	r7, sp, #16
 80149c8:	6078      	str	r0, [r7, #4]
 80149ca:	4608      	mov	r0, r1
 80149cc:	4611      	mov	r1, r2
 80149ce:	461a      	mov	r2, r3
 80149d0:	4603      	mov	r3, r0
 80149d2:	807b      	strh	r3, [r7, #2]
 80149d4:	460b      	mov	r3, r1
 80149d6:	707b      	strb	r3, [r7, #1]
 80149d8:	4613      	mov	r3, r2
 80149da:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d002      	beq.n	80149e8 <ComputeCmacB0+0x26>
 80149e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d101      	bne.n	80149ec <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80149e8:	230a      	movs	r3, #10
 80149ea:	e024      	b.n	8014a36 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80149ec:	887b      	ldrh	r3, [r7, #2]
 80149ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149f2:	d901      	bls.n	80149f8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80149f4:	230e      	movs	r3, #14
 80149f6:	e01e      	b.n	8014a36 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80149f8:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80149fc:	783a      	ldrb	r2, [r7, #0]
 80149fe:	7879      	ldrb	r1, [r7, #1]
 8014a00:	8878      	ldrh	r0, [r7, #2]
 8014a02:	f107 0308 	add.w	r3, r7, #8
 8014a06:	9302      	str	r3, [sp, #8]
 8014a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0a:	9301      	str	r3, [sp, #4]
 8014a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0e:	9300      	str	r3, [sp, #0]
 8014a10:	4623      	mov	r3, r4
 8014a12:	f7ff ff6e 	bl	80148f2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014a16:	7879      	ldrb	r1, [r7, #1]
 8014a18:	887a      	ldrh	r2, [r7, #2]
 8014a1a:	f107 0008 	add.w	r0, r7, #8
 8014a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a20:	9300      	str	r3, [sp, #0]
 8014a22:	460b      	mov	r3, r1
 8014a24:	6879      	ldr	r1, [r7, #4]
 8014a26:	f7f8 ff15 	bl	800d854 <SecureElementComputeAesCmac>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d001      	beq.n	8014a34 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a30:	230f      	movs	r3, #15
 8014a32:	e000      	b.n	8014a36 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014a34:	2300      	movs	r3, #0
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	371c      	adds	r7, #28
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd90      	pop	{r4, r7, pc}

08014a3e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014a3e:	b590      	push	{r4, r7, lr}
 8014a40:	b0cd      	sub	sp, #308	; 0x134
 8014a42:	af04      	add	r7, sp, #16
 8014a44:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014a48:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8014a4c:	6020      	str	r0, [r4, #0]
 8014a4e:	460c      	mov	r4, r1
 8014a50:	4610      	mov	r0, r2
 8014a52:	4619      	mov	r1, r3
 8014a54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a58:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014a5c:	4622      	mov	r2, r4
 8014a5e:	801a      	strh	r2, [r3, #0]
 8014a60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a64:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014a68:	4602      	mov	r2, r0
 8014a6a:	701a      	strb	r2, [r3, #0]
 8014a6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a70:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014a74:	460a      	mov	r2, r1
 8014a76:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014a78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d101      	bne.n	8014a8a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a86:	230a      	movs	r3, #10
 8014a88:	e063      	b.n	8014b52 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014a8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014a8e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014a92:	881b      	ldrh	r3, [r3, #0]
 8014a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a98:	d901      	bls.n	8014a9e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014a9a:	230e      	movs	r3, #14
 8014a9c:	e059      	b.n	8014b52 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014a9e:	f107 030c 	add.w	r3, r7, #12
 8014aa2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f003 fbd7 	bl	801825c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014aae:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8014ab2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ab6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014aba:	781a      	ldrb	r2, [r3, #0]
 8014abc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014ac0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014ac4:	7819      	ldrb	r1, [r3, #0]
 8014ac6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014aca:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014ace:	8818      	ldrh	r0, [r3, #0]
 8014ad0:	f107 030c 	add.w	r3, r7, #12
 8014ad4:	9302      	str	r3, [sp, #8]
 8014ad6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014ada:	9301      	str	r3, [sp, #4]
 8014adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014ae0:	9300      	str	r3, [sp, #0]
 8014ae2:	4623      	mov	r3, r4
 8014ae4:	f7ff ff05 	bl	80148f2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014ae8:	f107 030c 	add.w	r3, r7, #12
 8014aec:	3310      	adds	r3, #16
 8014aee:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014af2:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8014af6:	8812      	ldrh	r2, [r2, #0]
 8014af8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8014afc:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014b00:	6809      	ldr	r1, [r1, #0]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f003 fb6f 	bl	80181e6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014b08:	2306      	movs	r3, #6
 8014b0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014b0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014b12:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014b16:	881b      	ldrh	r3, [r3, #0]
 8014b18:	3310      	adds	r3, #16
 8014b1a:	b299      	uxth	r1, r3
 8014b1c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014b20:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	f107 000c 	add.w	r0, r7, #12
 8014b2a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014b2e:	f7f8 feaf 	bl	800d890 <SecureElementVerifyAesCmac>
 8014b32:	4603      	mov	r3, r0
 8014b34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014b38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d101      	bne.n	8014b44 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014b40:	2300      	movs	r3, #0
 8014b42:	e006      	b.n	8014b52 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	d101      	bne.n	8014b50 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	e000      	b.n	8014b52 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014b50:	230f      	movs	r3, #15
}
 8014b52:	4618      	mov	r0, r3
 8014b54:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd90      	pop	{r4, r7, pc}

08014b5c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014b5c:	b480      	push	{r7}
 8014b5e:	b085      	sub	sp, #20
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	4603      	mov	r3, r0
 8014b64:	6039      	str	r1, [r7, #0]
 8014b66:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014b68:	2300      	movs	r3, #0
 8014b6a:	73fb      	strb	r3, [r7, #15]
 8014b6c:	e011      	b.n	8014b92 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014b6e:	7bfb      	ldrb	r3, [r7, #15]
 8014b70:	4a0c      	ldr	r2, [pc, #48]	; (8014ba4 <GetKeyAddrItem+0x48>)
 8014b72:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014b76:	79fa      	ldrb	r2, [r7, #7]
 8014b78:	429a      	cmp	r2, r3
 8014b7a:	d107      	bne.n	8014b8c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014b7c:	7bfb      	ldrb	r3, [r7, #15]
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	4a08      	ldr	r2, [pc, #32]	; (8014ba4 <GetKeyAddrItem+0x48>)
 8014b82:	441a      	add	r2, r3
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	e006      	b.n	8014b9a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014b8c:	7bfb      	ldrb	r3, [r7, #15]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	73fb      	strb	r3, [r7, #15]
 8014b92:	7bfb      	ldrb	r3, [r7, #15]
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	d9ea      	bls.n	8014b6e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014b98:	230c      	movs	r3, #12
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3714      	adds	r7, #20
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bc80      	pop	{r7}
 8014ba2:	4770      	bx	lr
 8014ba4:	2000011c 	.word	0x2000011c

08014ba8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b088      	sub	sp, #32
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	60b9      	str	r1, [r7, #8]
 8014bb0:	607a      	str	r2, [r7, #4]
 8014bb2:	461a      	mov	r2, r3
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	73fb      	strb	r3, [r7, #15]
 8014bb8:	4613      	mov	r3, r2
 8014bba:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	613b      	str	r3, [r7, #16]
 8014bc0:	f107 0314 	add.w	r3, r7, #20
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	601a      	str	r2, [r3, #0]
 8014bc8:	605a      	str	r2, [r3, #4]
 8014bca:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8014bcc:	7bfb      	ldrb	r3, [r7, #15]
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	d002      	beq.n	8014bd8 <DeriveSessionKey10x+0x30>
 8014bd2:	2b03      	cmp	r3, #3
 8014bd4:	d003      	beq.n	8014bde <DeriveSessionKey10x+0x36>
 8014bd6:	e005      	b.n	8014be4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8014bd8:	2301      	movs	r3, #1
 8014bda:	743b      	strb	r3, [r7, #16]
            break;
 8014bdc:	e004      	b.n	8014be8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014bde:	2302      	movs	r3, #2
 8014be0:	743b      	strb	r3, [r7, #16]
            break;
 8014be2:	e001      	b.n	8014be8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014be4:	230b      	movs	r3, #11
 8014be6:	e02a      	b.n	8014c3e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	0a1b      	lsrs	r3, r3, #8
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	0c1b      	lsrs	r3, r3, #16
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	0a1b      	lsrs	r3, r3, #8
 8014c08:	b2db      	uxtb	r3, r3
 8014c0a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	0c1b      	lsrs	r3, r3, #16
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014c14:	89bb      	ldrh	r3, [r7, #12]
 8014c16:	b2db      	uxtb	r3, r3
 8014c18:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014c1a:	89bb      	ldrh	r3, [r7, #12]
 8014c1c:	0a1b      	lsrs	r3, r3, #8
 8014c1e:	b29b      	uxth	r3, r3
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014c24:	7bfa      	ldrb	r2, [r7, #15]
 8014c26:	f107 0310 	add.w	r3, r7, #16
 8014c2a:	2101      	movs	r1, #1
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7f8 fec5 	bl	800d9bc <SecureElementDeriveAndStoreKey>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d001      	beq.n	8014c3c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c38:	230f      	movs	r3, #15
 8014c3a:	e000      	b.n	8014c3e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014c3c:	2300      	movs	r3, #0
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3720      	adds	r7, #32
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
	...

08014c48 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	4603      	mov	r3, r0
 8014c50:	6039      	str	r1, [r7, #0]
 8014c52:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d101      	bne.n	8014c5e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c5a:	230a      	movs	r3, #10
 8014c5c:	e03b      	b.n	8014cd6 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014c5e:	79fb      	ldrb	r3, [r7, #7]
 8014c60:	3b01      	subs	r3, #1
 8014c62:	2b03      	cmp	r3, #3
 8014c64:	d834      	bhi.n	8014cd0 <GetLastFcntDown+0x88>
 8014c66:	a201      	add	r2, pc, #4	; (adr r2, 8014c6c <GetLastFcntDown+0x24>)
 8014c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c6c:	08014c7d 	.word	0x08014c7d
 8014c70:	08014c95 	.word	0x08014c95
 8014c74:	08014cad 	.word	0x08014cad
 8014c78:	08014cc5 	.word	0x08014cc5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014c7c:	4b18      	ldr	r3, [pc, #96]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	691a      	ldr	r2, [r3, #16]
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8014c86:	4b16      	ldr	r3, [pc, #88]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	4b15      	ldr	r3, [pc, #84]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	6912      	ldr	r2, [r2, #16]
 8014c90:	621a      	str	r2, [r3, #32]
            break;
 8014c92:	e01f      	b.n	8014cd4 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014c94:	4b12      	ldr	r3, [pc, #72]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	695a      	ldr	r2, [r3, #20]
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8014c9e:	4b10      	ldr	r3, [pc, #64]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	4b0f      	ldr	r3, [pc, #60]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	6952      	ldr	r2, [r2, #20]
 8014ca8:	621a      	str	r2, [r3, #32]
            break;
 8014caa:	e013      	b.n	8014cd4 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014cac:	4b0c      	ldr	r3, [pc, #48]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	699a      	ldr	r2, [r3, #24]
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014cb6:	4b0a      	ldr	r3, [pc, #40]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	4b09      	ldr	r3, [pc, #36]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	6992      	ldr	r2, [r2, #24]
 8014cc0:	621a      	str	r2, [r3, #32]
            break;
 8014cc2:	e007      	b.n	8014cd4 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014cc4:	4b06      	ldr	r3, [pc, #24]	; (8014ce0 <GetLastFcntDown+0x98>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	69da      	ldr	r2, [r3, #28]
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	601a      	str	r2, [r3, #0]
            break;
 8014cce:	e001      	b.n	8014cd4 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014cd0:	2305      	movs	r3, #5
 8014cd2:	e000      	b.n	8014cd6 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014cd4:	2300      	movs	r3, #0
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	370c      	adds	r7, #12
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bc80      	pop	{r7}
 8014cde:	4770      	bx	lr
 8014ce0:	200021b4 	.word	0x200021b4

08014ce4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	4603      	mov	r3, r0
 8014cec:	6039      	str	r1, [r7, #0]
 8014cee:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014cf4:	f107 020c 	add.w	r2, r7, #12
 8014cf8:	79fb      	ldrb	r3, [r7, #7]
 8014cfa:	4611      	mov	r1, r2
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7ff ffa3 	bl	8014c48 <GetLastFcntDown>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d001      	beq.n	8014d0c <CheckFCntDown+0x28>
    {
        return false;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	e00a      	b.n	8014d22 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	683a      	ldr	r2, [r7, #0]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d803      	bhi.n	8014d1c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014d14:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d1a:	d101      	bne.n	8014d20 <CheckFCntDown+0x3c>
    {
        return true;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	e000      	b.n	8014d22 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014d20:	2300      	movs	r3, #0
    }
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
	...

08014d2c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	4603      	mov	r3, r0
 8014d34:	6039      	str	r1, [r7, #0]
 8014d36:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014d38:	79fb      	ldrb	r3, [r7, #7]
 8014d3a:	3b01      	subs	r3, #1
 8014d3c:	2b03      	cmp	r3, #3
 8014d3e:	d81f      	bhi.n	8014d80 <UpdateFCntDown+0x54>
 8014d40:	a201      	add	r2, pc, #4	; (adr r2, 8014d48 <UpdateFCntDown+0x1c>)
 8014d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d46:	bf00      	nop
 8014d48:	08014d59 	.word	0x08014d59
 8014d4c:	08014d63 	.word	0x08014d63
 8014d50:	08014d6d 	.word	0x08014d6d
 8014d54:	08014d77 	.word	0x08014d77
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014d58:	4b0c      	ldr	r3, [pc, #48]	; (8014d8c <UpdateFCntDown+0x60>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	683a      	ldr	r2, [r7, #0]
 8014d5e:	611a      	str	r2, [r3, #16]
            break;
 8014d60:	e00f      	b.n	8014d82 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014d62:	4b0a      	ldr	r3, [pc, #40]	; (8014d8c <UpdateFCntDown+0x60>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	683a      	ldr	r2, [r7, #0]
 8014d68:	615a      	str	r2, [r3, #20]
            break;
 8014d6a:	e00a      	b.n	8014d82 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014d6c:	4b07      	ldr	r3, [pc, #28]	; (8014d8c <UpdateFCntDown+0x60>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	683a      	ldr	r2, [r7, #0]
 8014d72:	619a      	str	r2, [r3, #24]
            break;
 8014d74:	e005      	b.n	8014d82 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014d76:	4b05      	ldr	r3, [pc, #20]	; (8014d8c <UpdateFCntDown+0x60>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	683a      	ldr	r2, [r7, #0]
 8014d7c:	61da      	str	r2, [r3, #28]
            break;
 8014d7e:	e000      	b.n	8014d82 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014d80:	bf00      	nop
    }
}
 8014d82:	bf00      	nop
 8014d84:	370c      	adds	r7, #12
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bc80      	pop	{r7}
 8014d8a:	4770      	bx	lr
 8014d8c:	200021b4 	.word	0x200021b4

08014d90 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014d90:	b480      	push	{r7}
 8014d92:	b083      	sub	sp, #12
 8014d94:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8014d96:	4b18      	ldr	r3, [pc, #96]	; (8014df8 <ResetFCnts+0x68>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014d9e:	4b16      	ldr	r3, [pc, #88]	; (8014df8 <ResetFCnts+0x68>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	f04f 32ff 	mov.w	r2, #4294967295
 8014da6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014da8:	4b13      	ldr	r3, [pc, #76]	; (8014df8 <ResetFCnts+0x68>)
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	f04f 32ff 	mov.w	r2, #4294967295
 8014db0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014db2:	4b11      	ldr	r3, [pc, #68]	; (8014df8 <ResetFCnts+0x68>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f04f 32ff 	mov.w	r2, #4294967295
 8014dba:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014dbc:	4b0e      	ldr	r3, [pc, #56]	; (8014df8 <ResetFCnts+0x68>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	4b0d      	ldr	r3, [pc, #52]	; (8014df8 <ResetFCnts+0x68>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	6992      	ldr	r2, [r2, #24]
 8014dc6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014dc8:	2300      	movs	r3, #0
 8014dca:	607b      	str	r3, [r7, #4]
 8014dcc:	e00b      	b.n	8014de6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8014dce:	4b0a      	ldr	r3, [pc, #40]	; (8014df8 <ResetFCnts+0x68>)
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	3306      	adds	r3, #6
 8014dd6:	009b      	lsls	r3, r3, #2
 8014dd8:	4413      	add	r3, r2
 8014dda:	f04f 32ff 	mov.w	r2, #4294967295
 8014dde:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	3301      	adds	r3, #1
 8014de4:	607b      	str	r3, [r7, #4]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	ddf0      	ble.n	8014dce <ResetFCnts+0x3e>
    }
}
 8014dec:	bf00      	nop
 8014dee:	bf00      	nop
 8014df0:	370c      	adds	r7, #12
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bc80      	pop	{r7}
 8014df6:	4770      	bx	lr
 8014df8:	200021b4 	.word	0x200021b4

08014dfc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d101      	bne.n	8014e0e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014e0a:	2309      	movs	r3, #9
 8014e0c:	e01c      	b.n	8014e48 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014e0e:	4a10      	ldr	r2, [pc, #64]	; (8014e50 <LoRaMacCryptoInit+0x54>)
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014e14:	4b0e      	ldr	r3, [pc, #56]	; (8014e50 <LoRaMacCryptoInit+0x54>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	2228      	movs	r2, #40	; 0x28
 8014e1a:	2100      	movs	r1, #0
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f003 fa1d 	bl	801825c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014e22:	4b0b      	ldr	r3, [pc, #44]	; (8014e50 <LoRaMacCryptoInit+0x54>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	2201      	movs	r2, #1
 8014e28:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014e2a:	4b09      	ldr	r3, [pc, #36]	; (8014e50 <LoRaMacCryptoInit+0x54>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	2201      	movs	r2, #1
 8014e30:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014e32:	4b07      	ldr	r3, [pc, #28]	; (8014e50 <LoRaMacCryptoInit+0x54>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2201      	movs	r2, #1
 8014e38:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014e3a:	4b05      	ldr	r3, [pc, #20]	; (8014e50 <LoRaMacCryptoInit+0x54>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014e42:	f7ff ffa5 	bl	8014d90 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014e46:	2300      	movs	r3, #0
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	200021b4 	.word	0x200021b4

08014e54 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014e54:	b480      	push	{r7}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014e5c:	4b04      	ldr	r3, [pc, #16]	; (8014e70 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	370c      	adds	r7, #12
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bc80      	pop	{r7}
 8014e6e:	4770      	bx	lr
 8014e70:	200021b4 	.word	0x200021b4

08014e74 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014e74:	b480      	push	{r7}
 8014e76:	b083      	sub	sp, #12
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d101      	bne.n	8014e86 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e82:	230a      	movs	r3, #10
 8014e84:	e006      	b.n	8014e94 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014e86:	4b06      	ldr	r3, [pc, #24]	; (8014ea0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	68db      	ldr	r3, [r3, #12]
 8014e8c:	1c5a      	adds	r2, r3, #1
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014e92:	2300      	movs	r3, #0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	370c      	adds	r7, #12
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bc80      	pop	{r7}
 8014e9c:	4770      	bx	lr
 8014e9e:	bf00      	nop
 8014ea0:	200021b4 	.word	0x200021b4

08014ea4 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014ea8:	b08a      	sub	sp, #40	; 0x28
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	613a      	str	r2, [r7, #16]
 8014eae:	60fb      	str	r3, [r7, #12]
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	75fb      	strb	r3, [r7, #23]
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014ec0:	2313      	movs	r3, #19
 8014ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d101      	bne.n	8014ed0 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ecc:	230a      	movs	r3, #10
 8014ece:	e057      	b.n	8014f80 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014ed0:	f107 021c 	add.w	r2, r7, #28
 8014ed4:	7dfb      	ldrb	r3, [r7, #23]
 8014ed6:	4611      	mov	r1, r2
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7ff feb5 	bl	8014c48 <GetLastFcntDown>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d002      	beq.n	8014ef2 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8014eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ef0:	e046      	b.n	8014f80 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8014ef2:	69fb      	ldr	r3, [r7, #28]
 8014ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ef8:	d103      	bne.n	8014f02 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	693a      	ldr	r2, [r7, #16]
 8014efe:	601a      	str	r2, [r3, #0]
 8014f00:	e01e      	b.n	8014f40 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	b29b      	uxth	r3, r3
 8014f06:	693a      	ldr	r2, [r7, #16]
 8014f08:	1ad3      	subs	r3, r2, r3
 8014f0a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8014f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	dd05      	ble.n	8014f1e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014f12:	69fa      	ldr	r2, [r7, #28]
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	441a      	add	r2, r3
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	601a      	str	r2, [r3, #0]
 8014f1c:	e010      	b.n	8014f40 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8014f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d104      	bne.n	8014f2e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014f24:	69fa      	ldr	r2, [r7, #28]
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014f2a:	2307      	movs	r3, #7
 8014f2c:	e028      	b.n	8014f80 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014f2e:	69fb      	ldr	r3, [r7, #28]
 8014f30:	0c1b      	lsrs	r3, r3, #16
 8014f32:	041b      	lsls	r3, r3, #16
 8014f34:	693a      	ldr	r2, [r7, #16]
 8014f36:	4413      	add	r3, r2
 8014f38:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014f40:	4b12      	ldr	r3, [pc, #72]	; (8014f8c <LoRaMacCryptoGetFCntDown+0xe8>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	789b      	ldrb	r3, [r3, #2]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d119      	bne.n	8014f7e <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	603b      	str	r3, [r7, #0]
 8014f52:	607a      	str	r2, [r7, #4]
 8014f54:	69fb      	ldr	r3, [r7, #28]
 8014f56:	2200      	movs	r2, #0
 8014f58:	469a      	mov	sl, r3
 8014f5a:	4693      	mov	fp, r2
 8014f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f60:	4611      	mov	r1, r2
 8014f62:	ebb1 040a 	subs.w	r4, r1, sl
 8014f66:	eb63 050b 	sbc.w	r5, r3, fp
 8014f6a:	8abb      	ldrh	r3, [r7, #20]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	4698      	mov	r8, r3
 8014f70:	4691      	mov	r9, r2
 8014f72:	4544      	cmp	r4, r8
 8014f74:	eb75 0309 	sbcs.w	r3, r5, r9
 8014f78:	db01      	blt.n	8014f7e <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8014f7a:	2308      	movs	r3, #8
 8014f7c:	e000      	b.n	8014f80 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014f7e:	2300      	movs	r3, #0
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	3728      	adds	r7, #40	; 0x28
 8014f84:	46bd      	mov	sp, r7
 8014f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014f8a:	bf00      	nop
 8014f8c:	200021b4 	.word	0x200021b4

08014f90 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014f90:	b480      	push	{r7}
 8014f92:	b085      	sub	sp, #20
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d101      	bne.n	8014fa2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f9e:	230a      	movs	r3, #10
 8014fa0:	e017      	b.n	8014fd2 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	60fb      	str	r3, [r7, #12]
 8014fa6:	e010      	b.n	8014fca <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014fa8:	4b0c      	ldr	r3, [pc, #48]	; (8014fdc <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014faa:	6819      	ldr	r1, [r3, #0]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	222c      	movs	r2, #44	; 0x2c
 8014fb0:	fb02 f303 	mul.w	r3, r2, r3
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	68fa      	ldr	r2, [r7, #12]
 8014fba:	3206      	adds	r2, #6
 8014fbc:	0092      	lsls	r2, r2, #2
 8014fbe:	440a      	add	r2, r1
 8014fc0:	3204      	adds	r2, #4
 8014fc2:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	60fb      	str	r3, [r7, #12]
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	ddeb      	ble.n	8014fa8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014fd0:	2300      	movs	r3, #0
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3714      	adds	r7, #20
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bc80      	pop	{r7}
 8014fda:	4770      	bx	lr
 8014fdc:	200021b4 	.word	0x200021b4

08014fe0 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	6039      	str	r1, [r7, #0]
 8014fea:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014fec:	79fb      	ldrb	r3, [r7, #7]
 8014fee:	6839      	ldr	r1, [r7, #0]
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f7f8 fbd1 	bl	800d798 <SecureElementSetKey>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d001      	beq.n	8015000 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ffc:	230f      	movs	r3, #15
 8014ffe:	e018      	b.n	8015032 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8015000:	79fb      	ldrb	r3, [r7, #7]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d114      	bne.n	8015030 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015006:	4b0d      	ldr	r3, [pc, #52]	; (801503c <LoRaMacCryptoSetKey+0x5c>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	789b      	ldrb	r3, [r3, #2]
 801500c:	79fa      	ldrb	r2, [r7, #7]
 801500e:	4611      	mov	r1, r2
 8015010:	4618      	mov	r0, r3
 8015012:	f000 fa3f 	bl	8015494 <LoRaMacCryptoDeriveMcRootKey>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	d001      	beq.n	8015020 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801501c:	230f      	movs	r3, #15
 801501e:	e008      	b.n	8015032 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015020:	2004      	movs	r0, #4
 8015022:	f000 fa62 	bl	80154ea <LoRaMacCryptoDeriveMcKEKey>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d001      	beq.n	8015030 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801502c:	230f      	movs	r3, #15
 801502e:	e000      	b.n	8015032 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015030:	2300      	movs	r3, #0
}
 8015032:	4618      	mov	r0, r3
 8015034:	3708      	adds	r7, #8
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	200021b4 	.word	0x200021b4

08015040 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b086      	sub	sp, #24
 8015044:	af02      	add	r7, sp, #8
 8015046:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d101      	bne.n	8015052 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801504e:	230a      	movs	r3, #10
 8015050:	e033      	b.n	80150ba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015052:	2301      	movs	r3, #1
 8015054:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801505a:	f107 0308 	add.w	r3, r7, #8
 801505e:	4618      	mov	r0, r3
 8015060:	f7f8 fd6a 	bl	800db38 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8015064:	68ba      	ldr	r2, [r7, #8]
 8015066:	4b17      	ldr	r3, [pc, #92]	; (80150c4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	b292      	uxth	r2, r2
 801506c:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801506e:	4b15      	ldr	r3, [pc, #84]	; (80150c4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	889a      	ldrh	r2, [r3, #4]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f000 fc18 	bl	80158ae <LoRaMacSerializerJoinRequest>
 801507e:	4603      	mov	r3, r0
 8015080:	2b00      	cmp	r3, #0
 8015082:	d001      	beq.n	8015088 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015084:	2311      	movs	r3, #17
 8015086:	e018      	b.n	80150ba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6819      	ldr	r1, [r3, #0]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	3318      	adds	r3, #24
 8015090:	7bfa      	ldrb	r2, [r7, #15]
 8015092:	9300      	str	r3, [sp, #0]
 8015094:	4613      	mov	r3, r2
 8015096:	2213      	movs	r2, #19
 8015098:	2000      	movs	r0, #0
 801509a:	f7f8 fbdb 	bl	800d854 <SecureElementComputeAesCmac>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d001      	beq.n	80150a8 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150a4:	230f      	movs	r3, #15
 80150a6:	e008      	b.n	80150ba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	f000 fc00 	bl	80158ae <LoRaMacSerializerJoinRequest>
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d001      	beq.n	80150b8 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80150b4:	2311      	movs	r3, #17
 80150b6:	e000      	b.n	80150ba <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3710      	adds	r7, #16
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	200021b4 	.word	0x200021b4

080150c8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80150c8:	b590      	push	{r4, r7, lr}
 80150ca:	b097      	sub	sp, #92	; 0x5c
 80150cc:	af04      	add	r7, sp, #16
 80150ce:	4603      	mov	r3, r0
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d002      	beq.n	80150e2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d101      	bne.n	80150e6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80150e2:	230a      	movs	r3, #10
 80150e4:	e0bd      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80150e6:	2313      	movs	r3, #19
 80150e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80150ec:	2300      	movs	r3, #0
 80150ee:	61bb      	str	r3, [r7, #24]
 80150f0:	f107 031c 	add.w	r3, r7, #28
 80150f4:	221d      	movs	r2, #29
 80150f6:	2100      	movs	r1, #0
 80150f8:	4618      	mov	r0, r3
 80150fa:	f007 fe73 	bl	801cde4 <memset>
    uint8_t versionMinor         = 0;
 80150fe:	2300      	movs	r3, #0
 8015100:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8015102:	4b5a      	ldr	r3, [pc, #360]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	889b      	ldrh	r3, [r3, #4]
 8015108:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681c      	ldr	r4, [r3, #0]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	791b      	ldrb	r3, [r3, #4]
 8015114:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8015118:	7bf8      	ldrb	r0, [r7, #15]
 801511a:	f107 0217 	add.w	r2, r7, #23
 801511e:	9202      	str	r2, [sp, #8]
 8015120:	f107 0218 	add.w	r2, r7, #24
 8015124:	9201      	str	r2, [sp, #4]
 8015126:	9300      	str	r3, [sp, #0]
 8015128:	4623      	mov	r3, r4
 801512a:	460a      	mov	r2, r1
 801512c:	68b9      	ldr	r1, [r7, #8]
 801512e:	f7f8 fc85 	bl	800da3c <SecureElementProcessJoinAccept>
 8015132:	4603      	mov	r3, r0
 8015134:	2b00      	cmp	r3, #0
 8015136:	d001      	beq.n	801513c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015138:	230f      	movs	r3, #15
 801513a:	e092      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6818      	ldr	r0, [r3, #0]
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	791b      	ldrb	r3, [r3, #4]
 8015144:	b29a      	uxth	r2, r3
 8015146:	f107 0318 	add.w	r3, r7, #24
 801514a:	4619      	mov	r1, r3
 801514c:	f003 f84b 	bl	80181e6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f000 f9ed 	bl	8015530 <LoRaMacParserJoinAccept>
 8015156:	4603      	mov	r3, r0
 8015158:	2b00      	cmp	r3, #0
 801515a:	d001      	beq.n	8015160 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801515c:	2310      	movs	r3, #16
 801515e:	e080      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	799b      	ldrb	r3, [r3, #6]
 8015164:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	79db      	ldrb	r3, [r3, #7]
 801516a:	021b      	lsls	r3, r3, #8
 801516c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801516e:	4313      	orrs	r3, r2
 8015170:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	7a1b      	ldrb	r3, [r3, #8]
 8015176:	041b      	lsls	r3, r3, #16
 8015178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801517a:	4313      	orrs	r3, r2
 801517c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801517e:	4b3b      	ldr	r3, [pc, #236]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	689b      	ldr	r3, [r3, #8]
 8015184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015186:	429a      	cmp	r2, r3
 8015188:	d010      	beq.n	80151ac <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801518a:	4b38      	ldr	r3, [pc, #224]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015190:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8015192:	7dfb      	ldrb	r3, [r7, #23]
 8015194:	2100      	movs	r1, #0
 8015196:	4618      	mov	r0, r3
 8015198:	f000 f97c 	bl	8015494 <LoRaMacCryptoDeriveMcRootKey>
 801519c:	4603      	mov	r3, r0
 801519e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80151a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d005      	beq.n	80151b6 <LoRaMacCryptoHandleJoinAccept+0xee>
 80151aa:	e001      	b.n	80151b0 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80151ac:	2303      	movs	r3, #3
 80151ae:	e058      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80151b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151b4:	e055      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80151b6:	2004      	movs	r0, #4
 80151b8:	f000 f997 	bl	80154ea <LoRaMacCryptoDeriveMcKEKey>
 80151bc:	4603      	mov	r3, r0
 80151be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80151c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d002      	beq.n	80151d0 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80151ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151ce:	e048      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	7a5b      	ldrb	r3, [r3, #9]
 80151d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	7a9b      	ldrb	r3, [r3, #10]
 80151da:	021b      	lsls	r3, r3, #8
 80151dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151de:	4313      	orrs	r3, r2
 80151e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	7adb      	ldrb	r3, [r3, #11]
 80151e6:	041b      	lsls	r3, r3, #16
 80151e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151ea:	4313      	orrs	r3, r2
 80151ec:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80151ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80151f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80151f6:	2003      	movs	r0, #3
 80151f8:	f7ff fcd6 	bl	8014ba8 <DeriveSessionKey10x>
 80151fc:	4603      	mov	r3, r0
 80151fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015202:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015206:	2b00      	cmp	r3, #0
 8015208:	d002      	beq.n	8015210 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801520a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801520e:	e028      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015210:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015216:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015218:	2002      	movs	r0, #2
 801521a:	f7ff fcc5 	bl	8014ba8 <DeriveSessionKey10x>
 801521e:	4603      	mov	r3, r0
 8015220:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015224:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015228:	2b00      	cmp	r3, #0
 801522a:	d002      	beq.n	8015232 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801522c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015230:	e017      	b.n	8015262 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015232:	4b0e      	ldr	r3, [pc, #56]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	7dfa      	ldrb	r2, [r7, #23]
 8015238:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801523a:	4b0c      	ldr	r3, [pc, #48]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2200      	movs	r2, #0
 8015240:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015242:	4b0a      	ldr	r3, [pc, #40]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	f04f 32ff 	mov.w	r2, #4294967295
 801524a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801524c:	4b07      	ldr	r3, [pc, #28]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	f04f 32ff 	mov.w	r2, #4294967295
 8015254:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015256:	4b05      	ldr	r3, [pc, #20]	; (801526c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f04f 32ff 	mov.w	r2, #4294967295
 801525e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	374c      	adds	r7, #76	; 0x4c
 8015266:	46bd      	mov	sp, r7
 8015268:	bd90      	pop	{r4, r7, pc}
 801526a:	bf00      	nop
 801526c:	200021b4 	.word	0x200021b4

08015270 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015270:	b590      	push	{r4, r7, lr}
 8015272:	b08b      	sub	sp, #44	; 0x2c
 8015274:	af04      	add	r7, sp, #16
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	607b      	str	r3, [r7, #4]
 801527a:	460b      	mov	r3, r1
 801527c:	72fb      	strb	r3, [r7, #11]
 801527e:	4613      	mov	r3, r2
 8015280:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015282:	2313      	movs	r3, #19
 8015284:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015286:	2303      	movs	r3, #3
 8015288:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d101      	bne.n	8015294 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015290:	230a      	movs	r3, #10
 8015292:	e05f      	b.n	8015354 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015294:	4b31      	ldr	r3, [pc, #196]	; (801535c <LoRaMacCryptoSecureMessage+0xec>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	68db      	ldr	r3, [r3, #12]
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	429a      	cmp	r2, r3
 801529e:	d201      	bcs.n	80152a4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80152a0:	2306      	movs	r3, #6
 80152a2:	e057      	b.n	8015354 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d101      	bne.n	80152b2 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80152ae:	2302      	movs	r3, #2
 80152b0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80152b2:	4b2a      	ldr	r3, [pc, #168]	; (801535c <LoRaMacCryptoSecureMessage+0xec>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	68fa      	ldr	r2, [r7, #12]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d916      	bls.n	80152ec <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152c8:	b219      	sxth	r1, r3
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	689c      	ldr	r4, [r3, #8]
 80152ce:	7dfa      	ldrb	r2, [r7, #23]
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	9301      	str	r3, [sp, #4]
 80152d4:	2300      	movs	r3, #0
 80152d6:	9300      	str	r3, [sp, #0]
 80152d8:	4623      	mov	r3, r4
 80152da:	f7ff fa71 	bl	80147c0 <PayloadEncrypt>
 80152de:	4603      	mov	r3, r0
 80152e0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80152e2:	7dbb      	ldrb	r3, [r7, #22]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d001      	beq.n	80152ec <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80152e8:	7dbb      	ldrb	r3, [r7, #22]
 80152ea:	e033      	b.n	8015354 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f000 fb60 	bl	80159b2 <LoRaMacSerializerData>
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d001      	beq.n	80152fc <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80152f8:	2311      	movs	r3, #17
 80152fa:	e02b      	b.n	8015354 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80152fc:	2302      	movs	r3, #2
 80152fe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6818      	ldr	r0, [r3, #0]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	791b      	ldrb	r3, [r3, #4]
 8015308:	b29b      	uxth	r3, r3
 801530a:	3b04      	subs	r3, #4
 801530c:	b299      	uxth	r1, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	689b      	ldr	r3, [r3, #8]
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	322c      	adds	r2, #44	; 0x2c
 8015316:	7dfc      	ldrb	r4, [r7, #23]
 8015318:	9203      	str	r2, [sp, #12]
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	9202      	str	r2, [sp, #8]
 801531e:	9301      	str	r3, [sp, #4]
 8015320:	2300      	movs	r3, #0
 8015322:	9300      	str	r3, [sp, #0]
 8015324:	2300      	movs	r3, #0
 8015326:	4622      	mov	r2, r4
 8015328:	f7ff fb4b 	bl	80149c2 <ComputeCmacB0>
 801532c:	4603      	mov	r3, r0
 801532e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015330:	7dbb      	ldrb	r3, [r7, #22]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d001      	beq.n	801533a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8015336:	7dbb      	ldrb	r3, [r7, #22]
 8015338:	e00c      	b.n	8015354 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f000 fb39 	bl	80159b2 <LoRaMacSerializerData>
 8015340:	4603      	mov	r3, r0
 8015342:	2b00      	cmp	r3, #0
 8015344:	d001      	beq.n	801534a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015346:	2311      	movs	r3, #17
 8015348:	e004      	b.n	8015354 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801534a:	4b04      	ldr	r3, [pc, #16]	; (801535c <LoRaMacCryptoSecureMessage+0xec>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	68fa      	ldr	r2, [r7, #12]
 8015350:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015352:	2300      	movs	r3, #0
}
 8015354:	4618      	mov	r0, r3
 8015356:	371c      	adds	r7, #28
 8015358:	46bd      	mov	sp, r7
 801535a:	bd90      	pop	{r4, r7, pc}
 801535c:	200021b4 	.word	0x200021b4

08015360 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015360:	b590      	push	{r4, r7, lr}
 8015362:	b08b      	sub	sp, #44	; 0x2c
 8015364:	af04      	add	r7, sp, #16
 8015366:	60b9      	str	r1, [r7, #8]
 8015368:	607b      	str	r3, [r7, #4]
 801536a:	4603      	mov	r3, r0
 801536c:	73fb      	strb	r3, [r7, #15]
 801536e:	4613      	mov	r3, r2
 8015370:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015374:	2b00      	cmp	r3, #0
 8015376:	d101      	bne.n	801537c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015378:	230a      	movs	r3, #10
 801537a:	e084      	b.n	8015486 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801537c:	7bbb      	ldrb	r3, [r7, #14]
 801537e:	6879      	ldr	r1, [r7, #4]
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff fcaf 	bl	8014ce4 <CheckFCntDown>
 8015386:	4603      	mov	r3, r0
 8015388:	f083 0301 	eor.w	r3, r3, #1
 801538c:	b2db      	uxtb	r3, r3
 801538e:	2b00      	cmp	r3, #0
 8015390:	d001      	beq.n	8015396 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015392:	2306      	movs	r3, #6
 8015394:	e077      	b.n	8015486 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015396:	2313      	movs	r3, #19
 8015398:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801539a:	2303      	movs	r3, #3
 801539c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801539e:	2302      	movs	r3, #2
 80153a0:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80153a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153a4:	f000 f98f 	bl	80156c6 <LoRaMacParserData>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d001      	beq.n	80153b2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80153ae:	2310      	movs	r3, #16
 80153b0:	e069      	b.n	8015486 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80153b2:	f107 0210 	add.w	r2, r7, #16
 80153b6:	7bfb      	ldrb	r3, [r7, #15]
 80153b8:	4611      	mov	r1, r2
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7ff fbce 	bl	8014b5c <GetKeyAddrItem>
 80153c0:	4603      	mov	r3, r0
 80153c2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80153c4:	7d7b      	ldrb	r3, [r7, #21]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d001      	beq.n	80153ce <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80153ca:	7d7b      	ldrb	r3, [r7, #21]
 80153cc:	e05b      	b.n	8015486 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	785b      	ldrb	r3, [r3, #1]
 80153d2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	789b      	ldrb	r3, [r3, #2]
 80153d8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80153da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153dc:	689b      	ldr	r3, [r3, #8]
 80153de:	68ba      	ldr	r2, [r7, #8]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d001      	beq.n	80153e8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80153e4:	2302      	movs	r3, #2
 80153e6:	e04e      	b.n	8015486 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80153e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ea:	7b1b      	ldrb	r3, [r3, #12]
 80153ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	bf14      	ite	ne
 80153f6:	2301      	movne	r3, #1
 80153f8:	2300      	moveq	r3, #0
 80153fa:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80153fc:	4b24      	ldr	r3, [pc, #144]	; (8015490 <LoRaMacCryptoUnsecureMessage+0x130>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	789b      	ldrb	r3, [r3, #2]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d101      	bne.n	801540a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015406:	2300      	movs	r3, #0
 8015408:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801540c:	6818      	ldr	r0, [r3, #0]
 801540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015410:	791b      	ldrb	r3, [r3, #4]
 8015412:	b29b      	uxth	r3, r3
 8015414:	3b04      	subs	r3, #4
 8015416:	b299      	uxth	r1, r3
 8015418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801541c:	7dbc      	ldrb	r4, [r7, #22]
 801541e:	7d3a      	ldrb	r2, [r7, #20]
 8015420:	9303      	str	r3, [sp, #12]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	9302      	str	r3, [sp, #8]
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	9301      	str	r3, [sp, #4]
 801542a:	2301      	movs	r3, #1
 801542c:	9300      	str	r3, [sp, #0]
 801542e:	4623      	mov	r3, r4
 8015430:	f7ff fb05 	bl	8014a3e <VerifyCmacB0>
 8015434:	4603      	mov	r3, r0
 8015436:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015438:	7d7b      	ldrb	r3, [r7, #21]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d001      	beq.n	8015442 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801543e:	7d7b      	ldrb	r3, [r7, #21]
 8015440:	e021      	b.n	8015486 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d101      	bne.n	8015450 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801544c:	2302      	movs	r3, #2
 801544e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015452:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801545a:	b219      	sxth	r1, r3
 801545c:	7dfa      	ldrb	r2, [r7, #23]
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	9301      	str	r3, [sp, #4]
 8015462:	2301      	movs	r3, #1
 8015464:	9300      	str	r3, [sp, #0]
 8015466:	68bb      	ldr	r3, [r7, #8]
 8015468:	f7ff f9aa 	bl	80147c0 <PayloadEncrypt>
 801546c:	4603      	mov	r3, r0
 801546e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015470:	7d7b      	ldrb	r3, [r7, #21]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d001      	beq.n	801547a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8015476:	7d7b      	ldrb	r3, [r7, #21]
 8015478:	e005      	b.n	8015486 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801547a:	7bbb      	ldrb	r3, [r7, #14]
 801547c:	6879      	ldr	r1, [r7, #4]
 801547e:	4618      	mov	r0, r3
 8015480:	f7ff fc54 	bl	8014d2c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015484:	2300      	movs	r3, #0
}
 8015486:	4618      	mov	r0, r3
 8015488:	371c      	adds	r7, #28
 801548a:	46bd      	mov	sp, r7
 801548c:	bd90      	pop	{r4, r7, pc}
 801548e:	bf00      	nop
 8015490:	200021b4 	.word	0x200021b4

08015494 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b086      	sub	sp, #24
 8015498:	af00      	add	r7, sp, #0
 801549a:	4603      	mov	r3, r0
 801549c:	460a      	mov	r2, r1
 801549e:	71fb      	strb	r3, [r7, #7]
 80154a0:	4613      	mov	r3, r2
 80154a2:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80154a4:	79bb      	ldrb	r3, [r7, #6]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d001      	beq.n	80154ae <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80154aa:	230b      	movs	r3, #11
 80154ac:	e019      	b.n	80154e2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80154ae:	2300      	movs	r3, #0
 80154b0:	60bb      	str	r3, [r7, #8]
 80154b2:	f107 030c 	add.w	r3, r7, #12
 80154b6:	2200      	movs	r2, #0
 80154b8:	601a      	str	r2, [r3, #0]
 80154ba:	605a      	str	r2, [r3, #4]
 80154bc:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80154be:	79fb      	ldrb	r3, [r7, #7]
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d101      	bne.n	80154c8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80154c4:	2320      	movs	r3, #32
 80154c6:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80154c8:	79b9      	ldrb	r1, [r7, #6]
 80154ca:	f107 0308 	add.w	r3, r7, #8
 80154ce:	2204      	movs	r2, #4
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7f8 fa73 	bl	800d9bc <SecureElementDeriveAndStoreKey>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80154dc:	230f      	movs	r3, #15
 80154de:	e000      	b.n	80154e2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80154e0:	2300      	movs	r3, #0
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3718      	adds	r7, #24
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b086      	sub	sp, #24
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	4603      	mov	r3, r0
 80154f2:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80154f4:	79fb      	ldrb	r3, [r7, #7]
 80154f6:	2b04      	cmp	r3, #4
 80154f8:	d001      	beq.n	80154fe <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80154fa:	230b      	movs	r3, #11
 80154fc:	e014      	b.n	8015528 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80154fe:	2300      	movs	r3, #0
 8015500:	60bb      	str	r3, [r7, #8]
 8015502:	f107 030c 	add.w	r3, r7, #12
 8015506:	2200      	movs	r2, #0
 8015508:	601a      	str	r2, [r3, #0]
 801550a:	605a      	str	r2, [r3, #4]
 801550c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801550e:	79f9      	ldrb	r1, [r7, #7]
 8015510:	f107 0308 	add.w	r3, r7, #8
 8015514:	227f      	movs	r2, #127	; 0x7f
 8015516:	4618      	mov	r0, r3
 8015518:	f7f8 fa50 	bl	800d9bc <SecureElementDeriveAndStoreKey>
 801551c:	4603      	mov	r3, r0
 801551e:	2b00      	cmp	r3, #0
 8015520:	d001      	beq.n	8015526 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015522:	230f      	movs	r3, #15
 8015524:	e000      	b.n	8015528 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015526:	2300      	movs	r3, #0
}
 8015528:	4618      	mov	r0, r3
 801552a:	3718      	adds	r7, #24
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}

08015530 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b084      	sub	sp, #16
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d003      	beq.n	8015546 <LoRaMacParserJoinAccept+0x16>
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d101      	bne.n	801554a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015546:	2302      	movs	r3, #2
 8015548:	e0b9      	b.n	80156be <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801554a:	2300      	movs	r3, #0
 801554c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	89fb      	ldrh	r3, [r7, #14]
 8015554:	1c59      	adds	r1, r3, #1
 8015556:	81f9      	strh	r1, [r7, #14]
 8015558:	4413      	add	r3, r2
 801555a:	781a      	ldrb	r2, [r3, #0]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	1d98      	adds	r0, r3, #6
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	89fb      	ldrh	r3, [r7, #14]
 801556a:	4413      	add	r3, r2
 801556c:	2203      	movs	r2, #3
 801556e:	4619      	mov	r1, r3
 8015570:	f002 fe39 	bl	80181e6 <memcpy1>
    bufItr = bufItr + 3;
 8015574:	89fb      	ldrh	r3, [r7, #14]
 8015576:	3303      	adds	r3, #3
 8015578:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f103 0009 	add.w	r0, r3, #9
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	89fb      	ldrh	r3, [r7, #14]
 8015586:	4413      	add	r3, r2
 8015588:	2203      	movs	r2, #3
 801558a:	4619      	mov	r1, r3
 801558c:	f002 fe2b 	bl	80181e6 <memcpy1>
    bufItr = bufItr + 3;
 8015590:	89fb      	ldrh	r3, [r7, #14]
 8015592:	3303      	adds	r3, #3
 8015594:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	681a      	ldr	r2, [r3, #0]
 801559a:	89fb      	ldrh	r3, [r7, #14]
 801559c:	1c59      	adds	r1, r3, #1
 801559e:	81f9      	strh	r1, [r7, #14]
 80155a0:	4413      	add	r3, r2
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	461a      	mov	r2, r3
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	89fb      	ldrh	r3, [r7, #14]
 80155b0:	1c59      	adds	r1, r3, #1
 80155b2:	81f9      	strh	r1, [r7, #14]
 80155b4:	4413      	add	r3, r2
 80155b6:	781b      	ldrb	r3, [r3, #0]
 80155b8:	021a      	lsls	r2, r3, #8
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	68db      	ldr	r3, [r3, #12]
 80155be:	431a      	orrs	r2, r3
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681a      	ldr	r2, [r3, #0]
 80155c8:	89fb      	ldrh	r3, [r7, #14]
 80155ca:	1c59      	adds	r1, r3, #1
 80155cc:	81f9      	strh	r1, [r7, #14]
 80155ce:	4413      	add	r3, r2
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	041a      	lsls	r2, r3, #16
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	68db      	ldr	r3, [r3, #12]
 80155d8:	431a      	orrs	r2, r3
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681a      	ldr	r2, [r3, #0]
 80155e2:	89fb      	ldrh	r3, [r7, #14]
 80155e4:	1c59      	adds	r1, r3, #1
 80155e6:	81f9      	strh	r1, [r7, #14]
 80155e8:	4413      	add	r3, r2
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	061a      	lsls	r2, r3, #24
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	431a      	orrs	r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681a      	ldr	r2, [r3, #0]
 80155fc:	89fb      	ldrh	r3, [r7, #14]
 80155fe:	1c59      	adds	r1, r3, #1
 8015600:	81f9      	strh	r1, [r7, #14]
 8015602:	4413      	add	r3, r2
 8015604:	781a      	ldrb	r2, [r3, #0]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	89fb      	ldrh	r3, [r7, #14]
 8015610:	1c59      	adds	r1, r3, #1
 8015612:	81f9      	strh	r1, [r7, #14]
 8015614:	4413      	add	r3, r2
 8015616:	781a      	ldrb	r2, [r3, #0]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	791b      	ldrb	r3, [r3, #4]
 8015620:	1f1a      	subs	r2, r3, #4
 8015622:	89fb      	ldrh	r3, [r7, #14]
 8015624:	1ad3      	subs	r3, r2, r3
 8015626:	2b10      	cmp	r3, #16
 8015628:	d10e      	bne.n	8015648 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f103 0012 	add.w	r0, r3, #18
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681a      	ldr	r2, [r3, #0]
 8015634:	89fb      	ldrh	r3, [r7, #14]
 8015636:	4413      	add	r3, r2
 8015638:	2210      	movs	r2, #16
 801563a:	4619      	mov	r1, r3
 801563c:	f002 fdd3 	bl	80181e6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015640:	89fb      	ldrh	r3, [r7, #14]
 8015642:	3310      	adds	r3, #16
 8015644:	81fb      	strh	r3, [r7, #14]
 8015646:	e008      	b.n	801565a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	791b      	ldrb	r3, [r3, #4]
 801564c:	1f1a      	subs	r2, r3, #4
 801564e:	89fb      	ldrh	r3, [r7, #14]
 8015650:	1ad3      	subs	r3, r2, r3
 8015652:	2b00      	cmp	r3, #0
 8015654:	dd01      	ble.n	801565a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015656:	2301      	movs	r3, #1
 8015658:	e031      	b.n	80156be <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	89fb      	ldrh	r3, [r7, #14]
 8015660:	1c59      	adds	r1, r3, #1
 8015662:	81f9      	strh	r1, [r7, #14]
 8015664:	4413      	add	r3, r2
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	461a      	mov	r2, r3
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	89fb      	ldrh	r3, [r7, #14]
 8015674:	1c59      	adds	r1, r3, #1
 8015676:	81f9      	strh	r1, [r7, #14]
 8015678:	4413      	add	r3, r2
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	021a      	lsls	r2, r3, #8
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015682:	431a      	orrs	r2, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	89fb      	ldrh	r3, [r7, #14]
 801568e:	1c59      	adds	r1, r3, #1
 8015690:	81f9      	strh	r1, [r7, #14]
 8015692:	4413      	add	r3, r2
 8015694:	781b      	ldrb	r3, [r3, #0]
 8015696:	041a      	lsls	r2, r3, #16
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801569c:	431a      	orrs	r2, r3
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	89fb      	ldrh	r3, [r7, #14]
 80156a8:	1c59      	adds	r1, r3, #1
 80156aa:	81f9      	strh	r1, [r7, #14]
 80156ac:	4413      	add	r3, r2
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	061a      	lsls	r2, r3, #24
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156b6:	431a      	orrs	r2, r3
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80156bc:	2300      	movs	r3, #0
}
 80156be:	4618      	mov	r0, r3
 80156c0:	3710      	adds	r7, #16
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}

080156c6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80156c6:	b580      	push	{r7, lr}
 80156c8:	b084      	sub	sp, #16
 80156ca:	af00      	add	r7, sp, #0
 80156cc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d003      	beq.n	80156dc <LoRaMacParserData+0x16>
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d101      	bne.n	80156e0 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80156dc:	2302      	movs	r3, #2
 80156de:	e0e2      	b.n	80158a6 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80156e0:	2300      	movs	r3, #0
 80156e2:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	89fb      	ldrh	r3, [r7, #14]
 80156ea:	1c59      	adds	r1, r3, #1
 80156ec:	81f9      	strh	r1, [r7, #14]
 80156ee:	4413      	add	r3, r2
 80156f0:	781a      	ldrb	r2, [r3, #0]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681a      	ldr	r2, [r3, #0]
 80156fa:	89fb      	ldrh	r3, [r7, #14]
 80156fc:	1c59      	adds	r1, r3, #1
 80156fe:	81f9      	strh	r1, [r7, #14]
 8015700:	4413      	add	r3, r2
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	461a      	mov	r2, r3
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	89fb      	ldrh	r3, [r7, #14]
 8015710:	1c59      	adds	r1, r3, #1
 8015712:	81f9      	strh	r1, [r7, #14]
 8015714:	4413      	add	r3, r2
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	021a      	lsls	r2, r3, #8
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	689b      	ldr	r3, [r3, #8]
 801571e:	431a      	orrs	r2, r3
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681a      	ldr	r2, [r3, #0]
 8015728:	89fb      	ldrh	r3, [r7, #14]
 801572a:	1c59      	adds	r1, r3, #1
 801572c:	81f9      	strh	r1, [r7, #14]
 801572e:	4413      	add	r3, r2
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	041a      	lsls	r2, r3, #16
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	689b      	ldr	r3, [r3, #8]
 8015738:	431a      	orrs	r2, r3
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	89fb      	ldrh	r3, [r7, #14]
 8015744:	1c59      	adds	r1, r3, #1
 8015746:	81f9      	strh	r1, [r7, #14]
 8015748:	4413      	add	r3, r2
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	061a      	lsls	r2, r3, #24
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	689b      	ldr	r3, [r3, #8]
 8015752:	431a      	orrs	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681a      	ldr	r2, [r3, #0]
 801575c:	89fb      	ldrh	r3, [r7, #14]
 801575e:	1c59      	adds	r1, r3, #1
 8015760:	81f9      	strh	r1, [r7, #14]
 8015762:	4413      	add	r3, r2
 8015764:	781a      	ldrb	r2, [r3, #0]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	681a      	ldr	r2, [r3, #0]
 801576e:	89fb      	ldrh	r3, [r7, #14]
 8015770:	1c59      	adds	r1, r3, #1
 8015772:	81f9      	strh	r1, [r7, #14]
 8015774:	4413      	add	r3, r2
 8015776:	781b      	ldrb	r3, [r3, #0]
 8015778:	b29a      	uxth	r2, r3
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	681a      	ldr	r2, [r3, #0]
 8015782:	89fb      	ldrh	r3, [r7, #14]
 8015784:	1c59      	adds	r1, r3, #1
 8015786:	81f9      	strh	r1, [r7, #14]
 8015788:	4413      	add	r3, r2
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	0219      	lsls	r1, r3, #8
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	89db      	ldrh	r3, [r3, #14]
 8015792:	b21a      	sxth	r2, r3
 8015794:	b20b      	sxth	r3, r1
 8015796:	4313      	orrs	r3, r2
 8015798:	b21b      	sxth	r3, r3
 801579a:	b29a      	uxth	r2, r3
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f103 0010 	add.w	r0, r3, #16
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	89fb      	ldrh	r3, [r7, #14]
 80157ac:	18d1      	adds	r1, r2, r3
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	7b1b      	ldrb	r3, [r3, #12]
 80157b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	461a      	mov	r2, r3
 80157bc:	f002 fd13 	bl	80181e6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	7b1b      	ldrb	r3, [r3, #12]
 80157c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	89fb      	ldrh	r3, [r7, #14]
 80157ce:	4413      	add	r3, r2
 80157d0:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2200      	movs	r2, #0
 80157d6:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2200      	movs	r2, #0
 80157de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	791b      	ldrb	r3, [r3, #4]
 80157e6:	461a      	mov	r2, r3
 80157e8:	89fb      	ldrh	r3, [r7, #14]
 80157ea:	1ad3      	subs	r3, r2, r3
 80157ec:	2b04      	cmp	r3, #4
 80157ee:	dd28      	ble.n	8015842 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681a      	ldr	r2, [r3, #0]
 80157f4:	89fb      	ldrh	r3, [r7, #14]
 80157f6:	1c59      	adds	r1, r3, #1
 80157f8:	81f9      	strh	r1, [r7, #14]
 80157fa:	4413      	add	r3, r2
 80157fc:	781a      	ldrb	r2, [r3, #0]
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	791a      	ldrb	r2, [r3, #4]
 8015808:	89fb      	ldrh	r3, [r7, #14]
 801580a:	b2db      	uxtb	r3, r3
 801580c:	1ad3      	subs	r3, r2, r3
 801580e:	b2db      	uxtb	r3, r3
 8015810:	3b04      	subs	r3, #4
 8015812:	b2da      	uxtb	r2, r3
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	89fb      	ldrh	r3, [r7, #14]
 8015824:	18d1      	adds	r1, r2, r3
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801582c:	b29b      	uxth	r3, r3
 801582e:	461a      	mov	r2, r3
 8015830:	f002 fcd9 	bl	80181e6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801583a:	b29a      	uxth	r2, r3
 801583c:	89fb      	ldrh	r3, [r7, #14]
 801583e:	4413      	add	r3, r2
 8015840:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	791b      	ldrb	r3, [r3, #4]
 801584a:	3b04      	subs	r3, #4
 801584c:	4413      	add	r3, r2
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	461a      	mov	r2, r3
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6819      	ldr	r1, [r3, #0]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	791b      	ldrb	r3, [r3, #4]
 8015862:	3b03      	subs	r3, #3
 8015864:	440b      	add	r3, r1
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	021b      	lsls	r3, r3, #8
 801586a:	431a      	orrs	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6819      	ldr	r1, [r3, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	791b      	ldrb	r3, [r3, #4]
 801587c:	3b02      	subs	r3, #2
 801587e:	440b      	add	r3, r1
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	041b      	lsls	r3, r3, #16
 8015884:	431a      	orrs	r2, r3
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	6819      	ldr	r1, [r3, #0]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	791b      	ldrb	r3, [r3, #4]
 8015896:	3b01      	subs	r3, #1
 8015898:	440b      	add	r3, r1
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	061b      	lsls	r3, r3, #24
 801589e:	431a      	orrs	r2, r3
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80158a4:	2300      	movs	r3, #0
}
 80158a6:	4618      	mov	r0, r3
 80158a8:	3710      	adds	r7, #16
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}

080158ae <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80158ae:	b580      	push	{r7, lr}
 80158b0:	b084      	sub	sp, #16
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d003      	beq.n	80158c4 <LoRaMacSerializerJoinRequest+0x16>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d101      	bne.n	80158c8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80158c4:	2301      	movs	r3, #1
 80158c6:	e070      	b.n	80159aa <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80158c8:	2300      	movs	r3, #0
 80158ca:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	791b      	ldrb	r3, [r3, #4]
 80158d0:	2b16      	cmp	r3, #22
 80158d2:	d801      	bhi.n	80158d8 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80158d4:	2302      	movs	r3, #2
 80158d6:	e068      	b.n	80159aa <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	89fb      	ldrh	r3, [r7, #14]
 80158de:	1c59      	adds	r1, r3, #1
 80158e0:	81f9      	strh	r1, [r7, #14]
 80158e2:	4413      	add	r3, r2
 80158e4:	687a      	ldr	r2, [r7, #4]
 80158e6:	7952      	ldrb	r2, [r2, #5]
 80158e8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	89fb      	ldrh	r3, [r7, #14]
 80158f0:	18d0      	adds	r0, r2, r3
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	3306      	adds	r3, #6
 80158f6:	2208      	movs	r2, #8
 80158f8:	4619      	mov	r1, r3
 80158fa:	f002 fc8f 	bl	801821c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80158fe:	89fb      	ldrh	r3, [r7, #14]
 8015900:	3308      	adds	r3, #8
 8015902:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681a      	ldr	r2, [r3, #0]
 8015908:	89fb      	ldrh	r3, [r7, #14]
 801590a:	18d0      	adds	r0, r2, r3
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	330e      	adds	r3, #14
 8015910:	2208      	movs	r2, #8
 8015912:	4619      	mov	r1, r3
 8015914:	f002 fc82 	bl	801821c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015918:	89fb      	ldrh	r3, [r7, #14]
 801591a:	3308      	adds	r3, #8
 801591c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	8ad9      	ldrh	r1, [r3, #22]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681a      	ldr	r2, [r3, #0]
 8015926:	89fb      	ldrh	r3, [r7, #14]
 8015928:	1c58      	adds	r0, r3, #1
 801592a:	81f8      	strh	r0, [r7, #14]
 801592c:	4413      	add	r3, r2
 801592e:	b2ca      	uxtb	r2, r1
 8015930:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	8adb      	ldrh	r3, [r3, #22]
 8015936:	0a1b      	lsrs	r3, r3, #8
 8015938:	b299      	uxth	r1, r3
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681a      	ldr	r2, [r3, #0]
 801593e:	89fb      	ldrh	r3, [r7, #14]
 8015940:	1c58      	adds	r0, r3, #1
 8015942:	81f8      	strh	r0, [r7, #14]
 8015944:	4413      	add	r3, r2
 8015946:	b2ca      	uxtb	r2, r1
 8015948:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	6999      	ldr	r1, [r3, #24]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	89fb      	ldrh	r3, [r7, #14]
 8015954:	1c58      	adds	r0, r3, #1
 8015956:	81f8      	strh	r0, [r7, #14]
 8015958:	4413      	add	r3, r2
 801595a:	b2ca      	uxtb	r2, r1
 801595c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	699b      	ldr	r3, [r3, #24]
 8015962:	0a19      	lsrs	r1, r3, #8
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681a      	ldr	r2, [r3, #0]
 8015968:	89fb      	ldrh	r3, [r7, #14]
 801596a:	1c58      	adds	r0, r3, #1
 801596c:	81f8      	strh	r0, [r7, #14]
 801596e:	4413      	add	r3, r2
 8015970:	b2ca      	uxtb	r2, r1
 8015972:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	699b      	ldr	r3, [r3, #24]
 8015978:	0c19      	lsrs	r1, r3, #16
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	89fb      	ldrh	r3, [r7, #14]
 8015980:	1c58      	adds	r0, r3, #1
 8015982:	81f8      	strh	r0, [r7, #14]
 8015984:	4413      	add	r3, r2
 8015986:	b2ca      	uxtb	r2, r1
 8015988:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	699b      	ldr	r3, [r3, #24]
 801598e:	0e19      	lsrs	r1, r3, #24
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	89fb      	ldrh	r3, [r7, #14]
 8015996:	1c58      	adds	r0, r3, #1
 8015998:	81f8      	strh	r0, [r7, #14]
 801599a:	4413      	add	r3, r2
 801599c:	b2ca      	uxtb	r2, r1
 801599e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80159a0:	89fb      	ldrh	r3, [r7, #14]
 80159a2:	b2da      	uxtb	r2, r3
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80159a8:	2300      	movs	r3, #0
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3710      	adds	r7, #16
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80159b2:	b580      	push	{r7, lr}
 80159b4:	b084      	sub	sp, #16
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d003      	beq.n	80159c8 <LoRaMacSerializerData+0x16>
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d101      	bne.n	80159cc <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80159c8:	2301      	movs	r3, #1
 80159ca:	e0e5      	b.n	8015b98 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80159cc:	2300      	movs	r3, #0
 80159ce:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80159d0:	2308      	movs	r3, #8
 80159d2:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	7b1b      	ldrb	r3, [r3, #12]
 80159d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	b29a      	uxth	r2, r3
 80159e0:	89bb      	ldrh	r3, [r7, #12]
 80159e2:	4413      	add	r3, r2
 80159e4:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d002      	beq.n	80159f6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80159f0:	89bb      	ldrh	r3, [r7, #12]
 80159f2:	3301      	adds	r3, #1
 80159f4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	89bb      	ldrh	r3, [r7, #12]
 8015a00:	4413      	add	r3, r2
 8015a02:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015a04:	89bb      	ldrh	r3, [r7, #12]
 8015a06:	3304      	adds	r3, #4
 8015a08:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	791b      	ldrb	r3, [r3, #4]
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	89ba      	ldrh	r2, [r7, #12]
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d901      	bls.n	8015a1a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015a16:	2302      	movs	r3, #2
 8015a18:	e0be      	b.n	8015b98 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	89fb      	ldrh	r3, [r7, #14]
 8015a20:	1c59      	adds	r1, r3, #1
 8015a22:	81f9      	strh	r1, [r7, #14]
 8015a24:	4413      	add	r3, r2
 8015a26:	687a      	ldr	r2, [r7, #4]
 8015a28:	7952      	ldrb	r2, [r2, #5]
 8015a2a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6899      	ldr	r1, [r3, #8]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	89fb      	ldrh	r3, [r7, #14]
 8015a36:	1c58      	adds	r0, r3, #1
 8015a38:	81f8      	strh	r0, [r7, #14]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	b2ca      	uxtb	r2, r1
 8015a3e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	689b      	ldr	r3, [r3, #8]
 8015a44:	0a19      	lsrs	r1, r3, #8
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681a      	ldr	r2, [r3, #0]
 8015a4a:	89fb      	ldrh	r3, [r7, #14]
 8015a4c:	1c58      	adds	r0, r3, #1
 8015a4e:	81f8      	strh	r0, [r7, #14]
 8015a50:	4413      	add	r3, r2
 8015a52:	b2ca      	uxtb	r2, r1
 8015a54:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	689b      	ldr	r3, [r3, #8]
 8015a5a:	0c19      	lsrs	r1, r3, #16
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681a      	ldr	r2, [r3, #0]
 8015a60:	89fb      	ldrh	r3, [r7, #14]
 8015a62:	1c58      	adds	r0, r3, #1
 8015a64:	81f8      	strh	r0, [r7, #14]
 8015a66:	4413      	add	r3, r2
 8015a68:	b2ca      	uxtb	r2, r1
 8015a6a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	689b      	ldr	r3, [r3, #8]
 8015a70:	0e19      	lsrs	r1, r3, #24
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	89fb      	ldrh	r3, [r7, #14]
 8015a78:	1c58      	adds	r0, r3, #1
 8015a7a:	81f8      	strh	r0, [r7, #14]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	b2ca      	uxtb	r2, r1
 8015a80:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681a      	ldr	r2, [r3, #0]
 8015a86:	89fb      	ldrh	r3, [r7, #14]
 8015a88:	1c59      	adds	r1, r3, #1
 8015a8a:	81f9      	strh	r1, [r7, #14]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	687a      	ldr	r2, [r7, #4]
 8015a90:	7b12      	ldrb	r2, [r2, #12]
 8015a92:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	89d9      	ldrh	r1, [r3, #14]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	89fb      	ldrh	r3, [r7, #14]
 8015a9e:	1c58      	adds	r0, r3, #1
 8015aa0:	81f8      	strh	r0, [r7, #14]
 8015aa2:	4413      	add	r3, r2
 8015aa4:	b2ca      	uxtb	r2, r1
 8015aa6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	89db      	ldrh	r3, [r3, #14]
 8015aac:	0a1b      	lsrs	r3, r3, #8
 8015aae:	b299      	uxth	r1, r3
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681a      	ldr	r2, [r3, #0]
 8015ab4:	89fb      	ldrh	r3, [r7, #14]
 8015ab6:	1c58      	adds	r0, r3, #1
 8015ab8:	81f8      	strh	r0, [r7, #14]
 8015aba:	4413      	add	r3, r2
 8015abc:	b2ca      	uxtb	r2, r1
 8015abe:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	89fb      	ldrh	r3, [r7, #14]
 8015ac6:	18d0      	adds	r0, r2, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f103 0110 	add.w	r1, r3, #16
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	7b1b      	ldrb	r3, [r3, #12]
 8015ad2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	461a      	mov	r2, r3
 8015adc:	f002 fb83 	bl	80181e6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	7b1b      	ldrb	r3, [r3, #12]
 8015ae4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	b29a      	uxth	r2, r3
 8015aec:	89fb      	ldrh	r3, [r7, #14]
 8015aee:	4413      	add	r3, r2
 8015af0:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d009      	beq.n	8015b10 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	89fb      	ldrh	r3, [r7, #14]
 8015b02:	1c59      	adds	r1, r3, #1
 8015b04:	81f9      	strh	r1, [r7, #14]
 8015b06:	4413      	add	r3, r2
 8015b08:	687a      	ldr	r2, [r7, #4]
 8015b0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015b0e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	89fb      	ldrh	r3, [r7, #14]
 8015b16:	18d0      	adds	r0, r2, r3
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	461a      	mov	r2, r3
 8015b26:	f002 fb5e 	bl	80181e6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b30:	b29a      	uxth	r2, r3
 8015b32:	89fb      	ldrh	r3, [r7, #14]
 8015b34:	4413      	add	r3, r2
 8015b36:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681a      	ldr	r2, [r3, #0]
 8015b40:	89fb      	ldrh	r3, [r7, #14]
 8015b42:	1c58      	adds	r0, r3, #1
 8015b44:	81f8      	strh	r0, [r7, #14]
 8015b46:	4413      	add	r3, r2
 8015b48:	b2ca      	uxtb	r2, r1
 8015b4a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b50:	0a19      	lsrs	r1, r3, #8
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	681a      	ldr	r2, [r3, #0]
 8015b56:	89fb      	ldrh	r3, [r7, #14]
 8015b58:	1c58      	adds	r0, r3, #1
 8015b5a:	81f8      	strh	r0, [r7, #14]
 8015b5c:	4413      	add	r3, r2
 8015b5e:	b2ca      	uxtb	r2, r1
 8015b60:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b66:	0c19      	lsrs	r1, r3, #16
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	681a      	ldr	r2, [r3, #0]
 8015b6c:	89fb      	ldrh	r3, [r7, #14]
 8015b6e:	1c58      	adds	r0, r3, #1
 8015b70:	81f8      	strh	r0, [r7, #14]
 8015b72:	4413      	add	r3, r2
 8015b74:	b2ca      	uxtb	r2, r1
 8015b76:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b7c:	0e19      	lsrs	r1, r3, #24
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	89fb      	ldrh	r3, [r7, #14]
 8015b84:	1c58      	adds	r0, r3, #1
 8015b86:	81f8      	strh	r0, [r7, #14]
 8015b88:	4413      	add	r3, r2
 8015b8a:	b2ca      	uxtb	r2, r1
 8015b8c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015b8e:	89fb      	ldrh	r3, [r7, #14]
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015b96:	2300      	movs	r3, #0
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3710      	adds	r7, #16
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b083      	sub	sp, #12
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015baa:	79fb      	ldrb	r3, [r7, #7]
 8015bac:	2b05      	cmp	r3, #5
 8015bae:	d101      	bne.n	8015bb4 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	e000      	b.n	8015bb6 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015bb4:	2300      	movs	r3, #0
        }
    }
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bc80      	pop	{r7}
 8015bbe:	4770      	bx	lr

08015bc0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	6039      	str	r1, [r7, #0]
 8015bca:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015bcc:	2300      	movs	r3, #0
 8015bce:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015bd0:	79fb      	ldrb	r3, [r7, #7]
 8015bd2:	2b05      	cmp	r3, #5
 8015bd4:	d105      	bne.n	8015be2 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8015bd6:	6838      	ldr	r0, [r7, #0]
 8015bd8:	f001 f994 	bl	8016f04 <RegionEU868GetPhyParam>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	60fb      	str	r3, [r7, #12]
 8015be0:	e001      	b.n	8015be6 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015be2:	68bb      	ldr	r3, [r7, #8]
 8015be4:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	4618      	mov	r0, r3
 8015bea:	3710      	adds	r7, #16
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	6039      	str	r1, [r7, #0]
 8015bfa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015bfc:	79fb      	ldrb	r3, [r7, #7]
 8015bfe:	2b05      	cmp	r3, #5
 8015c00:	d103      	bne.n	8015c0a <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8015c02:	6838      	ldr	r0, [r7, #0]
 8015c04:	f001 faca 	bl	801719c <RegionEU868SetBandTxDone>
 8015c08:	e000      	b.n	8015c0c <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015c0a:	bf00      	nop
        }
    }
}
 8015c0c:	3708      	adds	r7, #8
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}

08015c12 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015c12:	b580      	push	{r7, lr}
 8015c14:	b082      	sub	sp, #8
 8015c16:	af00      	add	r7, sp, #0
 8015c18:	4603      	mov	r3, r0
 8015c1a:	6039      	str	r1, [r7, #0]
 8015c1c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c1e:	79fb      	ldrb	r3, [r7, #7]
 8015c20:	2b05      	cmp	r3, #5
 8015c22:	d103      	bne.n	8015c2c <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8015c24:	6838      	ldr	r0, [r7, #0]
 8015c26:	f001 fae5 	bl	80171f4 <RegionEU868InitDefaults>
 8015c2a:	e000      	b.n	8015c2e <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015c2c:	bf00      	nop
        }
    }
}
 8015c2e:	bf00      	nop
 8015c30:	3708      	adds	r7, #8
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}

08015c36 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b082      	sub	sp, #8
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	6039      	str	r1, [r7, #0]
 8015c40:	71fb      	strb	r3, [r7, #7]
 8015c42:	4613      	mov	r3, r2
 8015c44:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015c46:	79fb      	ldrb	r3, [r7, #7]
 8015c48:	2b05      	cmp	r3, #5
 8015c4a:	d106      	bne.n	8015c5a <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8015c4c:	79bb      	ldrb	r3, [r7, #6]
 8015c4e:	4619      	mov	r1, r3
 8015c50:	6838      	ldr	r0, [r7, #0]
 8015c52:	f001 fb6d 	bl	8017330 <RegionEU868Verify>
 8015c56:	4603      	mov	r3, r0
 8015c58:	e000      	b.n	8015c5c <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8015c5a:	2300      	movs	r3, #0
        }
    }
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	3708      	adds	r7, #8
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}

08015c64 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	6039      	str	r1, [r7, #0]
 8015c6e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c70:	79fb      	ldrb	r3, [r7, #7]
 8015c72:	2b05      	cmp	r3, #5
 8015c74:	d103      	bne.n	8015c7e <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8015c76:	6838      	ldr	r0, [r7, #0]
 8015c78:	f001 fbd6 	bl	8017428 <RegionEU868ApplyCFList>
 8015c7c:	e000      	b.n	8015c80 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015c7e:	bf00      	nop
        }
    }
}
 8015c80:	bf00      	nop
 8015c82:	3708      	adds	r7, #8
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	4603      	mov	r3, r0
 8015c90:	6039      	str	r1, [r7, #0]
 8015c92:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c94:	79fb      	ldrb	r3, [r7, #7]
 8015c96:	2b05      	cmp	r3, #5
 8015c98:	d104      	bne.n	8015ca4 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8015c9a:	6838      	ldr	r0, [r7, #0]
 8015c9c:	f001 fc38 	bl	8017510 <RegionEU868ChanMaskSet>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	e000      	b.n	8015ca6 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015ca4:	2300      	movs	r3, #0
        }
    }
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3708      	adds	r7, #8
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}

08015cae <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015cae:	b580      	push	{r7, lr}
 8015cb0:	b082      	sub	sp, #8
 8015cb2:	af00      	add	r7, sp, #0
 8015cb4:	603b      	str	r3, [r7, #0]
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	71fb      	strb	r3, [r7, #7]
 8015cba:	460b      	mov	r3, r1
 8015cbc:	71bb      	strb	r3, [r7, #6]
 8015cbe:	4613      	mov	r3, r2
 8015cc0:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015cc2:	79fb      	ldrb	r3, [r7, #7]
 8015cc4:	2b05      	cmp	r3, #5
 8015cc6:	d107      	bne.n	8015cd8 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015cc8:	7979      	ldrb	r1, [r7, #5]
 8015cca:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	683a      	ldr	r2, [r7, #0]
 8015cd2:	f001 fc47 	bl	8017564 <RegionEU868ComputeRxWindowParameters>
 8015cd6:	e000      	b.n	8015cda <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015cd8:	bf00      	nop
        }
    }
}
 8015cda:	bf00      	nop
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b084      	sub	sp, #16
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	4603      	mov	r3, r0
 8015cea:	60b9      	str	r1, [r7, #8]
 8015cec:	607a      	str	r2, [r7, #4]
 8015cee:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015cf0:	7bfb      	ldrb	r3, [r7, #15]
 8015cf2:	2b05      	cmp	r3, #5
 8015cf4:	d105      	bne.n	8015d02 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8015cf6:	6879      	ldr	r1, [r7, #4]
 8015cf8:	68b8      	ldr	r0, [r7, #8]
 8015cfa:	f001 fc8d 	bl	8017618 <RegionEU868RxConfig>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	e000      	b.n	8015d04 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015d02:	2300      	movs	r3, #0
        }
    }
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3710      	adds	r7, #16
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60b9      	str	r1, [r7, #8]
 8015d14:	607a      	str	r2, [r7, #4]
 8015d16:	603b      	str	r3, [r7, #0]
 8015d18:	4603      	mov	r3, r0
 8015d1a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015d1c:	7bfb      	ldrb	r3, [r7, #15]
 8015d1e:	2b05      	cmp	r3, #5
 8015d20:	d106      	bne.n	8015d30 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8015d22:	683a      	ldr	r2, [r7, #0]
 8015d24:	6879      	ldr	r1, [r7, #4]
 8015d26:	68b8      	ldr	r0, [r7, #8]
 8015d28:	f001 fd46 	bl	80177b8 <RegionEU868TxConfig>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	e000      	b.n	8015d32 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015d30:	2300      	movs	r3, #0
        }
    }
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}

08015d3a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015d3a:	b580      	push	{r7, lr}
 8015d3c:	b086      	sub	sp, #24
 8015d3e:	af02      	add	r7, sp, #8
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	607a      	str	r2, [r7, #4]
 8015d44:	603b      	str	r3, [r7, #0]
 8015d46:	4603      	mov	r3, r0
 8015d48:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015d4a:	7bfb      	ldrb	r3, [r7, #15]
 8015d4c:	2b05      	cmp	r3, #5
 8015d4e:	d109      	bne.n	8015d64 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8015d50:	69fb      	ldr	r3, [r7, #28]
 8015d52:	9300      	str	r3, [sp, #0]
 8015d54:	69bb      	ldr	r3, [r7, #24]
 8015d56:	683a      	ldr	r2, [r7, #0]
 8015d58:	6879      	ldr	r1, [r7, #4]
 8015d5a:	68b8      	ldr	r0, [r7, #8]
 8015d5c:	f001 fdfc 	bl	8017958 <RegionEU868LinkAdrReq>
 8015d60:	4603      	mov	r3, r0
 8015d62:	e000      	b.n	8015d66 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015d64:	2300      	movs	r3, #0
        }
    }
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3710      	adds	r7, #16
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b082      	sub	sp, #8
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	4603      	mov	r3, r0
 8015d76:	6039      	str	r1, [r7, #0]
 8015d78:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015d7a:	79fb      	ldrb	r3, [r7, #7]
 8015d7c:	2b05      	cmp	r3, #5
 8015d7e:	d104      	bne.n	8015d8a <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8015d80:	6838      	ldr	r0, [r7, #0]
 8015d82:	f001 ff0b 	bl	8017b9c <RegionEU868RxParamSetupReq>
 8015d86:	4603      	mov	r3, r0
 8015d88:	e000      	b.n	8015d8c <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015d8a:	2300      	movs	r3, #0
        }
    }
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3708      	adds	r7, #8
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	6039      	str	r1, [r7, #0]
 8015d9e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015da0:	79fb      	ldrb	r3, [r7, #7]
 8015da2:	2b05      	cmp	r3, #5
 8015da4:	d104      	bne.n	8015db0 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8015da6:	6838      	ldr	r0, [r7, #0]
 8015da8:	f001 ff36 	bl	8017c18 <RegionEU868NewChannelReq>
 8015dac:	4603      	mov	r3, r0
 8015dae:	e000      	b.n	8015db2 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015db0:	2300      	movs	r3, #0
        }
    }
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3708      	adds	r7, #8
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b082      	sub	sp, #8
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	6039      	str	r1, [r7, #0]
 8015dc4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015dc6:	79fb      	ldrb	r3, [r7, #7]
 8015dc8:	2b05      	cmp	r3, #5
 8015dca:	d104      	bne.n	8015dd6 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8015dcc:	6838      	ldr	r0, [r7, #0]
 8015dce:	f001 ff81 	bl	8017cd4 <RegionEU868TxParamSetupReq>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	e000      	b.n	8015dd8 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015dd6:	2300      	movs	r3, #0
        }
    }
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3708      	adds	r7, #8
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	4603      	mov	r3, r0
 8015de8:	6039      	str	r1, [r7, #0]
 8015dea:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015dec:	79fb      	ldrb	r3, [r7, #7]
 8015dee:	2b05      	cmp	r3, #5
 8015df0:	d104      	bne.n	8015dfc <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8015df2:	6838      	ldr	r0, [r7, #0]
 8015df4:	f001 ff7a 	bl	8017cec <RegionEU868DlChannelReq>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	e000      	b.n	8015dfe <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015dfc:	2300      	movs	r3, #0
        }
    }
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3708      	adds	r7, #8
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b082      	sub	sp, #8
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	71fb      	strb	r3, [r7, #7]
 8015e10:	460b      	mov	r3, r1
 8015e12:	71bb      	strb	r3, [r7, #6]
 8015e14:	4613      	mov	r3, r2
 8015e16:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015e18:	79fb      	ldrb	r3, [r7, #7]
 8015e1a:	2b05      	cmp	r3, #5
 8015e1c:	d108      	bne.n	8015e30 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8015e1e:	797a      	ldrb	r2, [r7, #5]
 8015e20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015e24:	4611      	mov	r1, r2
 8015e26:	4618      	mov	r0, r3
 8015e28:	f001 ffa4 	bl	8017d74 <RegionEU868AlternateDr>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	e000      	b.n	8015e32 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015e30:	2300      	movs	r3, #0
        }
    }
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3708      	adds	r7, #8
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}

08015e3a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015e3a:	b580      	push	{r7, lr}
 8015e3c:	b084      	sub	sp, #16
 8015e3e:	af00      	add	r7, sp, #0
 8015e40:	60b9      	str	r1, [r7, #8]
 8015e42:	607a      	str	r2, [r7, #4]
 8015e44:	603b      	str	r3, [r7, #0]
 8015e46:	4603      	mov	r3, r0
 8015e48:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015e4a:	7bfb      	ldrb	r3, [r7, #15]
 8015e4c:	2b05      	cmp	r3, #5
 8015e4e:	d107      	bne.n	8015e60 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8015e50:	69bb      	ldr	r3, [r7, #24]
 8015e52:	683a      	ldr	r2, [r7, #0]
 8015e54:	6879      	ldr	r1, [r7, #4]
 8015e56:	68b8      	ldr	r0, [r7, #8]
 8015e58:	f001 ff9c 	bl	8017d94 <RegionEU868NextChannel>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	e000      	b.n	8015e62 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015e60:	2309      	movs	r3, #9
        }
    }
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3710      	adds	r7, #16
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}

08015e6a <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8015e6a:	b580      	push	{r7, lr}
 8015e6c:	b082      	sub	sp, #8
 8015e6e:	af00      	add	r7, sp, #0
 8015e70:	4603      	mov	r3, r0
 8015e72:	6039      	str	r1, [r7, #0]
 8015e74:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015e76:	79fb      	ldrb	r3, [r7, #7]
 8015e78:	2b05      	cmp	r3, #5
 8015e7a:	d103      	bne.n	8015e84 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8015e7c:	6838      	ldr	r0, [r7, #0]
 8015e7e:	f002 f903 	bl	8018088 <RegionEU868SetContinuousWave>
 8015e82:	e000      	b.n	8015e86 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8015e84:	bf00      	nop
        }
    }
}
 8015e86:	bf00      	nop
 8015e88:	3708      	adds	r7, #8
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015e8e:	b590      	push	{r4, r7, lr}
 8015e90:	b083      	sub	sp, #12
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	4604      	mov	r4, r0
 8015e96:	4608      	mov	r0, r1
 8015e98:	4611      	mov	r1, r2
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	4623      	mov	r3, r4
 8015e9e:	71fb      	strb	r3, [r7, #7]
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	71bb      	strb	r3, [r7, #6]
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	717b      	strb	r3, [r7, #5]
 8015ea8:	4613      	mov	r3, r2
 8015eaa:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015eac:	79fb      	ldrb	r3, [r7, #7]
 8015eae:	2b05      	cmp	r3, #5
 8015eb0:	d109      	bne.n	8015ec6 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8015eb2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015eb6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015eba:	79bb      	ldrb	r3, [r7, #6]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f002 f931 	bl	8018124 <RegionEU868ApplyDrOffset>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	e000      	b.n	8015ec8 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015ec6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	370c      	adds	r7, #12
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd90      	pop	{r4, r7, pc}

08015ed0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015ed6:	4b04      	ldr	r3, [pc, #16]	; (8015ee8 <RegionGetVersion+0x18>)
 8015ed8:	607b      	str	r3, [r7, #4]

    return version;
 8015eda:	687b      	ldr	r3, [r7, #4]
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	370c      	adds	r7, #12
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bc80      	pop	{r7}
 8015ee4:	4770      	bx	lr
 8015ee6:	bf00      	nop
 8015ee8:	01010003 	.word	0x01010003

08015eec <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015eec:	b480      	push	{r7}
 8015eee:	b087      	sub	sp, #28
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	60f8      	str	r0, [r7, #12]
 8015ef4:	4608      	mov	r0, r1
 8015ef6:	4639      	mov	r1, r7
 8015ef8:	e881 000c 	stmia.w	r1, {r2, r3}
 8015efc:	4603      	mov	r3, r0
 8015efe:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	881b      	ldrh	r3, [r3, #0]
 8015f04:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015f06:	7afb      	ldrb	r3, [r7, #11]
 8015f08:	f083 0301 	eor.w	r3, r3, #1
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d01b      	beq.n	8015f4a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015f12:	f242 7310 	movw	r3, #10000	; 0x2710
 8015f16:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8015f1e:	d202      	bcs.n	8015f26 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015f20:	2364      	movs	r3, #100	; 0x64
 8015f22:	82bb      	strh	r3, [r7, #20]
 8015f24:	e00b      	b.n	8015f3e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	d803      	bhi.n	8015f38 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015f34:	82bb      	strh	r3, [r7, #20]
 8015f36:	e002      	b.n	8015f3e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015f38:	f242 7310 	movw	r3, #10000	; 0x2710
 8015f3c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015f3e:	8aba      	ldrh	r2, [r7, #20]
 8015f40:	8afb      	ldrh	r3, [r7, #22]
 8015f42:	4293      	cmp	r3, r2
 8015f44:	bf38      	it	cc
 8015f46:	4613      	movcc	r3, r2
 8015f48:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015f4a:	8afb      	ldrh	r3, [r7, #22]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d101      	bne.n	8015f54 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015f50:	2301      	movs	r3, #1
 8015f52:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8015f54:	8afb      	ldrh	r3, [r7, #22]
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	371c      	adds	r7, #28
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bc80      	pop	{r7}
 8015f5e:	4770      	bx	lr

08015f60 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b08e      	sub	sp, #56	; 0x38
 8015f64:	af02      	add	r7, sp, #8
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	4608      	mov	r0, r1
 8015f6a:	4639      	mov	r1, r7
 8015f6c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015f70:	4603      	mov	r3, r0
 8015f72:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	881b      	ldrh	r3, [r3, #0]
 8015f78:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015f7a:	4b4b      	ldr	r3, [pc, #300]	; (80160a8 <SetMaxTimeCredits+0x148>)
 8015f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015f7e:	463b      	mov	r3, r7
 8015f80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f84:	f005 fd66 	bl	801ba54 <SysTimeToMs>
 8015f88:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8015f8a:	f107 0314 	add.w	r3, r7, #20
 8015f8e:	2200      	movs	r2, #0
 8015f90:	601a      	str	r2, [r3, #0]
 8015f92:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015f94:	7af9      	ldrb	r1, [r7, #11]
 8015f96:	463b      	mov	r3, r7
 8015f98:	cb0c      	ldmia	r3, {r2, r3}
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	f7ff ffa6 	bl	8015eec <GetDutyCycle>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8015fa4:	7afb      	ldrb	r3, [r7, #11]
 8015fa6:	f083 0301 	eor.w	r3, r3, #1
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d062      	beq.n	8016076 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015fb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015fb2:	2b64      	cmp	r3, #100	; 0x64
 8015fb4:	d105      	bne.n	8015fc2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015fb6:	4b3c      	ldr	r3, [pc, #240]	; (80160a8 <SetMaxTimeCredits+0x148>)
 8015fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fbe:	609a      	str	r2, [r3, #8]
 8015fc0:	e00b      	b.n	8015fda <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015fc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015fc8:	d105      	bne.n	8015fd6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015fca:	4b38      	ldr	r3, [pc, #224]	; (80160ac <SetMaxTimeCredits+0x14c>)
 8015fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fd2:	609a      	str	r2, [r3, #8]
 8015fd4:	e001      	b.n	8015fda <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015fd6:	4b36      	ldr	r3, [pc, #216]	; (80160b0 <SetMaxTimeCredits+0x150>)
 8015fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	689a      	ldr	r2, [r3, #8]
 8015fde:	f107 031c 	add.w	r3, r7, #28
 8015fe2:	4611      	mov	r1, r2
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f005 fd5d 	bl	801baa4 <SysTimeFromMs>
 8015fea:	f107 0014 	add.w	r0, r7, #20
 8015fee:	6a3b      	ldr	r3, [r7, #32]
 8015ff0:	9300      	str	r3, [sp, #0]
 8015ff2:	69fb      	ldr	r3, [r7, #28]
 8015ff4:	463a      	mov	r2, r7
 8015ff6:	ca06      	ldmia	r2, {r1, r2}
 8015ff8:	f005 fc6d 	bl	801b8d6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015ffc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016000:	f083 0301 	eor.w	r3, r3, #1
 8016004:	b2db      	uxtb	r3, r3
 8016006:	2b00      	cmp	r3, #0
 8016008:	d006      	beq.n	8016018 <SetMaxTimeCredits+0xb8>
 801600a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801600e:	f083 0301 	eor.w	r3, r3, #1
 8016012:	b2db      	uxtb	r3, r3
 8016014:	2b00      	cmp	r3, #0
 8016016:	d108      	bne.n	801602a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801601c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801601e:	429a      	cmp	r2, r3
 8016020:	d103      	bne.n	801602a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016022:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016024:	4a23      	ldr	r2, [pc, #140]	; (80160b4 <SetMaxTimeCredits+0x154>)
 8016026:	4293      	cmp	r3, r2
 8016028:	d92f      	bls.n	801608a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801602e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	4a21      	ldr	r2, [pc, #132]	; (80160b8 <SetMaxTimeCredits+0x158>)
 8016034:	4293      	cmp	r3, r2
 8016036:	d928      	bls.n	801608a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801603e:	3b30      	subs	r3, #48	; 0x30
 8016040:	4a1e      	ldr	r2, [pc, #120]	; (80160bc <SetMaxTimeCredits+0x15c>)
 8016042:	fba2 2303 	umull	r2, r3, r2, r3
 8016046:	0c1b      	lsrs	r3, r3, #16
 8016048:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	4a1c      	ldr	r2, [pc, #112]	; (80160c0 <SetMaxTimeCredits+0x160>)
 801604e:	fb02 f303 	mul.w	r3, r2, r3
 8016052:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801605a:	3330      	adds	r3, #48	; 0x30
 801605c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016062:	f107 0314 	add.w	r3, r7, #20
 8016066:	e893 0003 	ldmia.w	r3, {r0, r1}
 801606a:	f005 fcf3 	bl	801ba54 <SysTimeToMs>
 801606e:	4602      	mov	r2, r0
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	609a      	str	r2, [r3, #8]
 8016074:	e009      	b.n	801608a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016076:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801607a:	f083 0301 	eor.w	r3, r3, #1
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	d002      	beq.n	801608a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016088:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d102      	bne.n	8016098 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016096:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801609c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801609e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3730      	adds	r7, #48	; 0x30
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	001b7740 	.word	0x001b7740
 80160ac:	0112a880 	.word	0x0112a880
 80160b0:	02932e00 	.word	0x02932e00
 80160b4:	0001517f 	.word	0x0001517f
 80160b8:	0001ec2f 	.word	0x0001ec2f
 80160bc:	c22e4507 	.word	0xc22e4507
 80160c0:	00015180 	.word	0x00015180

080160c4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b086      	sub	sp, #24
 80160c8:	af02      	add	r7, sp, #8
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	4608      	mov	r0, r1
 80160ce:	4611      	mov	r1, r2
 80160d0:	461a      	mov	r2, r3
 80160d2:	4603      	mov	r3, r0
 80160d4:	70fb      	strb	r3, [r7, #3]
 80160d6:	460b      	mov	r3, r1
 80160d8:	70bb      	strb	r3, [r7, #2]
 80160da:	4613      	mov	r3, r2
 80160dc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80160de:	78f9      	ldrb	r1, [r7, #3]
 80160e0:	787b      	ldrb	r3, [r7, #1]
 80160e2:	9301      	str	r3, [sp, #4]
 80160e4:	78bb      	ldrb	r3, [r7, #2]
 80160e6:	9300      	str	r3, [sp, #0]
 80160e8:	f107 0318 	add.w	r3, r7, #24
 80160ec:	cb0c      	ldmia	r3, {r2, r3}
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7ff ff36 	bl	8015f60 <SetMaxTimeCredits>
 80160f4:	4603      	mov	r3, r0
 80160f6:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80160f8:	78fb      	ldrb	r3, [r7, #3]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00a      	beq.n	8016114 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	4618      	mov	r0, r3
 8016104:	f006 fae6 	bl	801c6d4 <UTIL_TIMER_GetElapsedTime>
 8016108:	4602      	mov	r2, r0
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	68db      	ldr	r3, [r3, #12]
 801610e:	441a      	add	r2, r3
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	68da      	ldr	r2, [r3, #12]
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	691b      	ldr	r3, [r3, #16]
 801611c:	429a      	cmp	r2, r3
 801611e:	d903      	bls.n	8016128 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	691a      	ldr	r2, [r3, #16]
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6a3a      	ldr	r2, [r7, #32]
 801612c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801612e:	89fb      	ldrh	r3, [r7, #14]
}
 8016130:	4618      	mov	r0, r3
 8016132:	3710      	adds	r7, #16
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016138:	b480      	push	{r7}
 801613a:	b085      	sub	sp, #20
 801613c:	af00      	add	r7, sp, #0
 801613e:	4603      	mov	r3, r0
 8016140:	460a      	mov	r2, r1
 8016142:	80fb      	strh	r3, [r7, #6]
 8016144:	4613      	mov	r3, r2
 8016146:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016148:	2300      	movs	r3, #0
 801614a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801614c:	2300      	movs	r3, #0
 801614e:	73bb      	strb	r3, [r7, #14]
 8016150:	e011      	b.n	8016176 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016152:	88fa      	ldrh	r2, [r7, #6]
 8016154:	7bbb      	ldrb	r3, [r7, #14]
 8016156:	2101      	movs	r1, #1
 8016158:	fa01 f303 	lsl.w	r3, r1, r3
 801615c:	401a      	ands	r2, r3
 801615e:	7bbb      	ldrb	r3, [r7, #14]
 8016160:	2101      	movs	r1, #1
 8016162:	fa01 f303 	lsl.w	r3, r1, r3
 8016166:	429a      	cmp	r2, r3
 8016168:	d102      	bne.n	8016170 <CountChannels+0x38>
        {
            nbActiveBits++;
 801616a:	7bfb      	ldrb	r3, [r7, #15]
 801616c:	3301      	adds	r3, #1
 801616e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016170:	7bbb      	ldrb	r3, [r7, #14]
 8016172:	3301      	adds	r3, #1
 8016174:	73bb      	strb	r3, [r7, #14]
 8016176:	7bba      	ldrb	r2, [r7, #14]
 8016178:	797b      	ldrb	r3, [r7, #5]
 801617a:	429a      	cmp	r2, r3
 801617c:	d3e9      	bcc.n	8016152 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016180:	4618      	mov	r0, r3
 8016182:	3714      	adds	r7, #20
 8016184:	46bd      	mov	sp, r7
 8016186:	bc80      	pop	{r7}
 8016188:	4770      	bx	lr

0801618a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801618a:	b580      	push	{r7, lr}
 801618c:	b084      	sub	sp, #16
 801618e:	af00      	add	r7, sp, #0
 8016190:	6039      	str	r1, [r7, #0]
 8016192:	4611      	mov	r1, r2
 8016194:	461a      	mov	r2, r3
 8016196:	4603      	mov	r3, r0
 8016198:	71fb      	strb	r3, [r7, #7]
 801619a:	460b      	mov	r3, r1
 801619c:	71bb      	strb	r3, [r7, #6]
 801619e:	4613      	mov	r3, r2
 80161a0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80161a2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80161a6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80161aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80161ae:	4618      	mov	r0, r3
 80161b0:	f000 f85d 	bl	801626e <RegionCommonValueInRange>
 80161b4:	4603      	mov	r3, r0
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d101      	bne.n	80161be <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80161ba:	2300      	movs	r3, #0
 80161bc:	e053      	b.n	8016266 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80161be:	2300      	movs	r3, #0
 80161c0:	73fb      	strb	r3, [r7, #15]
 80161c2:	2300      	movs	r3, #0
 80161c4:	73bb      	strb	r3, [r7, #14]
 80161c6:	e049      	b.n	801625c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80161c8:	2300      	movs	r3, #0
 80161ca:	737b      	strb	r3, [r7, #13]
 80161cc:	e03d      	b.n	801624a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80161ce:	7bbb      	ldrb	r3, [r7, #14]
 80161d0:	005b      	lsls	r3, r3, #1
 80161d2:	683a      	ldr	r2, [r7, #0]
 80161d4:	4413      	add	r3, r2
 80161d6:	881b      	ldrh	r3, [r3, #0]
 80161d8:	461a      	mov	r2, r3
 80161da:	7b7b      	ldrb	r3, [r7, #13]
 80161dc:	fa42 f303 	asr.w	r3, r2, r3
 80161e0:	f003 0301 	and.w	r3, r3, #1
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d02d      	beq.n	8016244 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80161e8:	7bfa      	ldrb	r2, [r7, #15]
 80161ea:	7b7b      	ldrb	r3, [r7, #13]
 80161ec:	4413      	add	r3, r2
 80161ee:	461a      	mov	r2, r3
 80161f0:	4613      	mov	r3, r2
 80161f2:	005b      	lsls	r3, r3, #1
 80161f4:	4413      	add	r3, r2
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	461a      	mov	r2, r3
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	4413      	add	r3, r2
 80161fe:	7a1b      	ldrb	r3, [r3, #8]
 8016200:	f343 0303 	sbfx	r3, r3, #0, #4
 8016204:	b25b      	sxtb	r3, r3
 8016206:	f003 030f 	and.w	r3, r3, #15
 801620a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801620c:	7bfa      	ldrb	r2, [r7, #15]
 801620e:	7b7b      	ldrb	r3, [r7, #13]
 8016210:	4413      	add	r3, r2
 8016212:	461a      	mov	r2, r3
 8016214:	4613      	mov	r3, r2
 8016216:	005b      	lsls	r3, r3, #1
 8016218:	4413      	add	r3, r2
 801621a:	009b      	lsls	r3, r3, #2
 801621c:	461a      	mov	r2, r3
 801621e:	69fb      	ldr	r3, [r7, #28]
 8016220:	4413      	add	r3, r2
 8016222:	7a1b      	ldrb	r3, [r3, #8]
 8016224:	f343 1303 	sbfx	r3, r3, #4, #4
 8016228:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801622a:	f003 030f 	and.w	r3, r3, #15
 801622e:	b25a      	sxtb	r2, r3
 8016230:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016234:	4618      	mov	r0, r3
 8016236:	f000 f81a 	bl	801626e <RegionCommonValueInRange>
 801623a:	4603      	mov	r3, r0
 801623c:	2b01      	cmp	r3, #1
 801623e:	d101      	bne.n	8016244 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016240:	2301      	movs	r3, #1
 8016242:	e010      	b.n	8016266 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016244:	7b7b      	ldrb	r3, [r7, #13]
 8016246:	3301      	adds	r3, #1
 8016248:	737b      	strb	r3, [r7, #13]
 801624a:	7b7b      	ldrb	r3, [r7, #13]
 801624c:	2b0f      	cmp	r3, #15
 801624e:	d9be      	bls.n	80161ce <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016250:	7bfb      	ldrb	r3, [r7, #15]
 8016252:	3310      	adds	r3, #16
 8016254:	73fb      	strb	r3, [r7, #15]
 8016256:	7bbb      	ldrb	r3, [r7, #14]
 8016258:	3301      	adds	r3, #1
 801625a:	73bb      	strb	r3, [r7, #14]
 801625c:	7bfa      	ldrb	r2, [r7, #15]
 801625e:	79fb      	ldrb	r3, [r7, #7]
 8016260:	429a      	cmp	r2, r3
 8016262:	d3b1      	bcc.n	80161c8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016264:	2300      	movs	r3, #0
}
 8016266:	4618      	mov	r0, r3
 8016268:	3710      	adds	r7, #16
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801626e:	b480      	push	{r7}
 8016270:	b083      	sub	sp, #12
 8016272:	af00      	add	r7, sp, #0
 8016274:	4603      	mov	r3, r0
 8016276:	71fb      	strb	r3, [r7, #7]
 8016278:	460b      	mov	r3, r1
 801627a:	71bb      	strb	r3, [r7, #6]
 801627c:	4613      	mov	r3, r2
 801627e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016280:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016284:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016288:	429a      	cmp	r2, r3
 801628a:	db07      	blt.n	801629c <RegionCommonValueInRange+0x2e>
 801628c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016290:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016294:	429a      	cmp	r2, r3
 8016296:	dc01      	bgt.n	801629c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016298:	2301      	movs	r3, #1
 801629a:	e000      	b.n	801629e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801629c:	2300      	movs	r3, #0
}
 801629e:	4618      	mov	r0, r3
 80162a0:	370c      	adds	r7, #12
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bc80      	pop	{r7}
 80162a6:	4770      	bx	lr

080162a8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80162a8:	b480      	push	{r7}
 80162aa:	b085      	sub	sp, #20
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	460b      	mov	r3, r1
 80162b2:	70fb      	strb	r3, [r7, #3]
 80162b4:	4613      	mov	r3, r2
 80162b6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80162b8:	78fb      	ldrb	r3, [r7, #3]
 80162ba:	091b      	lsrs	r3, r3, #4
 80162bc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80162be:	78bb      	ldrb	r3, [r7, #2]
 80162c0:	091b      	lsrs	r3, r3, #4
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	7bfa      	ldrb	r2, [r7, #15]
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d803      	bhi.n	80162d2 <RegionCommonChanDisable+0x2a>
 80162ca:	78fa      	ldrb	r2, [r7, #3]
 80162cc:	78bb      	ldrb	r3, [r7, #2]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d301      	bcc.n	80162d6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80162d2:	2300      	movs	r3, #0
 80162d4:	e017      	b.n	8016306 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80162d6:	7bfb      	ldrb	r3, [r7, #15]
 80162d8:	005b      	lsls	r3, r3, #1
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	4413      	add	r3, r2
 80162de:	881b      	ldrh	r3, [r3, #0]
 80162e0:	b21a      	sxth	r2, r3
 80162e2:	78fb      	ldrb	r3, [r7, #3]
 80162e4:	f003 030f 	and.w	r3, r3, #15
 80162e8:	2101      	movs	r1, #1
 80162ea:	fa01 f303 	lsl.w	r3, r1, r3
 80162ee:	b21b      	sxth	r3, r3
 80162f0:	43db      	mvns	r3, r3
 80162f2:	b21b      	sxth	r3, r3
 80162f4:	4013      	ands	r3, r2
 80162f6:	b219      	sxth	r1, r3
 80162f8:	7bfb      	ldrb	r3, [r7, #15]
 80162fa:	005b      	lsls	r3, r3, #1
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	4413      	add	r3, r2
 8016300:	b28a      	uxth	r2, r1
 8016302:	801a      	strh	r2, [r3, #0]

    return true;
 8016304:	2301      	movs	r3, #1
}
 8016306:	4618      	mov	r0, r3
 8016308:	3714      	adds	r7, #20
 801630a:	46bd      	mov	sp, r7
 801630c:	bc80      	pop	{r7}
 801630e:	4770      	bx	lr

08016310 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b084      	sub	sp, #16
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	460b      	mov	r3, r1
 801631a:	70fb      	strb	r3, [r7, #3]
 801631c:	4613      	mov	r3, r2
 801631e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016320:	2300      	movs	r3, #0
 8016322:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d101      	bne.n	801632e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801632a:	2300      	movs	r3, #0
 801632c:	e018      	b.n	8016360 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801632e:	78fb      	ldrb	r3, [r7, #3]
 8016330:	73bb      	strb	r3, [r7, #14]
 8016332:	e010      	b.n	8016356 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016334:	7bbb      	ldrb	r3, [r7, #14]
 8016336:	005b      	lsls	r3, r3, #1
 8016338:	687a      	ldr	r2, [r7, #4]
 801633a:	4413      	add	r3, r2
 801633c:	881b      	ldrh	r3, [r3, #0]
 801633e:	2110      	movs	r1, #16
 8016340:	4618      	mov	r0, r3
 8016342:	f7ff fef9 	bl	8016138 <CountChannels>
 8016346:	4603      	mov	r3, r0
 8016348:	461a      	mov	r2, r3
 801634a:	7bfb      	ldrb	r3, [r7, #15]
 801634c:	4413      	add	r3, r2
 801634e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016350:	7bbb      	ldrb	r3, [r7, #14]
 8016352:	3301      	adds	r3, #1
 8016354:	73bb      	strb	r3, [r7, #14]
 8016356:	7bba      	ldrb	r2, [r7, #14]
 8016358:	78bb      	ldrb	r3, [r7, #2]
 801635a:	429a      	cmp	r2, r3
 801635c:	d3ea      	bcc.n	8016334 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801635e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016360:	4618      	mov	r0, r3
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016368:	b480      	push	{r7}
 801636a:	b087      	sub	sp, #28
 801636c:	af00      	add	r7, sp, #0
 801636e:	60f8      	str	r0, [r7, #12]
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	4613      	mov	r3, r2
 8016374:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d016      	beq.n	80163aa <RegionCommonChanMaskCopy+0x42>
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d013      	beq.n	80163aa <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016382:	2300      	movs	r3, #0
 8016384:	75fb      	strb	r3, [r7, #23]
 8016386:	e00c      	b.n	80163a2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016388:	7dfb      	ldrb	r3, [r7, #23]
 801638a:	005b      	lsls	r3, r3, #1
 801638c:	68ba      	ldr	r2, [r7, #8]
 801638e:	441a      	add	r2, r3
 8016390:	7dfb      	ldrb	r3, [r7, #23]
 8016392:	005b      	lsls	r3, r3, #1
 8016394:	68f9      	ldr	r1, [r7, #12]
 8016396:	440b      	add	r3, r1
 8016398:	8812      	ldrh	r2, [r2, #0]
 801639a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801639c:	7dfb      	ldrb	r3, [r7, #23]
 801639e:	3301      	adds	r3, #1
 80163a0:	75fb      	strb	r3, [r7, #23]
 80163a2:	7dfa      	ldrb	r2, [r7, #23]
 80163a4:	79fb      	ldrb	r3, [r7, #7]
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d3ee      	bcc.n	8016388 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80163aa:	bf00      	nop
 80163ac:	371c      	adds	r7, #28
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bc80      	pop	{r7}
 80163b2:	4770      	bx	lr

080163b4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80163b4:	b082      	sub	sp, #8
 80163b6:	b580      	push	{r7, lr}
 80163b8:	b086      	sub	sp, #24
 80163ba:	af00      	add	r7, sp, #0
 80163bc:	60f8      	str	r0, [r7, #12]
 80163be:	60b9      	str	r1, [r7, #8]
 80163c0:	627b      	str	r3, [r7, #36]	; 0x24
 80163c2:	4613      	mov	r3, r2
 80163c4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80163c6:	79f9      	ldrb	r1, [r7, #7]
 80163c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163cc:	cb0c      	ldmia	r3, {r2, r3}
 80163ce:	68f8      	ldr	r0, [r7, #12]
 80163d0:	f7ff fd8c 	bl	8015eec <GetDutyCycle>
 80163d4:	4603      	mov	r3, r0
 80163d6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	68da      	ldr	r2, [r3, #12]
 80163dc:	8afb      	ldrh	r3, [r7, #22]
 80163de:	68b9      	ldr	r1, [r7, #8]
 80163e0:	fb01 f303 	mul.w	r3, r1, r3
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d909      	bls.n	80163fc <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	68da      	ldr	r2, [r3, #12]
 80163ec:	8afb      	ldrh	r3, [r7, #22]
 80163ee:	68b9      	ldr	r1, [r7, #8]
 80163f0:	fb01 f303 	mul.w	r3, r1, r3
 80163f4:	1ad2      	subs	r2, r2, r3
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80163fa:	e002      	b.n	8016402 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2200      	movs	r2, #0
 8016400:	60da      	str	r2, [r3, #12]
}
 8016402:	bf00      	nop
 8016404:	3718      	adds	r7, #24
 8016406:	46bd      	mov	sp, r7
 8016408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801640c:	b002      	add	sp, #8
 801640e:	4770      	bx	lr

08016410 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016412:	b08f      	sub	sp, #60	; 0x3c
 8016414:	af04      	add	r7, sp, #16
 8016416:	6039      	str	r1, [r7, #0]
 8016418:	4611      	mov	r1, r2
 801641a:	461a      	mov	r2, r3
 801641c:	4603      	mov	r3, r0
 801641e:	71fb      	strb	r3, [r7, #7]
 8016420:	460b      	mov	r3, r1
 8016422:	71bb      	strb	r3, [r7, #6]
 8016424:	4613      	mov	r3, r2
 8016426:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016428:	f04f 33ff 	mov.w	r3, #4294967295
 801642c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801642e:	f006 f93f 	bl	801c6b0 <UTIL_TIMER_GetCurrentTime>
 8016432:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016434:	2300      	movs	r3, #0
 8016436:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016438:	2301      	movs	r3, #1
 801643a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801643c:	2300      	movs	r3, #0
 801643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016442:	2300      	movs	r3, #0
 8016444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016448:	e0ba      	b.n	80165c0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801644a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801644e:	4613      	mov	r3, r2
 8016450:	005b      	lsls	r3, r3, #1
 8016452:	4413      	add	r3, r2
 8016454:	00db      	lsls	r3, r3, #3
 8016456:	461a      	mov	r2, r3
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	189c      	adds	r4, r3, r2
 801645c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8016460:	797a      	ldrb	r2, [r7, #5]
 8016462:	79fd      	ldrb	r5, [r7, #7]
 8016464:	69fb      	ldr	r3, [r7, #28]
 8016466:	9302      	str	r3, [sp, #8]
 8016468:	46ec      	mov	ip, sp
 801646a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801646e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016472:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016476:	4633      	mov	r3, r6
 8016478:	4629      	mov	r1, r5
 801647a:	4620      	mov	r0, r4
 801647c:	f7ff fe22 	bl	80160c4 <UpdateTimeCredits>
 8016480:	4603      	mov	r3, r0
 8016482:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016484:	8afa      	ldrh	r2, [r7, #22]
 8016486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016488:	fb02 f303 	mul.w	r3, r2, r3
 801648c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801648e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016492:	4613      	mov	r3, r2
 8016494:	005b      	lsls	r3, r3, #1
 8016496:	4413      	add	r3, r2
 8016498:	00db      	lsls	r3, r3, #3
 801649a:	461a      	mov	r2, r3
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	4413      	add	r3, r2
 80164a0:	68db      	ldr	r3, [r3, #12]
 80164a2:	69ba      	ldr	r2, [r7, #24]
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d308      	bcc.n	80164ba <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80164a8:	797b      	ldrb	r3, [r7, #5]
 80164aa:	f083 0301 	eor.w	r3, r3, #1
 80164ae:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d013      	beq.n	80164dc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80164b4:	79fb      	ldrb	r3, [r7, #7]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d010      	beq.n	80164dc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80164ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80164be:	4613      	mov	r3, r2
 80164c0:	005b      	lsls	r3, r3, #1
 80164c2:	4413      	add	r3, r2
 80164c4:	00db      	lsls	r3, r3, #3
 80164c6:	461a      	mov	r2, r3
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	4413      	add	r3, r2
 80164cc:	2201      	movs	r2, #1
 80164ce:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80164d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80164d4:	3301      	adds	r3, #1
 80164d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80164da:	e06c      	b.n	80165b6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80164dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80164e0:	4613      	mov	r3, r2
 80164e2:	005b      	lsls	r3, r3, #1
 80164e4:	4413      	add	r3, r2
 80164e6:	00db      	lsls	r3, r3, #3
 80164e8:	461a      	mov	r2, r3
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	4413      	add	r3, r2
 80164ee:	2200      	movs	r2, #0
 80164f0:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80164f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80164f6:	4613      	mov	r3, r2
 80164f8:	005b      	lsls	r3, r3, #1
 80164fa:	4413      	add	r3, r2
 80164fc:	00db      	lsls	r3, r3, #3
 80164fe:	461a      	mov	r2, r3
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	4413      	add	r3, r2
 8016504:	691b      	ldr	r3, [r3, #16]
 8016506:	69ba      	ldr	r2, [r7, #24]
 8016508:	429a      	cmp	r2, r3
 801650a:	d215      	bcs.n	8016538 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801650c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016510:	4613      	mov	r3, r2
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	4413      	add	r3, r2
 8016516:	00db      	lsls	r3, r3, #3
 8016518:	461a      	mov	r2, r3
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	4413      	add	r3, r2
 801651e:	68db      	ldr	r3, [r3, #12]
 8016520:	69ba      	ldr	r2, [r7, #24]
 8016522:	1ad3      	subs	r3, r2, r3
 8016524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016526:	4293      	cmp	r3, r2
 8016528:	bf28      	it	cs
 801652a:	4613      	movcs	r3, r2
 801652c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801652e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016532:	3301      	adds	r3, #1
 8016534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016538:	79fb      	ldrb	r3, [r7, #7]
 801653a:	f083 0301 	eor.w	r3, r3, #1
 801653e:	b2db      	uxtb	r3, r3
 8016540:	2b00      	cmp	r3, #0
 8016542:	d038      	beq.n	80165b6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016544:	2300      	movs	r3, #0
 8016546:	60fb      	str	r3, [r7, #12]
 8016548:	2300      	movs	r3, #0
 801654a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801654c:	8afb      	ldrh	r3, [r7, #22]
 801654e:	2b64      	cmp	r3, #100	; 0x64
 8016550:	d103      	bne.n	801655a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8016552:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8016556:	60fb      	str	r3, [r7, #12]
 8016558:	e009      	b.n	801656e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801655a:	8afb      	ldrh	r3, [r7, #22]
 801655c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016560:	d103      	bne.n	801656a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8016562:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8016566:	60fb      	str	r3, [r7, #12]
 8016568:	e001      	b.n	801656e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801656a:	4b1e      	ldr	r3, [pc, #120]	; (80165e4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801656c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801656e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016570:	4a1c      	ldr	r2, [pc, #112]	; (80165e4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016572:	4293      	cmp	r3, r2
 8016574:	d90e      	bls.n	8016594 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016576:	68fa      	ldr	r2, [r7, #12]
 8016578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801657a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801657e:	3b30      	subs	r3, #48	; 0x30
 8016580:	4919      	ldr	r1, [pc, #100]	; (80165e8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8016582:	fba1 1303 	umull	r1, r3, r1, r3
 8016586:	0c1b      	lsrs	r3, r3, #16
 8016588:	3301      	adds	r3, #1
 801658a:	4918      	ldr	r1, [pc, #96]	; (80165ec <RegionCommonUpdateBandTimeOff+0x1dc>)
 801658c:	fb01 f303 	mul.w	r3, r1, r3
 8016590:	4413      	add	r3, r2
 8016592:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016594:	f107 000c 	add.w	r0, r7, #12
 8016598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801659a:	9300      	str	r3, [sp, #0]
 801659c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801659e:	f107 020c 	add.w	r2, r7, #12
 80165a2:	ca06      	ldmia	r2, {r1, r2}
 80165a4:	f005 f997 	bl	801b8d6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80165a8:	f107 030c 	add.w	r3, r7, #12
 80165ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80165b0:	f005 fa50 	bl	801ba54 <SysTimeToMs>
 80165b4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80165b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80165ba:	3301      	adds	r3, #1
 80165bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80165c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80165c4:	79bb      	ldrb	r3, [r7, #6]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	f4ff af3f 	bcc.w	801644a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80165cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d102      	bne.n	80165da <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80165d4:	f04f 33ff 	mov.w	r3, #4294967295
 80165d8:	e000      	b.n	80165dc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80165da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80165dc:	4618      	mov	r0, r3
 80165de:	372c      	adds	r7, #44	; 0x2c
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165e4:	0001ec30 	.word	0x0001ec30
 80165e8:	c22e4507 	.word	0xc22e4507
 80165ec:	00015180 	.word	0x00015180

080165f0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80165f0:	b480      	push	{r7}
 80165f2:	b085      	sub	sp, #20
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80165fa:	2300      	movs	r3, #0
 80165fc:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	2b03      	cmp	r3, #3
 8016604:	d13f      	bne.n	8016686 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	3301      	adds	r3, #1
 801660a:	781b      	ldrb	r3, [r3, #0]
 801660c:	b25a      	sxtb	r2, r3
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016618:	f003 030f 	and.w	r3, r3, #15
 801661c:	b25a      	sxtb	r2, r3
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016628:	b2db      	uxtb	r3, r3
 801662a:	091b      	lsrs	r3, r3, #4
 801662c:	b2db      	uxtb	r3, r3
 801662e:	b25a      	sxtb	r2, r3
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	3302      	adds	r3, #2
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	b29a      	uxth	r2, r3
 801663c:	683b      	ldr	r3, [r7, #0]
 801663e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	889b      	ldrh	r3, [r3, #4]
 8016644:	b21a      	sxth	r2, r3
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	3303      	adds	r3, #3
 801664a:	781b      	ldrb	r3, [r3, #0]
 801664c:	021b      	lsls	r3, r3, #8
 801664e:	b21b      	sxth	r3, r3
 8016650:	4313      	orrs	r3, r2
 8016652:	b21b      	sxth	r3, r3
 8016654:	b29a      	uxth	r2, r3
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	791a      	ldrb	r2, [r3, #4]
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	781b      	ldrb	r3, [r3, #0]
 8016666:	091b      	lsrs	r3, r3, #4
 8016668:	b2db      	uxtb	r3, r3
 801666a:	f003 0307 	and.w	r3, r3, #7
 801666e:	b2da      	uxtb	r2, r3
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	f003 030f 	and.w	r3, r3, #15
 801667c:	b2da      	uxtb	r2, r3
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016682:	2305      	movs	r3, #5
 8016684:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016686:	7bfb      	ldrb	r3, [r7, #15]
}
 8016688:	4618      	mov	r0, r3
 801668a:	3714      	adds	r7, #20
 801668c:	46bd      	mov	sp, r7
 801668e:	bc80      	pop	{r7}
 8016690:	4770      	bx	lr

08016692 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016692:	b5b0      	push	{r4, r5, r7, lr}
 8016694:	b088      	sub	sp, #32
 8016696:	af02      	add	r7, sp, #8
 8016698:	60f8      	str	r0, [r7, #12]
 801669a:	60b9      	str	r1, [r7, #8]
 801669c:	607a      	str	r2, [r7, #4]
 801669e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	791b      	ldrb	r3, [r3, #4]
 80166a4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	799b      	ldrb	r3, [r3, #6]
 80166aa:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	79db      	ldrb	r3, [r3, #7]
 80166b0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	7a1b      	ldrb	r3, [r3, #8]
 80166b6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	795b      	ldrb	r3, [r3, #5]
 80166bc:	f083 0301 	eor.w	r3, r3, #1
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d008      	beq.n	80166d8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	7adb      	ldrb	r3, [r3, #11]
 80166ca:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	7a5b      	ldrb	r3, [r3, #9]
 80166d0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	7a9b      	ldrb	r3, [r3, #10]
 80166d6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80166d8:	7dfb      	ldrb	r3, [r7, #23]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d04a      	beq.n	8016774 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80166de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80166e2:	2b0f      	cmp	r3, #15
 80166e4:	d103      	bne.n	80166ee <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	7a5b      	ldrb	r3, [r3, #9]
 80166ea:	75bb      	strb	r3, [r7, #22]
 80166ec:	e01d      	b.n	801672a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	7b18      	ldrb	r0, [r3, #12]
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	6919      	ldr	r1, [r3, #16]
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016702:	68fa      	ldr	r2, [r7, #12]
 8016704:	6992      	ldr	r2, [r2, #24]
 8016706:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801670a:	9201      	str	r2, [sp, #4]
 801670c:	9300      	str	r3, [sp, #0]
 801670e:	462b      	mov	r3, r5
 8016710:	4622      	mov	r2, r4
 8016712:	f7ff fd3a 	bl	801618a <RegionCommonChanVerifyDr>
 8016716:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016718:	f083 0301 	eor.w	r3, r3, #1
 801671c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801671e:	2b00      	cmp	r3, #0
 8016720:	d003      	beq.n	801672a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016722:	7dfb      	ldrb	r3, [r7, #23]
 8016724:	f023 0302 	bic.w	r3, r3, #2
 8016728:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801672a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801672e:	2b0f      	cmp	r3, #15
 8016730:	d103      	bne.n	801673a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	7a9b      	ldrb	r3, [r3, #10]
 8016736:	757b      	strb	r3, [r7, #21]
 8016738:	e01c      	b.n	8016774 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016746:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801674a:	4618      	mov	r0, r3
 801674c:	f7ff fd8f 	bl	801626e <RegionCommonValueInRange>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d10e      	bne.n	8016774 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801675c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016760:	429a      	cmp	r2, r3
 8016762:	da03      	bge.n	801676c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	7f5b      	ldrb	r3, [r3, #29]
 8016768:	757b      	strb	r3, [r7, #21]
 801676a:	e003      	b.n	8016774 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801676c:	7dfb      	ldrb	r3, [r7, #23]
 801676e:	f023 0304 	bic.w	r3, r3, #4
 8016772:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016774:	7dfb      	ldrb	r3, [r7, #23]
 8016776:	2b07      	cmp	r3, #7
 8016778:	d105      	bne.n	8016786 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801677a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d101      	bne.n	8016786 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016782:	2301      	movs	r3, #1
 8016784:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	7dba      	ldrb	r2, [r7, #22]
 801678a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	7d7a      	ldrb	r2, [r7, #21]
 8016790:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016792:	7d3a      	ldrb	r2, [r7, #20]
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	701a      	strb	r2, [r3, #0]

    return status;
 8016798:	7dfb      	ldrb	r3, [r7, #23]
}
 801679a:	4618      	mov	r0, r3
 801679c:	3718      	adds	r7, #24
 801679e:	46bd      	mov	sp, r7
 80167a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080167a4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	4603      	mov	r3, r0
 80167ac:	6039      	str	r1, [r7, #0]
 80167ae:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80167b0:	79fb      	ldrb	r3, [r7, #7]
 80167b2:	4a06      	ldr	r2, [pc, #24]	; (80167cc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80167b4:	fa02 f303 	lsl.w	r3, r2, r3
 80167b8:	461a      	mov	r2, r3
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bc80      	pop	{r7}
 80167c8:	4770      	bx	lr
 80167ca:	bf00      	nop
 80167cc:	000f4240 	.word	0x000f4240

080167d0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80167d0:	b480      	push	{r7}
 80167d2:	b083      	sub	sp, #12
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	4603      	mov	r3, r0
 80167d8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80167da:	79fb      	ldrb	r3, [r7, #7]
 80167dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80167e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	370c      	adds	r7, #12
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bc80      	pop	{r7}
 80167ec:	4770      	bx	lr
	...

080167f0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80167f0:	b480      	push	{r7}
 80167f2:	b085      	sub	sp, #20
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	607a      	str	r2, [r7, #4]
 80167fa:	603b      	str	r3, [r7, #0]
 80167fc:	460b      	mov	r3, r1
 80167fe:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016800:	7afa      	ldrb	r2, [r7, #11]
 8016802:	7afb      	ldrb	r3, [r7, #11]
 8016804:	3b04      	subs	r3, #4
 8016806:	4619      	mov	r1, r3
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	fb03 f101 	mul.w	r1, r3, r1
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016814:	fb00 f303 	mul.w	r3, r0, r3
 8016818:	440b      	add	r3, r1
 801681a:	005b      	lsls	r3, r3, #1
 801681c:	2b00      	cmp	r3, #0
 801681e:	d013      	beq.n	8016848 <RegionCommonComputeRxWindowParameters+0x58>
 8016820:	7afb      	ldrb	r3, [r7, #11]
 8016822:	3b04      	subs	r3, #4
 8016824:	4619      	mov	r1, r3
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	fb03 f101 	mul.w	r1, r3, r1
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016832:	fb00 f303 	mul.w	r3, r0, r3
 8016836:	440b      	add	r3, r1
 8016838:	0059      	lsls	r1, r3, #1
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	440b      	add	r3, r1
 801683e:	1e59      	subs	r1, r3, #1
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	fbb1 f3f3 	udiv	r3, r1, r3
 8016846:	e00f      	b.n	8016868 <RegionCommonComputeRxWindowParameters+0x78>
 8016848:	7afb      	ldrb	r3, [r7, #11]
 801684a:	3b04      	subs	r3, #4
 801684c:	4619      	mov	r1, r3
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	fb03 f101 	mul.w	r1, r3, r1
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801685a:	fb00 f303 	mul.w	r3, r0, r3
 801685e:	440b      	add	r3, r1
 8016860:	0059      	lsls	r1, r3, #1
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	fbb1 f3f3 	udiv	r3, r1, r3
 8016868:	429a      	cmp	r2, r3
 801686a:	bf38      	it	cc
 801686c:	461a      	movcc	r2, r3
 801686e:	69bb      	ldr	r3, [r7, #24]
 8016870:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	009b      	lsls	r3, r3, #2
 8016876:	4619      	mov	r1, r3
 8016878:	69bb      	ldr	r3, [r7, #24]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	68fa      	ldr	r2, [r7, #12]
 801687e:	fb02 f303 	mul.w	r3, r2, r3
 8016882:	2b00      	cmp	r3, #0
 8016884:	d007      	beq.n	8016896 <RegionCommonComputeRxWindowParameters+0xa6>
 8016886:	69bb      	ldr	r3, [r7, #24]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	68fa      	ldr	r2, [r7, #12]
 801688c:	fb02 f303 	mul.w	r3, r2, r3
 8016890:	3301      	adds	r3, #1
 8016892:	085b      	lsrs	r3, r3, #1
 8016894:	e005      	b.n	80168a2 <RegionCommonComputeRxWindowParameters+0xb2>
 8016896:	69bb      	ldr	r3, [r7, #24]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	68fa      	ldr	r2, [r7, #12]
 801689c:	fb02 f303 	mul.w	r3, r2, r3
 80168a0:	085b      	lsrs	r3, r3, #1
 80168a2:	1acb      	subs	r3, r1, r3
 80168a4:	683a      	ldr	r2, [r7, #0]
 80168a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80168aa:	fb01 f202 	mul.w	r2, r1, r2
 80168ae:	1a9b      	subs	r3, r3, r2
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	dd27      	ble.n	8016904 <RegionCommonComputeRxWindowParameters+0x114>
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	009b      	lsls	r3, r3, #2
 80168b8:	4619      	mov	r1, r3
 80168ba:	69bb      	ldr	r3, [r7, #24]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	68fa      	ldr	r2, [r7, #12]
 80168c0:	fb02 f303 	mul.w	r3, r2, r3
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d007      	beq.n	80168d8 <RegionCommonComputeRxWindowParameters+0xe8>
 80168c8:	69bb      	ldr	r3, [r7, #24]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	68fa      	ldr	r2, [r7, #12]
 80168ce:	fb02 f303 	mul.w	r3, r2, r3
 80168d2:	3301      	adds	r3, #1
 80168d4:	085b      	lsrs	r3, r3, #1
 80168d6:	e005      	b.n	80168e4 <RegionCommonComputeRxWindowParameters+0xf4>
 80168d8:	69bb      	ldr	r3, [r7, #24]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	68fa      	ldr	r2, [r7, #12]
 80168de:	fb02 f303 	mul.w	r3, r2, r3
 80168e2:	085b      	lsrs	r3, r3, #1
 80168e4:	1acb      	subs	r3, r1, r3
 80168e6:	683a      	ldr	r2, [r7, #0]
 80168e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80168ec:	fb01 f202 	mul.w	r2, r1, r2
 80168f0:	1a9b      	subs	r3, r3, r2
 80168f2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80168f6:	4a19      	ldr	r2, [pc, #100]	; (801695c <RegionCommonComputeRxWindowParameters+0x16c>)
 80168f8:	fb82 1203 	smull	r1, r2, r2, r3
 80168fc:	1192      	asrs	r2, r2, #6
 80168fe:	17db      	asrs	r3, r3, #31
 8016900:	1ad3      	subs	r3, r2, r3
 8016902:	e024      	b.n	801694e <RegionCommonComputeRxWindowParameters+0x15e>
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	009b      	lsls	r3, r3, #2
 8016908:	4619      	mov	r1, r3
 801690a:	69bb      	ldr	r3, [r7, #24]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	68fa      	ldr	r2, [r7, #12]
 8016910:	fb02 f303 	mul.w	r3, r2, r3
 8016914:	2b00      	cmp	r3, #0
 8016916:	d007      	beq.n	8016928 <RegionCommonComputeRxWindowParameters+0x138>
 8016918:	69bb      	ldr	r3, [r7, #24]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	fb02 f303 	mul.w	r3, r2, r3
 8016922:	3301      	adds	r3, #1
 8016924:	085b      	lsrs	r3, r3, #1
 8016926:	e005      	b.n	8016934 <RegionCommonComputeRxWindowParameters+0x144>
 8016928:	69bb      	ldr	r3, [r7, #24]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	fb02 f303 	mul.w	r3, r2, r3
 8016932:	085b      	lsrs	r3, r3, #1
 8016934:	1acb      	subs	r3, r1, r3
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801693c:	fb01 f202 	mul.w	r2, r1, r2
 8016940:	1a9b      	subs	r3, r3, r2
 8016942:	4a06      	ldr	r2, [pc, #24]	; (801695c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016944:	fb82 1203 	smull	r1, r2, r2, r3
 8016948:	1192      	asrs	r2, r2, #6
 801694a:	17db      	asrs	r3, r3, #31
 801694c:	1ad3      	subs	r3, r2, r3
 801694e:	69fa      	ldr	r2, [r7, #28]
 8016950:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016952:	bf00      	nop
 8016954:	3714      	adds	r7, #20
 8016956:	46bd      	mov	sp, r7
 8016958:	bc80      	pop	{r7}
 801695a:	4770      	bx	lr
 801695c:	10624dd3 	.word	0x10624dd3

08016960 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b086      	sub	sp, #24
 8016964:	af00      	add	r7, sp, #0
 8016966:	4603      	mov	r3, r0
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	607a      	str	r2, [r7, #4]
 801696c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801696e:	2300      	movs	r3, #0
 8016970:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	4618      	mov	r0, r3
 801697a:	f7ea f989 	bl	8000c90 <__aeabi_ui2f>
 801697e:	4603      	mov	r3, r0
 8016980:	4619      	mov	r1, r3
 8016982:	68b8      	ldr	r0, [r7, #8]
 8016984:	f7ea f8d2 	bl	8000b2c <__aeabi_fsub>
 8016988:	4603      	mov	r3, r0
 801698a:	6879      	ldr	r1, [r7, #4]
 801698c:	4618      	mov	r0, r3
 801698e:	f7ea f8cd 	bl	8000b2c <__aeabi_fsub>
 8016992:	4603      	mov	r3, r0
 8016994:	4618      	mov	r0, r3
 8016996:	f7e9 fd5b 	bl	8000450 <__aeabi_f2d>
 801699a:	4602      	mov	r2, r0
 801699c:	460b      	mov	r3, r1
 801699e:	4610      	mov	r0, r2
 80169a0:	4619      	mov	r1, r3
 80169a2:	f006 fa91 	bl	801cec8 <floor>
 80169a6:	4602      	mov	r2, r0
 80169a8:	460b      	mov	r3, r1
 80169aa:	4610      	mov	r0, r2
 80169ac:	4619      	mov	r1, r3
 80169ae:	f7ea f841 	bl	8000a34 <__aeabi_d2iz>
 80169b2:	4603      	mov	r3, r0
 80169b4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80169b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3718      	adds	r7, #24
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80169c2:	b590      	push	{r4, r7, lr}
 80169c4:	b087      	sub	sp, #28
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	60f8      	str	r0, [r7, #12]
 80169ca:	60b9      	str	r1, [r7, #8]
 80169cc:	607a      	str	r2, [r7, #4]
 80169ce:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80169d0:	2300      	movs	r3, #0
 80169d2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80169d4:	2300      	movs	r3, #0
 80169d6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80169d8:	2300      	movs	r3, #0
 80169da:	757b      	strb	r3, [r7, #21]
 80169dc:	2300      	movs	r3, #0
 80169de:	753b      	strb	r3, [r7, #20]
 80169e0:	e09c      	b.n	8016b1c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80169e2:	2300      	movs	r3, #0
 80169e4:	74fb      	strb	r3, [r7, #19]
 80169e6:	e08f      	b.n	8016b08 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	685a      	ldr	r2, [r3, #4]
 80169ec:	7d3b      	ldrb	r3, [r7, #20]
 80169ee:	005b      	lsls	r3, r3, #1
 80169f0:	4413      	add	r3, r2
 80169f2:	881b      	ldrh	r3, [r3, #0]
 80169f4:	461a      	mov	r2, r3
 80169f6:	7cfb      	ldrb	r3, [r7, #19]
 80169f8:	fa42 f303 	asr.w	r3, r2, r3
 80169fc:	f003 0301 	and.w	r3, r3, #1
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d07e      	beq.n	8016b02 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	689a      	ldr	r2, [r3, #8]
 8016a08:	7d79      	ldrb	r1, [r7, #21]
 8016a0a:	7cfb      	ldrb	r3, [r7, #19]
 8016a0c:	440b      	add	r3, r1
 8016a0e:	4619      	mov	r1, r3
 8016a10:	460b      	mov	r3, r1
 8016a12:	005b      	lsls	r3, r3, #1
 8016a14:	440b      	add	r3, r1
 8016a16:	009b      	lsls	r3, r3, #2
 8016a18:	4413      	add	r3, r2
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d06b      	beq.n	8016af8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	781b      	ldrb	r3, [r3, #0]
 8016a24:	f083 0301 	eor.w	r3, r3, #1
 8016a28:	b2db      	uxtb	r3, r3
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d011      	beq.n	8016a52 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d00d      	beq.n	8016a52 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	695a      	ldr	r2, [r3, #20]
 8016a3a:	7d3b      	ldrb	r3, [r7, #20]
 8016a3c:	005b      	lsls	r3, r3, #1
 8016a3e:	4413      	add	r3, r2
 8016a40:	881b      	ldrh	r3, [r3, #0]
 8016a42:	461a      	mov	r2, r3
 8016a44:	7cfb      	ldrb	r3, [r7, #19]
 8016a46:	fa42 f303 	asr.w	r3, r2, r3
 8016a4a:	f003 0301 	and.w	r3, r3, #1
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d054      	beq.n	8016afc <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	785b      	ldrb	r3, [r3, #1]
 8016a56:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	689a      	ldr	r2, [r3, #8]
 8016a5c:	7d79      	ldrb	r1, [r7, #21]
 8016a5e:	7cfb      	ldrb	r3, [r7, #19]
 8016a60:	440b      	add	r3, r1
 8016a62:	4619      	mov	r1, r3
 8016a64:	460b      	mov	r3, r1
 8016a66:	005b      	lsls	r3, r3, #1
 8016a68:	440b      	add	r3, r1
 8016a6a:	009b      	lsls	r3, r3, #2
 8016a6c:	4413      	add	r3, r2
 8016a6e:	7a1b      	ldrb	r3, [r3, #8]
 8016a70:	f343 0303 	sbfx	r3, r3, #0, #4
 8016a74:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016a76:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	689a      	ldr	r2, [r3, #8]
 8016a7c:	7d79      	ldrb	r1, [r7, #21]
 8016a7e:	7cfb      	ldrb	r3, [r7, #19]
 8016a80:	440b      	add	r3, r1
 8016a82:	4619      	mov	r1, r3
 8016a84:	460b      	mov	r3, r1
 8016a86:	005b      	lsls	r3, r3, #1
 8016a88:	440b      	add	r3, r1
 8016a8a:	009b      	lsls	r3, r3, #2
 8016a8c:	4413      	add	r3, r2
 8016a8e:	7a1b      	ldrb	r3, [r3, #8]
 8016a90:	f343 1303 	sbfx	r3, r3, #4, #4
 8016a94:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016a96:	461a      	mov	r2, r3
 8016a98:	4621      	mov	r1, r4
 8016a9a:	f7ff fbe8 	bl	801626e <RegionCommonValueInRange>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d02d      	beq.n	8016b00 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	68da      	ldr	r2, [r3, #12]
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	6899      	ldr	r1, [r3, #8]
 8016aac:	7d78      	ldrb	r0, [r7, #21]
 8016aae:	7cfb      	ldrb	r3, [r7, #19]
 8016ab0:	4403      	add	r3, r0
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	005b      	lsls	r3, r3, #1
 8016ab8:	4403      	add	r3, r0
 8016aba:	009b      	lsls	r3, r3, #2
 8016abc:	440b      	add	r3, r1
 8016abe:	7a5b      	ldrb	r3, [r3, #9]
 8016ac0:	4619      	mov	r1, r3
 8016ac2:	460b      	mov	r3, r1
 8016ac4:	005b      	lsls	r3, r3, #1
 8016ac6:	440b      	add	r3, r1
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	4413      	add	r3, r2
 8016acc:	7d1b      	ldrb	r3, [r3, #20]
 8016ace:	f083 0301 	eor.w	r3, r3, #1
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d003      	beq.n	8016ae0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016ad8:	7dbb      	ldrb	r3, [r7, #22]
 8016ada:	3301      	adds	r3, #1
 8016adc:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016ade:	e010      	b.n	8016b02 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016ae0:	7dfb      	ldrb	r3, [r7, #23]
 8016ae2:	1c5a      	adds	r2, r3, #1
 8016ae4:	75fa      	strb	r2, [r7, #23]
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	4413      	add	r3, r2
 8016aec:	7d79      	ldrb	r1, [r7, #21]
 8016aee:	7cfa      	ldrb	r2, [r7, #19]
 8016af0:	440a      	add	r2, r1
 8016af2:	b2d2      	uxtb	r2, r2
 8016af4:	701a      	strb	r2, [r3, #0]
 8016af6:	e004      	b.n	8016b02 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016af8:	bf00      	nop
 8016afa:	e002      	b.n	8016b02 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016afc:	bf00      	nop
 8016afe:	e000      	b.n	8016b02 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016b00:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016b02:	7cfb      	ldrb	r3, [r7, #19]
 8016b04:	3301      	adds	r3, #1
 8016b06:	74fb      	strb	r3, [r7, #19]
 8016b08:	7cfb      	ldrb	r3, [r7, #19]
 8016b0a:	2b0f      	cmp	r3, #15
 8016b0c:	f67f af6c 	bls.w	80169e8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016b10:	7d7b      	ldrb	r3, [r7, #21]
 8016b12:	3310      	adds	r3, #16
 8016b14:	757b      	strb	r3, [r7, #21]
 8016b16:	7d3b      	ldrb	r3, [r7, #20]
 8016b18:	3301      	adds	r3, #1
 8016b1a:	753b      	strb	r3, [r7, #20]
 8016b1c:	7d7b      	ldrb	r3, [r7, #21]
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	8a1b      	ldrh	r3, [r3, #16]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	f4ff af5c 	bcc.w	80169e2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	7dfa      	ldrb	r2, [r7, #23]
 8016b2e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016b30:	683b      	ldr	r3, [r7, #0]
 8016b32:	7dba      	ldrb	r2, [r7, #22]
 8016b34:	701a      	strb	r2, [r3, #0]
}
 8016b36:	bf00      	nop
 8016b38:	371c      	adds	r7, #28
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd90      	pop	{r4, r7, pc}

08016b3e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b40:	b08b      	sub	sp, #44	; 0x2c
 8016b42:	af04      	add	r7, sp, #16
 8016b44:	60f8      	str	r0, [r7, #12]
 8016b46:	60b9      	str	r1, [r7, #8]
 8016b48:	607a      	str	r2, [r7, #4]
 8016b4a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	4618      	mov	r0, r3
 8016b52:	f005 fdbf 	bl	801c6d4 <UTIL_TIMER_GetElapsedTime>
 8016b56:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	1ad2      	subs	r2, r2, r3
 8016b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b62:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b66:	2201      	movs	r2, #1
 8016b68:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d004      	beq.n	8016b82 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016b7c:	697a      	ldr	r2, [r7, #20]
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d32b      	bcc.n	8016bda <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8016b82:	68bb      	ldr	r3, [r7, #8]
 8016b84:	2200      	movs	r2, #0
 8016b86:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	69db      	ldr	r3, [r3, #28]
 8016b8c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016b92:	68dd      	ldr	r5, [r3, #12]
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	7a5e      	ldrb	r6, [r3, #9]
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	7d1b      	ldrb	r3, [r3, #20]
 8016ba2:	68fa      	ldr	r2, [r7, #12]
 8016ba4:	6992      	ldr	r2, [r2, #24]
 8016ba6:	9203      	str	r2, [sp, #12]
 8016ba8:	68fa      	ldr	r2, [r7, #12]
 8016baa:	f10d 0e04 	add.w	lr, sp, #4
 8016bae:	320c      	adds	r2, #12
 8016bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016bb4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016bb8:	9300      	str	r3, [sp, #0]
 8016bba:	4663      	mov	r3, ip
 8016bbc:	4632      	mov	r2, r6
 8016bbe:	4629      	mov	r1, r5
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f7ff fc25 	bl	8016410 <RegionCommonUpdateBandTimeOff>
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bca:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	69d8      	ldr	r0, [r3, #28]
 8016bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd2:	683a      	ldr	r2, [r7, #0]
 8016bd4:	6879      	ldr	r1, [r7, #4]
 8016bd6:	f7ff fef4 	bl	80169c2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	781b      	ldrb	r3, [r3, #0]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d004      	beq.n	8016bec <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016be4:	2200      	movs	r2, #0
 8016be6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016be8:	2300      	movs	r3, #0
 8016bea:	e006      	b.n	8016bfa <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d001      	beq.n	8016bf8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016bf4:	230b      	movs	r3, #11
 8016bf6:	e000      	b.n	8016bfa <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016bf8:	230c      	movs	r3, #12
    }
}
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	371c      	adds	r7, #28
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c02 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016c02:	b5b0      	push	{r4, r5, r7, lr}
 8016c04:	b086      	sub	sp, #24
 8016c06:	af02      	add	r7, sp, #8
 8016c08:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	781b      	ldrb	r3, [r3, #0]
 8016c0e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f993 2000 	ldrsb.w	r2, [r3]
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d103      	bne.n	8016c28 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016c26:	e026      	b.n	8016c76 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016c28:	7bfb      	ldrb	r3, [r7, #15]
 8016c2a:	3b01      	subs	r3, #1
 8016c2c:	b2db      	uxtb	r3, r3
 8016c2e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016c36:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d019      	beq.n	8016c72 <RegionCommonGetNextLowerTxDr+0x70>
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	78d8      	ldrb	r0, [r3, #3]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6859      	ldr	r1, [r3, #4]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	6892      	ldr	r2, [r2, #8]
 8016c56:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016c5a:	9201      	str	r2, [sp, #4]
 8016c5c:	9300      	str	r3, [sp, #0]
 8016c5e:	462b      	mov	r3, r5
 8016c60:	4622      	mov	r2, r4
 8016c62:	f7ff fa92 	bl	801618a <RegionCommonChanVerifyDr>
 8016c66:	4603      	mov	r3, r0
 8016c68:	f083 0301 	eor.w	r3, r3, #1
 8016c6c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d1da      	bne.n	8016c28 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3710      	adds	r7, #16
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bdb0      	pop	{r4, r5, r7, pc}

08016c7e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016c7e:	b480      	push	{r7}
 8016c80:	b083      	sub	sp, #12
 8016c82:	af00      	add	r7, sp, #0
 8016c84:	4603      	mov	r3, r0
 8016c86:	460a      	mov	r2, r1
 8016c88:	71fb      	strb	r3, [r7, #7]
 8016c8a:	4613      	mov	r3, r2
 8016c8c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016c8e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c96:	4293      	cmp	r3, r2
 8016c98:	bfb8      	it	lt
 8016c9a:	4613      	movlt	r3, r2
 8016c9c:	b25b      	sxtb	r3, r3
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	370c      	adds	r7, #12
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bc80      	pop	{r7}
 8016ca6:	4770      	bx	lr

08016ca8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016ca8:	b480      	push	{r7}
 8016caa:	b083      	sub	sp, #12
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	009b      	lsls	r3, r3, #2
 8016cb6:	683a      	ldr	r2, [r7, #0]
 8016cb8:	4413      	add	r3, r2
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	4a07      	ldr	r2, [pc, #28]	; (8016cdc <RegionCommonGetBandwidth+0x34>)
 8016cbe:	4293      	cmp	r3, r2
 8016cc0:	d004      	beq.n	8016ccc <RegionCommonGetBandwidth+0x24>
 8016cc2:	4a07      	ldr	r2, [pc, #28]	; (8016ce0 <RegionCommonGetBandwidth+0x38>)
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	d003      	beq.n	8016cd0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	e002      	b.n	8016cd2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016ccc:	2301      	movs	r3, #1
 8016cce:	e000      	b.n	8016cd2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016cd0:	2302      	movs	r3, #2
    }
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	370c      	adds	r7, #12
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bc80      	pop	{r7}
 8016cda:	4770      	bx	lr
 8016cdc:	0003d090 	.word	0x0003d090
 8016ce0:	0007a120 	.word	0x0007a120

08016ce4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b086      	sub	sp, #24
 8016ce8:	af04      	add	r7, sp, #16
 8016cea:	4603      	mov	r3, r0
 8016cec:	6039      	str	r1, [r7, #0]
 8016cee:	71fb      	strb	r3, [r7, #7]
 8016cf0:	4613      	mov	r3, r2
 8016cf2:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016cf4:	79fb      	ldrb	r3, [r7, #7]
 8016cf6:	2b05      	cmp	r3, #5
 8016cf8:	d810      	bhi.n	8016d1c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016cfa:	79fb      	ldrb	r3, [r7, #7]
 8016cfc:	4a0f      	ldr	r2, [pc, #60]	; (8016d3c <RegionCommonRxConfigPrint+0x58>)
 8016cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d02:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016d06:	9202      	str	r2, [sp, #8]
 8016d08:	683a      	ldr	r2, [r7, #0]
 8016d0a:	9201      	str	r2, [sp, #4]
 8016d0c:	9300      	str	r3, [sp, #0]
 8016d0e:	4b0c      	ldr	r3, [pc, #48]	; (8016d40 <RegionCommonRxConfigPrint+0x5c>)
 8016d10:	2201      	movs	r2, #1
 8016d12:	2100      	movs	r1, #0
 8016d14:	2002      	movs	r0, #2
 8016d16:	f005 fdbb 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016d1a:	e00a      	b.n	8016d32 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016d1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d20:	9301      	str	r3, [sp, #4]
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	9300      	str	r3, [sp, #0]
 8016d26:	4b07      	ldr	r3, [pc, #28]	; (8016d44 <RegionCommonRxConfigPrint+0x60>)
 8016d28:	2201      	movs	r2, #1
 8016d2a:	2100      	movs	r1, #0
 8016d2c:	2002      	movs	r0, #2
 8016d2e:	f005 fdaf 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
}
 8016d32:	bf00      	nop
 8016d34:	3708      	adds	r7, #8
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	20000124 	.word	0x20000124
 8016d40:	0801d344 	.word	0x0801d344
 8016d44:	0801d364 	.word	0x0801d364

08016d48 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b084      	sub	sp, #16
 8016d4c:	af02      	add	r7, sp, #8
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	460b      	mov	r3, r1
 8016d52:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d58:	9301      	str	r3, [sp, #4]
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	9300      	str	r3, [sp, #0]
 8016d5e:	4b05      	ldr	r3, [pc, #20]	; (8016d74 <RegionCommonTxConfigPrint+0x2c>)
 8016d60:	2201      	movs	r2, #1
 8016d62:	2100      	movs	r1, #0
 8016d64:	2002      	movs	r0, #2
 8016d66:	f005 fd93 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
}
 8016d6a:	bf00      	nop
 8016d6c:	3708      	adds	r7, #8
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}
 8016d72:	bf00      	nop
 8016d74:	0801d380 	.word	0x0801d380

08016d78 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b082      	sub	sp, #8
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016d82:	4b2d      	ldr	r3, [pc, #180]	; (8016e38 <VerifyRfFreq+0xc0>)
 8016d84:	6a1b      	ldr	r3, [r3, #32]
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	4798      	blx	r3
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	f083 0301 	eor.w	r3, r3, #1
 8016d90:	b2db      	uxtb	r3, r3
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d001      	beq.n	8016d9a <VerifyRfFreq+0x22>
    {
        return false;
 8016d96:	2300      	movs	r3, #0
 8016d98:	e04a      	b.n	8016e30 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	4a27      	ldr	r2, [pc, #156]	; (8016e3c <VerifyRfFreq+0xc4>)
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	d307      	bcc.n	8016db2 <VerifyRfFreq+0x3a>
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	4a26      	ldr	r2, [pc, #152]	; (8016e40 <VerifyRfFreq+0xc8>)
 8016da6:	4293      	cmp	r3, r2
 8016da8:	d803      	bhi.n	8016db2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	2202      	movs	r2, #2
 8016dae:	701a      	strb	r2, [r3, #0]
 8016db0:	e03d      	b.n	8016e2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	4a22      	ldr	r2, [pc, #136]	; (8016e40 <VerifyRfFreq+0xc8>)
 8016db6:	4293      	cmp	r3, r2
 8016db8:	d907      	bls.n	8016dca <VerifyRfFreq+0x52>
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	4a21      	ldr	r2, [pc, #132]	; (8016e44 <VerifyRfFreq+0xcc>)
 8016dbe:	4293      	cmp	r3, r2
 8016dc0:	d803      	bhi.n	8016dca <VerifyRfFreq+0x52>
    {
        *band = 0;
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	701a      	strb	r2, [r3, #0]
 8016dc8:	e031      	b.n	8016e2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	4a1d      	ldr	r2, [pc, #116]	; (8016e44 <VerifyRfFreq+0xcc>)
 8016dce:	4293      	cmp	r3, r2
 8016dd0:	d907      	bls.n	8016de2 <VerifyRfFreq+0x6a>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	4a1c      	ldr	r2, [pc, #112]	; (8016e48 <VerifyRfFreq+0xd0>)
 8016dd6:	4293      	cmp	r3, r2
 8016dd8:	d803      	bhi.n	8016de2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	2201      	movs	r2, #1
 8016dde:	701a      	strb	r2, [r3, #0]
 8016de0:	e025      	b.n	8016e2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	4a19      	ldr	r2, [pc, #100]	; (8016e4c <VerifyRfFreq+0xd4>)
 8016de6:	4293      	cmp	r3, r2
 8016de8:	d907      	bls.n	8016dfa <VerifyRfFreq+0x82>
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	4a18      	ldr	r2, [pc, #96]	; (8016e50 <VerifyRfFreq+0xd8>)
 8016dee:	4293      	cmp	r3, r2
 8016df0:	d803      	bhi.n	8016dfa <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	2205      	movs	r2, #5
 8016df6:	701a      	strb	r2, [r3, #0]
 8016df8:	e019      	b.n	8016e2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	4a15      	ldr	r2, [pc, #84]	; (8016e54 <VerifyRfFreq+0xdc>)
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d907      	bls.n	8016e12 <VerifyRfFreq+0x9a>
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	4a14      	ldr	r2, [pc, #80]	; (8016e58 <VerifyRfFreq+0xe0>)
 8016e06:	4293      	cmp	r3, r2
 8016e08:	d803      	bhi.n	8016e12 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8016e0a:	683b      	ldr	r3, [r7, #0]
 8016e0c:	2203      	movs	r2, #3
 8016e0e:	701a      	strb	r2, [r3, #0]
 8016e10:	e00d      	b.n	8016e2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	4a11      	ldr	r2, [pc, #68]	; (8016e5c <VerifyRfFreq+0xe4>)
 8016e16:	4293      	cmp	r3, r2
 8016e18:	d307      	bcc.n	8016e2a <VerifyRfFreq+0xb2>
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	4a10      	ldr	r2, [pc, #64]	; (8016e60 <VerifyRfFreq+0xe8>)
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	d803      	bhi.n	8016e2a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	2204      	movs	r2, #4
 8016e26:	701a      	strb	r2, [r3, #0]
 8016e28:	e001      	b.n	8016e2e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	e000      	b.n	8016e30 <VerifyRfFreq+0xb8>
    }
    return true;
 8016e2e:	2301      	movs	r3, #1
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3708      	adds	r7, #8
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}
 8016e38:	0801d920 	.word	0x0801d920
 8016e3c:	337055c0 	.word	0x337055c0
 8016e40:	338eda3f 	.word	0x338eda3f
 8016e44:	33bca100 	.word	0x33bca100
 8016e48:	33c5c8c0 	.word	0x33c5c8c0
 8016e4c:	33c74f5f 	.word	0x33c74f5f
 8016e50:	33cef080 	.word	0x33cef080
 8016e54:	33d1fdbf 	.word	0x33d1fdbf
 8016e58:	33d5ce50 	.word	0x33d5ce50
 8016e5c:	33d691a0 	.word	0x33d691a0
 8016e60:	33db2580 	.word	0x33db2580

08016e64 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016e64:	b590      	push	{r4, r7, lr}
 8016e66:	b08b      	sub	sp, #44	; 0x2c
 8016e68:	af04      	add	r7, sp, #16
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	460a      	mov	r2, r1
 8016e6e:	71fb      	strb	r3, [r7, #7]
 8016e70:	4613      	mov	r3, r2
 8016e72:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8016e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e78:	4a1f      	ldr	r2, [pc, #124]	; (8016ef8 <GetTimeOnAir+0x94>)
 8016e7a:	5cd3      	ldrb	r3, [r2, r3]
 8016e7c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8016e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e82:	491e      	ldr	r1, [pc, #120]	; (8016efc <GetTimeOnAir+0x98>)
 8016e84:	4618      	mov	r0, r3
 8016e86:	f7ff ff0f 	bl	8016ca8 <RegionCommonGetBandwidth>
 8016e8a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e94:	2b07      	cmp	r3, #7
 8016e96:	d118      	bne.n	8016eca <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8016e98:	4b19      	ldr	r3, [pc, #100]	; (8016f00 <GetTimeOnAir+0x9c>)
 8016e9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016e9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016ea4:	fb02 f303 	mul.w	r3, r2, r3
 8016ea8:	4619      	mov	r1, r3
 8016eaa:	88bb      	ldrh	r3, [r7, #4]
 8016eac:	b2db      	uxtb	r3, r3
 8016eae:	2201      	movs	r2, #1
 8016eb0:	9203      	str	r2, [sp, #12]
 8016eb2:	9302      	str	r3, [sp, #8]
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	9301      	str	r3, [sp, #4]
 8016eb8:	2305      	movs	r3, #5
 8016eba:	9300      	str	r3, [sp, #0]
 8016ebc:	2300      	movs	r3, #0
 8016ebe:	460a      	mov	r2, r1
 8016ec0:	68f9      	ldr	r1, [r7, #12]
 8016ec2:	2000      	movs	r0, #0
 8016ec4:	47a0      	blx	r4
 8016ec6:	6178      	str	r0, [r7, #20]
 8016ec8:	e011      	b.n	8016eee <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016eca:	4b0d      	ldr	r3, [pc, #52]	; (8016f00 <GetTimeOnAir+0x9c>)
 8016ecc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016ece:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016ed2:	88bb      	ldrh	r3, [r7, #4]
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	2101      	movs	r1, #1
 8016ed8:	9103      	str	r1, [sp, #12]
 8016eda:	9302      	str	r3, [sp, #8]
 8016edc:	2300      	movs	r3, #0
 8016ede:	9301      	str	r3, [sp, #4]
 8016ee0:	2308      	movs	r3, #8
 8016ee2:	9300      	str	r3, [sp, #0]
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	68f9      	ldr	r1, [r7, #12]
 8016ee8:	2001      	movs	r0, #1
 8016eea:	47a0      	blx	r4
 8016eec:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016eee:	697b      	ldr	r3, [r7, #20]
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	371c      	adds	r7, #28
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd90      	pop	{r4, r7, pc}
 8016ef8:	0801d8e8 	.word	0x0801d8e8
 8016efc:	0801d8f0 	.word	0x0801d8f0
 8016f00:	0801d920 	.word	0x0801d920

08016f04 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b088      	sub	sp, #32
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	3b01      	subs	r3, #1
 8016f16:	2b38      	cmp	r3, #56	; 0x38
 8016f18:	f200 8128 	bhi.w	801716c <RegionEU868GetPhyParam+0x268>
 8016f1c:	a201      	add	r2, pc, #4	; (adr r2, 8016f24 <RegionEU868GetPhyParam+0x20>)
 8016f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f22:	bf00      	nop
 8016f24:	08017009 	.word	0x08017009
 8016f28:	0801700f 	.word	0x0801700f
 8016f2c:	0801716d 	.word	0x0801716d
 8016f30:	0801716d 	.word	0x0801716d
 8016f34:	0801716d 	.word	0x0801716d
 8016f38:	08017015 	.word	0x08017015
 8016f3c:	0801716d 	.word	0x0801716d
 8016f40:	0801704f 	.word	0x0801704f
 8016f44:	0801716d 	.word	0x0801716d
 8016f48:	08017055 	.word	0x08017055
 8016f4c:	0801705b 	.word	0x0801705b
 8016f50:	08017061 	.word	0x08017061
 8016f54:	08017067 	.word	0x08017067
 8016f58:	08017077 	.word	0x08017077
 8016f5c:	08017087 	.word	0x08017087
 8016f60:	0801708d 	.word	0x0801708d
 8016f64:	08017095 	.word	0x08017095
 8016f68:	0801709d 	.word	0x0801709d
 8016f6c:	080170a5 	.word	0x080170a5
 8016f70:	080170ad 	.word	0x080170ad
 8016f74:	080170b5 	.word	0x080170b5
 8016f78:	080170bd 	.word	0x080170bd
 8016f7c:	080170d1 	.word	0x080170d1
 8016f80:	080170d7 	.word	0x080170d7
 8016f84:	080170dd 	.word	0x080170dd
 8016f88:	080170e3 	.word	0x080170e3
 8016f8c:	080170ef 	.word	0x080170ef
 8016f90:	080170fb 	.word	0x080170fb
 8016f94:	08017101 	.word	0x08017101
 8016f98:	08017109 	.word	0x08017109
 8016f9c:	0801710f 	.word	0x0801710f
 8016fa0:	08017115 	.word	0x08017115
 8016fa4:	0801711d 	.word	0x0801711d
 8016fa8:	0801701b 	.word	0x0801701b
 8016fac:	0801716d 	.word	0x0801716d
 8016fb0:	0801716d 	.word	0x0801716d
 8016fb4:	0801716d 	.word	0x0801716d
 8016fb8:	0801716d 	.word	0x0801716d
 8016fbc:	0801716d 	.word	0x0801716d
 8016fc0:	0801716d 	.word	0x0801716d
 8016fc4:	0801716d 	.word	0x0801716d
 8016fc8:	0801716d 	.word	0x0801716d
 8016fcc:	0801716d 	.word	0x0801716d
 8016fd0:	0801716d 	.word	0x0801716d
 8016fd4:	0801716d 	.word	0x0801716d
 8016fd8:	0801716d 	.word	0x0801716d
 8016fdc:	0801716d 	.word	0x0801716d
 8016fe0:	08017123 	.word	0x08017123
 8016fe4:	08017129 	.word	0x08017129
 8016fe8:	08017137 	.word	0x08017137
 8016fec:	0801716d 	.word	0x0801716d
 8016ff0:	0801716d 	.word	0x0801716d
 8016ff4:	0801713d 	.word	0x0801713d
 8016ff8:	08017143 	.word	0x08017143
 8016ffc:	0801716d 	.word	0x0801716d
 8017000:	08017149 	.word	0x08017149
 8017004:	08017159 	.word	0x08017159
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017008:	2300      	movs	r3, #0
 801700a:	61bb      	str	r3, [r7, #24]
            break;
 801700c:	e0af      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801700e:	2300      	movs	r3, #0
 8017010:	61bb      	str	r3, [r7, #24]
            break;
 8017012:	e0ac      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017014:	2300      	movs	r3, #0
 8017016:	61bb      	str	r3, [r7, #24]
            break;
 8017018:	e0a9      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017020:	733b      	strb	r3, [r7, #12]
 8017022:	2307      	movs	r3, #7
 8017024:	737b      	strb	r3, [r7, #13]
 8017026:	2300      	movs	r3, #0
 8017028:	73bb      	strb	r3, [r7, #14]
 801702a:	2310      	movs	r3, #16
 801702c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801702e:	4b53      	ldr	r3, [pc, #332]	; (801717c <RegionEU868GetPhyParam+0x278>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017036:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017038:	4b50      	ldr	r3, [pc, #320]	; (801717c <RegionEU868GetPhyParam+0x278>)
 801703a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801703c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801703e:	f107 030c 	add.w	r3, r7, #12
 8017042:	4618      	mov	r0, r3
 8017044:	f7ff fddd 	bl	8016c02 <RegionCommonGetNextLowerTxDr>
 8017048:	4603      	mov	r3, r0
 801704a:	61bb      	str	r3, [r7, #24]
            break;
 801704c:	e08f      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801704e:	2300      	movs	r3, #0
 8017050:	61bb      	str	r3, [r7, #24]
            break;
 8017052:	e08c      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017054:	2300      	movs	r3, #0
 8017056:	61bb      	str	r3, [r7, #24]
            break;
 8017058:	e089      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801705a:	2340      	movs	r3, #64	; 0x40
 801705c:	61bb      	str	r3, [r7, #24]
            break;
 801705e:	e086      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017060:	2320      	movs	r3, #32
 8017062:	61bb      	str	r3, [r7, #24]
            break;
 8017064:	e083      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801706c:	461a      	mov	r2, r3
 801706e:	4b44      	ldr	r3, [pc, #272]	; (8017180 <RegionEU868GetPhyParam+0x27c>)
 8017070:	5c9b      	ldrb	r3, [r3, r2]
 8017072:	61bb      	str	r3, [r7, #24]
            break;
 8017074:	e07b      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801707c:	461a      	mov	r2, r3
 801707e:	4b41      	ldr	r3, [pc, #260]	; (8017184 <RegionEU868GetPhyParam+0x280>)
 8017080:	5c9b      	ldrb	r3, [r3, r2]
 8017082:	61bb      	str	r3, [r7, #24]
            break;
 8017084:	e073      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017086:	2301      	movs	r3, #1
 8017088:	61bb      	str	r3, [r7, #24]
            break;
 801708a:	e070      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801708c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017090:	61bb      	str	r3, [r7, #24]
            break;
 8017092:	e06c      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017098:	61bb      	str	r3, [r7, #24]
            break;
 801709a:	e068      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801709c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80170a0:	61bb      	str	r3, [r7, #24]
            break;
 80170a2:	e064      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80170a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80170a8:	61bb      	str	r3, [r7, #24]
            break;
 80170aa:	e060      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80170ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80170b0:	61bb      	str	r3, [r7, #24]
            break;
 80170b2:	e05c      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80170b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80170b8:	61bb      	str	r3, [r7, #24]
            break;
 80170ba:	e058      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80170bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80170c0:	4831      	ldr	r0, [pc, #196]	; (8017188 <RegionEU868GetPhyParam+0x284>)
 80170c2:	f001 f879 	bl	80181b8 <randr>
 80170c6:	4603      	mov	r3, r0
 80170c8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80170cc:	61bb      	str	r3, [r7, #24]
            break;
 80170ce:	e04e      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80170d0:	2300      	movs	r3, #0
 80170d2:	61bb      	str	r3, [r7, #24]
            break;
 80170d4:	e04b      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80170d6:	4b2d      	ldr	r3, [pc, #180]	; (801718c <RegionEU868GetPhyParam+0x288>)
 80170d8:	61bb      	str	r3, [r7, #24]
            break;
 80170da:	e048      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80170dc:	2300      	movs	r3, #0
 80170de:	61bb      	str	r3, [r7, #24]
            break;
 80170e0:	e045      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80170e2:	4b26      	ldr	r3, [pc, #152]	; (801717c <RegionEU868GetPhyParam+0x278>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80170ea:	61bb      	str	r3, [r7, #24]
            break;
 80170ec:	e03f      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80170ee:	4b23      	ldr	r3, [pc, #140]	; (801717c <RegionEU868GetPhyParam+0x278>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80170f6:	61bb      	str	r3, [r7, #24]
            break;
 80170f8:	e039      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80170fa:	2310      	movs	r3, #16
 80170fc:	61bb      	str	r3, [r7, #24]
            break;
 80170fe:	e036      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017100:	4b1e      	ldr	r3, [pc, #120]	; (801717c <RegionEU868GetPhyParam+0x278>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	61bb      	str	r3, [r7, #24]
            break;
 8017106:	e032      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017108:	2300      	movs	r3, #0
 801710a:	61bb      	str	r3, [r7, #24]
            break;
 801710c:	e02f      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801710e:	2300      	movs	r3, #0
 8017110:	61bb      	str	r3, [r7, #24]
            break;
 8017112:	e02c      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017114:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8017118:	61bb      	str	r3, [r7, #24]
            break;
 801711a:	e028      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801711c:	4b1c      	ldr	r3, [pc, #112]	; (8017190 <RegionEU868GetPhyParam+0x28c>)
 801711e:	61bb      	str	r3, [r7, #24]
            break;
 8017120:	e025      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017122:	4b1a      	ldr	r3, [pc, #104]	; (801718c <RegionEU868GetPhyParam+0x288>)
 8017124:	61bb      	str	r3, [r7, #24]
            break;
 8017126:	e022      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017128:	2311      	movs	r3, #17
 801712a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801712c:	2302      	movs	r3, #2
 801712e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017130:	2300      	movs	r3, #0
 8017132:	76bb      	strb	r3, [r7, #26]
            break;
 8017134:	e01b      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017136:	2303      	movs	r3, #3
 8017138:	61bb      	str	r3, [r7, #24]
            break;
 801713a:	e018      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801713c:	4b13      	ldr	r3, [pc, #76]	; (801718c <RegionEU868GetPhyParam+0x288>)
 801713e:	61bb      	str	r3, [r7, #24]
            break;
 8017140:	e015      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017142:	2303      	movs	r3, #3
 8017144:	61bb      	str	r3, [r7, #24]
            break;
 8017146:	e012      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801714e:	461a      	mov	r2, r3
 8017150:	4b10      	ldr	r3, [pc, #64]	; (8017194 <RegionEU868GetPhyParam+0x290>)
 8017152:	5c9b      	ldrb	r3, [r3, r2]
 8017154:	61bb      	str	r3, [r7, #24]
            break;
 8017156:	e00a      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801715e:	490e      	ldr	r1, [pc, #56]	; (8017198 <RegionEU868GetPhyParam+0x294>)
 8017160:	4618      	mov	r0, r3
 8017162:	f7ff fda1 	bl	8016ca8 <RegionCommonGetBandwidth>
 8017166:	4603      	mov	r3, r0
 8017168:	61bb      	str	r3, [r7, #24]
            break;
 801716a:	e000      	b.n	801716e <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 801716c:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801716e:	69bb      	ldr	r3, [r7, #24]
 8017170:	61fb      	str	r3, [r7, #28]
 8017172:	69fb      	ldr	r3, [r7, #28]
}
 8017174:	4618      	mov	r0, r3
 8017176:	3720      	adds	r7, #32
 8017178:	46bd      	mov	sp, r7
 801717a:	bd80      	pop	{r7, pc}
 801717c:	200021bc 	.word	0x200021bc
 8017180:	0801d910 	.word	0x0801d910
 8017184:	0801d918 	.word	0x0801d918
 8017188:	fffffc18 	.word	0xfffffc18
 801718c:	33d3e608 	.word	0x33d3e608
 8017190:	4009999a 	.word	0x4009999a
 8017194:	0801d8e8 	.word	0x0801d8e8
 8017198:	0801d8f0 	.word	0x0801d8f0

0801719c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801719c:	b590      	push	{r4, r7, lr}
 801719e:	b085      	sub	sp, #20
 80171a0:	af02      	add	r7, sp, #8
 80171a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80171a4:	4b11      	ldr	r3, [pc, #68]	; (80171ec <RegionEU868SetBandTxDone+0x50>)
 80171a6:	681a      	ldr	r2, [r3, #0]
 80171a8:	4b11      	ldr	r3, [pc, #68]	; (80171f0 <RegionEU868SetBandTxDone+0x54>)
 80171aa:	6819      	ldr	r1, [r3, #0]
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	4618      	mov	r0, r3
 80171b2:	4603      	mov	r3, r0
 80171b4:	005b      	lsls	r3, r3, #1
 80171b6:	4403      	add	r3, r0
 80171b8:	009b      	lsls	r3, r3, #2
 80171ba:	440b      	add	r3, r1
 80171bc:	3309      	adds	r3, #9
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	4619      	mov	r1, r3
 80171c2:	460b      	mov	r3, r1
 80171c4:	005b      	lsls	r3, r3, #1
 80171c6:	440b      	add	r3, r1
 80171c8:	00db      	lsls	r3, r3, #3
 80171ca:	18d0      	adds	r0, r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6899      	ldr	r1, [r3, #8]
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	785c      	ldrb	r4, [r3, #1]
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	691a      	ldr	r2, [r3, #16]
 80171d8:	9200      	str	r2, [sp, #0]
 80171da:	68db      	ldr	r3, [r3, #12]
 80171dc:	4622      	mov	r2, r4
 80171de:	f7ff f8e9 	bl	80163b4 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80171e2:	bf00      	nop
 80171e4:	370c      	adds	r7, #12
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd90      	pop	{r4, r7, pc}
 80171ea:	bf00      	nop
 80171ec:	200021b8 	.word	0x200021b8
 80171f0:	200021bc 	.word	0x200021bc

080171f4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b0b0      	sub	sp, #192	; 0xc0
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80171fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017200:	2290      	movs	r2, #144	; 0x90
 8017202:	2100      	movs	r1, #0
 8017204:	4618      	mov	r0, r3
 8017206:	f005 fded 	bl	801cde4 <memset>
 801720a:	2364      	movs	r3, #100	; 0x64
 801720c:	863b      	strh	r3, [r7, #48]	; 0x30
 801720e:	2364      	movs	r3, #100	; 0x64
 8017210:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017218:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801721c:	230a      	movs	r3, #10
 801721e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8017222:	2364      	movs	r3, #100	; 0x64
 8017224:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8017228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801722c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	7a1b      	ldrb	r3, [r3, #8]
 8017234:	2b02      	cmp	r3, #2
 8017236:	d05e      	beq.n	80172f6 <RegionEU868InitDefaults+0x102>
 8017238:	2b02      	cmp	r3, #2
 801723a:	dc6b      	bgt.n	8017314 <RegionEU868InitDefaults+0x120>
 801723c:	2b00      	cmp	r3, #0
 801723e:	d002      	beq.n	8017246 <RegionEU868InitDefaults+0x52>
 8017240:	2b01      	cmp	r3, #1
 8017242:	d03f      	beq.n	80172c4 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017244:	e066      	b.n	8017314 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d063      	beq.n	8017316 <RegionEU868InitDefaults+0x122>
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d05f      	beq.n	8017316 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	4a30      	ldr	r2, [pc, #192]	; (801731c <RegionEU868InitDefaults+0x128>)
 801725c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	685b      	ldr	r3, [r3, #4]
 8017262:	4a2f      	ldr	r2, [pc, #188]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 8017264:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017266:	4b2d      	ldr	r3, [pc, #180]	; (801731c <RegionEU868InitDefaults+0x128>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	4618      	mov	r0, r3
 801726c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017270:	2290      	movs	r2, #144	; 0x90
 8017272:	4619      	mov	r1, r3
 8017274:	f000 ffb7 	bl	80181e6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017278:	4b29      	ldr	r3, [pc, #164]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	4a29      	ldr	r2, [pc, #164]	; (8017324 <RegionEU868InitDefaults+0x130>)
 801727e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017280:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017284:	4b26      	ldr	r3, [pc, #152]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	4a27      	ldr	r2, [pc, #156]	; (8017328 <RegionEU868InitDefaults+0x134>)
 801728a:	330c      	adds	r3, #12
 801728c:	ca07      	ldmia	r2, {r0, r1, r2}
 801728e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017292:	4b23      	ldr	r3, [pc, #140]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	4a25      	ldr	r2, [pc, #148]	; (801732c <RegionEU868InitDefaults+0x138>)
 8017298:	3318      	adds	r3, #24
 801729a:	ca07      	ldmia	r2, {r0, r1, r2}
 801729c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80172a0:	4b1f      	ldr	r3, [pc, #124]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	2207      	movs	r2, #7
 80172a6:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80172aa:	4b1d      	ldr	r3, [pc, #116]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80172b2:	4b1b      	ldr	r3, [pc, #108]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80172ba:	2201      	movs	r2, #1
 80172bc:	4619      	mov	r1, r3
 80172be:	f7ff f853 	bl	8016368 <RegionCommonChanMaskCopy>
 80172c2:	e028      	b.n	8017316 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80172c4:	4b16      	ldr	r3, [pc, #88]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	2200      	movs	r2, #0
 80172ca:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80172cc:	4b14      	ldr	r3, [pc, #80]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	2200      	movs	r2, #0
 80172d2:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80172d4:	4b12      	ldr	r3, [pc, #72]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	2200      	movs	r2, #0
 80172da:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80172dc:	4b10      	ldr	r3, [pc, #64]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80172e4:	4b0e      	ldr	r3, [pc, #56]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80172ec:	2201      	movs	r2, #1
 80172ee:	4619      	mov	r1, r3
 80172f0:	f7ff f83a 	bl	8016368 <RegionCommonChanMaskCopy>
            break;
 80172f4:	e00f      	b.n	8017316 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80172f6:	4b0a      	ldr	r3, [pc, #40]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 80172fe:	4b08      	ldr	r3, [pc, #32]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8017306:	4b06      	ldr	r3, [pc, #24]	; (8017320 <RegionEU868InitDefaults+0x12c>)
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	430a      	orrs	r2, r1
 801730c:	b292      	uxth	r2, r2
 801730e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8017312:	e000      	b.n	8017316 <RegionEU868InitDefaults+0x122>
            break;
 8017314:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017316:	37c0      	adds	r7, #192	; 0xc0
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}
 801731c:	200021b8 	.word	0x200021b8
 8017320:	200021bc 	.word	0x200021bc
 8017324:	0801d39c 	.word	0x0801d39c
 8017328:	0801d3a8 	.word	0x0801d3a8
 801732c:	0801d3b4 	.word	0x0801d3b4

08017330 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b084      	sub	sp, #16
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	460b      	mov	r3, r1
 801733a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801733c:	78fb      	ldrb	r3, [r7, #3]
 801733e:	2b0f      	cmp	r3, #15
 8017340:	d86c      	bhi.n	801741c <RegionEU868Verify+0xec>
 8017342:	a201      	add	r2, pc, #4	; (adr r2, 8017348 <RegionEU868Verify+0x18>)
 8017344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017348:	08017389 	.word	0x08017389
 801734c:	0801741d 	.word	0x0801741d
 8017350:	0801741d 	.word	0x0801741d
 8017354:	0801741d 	.word	0x0801741d
 8017358:	0801741d 	.word	0x0801741d
 801735c:	080173a1 	.word	0x080173a1
 8017360:	080173bf 	.word	0x080173bf
 8017364:	080173dd 	.word	0x080173dd
 8017368:	0801741d 	.word	0x0801741d
 801736c:	080173fb 	.word	0x080173fb
 8017370:	080173fb 	.word	0x080173fb
 8017374:	0801741d 	.word	0x0801741d
 8017378:	0801741d 	.word	0x0801741d
 801737c:	0801741d 	.word	0x0801741d
 8017380:	0801741d 	.word	0x0801741d
 8017384:	08017419 	.word	0x08017419
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017388:	2300      	movs	r3, #0
 801738a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	f107 020f 	add.w	r2, r7, #15
 8017394:	4611      	mov	r1, r2
 8017396:	4618      	mov	r0, r3
 8017398:	f7ff fcee 	bl	8016d78 <VerifyRfFreq>
 801739c:	4603      	mov	r3, r0
 801739e:	e03e      	b.n	801741e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f993 3000 	ldrsb.w	r3, [r3]
 80173a6:	2207      	movs	r2, #7
 80173a8:	2100      	movs	r1, #0
 80173aa:	4618      	mov	r0, r3
 80173ac:	f7fe ff5f 	bl	801626e <RegionCommonValueInRange>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	bf14      	ite	ne
 80173b6:	2301      	movne	r3, #1
 80173b8:	2300      	moveq	r3, #0
 80173ba:	b2db      	uxtb	r3, r3
 80173bc:	e02f      	b.n	801741e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f993 3000 	ldrsb.w	r3, [r3]
 80173c4:	2205      	movs	r2, #5
 80173c6:	2100      	movs	r1, #0
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7fe ff50 	bl	801626e <RegionCommonValueInRange>
 80173ce:	4603      	mov	r3, r0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	bf14      	ite	ne
 80173d4:	2301      	movne	r3, #1
 80173d6:	2300      	moveq	r3, #0
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	e020      	b.n	801741e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f993 3000 	ldrsb.w	r3, [r3]
 80173e2:	2207      	movs	r2, #7
 80173e4:	2100      	movs	r1, #0
 80173e6:	4618      	mov	r0, r3
 80173e8:	f7fe ff41 	bl	801626e <RegionCommonValueInRange>
 80173ec:	4603      	mov	r3, r0
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	bf14      	ite	ne
 80173f2:	2301      	movne	r3, #1
 80173f4:	2300      	moveq	r3, #0
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	e011      	b.n	801741e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	f993 3000 	ldrsb.w	r3, [r3]
 8017400:	2207      	movs	r2, #7
 8017402:	2100      	movs	r1, #0
 8017404:	4618      	mov	r0, r3
 8017406:	f7fe ff32 	bl	801626e <RegionCommonValueInRange>
 801740a:	4603      	mov	r3, r0
 801740c:	2b00      	cmp	r3, #0
 801740e:	bf14      	ite	ne
 8017410:	2301      	movne	r3, #1
 8017412:	2300      	moveq	r3, #0
 8017414:	b2db      	uxtb	r3, r3
 8017416:	e002      	b.n	801741e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017418:	2301      	movs	r3, #1
 801741a:	e000      	b.n	801741e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801741c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801741e:	4618      	mov	r0, r3
 8017420:	3710      	adds	r7, #16
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}
 8017426:	bf00      	nop

08017428 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b08a      	sub	sp, #40	; 0x28
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017430:	2350      	movs	r3, #80	; 0x50
 8017432:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	791b      	ldrb	r3, [r3, #4]
 801743a:	2b10      	cmp	r3, #16
 801743c:	d162      	bne.n	8017504 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	330f      	adds	r3, #15
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d15e      	bne.n	8017508 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801744a:	2300      	movs	r3, #0
 801744c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017450:	2303      	movs	r3, #3
 8017452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017456:	e050      	b.n	80174fa <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801745c:	2b07      	cmp	r3, #7
 801745e:	d824      	bhi.n	80174aa <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681a      	ldr	r2, [r3, #0]
 8017464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017468:	4413      	add	r3, r2
 801746a:	781b      	ldrb	r3, [r3, #0]
 801746c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801746e:	69ba      	ldr	r2, [r7, #24]
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6819      	ldr	r1, [r3, #0]
 8017474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017478:	3301      	adds	r3, #1
 801747a:	440b      	add	r3, r1
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	021b      	lsls	r3, r3, #8
 8017480:	4313      	orrs	r3, r2
 8017482:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017484:	69ba      	ldr	r2, [r7, #24]
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	6819      	ldr	r1, [r3, #0]
 801748a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801748e:	3302      	adds	r3, #2
 8017490:	440b      	add	r3, r1
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	041b      	lsls	r3, r3, #16
 8017496:	4313      	orrs	r3, r2
 8017498:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801749a:	69bb      	ldr	r3, [r7, #24]
 801749c:	2264      	movs	r2, #100	; 0x64
 801749e:	fb02 f303 	mul.w	r3, r2, r3
 80174a2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80174a4:	2300      	movs	r3, #0
 80174a6:	61fb      	str	r3, [r7, #28]
 80174a8:	e006      	b.n	80174b8 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80174aa:	2300      	movs	r3, #0
 80174ac:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80174ae:	2300      	movs	r3, #0
 80174b0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80174b4:	2300      	movs	r3, #0
 80174b6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80174b8:	69bb      	ldr	r3, [r7, #24]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d00b      	beq.n	80174d6 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80174be:	f107 0318 	add.w	r3, r7, #24
 80174c2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80174c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174c8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80174ca:	f107 0310 	add.w	r3, r7, #16
 80174ce:	4618      	mov	r0, r3
 80174d0:	f000 fd0e 	bl	8017ef0 <RegionEU868ChannelAdd>
 80174d4:	e007      	b.n	80174e6 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80174d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174da:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80174dc:	f107 030c 	add.w	r3, r7, #12
 80174e0:	4618      	mov	r0, r3
 80174e2:	f000 fda7 	bl	8018034 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80174e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174ea:	3303      	adds	r3, #3
 80174ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80174f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174f4:	3301      	adds	r3, #1
 80174f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80174fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174fe:	2b0f      	cmp	r3, #15
 8017500:	d9aa      	bls.n	8017458 <RegionEU868ApplyCFList+0x30>
 8017502:	e002      	b.n	801750a <RegionEU868ApplyCFList+0xe2>
        return;
 8017504:	bf00      	nop
 8017506:	e000      	b.n	801750a <RegionEU868ApplyCFList+0xe2>
        return;
 8017508:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801750a:	3728      	adds	r7, #40	; 0x28
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}

08017510 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	791b      	ldrb	r3, [r3, #4]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d002      	beq.n	8017526 <RegionEU868ChanMaskSet+0x16>
 8017520:	2b01      	cmp	r3, #1
 8017522:	d00b      	beq.n	801753c <RegionEU868ChanMaskSet+0x2c>
 8017524:	e015      	b.n	8017552 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017526:	4b0e      	ldr	r3, [pc, #56]	; (8017560 <RegionEU868ChanMaskSet+0x50>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	2201      	movs	r2, #1
 8017534:	4619      	mov	r1, r3
 8017536:	f7fe ff17 	bl	8016368 <RegionCommonChanMaskCopy>
            break;
 801753a:	e00c      	b.n	8017556 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801753c:	4b08      	ldr	r3, [pc, #32]	; (8017560 <RegionEU868ChanMaskSet+0x50>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	2201      	movs	r2, #1
 801754a:	4619      	mov	r1, r3
 801754c:	f7fe ff0c 	bl	8016368 <RegionCommonChanMaskCopy>
            break;
 8017550:	e001      	b.n	8017556 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8017552:	2300      	movs	r3, #0
 8017554:	e000      	b.n	8017558 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8017556:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017558:	4618      	mov	r0, r3
 801755a:	3708      	adds	r7, #8
 801755c:	46bd      	mov	sp, r7
 801755e:	bd80      	pop	{r7, pc}
 8017560:	200021bc 	.word	0x200021bc

08017564 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b088      	sub	sp, #32
 8017568:	af02      	add	r7, sp, #8
 801756a:	60ba      	str	r2, [r7, #8]
 801756c:	607b      	str	r3, [r7, #4]
 801756e:	4603      	mov	r3, r0
 8017570:	73fb      	strb	r3, [r7, #15]
 8017572:	460b      	mov	r3, r1
 8017574:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8017576:	2300      	movs	r3, #0
 8017578:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801757a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801757e:	2b07      	cmp	r3, #7
 8017580:	bfa8      	it	ge
 8017582:	2307      	movge	r3, #7
 8017584:	b25a      	sxtb	r2, r3
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017590:	491e      	ldr	r1, [pc, #120]	; (801760c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017592:	4618      	mov	r0, r3
 8017594:	f7ff fb88 	bl	8016ca8 <RegionCommonGetBandwidth>
 8017598:	4603      	mov	r3, r0
 801759a:	b2da      	uxtb	r2, r3
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80175a6:	2b07      	cmp	r3, #7
 80175a8:	d10a      	bne.n	80175c0 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80175b0:	461a      	mov	r2, r3
 80175b2:	4b17      	ldr	r3, [pc, #92]	; (8017610 <RegionEU868ComputeRxWindowParameters+0xac>)
 80175b4:	5c9b      	ldrb	r3, [r3, r2]
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7ff f90a 	bl	80167d0 <RegionCommonComputeSymbolTimeFsk>
 80175bc:	6178      	str	r0, [r7, #20]
 80175be:	e011      	b.n	80175e4 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80175c6:	461a      	mov	r2, r3
 80175c8:	4b11      	ldr	r3, [pc, #68]	; (8017610 <RegionEU868ComputeRxWindowParameters+0xac>)
 80175ca:	5c9a      	ldrb	r2, [r3, r2]
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80175d2:	4619      	mov	r1, r3
 80175d4:	4b0d      	ldr	r3, [pc, #52]	; (801760c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80175d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80175da:	4619      	mov	r1, r3
 80175dc:	4610      	mov	r0, r2
 80175de:	f7ff f8e1 	bl	80167a4 <RegionCommonComputeSymbolTimeLoRa>
 80175e2:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80175e4:	4b0b      	ldr	r3, [pc, #44]	; (8017614 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80175e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80175e8:	4798      	blx	r3
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	3308      	adds	r3, #8
 80175ee:	687a      	ldr	r2, [r7, #4]
 80175f0:	320c      	adds	r2, #12
 80175f2:	7bb9      	ldrb	r1, [r7, #14]
 80175f4:	9201      	str	r2, [sp, #4]
 80175f6:	9300      	str	r3, [sp, #0]
 80175f8:	4603      	mov	r3, r0
 80175fa:	68ba      	ldr	r2, [r7, #8]
 80175fc:	6978      	ldr	r0, [r7, #20]
 80175fe:	f7ff f8f7 	bl	80167f0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017602:	bf00      	nop
 8017604:	3718      	adds	r7, #24
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	0801d8f0 	.word	0x0801d8f0
 8017610:	0801d8e8 	.word	0x0801d8e8
 8017614:	0801d920 	.word	0x0801d920

08017618 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017618:	b5b0      	push	{r4, r5, r7, lr}
 801761a:	b090      	sub	sp, #64	; 0x40
 801761c:	af0a      	add	r7, sp, #40	; 0x28
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	785b      	ldrb	r3, [r3, #1]
 8017626:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017628:	2300      	movs	r3, #0
 801762a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801762c:	2300      	movs	r3, #0
 801762e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	685b      	ldr	r3, [r3, #4]
 8017634:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017636:	4b5a      	ldr	r3, [pc, #360]	; (80177a0 <RegionEU868RxConfig+0x188>)
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	4798      	blx	r3
 801763c:	4603      	mov	r3, r0
 801763e:	2b00      	cmp	r3, #0
 8017640:	d001      	beq.n	8017646 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8017642:	2300      	movs	r3, #0
 8017644:	e0a8      	b.n	8017798 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	7cdb      	ldrb	r3, [r3, #19]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d126      	bne.n	801769c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801764e:	4b55      	ldr	r3, [pc, #340]	; (80177a4 <RegionEU868RxConfig+0x18c>)
 8017650:	681a      	ldr	r2, [r3, #0]
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	781b      	ldrb	r3, [r3, #0]
 8017656:	4619      	mov	r1, r3
 8017658:	460b      	mov	r3, r1
 801765a:	005b      	lsls	r3, r3, #1
 801765c:	440b      	add	r3, r1
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	4413      	add	r3, r2
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017666:	4b4f      	ldr	r3, [pc, #316]	; (80177a4 <RegionEU868RxConfig+0x18c>)
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	781b      	ldrb	r3, [r3, #0]
 801766e:	4619      	mov	r1, r3
 8017670:	460b      	mov	r3, r1
 8017672:	005b      	lsls	r3, r3, #1
 8017674:	440b      	add	r3, r1
 8017676:	009b      	lsls	r3, r3, #2
 8017678:	4413      	add	r3, r2
 801767a:	3304      	adds	r3, #4
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d00c      	beq.n	801769c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017682:	4b48      	ldr	r3, [pc, #288]	; (80177a4 <RegionEU868RxConfig+0x18c>)
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	4619      	mov	r1, r3
 801768c:	460b      	mov	r3, r1
 801768e:	005b      	lsls	r3, r3, #1
 8017690:	440b      	add	r3, r1
 8017692:	009b      	lsls	r3, r3, #2
 8017694:	4413      	add	r3, r2
 8017696:	3304      	adds	r3, #4
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801769c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176a0:	4a41      	ldr	r2, [pc, #260]	; (80177a8 <RegionEU868RxConfig+0x190>)
 80176a2:	5cd3      	ldrb	r3, [r2, r3]
 80176a4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80176a6:	4b3e      	ldr	r3, [pc, #248]	; (80177a0 <RegionEU868RxConfig+0x188>)
 80176a8:	68db      	ldr	r3, [r3, #12]
 80176aa:	6938      	ldr	r0, [r7, #16]
 80176ac:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80176ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176b2:	2b07      	cmp	r3, #7
 80176b4:	d128      	bne.n	8017708 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80176b6:	2300      	movs	r3, #0
 80176b8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80176ba:	4b39      	ldr	r3, [pc, #228]	; (80177a0 <RegionEU868RxConfig+0x188>)
 80176bc:	699c      	ldr	r4, [r3, #24]
 80176be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80176c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80176c6:	fb02 f303 	mul.w	r3, r2, r3
 80176ca:	4619      	mov	r1, r3
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	689b      	ldr	r3, [r3, #8]
 80176d0:	b29b      	uxth	r3, r3
 80176d2:	687a      	ldr	r2, [r7, #4]
 80176d4:	7c92      	ldrb	r2, [r2, #18]
 80176d6:	7df8      	ldrb	r0, [r7, #23]
 80176d8:	9209      	str	r2, [sp, #36]	; 0x24
 80176da:	2200      	movs	r2, #0
 80176dc:	9208      	str	r2, [sp, #32]
 80176de:	2200      	movs	r2, #0
 80176e0:	9207      	str	r2, [sp, #28]
 80176e2:	2200      	movs	r2, #0
 80176e4:	9206      	str	r2, [sp, #24]
 80176e6:	2201      	movs	r2, #1
 80176e8:	9205      	str	r2, [sp, #20]
 80176ea:	2200      	movs	r2, #0
 80176ec:	9204      	str	r2, [sp, #16]
 80176ee:	2200      	movs	r2, #0
 80176f0:	9203      	str	r2, [sp, #12]
 80176f2:	9302      	str	r3, [sp, #8]
 80176f4:	2305      	movs	r3, #5
 80176f6:	9301      	str	r3, [sp, #4]
 80176f8:	4b2c      	ldr	r3, [pc, #176]	; (80177ac <RegionEU868RxConfig+0x194>)
 80176fa:	9300      	str	r3, [sp, #0]
 80176fc:	2300      	movs	r3, #0
 80176fe:	460a      	mov	r2, r1
 8017700:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017704:	47a0      	blx	r4
 8017706:	e024      	b.n	8017752 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017708:	2301      	movs	r3, #1
 801770a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801770c:	4b24      	ldr	r3, [pc, #144]	; (80177a0 <RegionEU868RxConfig+0x188>)
 801770e:	699c      	ldr	r4, [r3, #24]
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	789b      	ldrb	r3, [r3, #2]
 8017714:	461d      	mov	r5, r3
 8017716:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	689b      	ldr	r3, [r3, #8]
 801771e:	b29b      	uxth	r3, r3
 8017720:	687a      	ldr	r2, [r7, #4]
 8017722:	7c92      	ldrb	r2, [r2, #18]
 8017724:	7df8      	ldrb	r0, [r7, #23]
 8017726:	9209      	str	r2, [sp, #36]	; 0x24
 8017728:	2201      	movs	r2, #1
 801772a:	9208      	str	r2, [sp, #32]
 801772c:	2200      	movs	r2, #0
 801772e:	9207      	str	r2, [sp, #28]
 8017730:	2200      	movs	r2, #0
 8017732:	9206      	str	r2, [sp, #24]
 8017734:	2200      	movs	r2, #0
 8017736:	9205      	str	r2, [sp, #20]
 8017738:	2200      	movs	r2, #0
 801773a:	9204      	str	r2, [sp, #16]
 801773c:	2200      	movs	r2, #0
 801773e:	9203      	str	r2, [sp, #12]
 8017740:	9302      	str	r3, [sp, #8]
 8017742:	2308      	movs	r3, #8
 8017744:	9301      	str	r3, [sp, #4]
 8017746:	2300      	movs	r3, #0
 8017748:	9300      	str	r3, [sp, #0]
 801774a:	2301      	movs	r3, #1
 801774c:	460a      	mov	r2, r1
 801774e:	4629      	mov	r1, r5
 8017750:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	7c5b      	ldrb	r3, [r3, #17]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d005      	beq.n	8017766 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801775a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801775e:	4a14      	ldr	r2, [pc, #80]	; (80177b0 <RegionEU868RxConfig+0x198>)
 8017760:	5cd3      	ldrb	r3, [r2, r3]
 8017762:	75bb      	strb	r3, [r7, #22]
 8017764:	e004      	b.n	8017770 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801776a:	4a12      	ldr	r2, [pc, #72]	; (80177b4 <RegionEU868RxConfig+0x19c>)
 801776c:	5cd3      	ldrb	r3, [r2, r3]
 801776e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017770:	4b0b      	ldr	r3, [pc, #44]	; (80177a0 <RegionEU868RxConfig+0x188>)
 8017772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017774:	7dba      	ldrb	r2, [r7, #22]
 8017776:	320d      	adds	r2, #13
 8017778:	b2d1      	uxtb	r1, r2
 801777a:	7dfa      	ldrb	r2, [r7, #23]
 801777c:	4610      	mov	r0, r2
 801777e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	7cdb      	ldrb	r3, [r3, #19]
 8017784:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017788:	6939      	ldr	r1, [r7, #16]
 801778a:	4618      	mov	r0, r3
 801778c:	f7ff faaa 	bl	8016ce4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017790:	683b      	ldr	r3, [r7, #0]
 8017792:	7bfa      	ldrb	r2, [r7, #15]
 8017794:	701a      	strb	r2, [r3, #0]
    return true;
 8017796:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017798:	4618      	mov	r0, r3
 801779a:	3718      	adds	r7, #24
 801779c:	46bd      	mov	sp, r7
 801779e:	bdb0      	pop	{r4, r5, r7, pc}
 80177a0:	0801d920 	.word	0x0801d920
 80177a4:	200021bc 	.word	0x200021bc
 80177a8:	0801d8e8 	.word	0x0801d8e8
 80177ac:	00014585 	.word	0x00014585
 80177b0:	0801d918 	.word	0x0801d918
 80177b4:	0801d910 	.word	0x0801d910

080177b8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80177b8:	b590      	push	{r4, r7, lr}
 80177ba:	b093      	sub	sp, #76	; 0x4c
 80177bc:	af0a      	add	r7, sp, #40	; 0x28
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80177ca:	461a      	mov	r2, r3
 80177cc:	4b5d      	ldr	r3, [pc, #372]	; (8017944 <RegionEU868TxConfig+0x18c>)
 80177ce:	5c9b      	ldrb	r3, [r3, r2]
 80177d0:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80177d8:	4b5b      	ldr	r3, [pc, #364]	; (8017948 <RegionEU868TxConfig+0x190>)
 80177da:	681a      	ldr	r2, [r3, #0]
 80177dc:	4b5b      	ldr	r3, [pc, #364]	; (801794c <RegionEU868TxConfig+0x194>)
 80177de:	6819      	ldr	r1, [r3, #0]
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	781b      	ldrb	r3, [r3, #0]
 80177e4:	461c      	mov	r4, r3
 80177e6:	4623      	mov	r3, r4
 80177e8:	005b      	lsls	r3, r3, #1
 80177ea:	4423      	add	r3, r4
 80177ec:	009b      	lsls	r3, r3, #2
 80177ee:	440b      	add	r3, r1
 80177f0:	3309      	adds	r3, #9
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	4619      	mov	r1, r3
 80177f6:	460b      	mov	r3, r1
 80177f8:	005b      	lsls	r3, r3, #1
 80177fa:	440b      	add	r3, r1
 80177fc:	00db      	lsls	r3, r3, #3
 80177fe:	4413      	add	r3, r2
 8017800:	3302      	adds	r3, #2
 8017802:	f993 3000 	ldrsb.w	r3, [r3]
 8017806:	4619      	mov	r1, r3
 8017808:	f7ff fa39 	bl	8016c7e <RegionCommonLimitTxPower>
 801780c:	4603      	mov	r3, r0
 801780e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017816:	494e      	ldr	r1, [pc, #312]	; (8017950 <RegionEU868TxConfig+0x198>)
 8017818:	4618      	mov	r0, r3
 801781a:	f7ff fa45 	bl	8016ca8 <RegionCommonGetBandwidth>
 801781e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017820:	2300      	movs	r3, #0
 8017822:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	6859      	ldr	r1, [r3, #4]
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	689a      	ldr	r2, [r3, #8]
 801782c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017830:	4618      	mov	r0, r3
 8017832:	f7ff f895 	bl	8016960 <RegionCommonComputeTxPower>
 8017836:	4603      	mov	r3, r0
 8017838:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801783a:	4b46      	ldr	r3, [pc, #280]	; (8017954 <RegionEU868TxConfig+0x19c>)
 801783c:	68da      	ldr	r2, [r3, #12]
 801783e:	4b43      	ldr	r3, [pc, #268]	; (801794c <RegionEU868TxConfig+0x194>)
 8017840:	6819      	ldr	r1, [r3, #0]
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	4618      	mov	r0, r3
 8017848:	4603      	mov	r3, r0
 801784a:	005b      	lsls	r3, r3, #1
 801784c:	4403      	add	r3, r0
 801784e:	009b      	lsls	r3, r3, #2
 8017850:	440b      	add	r3, r1
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	4618      	mov	r0, r3
 8017856:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801785e:	2b07      	cmp	r3, #7
 8017860:	d124      	bne.n	80178ac <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017862:	2300      	movs	r3, #0
 8017864:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017866:	4b3b      	ldr	r3, [pc, #236]	; (8017954 <RegionEU868TxConfig+0x19c>)
 8017868:	69dc      	ldr	r4, [r3, #28]
 801786a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801786e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017872:	fb02 f303 	mul.w	r3, r2, r3
 8017876:	461a      	mov	r2, r3
 8017878:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801787c:	7ff8      	ldrb	r0, [r7, #31]
 801787e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017882:	9308      	str	r3, [sp, #32]
 8017884:	2300      	movs	r3, #0
 8017886:	9307      	str	r3, [sp, #28]
 8017888:	2300      	movs	r3, #0
 801788a:	9306      	str	r3, [sp, #24]
 801788c:	2300      	movs	r3, #0
 801788e:	9305      	str	r3, [sp, #20]
 8017890:	2301      	movs	r3, #1
 8017892:	9304      	str	r3, [sp, #16]
 8017894:	2300      	movs	r3, #0
 8017896:	9303      	str	r3, [sp, #12]
 8017898:	2305      	movs	r3, #5
 801789a:	9302      	str	r3, [sp, #8]
 801789c:	2300      	movs	r3, #0
 801789e:	9301      	str	r3, [sp, #4]
 80178a0:	9200      	str	r2, [sp, #0]
 80178a2:	69bb      	ldr	r3, [r7, #24]
 80178a4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80178a8:	47a0      	blx	r4
 80178aa:	e01d      	b.n	80178e8 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80178ac:	2301      	movs	r3, #1
 80178ae:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80178b0:	4b28      	ldr	r3, [pc, #160]	; (8017954 <RegionEU868TxConfig+0x19c>)
 80178b2:	69dc      	ldr	r4, [r3, #28]
 80178b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80178b8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80178bc:	7ff8      	ldrb	r0, [r7, #31]
 80178be:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80178c2:	9208      	str	r2, [sp, #32]
 80178c4:	2200      	movs	r2, #0
 80178c6:	9207      	str	r2, [sp, #28]
 80178c8:	2200      	movs	r2, #0
 80178ca:	9206      	str	r2, [sp, #24]
 80178cc:	2200      	movs	r2, #0
 80178ce:	9205      	str	r2, [sp, #20]
 80178d0:	2201      	movs	r2, #1
 80178d2:	9204      	str	r2, [sp, #16]
 80178d4:	2200      	movs	r2, #0
 80178d6:	9203      	str	r2, [sp, #12]
 80178d8:	2208      	movs	r2, #8
 80178da:	9202      	str	r2, [sp, #8]
 80178dc:	2201      	movs	r2, #1
 80178de:	9201      	str	r2, [sp, #4]
 80178e0:	9300      	str	r3, [sp, #0]
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	2200      	movs	r2, #0
 80178e6:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80178e8:	4b18      	ldr	r3, [pc, #96]	; (801794c <RegionEU868TxConfig+0x194>)
 80178ea:	681a      	ldr	r2, [r3, #0]
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	781b      	ldrb	r3, [r3, #0]
 80178f0:	4619      	mov	r1, r3
 80178f2:	460b      	mov	r3, r1
 80178f4:	005b      	lsls	r3, r3, #1
 80178f6:	440b      	add	r3, r1
 80178f8:	009b      	lsls	r3, r3, #2
 80178fa:	4413      	add	r3, r2
 80178fc:	681a      	ldr	r2, [r3, #0]
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017904:	4619      	mov	r1, r3
 8017906:	4610      	mov	r0, r2
 8017908:	f7ff fa1e 	bl	8016d48 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	899b      	ldrh	r3, [r3, #12]
 8017916:	4619      	mov	r1, r3
 8017918:	4610      	mov	r0, r2
 801791a:	f7ff faa3 	bl	8016e64 <GetTimeOnAir>
 801791e:	4602      	mov	r2, r0
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017924:	4b0b      	ldr	r3, [pc, #44]	; (8017954 <RegionEU868TxConfig+0x19c>)
 8017926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017928:	68fa      	ldr	r2, [r7, #12]
 801792a:	8992      	ldrh	r2, [r2, #12]
 801792c:	b2d1      	uxtb	r1, r2
 801792e:	7ffa      	ldrb	r2, [r7, #31]
 8017930:	4610      	mov	r0, r2
 8017932:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	7f7a      	ldrb	r2, [r7, #29]
 8017938:	701a      	strb	r2, [r3, #0]
    return true;
 801793a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801793c:	4618      	mov	r0, r3
 801793e:	3724      	adds	r7, #36	; 0x24
 8017940:	46bd      	mov	sp, r7
 8017942:	bd90      	pop	{r4, r7, pc}
 8017944:	0801d8e8 	.word	0x0801d8e8
 8017948:	200021b8 	.word	0x200021b8
 801794c:	200021bc 	.word	0x200021bc
 8017950:	0801d8f0 	.word	0x0801d8f0
 8017954:	0801d920 	.word	0x0801d920

08017958 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017958:	b590      	push	{r4, r7, lr}
 801795a:	b093      	sub	sp, #76	; 0x4c
 801795c:	af00      	add	r7, sp, #0
 801795e:	60f8      	str	r0, [r7, #12]
 8017960:	60b9      	str	r1, [r7, #8]
 8017962:	607a      	str	r2, [r7, #4]
 8017964:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017966:	2307      	movs	r3, #7
 8017968:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801796c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017970:	2200      	movs	r2, #0
 8017972:	601a      	str	r2, [r3, #0]
 8017974:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017976:	2300      	movs	r3, #0
 8017978:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 801797c:	2300      	movs	r3, #0
 801797e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017982:	2300      	movs	r3, #0
 8017984:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017986:	e085      	b.n	8017a94 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	685a      	ldr	r2, [r3, #4]
 801798c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017990:	4413      	add	r3, r2
 8017992:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017996:	4611      	mov	r1, r2
 8017998:	4618      	mov	r0, r3
 801799a:	f7fe fe29 	bl	80165f0 <RegionCommonParseLinkAdrReq>
 801799e:	4603      	mov	r3, r0
 80179a0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80179a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d07b      	beq.n	8017aa4 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80179ac:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80179b0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80179b4:	4413      	add	r3, r2
 80179b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80179ba:	2307      	movs	r3, #7
 80179bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80179c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80179c4:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80179c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d109      	bne.n	80179e2 <RegionEU868LinkAdrReq+0x8a>
 80179ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d106      	bne.n	80179e2 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80179d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80179d8:	f023 0301 	bic.w	r3, r3, #1
 80179dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80179e0:	e058      	b.n	8017a94 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80179e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d003      	beq.n	80179f2 <RegionEU868LinkAdrReq+0x9a>
 80179ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80179ee:	2b05      	cmp	r3, #5
 80179f0:	d903      	bls.n	80179fa <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80179f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80179f6:	2b06      	cmp	r3, #6
 80179f8:	d906      	bls.n	8017a08 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80179fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80179fe:	f023 0301 	bic.w	r3, r3, #1
 8017a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017a06:	e045      	b.n	8017a94 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017a08:	2300      	movs	r3, #0
 8017a0a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017a0e:	e03d      	b.n	8017a8c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017a10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017a14:	2b06      	cmp	r3, #6
 8017a16:	d118      	bne.n	8017a4a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017a18:	4b5f      	ldr	r3, [pc, #380]	; (8017b98 <RegionEU868LinkAdrReq+0x240>)
 8017a1a:	6819      	ldr	r1, [r3, #0]
 8017a1c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017a20:	4613      	mov	r3, r2
 8017a22:	005b      	lsls	r3, r3, #1
 8017a24:	4413      	add	r3, r2
 8017a26:	009b      	lsls	r3, r3, #2
 8017a28:	440b      	add	r3, r1
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d028      	beq.n	8017a82 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017a30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017a34:	2201      	movs	r2, #1
 8017a36:	fa02 f303 	lsl.w	r3, r2, r3
 8017a3a:	b21a      	sxth	r2, r3
 8017a3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a3e:	b21b      	sxth	r3, r3
 8017a40:	4313      	orrs	r3, r2
 8017a42:	b21b      	sxth	r3, r3
 8017a44:	b29b      	uxth	r3, r3
 8017a46:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017a48:	e01b      	b.n	8017a82 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017a4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a4c:	461a      	mov	r2, r3
 8017a4e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017a52:	fa42 f303 	asr.w	r3, r2, r3
 8017a56:	f003 0301 	and.w	r3, r3, #1
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d011      	beq.n	8017a82 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8017a5e:	4b4e      	ldr	r3, [pc, #312]	; (8017b98 <RegionEU868LinkAdrReq+0x240>)
 8017a60:	6819      	ldr	r1, [r3, #0]
 8017a62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017a66:	4613      	mov	r3, r2
 8017a68:	005b      	lsls	r3, r3, #1
 8017a6a:	4413      	add	r3, r2
 8017a6c:	009b      	lsls	r3, r3, #2
 8017a6e:	440b      	add	r3, r1
 8017a70:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d105      	bne.n	8017a82 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017a76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017a7a:	f023 0301 	bic.w	r3, r3, #1
 8017a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017a82:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017a86:	3301      	adds	r3, #1
 8017a88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017a8c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017a90:	2b0f      	cmp	r3, #15
 8017a92:	d9bd      	bls.n	8017a10 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	7a1b      	ldrb	r3, [r3, #8]
 8017a98:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	f4ff af73 	bcc.w	8017988 <RegionEU868LinkAdrReq+0x30>
 8017aa2:	e000      	b.n	8017aa6 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017aa4:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017aa6:	2302      	movs	r3, #2
 8017aa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	7a5b      	ldrb	r3, [r3, #9]
 8017ab0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f7ff fa23 	bl	8016f04 <RegionEU868GetPhyParam>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8017ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017ac6:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	7a9b      	ldrb	r3, [r3, #10]
 8017acc:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017ace:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8017ad2:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017ad4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8017ad8:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017ada:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017ade:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017ae6:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017aee:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	7b5b      	ldrb	r3, [r3, #13]
 8017af4:	b25b      	sxtb	r3, r3
 8017af6:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017af8:	2310      	movs	r3, #16
 8017afa:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017afc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017b00:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b04:	b25b      	sxtb	r3, r3
 8017b06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017b0a:	2307      	movs	r3, #7
 8017b0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017b10:	4b21      	ldr	r3, [pc, #132]	; (8017b98 <RegionEU868LinkAdrReq+0x240>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8017b16:	2307      	movs	r3, #7
 8017b18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017b28:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8017b2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017b30:	1c9a      	adds	r2, r3, #2
 8017b32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017b36:	1c59      	adds	r1, r3, #1
 8017b38:	f107 0010 	add.w	r0, r7, #16
 8017b3c:	4623      	mov	r3, r4
 8017b3e:	f7fe fda8 	bl	8016692 <RegionCommonLinkAdrReqVerifyParams>
 8017b42:	4603      	mov	r3, r0
 8017b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017b4c:	2b07      	cmp	r3, #7
 8017b4e:	d10d      	bne.n	8017b6c <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017b50:	4b11      	ldr	r3, [pc, #68]	; (8017b98 <RegionEU868LinkAdrReq+0x240>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017b58:	220c      	movs	r2, #12
 8017b5a:	2100      	movs	r1, #0
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f000 fb7d 	bl	801825c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8017b62:	4b0d      	ldr	r3, [pc, #52]	; (8017b98 <RegionEU868LinkAdrReq+0x240>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017b68:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017b6c:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017b74:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017b7c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017b86:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017b8a:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	374c      	adds	r7, #76	; 0x4c
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd90      	pop	{r4, r7, pc}
 8017b98:	200021bc 	.word	0x200021bc

08017b9c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b084      	sub	sp, #16
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017ba4:	2307      	movs	r3, #7
 8017ba6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	685b      	ldr	r3, [r3, #4]
 8017bb0:	f107 020e 	add.w	r2, r7, #14
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f7ff f8de 	bl	8016d78 <VerifyRfFreq>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	f083 0301 	eor.w	r3, r3, #1
 8017bc2:	b2db      	uxtb	r3, r3
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d003      	beq.n	8017bd0 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017bc8:	7bfb      	ldrb	r3, [r7, #15]
 8017bca:	f023 0301 	bic.w	r3, r3, #1
 8017bce:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8017bd6:	2207      	movs	r2, #7
 8017bd8:	2100      	movs	r1, #0
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7fe fb47 	bl	801626e <RegionCommonValueInRange>
 8017be0:	4603      	mov	r3, r0
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d103      	bne.n	8017bee <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8017be6:	7bfb      	ldrb	r3, [r7, #15]
 8017be8:	f023 0302 	bic.w	r3, r3, #2
 8017bec:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bf4:	2205      	movs	r2, #5
 8017bf6:	2100      	movs	r1, #0
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7fe fb38 	bl	801626e <RegionCommonValueInRange>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d103      	bne.n	8017c0c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017c04:	7bfb      	ldrb	r3, [r7, #15]
 8017c06:	f023 0304 	bic.w	r3, r3, #4
 8017c0a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c0e:	4618      	mov	r0, r3
 8017c10:	3710      	adds	r7, #16
 8017c12:	46bd      	mov	sp, r7
 8017c14:	bd80      	pop	{r7, pc}
	...

08017c18 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b086      	sub	sp, #24
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017c20:	2303      	movs	r3, #3
 8017c22:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d114      	bne.n	8017c58 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8017c38:	f107 0308 	add.w	r3, r7, #8
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f000 f9f9 	bl	8018034 <RegionEU868ChannelsRemove>
 8017c42:	4603      	mov	r3, r0
 8017c44:	f083 0301 	eor.w	r3, r3, #1
 8017c48:	b2db      	uxtb	r3, r3
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d03b      	beq.n	8017cc6 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8017c4e:	7dfb      	ldrb	r3, [r7, #23]
 8017c50:	f023 0303 	bic.w	r3, r3, #3
 8017c54:	75fb      	strb	r3, [r7, #23]
 8017c56:	e036      	b.n	8017cc6 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017c64:	b2db      	uxtb	r3, r3
 8017c66:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8017c68:	f107 030c 	add.w	r3, r7, #12
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f000 f93f 	bl	8017ef0 <RegionEU868ChannelAdd>
 8017c72:	4603      	mov	r3, r0
 8017c74:	2b06      	cmp	r3, #6
 8017c76:	d820      	bhi.n	8017cba <RegionEU868NewChannelReq+0xa2>
 8017c78:	a201      	add	r2, pc, #4	; (adr r2, 8017c80 <RegionEU868NewChannelReq+0x68>)
 8017c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c7e:	bf00      	nop
 8017c80:	08017cc5 	.word	0x08017cc5
 8017c84:	08017cbb 	.word	0x08017cbb
 8017c88:	08017cbb 	.word	0x08017cbb
 8017c8c:	08017cbb 	.word	0x08017cbb
 8017c90:	08017c9d 	.word	0x08017c9d
 8017c94:	08017ca7 	.word	0x08017ca7
 8017c98:	08017cb1 	.word	0x08017cb1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017c9c:	7dfb      	ldrb	r3, [r7, #23]
 8017c9e:	f023 0301 	bic.w	r3, r3, #1
 8017ca2:	75fb      	strb	r3, [r7, #23]
                break;
 8017ca4:	e00f      	b.n	8017cc6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017ca6:	7dfb      	ldrb	r3, [r7, #23]
 8017ca8:	f023 0302 	bic.w	r3, r3, #2
 8017cac:	75fb      	strb	r3, [r7, #23]
                break;
 8017cae:	e00a      	b.n	8017cc6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8017cb0:	7dfb      	ldrb	r3, [r7, #23]
 8017cb2:	f023 0303 	bic.w	r3, r3, #3
 8017cb6:	75fb      	strb	r3, [r7, #23]
                break;
 8017cb8:	e005      	b.n	8017cc6 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8017cba:	7dfb      	ldrb	r3, [r7, #23]
 8017cbc:	f023 0303 	bic.w	r3, r3, #3
 8017cc0:	75fb      	strb	r3, [r7, #23]
                break;
 8017cc2:	e000      	b.n	8017cc6 <RegionEU868NewChannelReq+0xae>
                break;
 8017cc4:	bf00      	nop
            }
        }
    }

    return status;
 8017cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017cca:	4618      	mov	r0, r3
 8017ccc:	3718      	adds	r7, #24
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bd80      	pop	{r7, pc}
 8017cd2:	bf00      	nop

08017cd4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017cd4:	b480      	push	{r7}
 8017cd6:	b083      	sub	sp, #12
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	370c      	adds	r7, #12
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bc80      	pop	{r7}
 8017ce8:	4770      	bx	lr
	...

08017cec <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017cf4:	2303      	movs	r3, #3
 8017cf6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	685b      	ldr	r3, [r3, #4]
 8017d00:	f107 020e 	add.w	r2, r7, #14
 8017d04:	4611      	mov	r1, r2
 8017d06:	4618      	mov	r0, r3
 8017d08:	f7ff f836 	bl	8016d78 <VerifyRfFreq>
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	f083 0301 	eor.w	r3, r3, #1
 8017d12:	b2db      	uxtb	r3, r3
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d003      	beq.n	8017d20 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8017d18:	7bfb      	ldrb	r3, [r7, #15]
 8017d1a:	f023 0301 	bic.w	r3, r3, #1
 8017d1e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017d20:	4b13      	ldr	r3, [pc, #76]	; (8017d70 <RegionEU868DlChannelReq+0x84>)
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	4619      	mov	r1, r3
 8017d2a:	460b      	mov	r3, r1
 8017d2c:	005b      	lsls	r3, r3, #1
 8017d2e:	440b      	add	r3, r1
 8017d30:	009b      	lsls	r3, r3, #2
 8017d32:	4413      	add	r3, r2
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d103      	bne.n	8017d42 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8017d3a:	7bfb      	ldrb	r3, [r7, #15]
 8017d3c:	f023 0302 	bic.w	r3, r3, #2
 8017d40:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017d42:	7bfb      	ldrb	r3, [r7, #15]
 8017d44:	2b03      	cmp	r3, #3
 8017d46:	d10d      	bne.n	8017d64 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017d48:	4b09      	ldr	r3, [pc, #36]	; (8017d70 <RegionEU868DlChannelReq+0x84>)
 8017d4a:	6819      	ldr	r1, [r3, #0]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	4618      	mov	r0, r3
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	685a      	ldr	r2, [r3, #4]
 8017d56:	4603      	mov	r3, r0
 8017d58:	005b      	lsls	r3, r3, #1
 8017d5a:	4403      	add	r3, r0
 8017d5c:	009b      	lsls	r3, r3, #2
 8017d5e:	440b      	add	r3, r1
 8017d60:	3304      	adds	r3, #4
 8017d62:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8017d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017d68:	4618      	mov	r0, r3
 8017d6a:	3710      	adds	r7, #16
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	200021bc 	.word	0x200021bc

08017d74 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017d74:	b480      	push	{r7}
 8017d76:	b083      	sub	sp, #12
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	460a      	mov	r2, r1
 8017d7e:	71fb      	strb	r3, [r7, #7]
 8017d80:	4613      	mov	r3, r2
 8017d82:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8017d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	370c      	adds	r7, #12
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bc80      	pop	{r7}
 8017d90:	4770      	bx	lr
	...

08017d94 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b09a      	sub	sp, #104	; 0x68
 8017d98:	af02      	add	r7, sp, #8
 8017d9a:	60f8      	str	r0, [r7, #12]
 8017d9c:	60b9      	str	r1, [r7, #8]
 8017d9e:	607a      	str	r2, [r7, #4]
 8017da0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8017da2:	2300      	movs	r3, #0
 8017da4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8017da8:	2300      	movs	r3, #0
 8017daa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8017dae:	2300      	movs	r3, #0
 8017db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017db2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017db6:	2200      	movs	r2, #0
 8017db8:	601a      	str	r2, [r3, #0]
 8017dba:	605a      	str	r2, [r3, #4]
 8017dbc:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017dbe:	230c      	movs	r3, #12
 8017dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017dc4:	2307      	movs	r3, #7
 8017dc6:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8017dc8:	4b47      	ldr	r3, [pc, #284]	; (8017ee8 <RegionEU868NextChannel+0x154>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017dd0:	2201      	movs	r2, #1
 8017dd2:	2100      	movs	r1, #0
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7fe fa9b 	bl	8016310 <RegionCommonCountChannels>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d10a      	bne.n	8017df6 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017de0:	4b41      	ldr	r3, [pc, #260]	; (8017ee8 <RegionEU868NextChannel+0x154>)
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8017de8:	4b3f      	ldr	r3, [pc, #252]	; (8017ee8 <RegionEU868NextChannel+0x154>)
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f042 0207 	orr.w	r2, r2, #7
 8017df0:	b292      	uxth	r2, r2
 8017df2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	7a5b      	ldrb	r3, [r3, #9]
 8017dfa:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017e06:	4b38      	ldr	r3, [pc, #224]	; (8017ee8 <RegionEU868NextChannel+0x154>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8017e0e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017e10:	4b35      	ldr	r3, [pc, #212]	; (8017ee8 <RegionEU868NextChannel+0x154>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8017e16:	4b35      	ldr	r3, [pc, #212]	; (8017eec <RegionEU868NextChannel+0x158>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8017e1c:	2310      	movs	r3, #16
 8017e1e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017e20:	f107 0312 	add.w	r3, r7, #18
 8017e24:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	685b      	ldr	r3, [r3, #4]
 8017e30:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	7a9b      	ldrb	r3, [r3, #10]
 8017e36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8017e3a:	2306      	movs	r3, #6
 8017e3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017e40:	68fa      	ldr	r2, [r7, #12]
 8017e42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017e46:	320c      	adds	r2, #12
 8017e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017e4c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	7d1b      	ldrb	r3, [r3, #20]
 8017e54:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	8adb      	ldrh	r3, [r3, #22]
 8017e62:	4619      	mov	r1, r3
 8017e64:	4610      	mov	r0, r2
 8017e66:	f7fe fffd 	bl	8016e64 <GetTimeOnAir>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017e6e:	f107 0314 	add.w	r3, r7, #20
 8017e72:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017e74:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8017e78:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017e7c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	9301      	str	r3, [sp, #4]
 8017e84:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8017e88:	9300      	str	r3, [sp, #0]
 8017e8a:	460b      	mov	r3, r1
 8017e8c:	6839      	ldr	r1, [r7, #0]
 8017e8e:	f7fe fe56 	bl	8016b3e <RegionCommonIdentifyChannels>
 8017e92:	4603      	mov	r3, r0
 8017e94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017e98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d10e      	bne.n	8017ebe <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017ea0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8017ea4:	3b01      	subs	r3, #1
 8017ea6:	4619      	mov	r1, r3
 8017ea8:	2000      	movs	r0, #0
 8017eaa:	f000 f985 	bl	80181b8 <randr>
 8017eae:	4603      	mov	r3, r0
 8017eb0:	3360      	adds	r3, #96	; 0x60
 8017eb2:	443b      	add	r3, r7
 8017eb4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	701a      	strb	r2, [r3, #0]
 8017ebc:	e00e      	b.n	8017edc <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8017ebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017ec2:	2b0c      	cmp	r3, #12
 8017ec4:	d10a      	bne.n	8017edc <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017ec6:	4b08      	ldr	r3, [pc, #32]	; (8017ee8 <RegionEU868NextChannel+0x154>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8017ece:	4b06      	ldr	r3, [pc, #24]	; (8017ee8 <RegionEU868NextChannel+0x154>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	f042 0207 	orr.w	r2, r2, #7
 8017ed6:	b292      	uxth	r2, r2
 8017ed8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8017edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3760      	adds	r7, #96	; 0x60
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	200021bc 	.word	0x200021bc
 8017eec:	200021b8 	.word	0x200021b8

08017ef0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b084      	sub	sp, #16
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017ef8:	2300      	movs	r3, #0
 8017efa:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017efc:	2300      	movs	r3, #0
 8017efe:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017f00:	2300      	movs	r3, #0
 8017f02:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	791b      	ldrb	r3, [r3, #4]
 8017f08:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017f0a:	7b7b      	ldrb	r3, [r7, #13]
 8017f0c:	2b02      	cmp	r3, #2
 8017f0e:	d801      	bhi.n	8017f14 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017f10:	2306      	movs	r3, #6
 8017f12:	e089      	b.n	8018028 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017f14:	7b7b      	ldrb	r3, [r7, #13]
 8017f16:	2b0f      	cmp	r3, #15
 8017f18:	d901      	bls.n	8017f1e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017f1a:	2303      	movs	r3, #3
 8017f1c:	e084      	b.n	8018028 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	7a1b      	ldrb	r3, [r3, #8]
 8017f24:	f343 0303 	sbfx	r3, r3, #0, #4
 8017f28:	b25b      	sxtb	r3, r3
 8017f2a:	2207      	movs	r2, #7
 8017f2c:	2100      	movs	r1, #0
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f7fe f99d 	bl	801626e <RegionCommonValueInRange>
 8017f34:	4603      	mov	r3, r0
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d101      	bne.n	8017f3e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	7a1b      	ldrb	r3, [r3, #8]
 8017f44:	f343 1303 	sbfx	r3, r3, #4, #4
 8017f48:	b25b      	sxtb	r3, r3
 8017f4a:	2207      	movs	r2, #7
 8017f4c:	2100      	movs	r1, #0
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f7fe f98d 	bl	801626e <RegionCommonValueInRange>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d101      	bne.n	8017f5e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	7a1b      	ldrb	r3, [r3, #8]
 8017f64:	f343 0303 	sbfx	r3, r3, #0, #4
 8017f68:	b25a      	sxtb	r2, r3
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	7a1b      	ldrb	r3, [r3, #8]
 8017f70:	f343 1303 	sbfx	r3, r3, #4, #4
 8017f74:	b25b      	sxtb	r3, r3
 8017f76:	429a      	cmp	r2, r3
 8017f78:	dd01      	ble.n	8017f7e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8017f7a:	2301      	movs	r3, #1
 8017f7c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017f7e:	7bbb      	ldrb	r3, [r7, #14]
 8017f80:	f083 0301 	eor.w	r3, r3, #1
 8017f84:	b2db      	uxtb	r3, r3
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d010      	beq.n	8017fac <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	f107 020c 	add.w	r2, r7, #12
 8017f94:	4611      	mov	r1, r2
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7fe feee 	bl	8016d78 <VerifyRfFreq>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	f083 0301 	eor.w	r3, r3, #1
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d001      	beq.n	8017fac <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8017fa8:	2301      	movs	r3, #1
 8017faa:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017fac:	7bfb      	ldrb	r3, [r7, #15]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d004      	beq.n	8017fbc <RegionEU868ChannelAdd+0xcc>
 8017fb2:	7bbb      	ldrb	r3, [r7, #14]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d001      	beq.n	8017fbc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017fb8:	2306      	movs	r3, #6
 8017fba:	e035      	b.n	8018028 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017fbc:	7bfb      	ldrb	r3, [r7, #15]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d001      	beq.n	8017fc6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017fc2:	2305      	movs	r3, #5
 8017fc4:	e030      	b.n	8018028 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8017fc6:	7bbb      	ldrb	r3, [r7, #14]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d001      	beq.n	8017fd0 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017fcc:	2304      	movs	r3, #4
 8017fce:	e02b      	b.n	8018028 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017fd0:	4b17      	ldr	r3, [pc, #92]	; (8018030 <RegionEU868ChannelAdd+0x140>)
 8017fd2:	6819      	ldr	r1, [r3, #0]
 8017fd4:	7b7a      	ldrb	r2, [r7, #13]
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	005b      	lsls	r3, r3, #1
 8017fda:	4413      	add	r3, r2
 8017fdc:	009b      	lsls	r3, r3, #2
 8017fde:	18c8      	adds	r0, r1, r3
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	220c      	movs	r2, #12
 8017fe6:	4619      	mov	r1, r3
 8017fe8:	f000 f8fd 	bl	80181e6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017fec:	4b10      	ldr	r3, [pc, #64]	; (8018030 <RegionEU868ChannelAdd+0x140>)
 8017fee:	6819      	ldr	r1, [r3, #0]
 8017ff0:	7b7a      	ldrb	r2, [r7, #13]
 8017ff2:	7b38      	ldrb	r0, [r7, #12]
 8017ff4:	4613      	mov	r3, r2
 8017ff6:	005b      	lsls	r3, r3, #1
 8017ff8:	4413      	add	r3, r2
 8017ffa:	009b      	lsls	r3, r3, #2
 8017ffc:	440b      	add	r3, r1
 8017ffe:	3309      	adds	r3, #9
 8018000:	4602      	mov	r2, r0
 8018002:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8018004:	4b0a      	ldr	r3, [pc, #40]	; (8018030 <RegionEU868ChannelAdd+0x140>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 801800c:	b21a      	sxth	r2, r3
 801800e:	7b7b      	ldrb	r3, [r7, #13]
 8018010:	2101      	movs	r1, #1
 8018012:	fa01 f303 	lsl.w	r3, r1, r3
 8018016:	b21b      	sxth	r3, r3
 8018018:	4313      	orrs	r3, r2
 801801a:	b21a      	sxth	r2, r3
 801801c:	4b04      	ldr	r3, [pc, #16]	; (8018030 <RegionEU868ChannelAdd+0x140>)
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	b292      	uxth	r2, r2
 8018022:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8018026:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018028:	4618      	mov	r0, r3
 801802a:	3710      	adds	r7, #16
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}
 8018030:	200021bc 	.word	0x200021bc

08018034 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b086      	sub	sp, #24
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	781b      	ldrb	r3, [r3, #0]
 8018040:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018042:	7dfb      	ldrb	r3, [r7, #23]
 8018044:	2b02      	cmp	r3, #2
 8018046:	d801      	bhi.n	801804c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018048:	2300      	movs	r3, #0
 801804a:	e016      	b.n	801807a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801804c:	4b0d      	ldr	r3, [pc, #52]	; (8018084 <RegionEU868ChannelsRemove+0x50>)
 801804e:	6819      	ldr	r1, [r3, #0]
 8018050:	7dfa      	ldrb	r2, [r7, #23]
 8018052:	4613      	mov	r3, r2
 8018054:	005b      	lsls	r3, r3, #1
 8018056:	4413      	add	r3, r2
 8018058:	009b      	lsls	r3, r3, #2
 801805a:	440b      	add	r3, r1
 801805c:	461a      	mov	r2, r3
 801805e:	2300      	movs	r3, #0
 8018060:	6013      	str	r3, [r2, #0]
 8018062:	6053      	str	r3, [r2, #4]
 8018064:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018066:	4b07      	ldr	r3, [pc, #28]	; (8018084 <RegionEU868ChannelsRemove+0x50>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801806e:	7df9      	ldrb	r1, [r7, #23]
 8018070:	2210      	movs	r2, #16
 8018072:	4618      	mov	r0, r3
 8018074:	f7fe f918 	bl	80162a8 <RegionCommonChanDisable>
 8018078:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801807a:	4618      	mov	r0, r3
 801807c:	3718      	adds	r7, #24
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
 8018082:	bf00      	nop
 8018084:	200021bc 	.word	0x200021bc

08018088 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018088:	b590      	push	{r4, r7, lr}
 801808a:	b085      	sub	sp, #20
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018096:	4b20      	ldr	r3, [pc, #128]	; (8018118 <RegionEU868SetContinuousWave+0x90>)
 8018098:	681a      	ldr	r2, [r3, #0]
 801809a:	4b20      	ldr	r3, [pc, #128]	; (801811c <RegionEU868SetContinuousWave+0x94>)
 801809c:	6819      	ldr	r1, [r3, #0]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	781b      	ldrb	r3, [r3, #0]
 80180a2:	461c      	mov	r4, r3
 80180a4:	4623      	mov	r3, r4
 80180a6:	005b      	lsls	r3, r3, #1
 80180a8:	4423      	add	r3, r4
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	440b      	add	r3, r1
 80180ae:	3309      	adds	r3, #9
 80180b0:	781b      	ldrb	r3, [r3, #0]
 80180b2:	4619      	mov	r1, r3
 80180b4:	460b      	mov	r3, r1
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	440b      	add	r3, r1
 80180ba:	00db      	lsls	r3, r3, #3
 80180bc:	4413      	add	r3, r2
 80180be:	3302      	adds	r3, #2
 80180c0:	f993 3000 	ldrsb.w	r3, [r3]
 80180c4:	4619      	mov	r1, r3
 80180c6:	f7fe fdda 	bl	8016c7e <RegionCommonLimitTxPower>
 80180ca:	4603      	mov	r3, r0
 80180cc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80180ce:	2300      	movs	r3, #0
 80180d0:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80180d2:	4b12      	ldr	r3, [pc, #72]	; (801811c <RegionEU868SetContinuousWave+0x94>)
 80180d4:	681a      	ldr	r2, [r3, #0]
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	4619      	mov	r1, r3
 80180dc:	460b      	mov	r3, r1
 80180de:	005b      	lsls	r3, r3, #1
 80180e0:	440b      	add	r3, r1
 80180e2:	009b      	lsls	r3, r3, #2
 80180e4:	4413      	add	r3, r2
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6859      	ldr	r1, [r3, #4]
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	689a      	ldr	r2, [r3, #8]
 80180f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7fe fc32 	bl	8016960 <RegionCommonComputeTxPower>
 80180fc:	4603      	mov	r3, r0
 80180fe:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018100:	4b07      	ldr	r3, [pc, #28]	; (8018120 <RegionEU868SetContinuousWave+0x98>)
 8018102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018104:	687a      	ldr	r2, [r7, #4]
 8018106:	8992      	ldrh	r2, [r2, #12]
 8018108:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801810c:	68b8      	ldr	r0, [r7, #8]
 801810e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8018110:	bf00      	nop
 8018112:	3714      	adds	r7, #20
 8018114:	46bd      	mov	sp, r7
 8018116:	bd90      	pop	{r4, r7, pc}
 8018118:	200021b8 	.word	0x200021b8
 801811c:	200021bc 	.word	0x200021bc
 8018120:	0801d920 	.word	0x0801d920

08018124 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018124:	b480      	push	{r7}
 8018126:	b085      	sub	sp, #20
 8018128:	af00      	add	r7, sp, #0
 801812a:	4603      	mov	r3, r0
 801812c:	71fb      	strb	r3, [r7, #7]
 801812e:	460b      	mov	r3, r1
 8018130:	71bb      	strb	r3, [r7, #6]
 8018132:	4613      	mov	r3, r2
 8018134:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018136:	79ba      	ldrb	r2, [r7, #6]
 8018138:	797b      	ldrb	r3, [r7, #5]
 801813a:	1ad3      	subs	r3, r2, r3
 801813c:	b2db      	uxtb	r3, r3
 801813e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018144:	2b00      	cmp	r3, #0
 8018146:	da01      	bge.n	801814c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018148:	2300      	movs	r3, #0
 801814a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801814c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801814e:	4618      	mov	r0, r3
 8018150:	3714      	adds	r7, #20
 8018152:	46bd      	mov	sp, r7
 8018154:	bc80      	pop	{r7}
 8018156:	4770      	bx	lr

08018158 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018158:	b480      	push	{r7}
 801815a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801815c:	4b0d      	ldr	r3, [pc, #52]	; (8018194 <rand1+0x3c>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4a0d      	ldr	r2, [pc, #52]	; (8018198 <rand1+0x40>)
 8018162:	fb02 f303 	mul.w	r3, r2, r3
 8018166:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801816a:	3339      	adds	r3, #57	; 0x39
 801816c:	4a09      	ldr	r2, [pc, #36]	; (8018194 <rand1+0x3c>)
 801816e:	6013      	str	r3, [r2, #0]
 8018170:	4b08      	ldr	r3, [pc, #32]	; (8018194 <rand1+0x3c>)
 8018172:	681a      	ldr	r2, [r3, #0]
 8018174:	2303      	movs	r3, #3
 8018176:	fba3 1302 	umull	r1, r3, r3, r2
 801817a:	1ad1      	subs	r1, r2, r3
 801817c:	0849      	lsrs	r1, r1, #1
 801817e:	440b      	add	r3, r1
 8018180:	0f99      	lsrs	r1, r3, #30
 8018182:	460b      	mov	r3, r1
 8018184:	07db      	lsls	r3, r3, #31
 8018186:	1a5b      	subs	r3, r3, r1
 8018188:	1ad1      	subs	r1, r2, r3
 801818a:	460b      	mov	r3, r1
}
 801818c:	4618      	mov	r0, r3
 801818e:	46bd      	mov	sp, r7
 8018190:	bc80      	pop	{r7}
 8018192:	4770      	bx	lr
 8018194:	2000013c 	.word	0x2000013c
 8018198:	41c64e6d 	.word	0x41c64e6d

0801819c <srand1>:

void srand1( uint32_t seed )
{
 801819c:	b480      	push	{r7}
 801819e:	b083      	sub	sp, #12
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
    next = seed;
 80181a4:	4a03      	ldr	r2, [pc, #12]	; (80181b4 <srand1+0x18>)
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6013      	str	r3, [r2, #0]
}
 80181aa:	bf00      	nop
 80181ac:	370c      	adds	r7, #12
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bc80      	pop	{r7}
 80181b2:	4770      	bx	lr
 80181b4:	2000013c 	.word	0x2000013c

080181b8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b082      	sub	sp, #8
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
 80181c0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80181c2:	f7ff ffc9 	bl	8018158 <rand1>
 80181c6:	4602      	mov	r2, r0
 80181c8:	6839      	ldr	r1, [r7, #0]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	1acb      	subs	r3, r1, r3
 80181ce:	3301      	adds	r3, #1
 80181d0:	fb92 f1f3 	sdiv	r1, r2, r3
 80181d4:	fb01 f303 	mul.w	r3, r1, r3
 80181d8:	1ad2      	subs	r2, r2, r3
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	4413      	add	r3, r2
}
 80181de:	4618      	mov	r0, r3
 80181e0:	3708      	adds	r7, #8
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}

080181e6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80181e6:	b480      	push	{r7}
 80181e8:	b085      	sub	sp, #20
 80181ea:	af00      	add	r7, sp, #0
 80181ec:	60f8      	str	r0, [r7, #12]
 80181ee:	60b9      	str	r1, [r7, #8]
 80181f0:	4613      	mov	r3, r2
 80181f2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80181f4:	e007      	b.n	8018206 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80181f6:	68ba      	ldr	r2, [r7, #8]
 80181f8:	1c53      	adds	r3, r2, #1
 80181fa:	60bb      	str	r3, [r7, #8]
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	1c59      	adds	r1, r3, #1
 8018200:	60f9      	str	r1, [r7, #12]
 8018202:	7812      	ldrb	r2, [r2, #0]
 8018204:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018206:	88fb      	ldrh	r3, [r7, #6]
 8018208:	1e5a      	subs	r2, r3, #1
 801820a:	80fa      	strh	r2, [r7, #6]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d1f2      	bne.n	80181f6 <memcpy1+0x10>
    }
}
 8018210:	bf00      	nop
 8018212:	bf00      	nop
 8018214:	3714      	adds	r7, #20
 8018216:	46bd      	mov	sp, r7
 8018218:	bc80      	pop	{r7}
 801821a:	4770      	bx	lr

0801821c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801821c:	b480      	push	{r7}
 801821e:	b085      	sub	sp, #20
 8018220:	af00      	add	r7, sp, #0
 8018222:	60f8      	str	r0, [r7, #12]
 8018224:	60b9      	str	r1, [r7, #8]
 8018226:	4613      	mov	r3, r2
 8018228:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801822a:	88fb      	ldrh	r3, [r7, #6]
 801822c:	3b01      	subs	r3, #1
 801822e:	68fa      	ldr	r2, [r7, #12]
 8018230:	4413      	add	r3, r2
 8018232:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018234:	e007      	b.n	8018246 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018236:	68ba      	ldr	r2, [r7, #8]
 8018238:	1c53      	adds	r3, r2, #1
 801823a:	60bb      	str	r3, [r7, #8]
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	1e59      	subs	r1, r3, #1
 8018240:	60f9      	str	r1, [r7, #12]
 8018242:	7812      	ldrb	r2, [r2, #0]
 8018244:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018246:	88fb      	ldrh	r3, [r7, #6]
 8018248:	1e5a      	subs	r2, r3, #1
 801824a:	80fa      	strh	r2, [r7, #6]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d1f2      	bne.n	8018236 <memcpyr+0x1a>
    }
}
 8018250:	bf00      	nop
 8018252:	bf00      	nop
 8018254:	3714      	adds	r7, #20
 8018256:	46bd      	mov	sp, r7
 8018258:	bc80      	pop	{r7}
 801825a:	4770      	bx	lr

0801825c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801825c:	b480      	push	{r7}
 801825e:	b083      	sub	sp, #12
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
 8018264:	460b      	mov	r3, r1
 8018266:	70fb      	strb	r3, [r7, #3]
 8018268:	4613      	mov	r3, r2
 801826a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801826c:	e004      	b.n	8018278 <memset1+0x1c>
    {
        *dst++ = value;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	1c5a      	adds	r2, r3, #1
 8018272:	607a      	str	r2, [r7, #4]
 8018274:	78fa      	ldrb	r2, [r7, #3]
 8018276:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018278:	883b      	ldrh	r3, [r7, #0]
 801827a:	1e5a      	subs	r2, r3, #1
 801827c:	803a      	strh	r2, [r7, #0]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1f5      	bne.n	801826e <memset1+0x12>
    }
}
 8018282:	bf00      	nop
 8018284:	bf00      	nop
 8018286:	370c      	adds	r7, #12
 8018288:	46bd      	mov	sp, r7
 801828a:	bc80      	pop	{r7}
 801828c:	4770      	bx	lr
	...

08018290 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018290:	b480      	push	{r7}
 8018292:	b085      	sub	sp, #20
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
 8018298:	460b      	mov	r3, r1
 801829a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801829c:	f04f 33ff 	mov.w	r3, #4294967295
 80182a0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d101      	bne.n	80182ac <Crc32+0x1c>
    {
        return 0;
 80182a8:	2300      	movs	r3, #0
 80182aa:	e026      	b.n	80182fa <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80182ac:	2300      	movs	r3, #0
 80182ae:	817b      	strh	r3, [r7, #10]
 80182b0:	e01d      	b.n	80182ee <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80182b2:	897b      	ldrh	r3, [r7, #10]
 80182b4:	687a      	ldr	r2, [r7, #4]
 80182b6:	4413      	add	r3, r2
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	461a      	mov	r2, r3
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	4053      	eors	r3, r2
 80182c0:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80182c2:	2300      	movs	r3, #0
 80182c4:	813b      	strh	r3, [r7, #8]
 80182c6:	e00c      	b.n	80182e2 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	085a      	lsrs	r2, r3, #1
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	f003 0301 	and.w	r3, r3, #1
 80182d2:	425b      	negs	r3, r3
 80182d4:	490b      	ldr	r1, [pc, #44]	; (8018304 <Crc32+0x74>)
 80182d6:	400b      	ands	r3, r1
 80182d8:	4053      	eors	r3, r2
 80182da:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80182dc:	893b      	ldrh	r3, [r7, #8]
 80182de:	3301      	adds	r3, #1
 80182e0:	813b      	strh	r3, [r7, #8]
 80182e2:	893b      	ldrh	r3, [r7, #8]
 80182e4:	2b07      	cmp	r3, #7
 80182e6:	d9ef      	bls.n	80182c8 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80182e8:	897b      	ldrh	r3, [r7, #10]
 80182ea:	3301      	adds	r3, #1
 80182ec:	817b      	strh	r3, [r7, #10]
 80182ee:	897a      	ldrh	r2, [r7, #10]
 80182f0:	887b      	ldrh	r3, [r7, #2]
 80182f2:	429a      	cmp	r2, r3
 80182f4:	d3dd      	bcc.n	80182b2 <Crc32+0x22>
        }
    }

    return ~crc;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	43db      	mvns	r3, r3
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3714      	adds	r7, #20
 80182fe:	46bd      	mov	sp, r7
 8018300:	bc80      	pop	{r7}
 8018302:	4770      	bx	lr
 8018304:	edb88320 	.word	0xedb88320

08018308 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b084      	sub	sp, #16
 801830c:	af02      	add	r7, sp, #8
 801830e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018310:	4a24      	ldr	r2, [pc, #144]	; (80183a4 <RadioInit+0x9c>)
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018316:	4b24      	ldr	r3, [pc, #144]	; (80183a8 <RadioInit+0xa0>)
 8018318:	2200      	movs	r2, #0
 801831a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801831c:	4b22      	ldr	r3, [pc, #136]	; (80183a8 <RadioInit+0xa0>)
 801831e:	2200      	movs	r2, #0
 8018320:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018322:	4b21      	ldr	r3, [pc, #132]	; (80183a8 <RadioInit+0xa0>)
 8018324:	2200      	movs	r2, #0
 8018326:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018328:	4b1f      	ldr	r3, [pc, #124]	; (80183a8 <RadioInit+0xa0>)
 801832a:	2200      	movs	r2, #0
 801832c:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 801832e:	481f      	ldr	r0, [pc, #124]	; (80183ac <RadioInit+0xa4>)
 8018330:	f001 ff88 	bl	801a244 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018334:	4b1c      	ldr	r3, [pc, #112]	; (80183a8 <RadioInit+0xa0>)
 8018336:	2200      	movs	r2, #0
 8018338:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801833a:	4b1b      	ldr	r3, [pc, #108]	; (80183a8 <RadioInit+0xa0>)
 801833c:	2200      	movs	r2, #0
 801833e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018340:	f002 fa16 	bl	801a770 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018344:	2100      	movs	r1, #0
 8018346:	2000      	movs	r0, #0
 8018348:	f002 fdde 	bl	801af08 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801834c:	2204      	movs	r2, #4
 801834e:	2100      	movs	r1, #0
 8018350:	2001      	movs	r0, #1
 8018352:	f002 fb9b 	bl	801aa8c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018356:	2300      	movs	r3, #0
 8018358:	2200      	movs	r2, #0
 801835a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801835e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018362:	f002 facb 	bl	801a8fc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8018366:	f000 fe83 	bl	8019070 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801836a:	2300      	movs	r3, #0
 801836c:	9300      	str	r3, [sp, #0]
 801836e:	4b10      	ldr	r3, [pc, #64]	; (80183b0 <RadioInit+0xa8>)
 8018370:	2200      	movs	r2, #0
 8018372:	f04f 31ff 	mov.w	r1, #4294967295
 8018376:	480f      	ldr	r0, [pc, #60]	; (80183b4 <RadioInit+0xac>)
 8018378:	f003 ffdc 	bl	801c334 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801837c:	2300      	movs	r3, #0
 801837e:	9300      	str	r3, [sp, #0]
 8018380:	4b0d      	ldr	r3, [pc, #52]	; (80183b8 <RadioInit+0xb0>)
 8018382:	2200      	movs	r2, #0
 8018384:	f04f 31ff 	mov.w	r1, #4294967295
 8018388:	480c      	ldr	r0, [pc, #48]	; (80183bc <RadioInit+0xb4>)
 801838a:	f003 ffd3 	bl	801c334 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801838e:	4809      	ldr	r0, [pc, #36]	; (80183b4 <RadioInit+0xac>)
 8018390:	f004 f874 	bl	801c47c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018394:	4809      	ldr	r0, [pc, #36]	; (80183bc <RadioInit+0xb4>)
 8018396:	f004 f871 	bl	801c47c <UTIL_TIMER_Stop>
}
 801839a:	bf00      	nop
 801839c:	3708      	adds	r7, #8
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}
 80183a2:	bf00      	nop
 80183a4:	200022c0 	.word	0x200022c0
 80183a8:	200022c4 	.word	0x200022c4
 80183ac:	0801945d 	.word	0x0801945d
 80183b0:	080193e5 	.word	0x080193e5
 80183b4:	20002320 	.word	0x20002320
 80183b8:	080193f9 	.word	0x080193f9
 80183bc:	20002338 	.word	0x20002338

080183c0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80183c4:	f001 ff80 	bl	801a2c8 <SUBGRF_GetOperatingMode>
 80183c8:	4603      	mov	r3, r0
 80183ca:	2b07      	cmp	r3, #7
 80183cc:	d00a      	beq.n	80183e4 <RadioGetStatus+0x24>
 80183ce:	2b07      	cmp	r3, #7
 80183d0:	dc0a      	bgt.n	80183e8 <RadioGetStatus+0x28>
 80183d2:	2b04      	cmp	r3, #4
 80183d4:	d002      	beq.n	80183dc <RadioGetStatus+0x1c>
 80183d6:	2b05      	cmp	r3, #5
 80183d8:	d002      	beq.n	80183e0 <RadioGetStatus+0x20>
 80183da:	e005      	b.n	80183e8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80183dc:	2302      	movs	r3, #2
 80183de:	e004      	b.n	80183ea <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80183e0:	2301      	movs	r3, #1
 80183e2:	e002      	b.n	80183ea <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80183e4:	2303      	movs	r3, #3
 80183e6:	e000      	b.n	80183ea <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80183e8:	2300      	movs	r3, #0
    }
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	bd80      	pop	{r7, pc}
	...

080183f0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b082      	sub	sp, #8
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	4603      	mov	r3, r0
 80183f8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80183fa:	4a2a      	ldr	r2, [pc, #168]	; (80184a4 <RadioSetModem+0xb4>)
 80183fc:	79fb      	ldrb	r3, [r7, #7]
 80183fe:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018400:	79fb      	ldrb	r3, [r7, #7]
 8018402:	4618      	mov	r0, r3
 8018404:	f003 f943 	bl	801b68e <RFW_SetRadioModem>
    switch( modem )
 8018408:	79fb      	ldrb	r3, [r7, #7]
 801840a:	2b05      	cmp	r3, #5
 801840c:	d80e      	bhi.n	801842c <RadioSetModem+0x3c>
 801840e:	a201      	add	r2, pc, #4	; (adr r2, 8018414 <RadioSetModem+0x24>)
 8018410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018414:	0801843b 	.word	0x0801843b
 8018418:	08018449 	.word	0x08018449
 801841c:	0801842d 	.word	0x0801842d
 8018420:	0801846f 	.word	0x0801846f
 8018424:	0801847d 	.word	0x0801847d
 8018428:	0801848b 	.word	0x0801848b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801842c:	2003      	movs	r0, #3
 801842e:	f002 fb07 	bl	801aa40 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018432:	4b1c      	ldr	r3, [pc, #112]	; (80184a4 <RadioSetModem+0xb4>)
 8018434:	2200      	movs	r2, #0
 8018436:	735a      	strb	r2, [r3, #13]
        break;
 8018438:	e02f      	b.n	801849a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801843a:	2000      	movs	r0, #0
 801843c:	f002 fb00 	bl	801aa40 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018440:	4b18      	ldr	r3, [pc, #96]	; (80184a4 <RadioSetModem+0xb4>)
 8018442:	2200      	movs	r2, #0
 8018444:	735a      	strb	r2, [r3, #13]
        break;
 8018446:	e028      	b.n	801849a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018448:	2001      	movs	r0, #1
 801844a:	f002 faf9 	bl	801aa40 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801844e:	4b15      	ldr	r3, [pc, #84]	; (80184a4 <RadioSetModem+0xb4>)
 8018450:	7b5a      	ldrb	r2, [r3, #13]
 8018452:	4b14      	ldr	r3, [pc, #80]	; (80184a4 <RadioSetModem+0xb4>)
 8018454:	7b1b      	ldrb	r3, [r3, #12]
 8018456:	429a      	cmp	r2, r3
 8018458:	d01e      	beq.n	8018498 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801845a:	4b12      	ldr	r3, [pc, #72]	; (80184a4 <RadioSetModem+0xb4>)
 801845c:	7b1a      	ldrb	r2, [r3, #12]
 801845e:	4b11      	ldr	r3, [pc, #68]	; (80184a4 <RadioSetModem+0xb4>)
 8018460:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018462:	4b10      	ldr	r3, [pc, #64]	; (80184a4 <RadioSetModem+0xb4>)
 8018464:	7b5b      	ldrb	r3, [r3, #13]
 8018466:	4618      	mov	r0, r3
 8018468:	f000 ff86 	bl	8019378 <RadioSetPublicNetwork>
        }
        break;
 801846c:	e014      	b.n	8018498 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801846e:	2002      	movs	r0, #2
 8018470:	f002 fae6 	bl	801aa40 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018474:	4b0b      	ldr	r3, [pc, #44]	; (80184a4 <RadioSetModem+0xb4>)
 8018476:	2200      	movs	r2, #0
 8018478:	735a      	strb	r2, [r3, #13]
        break;
 801847a:	e00e      	b.n	801849a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801847c:	2002      	movs	r0, #2
 801847e:	f002 fadf 	bl	801aa40 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018482:	4b08      	ldr	r3, [pc, #32]	; (80184a4 <RadioSetModem+0xb4>)
 8018484:	2200      	movs	r2, #0
 8018486:	735a      	strb	r2, [r3, #13]
        break;
 8018488:	e007      	b.n	801849a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801848a:	2000      	movs	r0, #0
 801848c:	f002 fad8 	bl	801aa40 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018490:	4b04      	ldr	r3, [pc, #16]	; (80184a4 <RadioSetModem+0xb4>)
 8018492:	2200      	movs	r2, #0
 8018494:	735a      	strb	r2, [r3, #13]
        break;
 8018496:	e000      	b.n	801849a <RadioSetModem+0xaa>
        break;
 8018498:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801849a:	bf00      	nop
 801849c:	3708      	adds	r7, #8
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	bf00      	nop
 80184a4:	200022c4 	.word	0x200022c4

080184a8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b082      	sub	sp, #8
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80184b0:	6878      	ldr	r0, [r7, #4]
 80184b2:	f002 fa7f 	bl	801a9b4 <SUBGRF_SetRfFrequency>
}
 80184b6:	bf00      	nop
 80184b8:	3708      	adds	r7, #8
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}

080184be <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80184be:	b580      	push	{r7, lr}
 80184c0:	b090      	sub	sp, #64	; 0x40
 80184c2:	af0a      	add	r7, sp, #40	; 0x28
 80184c4:	60f8      	str	r0, [r7, #12]
 80184c6:	60b9      	str	r1, [r7, #8]
 80184c8:	603b      	str	r3, [r7, #0]
 80184ca:	4613      	mov	r3, r2
 80184cc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80184ce:	2301      	movs	r3, #1
 80184d0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80184d2:	2300      	movs	r3, #0
 80184d4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80184d6:	2300      	movs	r3, #0
 80184d8:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80184da:	f000 fddc 	bl	8019096 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80184de:	2000      	movs	r0, #0
 80184e0:	f7ff ff86 	bl	80183f0 <RadioSetModem>

    RadioSetChannel( freq );
 80184e4:	68f8      	ldr	r0, [r7, #12]
 80184e6:	f7ff ffdf 	bl	80184a8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80184ea:	2301      	movs	r3, #1
 80184ec:	9309      	str	r3, [sp, #36]	; 0x24
 80184ee:	2300      	movs	r3, #0
 80184f0:	9308      	str	r3, [sp, #32]
 80184f2:	2300      	movs	r3, #0
 80184f4:	9307      	str	r3, [sp, #28]
 80184f6:	2300      	movs	r3, #0
 80184f8:	9306      	str	r3, [sp, #24]
 80184fa:	2300      	movs	r3, #0
 80184fc:	9305      	str	r3, [sp, #20]
 80184fe:	2300      	movs	r3, #0
 8018500:	9304      	str	r3, [sp, #16]
 8018502:	2300      	movs	r3, #0
 8018504:	9303      	str	r3, [sp, #12]
 8018506:	2300      	movs	r3, #0
 8018508:	9302      	str	r3, [sp, #8]
 801850a:	2303      	movs	r3, #3
 801850c:	9301      	str	r3, [sp, #4]
 801850e:	68bb      	ldr	r3, [r7, #8]
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	2300      	movs	r3, #0
 8018514:	f44f 7216 	mov.w	r2, #600	; 0x258
 8018518:	68b9      	ldr	r1, [r7, #8]
 801851a:	2000      	movs	r0, #0
 801851c:	f000 f83c 	bl	8018598 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018520:	2000      	movs	r0, #0
 8018522:	f000 fdbf 	bl	80190a4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018526:	f000 ff55 	bl	80193d4 <RadioGetWakeupTime>
 801852a:	4603      	mov	r3, r0
 801852c:	4618      	mov	r0, r3
 801852e:	f7ea f805 	bl	800253c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018532:	f004 f8bd 	bl	801c6b0 <UTIL_TIMER_GetCurrentTime>
 8018536:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018538:	e00d      	b.n	8018556 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801853a:	2000      	movs	r0, #0
 801853c:	f000 fe9a 	bl	8019274 <RadioRssi>
 8018540:	4603      	mov	r3, r0
 8018542:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018544:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801854c:	429a      	cmp	r2, r3
 801854e:	dd02      	ble.n	8018556 <RadioIsChannelFree+0x98>
        {
            status = false;
 8018550:	2300      	movs	r3, #0
 8018552:	75fb      	strb	r3, [r7, #23]
            break;
 8018554:	e006      	b.n	8018564 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018556:	6938      	ldr	r0, [r7, #16]
 8018558:	f004 f8bc 	bl	801c6d4 <UTIL_TIMER_GetElapsedTime>
 801855c:	4602      	mov	r2, r0
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	4293      	cmp	r3, r2
 8018562:	d8ea      	bhi.n	801853a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8018564:	f000 fd97 	bl	8019096 <RadioStandby>

    return status;
 8018568:	7dfb      	ldrb	r3, [r7, #23]
}
 801856a:	4618      	mov	r0, r3
 801856c:	3718      	adds	r7, #24
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}

08018572 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018572:	b580      	push	{r7, lr}
 8018574:	b082      	sub	sp, #8
 8018576:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018578:	2300      	movs	r3, #0
 801857a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801857c:	2300      	movs	r3, #0
 801857e:	2200      	movs	r2, #0
 8018580:	2100      	movs	r1, #0
 8018582:	2000      	movs	r0, #0
 8018584:	f002 f9ba 	bl	801a8fc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018588:	f001 ff6f 	bl	801a46a <SUBGRF_GetRandom>
 801858c:	6078      	str	r0, [r7, #4]

    return rnd;
 801858e:	687b      	ldr	r3, [r7, #4]
}
 8018590:	4618      	mov	r0, r3
 8018592:	3708      	adds	r7, #8
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}

08018598 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b08a      	sub	sp, #40	; 0x28
 801859c:	af00      	add	r7, sp, #0
 801859e:	60b9      	str	r1, [r7, #8]
 80185a0:	607a      	str	r2, [r7, #4]
 80185a2:	461a      	mov	r2, r3
 80185a4:	4603      	mov	r3, r0
 80185a6:	73fb      	strb	r3, [r7, #15]
 80185a8:	4613      	mov	r3, r2
 80185aa:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80185ac:	4ab9      	ldr	r2, [pc, #740]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80185ae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80185b2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80185b4:	f003 f829 	bl	801b60a <RFW_DeInit>
    if( rxContinuous == true )
 80185b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d001      	beq.n	80185c4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80185c0:	2300      	movs	r3, #0
 80185c2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80185c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d004      	beq.n	80185d6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80185cc:	4ab2      	ldr	r2, [pc, #712]	; (8018898 <RadioSetRxConfig+0x300>)
 80185ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80185d2:	7013      	strb	r3, [r2, #0]
 80185d4:	e002      	b.n	80185dc <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80185d6:	4bb0      	ldr	r3, [pc, #704]	; (8018898 <RadioSetRxConfig+0x300>)
 80185d8:	22ff      	movs	r2, #255	; 0xff
 80185da:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80185dc:	7bfb      	ldrb	r3, [r7, #15]
 80185de:	2b05      	cmp	r3, #5
 80185e0:	d009      	beq.n	80185f6 <RadioSetRxConfig+0x5e>
 80185e2:	2b05      	cmp	r3, #5
 80185e4:	f300 81ca 	bgt.w	801897c <RadioSetRxConfig+0x3e4>
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	f000 80bf 	beq.w	801876c <RadioSetRxConfig+0x1d4>
 80185ee:	2b01      	cmp	r3, #1
 80185f0:	f000 8124 	beq.w	801883c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80185f4:	e1c2      	b.n	801897c <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80185f6:	2001      	movs	r0, #1
 80185f8:	f002 f87c 	bl	801a6f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80185fc:	4ba5      	ldr	r3, [pc, #660]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80185fe:	2200      	movs	r2, #0
 8018600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018604:	4aa3      	ldr	r2, [pc, #652]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801860a:	4ba2      	ldr	r3, [pc, #648]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801860c:	2209      	movs	r2, #9
 801860e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018612:	4ba0      	ldr	r3, [pc, #640]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018614:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018618:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801861a:	68b8      	ldr	r0, [r7, #8]
 801861c:	f002 ff28 	bl	801b470 <SUBGRF_GetFskBandwidthRegValue>
 8018620:	4603      	mov	r3, r0
 8018622:	461a      	mov	r2, r3
 8018624:	4b9b      	ldr	r3, [pc, #620]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801862a:	4b9a      	ldr	r3, [pc, #616]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801862c:	2200      	movs	r2, #0
 801862e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018630:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018632:	00db      	lsls	r3, r3, #3
 8018634:	b29a      	uxth	r2, r3
 8018636:	4b97      	ldr	r3, [pc, #604]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018638:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801863a:	4b96      	ldr	r3, [pc, #600]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801863c:	2200      	movs	r2, #0
 801863e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018640:	4b94      	ldr	r3, [pc, #592]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018642:	2210      	movs	r2, #16
 8018644:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018646:	4b93      	ldr	r3, [pc, #588]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018648:	2200      	movs	r2, #0
 801864a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801864c:	4b91      	ldr	r3, [pc, #580]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801864e:	2200      	movs	r2, #0
 8018650:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018652:	4b91      	ldr	r3, [pc, #580]	; (8018898 <RadioSetRxConfig+0x300>)
 8018654:	781a      	ldrb	r2, [r3, #0]
 8018656:	4b8f      	ldr	r3, [pc, #572]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018658:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801865a:	4b8e      	ldr	r3, [pc, #568]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801865c:	2201      	movs	r2, #1
 801865e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018660:	4b8c      	ldr	r3, [pc, #560]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018662:	2200      	movs	r2, #0
 8018664:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018666:	2005      	movs	r0, #5
 8018668:	f7ff fec2 	bl	80183f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801866c:	488b      	ldr	r0, [pc, #556]	; (801889c <RadioSetRxConfig+0x304>)
 801866e:	f002 fadb 	bl	801ac28 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018672:	488b      	ldr	r0, [pc, #556]	; (80188a0 <RadioSetRxConfig+0x308>)
 8018674:	f002 fbaa 	bl	801adcc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018678:	4a8a      	ldr	r2, [pc, #552]	; (80188a4 <RadioSetRxConfig+0x30c>)
 801867a:	f107 031c 	add.w	r3, r7, #28
 801867e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018682:	e883 0003 	stmia.w	r3, {r0, r1}
 8018686:	f107 031c 	add.w	r3, r7, #28
 801868a:	4618      	mov	r0, r3
 801868c:	f001 fe6b 	bl	801a366 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018690:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018694:	f001 feb6 	bl	801a404 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018698:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801869c:	f000 fe09 	bl	80192b2 <RadioRead>
 80186a0:	4603      	mov	r3, r0
 80186a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80186a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186aa:	f023 0310 	bic.w	r3, r3, #16
 80186ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80186b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186b6:	4619      	mov	r1, r3
 80186b8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80186bc:	f000 fde7 	bl	801928e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80186c0:	2104      	movs	r1, #4
 80186c2:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80186c6:	f000 fde2 	bl	801928e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80186ca:	f640 009b 	movw	r0, #2203	; 0x89b
 80186ce:	f000 fdf0 	bl	80192b2 <RadioRead>
 80186d2:	4603      	mov	r3, r0
 80186d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80186d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186dc:	f023 031c 	bic.w	r3, r3, #28
 80186e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80186e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186e8:	f043 0308 	orr.w	r3, r3, #8
 80186ec:	b2db      	uxtb	r3, r3
 80186ee:	4619      	mov	r1, r3
 80186f0:	f640 009b 	movw	r0, #2203	; 0x89b
 80186f4:	f000 fdcb 	bl	801928e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80186f8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80186fc:	f000 fdd9 	bl	80192b2 <RadioRead>
 8018700:	4603      	mov	r3, r0
 8018702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801870a:	f023 0318 	bic.w	r3, r3, #24
 801870e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018716:	f043 0318 	orr.w	r3, r3, #24
 801871a:	b2db      	uxtb	r3, r3
 801871c:	4619      	mov	r1, r3
 801871e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018722:	f000 fdb4 	bl	801928e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018726:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801872a:	f000 fdc2 	bl	80192b2 <RadioRead>
 801872e:	4603      	mov	r3, r0
 8018730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801873c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018744:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8018748:	b2db      	uxtb	r3, r3
 801874a:	4619      	mov	r1, r3
 801874c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018750:	f000 fd9d 	bl	801928e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018754:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018756:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801875a:	fb02 f303 	mul.w	r3, r2, r3
 801875e:	461a      	mov	r2, r3
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	fbb2 f3f3 	udiv	r3, r2, r3
 8018766:	4a4b      	ldr	r2, [pc, #300]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018768:	6093      	str	r3, [r2, #8]
            break;
 801876a:	e108      	b.n	801897e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801876c:	2000      	movs	r0, #0
 801876e:	f001 ffc1 	bl	801a6f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018772:	4b48      	ldr	r3, [pc, #288]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018774:	2200      	movs	r2, #0
 8018776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801877a:	4a46      	ldr	r2, [pc, #280]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018780:	4b44      	ldr	r3, [pc, #272]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018782:	220b      	movs	r2, #11
 8018784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018788:	68b8      	ldr	r0, [r7, #8]
 801878a:	f002 fe71 	bl	801b470 <SUBGRF_GetFskBandwidthRegValue>
 801878e:	4603      	mov	r3, r0
 8018790:	461a      	mov	r2, r3
 8018792:	4b40      	ldr	r3, [pc, #256]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018798:	4b3e      	ldr	r3, [pc, #248]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801879a:	2200      	movs	r2, #0
 801879c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801879e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80187a0:	00db      	lsls	r3, r3, #3
 80187a2:	b29a      	uxth	r2, r3
 80187a4:	4b3b      	ldr	r3, [pc, #236]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187a6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80187a8:	4b3a      	ldr	r3, [pc, #232]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187aa:	2204      	movs	r2, #4
 80187ac:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80187ae:	4b39      	ldr	r3, [pc, #228]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187b0:	2218      	movs	r2, #24
 80187b2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80187b4:	4b37      	ldr	r3, [pc, #220]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187b6:	2200      	movs	r2, #0
 80187b8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80187ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80187be:	f083 0301 	eor.w	r3, r3, #1
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	461a      	mov	r2, r3
 80187c6:	4b33      	ldr	r3, [pc, #204]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187c8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80187ca:	4b33      	ldr	r3, [pc, #204]	; (8018898 <RadioSetRxConfig+0x300>)
 80187cc:	781a      	ldrb	r2, [r3, #0]
 80187ce:	4b31      	ldr	r3, [pc, #196]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187d0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80187d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d003      	beq.n	80187e2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80187da:	4b2e      	ldr	r3, [pc, #184]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187dc:	22f2      	movs	r2, #242	; 0xf2
 80187de:	75da      	strb	r2, [r3, #23]
 80187e0:	e002      	b.n	80187e8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80187e2:	4b2c      	ldr	r3, [pc, #176]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187e4:	2201      	movs	r2, #1
 80187e6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80187e8:	4b2a      	ldr	r3, [pc, #168]	; (8018894 <RadioSetRxConfig+0x2fc>)
 80187ea:	2201      	movs	r2, #1
 80187ec:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80187ee:	f000 fc52 	bl	8019096 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80187f2:	2000      	movs	r0, #0
 80187f4:	f7ff fdfc 	bl	80183f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187f8:	4828      	ldr	r0, [pc, #160]	; (801889c <RadioSetRxConfig+0x304>)
 80187fa:	f002 fa15 	bl	801ac28 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187fe:	4828      	ldr	r0, [pc, #160]	; (80188a0 <RadioSetRxConfig+0x308>)
 8018800:	f002 fae4 	bl	801adcc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018804:	4a28      	ldr	r2, [pc, #160]	; (80188a8 <RadioSetRxConfig+0x310>)
 8018806:	f107 0314 	add.w	r3, r7, #20
 801880a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801880e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018812:	f107 0314 	add.w	r3, r7, #20
 8018816:	4618      	mov	r0, r3
 8018818:	f001 fda5 	bl	801a366 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801881c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018820:	f001 fdf0 	bl	801a404 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018824:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018826:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801882a:	fb02 f303 	mul.w	r3, r2, r3
 801882e:	461a      	mov	r2, r3
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	fbb2 f3f3 	udiv	r3, r2, r3
 8018836:	4a17      	ldr	r2, [pc, #92]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018838:	6093      	str	r3, [r2, #8]
            break;
 801883a:	e0a0      	b.n	801897e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801883c:	2000      	movs	r0, #0
 801883e:	f001 ff59 	bl	801a6f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018842:	4b14      	ldr	r3, [pc, #80]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018844:	2201      	movs	r2, #1
 8018846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	b2da      	uxtb	r2, r3
 801884e:	4b11      	ldr	r3, [pc, #68]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018854:	4a15      	ldr	r2, [pc, #84]	; (80188ac <RadioSetRxConfig+0x314>)
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	4413      	add	r3, r2
 801885a:	781a      	ldrb	r2, [r3, #0]
 801885c:	4b0d      	ldr	r3, [pc, #52]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801885e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018862:	4a0c      	ldr	r2, [pc, #48]	; (8018894 <RadioSetRxConfig+0x2fc>)
 8018864:	7bbb      	ldrb	r3, [r7, #14]
 8018866:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d105      	bne.n	801887c <RadioSetRxConfig+0x2e4>
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2b0b      	cmp	r3, #11
 8018874:	d008      	beq.n	8018888 <RadioSetRxConfig+0x2f0>
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	2b0c      	cmp	r3, #12
 801887a:	d005      	beq.n	8018888 <RadioSetRxConfig+0x2f0>
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	2b01      	cmp	r3, #1
 8018880:	d116      	bne.n	80188b0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	2b0c      	cmp	r3, #12
 8018886:	d113      	bne.n	80188b0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018888:	4b02      	ldr	r3, [pc, #8]	; (8018894 <RadioSetRxConfig+0x2fc>)
 801888a:	2201      	movs	r2, #1
 801888c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018890:	e012      	b.n	80188b8 <RadioSetRxConfig+0x320>
 8018892:	bf00      	nop
 8018894:	200022c4 	.word	0x200022c4
 8018898:	20000140 	.word	0x20000140
 801889c:	200022fc 	.word	0x200022fc
 80188a0:	200022d2 	.word	0x200022d2
 80188a4:	0801d3c0 	.word	0x0801d3c0
 80188a8:	0801d3c8 	.word	0x0801d3c8
 80188ac:	0801d9a4 	.word	0x0801d9a4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80188b0:	4b35      	ldr	r3, [pc, #212]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188b2:	2200      	movs	r2, #0
 80188b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80188b8:	4b33      	ldr	r3, [pc, #204]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188ba:	2201      	movs	r2, #1
 80188bc:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80188be:	4b32      	ldr	r3, [pc, #200]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80188c4:	2b05      	cmp	r3, #5
 80188c6:	d004      	beq.n	80188d2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80188c8:	4b2f      	ldr	r3, [pc, #188]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80188ce:	2b06      	cmp	r3, #6
 80188d0:	d10a      	bne.n	80188e8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80188d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80188d4:	2b0b      	cmp	r3, #11
 80188d6:	d803      	bhi.n	80188e0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80188d8:	4b2b      	ldr	r3, [pc, #172]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188da:	220c      	movs	r2, #12
 80188dc:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80188de:	e006      	b.n	80188ee <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80188e0:	4a29      	ldr	r2, [pc, #164]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80188e4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80188e6:	e002      	b.n	80188ee <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80188e8:	4a27      	ldr	r2, [pc, #156]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80188ec:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80188ee:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80188f2:	4b25      	ldr	r3, [pc, #148]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188f4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80188f6:	4b25      	ldr	r3, [pc, #148]	; (801898c <RadioSetRxConfig+0x3f4>)
 80188f8:	781a      	ldrb	r2, [r3, #0]
 80188fa:	4b23      	ldr	r3, [pc, #140]	; (8018988 <RadioSetRxConfig+0x3f0>)
 80188fc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80188fe:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018902:	4b21      	ldr	r3, [pc, #132]	; (8018988 <RadioSetRxConfig+0x3f0>)
 8018904:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018908:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801890c:	4b1e      	ldr	r3, [pc, #120]	; (8018988 <RadioSetRxConfig+0x3f0>)
 801890e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018912:	f000 fbc0 	bl	8019096 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018916:	2001      	movs	r0, #1
 8018918:	f7ff fd6a 	bl	80183f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801891c:	481c      	ldr	r0, [pc, #112]	; (8018990 <RadioSetRxConfig+0x3f8>)
 801891e:	f002 f983 	bl	801ac28 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018922:	481c      	ldr	r0, [pc, #112]	; (8018994 <RadioSetRxConfig+0x3fc>)
 8018924:	f002 fa52 	bl	801adcc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018928:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801892a:	b2db      	uxtb	r3, r3
 801892c:	4618      	mov	r0, r3
 801892e:	f001 fef0 	bl	801a712 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018932:	4b15      	ldr	r3, [pc, #84]	; (8018988 <RadioSetRxConfig+0x3f0>)
 8018934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018938:	2b01      	cmp	r3, #1
 801893a:	d10d      	bne.n	8018958 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801893c:	f240 7036 	movw	r0, #1846	; 0x736
 8018940:	f002 fba0 	bl	801b084 <SUBGRF_ReadRegister>
 8018944:	4603      	mov	r3, r0
 8018946:	f023 0304 	bic.w	r3, r3, #4
 801894a:	b2db      	uxtb	r3, r3
 801894c:	4619      	mov	r1, r3
 801894e:	f240 7036 	movw	r0, #1846	; 0x736
 8018952:	f002 fb83 	bl	801b05c <SUBGRF_WriteRegister>
 8018956:	e00c      	b.n	8018972 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018958:	f240 7036 	movw	r0, #1846	; 0x736
 801895c:	f002 fb92 	bl	801b084 <SUBGRF_ReadRegister>
 8018960:	4603      	mov	r3, r0
 8018962:	f043 0304 	orr.w	r3, r3, #4
 8018966:	b2db      	uxtb	r3, r3
 8018968:	4619      	mov	r1, r3
 801896a:	f240 7036 	movw	r0, #1846	; 0x736
 801896e:	f002 fb75 	bl	801b05c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018972:	4b05      	ldr	r3, [pc, #20]	; (8018988 <RadioSetRxConfig+0x3f0>)
 8018974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018978:	609a      	str	r2, [r3, #8]
            break;
 801897a:	e000      	b.n	801897e <RadioSetRxConfig+0x3e6>
            break;
 801897c:	bf00      	nop
    }
}
 801897e:	bf00      	nop
 8018980:	3728      	adds	r7, #40	; 0x28
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	200022c4 	.word	0x200022c4
 801898c:	20000140 	.word	0x20000140
 8018990:	200022fc 	.word	0x200022fc
 8018994:	200022d2 	.word	0x200022d2

08018998 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b086      	sub	sp, #24
 801899c:	af00      	add	r7, sp, #0
 801899e:	60ba      	str	r2, [r7, #8]
 80189a0:	607b      	str	r3, [r7, #4]
 80189a2:	4603      	mov	r3, r0
 80189a4:	73fb      	strb	r3, [r7, #15]
 80189a6:	460b      	mov	r3, r1
 80189a8:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80189aa:	f002 fe2e 	bl	801b60a <RFW_DeInit>
    switch( modem )
 80189ae:	7bfb      	ldrb	r3, [r7, #15]
 80189b0:	2b04      	cmp	r3, #4
 80189b2:	f000 80c7 	beq.w	8018b44 <RadioSetTxConfig+0x1ac>
 80189b6:	2b04      	cmp	r3, #4
 80189b8:	f300 80d6 	bgt.w	8018b68 <RadioSetTxConfig+0x1d0>
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d002      	beq.n	80189c6 <RadioSetTxConfig+0x2e>
 80189c0:	2b01      	cmp	r3, #1
 80189c2:	d059      	beq.n	8018a78 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80189c4:	e0d0      	b.n	8018b68 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80189c6:	4b74      	ldr	r3, [pc, #464]	; (8018b98 <RadioSetTxConfig+0x200>)
 80189c8:	2200      	movs	r2, #0
 80189ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80189ce:	4a72      	ldr	r2, [pc, #456]	; (8018b98 <RadioSetTxConfig+0x200>)
 80189d0:	6a3b      	ldr	r3, [r7, #32]
 80189d2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80189d4:	4b70      	ldr	r3, [pc, #448]	; (8018b98 <RadioSetTxConfig+0x200>)
 80189d6:	220b      	movs	r2, #11
 80189d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f002 fd47 	bl	801b470 <SUBGRF_GetFskBandwidthRegValue>
 80189e2:	4603      	mov	r3, r0
 80189e4:	461a      	mov	r2, r3
 80189e6:	4b6c      	ldr	r3, [pc, #432]	; (8018b98 <RadioSetTxConfig+0x200>)
 80189e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80189ec:	4a6a      	ldr	r2, [pc, #424]	; (8018b98 <RadioSetTxConfig+0x200>)
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80189f2:	4b69      	ldr	r3, [pc, #420]	; (8018b98 <RadioSetTxConfig+0x200>)
 80189f4:	2200      	movs	r2, #0
 80189f6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80189f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80189fa:	00db      	lsls	r3, r3, #3
 80189fc:	b29a      	uxth	r2, r3
 80189fe:	4b66      	ldr	r3, [pc, #408]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a00:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018a02:	4b65      	ldr	r3, [pc, #404]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a04:	2204      	movs	r2, #4
 8018a06:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018a08:	4b63      	ldr	r3, [pc, #396]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a0a:	2218      	movs	r2, #24
 8018a0c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018a0e:	4b62      	ldr	r3, [pc, #392]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a10:	2200      	movs	r2, #0
 8018a12:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018a14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018a18:	f083 0301 	eor.w	r3, r3, #1
 8018a1c:	b2db      	uxtb	r3, r3
 8018a1e:	461a      	mov	r2, r3
 8018a20:	4b5d      	ldr	r3, [pc, #372]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a22:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018a24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d003      	beq.n	8018a34 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018a2c:	4b5a      	ldr	r3, [pc, #360]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a2e:	22f2      	movs	r2, #242	; 0xf2
 8018a30:	75da      	strb	r2, [r3, #23]
 8018a32:	e002      	b.n	8018a3a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018a34:	4b58      	ldr	r3, [pc, #352]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a36:	2201      	movs	r2, #1
 8018a38:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018a3a:	4b57      	ldr	r3, [pc, #348]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018a40:	f000 fb29 	bl	8019096 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018a44:	2000      	movs	r0, #0
 8018a46:	f7ff fcd3 	bl	80183f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a4a:	4854      	ldr	r0, [pc, #336]	; (8018b9c <RadioSetTxConfig+0x204>)
 8018a4c:	f002 f8ec 	bl	801ac28 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a50:	4853      	ldr	r0, [pc, #332]	; (8018ba0 <RadioSetTxConfig+0x208>)
 8018a52:	f002 f9bb 	bl	801adcc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018a56:	4a53      	ldr	r2, [pc, #332]	; (8018ba4 <RadioSetTxConfig+0x20c>)
 8018a58:	f107 0310 	add.w	r3, r7, #16
 8018a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a60:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a64:	f107 0310 	add.w	r3, r7, #16
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f001 fc7c 	bl	801a366 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018a72:	f001 fcc7 	bl	801a404 <SUBGRF_SetWhiteningSeed>
            break;
 8018a76:	e078      	b.n	8018b6a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018a78:	4b47      	ldr	r3, [pc, #284]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a7a:	2201      	movs	r2, #1
 8018a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018a80:	6a3b      	ldr	r3, [r7, #32]
 8018a82:	b2da      	uxtb	r2, r3
 8018a84:	4b44      	ldr	r3, [pc, #272]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018a8a:	4a47      	ldr	r2, [pc, #284]	; (8018ba8 <RadioSetTxConfig+0x210>)
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	4413      	add	r3, r2
 8018a90:	781a      	ldrb	r2, [r3, #0]
 8018a92:	4b41      	ldr	r3, [pc, #260]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018a98:	4a3f      	ldr	r2, [pc, #252]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018a9e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d105      	bne.n	8018ab4 <RadioSetTxConfig+0x11c>
 8018aa8:	6a3b      	ldr	r3, [r7, #32]
 8018aaa:	2b0b      	cmp	r3, #11
 8018aac:	d008      	beq.n	8018ac0 <RadioSetTxConfig+0x128>
 8018aae:	6a3b      	ldr	r3, [r7, #32]
 8018ab0:	2b0c      	cmp	r3, #12
 8018ab2:	d005      	beq.n	8018ac0 <RadioSetTxConfig+0x128>
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2b01      	cmp	r3, #1
 8018ab8:	d107      	bne.n	8018aca <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018aba:	6a3b      	ldr	r3, [r7, #32]
 8018abc:	2b0c      	cmp	r3, #12
 8018abe:	d104      	bne.n	8018aca <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018ac0:	4b35      	ldr	r3, [pc, #212]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018ac2:	2201      	movs	r2, #1
 8018ac4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018ac8:	e003      	b.n	8018ad2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018aca:	4b33      	ldr	r3, [pc, #204]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018acc:	2200      	movs	r2, #0
 8018ace:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018ad2:	4b31      	ldr	r3, [pc, #196]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018ad4:	2201      	movs	r2, #1
 8018ad6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ad8:	4b2f      	ldr	r3, [pc, #188]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018ade:	2b05      	cmp	r3, #5
 8018ae0:	d004      	beq.n	8018aec <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018ae2:	4b2d      	ldr	r3, [pc, #180]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ae8:	2b06      	cmp	r3, #6
 8018aea:	d10a      	bne.n	8018b02 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018aec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018aee:	2b0b      	cmp	r3, #11
 8018af0:	d803      	bhi.n	8018afa <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018af2:	4b29      	ldr	r3, [pc, #164]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018af4:	220c      	movs	r2, #12
 8018af6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018af8:	e006      	b.n	8018b08 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018afa:	4a27      	ldr	r2, [pc, #156]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018afc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018afe:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018b00:	e002      	b.n	8018b08 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018b02:	4a25      	ldr	r2, [pc, #148]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018b06:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018b08:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018b0c:	4b22      	ldr	r3, [pc, #136]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b0e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018b10:	4b26      	ldr	r3, [pc, #152]	; (8018bac <RadioSetTxConfig+0x214>)
 8018b12:	781a      	ldrb	r2, [r3, #0]
 8018b14:	4b20      	ldr	r3, [pc, #128]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b16:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018b18:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018b1c:	4b1e      	ldr	r3, [pc, #120]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b1e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018b22:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018b26:	4b1c      	ldr	r3, [pc, #112]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018b2c:	f000 fab3 	bl	8019096 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018b30:	2001      	movs	r0, #1
 8018b32:	f7ff fc5d 	bl	80183f0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b36:	4819      	ldr	r0, [pc, #100]	; (8018b9c <RadioSetTxConfig+0x204>)
 8018b38:	f002 f876 	bl	801ac28 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b3c:	4818      	ldr	r0, [pc, #96]	; (8018ba0 <RadioSetTxConfig+0x208>)
 8018b3e:	f002 f945 	bl	801adcc <SUBGRF_SetPacketParams>
            break;
 8018b42:	e012      	b.n	8018b6a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018b44:	2004      	movs	r0, #4
 8018b46:	f7ff fc53 	bl	80183f0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018b4a:	4b13      	ldr	r3, [pc, #76]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b4c:	2202      	movs	r2, #2
 8018b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018b52:	4a11      	ldr	r2, [pc, #68]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b54:	6a3b      	ldr	r3, [r7, #32]
 8018b56:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018b58:	4b0f      	ldr	r3, [pc, #60]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b5a:	2216      	movs	r2, #22
 8018b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b60:	480e      	ldr	r0, [pc, #56]	; (8018b9c <RadioSetTxConfig+0x204>)
 8018b62:	f002 f861 	bl	801ac28 <SUBGRF_SetModulationParams>
            break;
 8018b66:	e000      	b.n	8018b6a <RadioSetTxConfig+0x1d2>
            break;
 8018b68:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f002 fb90 	bl	801b294 <SUBGRF_SetRfTxPower>
 8018b74:	4603      	mov	r3, r0
 8018b76:	461a      	mov	r2, r3
 8018b78:	4b07      	ldr	r3, [pc, #28]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b7a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018b7e:	4b06      	ldr	r3, [pc, #24]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018b84:	4618      	mov	r0, r3
 8018b86:	f002 fd54 	bl	801b632 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018b8a:	4a03      	ldr	r2, [pc, #12]	; (8018b98 <RadioSetTxConfig+0x200>)
 8018b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b8e:	6053      	str	r3, [r2, #4]
}
 8018b90:	bf00      	nop
 8018b92:	3718      	adds	r7, #24
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	200022c4 	.word	0x200022c4
 8018b9c:	200022fc 	.word	0x200022fc
 8018ba0:	200022d2 	.word	0x200022d2
 8018ba4:	0801d3c8 	.word	0x0801d3c8
 8018ba8:	0801d9a4 	.word	0x0801d9a4
 8018bac:	20000140 	.word	0x20000140

08018bb0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	b083      	sub	sp, #12
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
    return true;
 8018bb8:	2301      	movs	r3, #1
}
 8018bba:	4618      	mov	r0, r3
 8018bbc:	370c      	adds	r7, #12
 8018bbe:	46bd      	mov	sp, r7
 8018bc0:	bc80      	pop	{r7}
 8018bc2:	4770      	bx	lr

08018bc4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018bc4:	b480      	push	{r7}
 8018bc6:	b085      	sub	sp, #20
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	4603      	mov	r3, r0
 8018bcc:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018bd2:	79fb      	ldrb	r3, [r7, #7]
 8018bd4:	2b0a      	cmp	r3, #10
 8018bd6:	d83e      	bhi.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
 8018bd8:	a201      	add	r2, pc, #4	; (adr r2, 8018be0 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bde:	bf00      	nop
 8018be0:	08018c0d 	.word	0x08018c0d
 8018be4:	08018c1d 	.word	0x08018c1d
 8018be8:	08018c2d 	.word	0x08018c2d
 8018bec:	08018c3d 	.word	0x08018c3d
 8018bf0:	08018c45 	.word	0x08018c45
 8018bf4:	08018c4b 	.word	0x08018c4b
 8018bf8:	08018c51 	.word	0x08018c51
 8018bfc:	08018c57 	.word	0x08018c57
 8018c00:	08018c15 	.word	0x08018c15
 8018c04:	08018c25 	.word	0x08018c25
 8018c08:	08018c35 	.word	0x08018c35
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018c0c:	f641 6384 	movw	r3, #7812	; 0x1e84
 8018c10:	60fb      	str	r3, [r7, #12]
        break;
 8018c12:	e020      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018c14:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8018c18:	60fb      	str	r3, [r7, #12]
        break;
 8018c1a:	e01c      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018c1c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018c20:	60fb      	str	r3, [r7, #12]
        break;
 8018c22:	e018      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018c24:	f245 1361 	movw	r3, #20833	; 0x5161
 8018c28:	60fb      	str	r3, [r7, #12]
        break;
 8018c2a:	e014      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018c2c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018c30:	60fb      	str	r3, [r7, #12]
        break;
 8018c32:	e010      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018c34:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8018c38:	60fb      	str	r3, [r7, #12]
        break;
 8018c3a:	e00c      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018c3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018c40:	60fb      	str	r3, [r7, #12]
        break;
 8018c42:	e008      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018c44:	4b07      	ldr	r3, [pc, #28]	; (8018c64 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018c46:	60fb      	str	r3, [r7, #12]
        break;
 8018c48:	e005      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018c4a:	4b07      	ldr	r3, [pc, #28]	; (8018c68 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018c4c:	60fb      	str	r3, [r7, #12]
        break;
 8018c4e:	e002      	b.n	8018c56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018c50:	4b06      	ldr	r3, [pc, #24]	; (8018c6c <RadioGetLoRaBandwidthInHz+0xa8>)
 8018c52:	60fb      	str	r3, [r7, #12]
        break;
 8018c54:	bf00      	nop
    }

    return bandwidthInHz;
 8018c56:	68fb      	ldr	r3, [r7, #12]
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3714      	adds	r7, #20
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bc80      	pop	{r7}
 8018c60:	4770      	bx	lr
 8018c62:	bf00      	nop
 8018c64:	0001e848 	.word	0x0001e848
 8018c68:	0003d090 	.word	0x0003d090
 8018c6c:	0007a120 	.word	0x0007a120

08018c70 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018c70:	b480      	push	{r7}
 8018c72:	b083      	sub	sp, #12
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	4608      	mov	r0, r1
 8018c7a:	4611      	mov	r1, r2
 8018c7c:	461a      	mov	r2, r3
 8018c7e:	4603      	mov	r3, r0
 8018c80:	70fb      	strb	r3, [r7, #3]
 8018c82:	460b      	mov	r3, r1
 8018c84:	803b      	strh	r3, [r7, #0]
 8018c86:	4613      	mov	r3, r2
 8018c88:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8018c8a:	883b      	ldrh	r3, [r7, #0]
 8018c8c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018c8e:	78ba      	ldrb	r2, [r7, #2]
 8018c90:	f082 0201 	eor.w	r2, r2, #1
 8018c94:	b2d2      	uxtb	r2, r2
 8018c96:	2a00      	cmp	r2, #0
 8018c98:	d001      	beq.n	8018c9e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018c9a:	2208      	movs	r2, #8
 8018c9c:	e000      	b.n	8018ca0 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018c9e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018ca0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018ca2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018ca6:	7c3b      	ldrb	r3, [r7, #16]
 8018ca8:	7d39      	ldrb	r1, [r7, #20]
 8018caa:	2900      	cmp	r1, #0
 8018cac:	d001      	beq.n	8018cb2 <RadioGetGfskTimeOnAirNumerator+0x42>
 8018cae:	2102      	movs	r1, #2
 8018cb0:	e000      	b.n	8018cb4 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018cb2:	2100      	movs	r1, #0
 8018cb4:	440b      	add	r3, r1
 8018cb6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018cb8:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	370c      	adds	r7, #12
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bc80      	pop	{r7}
 8018cc2:	4770      	bx	lr

08018cc4 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018cc4:	b480      	push	{r7}
 8018cc6:	b08b      	sub	sp, #44	; 0x2c
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	4611      	mov	r1, r2
 8018cd0:	461a      	mov	r2, r3
 8018cd2:	460b      	mov	r3, r1
 8018cd4:	71fb      	strb	r3, [r7, #7]
 8018cd6:	4613      	mov	r3, r2
 8018cd8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8018cda:	79fb      	ldrb	r3, [r7, #7]
 8018cdc:	3304      	adds	r3, #4
 8018cde:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018ce6:	68bb      	ldr	r3, [r7, #8]
 8018ce8:	2b05      	cmp	r3, #5
 8018cea:	d002      	beq.n	8018cf2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	2b06      	cmp	r3, #6
 8018cf0:	d104      	bne.n	8018cfc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018cf2:	88bb      	ldrh	r3, [r7, #4]
 8018cf4:	2b0b      	cmp	r3, #11
 8018cf6:	d801      	bhi.n	8018cfc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018cf8:	230c      	movs	r3, #12
 8018cfa:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d105      	bne.n	8018d0e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	2b0b      	cmp	r3, #11
 8018d06:	d008      	beq.n	8018d1a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	2b0c      	cmp	r3, #12
 8018d0c:	d005      	beq.n	8018d1a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	2b01      	cmp	r3, #1
 8018d12:	d105      	bne.n	8018d20 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018d14:	68bb      	ldr	r3, [r7, #8]
 8018d16:	2b0c      	cmp	r3, #12
 8018d18:	d102      	bne.n	8018d20 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018d1a:	2301      	movs	r3, #1
 8018d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018d20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018d24:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018d26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018d2a:	2a00      	cmp	r2, #0
 8018d2c:	d001      	beq.n	8018d32 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018d2e:	2210      	movs	r2, #16
 8018d30:	e000      	b.n	8018d34 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018d32:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018d34:	4413      	add	r3, r2
 8018d36:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018d38:	68bb      	ldr	r3, [r7, #8]
 8018d3a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018d3c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018d3e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018d42:	2a00      	cmp	r2, #0
 8018d44:	d001      	beq.n	8018d4a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018d46:	2200      	movs	r2, #0
 8018d48:	e000      	b.n	8018d4c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018d4a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018d4c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018d4e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	2b06      	cmp	r3, #6
 8018d54:	d803      	bhi.n	8018d5e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018d56:	68bb      	ldr	r3, [r7, #8]
 8018d58:	009b      	lsls	r3, r3, #2
 8018d5a:	623b      	str	r3, [r7, #32]
 8018d5c:	e00e      	b.n	8018d7c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018d5e:	69fb      	ldr	r3, [r7, #28]
 8018d60:	3308      	adds	r3, #8
 8018d62:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d004      	beq.n	8018d76 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	3b02      	subs	r3, #2
 8018d70:	009b      	lsls	r3, r3, #2
 8018d72:	623b      	str	r3, [r7, #32]
 8018d74:	e002      	b.n	8018d7c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018d76:	68bb      	ldr	r3, [r7, #8]
 8018d78:	009b      	lsls	r3, r3, #2
 8018d7a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018d7c:	69fb      	ldr	r3, [r7, #28]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	da01      	bge.n	8018d86 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018d82:	2300      	movs	r3, #0
 8018d84:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018d86:	69fa      	ldr	r2, [r7, #28]
 8018d88:	6a3b      	ldr	r3, [r7, #32]
 8018d8a:	4413      	add	r3, r2
 8018d8c:	1e5a      	subs	r2, r3, #1
 8018d8e:	6a3b      	ldr	r3, [r7, #32]
 8018d90:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d94:	697a      	ldr	r2, [r7, #20]
 8018d96:	fb03 f202 	mul.w	r2, r3, r2
 8018d9a:	88bb      	ldrh	r3, [r7, #4]
 8018d9c:	4413      	add	r3, r2
    int32_t intermediate =
 8018d9e:	330c      	adds	r3, #12
 8018da0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	2b06      	cmp	r3, #6
 8018da6:	d802      	bhi.n	8018dae <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018da8:	69bb      	ldr	r3, [r7, #24]
 8018daa:	3302      	adds	r3, #2
 8018dac:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018dae:	69bb      	ldr	r3, [r7, #24]
 8018db0:	009b      	lsls	r3, r3, #2
 8018db2:	1c5a      	adds	r2, r3, #1
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	3b02      	subs	r3, #2
 8018db8:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	372c      	adds	r7, #44	; 0x2c
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bc80      	pop	{r7}
 8018dc4:	4770      	bx	lr
	...

08018dc8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b08a      	sub	sp, #40	; 0x28
 8018dcc:	af04      	add	r7, sp, #16
 8018dce:	60b9      	str	r1, [r7, #8]
 8018dd0:	607a      	str	r2, [r7, #4]
 8018dd2:	461a      	mov	r2, r3
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	73fb      	strb	r3, [r7, #15]
 8018dd8:	4613      	mov	r3, r2
 8018dda:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018de0:	2301      	movs	r3, #1
 8018de2:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018de4:	7bfb      	ldrb	r3, [r7, #15]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d002      	beq.n	8018df0 <RadioTimeOnAir+0x28>
 8018dea:	2b01      	cmp	r3, #1
 8018dec:	d017      	beq.n	8018e1e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018dee:	e035      	b.n	8018e5c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018df0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8018df4:	8c3a      	ldrh	r2, [r7, #32]
 8018df6:	7bb9      	ldrb	r1, [r7, #14]
 8018df8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018dfc:	9301      	str	r3, [sp, #4]
 8018dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e02:	9300      	str	r3, [sp, #0]
 8018e04:	4603      	mov	r3, r0
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f7ff ff32 	bl	8018c70 <RadioGetGfskTimeOnAirNumerator>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018e12:	fb02 f303 	mul.w	r3, r2, r3
 8018e16:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	613b      	str	r3, [r7, #16]
        break;
 8018e1c:	e01e      	b.n	8018e5c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018e1e:	8c39      	ldrh	r1, [r7, #32]
 8018e20:	7bba      	ldrb	r2, [r7, #14]
 8018e22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018e26:	9302      	str	r3, [sp, #8]
 8018e28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e2c:	9301      	str	r3, [sp, #4]
 8018e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e32:	9300      	str	r3, [sp, #0]
 8018e34:	460b      	mov	r3, r1
 8018e36:	6879      	ldr	r1, [r7, #4]
 8018e38:	68b8      	ldr	r0, [r7, #8]
 8018e3a:	f7ff ff43 	bl	8018cc4 <RadioGetLoRaTimeOnAirNumerator>
 8018e3e:	4603      	mov	r3, r0
 8018e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018e44:	fb02 f303 	mul.w	r3, r2, r3
 8018e48:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018e4a:	4a0a      	ldr	r2, [pc, #40]	; (8018e74 <RadioTimeOnAir+0xac>)
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	4413      	add	r3, r2
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7ff feb6 	bl	8018bc4 <RadioGetLoRaBandwidthInHz>
 8018e58:	6138      	str	r0, [r7, #16]
        break;
 8018e5a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018e5c:	697a      	ldr	r2, [r7, #20]
 8018e5e:	693b      	ldr	r3, [r7, #16]
 8018e60:	4413      	add	r3, r2
 8018e62:	1e5a      	subs	r2, r3, #1
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	3718      	adds	r7, #24
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	bd80      	pop	{r7, pc}
 8018e72:	bf00      	nop
 8018e74:	0801d9a4 	.word	0x0801d9a4

08018e78 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b084      	sub	sp, #16
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
 8018e80:	460b      	mov	r3, r1
 8018e82:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018e84:	2300      	movs	r3, #0
 8018e86:	2200      	movs	r2, #0
 8018e88:	f240 2101 	movw	r1, #513	; 0x201
 8018e8c:	f240 2001 	movw	r0, #513	; 0x201
 8018e90:	f001 fd34 	bl	801a8fc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018e94:	4b71      	ldr	r3, [pc, #452]	; (801905c <RadioSend+0x1e4>)
 8018e96:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018e9a:	2101      	movs	r1, #1
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f002 f9d1 	bl	801b244 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018ea2:	4b6e      	ldr	r3, [pc, #440]	; (801905c <RadioSend+0x1e4>)
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	2b01      	cmp	r3, #1
 8018ea8:	d112      	bne.n	8018ed0 <RadioSend+0x58>
 8018eaa:	4b6c      	ldr	r3, [pc, #432]	; (801905c <RadioSend+0x1e4>)
 8018eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018eb0:	2b06      	cmp	r3, #6
 8018eb2:	d10d      	bne.n	8018ed0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018eb4:	f640 0089 	movw	r0, #2185	; 0x889
 8018eb8:	f002 f8e4 	bl	801b084 <SUBGRF_ReadRegister>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	f023 0304 	bic.w	r3, r3, #4
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	4619      	mov	r1, r3
 8018ec6:	f640 0089 	movw	r0, #2185	; 0x889
 8018eca:	f002 f8c7 	bl	801b05c <SUBGRF_WriteRegister>
 8018ece:	e00c      	b.n	8018eea <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018ed0:	f640 0089 	movw	r0, #2185	; 0x889
 8018ed4:	f002 f8d6 	bl	801b084 <SUBGRF_ReadRegister>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	f043 0304 	orr.w	r3, r3, #4
 8018ede:	b2db      	uxtb	r3, r3
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	f640 0089 	movw	r0, #2185	; 0x889
 8018ee6:	f002 f8b9 	bl	801b05c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8018eea:	4b5c      	ldr	r3, [pc, #368]	; (801905c <RadioSend+0x1e4>)
 8018eec:	781b      	ldrb	r3, [r3, #0]
 8018eee:	2b04      	cmp	r3, #4
 8018ef0:	f200 80a7 	bhi.w	8019042 <RadioSend+0x1ca>
 8018ef4:	a201      	add	r2, pc, #4	; (adr r2, 8018efc <RadioSend+0x84>)
 8018ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018efa:	bf00      	nop
 8018efc:	08018f2b 	.word	0x08018f2b
 8018f00:	08018f11 	.word	0x08018f11
 8018f04:	08018f2b 	.word	0x08018f2b
 8018f08:	08018f8b 	.word	0x08018f8b
 8018f0c:	08018fab 	.word	0x08018fab
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018f10:	4a52      	ldr	r2, [pc, #328]	; (801905c <RadioSend+0x1e4>)
 8018f12:	78fb      	ldrb	r3, [r7, #3]
 8018f14:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f16:	4852      	ldr	r0, [pc, #328]	; (8019060 <RadioSend+0x1e8>)
 8018f18:	f001 ff58 	bl	801adcc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018f1c:	78fb      	ldrb	r3, [r7, #3]
 8018f1e:	2200      	movs	r2, #0
 8018f20:	4619      	mov	r1, r3
 8018f22:	6878      	ldr	r0, [r7, #4]
 8018f24:	f001 fa0c 	bl	801a340 <SUBGRF_SendPayload>
            break;
 8018f28:	e08c      	b.n	8019044 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018f2a:	f002 fb74 	bl	801b616 <RFW_Is_Init>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	2b01      	cmp	r3, #1
 8018f32:	d11d      	bne.n	8018f70 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018f34:	f107 020d 	add.w	r2, r7, #13
 8018f38:	78fb      	ldrb	r3, [r7, #3]
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	6878      	ldr	r0, [r7, #4]
 8018f3e:	f002 fb82 	bl	801b646 <RFW_TransmitInit>
 8018f42:	4603      	mov	r3, r0
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d10c      	bne.n	8018f62 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018f48:	7b7a      	ldrb	r2, [r7, #13]
 8018f4a:	4b44      	ldr	r3, [pc, #272]	; (801905c <RadioSend+0x1e4>)
 8018f4c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f4e:	4844      	ldr	r0, [pc, #272]	; (8019060 <RadioSend+0x1e8>)
 8018f50:	f001 ff3c 	bl	801adcc <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8018f54:	7b7b      	ldrb	r3, [r7, #13]
 8018f56:	2200      	movs	r2, #0
 8018f58:	4619      	mov	r1, r3
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f001 f9f0 	bl	801a340 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018f60:	e070      	b.n	8019044 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8018f62:	4b40      	ldr	r3, [pc, #256]	; (8019064 <RadioSend+0x1ec>)
 8018f64:	2201      	movs	r2, #1
 8018f66:	2100      	movs	r1, #0
 8018f68:	2002      	movs	r0, #2
 8018f6a:	f003 fc91 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
 8018f6e:	e072      	b.n	8019056 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018f70:	4a3a      	ldr	r2, [pc, #232]	; (801905c <RadioSend+0x1e4>)
 8018f72:	78fb      	ldrb	r3, [r7, #3]
 8018f74:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f76:	483a      	ldr	r0, [pc, #232]	; (8019060 <RadioSend+0x1e8>)
 8018f78:	f001 ff28 	bl	801adcc <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018f7c:	78fb      	ldrb	r3, [r7, #3]
 8018f7e:	2200      	movs	r2, #0
 8018f80:	4619      	mov	r1, r3
 8018f82:	6878      	ldr	r0, [r7, #4]
 8018f84:	f001 f9dc 	bl	801a340 <SUBGRF_SendPayload>
            break;
 8018f88:	e05c      	b.n	8019044 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018f8a:	4b34      	ldr	r3, [pc, #208]	; (801905c <RadioSend+0x1e4>)
 8018f8c:	2202      	movs	r2, #2
 8018f8e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018f90:	4a32      	ldr	r2, [pc, #200]	; (801905c <RadioSend+0x1e4>)
 8018f92:	78fb      	ldrb	r3, [r7, #3]
 8018f94:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f96:	4832      	ldr	r0, [pc, #200]	; (8019060 <RadioSend+0x1e8>)
 8018f98:	f001 ff18 	bl	801adcc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018f9c:	78fb      	ldrb	r3, [r7, #3]
 8018f9e:	2200      	movs	r2, #0
 8018fa0:	4619      	mov	r1, r3
 8018fa2:	6878      	ldr	r0, [r7, #4]
 8018fa4:	f001 f9cc 	bl	801a340 <SUBGRF_SendPayload>
            break;
 8018fa8:	e04c      	b.n	8019044 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8018faa:	78fb      	ldrb	r3, [r7, #3]
 8018fac:	461a      	mov	r2, r3
 8018fae:	6879      	ldr	r1, [r7, #4]
 8018fb0:	482d      	ldr	r0, [pc, #180]	; (8019068 <RadioSend+0x1f0>)
 8018fb2:	f000 fcbc 	bl	801992e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018fb6:	4b29      	ldr	r3, [pc, #164]	; (801905c <RadioSend+0x1e4>)
 8018fb8:	2202      	movs	r2, #2
 8018fba:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018fbc:	78fb      	ldrb	r3, [r7, #3]
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	b2da      	uxtb	r2, r3
 8018fc2:	4b26      	ldr	r3, [pc, #152]	; (801905c <RadioSend+0x1e4>)
 8018fc4:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018fc6:	4826      	ldr	r0, [pc, #152]	; (8019060 <RadioSend+0x1e8>)
 8018fc8:	f001 ff00 	bl	801adcc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018fcc:	2100      	movs	r1, #0
 8018fce:	20f1      	movs	r0, #241	; 0xf1
 8018fd0:	f000 f95d 	bl	801928e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8018fd4:	2100      	movs	r1, #0
 8018fd6:	20f0      	movs	r0, #240	; 0xf0
 8018fd8:	f000 f959 	bl	801928e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018fdc:	4b1f      	ldr	r3, [pc, #124]	; (801905c <RadioSend+0x1e4>)
 8018fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fe0:	2b64      	cmp	r3, #100	; 0x64
 8018fe2:	d108      	bne.n	8018ff6 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8018fe4:	2170      	movs	r1, #112	; 0x70
 8018fe6:	20f3      	movs	r0, #243	; 0xf3
 8018fe8:	f000 f951 	bl	801928e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018fec:	211d      	movs	r1, #29
 8018fee:	20f2      	movs	r0, #242	; 0xf2
 8018ff0:	f000 f94d 	bl	801928e <RadioWrite>
 8018ff4:	e007      	b.n	8019006 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018ff6:	21e1      	movs	r1, #225	; 0xe1
 8018ff8:	20f3      	movs	r0, #243	; 0xf3
 8018ffa:	f000 f948 	bl	801928e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018ffe:	2104      	movs	r1, #4
 8019000:	20f2      	movs	r0, #242	; 0xf2
 8019002:	f000 f944 	bl	801928e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019006:	78fb      	ldrb	r3, [r7, #3]
 8019008:	b29b      	uxth	r3, r3
 801900a:	00db      	lsls	r3, r3, #3
 801900c:	b29b      	uxth	r3, r3
 801900e:	3302      	adds	r3, #2
 8019010:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019012:	89fb      	ldrh	r3, [r7, #14]
 8019014:	0a1b      	lsrs	r3, r3, #8
 8019016:	b29b      	uxth	r3, r3
 8019018:	b2db      	uxtb	r3, r3
 801901a:	4619      	mov	r1, r3
 801901c:	20f4      	movs	r0, #244	; 0xf4
 801901e:	f000 f936 	bl	801928e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019022:	89fb      	ldrh	r3, [r7, #14]
 8019024:	b2db      	uxtb	r3, r3
 8019026:	4619      	mov	r1, r3
 8019028:	20f5      	movs	r0, #245	; 0xf5
 801902a:	f000 f930 	bl	801928e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801902e:	78fb      	ldrb	r3, [r7, #3]
 8019030:	3301      	adds	r3, #1
 8019032:	b2db      	uxtb	r3, r3
 8019034:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019038:	4619      	mov	r1, r3
 801903a:	480b      	ldr	r0, [pc, #44]	; (8019068 <RadioSend+0x1f0>)
 801903c:	f001 f980 	bl	801a340 <SUBGRF_SendPayload>
            break;
 8019040:	e000      	b.n	8019044 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019042:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019044:	4b05      	ldr	r3, [pc, #20]	; (801905c <RadioSend+0x1e4>)
 8019046:	685b      	ldr	r3, [r3, #4]
 8019048:	4619      	mov	r1, r3
 801904a:	4808      	ldr	r0, [pc, #32]	; (801906c <RadioSend+0x1f4>)
 801904c:	f003 fa86 	bl	801c55c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019050:	4806      	ldr	r0, [pc, #24]	; (801906c <RadioSend+0x1f4>)
 8019052:	f003 f9a5 	bl	801c3a0 <UTIL_TIMER_Start>
}
 8019056:	3710      	adds	r7, #16
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}
 801905c:	200022c4 	.word	0x200022c4
 8019060:	200022d2 	.word	0x200022d2
 8019064:	0801d3d0 	.word	0x0801d3d0
 8019068:	200021c0 	.word	0x200021c0
 801906c:	20002320 	.word	0x20002320

08019070 <RadioSleep>:

static void RadioSleep( void )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b082      	sub	sp, #8
 8019074:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019076:	2300      	movs	r3, #0
 8019078:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801907a:	793b      	ldrb	r3, [r7, #4]
 801907c:	f043 0304 	orr.w	r3, r3, #4
 8019080:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019082:	7938      	ldrb	r0, [r7, #4]
 8019084:	f001 fa38 	bl	801a4f8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019088:	2002      	movs	r0, #2
 801908a:	f7e9 fa57 	bl	800253c <HAL_Delay>
}
 801908e:	bf00      	nop
 8019090:	3708      	adds	r7, #8
 8019092:	46bd      	mov	sp, r7
 8019094:	bd80      	pop	{r7, pc}

08019096 <RadioStandby>:

static void RadioStandby( void )
{
 8019096:	b580      	push	{r7, lr}
 8019098:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801909a:	2000      	movs	r0, #0
 801909c:	f001 fa5e 	bl	801a55c <SUBGRF_SetStandby>
}
 80190a0:	bf00      	nop
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b082      	sub	sp, #8
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 80190ac:	f002 fab3 	bl	801b616 <RFW_Is_Init>
 80190b0:	4603      	mov	r3, r0
 80190b2:	2b01      	cmp	r3, #1
 80190b4:	d102      	bne.n	80190bc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80190b6:	f002 fad6 	bl	801b666 <RFW_ReceiveInit>
 80190ba:	e007      	b.n	80190cc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80190bc:	2300      	movs	r3, #0
 80190be:	2200      	movs	r2, #0
 80190c0:	f240 2162 	movw	r1, #610	; 0x262
 80190c4:	f240 2062 	movw	r0, #610	; 0x262
 80190c8:	f001 fc18 	bl	801a8fc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d006      	beq.n	80190e0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80190d2:	6879      	ldr	r1, [r7, #4]
 80190d4:	4811      	ldr	r0, [pc, #68]	; (801911c <RadioRx+0x78>)
 80190d6:	f003 fa41 	bl	801c55c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80190da:	4810      	ldr	r0, [pc, #64]	; (801911c <RadioRx+0x78>)
 80190dc:	f003 f960 	bl	801c3a0 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80190e0:	4b0f      	ldr	r3, [pc, #60]	; (8019120 <RadioRx+0x7c>)
 80190e2:	2200      	movs	r2, #0
 80190e4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80190e6:	4b0e      	ldr	r3, [pc, #56]	; (8019120 <RadioRx+0x7c>)
 80190e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80190ec:	2100      	movs	r1, #0
 80190ee:	4618      	mov	r0, r3
 80190f0:	f002 f8a8 	bl	801b244 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80190f4:	4b0a      	ldr	r3, [pc, #40]	; (8019120 <RadioRx+0x7c>)
 80190f6:	785b      	ldrb	r3, [r3, #1]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d004      	beq.n	8019106 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80190fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019100:	f001 fa68 	bl	801a5d4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019104:	e005      	b.n	8019112 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019106:	4b06      	ldr	r3, [pc, #24]	; (8019120 <RadioRx+0x7c>)
 8019108:	689b      	ldr	r3, [r3, #8]
 801910a:	019b      	lsls	r3, r3, #6
 801910c:	4618      	mov	r0, r3
 801910e:	f001 fa61 	bl	801a5d4 <SUBGRF_SetRx>
}
 8019112:	bf00      	nop
 8019114:	3708      	adds	r7, #8
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}
 801911a:	bf00      	nop
 801911c:	20002338 	.word	0x20002338
 8019120:	200022c4 	.word	0x200022c4

08019124 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 801912c:	f002 fa73 	bl	801b616 <RFW_Is_Init>
 8019130:	4603      	mov	r3, r0
 8019132:	2b01      	cmp	r3, #1
 8019134:	d102      	bne.n	801913c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019136:	f002 fa96 	bl	801b666 <RFW_ReceiveInit>
 801913a:	e007      	b.n	801914c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801913c:	2300      	movs	r3, #0
 801913e:	2200      	movs	r2, #0
 8019140:	f240 2162 	movw	r1, #610	; 0x262
 8019144:	f240 2062 	movw	r0, #610	; 0x262
 8019148:	f001 fbd8 	bl	801a8fc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d006      	beq.n	8019160 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019152:	6879      	ldr	r1, [r7, #4]
 8019154:	4811      	ldr	r0, [pc, #68]	; (801919c <RadioRxBoosted+0x78>)
 8019156:	f003 fa01 	bl	801c55c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801915a:	4810      	ldr	r0, [pc, #64]	; (801919c <RadioRxBoosted+0x78>)
 801915c:	f003 f920 	bl	801c3a0 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019160:	4b0f      	ldr	r3, [pc, #60]	; (80191a0 <RadioRxBoosted+0x7c>)
 8019162:	2200      	movs	r2, #0
 8019164:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019166:	4b0e      	ldr	r3, [pc, #56]	; (80191a0 <RadioRxBoosted+0x7c>)
 8019168:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801916c:	2100      	movs	r1, #0
 801916e:	4618      	mov	r0, r3
 8019170:	f002 f868 	bl	801b244 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019174:	4b0a      	ldr	r3, [pc, #40]	; (80191a0 <RadioRxBoosted+0x7c>)
 8019176:	785b      	ldrb	r3, [r3, #1]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d004      	beq.n	8019186 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801917c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019180:	f001 fa48 	bl	801a614 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019184:	e005      	b.n	8019192 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019186:	4b06      	ldr	r3, [pc, #24]	; (80191a0 <RadioRxBoosted+0x7c>)
 8019188:	689b      	ldr	r3, [r3, #8]
 801918a:	019b      	lsls	r3, r3, #6
 801918c:	4618      	mov	r0, r3
 801918e:	f001 fa41 	bl	801a614 <SUBGRF_SetRxBoosted>
}
 8019192:	bf00      	nop
 8019194:	3708      	adds	r7, #8
 8019196:	46bd      	mov	sp, r7
 8019198:	bd80      	pop	{r7, pc}
 801919a:	bf00      	nop
 801919c:	20002338 	.word	0x20002338
 80191a0:	200022c4 	.word	0x200022c4

080191a4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b082      	sub	sp, #8
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
 80191ac:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	005a      	lsls	r2, r3, #1
 80191b2:	683b      	ldr	r3, [r7, #0]
 80191b4:	4413      	add	r3, r2
 80191b6:	4a0c      	ldr	r2, [pc, #48]	; (80191e8 <RadioSetRxDutyCycle+0x44>)
 80191b8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80191ba:	2300      	movs	r3, #0
 80191bc:	2200      	movs	r2, #0
 80191be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80191c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80191c6:	f001 fb99 	bl	801a8fc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80191ca:	4b07      	ldr	r3, [pc, #28]	; (80191e8 <RadioSetRxDutyCycle+0x44>)
 80191cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80191d0:	2100      	movs	r1, #0
 80191d2:	4618      	mov	r0, r3
 80191d4:	f002 f836 	bl	801b244 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80191d8:	6839      	ldr	r1, [r7, #0]
 80191da:	6878      	ldr	r0, [r7, #4]
 80191dc:	f001 fa3e 	bl	801a65c <SUBGRF_SetRxDutyCycle>
}
 80191e0:	bf00      	nop
 80191e2:	3708      	adds	r7, #8
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd80      	pop	{r7, pc}
 80191e8:	200022c4 	.word	0x200022c4

080191ec <RadioStartCad>:

static void RadioStartCad( void )
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80191f0:	4b09      	ldr	r3, [pc, #36]	; (8019218 <RadioStartCad+0x2c>)
 80191f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80191f6:	2100      	movs	r1, #0
 80191f8:	4618      	mov	r0, r3
 80191fa:	f002 f823 	bl	801b244 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80191fe:	2300      	movs	r3, #0
 8019200:	2200      	movs	r2, #0
 8019202:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019206:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801920a:	f001 fb77 	bl	801a8fc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801920e:	f001 fa51 	bl	801a6b4 <SUBGRF_SetCad>
}
 8019212:	bf00      	nop
 8019214:	bd80      	pop	{r7, pc}
 8019216:	bf00      	nop
 8019218:	200022c4 	.word	0x200022c4

0801921c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b084      	sub	sp, #16
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	460b      	mov	r3, r1
 8019226:	70fb      	strb	r3, [r7, #3]
 8019228:	4613      	mov	r3, r2
 801922a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801922c:	883b      	ldrh	r3, [r7, #0]
 801922e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019232:	fb02 f303 	mul.w	r3, r2, r3
 8019236:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019238:	6878      	ldr	r0, [r7, #4]
 801923a:	f001 fbbb 	bl	801a9b4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801923e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019242:	4618      	mov	r0, r3
 8019244:	f002 f826 	bl	801b294 <SUBGRF_SetRfTxPower>
 8019248:	4603      	mov	r3, r0
 801924a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801924c:	7afb      	ldrb	r3, [r7, #11]
 801924e:	2101      	movs	r1, #1
 8019250:	4618      	mov	r0, r3
 8019252:	f001 fff7 	bl	801b244 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019256:	f001 fa3b 	bl	801a6d0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801925a:	68f9      	ldr	r1, [r7, #12]
 801925c:	4804      	ldr	r0, [pc, #16]	; (8019270 <RadioSetTxContinuousWave+0x54>)
 801925e:	f003 f97d 	bl	801c55c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019262:	4803      	ldr	r0, [pc, #12]	; (8019270 <RadioSetTxContinuousWave+0x54>)
 8019264:	f003 f89c 	bl	801c3a0 <UTIL_TIMER_Start>
}
 8019268:	bf00      	nop
 801926a:	3710      	adds	r7, #16
 801926c:	46bd      	mov	sp, r7
 801926e:	bd80      	pop	{r7, pc}
 8019270:	20002320 	.word	0x20002320

08019274 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b082      	sub	sp, #8
 8019278:	af00      	add	r7, sp, #0
 801927a:	4603      	mov	r3, r0
 801927c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801927e:	f001 fe5a 	bl	801af36 <SUBGRF_GetRssiInst>
 8019282:	4603      	mov	r3, r0
 8019284:	b21b      	sxth	r3, r3
}
 8019286:	4618      	mov	r0, r3
 8019288:	3708      	adds	r7, #8
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}

0801928e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801928e:	b580      	push	{r7, lr}
 8019290:	b082      	sub	sp, #8
 8019292:	af00      	add	r7, sp, #0
 8019294:	4603      	mov	r3, r0
 8019296:	460a      	mov	r2, r1
 8019298:	80fb      	strh	r3, [r7, #6]
 801929a:	4613      	mov	r3, r2
 801929c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801929e:	797a      	ldrb	r2, [r7, #5]
 80192a0:	88fb      	ldrh	r3, [r7, #6]
 80192a2:	4611      	mov	r1, r2
 80192a4:	4618      	mov	r0, r3
 80192a6:	f001 fed9 	bl	801b05c <SUBGRF_WriteRegister>
}
 80192aa:	bf00      	nop
 80192ac:	3708      	adds	r7, #8
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}

080192b2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80192b2:	b580      	push	{r7, lr}
 80192b4:	b082      	sub	sp, #8
 80192b6:	af00      	add	r7, sp, #0
 80192b8:	4603      	mov	r3, r0
 80192ba:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80192bc:	88fb      	ldrh	r3, [r7, #6]
 80192be:	4618      	mov	r0, r3
 80192c0:	f001 fee0 	bl	801b084 <SUBGRF_ReadRegister>
 80192c4:	4603      	mov	r3, r0
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3708      	adds	r7, #8
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}

080192ce <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80192ce:	b580      	push	{r7, lr}
 80192d0:	b082      	sub	sp, #8
 80192d2:	af00      	add	r7, sp, #0
 80192d4:	4603      	mov	r3, r0
 80192d6:	6039      	str	r1, [r7, #0]
 80192d8:	80fb      	strh	r3, [r7, #6]
 80192da:	4613      	mov	r3, r2
 80192dc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80192de:	797b      	ldrb	r3, [r7, #5]
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	88fb      	ldrh	r3, [r7, #6]
 80192e4:	6839      	ldr	r1, [r7, #0]
 80192e6:	4618      	mov	r0, r3
 80192e8:	f001 fee0 	bl	801b0ac <SUBGRF_WriteRegisters>
}
 80192ec:	bf00      	nop
 80192ee:	3708      	adds	r7, #8
 80192f0:	46bd      	mov	sp, r7
 80192f2:	bd80      	pop	{r7, pc}

080192f4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	4603      	mov	r3, r0
 80192fc:	6039      	str	r1, [r7, #0]
 80192fe:	80fb      	strh	r3, [r7, #6]
 8019300:	4613      	mov	r3, r2
 8019302:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019304:	797b      	ldrb	r3, [r7, #5]
 8019306:	b29a      	uxth	r2, r3
 8019308:	88fb      	ldrh	r3, [r7, #6]
 801930a:	6839      	ldr	r1, [r7, #0]
 801930c:	4618      	mov	r0, r3
 801930e:	f001 feef 	bl	801b0f0 <SUBGRF_ReadRegisters>
}
 8019312:	bf00      	nop
 8019314:	3708      	adds	r7, #8
 8019316:	46bd      	mov	sp, r7
 8019318:	bd80      	pop	{r7, pc}
	...

0801931c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b082      	sub	sp, #8
 8019320:	af00      	add	r7, sp, #0
 8019322:	4603      	mov	r3, r0
 8019324:	460a      	mov	r2, r1
 8019326:	71fb      	strb	r3, [r7, #7]
 8019328:	4613      	mov	r3, r2
 801932a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801932c:	79fb      	ldrb	r3, [r7, #7]
 801932e:	2b01      	cmp	r3, #1
 8019330:	d10a      	bne.n	8019348 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019332:	4a0e      	ldr	r2, [pc, #56]	; (801936c <RadioSetMaxPayloadLength+0x50>)
 8019334:	79bb      	ldrb	r3, [r7, #6]
 8019336:	7013      	strb	r3, [r2, #0]
 8019338:	4b0c      	ldr	r3, [pc, #48]	; (801936c <RadioSetMaxPayloadLength+0x50>)
 801933a:	781a      	ldrb	r2, [r3, #0]
 801933c:	4b0c      	ldr	r3, [pc, #48]	; (8019370 <RadioSetMaxPayloadLength+0x54>)
 801933e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019340:	480c      	ldr	r0, [pc, #48]	; (8019374 <RadioSetMaxPayloadLength+0x58>)
 8019342:	f001 fd43 	bl	801adcc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019346:	e00d      	b.n	8019364 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019348:	4b09      	ldr	r3, [pc, #36]	; (8019370 <RadioSetMaxPayloadLength+0x54>)
 801934a:	7d5b      	ldrb	r3, [r3, #21]
 801934c:	2b01      	cmp	r3, #1
 801934e:	d109      	bne.n	8019364 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019350:	4a06      	ldr	r2, [pc, #24]	; (801936c <RadioSetMaxPayloadLength+0x50>)
 8019352:	79bb      	ldrb	r3, [r7, #6]
 8019354:	7013      	strb	r3, [r2, #0]
 8019356:	4b05      	ldr	r3, [pc, #20]	; (801936c <RadioSetMaxPayloadLength+0x50>)
 8019358:	781a      	ldrb	r2, [r3, #0]
 801935a:	4b05      	ldr	r3, [pc, #20]	; (8019370 <RadioSetMaxPayloadLength+0x54>)
 801935c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801935e:	4805      	ldr	r0, [pc, #20]	; (8019374 <RadioSetMaxPayloadLength+0x58>)
 8019360:	f001 fd34 	bl	801adcc <SUBGRF_SetPacketParams>
}
 8019364:	bf00      	nop
 8019366:	3708      	adds	r7, #8
 8019368:	46bd      	mov	sp, r7
 801936a:	bd80      	pop	{r7, pc}
 801936c:	20000140 	.word	0x20000140
 8019370:	200022c4 	.word	0x200022c4
 8019374:	200022d2 	.word	0x200022d2

08019378 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b082      	sub	sp, #8
 801937c:	af00      	add	r7, sp, #0
 801937e:	4603      	mov	r3, r0
 8019380:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019382:	4a13      	ldr	r2, [pc, #76]	; (80193d0 <RadioSetPublicNetwork+0x58>)
 8019384:	79fb      	ldrb	r3, [r7, #7]
 8019386:	7313      	strb	r3, [r2, #12]
 8019388:	4b11      	ldr	r3, [pc, #68]	; (80193d0 <RadioSetPublicNetwork+0x58>)
 801938a:	7b1a      	ldrb	r2, [r3, #12]
 801938c:	4b10      	ldr	r3, [pc, #64]	; (80193d0 <RadioSetPublicNetwork+0x58>)
 801938e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019390:	2001      	movs	r0, #1
 8019392:	f7ff f82d 	bl	80183f0 <RadioSetModem>
    if( enable == true )
 8019396:	79fb      	ldrb	r3, [r7, #7]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d00a      	beq.n	80193b2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801939c:	2134      	movs	r1, #52	; 0x34
 801939e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80193a2:	f001 fe5b 	bl	801b05c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80193a6:	2144      	movs	r1, #68	; 0x44
 80193a8:	f240 7041 	movw	r0, #1857	; 0x741
 80193ac:	f001 fe56 	bl	801b05c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80193b0:	e009      	b.n	80193c6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80193b2:	2114      	movs	r1, #20
 80193b4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80193b8:	f001 fe50 	bl	801b05c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80193bc:	2124      	movs	r1, #36	; 0x24
 80193be:	f240 7041 	movw	r0, #1857	; 0x741
 80193c2:	f001 fe4b 	bl	801b05c <SUBGRF_WriteRegister>
}
 80193c6:	bf00      	nop
 80193c8:	3708      	adds	r7, #8
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}
 80193ce:	bf00      	nop
 80193d0:	200022c4 	.word	0x200022c4

080193d4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80193d8:	f001 ff90 	bl	801b2fc <SUBGRF_GetRadioWakeUpTime>
 80193dc:	4603      	mov	r3, r0
 80193de:	3303      	adds	r3, #3
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	bd80      	pop	{r7, pc}

080193e4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b082      	sub	sp, #8
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80193ec:	f000 f80e 	bl	801940c <RadioOnTxTimeoutProcess>
}
 80193f0:	bf00      	nop
 80193f2:	3708      	adds	r7, #8
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}

080193f8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019400:	f000 f818 	bl	8019434 <RadioOnRxTimeoutProcess>
}
 8019404:	bf00      	nop
 8019406:	3708      	adds	r7, #8
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}

0801940c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801940c:	b580      	push	{r7, lr}
 801940e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019410:	4b07      	ldr	r3, [pc, #28]	; (8019430 <RadioOnTxTimeoutProcess+0x24>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d008      	beq.n	801942a <RadioOnTxTimeoutProcess+0x1e>
 8019418:	4b05      	ldr	r3, [pc, #20]	; (8019430 <RadioOnTxTimeoutProcess+0x24>)
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	685b      	ldr	r3, [r3, #4]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d003      	beq.n	801942a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019422:	4b03      	ldr	r3, [pc, #12]	; (8019430 <RadioOnTxTimeoutProcess+0x24>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	4798      	blx	r3
    }
}
 801942a:	bf00      	nop
 801942c:	bd80      	pop	{r7, pc}
 801942e:	bf00      	nop
 8019430:	200022c0 	.word	0x200022c0

08019434 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019434:	b580      	push	{r7, lr}
 8019436:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019438:	4b07      	ldr	r3, [pc, #28]	; (8019458 <RadioOnRxTimeoutProcess+0x24>)
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d008      	beq.n	8019452 <RadioOnRxTimeoutProcess+0x1e>
 8019440:	4b05      	ldr	r3, [pc, #20]	; (8019458 <RadioOnRxTimeoutProcess+0x24>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	68db      	ldr	r3, [r3, #12]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d003      	beq.n	8019452 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801944a:	4b03      	ldr	r3, [pc, #12]	; (8019458 <RadioOnRxTimeoutProcess+0x24>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	68db      	ldr	r3, [r3, #12]
 8019450:	4798      	blx	r3
    }
}
 8019452:	bf00      	nop
 8019454:	bd80      	pop	{r7, pc}
 8019456:	bf00      	nop
 8019458:	200022c0 	.word	0x200022c0

0801945c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b082      	sub	sp, #8
 8019460:	af00      	add	r7, sp, #0
 8019462:	4603      	mov	r3, r0
 8019464:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019466:	4a05      	ldr	r2, [pc, #20]	; (801947c <RadioOnDioIrq+0x20>)
 8019468:	88fb      	ldrh	r3, [r7, #6]
 801946a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801946e:	f000 f807 	bl	8019480 <RadioIrqProcess>
}
 8019472:	bf00      	nop
 8019474:	3708      	adds	r7, #8
 8019476:	46bd      	mov	sp, r7
 8019478:	bd80      	pop	{r7, pc}
 801947a:	bf00      	nop
 801947c:	200022c4 	.word	0x200022c4

08019480 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019480:	b590      	push	{r4, r7, lr}
 8019482:	b083      	sub	sp, #12
 8019484:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019486:	2300      	movs	r3, #0
 8019488:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801948a:	2300      	movs	r3, #0
 801948c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801948e:	4ba8      	ldr	r3, [pc, #672]	; (8019730 <RadioIrqProcess+0x2b0>)
 8019490:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019498:	f000 810c 	beq.w	80196b4 <RadioIrqProcess+0x234>
 801949c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80194a0:	f300 81e8 	bgt.w	8019874 <RadioIrqProcess+0x3f4>
 80194a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194a8:	f000 80f0 	beq.w	801968c <RadioIrqProcess+0x20c>
 80194ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194b0:	f300 81e0 	bgt.w	8019874 <RadioIrqProcess+0x3f4>
 80194b4:	2b80      	cmp	r3, #128	; 0x80
 80194b6:	f000 80d5 	beq.w	8019664 <RadioIrqProcess+0x1e4>
 80194ba:	2b80      	cmp	r3, #128	; 0x80
 80194bc:	f300 81da 	bgt.w	8019874 <RadioIrqProcess+0x3f4>
 80194c0:	2b20      	cmp	r3, #32
 80194c2:	dc49      	bgt.n	8019558 <RadioIrqProcess+0xd8>
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	f340 81d5 	ble.w	8019874 <RadioIrqProcess+0x3f4>
 80194ca:	3b01      	subs	r3, #1
 80194cc:	2b1f      	cmp	r3, #31
 80194ce:	f200 81d1 	bhi.w	8019874 <RadioIrqProcess+0x3f4>
 80194d2:	a201      	add	r2, pc, #4	; (adr r2, 80194d8 <RadioIrqProcess+0x58>)
 80194d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194d8:	08019561 	.word	0x08019561
 80194dc:	0801959b 	.word	0x0801959b
 80194e0:	08019875 	.word	0x08019875
 80194e4:	08019751 	.word	0x08019751
 80194e8:	08019875 	.word	0x08019875
 80194ec:	08019875 	.word	0x08019875
 80194f0:	08019875 	.word	0x08019875
 80194f4:	080197cd 	.word	0x080197cd
 80194f8:	08019875 	.word	0x08019875
 80194fc:	08019875 	.word	0x08019875
 8019500:	08019875 	.word	0x08019875
 8019504:	08019875 	.word	0x08019875
 8019508:	08019875 	.word	0x08019875
 801950c:	08019875 	.word	0x08019875
 8019510:	08019875 	.word	0x08019875
 8019514:	080197e9 	.word	0x080197e9
 8019518:	08019875 	.word	0x08019875
 801951c:	08019875 	.word	0x08019875
 8019520:	08019875 	.word	0x08019875
 8019524:	08019875 	.word	0x08019875
 8019528:	08019875 	.word	0x08019875
 801952c:	08019875 	.word	0x08019875
 8019530:	08019875 	.word	0x08019875
 8019534:	08019875 	.word	0x08019875
 8019538:	08019875 	.word	0x08019875
 801953c:	08019875 	.word	0x08019875
 8019540:	08019875 	.word	0x08019875
 8019544:	08019875 	.word	0x08019875
 8019548:	08019875 	.word	0x08019875
 801954c:	08019875 	.word	0x08019875
 8019550:	08019875 	.word	0x08019875
 8019554:	080197f7 	.word	0x080197f7
 8019558:	2b40      	cmp	r3, #64	; 0x40
 801955a:	f000 816d 	beq.w	8019838 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801955e:	e189      	b.n	8019874 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019560:	4874      	ldr	r0, [pc, #464]	; (8019734 <RadioIrqProcess+0x2b4>)
 8019562:	f002 ff8b 	bl	801c47c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019566:	2000      	movs	r0, #0
 8019568:	f000 fff8 	bl	801a55c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801956c:	f002 f85a 	bl	801b624 <RFW_Is_LongPacketModeEnabled>
 8019570:	4603      	mov	r3, r0
 8019572:	2b01      	cmp	r3, #1
 8019574:	d101      	bne.n	801957a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019576:	f002 f87e 	bl	801b676 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801957a:	4b6f      	ldr	r3, [pc, #444]	; (8019738 <RadioIrqProcess+0x2b8>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	2b00      	cmp	r3, #0
 8019580:	f000 817a 	beq.w	8019878 <RadioIrqProcess+0x3f8>
 8019584:	4b6c      	ldr	r3, [pc, #432]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	2b00      	cmp	r3, #0
 801958c:	f000 8174 	beq.w	8019878 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019590:	4b69      	ldr	r3, [pc, #420]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	4798      	blx	r3
        break;
 8019598:	e16e      	b.n	8019878 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801959a:	4868      	ldr	r0, [pc, #416]	; (801973c <RadioIrqProcess+0x2bc>)
 801959c:	f002 ff6e 	bl	801c47c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80195a0:	4b63      	ldr	r3, [pc, #396]	; (8019730 <RadioIrqProcess+0x2b0>)
 80195a2:	785b      	ldrb	r3, [r3, #1]
 80195a4:	f083 0301 	eor.w	r3, r3, #1
 80195a8:	b2db      	uxtb	r3, r3
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d014      	beq.n	80195d8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80195ae:	2000      	movs	r0, #0
 80195b0:	f000 ffd4 	bl	801a55c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80195b4:	2100      	movs	r1, #0
 80195b6:	f640 1002 	movw	r0, #2306	; 0x902
 80195ba:	f001 fd4f 	bl	801b05c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80195be:	f640 1044 	movw	r0, #2372	; 0x944
 80195c2:	f001 fd5f 	bl	801b084 <SUBGRF_ReadRegister>
 80195c6:	4603      	mov	r3, r0
 80195c8:	f043 0302 	orr.w	r3, r3, #2
 80195cc:	b2db      	uxtb	r3, r3
 80195ce:	4619      	mov	r1, r3
 80195d0:	f640 1044 	movw	r0, #2372	; 0x944
 80195d4:	f001 fd42 	bl	801b05c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80195d8:	1dfb      	adds	r3, r7, #7
 80195da:	22ff      	movs	r2, #255	; 0xff
 80195dc:	4619      	mov	r1, r3
 80195de:	4858      	ldr	r0, [pc, #352]	; (8019740 <RadioIrqProcess+0x2c0>)
 80195e0:	f000 fe8c 	bl	801a2fc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80195e4:	4857      	ldr	r0, [pc, #348]	; (8019744 <RadioIrqProcess+0x2c4>)
 80195e6:	f001 fce7 	bl	801afb8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80195ea:	4b53      	ldr	r3, [pc, #332]	; (8019738 <RadioIrqProcess+0x2b8>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d036      	beq.n	8019660 <RadioIrqProcess+0x1e0>
 80195f2:	4b51      	ldr	r3, [pc, #324]	; (8019738 <RadioIrqProcess+0x2b8>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	689b      	ldr	r3, [r3, #8]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d031      	beq.n	8019660 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 80195fc:	4b4c      	ldr	r3, [pc, #304]	; (8019730 <RadioIrqProcess+0x2b0>)
 80195fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019602:	2b01      	cmp	r3, #1
 8019604:	d10e      	bne.n	8019624 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8019606:	4b4c      	ldr	r3, [pc, #304]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	689c      	ldr	r4, [r3, #8]
 801960c:	79fb      	ldrb	r3, [r7, #7]
 801960e:	b299      	uxth	r1, r3
 8019610:	4b47      	ldr	r3, [pc, #284]	; (8019730 <RadioIrqProcess+0x2b0>)
 8019612:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8019616:	b21a      	sxth	r2, r3
 8019618:	4b45      	ldr	r3, [pc, #276]	; (8019730 <RadioIrqProcess+0x2b0>)
 801961a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801961e:	4848      	ldr	r0, [pc, #288]	; (8019740 <RadioIrqProcess+0x2c0>)
 8019620:	47a0      	blx	r4
                break;
 8019622:	e01e      	b.n	8019662 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019624:	4b42      	ldr	r3, [pc, #264]	; (8019730 <RadioIrqProcess+0x2b0>)
 8019626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019628:	463a      	mov	r2, r7
 801962a:	4611      	mov	r1, r2
 801962c:	4618      	mov	r0, r3
 801962e:	f001 ff47 	bl	801b4c0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8019632:	4b41      	ldr	r3, [pc, #260]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	689c      	ldr	r4, [r3, #8]
 8019638:	79fb      	ldrb	r3, [r7, #7]
 801963a:	b299      	uxth	r1, r3
 801963c:	4b3c      	ldr	r3, [pc, #240]	; (8019730 <RadioIrqProcess+0x2b0>)
 801963e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8019642:	b218      	sxth	r0, r3
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801964a:	4a3f      	ldr	r2, [pc, #252]	; (8019748 <RadioIrqProcess+0x2c8>)
 801964c:	fb82 c203 	smull	ip, r2, r2, r3
 8019650:	1192      	asrs	r2, r2, #6
 8019652:	17db      	asrs	r3, r3, #31
 8019654:	1ad3      	subs	r3, r2, r3
 8019656:	b25b      	sxtb	r3, r3
 8019658:	4602      	mov	r2, r0
 801965a:	4839      	ldr	r0, [pc, #228]	; (8019740 <RadioIrqProcess+0x2c0>)
 801965c:	47a0      	blx	r4
                break;
 801965e:	e000      	b.n	8019662 <RadioIrqProcess+0x1e2>
        }
 8019660:	bf00      	nop
        break;
 8019662:	e118      	b.n	8019896 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8019664:	2000      	movs	r0, #0
 8019666:	f000 ff79 	bl	801a55c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801966a:	4b33      	ldr	r3, [pc, #204]	; (8019738 <RadioIrqProcess+0x2b8>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	2b00      	cmp	r3, #0
 8019670:	f000 8104 	beq.w	801987c <RadioIrqProcess+0x3fc>
 8019674:	4b30      	ldr	r3, [pc, #192]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	699b      	ldr	r3, [r3, #24]
 801967a:	2b00      	cmp	r3, #0
 801967c:	f000 80fe 	beq.w	801987c <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8019680:	4b2d      	ldr	r3, [pc, #180]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	699b      	ldr	r3, [r3, #24]
 8019686:	2000      	movs	r0, #0
 8019688:	4798      	blx	r3
        break;
 801968a:	e0f7      	b.n	801987c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801968c:	2000      	movs	r0, #0
 801968e:	f000 ff65 	bl	801a55c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019692:	4b29      	ldr	r3, [pc, #164]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	2b00      	cmp	r3, #0
 8019698:	f000 80f2 	beq.w	8019880 <RadioIrqProcess+0x400>
 801969c:	4b26      	ldr	r3, [pc, #152]	; (8019738 <RadioIrqProcess+0x2b8>)
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	699b      	ldr	r3, [r3, #24]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	f000 80ec 	beq.w	8019880 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 80196a8:	4b23      	ldr	r3, [pc, #140]	; (8019738 <RadioIrqProcess+0x2b8>)
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	699b      	ldr	r3, [r3, #24]
 80196ae:	2001      	movs	r0, #1
 80196b0:	4798      	blx	r3
        break;
 80196b2:	e0e5      	b.n	8019880 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80196b4:	4b25      	ldr	r3, [pc, #148]	; (801974c <RadioIrqProcess+0x2cc>)
 80196b6:	2201      	movs	r2, #1
 80196b8:	2100      	movs	r1, #0
 80196ba:	2002      	movs	r0, #2
 80196bc:	f003 f8e8 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80196c0:	f000 fe02 	bl	801a2c8 <SUBGRF_GetOperatingMode>
 80196c4:	4603      	mov	r3, r0
 80196c6:	2b04      	cmp	r3, #4
 80196c8:	d115      	bne.n	80196f6 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 80196ca:	481a      	ldr	r0, [pc, #104]	; (8019734 <RadioIrqProcess+0x2b4>)
 80196cc:	f002 fed6 	bl	801c47c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80196d0:	2000      	movs	r0, #0
 80196d2:	f000 ff43 	bl	801a55c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80196d6:	4b18      	ldr	r3, [pc, #96]	; (8019738 <RadioIrqProcess+0x2b8>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	f000 80d2 	beq.w	8019884 <RadioIrqProcess+0x404>
 80196e0:	4b15      	ldr	r3, [pc, #84]	; (8019738 <RadioIrqProcess+0x2b8>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	685b      	ldr	r3, [r3, #4]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	f000 80cc 	beq.w	8019884 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 80196ec:	4b12      	ldr	r3, [pc, #72]	; (8019738 <RadioIrqProcess+0x2b8>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	685b      	ldr	r3, [r3, #4]
 80196f2:	4798      	blx	r3
        break;
 80196f4:	e0c6      	b.n	8019884 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80196f6:	f000 fde7 	bl	801a2c8 <SUBGRF_GetOperatingMode>
 80196fa:	4603      	mov	r3, r0
 80196fc:	2b05      	cmp	r3, #5
 80196fe:	f040 80c1 	bne.w	8019884 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8019702:	480e      	ldr	r0, [pc, #56]	; (801973c <RadioIrqProcess+0x2bc>)
 8019704:	f002 feba 	bl	801c47c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019708:	2000      	movs	r0, #0
 801970a:	f000 ff27 	bl	801a55c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801970e:	4b0a      	ldr	r3, [pc, #40]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	2b00      	cmp	r3, #0
 8019714:	f000 80b6 	beq.w	8019884 <RadioIrqProcess+0x404>
 8019718:	4b07      	ldr	r3, [pc, #28]	; (8019738 <RadioIrqProcess+0x2b8>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	68db      	ldr	r3, [r3, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	f000 80b0 	beq.w	8019884 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8019724:	4b04      	ldr	r3, [pc, #16]	; (8019738 <RadioIrqProcess+0x2b8>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	68db      	ldr	r3, [r3, #12]
 801972a:	4798      	blx	r3
        break;
 801972c:	e0aa      	b.n	8019884 <RadioIrqProcess+0x404>
 801972e:	bf00      	nop
 8019730:	200022c4 	.word	0x200022c4
 8019734:	20002320 	.word	0x20002320
 8019738:	200022c0 	.word	0x200022c0
 801973c:	20002338 	.word	0x20002338
 8019740:	200021c0 	.word	0x200021c0
 8019744:	200022e8 	.word	0x200022e8
 8019748:	10624dd3 	.word	0x10624dd3
 801974c:	0801d3e8 	.word	0x0801d3e8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019750:	4b53      	ldr	r3, [pc, #332]	; (80198a0 <RadioIrqProcess+0x420>)
 8019752:	2201      	movs	r2, #1
 8019754:	2100      	movs	r1, #0
 8019756:	2002      	movs	r0, #2
 8019758:	f003 f89a 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801975c:	4b51      	ldr	r3, [pc, #324]	; (80198a4 <RadioIrqProcess+0x424>)
 801975e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019760:	2b00      	cmp	r3, #0
 8019762:	f000 8091 	beq.w	8019888 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8019766:	4a50      	ldr	r2, [pc, #320]	; (80198a8 <RadioIrqProcess+0x428>)
 8019768:	4b4e      	ldr	r3, [pc, #312]	; (80198a4 <RadioIrqProcess+0x424>)
 801976a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801976c:	0c1b      	lsrs	r3, r3, #16
 801976e:	b2db      	uxtb	r3, r3
 8019770:	4619      	mov	r1, r3
 8019772:	f640 1003 	movw	r0, #2307	; 0x903
 8019776:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8019778:	4a4b      	ldr	r2, [pc, #300]	; (80198a8 <RadioIrqProcess+0x428>)
 801977a:	4b4a      	ldr	r3, [pc, #296]	; (80198a4 <RadioIrqProcess+0x424>)
 801977c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801977e:	0a1b      	lsrs	r3, r3, #8
 8019780:	b2db      	uxtb	r3, r3
 8019782:	4619      	mov	r1, r3
 8019784:	f640 1004 	movw	r0, #2308	; 0x904
 8019788:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801978a:	4a47      	ldr	r2, [pc, #284]	; (80198a8 <RadioIrqProcess+0x428>)
 801978c:	4b45      	ldr	r3, [pc, #276]	; (80198a4 <RadioIrqProcess+0x424>)
 801978e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019790:	b2db      	uxtb	r3, r3
 8019792:	4619      	mov	r1, r3
 8019794:	f640 1005 	movw	r0, #2309	; 0x905
 8019798:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801979a:	4c43      	ldr	r4, [pc, #268]	; (80198a8 <RadioIrqProcess+0x428>)
 801979c:	4b43      	ldr	r3, [pc, #268]	; (80198ac <RadioIrqProcess+0x42c>)
 801979e:	f640 1002 	movw	r0, #2306	; 0x902
 80197a2:	4798      	blx	r3
 80197a4:	4603      	mov	r3, r0
 80197a6:	f043 0301 	orr.w	r3, r3, #1
 80197aa:	b2db      	uxtb	r3, r3
 80197ac:	4619      	mov	r1, r3
 80197ae:	f640 1002 	movw	r0, #2306	; 0x902
 80197b2:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80197b4:	4b3b      	ldr	r3, [pc, #236]	; (80198a4 <RadioIrqProcess+0x424>)
 80197b6:	2200      	movs	r2, #0
 80197b8:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80197ba:	2300      	movs	r3, #0
 80197bc:	2200      	movs	r2, #0
 80197be:	f240 2162 	movw	r1, #610	; 0x262
 80197c2:	f240 2062 	movw	r0, #610	; 0x262
 80197c6:	f001 f899 	bl	801a8fc <SUBGRF_SetDioIrqParams>
        break;
 80197ca:	e05d      	b.n	8019888 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80197cc:	4b38      	ldr	r3, [pc, #224]	; (80198b0 <RadioIrqProcess+0x430>)
 80197ce:	2201      	movs	r2, #1
 80197d0:	2100      	movs	r1, #0
 80197d2:	2002      	movs	r0, #2
 80197d4:	f003 f85c 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80197d8:	f001 ff1d 	bl	801b616 <RFW_Is_Init>
 80197dc:	4603      	mov	r3, r0
 80197de:	2b01      	cmp	r3, #1
 80197e0:	d154      	bne.n	801988c <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 80197e2:	f001 ff4e 	bl	801b682 <RFW_ReceivePayload>
        break;
 80197e6:	e051      	b.n	801988c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80197e8:	4b32      	ldr	r3, [pc, #200]	; (80198b4 <RadioIrqProcess+0x434>)
 80197ea:	2201      	movs	r2, #1
 80197ec:	2100      	movs	r1, #0
 80197ee:	2002      	movs	r0, #2
 80197f0:	f003 f84e 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80197f4:	e04f      	b.n	8019896 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 80197f6:	4830      	ldr	r0, [pc, #192]	; (80198b8 <RadioIrqProcess+0x438>)
 80197f8:	f002 fe40 	bl	801c47c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80197fc:	4b29      	ldr	r3, [pc, #164]	; (80198a4 <RadioIrqProcess+0x424>)
 80197fe:	785b      	ldrb	r3, [r3, #1]
 8019800:	f083 0301 	eor.w	r3, r3, #1
 8019804:	b2db      	uxtb	r3, r3
 8019806:	2b00      	cmp	r3, #0
 8019808:	d002      	beq.n	8019810 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801980a:	2000      	movs	r0, #0
 801980c:	f000 fea6 	bl	801a55c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019810:	4b2a      	ldr	r3, [pc, #168]	; (80198bc <RadioIrqProcess+0x43c>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d03b      	beq.n	8019890 <RadioIrqProcess+0x410>
 8019818:	4b28      	ldr	r3, [pc, #160]	; (80198bc <RadioIrqProcess+0x43c>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	68db      	ldr	r3, [r3, #12]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d036      	beq.n	8019890 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8019822:	4b26      	ldr	r3, [pc, #152]	; (80198bc <RadioIrqProcess+0x43c>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	68db      	ldr	r3, [r3, #12]
 8019828:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801982a:	4b25      	ldr	r3, [pc, #148]	; (80198c0 <RadioIrqProcess+0x440>)
 801982c:	2201      	movs	r2, #1
 801982e:	2100      	movs	r1, #0
 8019830:	2002      	movs	r0, #2
 8019832:	f003 f82d 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019836:	e02b      	b.n	8019890 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019838:	4b22      	ldr	r3, [pc, #136]	; (80198c4 <RadioIrqProcess+0x444>)
 801983a:	2201      	movs	r2, #1
 801983c:	2100      	movs	r1, #0
 801983e:	2002      	movs	r0, #2
 8019840:	f003 f826 	bl	801c890 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019844:	4b17      	ldr	r3, [pc, #92]	; (80198a4 <RadioIrqProcess+0x424>)
 8019846:	785b      	ldrb	r3, [r3, #1]
 8019848:	f083 0301 	eor.w	r3, r3, #1
 801984c:	b2db      	uxtb	r3, r3
 801984e:	2b00      	cmp	r3, #0
 8019850:	d002      	beq.n	8019858 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019852:	2000      	movs	r0, #0
 8019854:	f000 fe82 	bl	801a55c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019858:	4b18      	ldr	r3, [pc, #96]	; (80198bc <RadioIrqProcess+0x43c>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d019      	beq.n	8019894 <RadioIrqProcess+0x414>
 8019860:	4b16      	ldr	r3, [pc, #88]	; (80198bc <RadioIrqProcess+0x43c>)
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	691b      	ldr	r3, [r3, #16]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d014      	beq.n	8019894 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801986a:	4b14      	ldr	r3, [pc, #80]	; (80198bc <RadioIrqProcess+0x43c>)
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	691b      	ldr	r3, [r3, #16]
 8019870:	4798      	blx	r3
        break;
 8019872:	e00f      	b.n	8019894 <RadioIrqProcess+0x414>
        break;
 8019874:	bf00      	nop
 8019876:	e00e      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 8019878:	bf00      	nop
 801987a:	e00c      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 801987c:	bf00      	nop
 801987e:	e00a      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 8019880:	bf00      	nop
 8019882:	e008      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 8019884:	bf00      	nop
 8019886:	e006      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 8019888:	bf00      	nop
 801988a:	e004      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 801988c:	bf00      	nop
 801988e:	e002      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 8019890:	bf00      	nop
 8019892:	e000      	b.n	8019896 <RadioIrqProcess+0x416>
        break;
 8019894:	bf00      	nop
    }
}
 8019896:	bf00      	nop
 8019898:	370c      	adds	r7, #12
 801989a:	46bd      	mov	sp, r7
 801989c:	bd90      	pop	{r4, r7, pc}
 801989e:	bf00      	nop
 80198a0:	0801d3fc 	.word	0x0801d3fc
 80198a4:	200022c4 	.word	0x200022c4
 80198a8:	0801928f 	.word	0x0801928f
 80198ac:	080192b3 	.word	0x080192b3
 80198b0:	0801d408 	.word	0x0801d408
 80198b4:	0801d414 	.word	0x0801d414
 80198b8:	20002338 	.word	0x20002338
 80198bc:	200022c0 	.word	0x200022c0
 80198c0:	0801d420 	.word	0x0801d420
 80198c4:	0801d42c 	.word	0x0801d42c

080198c8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80198cc:	4b09      	ldr	r3, [pc, #36]	; (80198f4 <RadioTxPrbs+0x2c>)
 80198ce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80198d2:	2101      	movs	r1, #1
 80198d4:	4618      	mov	r0, r3
 80198d6:	f001 fcb5 	bl	801b244 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80198da:	4b07      	ldr	r3, [pc, #28]	; (80198f8 <RadioTxPrbs+0x30>)
 80198dc:	212d      	movs	r1, #45	; 0x2d
 80198de:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80198e2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80198e4:	f000 fefd 	bl	801a6e2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80198e8:	4804      	ldr	r0, [pc, #16]	; (80198fc <RadioTxPrbs+0x34>)
 80198ea:	f000 fe53 	bl	801a594 <SUBGRF_SetTx>
}
 80198ee:	bf00      	nop
 80198f0:	bd80      	pop	{r7, pc}
 80198f2:	bf00      	nop
 80198f4:	200022c4 	.word	0x200022c4
 80198f8:	0801928f 	.word	0x0801928f
 80198fc:	000fffff 	.word	0x000fffff

08019900 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	4603      	mov	r3, r0
 8019908:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801990a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801990e:	4618      	mov	r0, r3
 8019910:	f001 fcc0 	bl	801b294 <SUBGRF_SetRfTxPower>
 8019914:	4603      	mov	r3, r0
 8019916:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019918:	7bfb      	ldrb	r3, [r7, #15]
 801991a:	2101      	movs	r1, #1
 801991c:	4618      	mov	r0, r3
 801991e:	f001 fc91 	bl	801b244 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019922:	f000 fed5 	bl	801a6d0 <SUBGRF_SetTxContinuousWave>
}
 8019926:	bf00      	nop
 8019928:	3710      	adds	r7, #16
 801992a:	46bd      	mov	sp, r7
 801992c:	bd80      	pop	{r7, pc}

0801992e <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801992e:	b480      	push	{r7}
 8019930:	b089      	sub	sp, #36	; 0x24
 8019932:	af00      	add	r7, sp, #0
 8019934:	60f8      	str	r0, [r7, #12]
 8019936:	60b9      	str	r1, [r7, #8]
 8019938:	4613      	mov	r3, r2
 801993a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801993c:	2300      	movs	r3, #0
 801993e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019940:	2300      	movs	r3, #0
 8019942:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019944:	2300      	movs	r3, #0
 8019946:	61bb      	str	r3, [r7, #24]
 8019948:	e011      	b.n	801996e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801994a:	69bb      	ldr	r3, [r7, #24]
 801994c:	68ba      	ldr	r2, [r7, #8]
 801994e:	4413      	add	r3, r2
 8019950:	781a      	ldrb	r2, [r3, #0]
 8019952:	69bb      	ldr	r3, [r7, #24]
 8019954:	68b9      	ldr	r1, [r7, #8]
 8019956:	440b      	add	r3, r1
 8019958:	43d2      	mvns	r2, r2
 801995a:	b2d2      	uxtb	r2, r2
 801995c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801995e:	69bb      	ldr	r3, [r7, #24]
 8019960:	68fa      	ldr	r2, [r7, #12]
 8019962:	4413      	add	r3, r2
 8019964:	2200      	movs	r2, #0
 8019966:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019968:	69bb      	ldr	r3, [r7, #24]
 801996a:	3301      	adds	r3, #1
 801996c:	61bb      	str	r3, [r7, #24]
 801996e:	79fb      	ldrb	r3, [r7, #7]
 8019970:	69ba      	ldr	r2, [r7, #24]
 8019972:	429a      	cmp	r2, r3
 8019974:	dbe9      	blt.n	801994a <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019976:	2300      	movs	r3, #0
 8019978:	61bb      	str	r3, [r7, #24]
 801997a:	e049      	b.n	8019a10 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801997c:	69bb      	ldr	r3, [r7, #24]
 801997e:	425a      	negs	r2, r3
 8019980:	f003 0307 	and.w	r3, r3, #7
 8019984:	f002 0207 	and.w	r2, r2, #7
 8019988:	bf58      	it	pl
 801998a:	4253      	negpl	r3, r2
 801998c:	b2db      	uxtb	r3, r3
 801998e:	f1c3 0307 	rsb	r3, r3, #7
 8019992:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019994:	69bb      	ldr	r3, [r7, #24]
 8019996:	2b00      	cmp	r3, #0
 8019998:	da00      	bge.n	801999c <payload_integration+0x6e>
 801999a:	3307      	adds	r3, #7
 801999c:	10db      	asrs	r3, r3, #3
 801999e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80199a0:	69bb      	ldr	r3, [r7, #24]
 80199a2:	3301      	adds	r3, #1
 80199a4:	425a      	negs	r2, r3
 80199a6:	f003 0307 	and.w	r3, r3, #7
 80199aa:	f002 0207 	and.w	r2, r2, #7
 80199ae:	bf58      	it	pl
 80199b0:	4253      	negpl	r3, r2
 80199b2:	b2db      	uxtb	r3, r3
 80199b4:	f1c3 0307 	rsb	r3, r3, #7
 80199b8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80199ba:	69bb      	ldr	r3, [r7, #24]
 80199bc:	3301      	adds	r3, #1
 80199be:	2b00      	cmp	r3, #0
 80199c0:	da00      	bge.n	80199c4 <payload_integration+0x96>
 80199c2:	3307      	adds	r3, #7
 80199c4:	10db      	asrs	r3, r3, #3
 80199c6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80199c8:	7dbb      	ldrb	r3, [r7, #22]
 80199ca:	68ba      	ldr	r2, [r7, #8]
 80199cc:	4413      	add	r3, r2
 80199ce:	781b      	ldrb	r3, [r3, #0]
 80199d0:	461a      	mov	r2, r3
 80199d2:	7dfb      	ldrb	r3, [r7, #23]
 80199d4:	fa42 f303 	asr.w	r3, r2, r3
 80199d8:	b2db      	uxtb	r3, r3
 80199da:	f003 0301 	and.w	r3, r3, #1
 80199de:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80199e0:	7ffa      	ldrb	r2, [r7, #31]
 80199e2:	7cfb      	ldrb	r3, [r7, #19]
 80199e4:	4053      	eors	r3, r2
 80199e6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80199e8:	7d3b      	ldrb	r3, [r7, #20]
 80199ea:	68fa      	ldr	r2, [r7, #12]
 80199ec:	4413      	add	r3, r2
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	b25a      	sxtb	r2, r3
 80199f2:	7ff9      	ldrb	r1, [r7, #31]
 80199f4:	7d7b      	ldrb	r3, [r7, #21]
 80199f6:	fa01 f303 	lsl.w	r3, r1, r3
 80199fa:	b25b      	sxtb	r3, r3
 80199fc:	4313      	orrs	r3, r2
 80199fe:	b259      	sxtb	r1, r3
 8019a00:	7d3b      	ldrb	r3, [r7, #20]
 8019a02:	68fa      	ldr	r2, [r7, #12]
 8019a04:	4413      	add	r3, r2
 8019a06:	b2ca      	uxtb	r2, r1
 8019a08:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019a0a:	69bb      	ldr	r3, [r7, #24]
 8019a0c:	3301      	adds	r3, #1
 8019a0e:	61bb      	str	r3, [r7, #24]
 8019a10:	79fb      	ldrb	r3, [r7, #7]
 8019a12:	00db      	lsls	r3, r3, #3
 8019a14:	69ba      	ldr	r2, [r7, #24]
 8019a16:	429a      	cmp	r2, r3
 8019a18:	dbb0      	blt.n	801997c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019a1a:	7ffb      	ldrb	r3, [r7, #31]
 8019a1c:	01db      	lsls	r3, r3, #7
 8019a1e:	b25a      	sxtb	r2, r3
 8019a20:	7ffb      	ldrb	r3, [r7, #31]
 8019a22:	019b      	lsls	r3, r3, #6
 8019a24:	b25b      	sxtb	r3, r3
 8019a26:	4313      	orrs	r3, r2
 8019a28:	b25b      	sxtb	r3, r3
 8019a2a:	7ffa      	ldrb	r2, [r7, #31]
 8019a2c:	2a00      	cmp	r2, #0
 8019a2e:	d101      	bne.n	8019a34 <payload_integration+0x106>
 8019a30:	2220      	movs	r2, #32
 8019a32:	e000      	b.n	8019a36 <payload_integration+0x108>
 8019a34:	2200      	movs	r2, #0
 8019a36:	4313      	orrs	r3, r2
 8019a38:	b259      	sxtb	r1, r3
 8019a3a:	79fb      	ldrb	r3, [r7, #7]
 8019a3c:	68fa      	ldr	r2, [r7, #12]
 8019a3e:	4413      	add	r3, r2
 8019a40:	b2ca      	uxtb	r2, r1
 8019a42:	701a      	strb	r2, [r3, #0]
}
 8019a44:	bf00      	nop
 8019a46:	3724      	adds	r7, #36	; 0x24
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	bc80      	pop	{r7}
 8019a4c:	4770      	bx	lr
	...

08019a50 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b08c      	sub	sp, #48	; 0x30
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	60b9      	str	r1, [r7, #8]
 8019a58:	607a      	str	r2, [r7, #4]
 8019a5a:	603b      	str	r3, [r7, #0]
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019a60:	2300      	movs	r3, #0
 8019a62:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8019a64:	2300      	movs	r3, #0
 8019a66:	623b      	str	r3, [r7, #32]
 8019a68:	2300      	movs	r3, #0
 8019a6a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019a6c:	f001 fdcd 	bl	801b60a <RFW_DeInit>

    if( rxContinuous != 0 )
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d001      	beq.n	8019a7a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019a76:	2300      	movs	r3, #0
 8019a78:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	bf14      	ite	ne
 8019a80:	2301      	movne	r3, #1
 8019a82:	2300      	moveq	r3, #0
 8019a84:	b2da      	uxtb	r2, r3
 8019a86:	4ba3      	ldr	r3, [pc, #652]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019a88:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019a8a:	7bfb      	ldrb	r3, [r7, #15]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d003      	beq.n	8019a98 <RadioSetRxGenericConfig+0x48>
 8019a90:	2b01      	cmp	r3, #1
 8019a92:	f000 80dc 	beq.w	8019c4e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019a96:	e194      	b.n	8019dc2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	689b      	ldr	r3, [r3, #8]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d003      	beq.n	8019aa8 <RadioSetRxGenericConfig+0x58>
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d102      	bne.n	8019aae <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8019aac:	e18a      	b.n	8019dc4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	7f9b      	ldrb	r3, [r3, #30]
 8019ab2:	2b08      	cmp	r3, #8
 8019ab4:	d902      	bls.n	8019abc <RadioSetRxGenericConfig+0x6c>
            return -1;
 8019ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8019aba:	e183      	b.n	8019dc4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	6919      	ldr	r1, [r3, #16]
 8019ac0:	68bb      	ldr	r3, [r7, #8]
 8019ac2:	7f9b      	ldrb	r3, [r3, #30]
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	f107 0320 	add.w	r3, r7, #32
 8019aca:	4618      	mov	r0, r3
 8019acc:	f001 fe90 	bl	801b7f0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	bf14      	ite	ne
 8019ad8:	2301      	movne	r3, #1
 8019ada:	2300      	moveq	r3, #0
 8019adc:	b2db      	uxtb	r3, r3
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f000 fe08 	bl	801a6f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019ae4:	4b8b      	ldr	r3, [pc, #556]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019aec:	68bb      	ldr	r3, [r7, #8]
 8019aee:	689b      	ldr	r3, [r3, #8]
 8019af0:	4a88      	ldr	r2, [pc, #544]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019af2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019afa:	4b86      	ldr	r3, [pc, #536]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019b00:	68bb      	ldr	r3, [r7, #8]
 8019b02:	685b      	ldr	r3, [r3, #4]
 8019b04:	4618      	mov	r0, r3
 8019b06:	f001 fcb3 	bl	801b470 <SUBGRF_GetFskBandwidthRegValue>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	461a      	mov	r2, r3
 8019b0e:	4b81      	ldr	r3, [pc, #516]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019b14:	4b7f      	ldr	r3, [pc, #508]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b16:	2200      	movs	r2, #0
 8019b18:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	b29b      	uxth	r3, r3
 8019b20:	00db      	lsls	r3, r3, #3
 8019b22:	b29a      	uxth	r2, r3
 8019b24:	4b7b      	ldr	r3, [pc, #492]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b26:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019b28:	68bb      	ldr	r3, [r7, #8]
 8019b2a:	7fda      	ldrb	r2, [r3, #31]
 8019b2c:	4b79      	ldr	r3, [pc, #484]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	7f9b      	ldrb	r3, [r3, #30]
 8019b34:	00db      	lsls	r3, r3, #3
 8019b36:	b2da      	uxtb	r2, r3
 8019b38:	4b76      	ldr	r3, [pc, #472]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019b3c:	68bb      	ldr	r3, [r7, #8]
 8019b3e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8019b42:	4b74      	ldr	r3, [pc, #464]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b44:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d105      	bne.n	8019b5c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019b50:	68bb      	ldr	r3, [r7, #8]
 8019b52:	695b      	ldr	r3, [r3, #20]
 8019b54:	b2da      	uxtb	r2, r3
 8019b56:	4b6f      	ldr	r3, [pc, #444]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b58:	759a      	strb	r2, [r3, #22]
 8019b5a:	e00b      	b.n	8019b74 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019b5c:	68bb      	ldr	r3, [r7, #8]
 8019b5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019b62:	2b02      	cmp	r3, #2
 8019b64:	d103      	bne.n	8019b6e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019b66:	4b6b      	ldr	r3, [pc, #428]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b68:	22ff      	movs	r2, #255	; 0xff
 8019b6a:	759a      	strb	r2, [r3, #22]
 8019b6c:	e002      	b.n	8019b74 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019b6e:	4b69      	ldr	r3, [pc, #420]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019b70:	22ff      	movs	r2, #255	; 0xff
 8019b72:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019b74:	68bb      	ldr	r3, [r7, #8]
 8019b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019b7a:	2b02      	cmp	r3, #2
 8019b7c:	d004      	beq.n	8019b88 <RadioSetRxGenericConfig+0x138>
 8019b7e:	68bb      	ldr	r3, [r7, #8]
 8019b80:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019b84:	2b02      	cmp	r3, #2
 8019b86:	d12d      	bne.n	8019be4 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019b88:	68bb      	ldr	r3, [r7, #8]
 8019b8a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019b8e:	2bf1      	cmp	r3, #241	; 0xf1
 8019b90:	d00c      	beq.n	8019bac <RadioSetRxGenericConfig+0x15c>
 8019b92:	68bb      	ldr	r3, [r7, #8]
 8019b94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019b98:	2bf2      	cmp	r3, #242	; 0xf2
 8019b9a:	d007      	beq.n	8019bac <RadioSetRxGenericConfig+0x15c>
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	d002      	beq.n	8019bac <RadioSetRxGenericConfig+0x15c>
            return -1;
 8019ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8019baa:	e10b      	b.n	8019dc4 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019bac:	2300      	movs	r3, #0
 8019bae:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019bb4:	4b58      	ldr	r3, [pc, #352]	; (8019d18 <RadioSetRxGenericConfig+0x2c8>)
 8019bb6:	6819      	ldr	r1, [r3, #0]
 8019bb8:	f107 0314 	add.w	r3, r7, #20
 8019bbc:	4a57      	ldr	r2, [pc, #348]	; (8019d1c <RadioSetRxGenericConfig+0x2cc>)
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f001 fd16 	bl	801b5f0 <RFW_Init>
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d002      	beq.n	8019bd0 <RadioSetRxGenericConfig+0x180>
            return -1;
 8019bca:	f04f 33ff 	mov.w	r3, #4294967295
 8019bce:	e0f9      	b.n	8019dc4 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019bd0:	4b50      	ldr	r3, [pc, #320]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019bd6:	4b4f      	ldr	r3, [pc, #316]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019bd8:	2201      	movs	r2, #1
 8019bda:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019bdc:	4b4d      	ldr	r3, [pc, #308]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019bde:	2200      	movs	r2, #0
 8019be0:	755a      	strb	r2, [r3, #21]
        {
 8019be2:	e00e      	b.n	8019c02 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019bea:	4b4a      	ldr	r3, [pc, #296]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019bec:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019bf4:	4b47      	ldr	r3, [pc, #284]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019bf6:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8019bfe:	4b45      	ldr	r3, [pc, #276]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019c00:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019c02:	f7ff fa48 	bl	8019096 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019c06:	2000      	movs	r0, #0
 8019c08:	f7fe fbf2 	bl	80183f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019c0c:	4844      	ldr	r0, [pc, #272]	; (8019d20 <RadioSetRxGenericConfig+0x2d0>)
 8019c0e:	f001 f80b 	bl	801ac28 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c12:	4844      	ldr	r0, [pc, #272]	; (8019d24 <RadioSetRxGenericConfig+0x2d4>)
 8019c14:	f001 f8da 	bl	801adcc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019c18:	f107 0320 	add.w	r3, r7, #32
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f000 fba2 	bl	801a366 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	8b9b      	ldrh	r3, [r3, #28]
 8019c26:	4618      	mov	r0, r3
 8019c28:	f000 fbec 	bl	801a404 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019c2c:	68bb      	ldr	r3, [r7, #8]
 8019c2e:	8b1b      	ldrh	r3, [r3, #24]
 8019c30:	4618      	mov	r0, r3
 8019c32:	f000 fbc7 	bl	801a3c4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019c36:	683b      	ldr	r3, [r7, #0]
 8019c38:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019c3c:	fb03 f202 	mul.w	r2, r3, r2
 8019c40:	68bb      	ldr	r3, [r7, #8]
 8019c42:	689b      	ldr	r3, [r3, #8]
 8019c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c48:	4a32      	ldr	r2, [pc, #200]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019c4a:	6093      	str	r3, [r2, #8]
        break;
 8019c4c:	e0b9      	b.n	8019dc2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019c4e:	68bb      	ldr	r3, [r7, #8]
 8019c50:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d102      	bne.n	8019c5c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019c56:	f04f 33ff 	mov.w	r3, #4294967295
 8019c5a:	e0b3      	b.n	8019dc4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019c5c:	68bb      	ldr	r3, [r7, #8]
 8019c5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019c62:	2b01      	cmp	r3, #1
 8019c64:	d104      	bne.n	8019c70 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	695b      	ldr	r3, [r3, #20]
 8019c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019c6e:	e002      	b.n	8019c76 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019c70:	23ff      	movs	r3, #255	; 0xff
 8019c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	bf14      	ite	ne
 8019c7e:	2301      	movne	r3, #1
 8019c80:	2300      	moveq	r3, #0
 8019c82:	b2db      	uxtb	r3, r3
 8019c84:	4618      	mov	r0, r3
 8019c86:	f000 fd35 	bl	801a6f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019c8a:	683b      	ldr	r3, [r7, #0]
 8019c8c:	b2db      	uxtb	r3, r3
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f000 fd3f 	bl	801a712 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019c94:	4b1f      	ldr	r3, [pc, #124]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019c96:	2201      	movs	r2, #1
 8019c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019c9c:	68bb      	ldr	r3, [r7, #8]
 8019c9e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8019ca2:	4b1c      	ldr	r3, [pc, #112]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8019cae:	4b19      	ldr	r3, [pc, #100]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8019cba:	4b16      	ldr	r3, [pc, #88]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019cbc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019cc6:	2b02      	cmp	r3, #2
 8019cc8:	d010      	beq.n	8019cec <RadioSetRxGenericConfig+0x29c>
 8019cca:	2b02      	cmp	r3, #2
 8019ccc:	dc2c      	bgt.n	8019d28 <RadioSetRxGenericConfig+0x2d8>
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d002      	beq.n	8019cd8 <RadioSetRxGenericConfig+0x288>
 8019cd2:	2b01      	cmp	r3, #1
 8019cd4:	d005      	beq.n	8019ce2 <RadioSetRxGenericConfig+0x292>
            break;
 8019cd6:	e027      	b.n	8019d28 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019cd8:	4b0e      	ldr	r3, [pc, #56]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019cda:	2200      	movs	r2, #0
 8019cdc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019ce0:	e023      	b.n	8019d2a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019ce2:	4b0c      	ldr	r3, [pc, #48]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019ce4:	2201      	movs	r2, #1
 8019ce6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019cea:	e01e      	b.n	8019d2a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019cec:	68bb      	ldr	r3, [r7, #8]
 8019cee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019cf2:	2b0b      	cmp	r3, #11
 8019cf4:	d004      	beq.n	8019d00 <RadioSetRxGenericConfig+0x2b0>
 8019cf6:	68bb      	ldr	r3, [r7, #8]
 8019cf8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019cfc:	2b0c      	cmp	r3, #12
 8019cfe:	d104      	bne.n	8019d0a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019d00:	4b04      	ldr	r3, [pc, #16]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019d02:	2201      	movs	r2, #1
 8019d04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019d08:	e00f      	b.n	8019d2a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019d0a:	4b02      	ldr	r3, [pc, #8]	; (8019d14 <RadioSetRxGenericConfig+0x2c4>)
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019d12:	e00a      	b.n	8019d2a <RadioSetRxGenericConfig+0x2da>
 8019d14:	200022c4 	.word	0x200022c4
 8019d18:	200022c0 	.word	0x200022c0
 8019d1c:	20002338 	.word	0x20002338
 8019d20:	200022fc 	.word	0x200022fc
 8019d24:	200022d2 	.word	0x200022d2
            break;
 8019d28:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019d2a:	4b28      	ldr	r3, [pc, #160]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019d2c:	2201      	movs	r2, #1
 8019d2e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019d30:	68bb      	ldr	r3, [r7, #8]
 8019d32:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8019d34:	4b25      	ldr	r3, [pc, #148]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019d36:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019d38:	68bb      	ldr	r3, [r7, #8]
 8019d3a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8019d3e:	4b23      	ldr	r3, [pc, #140]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019d40:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019d42:	4a22      	ldr	r2, [pc, #136]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019d44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019d48:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019d4a:	68bb      	ldr	r3, [r7, #8]
 8019d4c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8019d50:	4b1e      	ldr	r3, [pc, #120]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019d52:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8019d5c:	4b1b      	ldr	r3, [pc, #108]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8019d62:	f7ff f998 	bl	8019096 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019d66:	2001      	movs	r0, #1
 8019d68:	f7fe fb42 	bl	80183f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019d6c:	4818      	ldr	r0, [pc, #96]	; (8019dd0 <RadioSetRxGenericConfig+0x380>)
 8019d6e:	f000 ff5b 	bl	801ac28 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d72:	4818      	ldr	r0, [pc, #96]	; (8019dd4 <RadioSetRxGenericConfig+0x384>)
 8019d74:	f001 f82a 	bl	801adcc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019d78:	4b14      	ldr	r3, [pc, #80]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d10d      	bne.n	8019d9e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019d82:	f240 7036 	movw	r0, #1846	; 0x736
 8019d86:	f001 f97d 	bl	801b084 <SUBGRF_ReadRegister>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	f023 0304 	bic.w	r3, r3, #4
 8019d90:	b2db      	uxtb	r3, r3
 8019d92:	4619      	mov	r1, r3
 8019d94:	f240 7036 	movw	r0, #1846	; 0x736
 8019d98:	f001 f960 	bl	801b05c <SUBGRF_WriteRegister>
 8019d9c:	e00c      	b.n	8019db8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019d9e:	f240 7036 	movw	r0, #1846	; 0x736
 8019da2:	f001 f96f 	bl	801b084 <SUBGRF_ReadRegister>
 8019da6:	4603      	mov	r3, r0
 8019da8:	f043 0304 	orr.w	r3, r3, #4
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	4619      	mov	r1, r3
 8019db0:	f240 7036 	movw	r0, #1846	; 0x736
 8019db4:	f001 f952 	bl	801b05c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019db8:	4b04      	ldr	r3, [pc, #16]	; (8019dcc <RadioSetRxGenericConfig+0x37c>)
 8019dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019dbe:	609a      	str	r2, [r3, #8]
        break;
 8019dc0:	bf00      	nop
    }
    return status;
 8019dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	3730      	adds	r7, #48	; 0x30
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}
 8019dcc:	200022c4 	.word	0x200022c4
 8019dd0:	200022fc 	.word	0x200022fc
 8019dd4:	200022d2 	.word	0x200022d2

08019dd8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b08e      	sub	sp, #56	; 0x38
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	60b9      	str	r1, [r7, #8]
 8019de0:	607b      	str	r3, [r7, #4]
 8019de2:	4603      	mov	r3, r0
 8019de4:	73fb      	strb	r3, [r7, #15]
 8019de6:	4613      	mov	r3, r2
 8019de8:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019dea:	2300      	movs	r3, #0
 8019dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019dee:	2300      	movs	r3, #0
 8019df0:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019df2:	f001 fc0a 	bl	801b60a <RFW_DeInit>
    switch( modem )
 8019df6:	7bfb      	ldrb	r3, [r7, #15]
 8019df8:	2b03      	cmp	r3, #3
 8019dfa:	f200 8204 	bhi.w	801a206 <RadioSetTxGenericConfig+0x42e>
 8019dfe:	a201      	add	r2, pc, #4	; (adr r2, 8019e04 <RadioSetTxGenericConfig+0x2c>)
 8019e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e04:	08019f89 	.word	0x08019f89
 8019e08:	0801a0d1 	.word	0x0801a0d1
 8019e0c:	0801a1c9 	.word	0x0801a1c9
 8019e10:	08019e15 	.word	0x08019e15
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019e14:	68bb      	ldr	r3, [r7, #8]
 8019e16:	7c9b      	ldrb	r3, [r3, #18]
 8019e18:	2b08      	cmp	r3, #8
 8019e1a:	d902      	bls.n	8019e22 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e20:	e206      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	6899      	ldr	r1, [r3, #8]
 8019e26:	68bb      	ldr	r3, [r7, #8]
 8019e28:	7c9b      	ldrb	r3, [r3, #18]
 8019e2a:	b29a      	uxth	r2, r3
 8019e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019e30:	4618      	mov	r0, r3
 8019e32:	f001 fcdd 	bl	801b7f0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d102      	bne.n	8019e44 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e42:	e1f5      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8019e44:	68bb      	ldr	r3, [r7, #8]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	f242 7210 	movw	r2, #10000	; 0x2710
 8019e4c:	4293      	cmp	r3, r2
 8019e4e:	d813      	bhi.n	8019e78 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019e50:	2302      	movs	r3, #2
 8019e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8019e56:	4b99      	ldr	r3, [pc, #612]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e58:	2203      	movs	r2, #3
 8019e5a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019e5c:	4b97      	ldr	r3, [pc, #604]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e5e:	2203      	movs	r2, #3
 8019e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019e64:	68bb      	ldr	r3, [r7, #8]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	4a94      	ldr	r2, [pc, #592]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e6a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	7cda      	ldrb	r2, [r3, #19]
 8019e70:	4b92      	ldr	r3, [pc, #584]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019e76:	e017      	b.n	8019ea8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8019e78:	2300      	movs	r3, #0
 8019e7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019e7e:	4b8f      	ldr	r3, [pc, #572]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e80:	2200      	movs	r2, #0
 8019e82:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019e84:	4b8d      	ldr	r3, [pc, #564]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e86:	2200      	movs	r2, #0
 8019e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019e8c:	68bb      	ldr	r3, [r7, #8]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	4a8a      	ldr	r2, [pc, #552]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e92:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019e94:	68bb      	ldr	r3, [r7, #8]
 8019e96:	7cda      	ldrb	r2, [r3, #19]
 8019e98:	4b88      	ldr	r3, [pc, #544]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	089b      	lsrs	r3, r3, #2
 8019ea4:	4a85      	ldr	r2, [pc, #532]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019ea6:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	685b      	ldr	r3, [r3, #4]
 8019eac:	b29b      	uxth	r3, r3
 8019eae:	00db      	lsls	r3, r3, #3
 8019eb0:	b29a      	uxth	r2, r3
 8019eb2:	4b82      	ldr	r3, [pc, #520]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019eb4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019eb6:	4b81      	ldr	r3, [pc, #516]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019eb8:	2204      	movs	r2, #4
 8019eba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019ebc:	68bb      	ldr	r3, [r7, #8]
 8019ebe:	7c9b      	ldrb	r3, [r3, #18]
 8019ec0:	00db      	lsls	r3, r3, #3
 8019ec2:	b2da      	uxtb	r2, r3
 8019ec4:	4b7d      	ldr	r3, [pc, #500]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019ec6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019ec8:	4b7c      	ldr	r3, [pc, #496]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019eca:	2200      	movs	r2, #0
 8019ecc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019ece:	68bb      	ldr	r3, [r7, #8]
 8019ed0:	7d9b      	ldrb	r3, [r3, #22]
 8019ed2:	2b02      	cmp	r3, #2
 8019ed4:	d003      	beq.n	8019ede <RadioSetTxGenericConfig+0x106>
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	7d1b      	ldrb	r3, [r3, #20]
 8019eda:	2b02      	cmp	r3, #2
 8019edc:	d12b      	bne.n	8019f36 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019ede:	68bb      	ldr	r3, [r7, #8]
 8019ee0:	7d5b      	ldrb	r3, [r3, #21]
 8019ee2:	2bf1      	cmp	r3, #241	; 0xf1
 8019ee4:	d00a      	beq.n	8019efc <RadioSetTxGenericConfig+0x124>
 8019ee6:	68bb      	ldr	r3, [r7, #8]
 8019ee8:	7d5b      	ldrb	r3, [r3, #21]
 8019eea:	2bf2      	cmp	r3, #242	; 0xf2
 8019eec:	d006      	beq.n	8019efc <RadioSetTxGenericConfig+0x124>
 8019eee:	68bb      	ldr	r3, [r7, #8]
 8019ef0:	7d5b      	ldrb	r3, [r3, #21]
 8019ef2:	2b01      	cmp	r3, #1
 8019ef4:	d002      	beq.n	8019efc <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8019ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8019efa:	e199      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019f00:	2301      	movs	r3, #1
 8019f02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019f06:	4b6e      	ldr	r3, [pc, #440]	; (801a0c0 <RadioSetTxGenericConfig+0x2e8>)
 8019f08:	6819      	ldr	r1, [r3, #0]
 8019f0a:	f107 0320 	add.w	r3, r7, #32
 8019f0e:	4a6d      	ldr	r2, [pc, #436]	; (801a0c4 <RadioSetTxGenericConfig+0x2ec>)
 8019f10:	4618      	mov	r0, r3
 8019f12:	f001 fb6d 	bl	801b5f0 <RFW_Init>
 8019f16:	4603      	mov	r3, r0
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d002      	beq.n	8019f22 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8019f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f20:	e186      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019f22:	4b66      	ldr	r3, [pc, #408]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019f24:	2200      	movs	r2, #0
 8019f26:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019f28:	4b64      	ldr	r3, [pc, #400]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019f2a:	2201      	movs	r2, #1
 8019f2c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019f2e:	4b63      	ldr	r3, [pc, #396]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019f30:	2200      	movs	r2, #0
 8019f32:	755a      	strb	r2, [r3, #21]
        {
 8019f34:	e00b      	b.n	8019f4e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8019f36:	68bb      	ldr	r3, [r7, #8]
 8019f38:	7d5a      	ldrb	r2, [r3, #21]
 8019f3a:	4b60      	ldr	r3, [pc, #384]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019f3c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019f3e:	68bb      	ldr	r3, [r7, #8]
 8019f40:	7d9a      	ldrb	r2, [r3, #22]
 8019f42:	4b5e      	ldr	r3, [pc, #376]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019f44:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	7d1a      	ldrb	r2, [r3, #20]
 8019f4a:	4b5c      	ldr	r3, [pc, #368]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019f4c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019f4e:	f7ff f8a2 	bl	8019096 <RadioStandby>
        RadioSetModem( radio_modem );
 8019f52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019f56:	4618      	mov	r0, r3
 8019f58:	f7fe fa4a 	bl	80183f0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019f5c:	485a      	ldr	r0, [pc, #360]	; (801a0c8 <RadioSetTxGenericConfig+0x2f0>)
 8019f5e:	f000 fe63 	bl	801ac28 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f62:	485a      	ldr	r0, [pc, #360]	; (801a0cc <RadioSetTxGenericConfig+0x2f4>)
 8019f64:	f000 ff32 	bl	801adcc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f000 f9fa 	bl	801a366 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8019f72:	68bb      	ldr	r3, [r7, #8]
 8019f74:	8a1b      	ldrh	r3, [r3, #16]
 8019f76:	4618      	mov	r0, r3
 8019f78:	f000 fa44 	bl	801a404 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019f7c:	68bb      	ldr	r3, [r7, #8]
 8019f7e:	899b      	ldrh	r3, [r3, #12]
 8019f80:	4618      	mov	r0, r3
 8019f82:	f000 fa1f 	bl	801a3c4 <SUBGRF_SetCrcPolynomial>
        break;
 8019f86:	e13f      	b.n	801a208 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d102      	bne.n	8019f96 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019f90:	f04f 33ff 	mov.w	r3, #4294967295
 8019f94:	e14c      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	7c9b      	ldrb	r3, [r3, #18]
 8019f9a:	2b08      	cmp	r3, #8
 8019f9c:	d902      	bls.n	8019fa4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa2:	e145      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8019fa4:	68bb      	ldr	r3, [r7, #8]
 8019fa6:	6899      	ldr	r1, [r3, #8]
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	7c9b      	ldrb	r3, [r3, #18]
 8019fac:	b29a      	uxth	r2, r3
 8019fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f001 fc1c 	bl	801b7f0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019fb8:	4b40      	ldr	r3, [pc, #256]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019fba:	2200      	movs	r2, #0
 8019fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019fc0:	68bb      	ldr	r3, [r7, #8]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	4a3d      	ldr	r2, [pc, #244]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019fc8:	68bb      	ldr	r3, [r7, #8]
 8019fca:	7cda      	ldrb	r2, [r3, #19]
 8019fcc:	4b3b      	ldr	r3, [pc, #236]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8019fd2:	68bb      	ldr	r3, [r7, #8]
 8019fd4:	699b      	ldr	r3, [r3, #24]
 8019fd6:	4a39      	ldr	r2, [pc, #228]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019fd8:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019fda:	4b38      	ldr	r3, [pc, #224]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019fdc:	2200      	movs	r2, #0
 8019fde:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019fe0:	68bb      	ldr	r3, [r7, #8]
 8019fe2:	685b      	ldr	r3, [r3, #4]
 8019fe4:	b29b      	uxth	r3, r3
 8019fe6:	00db      	lsls	r3, r3, #3
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	4b34      	ldr	r3, [pc, #208]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019fec:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019fee:	4b33      	ldr	r3, [pc, #204]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019ff0:	2204      	movs	r2, #4
 8019ff2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	7c9b      	ldrb	r3, [r3, #18]
 8019ff8:	00db      	lsls	r3, r3, #3
 8019ffa:	b2da      	uxtb	r2, r3
 8019ffc:	4b2f      	ldr	r3, [pc, #188]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 8019ffe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a000:	4b2e      	ldr	r3, [pc, #184]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 801a002:	2200      	movs	r2, #0
 801a004:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	7d9b      	ldrb	r3, [r3, #22]
 801a00a:	2b02      	cmp	r3, #2
 801a00c:	d003      	beq.n	801a016 <RadioSetTxGenericConfig+0x23e>
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	7d1b      	ldrb	r3, [r3, #20]
 801a012:	2b02      	cmp	r3, #2
 801a014:	d12a      	bne.n	801a06c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a016:	68bb      	ldr	r3, [r7, #8]
 801a018:	7d5b      	ldrb	r3, [r3, #21]
 801a01a:	2bf1      	cmp	r3, #241	; 0xf1
 801a01c:	d00a      	beq.n	801a034 <RadioSetTxGenericConfig+0x25c>
 801a01e:	68bb      	ldr	r3, [r7, #8]
 801a020:	7d5b      	ldrb	r3, [r3, #21]
 801a022:	2bf2      	cmp	r3, #242	; 0xf2
 801a024:	d006      	beq.n	801a034 <RadioSetTxGenericConfig+0x25c>
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	7d5b      	ldrb	r3, [r3, #21]
 801a02a:	2b01      	cmp	r3, #1
 801a02c:	d002      	beq.n	801a034 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a02e:	f04f 33ff 	mov.w	r3, #4294967295
 801a032:	e0fd      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a034:	2301      	movs	r3, #1
 801a036:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a038:	68bb      	ldr	r3, [r7, #8]
 801a03a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a03c:	4b20      	ldr	r3, [pc, #128]	; (801a0c0 <RadioSetTxGenericConfig+0x2e8>)
 801a03e:	6819      	ldr	r1, [r3, #0]
 801a040:	f107 0314 	add.w	r3, r7, #20
 801a044:	4a1f      	ldr	r2, [pc, #124]	; (801a0c4 <RadioSetTxGenericConfig+0x2ec>)
 801a046:	4618      	mov	r0, r3
 801a048:	f001 fad2 	bl	801b5f0 <RFW_Init>
 801a04c:	4603      	mov	r3, r0
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d002      	beq.n	801a058 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801a052:	f04f 33ff 	mov.w	r3, #4294967295
 801a056:	e0eb      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a058:	4b18      	ldr	r3, [pc, #96]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 801a05a:	2200      	movs	r2, #0
 801a05c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a05e:	4b17      	ldr	r3, [pc, #92]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 801a060:	2201      	movs	r2, #1
 801a062:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a064:	4b15      	ldr	r3, [pc, #84]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 801a066:	2200      	movs	r2, #0
 801a068:	755a      	strb	r2, [r3, #21]
        {
 801a06a:	e00b      	b.n	801a084 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	7d5a      	ldrb	r2, [r3, #21]
 801a070:	4b12      	ldr	r3, [pc, #72]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 801a072:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	7d9a      	ldrb	r2, [r3, #22]
 801a078:	4b10      	ldr	r3, [pc, #64]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 801a07a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a07c:	68bb      	ldr	r3, [r7, #8]
 801a07e:	7d1a      	ldrb	r2, [r3, #20]
 801a080:	4b0e      	ldr	r3, [pc, #56]	; (801a0bc <RadioSetTxGenericConfig+0x2e4>)
 801a082:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a084:	f7ff f807 	bl	8019096 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a088:	2000      	movs	r0, #0
 801a08a:	f7fe f9b1 	bl	80183f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a08e:	480e      	ldr	r0, [pc, #56]	; (801a0c8 <RadioSetTxGenericConfig+0x2f0>)
 801a090:	f000 fdca 	bl	801ac28 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a094:	480d      	ldr	r0, [pc, #52]	; (801a0cc <RadioSetTxGenericConfig+0x2f4>)
 801a096:	f000 fe99 	bl	801adcc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a09a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f000 f961 	bl	801a366 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	8a1b      	ldrh	r3, [r3, #16]
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f000 f9ab 	bl	801a404 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a0ae:	68bb      	ldr	r3, [r7, #8]
 801a0b0:	899b      	ldrh	r3, [r3, #12]
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f000 f986 	bl	801a3c4 <SUBGRF_SetCrcPolynomial>
        break;
 801a0b8:	e0a6      	b.n	801a208 <RadioSetTxGenericConfig+0x430>
 801a0ba:	bf00      	nop
 801a0bc:	200022c4 	.word	0x200022c4
 801a0c0:	200022c0 	.word	0x200022c0
 801a0c4:	20002320 	.word	0x20002320
 801a0c8:	200022fc 	.word	0x200022fc
 801a0cc:	200022d2 	.word	0x200022d2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a0d0:	4b59      	ldr	r3, [pc, #356]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a0d2:	2201      	movs	r2, #1
 801a0d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a0d8:	68bb      	ldr	r3, [r7, #8]
 801a0da:	781a      	ldrb	r2, [r3, #0]
 801a0dc:	4b56      	ldr	r3, [pc, #344]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a0de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a0e2:	68bb      	ldr	r3, [r7, #8]
 801a0e4:	785a      	ldrb	r2, [r3, #1]
 801a0e6:	4b54      	ldr	r3, [pc, #336]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a0e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a0ec:	68bb      	ldr	r3, [r7, #8]
 801a0ee:	789a      	ldrb	r2, [r3, #2]
 801a0f0:	4b51      	ldr	r3, [pc, #324]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a0f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a0f6:	68bb      	ldr	r3, [r7, #8]
 801a0f8:	78db      	ldrb	r3, [r3, #3]
 801a0fa:	2b02      	cmp	r3, #2
 801a0fc:	d010      	beq.n	801a120 <RadioSetTxGenericConfig+0x348>
 801a0fe:	2b02      	cmp	r3, #2
 801a100:	dc20      	bgt.n	801a144 <RadioSetTxGenericConfig+0x36c>
 801a102:	2b00      	cmp	r3, #0
 801a104:	d002      	beq.n	801a10c <RadioSetTxGenericConfig+0x334>
 801a106:	2b01      	cmp	r3, #1
 801a108:	d005      	beq.n	801a116 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a10a:	e01b      	b.n	801a144 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a10c:	4b4a      	ldr	r3, [pc, #296]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a10e:	2200      	movs	r2, #0
 801a110:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a114:	e017      	b.n	801a146 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a116:	4b48      	ldr	r3, [pc, #288]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a118:	2201      	movs	r2, #1
 801a11a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a11e:	e012      	b.n	801a146 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	781b      	ldrb	r3, [r3, #0]
 801a124:	2b0b      	cmp	r3, #11
 801a126:	d003      	beq.n	801a130 <RadioSetTxGenericConfig+0x358>
 801a128:	68bb      	ldr	r3, [r7, #8]
 801a12a:	781b      	ldrb	r3, [r3, #0]
 801a12c:	2b0c      	cmp	r3, #12
 801a12e:	d104      	bne.n	801a13a <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a130:	4b41      	ldr	r3, [pc, #260]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a132:	2201      	movs	r2, #1
 801a134:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a138:	e005      	b.n	801a146 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a13a:	4b3f      	ldr	r3, [pc, #252]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a13c:	2200      	movs	r2, #0
 801a13e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a142:	e000      	b.n	801a146 <RadioSetTxGenericConfig+0x36e>
            break;
 801a144:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a146:	4b3c      	ldr	r3, [pc, #240]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a148:	2201      	movs	r2, #1
 801a14a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a14c:	68bb      	ldr	r3, [r7, #8]
 801a14e:	889a      	ldrh	r2, [r3, #4]
 801a150:	4b39      	ldr	r3, [pc, #228]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a152:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a154:	68bb      	ldr	r3, [r7, #8]
 801a156:	799a      	ldrb	r2, [r3, #6]
 801a158:	4b37      	ldr	r3, [pc, #220]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a15a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a15c:	68bb      	ldr	r3, [r7, #8]
 801a15e:	79da      	ldrb	r2, [r3, #7]
 801a160:	4b35      	ldr	r3, [pc, #212]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a162:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a166:	68bb      	ldr	r3, [r7, #8]
 801a168:	7a1a      	ldrb	r2, [r3, #8]
 801a16a:	4b33      	ldr	r3, [pc, #204]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a16c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a170:	f7fe ff91 	bl	8019096 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a174:	2001      	movs	r0, #1
 801a176:	f7fe f93b 	bl	80183f0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a17a:	4830      	ldr	r0, [pc, #192]	; (801a23c <RadioSetTxGenericConfig+0x464>)
 801a17c:	f000 fd54 	bl	801ac28 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a180:	482f      	ldr	r0, [pc, #188]	; (801a240 <RadioSetTxGenericConfig+0x468>)
 801a182:	f000 fe23 	bl	801adcc <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a186:	4b2c      	ldr	r3, [pc, #176]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a18c:	2b06      	cmp	r3, #6
 801a18e:	d10d      	bne.n	801a1ac <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a190:	f640 0089 	movw	r0, #2185	; 0x889
 801a194:	f000 ff76 	bl	801b084 <SUBGRF_ReadRegister>
 801a198:	4603      	mov	r3, r0
 801a19a:	f023 0304 	bic.w	r3, r3, #4
 801a19e:	b2db      	uxtb	r3, r3
 801a1a0:	4619      	mov	r1, r3
 801a1a2:	f640 0089 	movw	r0, #2185	; 0x889
 801a1a6:	f000 ff59 	bl	801b05c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a1aa:	e02d      	b.n	801a208 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a1ac:	f640 0089 	movw	r0, #2185	; 0x889
 801a1b0:	f000 ff68 	bl	801b084 <SUBGRF_ReadRegister>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	f043 0304 	orr.w	r3, r3, #4
 801a1ba:	b2db      	uxtb	r3, r3
 801a1bc:	4619      	mov	r1, r3
 801a1be:	f640 0089 	movw	r0, #2185	; 0x889
 801a1c2:	f000 ff4b 	bl	801b05c <SUBGRF_WriteRegister>
        break;
 801a1c6:	e01f      	b.n	801a208 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a1c8:	68bb      	ldr	r3, [r7, #8]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d004      	beq.n	801a1da <RadioSetTxGenericConfig+0x402>
 801a1d0:	68bb      	ldr	r3, [r7, #8]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a1d8:	d902      	bls.n	801a1e0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a1da:	f04f 33ff 	mov.w	r3, #4294967295
 801a1de:	e027      	b.n	801a230 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a1e0:	2003      	movs	r0, #3
 801a1e2:	f7fe f905 	bl	80183f0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a1e6:	4b14      	ldr	r3, [pc, #80]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a1e8:	2202      	movs	r2, #2
 801a1ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	4a11      	ldr	r2, [pc, #68]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a1f4:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a1f6:	4b10      	ldr	r3, [pc, #64]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a1f8:	2216      	movs	r2, #22
 801a1fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1fe:	480f      	ldr	r0, [pc, #60]	; (801a23c <RadioSetTxGenericConfig+0x464>)
 801a200:	f000 fd12 	bl	801ac28 <SUBGRF_SetModulationParams>
        break;
 801a204:	e000      	b.n	801a208 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a206:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a20c:	4618      	mov	r0, r3
 801a20e:	f001 f841 	bl	801b294 <SUBGRF_SetRfTxPower>
 801a212:	4603      	mov	r3, r0
 801a214:	461a      	mov	r2, r3
 801a216:	4b08      	ldr	r3, [pc, #32]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a218:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a21c:	4b06      	ldr	r3, [pc, #24]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a21e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a222:	4618      	mov	r0, r3
 801a224:	f001 fa05 	bl	801b632 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a228:	4a03      	ldr	r2, [pc, #12]	; (801a238 <RadioSetTxGenericConfig+0x460>)
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	6053      	str	r3, [r2, #4]
    return 0;
 801a22e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a230:	4618      	mov	r0, r3
 801a232:	3738      	adds	r7, #56	; 0x38
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}
 801a238:	200022c4 	.word	0x200022c4
 801a23c:	200022fc 	.word	0x200022fc
 801a240:	200022d2 	.word	0x200022d2

0801a244 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a244:	b580      	push	{r7, lr}
 801a246:	b084      	sub	sp, #16
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d002      	beq.n	801a258 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a252:	4a1a      	ldr	r2, [pc, #104]	; (801a2bc <SUBGRF_Init+0x78>)
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a258:	f7e7 ffa2 	bl	80021a0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a25c:	2002      	movs	r0, #2
 801a25e:	f001 f8e5 	bl	801b42c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a262:	4b17      	ldr	r3, [pc, #92]	; (801a2c0 <SUBGRF_Init+0x7c>)
 801a264:	2200      	movs	r2, #0
 801a266:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a268:	2000      	movs	r0, #0
 801a26a:	f000 f977 	bl	801a55c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a26e:	f7f2 f847 	bl	800c300 <RBI_IsTCXO>
 801a272:	4603      	mov	r3, r0
 801a274:	2b01      	cmp	r3, #1
 801a276:	d10e      	bne.n	801a296 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a278:	2140      	movs	r1, #64	; 0x40
 801a27a:	2001      	movs	r0, #1
 801a27c:	f000 fb78 	bl	801a970 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a280:	2100      	movs	r1, #0
 801a282:	f640 1011 	movw	r0, #2321	; 0x911
 801a286:	f000 fee9 	bl	801b05c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a28a:	237f      	movs	r3, #127	; 0x7f
 801a28c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a28e:	7b38      	ldrb	r0, [r7, #12]
 801a290:	f000 fa85 	bl	801a79e <SUBGRF_Calibrate>
 801a294:	e009      	b.n	801a2aa <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a296:	2120      	movs	r1, #32
 801a298:	f640 1011 	movw	r0, #2321	; 0x911
 801a29c:	f000 fede 	bl	801b05c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a2a0:	2120      	movs	r1, #32
 801a2a2:	f640 1012 	movw	r0, #2322	; 0x912
 801a2a6:	f000 fed9 	bl	801b05c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a2aa:	f7f2 f80d 	bl	800c2c8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a2ae:	4b05      	ldr	r3, [pc, #20]	; (801a2c4 <SUBGRF_Init+0x80>)
 801a2b0:	2201      	movs	r2, #1
 801a2b2:	701a      	strb	r2, [r3, #0]
}
 801a2b4:	bf00      	nop
 801a2b6:	3710      	adds	r7, #16
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	bd80      	pop	{r7, pc}
 801a2bc:	2000235c 	.word	0x2000235c
 801a2c0:	20002358 	.word	0x20002358
 801a2c4:	20002350 	.word	0x20002350

0801a2c8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a2c8:	b480      	push	{r7}
 801a2ca:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a2cc:	4b02      	ldr	r3, [pc, #8]	; (801a2d8 <SUBGRF_GetOperatingMode+0x10>)
 801a2ce:	781b      	ldrb	r3, [r3, #0]
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	bc80      	pop	{r7}
 801a2d6:	4770      	bx	lr
 801a2d8:	20002350 	.word	0x20002350

0801a2dc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b082      	sub	sp, #8
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a2e8:	78fb      	ldrb	r3, [r7, #3]
 801a2ea:	461a      	mov	r2, r3
 801a2ec:	6879      	ldr	r1, [r7, #4]
 801a2ee:	2000      	movs	r0, #0
 801a2f0:	f000 ff20 	bl	801b134 <SUBGRF_WriteBuffer>
}
 801a2f4:	bf00      	nop
 801a2f6:	3708      	adds	r7, #8
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b086      	sub	sp, #24
 801a300:	af00      	add	r7, sp, #0
 801a302:	60f8      	str	r0, [r7, #12]
 801a304:	60b9      	str	r1, [r7, #8]
 801a306:	4613      	mov	r3, r2
 801a308:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a30a:	2300      	movs	r3, #0
 801a30c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a30e:	f107 0317 	add.w	r3, r7, #23
 801a312:	4619      	mov	r1, r3
 801a314:	68b8      	ldr	r0, [r7, #8]
 801a316:	f000 fe23 	bl	801af60 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a31a:	68bb      	ldr	r3, [r7, #8]
 801a31c:	781b      	ldrb	r3, [r3, #0]
 801a31e:	79fa      	ldrb	r2, [r7, #7]
 801a320:	429a      	cmp	r2, r3
 801a322:	d201      	bcs.n	801a328 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a324:	2301      	movs	r3, #1
 801a326:	e007      	b.n	801a338 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a328:	7df8      	ldrb	r0, [r7, #23]
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	781b      	ldrb	r3, [r3, #0]
 801a32e:	461a      	mov	r2, r3
 801a330:	68f9      	ldr	r1, [r7, #12]
 801a332:	f000 ff21 	bl	801b178 <SUBGRF_ReadBuffer>

    return 0;
 801a336:	2300      	movs	r3, #0
}
 801a338:	4618      	mov	r0, r3
 801a33a:	3718      	adds	r7, #24
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b084      	sub	sp, #16
 801a344:	af00      	add	r7, sp, #0
 801a346:	60f8      	str	r0, [r7, #12]
 801a348:	460b      	mov	r3, r1
 801a34a:	607a      	str	r2, [r7, #4]
 801a34c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a34e:	7afb      	ldrb	r3, [r7, #11]
 801a350:	4619      	mov	r1, r3
 801a352:	68f8      	ldr	r0, [r7, #12]
 801a354:	f7ff ffc2 	bl	801a2dc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a358:	6878      	ldr	r0, [r7, #4]
 801a35a:	f000 f91b 	bl	801a594 <SUBGRF_SetTx>
}
 801a35e:	bf00      	nop
 801a360:	3710      	adds	r7, #16
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}

0801a366 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a366:	b580      	push	{r7, lr}
 801a368:	b082      	sub	sp, #8
 801a36a:	af00      	add	r7, sp, #0
 801a36c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a36e:	2208      	movs	r2, #8
 801a370:	6879      	ldr	r1, [r7, #4]
 801a372:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801a376:	f000 fe99 	bl	801b0ac <SUBGRF_WriteRegisters>
    return 0;
 801a37a:	2300      	movs	r3, #0
}
 801a37c:	4618      	mov	r0, r3
 801a37e:	3708      	adds	r7, #8
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}

0801a384 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a384:	b580      	push	{r7, lr}
 801a386:	b084      	sub	sp, #16
 801a388:	af00      	add	r7, sp, #0
 801a38a:	4603      	mov	r3, r0
 801a38c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a38e:	88fb      	ldrh	r3, [r7, #6]
 801a390:	0a1b      	lsrs	r3, r3, #8
 801a392:	b29b      	uxth	r3, r3
 801a394:	b2db      	uxtb	r3, r3
 801a396:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a398:	88fb      	ldrh	r3, [r7, #6]
 801a39a:	b2db      	uxtb	r3, r3
 801a39c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a39e:	f000 fb6b 	bl	801aa78 <SUBGRF_GetPacketType>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d108      	bne.n	801a3ba <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a3a8:	f107 030c 	add.w	r3, r7, #12
 801a3ac:	2202      	movs	r2, #2
 801a3ae:	4619      	mov	r1, r3
 801a3b0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801a3b4:	f000 fe7a 	bl	801b0ac <SUBGRF_WriteRegisters>
            break;
 801a3b8:	e000      	b.n	801a3bc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a3ba:	bf00      	nop
    }
}
 801a3bc:	bf00      	nop
 801a3be:	3710      	adds	r7, #16
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	bd80      	pop	{r7, pc}

0801a3c4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	b084      	sub	sp, #16
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a3ce:	88fb      	ldrh	r3, [r7, #6]
 801a3d0:	0a1b      	lsrs	r3, r3, #8
 801a3d2:	b29b      	uxth	r3, r3
 801a3d4:	b2db      	uxtb	r3, r3
 801a3d6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a3d8:	88fb      	ldrh	r3, [r7, #6]
 801a3da:	b2db      	uxtb	r3, r3
 801a3dc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a3de:	f000 fb4b 	bl	801aa78 <SUBGRF_GetPacketType>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d108      	bne.n	801a3fa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a3e8:	f107 030c 	add.w	r3, r7, #12
 801a3ec:	2202      	movs	r2, #2
 801a3ee:	4619      	mov	r1, r3
 801a3f0:	f240 60be 	movw	r0, #1726	; 0x6be
 801a3f4:	f000 fe5a 	bl	801b0ac <SUBGRF_WriteRegisters>
            break;
 801a3f8:	e000      	b.n	801a3fc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a3fa:	bf00      	nop
    }
}
 801a3fc:	bf00      	nop
 801a3fe:	3710      	adds	r7, #16
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}

0801a404 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b084      	sub	sp, #16
 801a408:	af00      	add	r7, sp, #0
 801a40a:	4603      	mov	r3, r0
 801a40c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a40e:	2300      	movs	r3, #0
 801a410:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a412:	f000 fb31 	bl	801aa78 <SUBGRF_GetPacketType>
 801a416:	4603      	mov	r3, r0
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d121      	bne.n	801a460 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a41c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a420:	f000 fe30 	bl	801b084 <SUBGRF_ReadRegister>
 801a424:	4603      	mov	r3, r0
 801a426:	f023 0301 	bic.w	r3, r3, #1
 801a42a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a42c:	88fb      	ldrh	r3, [r7, #6]
 801a42e:	0a1b      	lsrs	r3, r3, #8
 801a430:	b29b      	uxth	r3, r3
 801a432:	b25b      	sxtb	r3, r3
 801a434:	f003 0301 	and.w	r3, r3, #1
 801a438:	b25a      	sxtb	r2, r3
 801a43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a43e:	4313      	orrs	r3, r2
 801a440:	b25b      	sxtb	r3, r3
 801a442:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a444:	7bfb      	ldrb	r3, [r7, #15]
 801a446:	4619      	mov	r1, r3
 801a448:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a44c:	f000 fe06 	bl	801b05c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a450:	88fb      	ldrh	r3, [r7, #6]
 801a452:	b2db      	uxtb	r3, r3
 801a454:	4619      	mov	r1, r3
 801a456:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801a45a:	f000 fdff 	bl	801b05c <SUBGRF_WriteRegister>
            break;
 801a45e:	e000      	b.n	801a462 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a460:	bf00      	nop
    }
}
 801a462:	bf00      	nop
 801a464:	3710      	adds	r7, #16
 801a466:	46bd      	mov	sp, r7
 801a468:	bd80      	pop	{r7, pc}

0801a46a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a46a:	b580      	push	{r7, lr}
 801a46c:	b082      	sub	sp, #8
 801a46e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a470:	2300      	movs	r3, #0
 801a472:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a474:	2300      	movs	r3, #0
 801a476:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a478:	2300      	movs	r3, #0
 801a47a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a47c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a480:	f000 fe00 	bl	801b084 <SUBGRF_ReadRegister>
 801a484:	4603      	mov	r3, r0
 801a486:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a488:	79fb      	ldrb	r3, [r7, #7]
 801a48a:	f023 0301 	bic.w	r3, r3, #1
 801a48e:	b2db      	uxtb	r3, r3
 801a490:	4619      	mov	r1, r3
 801a492:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a496:	f000 fde1 	bl	801b05c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a49a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a49e:	f000 fdf1 	bl	801b084 <SUBGRF_ReadRegister>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a4a6:	79bb      	ldrb	r3, [r7, #6]
 801a4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a4ac:	b2db      	uxtb	r3, r3
 801a4ae:	4619      	mov	r1, r3
 801a4b0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a4b4:	f000 fdd2 	bl	801b05c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a4b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a4bc:	f000 f88a 	bl	801a5d4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a4c0:	463b      	mov	r3, r7
 801a4c2:	2204      	movs	r2, #4
 801a4c4:	4619      	mov	r1, r3
 801a4c6:	f640 0019 	movw	r0, #2073	; 0x819
 801a4ca:	f000 fe11 	bl	801b0f0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a4ce:	2000      	movs	r0, #0
 801a4d0:	f000 f844 	bl	801a55c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a4d4:	79fb      	ldrb	r3, [r7, #7]
 801a4d6:	4619      	mov	r1, r3
 801a4d8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a4dc:	f000 fdbe 	bl	801b05c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a4e0:	79bb      	ldrb	r3, [r7, #6]
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a4e8:	f000 fdb8 	bl	801b05c <SUBGRF_WriteRegister>

    return number;
 801a4ec:	683b      	ldr	r3, [r7, #0]
}
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	3708      	adds	r7, #8
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	bd80      	pop	{r7, pc}
	...

0801a4f8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b084      	sub	sp, #16
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a500:	2000      	movs	r0, #0
 801a502:	f7f1 fee8 	bl	800c2d6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a506:	2002      	movs	r0, #2
 801a508:	f000 ff90 	bl	801b42c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a50c:	793b      	ldrb	r3, [r7, #4]
 801a50e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a512:	b2db      	uxtb	r3, r3
 801a514:	009b      	lsls	r3, r3, #2
 801a516:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a518:	793b      	ldrb	r3, [r7, #4]
 801a51a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a51e:	b2db      	uxtb	r3, r3
 801a520:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a522:	b25b      	sxtb	r3, r3
 801a524:	4313      	orrs	r3, r2
 801a526:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a528:	793b      	ldrb	r3, [r7, #4]
 801a52a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a52e:	b2db      	uxtb	r3, r3
 801a530:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a532:	4313      	orrs	r3, r2
 801a534:	b25b      	sxtb	r3, r3
 801a536:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a538:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a53a:	f107 030f 	add.w	r3, r7, #15
 801a53e:	2201      	movs	r2, #1
 801a540:	4619      	mov	r1, r3
 801a542:	2084      	movs	r0, #132	; 0x84
 801a544:	f000 fe3a 	bl	801b1bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a548:	4b03      	ldr	r3, [pc, #12]	; (801a558 <SUBGRF_SetSleep+0x60>)
 801a54a:	2200      	movs	r2, #0
 801a54c:	701a      	strb	r2, [r3, #0]
}
 801a54e:	bf00      	nop
 801a550:	3710      	adds	r7, #16
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	20002350 	.word	0x20002350

0801a55c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b082      	sub	sp, #8
 801a560:	af00      	add	r7, sp, #0
 801a562:	4603      	mov	r3, r0
 801a564:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a566:	1dfb      	adds	r3, r7, #7
 801a568:	2201      	movs	r2, #1
 801a56a:	4619      	mov	r1, r3
 801a56c:	2080      	movs	r0, #128	; 0x80
 801a56e:	f000 fe25 	bl	801b1bc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a572:	79fb      	ldrb	r3, [r7, #7]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d103      	bne.n	801a580 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a578:	4b05      	ldr	r3, [pc, #20]	; (801a590 <SUBGRF_SetStandby+0x34>)
 801a57a:	2201      	movs	r2, #1
 801a57c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a57e:	e002      	b.n	801a586 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a580:	4b03      	ldr	r3, [pc, #12]	; (801a590 <SUBGRF_SetStandby+0x34>)
 801a582:	2202      	movs	r2, #2
 801a584:	701a      	strb	r2, [r3, #0]
}
 801a586:	bf00      	nop
 801a588:	3708      	adds	r7, #8
 801a58a:	46bd      	mov	sp, r7
 801a58c:	bd80      	pop	{r7, pc}
 801a58e:	bf00      	nop
 801a590:	20002350 	.word	0x20002350

0801a594 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b084      	sub	sp, #16
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a59c:	4b0c      	ldr	r3, [pc, #48]	; (801a5d0 <SUBGRF_SetTx+0x3c>)
 801a59e:	2204      	movs	r2, #4
 801a5a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	0c1b      	lsrs	r3, r3, #16
 801a5a6:	b2db      	uxtb	r3, r3
 801a5a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	0a1b      	lsrs	r3, r3, #8
 801a5ae:	b2db      	uxtb	r3, r3
 801a5b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	b2db      	uxtb	r3, r3
 801a5b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a5b8:	f107 030c 	add.w	r3, r7, #12
 801a5bc:	2203      	movs	r2, #3
 801a5be:	4619      	mov	r1, r3
 801a5c0:	2083      	movs	r0, #131	; 0x83
 801a5c2:	f000 fdfb 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a5c6:	bf00      	nop
 801a5c8:	3710      	adds	r7, #16
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	bd80      	pop	{r7, pc}
 801a5ce:	bf00      	nop
 801a5d0:	20002350 	.word	0x20002350

0801a5d4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b084      	sub	sp, #16
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a5dc:	4b0c      	ldr	r3, [pc, #48]	; (801a610 <SUBGRF_SetRx+0x3c>)
 801a5de:	2205      	movs	r2, #5
 801a5e0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	0c1b      	lsrs	r3, r3, #16
 801a5e6:	b2db      	uxtb	r3, r3
 801a5e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	0a1b      	lsrs	r3, r3, #8
 801a5ee:	b2db      	uxtb	r3, r3
 801a5f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	b2db      	uxtb	r3, r3
 801a5f6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a5f8:	f107 030c 	add.w	r3, r7, #12
 801a5fc:	2203      	movs	r2, #3
 801a5fe:	4619      	mov	r1, r3
 801a600:	2082      	movs	r0, #130	; 0x82
 801a602:	f000 fddb 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a606:	bf00      	nop
 801a608:	3710      	adds	r7, #16
 801a60a:	46bd      	mov	sp, r7
 801a60c:	bd80      	pop	{r7, pc}
 801a60e:	bf00      	nop
 801a610:	20002350 	.word	0x20002350

0801a614 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b084      	sub	sp, #16
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a61c:	4b0e      	ldr	r3, [pc, #56]	; (801a658 <SUBGRF_SetRxBoosted+0x44>)
 801a61e:	2205      	movs	r2, #5
 801a620:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a622:	2197      	movs	r1, #151	; 0x97
 801a624:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801a628:	f000 fd18 	bl	801b05c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	0c1b      	lsrs	r3, r3, #16
 801a630:	b2db      	uxtb	r3, r3
 801a632:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	0a1b      	lsrs	r3, r3, #8
 801a638:	b2db      	uxtb	r3, r3
 801a63a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	b2db      	uxtb	r3, r3
 801a640:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a642:	f107 030c 	add.w	r3, r7, #12
 801a646:	2203      	movs	r2, #3
 801a648:	4619      	mov	r1, r3
 801a64a:	2082      	movs	r0, #130	; 0x82
 801a64c:	f000 fdb6 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a650:	bf00      	nop
 801a652:	3710      	adds	r7, #16
 801a654:	46bd      	mov	sp, r7
 801a656:	bd80      	pop	{r7, pc}
 801a658:	20002350 	.word	0x20002350

0801a65c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b084      	sub	sp, #16
 801a660:	af00      	add	r7, sp, #0
 801a662:	6078      	str	r0, [r7, #4]
 801a664:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	0c1b      	lsrs	r3, r3, #16
 801a66a:	b2db      	uxtb	r3, r3
 801a66c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	0a1b      	lsrs	r3, r3, #8
 801a672:	b2db      	uxtb	r3, r3
 801a674:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	b2db      	uxtb	r3, r3
 801a67a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a67c:	683b      	ldr	r3, [r7, #0]
 801a67e:	0c1b      	lsrs	r3, r3, #16
 801a680:	b2db      	uxtb	r3, r3
 801a682:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a684:	683b      	ldr	r3, [r7, #0]
 801a686:	0a1b      	lsrs	r3, r3, #8
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	b2db      	uxtb	r3, r3
 801a690:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a692:	f107 0308 	add.w	r3, r7, #8
 801a696:	2206      	movs	r2, #6
 801a698:	4619      	mov	r1, r3
 801a69a:	2094      	movs	r0, #148	; 0x94
 801a69c:	f000 fd8e 	bl	801b1bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a6a0:	4b03      	ldr	r3, [pc, #12]	; (801a6b0 <SUBGRF_SetRxDutyCycle+0x54>)
 801a6a2:	2206      	movs	r2, #6
 801a6a4:	701a      	strb	r2, [r3, #0]
}
 801a6a6:	bf00      	nop
 801a6a8:	3710      	adds	r7, #16
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}
 801a6ae:	bf00      	nop
 801a6b0:	20002350 	.word	0x20002350

0801a6b4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	2100      	movs	r1, #0
 801a6bc:	20c5      	movs	r0, #197	; 0xc5
 801a6be:	f000 fd7d 	bl	801b1bc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a6c2:	4b02      	ldr	r3, [pc, #8]	; (801a6cc <SUBGRF_SetCad+0x18>)
 801a6c4:	2207      	movs	r2, #7
 801a6c6:	701a      	strb	r2, [r3, #0]
}
 801a6c8:	bf00      	nop
 801a6ca:	bd80      	pop	{r7, pc}
 801a6cc:	20002350 	.word	0x20002350

0801a6d0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a6d4:	2200      	movs	r2, #0
 801a6d6:	2100      	movs	r1, #0
 801a6d8:	20d1      	movs	r0, #209	; 0xd1
 801a6da:	f000 fd6f 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a6de:	bf00      	nop
 801a6e0:	bd80      	pop	{r7, pc}

0801a6e2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a6e2:	b580      	push	{r7, lr}
 801a6e4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	2100      	movs	r1, #0
 801a6ea:	20d2      	movs	r0, #210	; 0xd2
 801a6ec:	f000 fd66 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a6f0:	bf00      	nop
 801a6f2:	bd80      	pop	{r7, pc}

0801a6f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b082      	sub	sp, #8
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a6fe:	1dfb      	adds	r3, r7, #7
 801a700:	2201      	movs	r2, #1
 801a702:	4619      	mov	r1, r3
 801a704:	209f      	movs	r0, #159	; 0x9f
 801a706:	f000 fd59 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a70a:	bf00      	nop
 801a70c:	3708      	adds	r7, #8
 801a70e:	46bd      	mov	sp, r7
 801a710:	bd80      	pop	{r7, pc}

0801a712 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a712:	b580      	push	{r7, lr}
 801a714:	b084      	sub	sp, #16
 801a716:	af00      	add	r7, sp, #0
 801a718:	4603      	mov	r3, r0
 801a71a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a71c:	1dfb      	adds	r3, r7, #7
 801a71e:	2201      	movs	r2, #1
 801a720:	4619      	mov	r1, r3
 801a722:	20a0      	movs	r0, #160	; 0xa0
 801a724:	f000 fd4a 	bl	801b1bc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a728:	79fb      	ldrb	r3, [r7, #7]
 801a72a:	2b3f      	cmp	r3, #63	; 0x3f
 801a72c:	d91c      	bls.n	801a768 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a72e:	79fb      	ldrb	r3, [r7, #7]
 801a730:	085b      	lsrs	r3, r3, #1
 801a732:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a734:	2300      	movs	r3, #0
 801a736:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a738:	2300      	movs	r3, #0
 801a73a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a73c:	e005      	b.n	801a74a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a73e:	7bfb      	ldrb	r3, [r7, #15]
 801a740:	089b      	lsrs	r3, r3, #2
 801a742:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a744:	7bbb      	ldrb	r3, [r7, #14]
 801a746:	3301      	adds	r3, #1
 801a748:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a74a:	7bfb      	ldrb	r3, [r7, #15]
 801a74c:	2b1f      	cmp	r3, #31
 801a74e:	d8f6      	bhi.n	801a73e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a750:	7bfb      	ldrb	r3, [r7, #15]
 801a752:	00db      	lsls	r3, r3, #3
 801a754:	b2da      	uxtb	r2, r3
 801a756:	7bbb      	ldrb	r3, [r7, #14]
 801a758:	4413      	add	r3, r2
 801a75a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a75c:	7b7b      	ldrb	r3, [r7, #13]
 801a75e:	4619      	mov	r1, r3
 801a760:	f240 7006 	movw	r0, #1798	; 0x706
 801a764:	f000 fc7a 	bl	801b05c <SUBGRF_WriteRegister>
    }
}
 801a768:	bf00      	nop
 801a76a:	3710      	adds	r7, #16
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}

0801a770 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b082      	sub	sp, #8
 801a774:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a776:	f7f1 fdca 	bl	800c30e <RBI_IsDCDC>
 801a77a:	4603      	mov	r3, r0
 801a77c:	2b01      	cmp	r3, #1
 801a77e:	d102      	bne.n	801a786 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a780:	2301      	movs	r3, #1
 801a782:	71fb      	strb	r3, [r7, #7]
 801a784:	e001      	b.n	801a78a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a786:	2300      	movs	r3, #0
 801a788:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a78a:	1dfb      	adds	r3, r7, #7
 801a78c:	2201      	movs	r2, #1
 801a78e:	4619      	mov	r1, r3
 801a790:	2096      	movs	r0, #150	; 0x96
 801a792:	f000 fd13 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a796:	bf00      	nop
 801a798:	3708      	adds	r7, #8
 801a79a:	46bd      	mov	sp, r7
 801a79c:	bd80      	pop	{r7, pc}

0801a79e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a79e:	b580      	push	{r7, lr}
 801a7a0:	b084      	sub	sp, #16
 801a7a2:	af00      	add	r7, sp, #0
 801a7a4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a7a6:	793b      	ldrb	r3, [r7, #4]
 801a7a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a7ac:	b2db      	uxtb	r3, r3
 801a7ae:	019b      	lsls	r3, r3, #6
 801a7b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a7b2:	793b      	ldrb	r3, [r7, #4]
 801a7b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a7b8:	b2db      	uxtb	r3, r3
 801a7ba:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a7bc:	b25b      	sxtb	r3, r3
 801a7be:	4313      	orrs	r3, r2
 801a7c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a7c2:	793b      	ldrb	r3, [r7, #4]
 801a7c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a7c8:	b2db      	uxtb	r3, r3
 801a7ca:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a7cc:	b25b      	sxtb	r3, r3
 801a7ce:	4313      	orrs	r3, r2
 801a7d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a7d2:	793b      	ldrb	r3, [r7, #4]
 801a7d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a7d8:	b2db      	uxtb	r3, r3
 801a7da:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a7dc:	b25b      	sxtb	r3, r3
 801a7de:	4313      	orrs	r3, r2
 801a7e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a7e2:	793b      	ldrb	r3, [r7, #4]
 801a7e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a7e8:	b2db      	uxtb	r3, r3
 801a7ea:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a7ec:	b25b      	sxtb	r3, r3
 801a7ee:	4313      	orrs	r3, r2
 801a7f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a7f2:	793b      	ldrb	r3, [r7, #4]
 801a7f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a7f8:	b2db      	uxtb	r3, r3
 801a7fa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a7fc:	b25b      	sxtb	r3, r3
 801a7fe:	4313      	orrs	r3, r2
 801a800:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a802:	793b      	ldrb	r3, [r7, #4]
 801a804:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a808:	b2db      	uxtb	r3, r3
 801a80a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a80c:	4313      	orrs	r3, r2
 801a80e:	b25b      	sxtb	r3, r3
 801a810:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a812:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a814:	f107 030f 	add.w	r3, r7, #15
 801a818:	2201      	movs	r2, #1
 801a81a:	4619      	mov	r1, r3
 801a81c:	2089      	movs	r0, #137	; 0x89
 801a81e:	f000 fccd 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a822:	bf00      	nop
 801a824:	3710      	adds	r7, #16
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}
	...

0801a82c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b084      	sub	sp, #16
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	4a1b      	ldr	r2, [pc, #108]	; (801a8a4 <SUBGRF_CalibrateImage+0x78>)
 801a838:	4293      	cmp	r3, r2
 801a83a:	d904      	bls.n	801a846 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a83c:	23e1      	movs	r3, #225	; 0xe1
 801a83e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a840:	23e9      	movs	r3, #233	; 0xe9
 801a842:	737b      	strb	r3, [r7, #13]
 801a844:	e022      	b.n	801a88c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	4a17      	ldr	r2, [pc, #92]	; (801a8a8 <SUBGRF_CalibrateImage+0x7c>)
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d904      	bls.n	801a858 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a84e:	23d7      	movs	r3, #215	; 0xd7
 801a850:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a852:	23db      	movs	r3, #219	; 0xdb
 801a854:	737b      	strb	r3, [r7, #13]
 801a856:	e019      	b.n	801a88c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	4a14      	ldr	r2, [pc, #80]	; (801a8ac <SUBGRF_CalibrateImage+0x80>)
 801a85c:	4293      	cmp	r3, r2
 801a85e:	d904      	bls.n	801a86a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a860:	23c1      	movs	r3, #193	; 0xc1
 801a862:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a864:	23c5      	movs	r3, #197	; 0xc5
 801a866:	737b      	strb	r3, [r7, #13]
 801a868:	e010      	b.n	801a88c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	4a10      	ldr	r2, [pc, #64]	; (801a8b0 <SUBGRF_CalibrateImage+0x84>)
 801a86e:	4293      	cmp	r3, r2
 801a870:	d904      	bls.n	801a87c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a872:	2375      	movs	r3, #117	; 0x75
 801a874:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a876:	2381      	movs	r3, #129	; 0x81
 801a878:	737b      	strb	r3, [r7, #13]
 801a87a:	e007      	b.n	801a88c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	4a0d      	ldr	r2, [pc, #52]	; (801a8b4 <SUBGRF_CalibrateImage+0x88>)
 801a880:	4293      	cmp	r3, r2
 801a882:	d903      	bls.n	801a88c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a884:	236b      	movs	r3, #107	; 0x6b
 801a886:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a888:	236f      	movs	r3, #111	; 0x6f
 801a88a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a88c:	f107 030c 	add.w	r3, r7, #12
 801a890:	2202      	movs	r2, #2
 801a892:	4619      	mov	r1, r3
 801a894:	2098      	movs	r0, #152	; 0x98
 801a896:	f000 fc91 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a89a:	bf00      	nop
 801a89c:	3710      	adds	r7, #16
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	bd80      	pop	{r7, pc}
 801a8a2:	bf00      	nop
 801a8a4:	35a4e900 	.word	0x35a4e900
 801a8a8:	32a9f880 	.word	0x32a9f880
 801a8ac:	2de54480 	.word	0x2de54480
 801a8b0:	1b6b0b00 	.word	0x1b6b0b00
 801a8b4:	1954fc40 	.word	0x1954fc40

0801a8b8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a8b8:	b590      	push	{r4, r7, lr}
 801a8ba:	b085      	sub	sp, #20
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	4604      	mov	r4, r0
 801a8c0:	4608      	mov	r0, r1
 801a8c2:	4611      	mov	r1, r2
 801a8c4:	461a      	mov	r2, r3
 801a8c6:	4623      	mov	r3, r4
 801a8c8:	71fb      	strb	r3, [r7, #7]
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	71bb      	strb	r3, [r7, #6]
 801a8ce:	460b      	mov	r3, r1
 801a8d0:	717b      	strb	r3, [r7, #5]
 801a8d2:	4613      	mov	r3, r2
 801a8d4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a8d6:	79fb      	ldrb	r3, [r7, #7]
 801a8d8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a8da:	79bb      	ldrb	r3, [r7, #6]
 801a8dc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a8de:	797b      	ldrb	r3, [r7, #5]
 801a8e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a8e2:	793b      	ldrb	r3, [r7, #4]
 801a8e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a8e6:	f107 030c 	add.w	r3, r7, #12
 801a8ea:	2204      	movs	r2, #4
 801a8ec:	4619      	mov	r1, r3
 801a8ee:	2095      	movs	r0, #149	; 0x95
 801a8f0:	f000 fc64 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a8f4:	bf00      	nop
 801a8f6:	3714      	adds	r7, #20
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	bd90      	pop	{r4, r7, pc}

0801a8fc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a8fc:	b590      	push	{r4, r7, lr}
 801a8fe:	b085      	sub	sp, #20
 801a900:	af00      	add	r7, sp, #0
 801a902:	4604      	mov	r4, r0
 801a904:	4608      	mov	r0, r1
 801a906:	4611      	mov	r1, r2
 801a908:	461a      	mov	r2, r3
 801a90a:	4623      	mov	r3, r4
 801a90c:	80fb      	strh	r3, [r7, #6]
 801a90e:	4603      	mov	r3, r0
 801a910:	80bb      	strh	r3, [r7, #4]
 801a912:	460b      	mov	r3, r1
 801a914:	807b      	strh	r3, [r7, #2]
 801a916:	4613      	mov	r3, r2
 801a918:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a91a:	88fb      	ldrh	r3, [r7, #6]
 801a91c:	0a1b      	lsrs	r3, r3, #8
 801a91e:	b29b      	uxth	r3, r3
 801a920:	b2db      	uxtb	r3, r3
 801a922:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a924:	88fb      	ldrh	r3, [r7, #6]
 801a926:	b2db      	uxtb	r3, r3
 801a928:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a92a:	88bb      	ldrh	r3, [r7, #4]
 801a92c:	0a1b      	lsrs	r3, r3, #8
 801a92e:	b29b      	uxth	r3, r3
 801a930:	b2db      	uxtb	r3, r3
 801a932:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a934:	88bb      	ldrh	r3, [r7, #4]
 801a936:	b2db      	uxtb	r3, r3
 801a938:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a93a:	887b      	ldrh	r3, [r7, #2]
 801a93c:	0a1b      	lsrs	r3, r3, #8
 801a93e:	b29b      	uxth	r3, r3
 801a940:	b2db      	uxtb	r3, r3
 801a942:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a944:	887b      	ldrh	r3, [r7, #2]
 801a946:	b2db      	uxtb	r3, r3
 801a948:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a94a:	883b      	ldrh	r3, [r7, #0]
 801a94c:	0a1b      	lsrs	r3, r3, #8
 801a94e:	b29b      	uxth	r3, r3
 801a950:	b2db      	uxtb	r3, r3
 801a952:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a954:	883b      	ldrh	r3, [r7, #0]
 801a956:	b2db      	uxtb	r3, r3
 801a958:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a95a:	f107 0308 	add.w	r3, r7, #8
 801a95e:	2208      	movs	r2, #8
 801a960:	4619      	mov	r1, r3
 801a962:	2008      	movs	r0, #8
 801a964:	f000 fc2a 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a968:	bf00      	nop
 801a96a:	3714      	adds	r7, #20
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd90      	pop	{r4, r7, pc}

0801a970 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b084      	sub	sp, #16
 801a974:	af00      	add	r7, sp, #0
 801a976:	4603      	mov	r3, r0
 801a978:	6039      	str	r1, [r7, #0]
 801a97a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a97c:	79fb      	ldrb	r3, [r7, #7]
 801a97e:	f003 0307 	and.w	r3, r3, #7
 801a982:	b2db      	uxtb	r3, r3
 801a984:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a986:	683b      	ldr	r3, [r7, #0]
 801a988:	0c1b      	lsrs	r3, r3, #16
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a98e:	683b      	ldr	r3, [r7, #0]
 801a990:	0a1b      	lsrs	r3, r3, #8
 801a992:	b2db      	uxtb	r3, r3
 801a994:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a996:	683b      	ldr	r3, [r7, #0]
 801a998:	b2db      	uxtb	r3, r3
 801a99a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a99c:	f107 030c 	add.w	r3, r7, #12
 801a9a0:	2204      	movs	r2, #4
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	2097      	movs	r0, #151	; 0x97
 801a9a6:	f000 fc09 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801a9aa:	bf00      	nop
 801a9ac:	3710      	adds	r7, #16
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd80      	pop	{r7, pc}
	...

0801a9b4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a9b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a9b8:	b084      	sub	sp, #16
 801a9ba:	af00      	add	r7, sp, #0
 801a9bc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a9be:	2300      	movs	r3, #0
 801a9c0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a9c2:	4b1d      	ldr	r3, [pc, #116]	; (801aa38 <SUBGRF_SetRfFrequency+0x84>)
 801a9c4:	781b      	ldrb	r3, [r3, #0]
 801a9c6:	f083 0301 	eor.w	r3, r3, #1
 801a9ca:	b2db      	uxtb	r3, r3
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d005      	beq.n	801a9dc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a9d0:	6878      	ldr	r0, [r7, #4]
 801a9d2:	f7ff ff2b 	bl	801a82c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a9d6:	4b18      	ldr	r3, [pc, #96]	; (801aa38 <SUBGRF_SetRfFrequency+0x84>)
 801a9d8:	2201      	movs	r2, #1
 801a9da:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	2200      	movs	r2, #0
 801a9e0:	461c      	mov	r4, r3
 801a9e2:	4615      	mov	r5, r2
 801a9e4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a9e8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a9ec:	4a13      	ldr	r2, [pc, #76]	; (801aa3c <SUBGRF_SetRfFrequency+0x88>)
 801a9ee:	f04f 0300 	mov.w	r3, #0
 801a9f2:	4640      	mov	r0, r8
 801a9f4:	4649      	mov	r1, r9
 801a9f6:	f7e6 f9c9 	bl	8000d8c <__aeabi_uldivmod>
 801a9fa:	4602      	mov	r2, r0
 801a9fc:	460b      	mov	r3, r1
 801a9fe:	4613      	mov	r3, r2
 801aa00:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	0e1b      	lsrs	r3, r3, #24
 801aa06:	b2db      	uxtb	r3, r3
 801aa08:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	0c1b      	lsrs	r3, r3, #16
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	0a1b      	lsrs	r3, r3, #8
 801aa16:	b2db      	uxtb	r3, r3
 801aa18:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	b2db      	uxtb	r3, r3
 801aa1e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801aa20:	f107 0308 	add.w	r3, r7, #8
 801aa24:	2204      	movs	r2, #4
 801aa26:	4619      	mov	r1, r3
 801aa28:	2086      	movs	r0, #134	; 0x86
 801aa2a:	f000 fbc7 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801aa2e:	bf00      	nop
 801aa30:	3710      	adds	r7, #16
 801aa32:	46bd      	mov	sp, r7
 801aa34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801aa38:	20002358 	.word	0x20002358
 801aa3c:	01e84800 	.word	0x01e84800

0801aa40 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b082      	sub	sp, #8
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	4603      	mov	r3, r0
 801aa48:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801aa4a:	79fa      	ldrb	r2, [r7, #7]
 801aa4c:	4b09      	ldr	r3, [pc, #36]	; (801aa74 <SUBGRF_SetPacketType+0x34>)
 801aa4e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801aa50:	79fb      	ldrb	r3, [r7, #7]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d104      	bne.n	801aa60 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801aa56:	2100      	movs	r1, #0
 801aa58:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801aa5c:	f000 fafe 	bl	801b05c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801aa60:	1dfb      	adds	r3, r7, #7
 801aa62:	2201      	movs	r2, #1
 801aa64:	4619      	mov	r1, r3
 801aa66:	208a      	movs	r0, #138	; 0x8a
 801aa68:	f000 fba8 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801aa6c:	bf00      	nop
 801aa6e:	3708      	adds	r7, #8
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}
 801aa74:	20002351 	.word	0x20002351

0801aa78 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801aa78:	b480      	push	{r7}
 801aa7a:	af00      	add	r7, sp, #0
    return PacketType;
 801aa7c:	4b02      	ldr	r3, [pc, #8]	; (801aa88 <SUBGRF_GetPacketType+0x10>)
 801aa7e:	781b      	ldrb	r3, [r3, #0]
}
 801aa80:	4618      	mov	r0, r3
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bc80      	pop	{r7}
 801aa86:	4770      	bx	lr
 801aa88:	20002351 	.word	0x20002351

0801aa8c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b084      	sub	sp, #16
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	4603      	mov	r3, r0
 801aa94:	71fb      	strb	r3, [r7, #7]
 801aa96:	460b      	mov	r3, r1
 801aa98:	71bb      	strb	r3, [r7, #6]
 801aa9a:	4613      	mov	r3, r2
 801aa9c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801aa9e:	79fb      	ldrb	r3, [r7, #7]
 801aaa0:	2b01      	cmp	r3, #1
 801aaa2:	d149      	bne.n	801ab38 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	f7f1 fc39 	bl	800c31c <RBI_GetRFOMaxPowerConfig>
 801aaaa:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801aaac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aab0:	68fa      	ldr	r2, [r7, #12]
 801aab2:	429a      	cmp	r2, r3
 801aab4:	da01      	bge.n	801aaba <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	2b0e      	cmp	r3, #14
 801aabe:	d10e      	bne.n	801aade <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801aac0:	2301      	movs	r3, #1
 801aac2:	2201      	movs	r2, #1
 801aac4:	2100      	movs	r1, #0
 801aac6:	2004      	movs	r0, #4
 801aac8:	f7ff fef6 	bl	801a8b8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aacc:	79ba      	ldrb	r2, [r7, #6]
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	b2db      	uxtb	r3, r3
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	b2db      	uxtb	r3, r3
 801aad6:	330e      	adds	r3, #14
 801aad8:	b2db      	uxtb	r3, r3
 801aada:	71bb      	strb	r3, [r7, #6]
 801aadc:	e01f      	b.n	801ab1e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	2b0a      	cmp	r3, #10
 801aae2:	d10e      	bne.n	801ab02 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801aae4:	2301      	movs	r3, #1
 801aae6:	2201      	movs	r2, #1
 801aae8:	2100      	movs	r1, #0
 801aaea:	2001      	movs	r0, #1
 801aaec:	f7ff fee4 	bl	801a8b8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801aaf0:	79ba      	ldrb	r2, [r7, #6]
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	b2db      	uxtb	r3, r3
 801aaf6:	1ad3      	subs	r3, r2, r3
 801aaf8:	b2db      	uxtb	r3, r3
 801aafa:	330d      	adds	r3, #13
 801aafc:	b2db      	uxtb	r3, r3
 801aafe:	71bb      	strb	r3, [r7, #6]
 801ab00:	e00d      	b.n	801ab1e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801ab02:	2301      	movs	r3, #1
 801ab04:	2201      	movs	r2, #1
 801ab06:	2100      	movs	r1, #0
 801ab08:	2006      	movs	r0, #6
 801ab0a:	f7ff fed5 	bl	801a8b8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ab0e:	79ba      	ldrb	r2, [r7, #6]
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	b2db      	uxtb	r3, r3
 801ab14:	1ad3      	subs	r3, r2, r3
 801ab16:	b2db      	uxtb	r3, r3
 801ab18:	330e      	adds	r3, #14
 801ab1a:	b2db      	uxtb	r3, r3
 801ab1c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801ab1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab22:	f113 0f11 	cmn.w	r3, #17
 801ab26:	da01      	bge.n	801ab2c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801ab28:	23ef      	movs	r3, #239	; 0xef
 801ab2a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801ab2c:	2118      	movs	r1, #24
 801ab2e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ab32:	f000 fa93 	bl	801b05c <SUBGRF_WriteRegister>
 801ab36:	e067      	b.n	801ac08 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801ab38:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ab3c:	f000 faa2 	bl	801b084 <SUBGRF_ReadRegister>
 801ab40:	4603      	mov	r3, r0
 801ab42:	f043 031e 	orr.w	r3, r3, #30
 801ab46:	b2db      	uxtb	r3, r3
 801ab48:	4619      	mov	r1, r3
 801ab4a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ab4e:	f000 fa85 	bl	801b05c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801ab52:	2001      	movs	r0, #1
 801ab54:	f7f1 fbe2 	bl	800c31c <RBI_GetRFOMaxPowerConfig>
 801ab58:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801ab5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab5e:	68fa      	ldr	r2, [r7, #12]
 801ab60:	429a      	cmp	r2, r3
 801ab62:	da01      	bge.n	801ab68 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	2b14      	cmp	r3, #20
 801ab6c:	d10e      	bne.n	801ab8c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801ab6e:	2301      	movs	r3, #1
 801ab70:	2200      	movs	r2, #0
 801ab72:	2105      	movs	r1, #5
 801ab74:	2003      	movs	r0, #3
 801ab76:	f7ff fe9f 	bl	801a8b8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ab7a:	79ba      	ldrb	r2, [r7, #6]
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	b2db      	uxtb	r3, r3
 801ab80:	1ad3      	subs	r3, r2, r3
 801ab82:	b2db      	uxtb	r3, r3
 801ab84:	3316      	adds	r3, #22
 801ab86:	b2db      	uxtb	r3, r3
 801ab88:	71bb      	strb	r3, [r7, #6]
 801ab8a:	e031      	b.n	801abf0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	2b11      	cmp	r3, #17
 801ab90:	d10e      	bne.n	801abb0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801ab92:	2301      	movs	r3, #1
 801ab94:	2200      	movs	r2, #0
 801ab96:	2103      	movs	r1, #3
 801ab98:	2002      	movs	r0, #2
 801ab9a:	f7ff fe8d 	bl	801a8b8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ab9e:	79ba      	ldrb	r2, [r7, #6]
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	b2db      	uxtb	r3, r3
 801aba4:	1ad3      	subs	r3, r2, r3
 801aba6:	b2db      	uxtb	r3, r3
 801aba8:	3316      	adds	r3, #22
 801abaa:	b2db      	uxtb	r3, r3
 801abac:	71bb      	strb	r3, [r7, #6]
 801abae:	e01f      	b.n	801abf0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	2b0e      	cmp	r3, #14
 801abb4:	d10e      	bne.n	801abd4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801abb6:	2301      	movs	r3, #1
 801abb8:	2200      	movs	r2, #0
 801abba:	2102      	movs	r1, #2
 801abbc:	2002      	movs	r0, #2
 801abbe:	f7ff fe7b 	bl	801a8b8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801abc2:	79ba      	ldrb	r2, [r7, #6]
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	b2db      	uxtb	r3, r3
 801abc8:	1ad3      	subs	r3, r2, r3
 801abca:	b2db      	uxtb	r3, r3
 801abcc:	330e      	adds	r3, #14
 801abce:	b2db      	uxtb	r3, r3
 801abd0:	71bb      	strb	r3, [r7, #6]
 801abd2:	e00d      	b.n	801abf0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801abd4:	2301      	movs	r3, #1
 801abd6:	2200      	movs	r2, #0
 801abd8:	2107      	movs	r1, #7
 801abda:	2004      	movs	r0, #4
 801abdc:	f7ff fe6c 	bl	801a8b8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801abe0:	79ba      	ldrb	r2, [r7, #6]
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	b2db      	uxtb	r3, r3
 801abe6:	1ad3      	subs	r3, r2, r3
 801abe8:	b2db      	uxtb	r3, r3
 801abea:	3316      	adds	r3, #22
 801abec:	b2db      	uxtb	r3, r3
 801abee:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801abf0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801abf4:	f113 0f09 	cmn.w	r3, #9
 801abf8:	da01      	bge.n	801abfe <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801abfa:	23f7      	movs	r3, #247	; 0xf7
 801abfc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801abfe:	2138      	movs	r1, #56	; 0x38
 801ac00:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ac04:	f000 fa2a 	bl	801b05c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ac08:	79bb      	ldrb	r3, [r7, #6]
 801ac0a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ac0c:	797b      	ldrb	r3, [r7, #5]
 801ac0e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ac10:	f107 0308 	add.w	r3, r7, #8
 801ac14:	2202      	movs	r2, #2
 801ac16:	4619      	mov	r1, r3
 801ac18:	208e      	movs	r0, #142	; 0x8e
 801ac1a:	f000 facf 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801ac1e:	bf00      	nop
 801ac20:	3710      	adds	r7, #16
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}
	...

0801ac28 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ac28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ac2c:	b086      	sub	sp, #24
 801ac2e:	af00      	add	r7, sp, #0
 801ac30:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801ac32:	2300      	movs	r3, #0
 801ac34:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ac36:	4a61      	ldr	r2, [pc, #388]	; (801adbc <SUBGRF_SetModulationParams+0x194>)
 801ac38:	f107 0308 	add.w	r3, r7, #8
 801ac3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ac40:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	781a      	ldrb	r2, [r3, #0]
 801ac48:	4b5d      	ldr	r3, [pc, #372]	; (801adc0 <SUBGRF_SetModulationParams+0x198>)
 801ac4a:	781b      	ldrb	r3, [r3, #0]
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d004      	beq.n	801ac5a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	781b      	ldrb	r3, [r3, #0]
 801ac54:	4618      	mov	r0, r3
 801ac56:	f7ff fef3 	bl	801aa40 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	781b      	ldrb	r3, [r3, #0]
 801ac5e:	2b03      	cmp	r3, #3
 801ac60:	f200 80a5 	bhi.w	801adae <SUBGRF_SetModulationParams+0x186>
 801ac64:	a201      	add	r2, pc, #4	; (adr r2, 801ac6c <SUBGRF_SetModulationParams+0x44>)
 801ac66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac6a:	bf00      	nop
 801ac6c:	0801ac7d 	.word	0x0801ac7d
 801ac70:	0801ad3d 	.word	0x0801ad3d
 801ac74:	0801acff 	.word	0x0801acff
 801ac78:	0801ad6b 	.word	0x0801ad6b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801ac7c:	2308      	movs	r3, #8
 801ac7e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	685b      	ldr	r3, [r3, #4]
 801ac84:	4a4f      	ldr	r2, [pc, #316]	; (801adc4 <SUBGRF_SetModulationParams+0x19c>)
 801ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 801ac8a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ac8c:	697b      	ldr	r3, [r7, #20]
 801ac8e:	0c1b      	lsrs	r3, r3, #16
 801ac90:	b2db      	uxtb	r3, r3
 801ac92:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	0a1b      	lsrs	r3, r3, #8
 801ac98:	b2db      	uxtb	r3, r3
 801ac9a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	b2db      	uxtb	r3, r3
 801aca0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	7b1b      	ldrb	r3, [r3, #12]
 801aca6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	7b5b      	ldrb	r3, [r3, #13]
 801acac:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	689b      	ldr	r3, [r3, #8]
 801acb2:	2200      	movs	r2, #0
 801acb4:	461c      	mov	r4, r3
 801acb6:	4615      	mov	r5, r2
 801acb8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801acbc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801acc0:	4a41      	ldr	r2, [pc, #260]	; (801adc8 <SUBGRF_SetModulationParams+0x1a0>)
 801acc2:	f04f 0300 	mov.w	r3, #0
 801acc6:	4640      	mov	r0, r8
 801acc8:	4649      	mov	r1, r9
 801acca:	f7e6 f85f 	bl	8000d8c <__aeabi_uldivmod>
 801acce:	4602      	mov	r2, r0
 801acd0:	460b      	mov	r3, r1
 801acd2:	4613      	mov	r3, r2
 801acd4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801acd6:	697b      	ldr	r3, [r7, #20]
 801acd8:	0c1b      	lsrs	r3, r3, #16
 801acda:	b2db      	uxtb	r3, r3
 801acdc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801acde:	697b      	ldr	r3, [r7, #20]
 801ace0:	0a1b      	lsrs	r3, r3, #8
 801ace2:	b2db      	uxtb	r3, r3
 801ace4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ace6:	697b      	ldr	r3, [r7, #20]
 801ace8:	b2db      	uxtb	r3, r3
 801acea:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801acec:	7cfb      	ldrb	r3, [r7, #19]
 801acee:	b29a      	uxth	r2, r3
 801acf0:	f107 0308 	add.w	r3, r7, #8
 801acf4:	4619      	mov	r1, r3
 801acf6:	208b      	movs	r0, #139	; 0x8b
 801acf8:	f000 fa60 	bl	801b1bc <SUBGRF_WriteCommand>
        break;
 801acfc:	e058      	b.n	801adb0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801acfe:	2304      	movs	r3, #4
 801ad00:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	691b      	ldr	r3, [r3, #16]
 801ad06:	4a2f      	ldr	r2, [pc, #188]	; (801adc4 <SUBGRF_SetModulationParams+0x19c>)
 801ad08:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad0c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ad0e:	697b      	ldr	r3, [r7, #20]
 801ad10:	0c1b      	lsrs	r3, r3, #16
 801ad12:	b2db      	uxtb	r3, r3
 801ad14:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ad16:	697b      	ldr	r3, [r7, #20]
 801ad18:	0a1b      	lsrs	r3, r3, #8
 801ad1a:	b2db      	uxtb	r3, r3
 801ad1c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	b2db      	uxtb	r3, r3
 801ad22:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	7d1b      	ldrb	r3, [r3, #20]
 801ad28:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ad2a:	7cfb      	ldrb	r3, [r7, #19]
 801ad2c:	b29a      	uxth	r2, r3
 801ad2e:	f107 0308 	add.w	r3, r7, #8
 801ad32:	4619      	mov	r1, r3
 801ad34:	208b      	movs	r0, #139	; 0x8b
 801ad36:	f000 fa41 	bl	801b1bc <SUBGRF_WriteCommand>
        break;
 801ad3a:	e039      	b.n	801adb0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ad3c:	2304      	movs	r3, #4
 801ad3e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	7e1b      	ldrb	r3, [r3, #24]
 801ad44:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	7e5b      	ldrb	r3, [r3, #25]
 801ad4a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	7e9b      	ldrb	r3, [r3, #26]
 801ad50:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	7edb      	ldrb	r3, [r3, #27]
 801ad56:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ad58:	7cfb      	ldrb	r3, [r7, #19]
 801ad5a:	b29a      	uxth	r2, r3
 801ad5c:	f107 0308 	add.w	r3, r7, #8
 801ad60:	4619      	mov	r1, r3
 801ad62:	208b      	movs	r0, #139	; 0x8b
 801ad64:	f000 fa2a 	bl	801b1bc <SUBGRF_WriteCommand>

        break;
 801ad68:	e022      	b.n	801adb0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ad6a:	2305      	movs	r3, #5
 801ad6c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	685b      	ldr	r3, [r3, #4]
 801ad72:	4a14      	ldr	r2, [pc, #80]	; (801adc4 <SUBGRF_SetModulationParams+0x19c>)
 801ad74:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad78:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ad7a:	697b      	ldr	r3, [r7, #20]
 801ad7c:	0c1b      	lsrs	r3, r3, #16
 801ad7e:	b2db      	uxtb	r3, r3
 801ad80:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	0a1b      	lsrs	r3, r3, #8
 801ad86:	b2db      	uxtb	r3, r3
 801ad88:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ad8a:	697b      	ldr	r3, [r7, #20]
 801ad8c:	b2db      	uxtb	r3, r3
 801ad8e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	7b1b      	ldrb	r3, [r3, #12]
 801ad94:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	7b5b      	ldrb	r3, [r3, #13]
 801ad9a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ad9c:	7cfb      	ldrb	r3, [r7, #19]
 801ad9e:	b29a      	uxth	r2, r3
 801ada0:	f107 0308 	add.w	r3, r7, #8
 801ada4:	4619      	mov	r1, r3
 801ada6:	208b      	movs	r0, #139	; 0x8b
 801ada8:	f000 fa08 	bl	801b1bc <SUBGRF_WriteCommand>
        break;
 801adac:	e000      	b.n	801adb0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801adae:	bf00      	nop
    }
}
 801adb0:	bf00      	nop
 801adb2:	3718      	adds	r7, #24
 801adb4:	46bd      	mov	sp, r7
 801adb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801adba:	bf00      	nop
 801adbc:	0801d43c 	.word	0x0801d43c
 801adc0:	20002351 	.word	0x20002351
 801adc4:	3d090000 	.word	0x3d090000
 801adc8:	01e84800 	.word	0x01e84800

0801adcc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b086      	sub	sp, #24
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801add4:	2300      	movs	r3, #0
 801add6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801add8:	4a48      	ldr	r2, [pc, #288]	; (801aefc <SUBGRF_SetPacketParams+0x130>)
 801adda:	f107 030c 	add.w	r3, r7, #12
 801adde:	ca07      	ldmia	r2, {r0, r1, r2}
 801ade0:	c303      	stmia	r3!, {r0, r1}
 801ade2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	781a      	ldrb	r2, [r3, #0]
 801ade8:	4b45      	ldr	r3, [pc, #276]	; (801af00 <SUBGRF_SetPacketParams+0x134>)
 801adea:	781b      	ldrb	r3, [r3, #0]
 801adec:	429a      	cmp	r2, r3
 801adee:	d004      	beq.n	801adfa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	781b      	ldrb	r3, [r3, #0]
 801adf4:	4618      	mov	r0, r3
 801adf6:	f7ff fe23 	bl	801aa40 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	781b      	ldrb	r3, [r3, #0]
 801adfe:	2b03      	cmp	r3, #3
 801ae00:	d878      	bhi.n	801aef4 <SUBGRF_SetPacketParams+0x128>
 801ae02:	a201      	add	r2, pc, #4	; (adr r2, 801ae08 <SUBGRF_SetPacketParams+0x3c>)
 801ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae08:	0801ae19 	.word	0x0801ae19
 801ae0c:	0801aea9 	.word	0x0801aea9
 801ae10:	0801ae9d 	.word	0x0801ae9d
 801ae14:	0801ae19 	.word	0x0801ae19
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	7a5b      	ldrb	r3, [r3, #9]
 801ae1c:	2bf1      	cmp	r3, #241	; 0xf1
 801ae1e:	d10a      	bne.n	801ae36 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801ae20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae24:	f7ff faae 	bl	801a384 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801ae28:	f248 0005 	movw	r0, #32773	; 0x8005
 801ae2c:	f7ff faca 	bl	801a3c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801ae30:	2302      	movs	r3, #2
 801ae32:	75bb      	strb	r3, [r7, #22]
 801ae34:	e011      	b.n	801ae5a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	7a5b      	ldrb	r3, [r3, #9]
 801ae3a:	2bf2      	cmp	r3, #242	; 0xf2
 801ae3c:	d10a      	bne.n	801ae54 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801ae3e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801ae42:	f7ff fa9f 	bl	801a384 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801ae46:	f241 0021 	movw	r0, #4129	; 0x1021
 801ae4a:	f7ff fabb 	bl	801a3c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801ae4e:	2306      	movs	r3, #6
 801ae50:	75bb      	strb	r3, [r7, #22]
 801ae52:	e002      	b.n	801ae5a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	7a5b      	ldrb	r3, [r3, #9]
 801ae58:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801ae5a:	2309      	movs	r3, #9
 801ae5c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	885b      	ldrh	r3, [r3, #2]
 801ae62:	0a1b      	lsrs	r3, r3, #8
 801ae64:	b29b      	uxth	r3, r3
 801ae66:	b2db      	uxtb	r3, r3
 801ae68:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	885b      	ldrh	r3, [r3, #2]
 801ae6e:	b2db      	uxtb	r3, r3
 801ae70:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	791b      	ldrb	r3, [r3, #4]
 801ae76:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	795b      	ldrb	r3, [r3, #5]
 801ae7c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	799b      	ldrb	r3, [r3, #6]
 801ae82:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	79db      	ldrb	r3, [r3, #7]
 801ae88:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	7a1b      	ldrb	r3, [r3, #8]
 801ae8e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ae90:	7dbb      	ldrb	r3, [r7, #22]
 801ae92:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	7a9b      	ldrb	r3, [r3, #10]
 801ae98:	753b      	strb	r3, [r7, #20]
        break;
 801ae9a:	e022      	b.n	801aee2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	7b1b      	ldrb	r3, [r3, #12]
 801aea4:	733b      	strb	r3, [r7, #12]
        break;
 801aea6:	e01c      	b.n	801aee2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801aea8:	2306      	movs	r3, #6
 801aeaa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	89db      	ldrh	r3, [r3, #14]
 801aeb0:	0a1b      	lsrs	r3, r3, #8
 801aeb2:	b29b      	uxth	r3, r3
 801aeb4:	b2db      	uxtb	r3, r3
 801aeb6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	89db      	ldrh	r3, [r3, #14]
 801aebc:	b2db      	uxtb	r3, r3
 801aebe:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	7c1a      	ldrb	r2, [r3, #16]
 801aec4:	4b0f      	ldr	r3, [pc, #60]	; (801af04 <SUBGRF_SetPacketParams+0x138>)
 801aec6:	4611      	mov	r1, r2
 801aec8:	7019      	strb	r1, [r3, #0]
 801aeca:	4613      	mov	r3, r2
 801aecc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	7c5b      	ldrb	r3, [r3, #17]
 801aed2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	7c9b      	ldrb	r3, [r3, #18]
 801aed8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	7cdb      	ldrb	r3, [r3, #19]
 801aede:	747b      	strb	r3, [r7, #17]
        break;
 801aee0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801aee2:	7dfb      	ldrb	r3, [r7, #23]
 801aee4:	b29a      	uxth	r2, r3
 801aee6:	f107 030c 	add.w	r3, r7, #12
 801aeea:	4619      	mov	r1, r3
 801aeec:	208c      	movs	r0, #140	; 0x8c
 801aeee:	f000 f965 	bl	801b1bc <SUBGRF_WriteCommand>
 801aef2:	e000      	b.n	801aef6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801aef4:	bf00      	nop
}
 801aef6:	3718      	adds	r7, #24
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}
 801aefc:	0801d444 	.word	0x0801d444
 801af00:	20002351 	.word	0x20002351
 801af04:	20002352 	.word	0x20002352

0801af08 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b084      	sub	sp, #16
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	4603      	mov	r3, r0
 801af10:	460a      	mov	r2, r1
 801af12:	71fb      	strb	r3, [r7, #7]
 801af14:	4613      	mov	r3, r2
 801af16:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801af18:	79fb      	ldrb	r3, [r7, #7]
 801af1a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801af1c:	79bb      	ldrb	r3, [r7, #6]
 801af1e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801af20:	f107 030c 	add.w	r3, r7, #12
 801af24:	2202      	movs	r2, #2
 801af26:	4619      	mov	r1, r3
 801af28:	208f      	movs	r0, #143	; 0x8f
 801af2a:	f000 f947 	bl	801b1bc <SUBGRF_WriteCommand>
}
 801af2e:	bf00      	nop
 801af30:	3710      	adds	r7, #16
 801af32:	46bd      	mov	sp, r7
 801af34:	bd80      	pop	{r7, pc}

0801af36 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801af36:	b580      	push	{r7, lr}
 801af38:	b082      	sub	sp, #8
 801af3a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801af3c:	2300      	movs	r3, #0
 801af3e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801af40:	1d3b      	adds	r3, r7, #4
 801af42:	2201      	movs	r2, #1
 801af44:	4619      	mov	r1, r3
 801af46:	2015      	movs	r0, #21
 801af48:	f000 f95a 	bl	801b200 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801af4c:	793b      	ldrb	r3, [r7, #4]
 801af4e:	425b      	negs	r3, r3
 801af50:	105b      	asrs	r3, r3, #1
 801af52:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801af54:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801af58:	4618      	mov	r0, r3
 801af5a:	3708      	adds	r7, #8
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}

0801af60 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801af60:	b580      	push	{r7, lr}
 801af62:	b084      	sub	sp, #16
 801af64:	af00      	add	r7, sp, #0
 801af66:	6078      	str	r0, [r7, #4]
 801af68:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801af6a:	f107 030c 	add.w	r3, r7, #12
 801af6e:	2202      	movs	r2, #2
 801af70:	4619      	mov	r1, r3
 801af72:	2013      	movs	r0, #19
 801af74:	f000 f944 	bl	801b200 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801af78:	f7ff fd7e 	bl	801aa78 <SUBGRF_GetPacketType>
 801af7c:	4603      	mov	r3, r0
 801af7e:	2b01      	cmp	r3, #1
 801af80:	d10d      	bne.n	801af9e <SUBGRF_GetRxBufferStatus+0x3e>
 801af82:	4b0c      	ldr	r3, [pc, #48]	; (801afb4 <SUBGRF_GetRxBufferStatus+0x54>)
 801af84:	781b      	ldrb	r3, [r3, #0]
 801af86:	b2db      	uxtb	r3, r3
 801af88:	2b01      	cmp	r3, #1
 801af8a:	d108      	bne.n	801af9e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801af8c:	f240 7002 	movw	r0, #1794	; 0x702
 801af90:	f000 f878 	bl	801b084 <SUBGRF_ReadRegister>
 801af94:	4603      	mov	r3, r0
 801af96:	461a      	mov	r2, r3
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	701a      	strb	r2, [r3, #0]
 801af9c:	e002      	b.n	801afa4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801af9e:	7b3a      	ldrb	r2, [r7, #12]
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801afa4:	7b7a      	ldrb	r2, [r7, #13]
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	701a      	strb	r2, [r3, #0]
}
 801afaa:	bf00      	nop
 801afac:	3710      	adds	r7, #16
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}
 801afb2:	bf00      	nop
 801afb4:	20002352 	.word	0x20002352

0801afb8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b084      	sub	sp, #16
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801afc0:	f107 030c 	add.w	r3, r7, #12
 801afc4:	2203      	movs	r2, #3
 801afc6:	4619      	mov	r1, r3
 801afc8:	2014      	movs	r0, #20
 801afca:	f000 f919 	bl	801b200 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801afce:	f7ff fd53 	bl	801aa78 <SUBGRF_GetPacketType>
 801afd2:	4603      	mov	r3, r0
 801afd4:	461a      	mov	r2, r3
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	781b      	ldrb	r3, [r3, #0]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d002      	beq.n	801afe8 <SUBGRF_GetPacketStatus+0x30>
 801afe2:	2b01      	cmp	r3, #1
 801afe4:	d013      	beq.n	801b00e <SUBGRF_GetPacketStatus+0x56>
 801afe6:	e02a      	b.n	801b03e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801afe8:	7b3a      	ldrb	r2, [r7, #12]
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801afee:	7b7b      	ldrb	r3, [r7, #13]
 801aff0:	425b      	negs	r3, r3
 801aff2:	105b      	asrs	r3, r3, #1
 801aff4:	b25a      	sxtb	r2, r3
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801affa:	7bbb      	ldrb	r3, [r7, #14]
 801affc:	425b      	negs	r3, r3
 801affe:	105b      	asrs	r3, r3, #1
 801b000:	b25a      	sxtb	r2, r3
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2200      	movs	r2, #0
 801b00a:	609a      	str	r2, [r3, #8]
            break;
 801b00c:	e020      	b.n	801b050 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b00e:	7b3b      	ldrb	r3, [r7, #12]
 801b010:	425b      	negs	r3, r3
 801b012:	105b      	asrs	r3, r3, #1
 801b014:	b25a      	sxtb	r2, r3
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b01a:	7b7b      	ldrb	r3, [r7, #13]
 801b01c:	b25b      	sxtb	r3, r3
 801b01e:	3302      	adds	r3, #2
 801b020:	109b      	asrs	r3, r3, #2
 801b022:	b25a      	sxtb	r2, r3
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b028:	7bbb      	ldrb	r3, [r7, #14]
 801b02a:	425b      	negs	r3, r3
 801b02c:	105b      	asrs	r3, r3, #1
 801b02e:	b25a      	sxtb	r2, r3
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b034:	4b08      	ldr	r3, [pc, #32]	; (801b058 <SUBGRF_GetPacketStatus+0xa0>)
 801b036:	681a      	ldr	r2, [r3, #0]
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	611a      	str	r2, [r3, #16]
            break;
 801b03c:	e008      	b.n	801b050 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b03e:	2214      	movs	r2, #20
 801b040:	2100      	movs	r1, #0
 801b042:	6878      	ldr	r0, [r7, #4]
 801b044:	f000 fbf3 	bl	801b82e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	220f      	movs	r2, #15
 801b04c:	701a      	strb	r2, [r3, #0]
            break;
 801b04e:	bf00      	nop
    }
}
 801b050:	bf00      	nop
 801b052:	3710      	adds	r7, #16
 801b054:	46bd      	mov	sp, r7
 801b056:	bd80      	pop	{r7, pc}
 801b058:	20002354 	.word	0x20002354

0801b05c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b082      	sub	sp, #8
 801b060:	af00      	add	r7, sp, #0
 801b062:	4603      	mov	r3, r0
 801b064:	460a      	mov	r2, r1
 801b066:	80fb      	strh	r3, [r7, #6]
 801b068:	4613      	mov	r3, r2
 801b06a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b06c:	1d7a      	adds	r2, r7, #5
 801b06e:	88f9      	ldrh	r1, [r7, #6]
 801b070:	2301      	movs	r3, #1
 801b072:	4803      	ldr	r0, [pc, #12]	; (801b080 <SUBGRF_WriteRegister+0x24>)
 801b074:	f7ed fbac 	bl	80087d0 <HAL_SUBGHZ_WriteRegisters>
}
 801b078:	bf00      	nop
 801b07a:	3708      	adds	r7, #8
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bd80      	pop	{r7, pc}
 801b080:	20000710 	.word	0x20000710

0801b084 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b084:	b580      	push	{r7, lr}
 801b086:	b084      	sub	sp, #16
 801b088:	af00      	add	r7, sp, #0
 801b08a:	4603      	mov	r3, r0
 801b08c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b08e:	f107 020f 	add.w	r2, r7, #15
 801b092:	88f9      	ldrh	r1, [r7, #6]
 801b094:	2301      	movs	r3, #1
 801b096:	4804      	ldr	r0, [pc, #16]	; (801b0a8 <SUBGRF_ReadRegister+0x24>)
 801b098:	f7ed fbf9 	bl	800888e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b09c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b09e:	4618      	mov	r0, r3
 801b0a0:	3710      	adds	r7, #16
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	bd80      	pop	{r7, pc}
 801b0a6:	bf00      	nop
 801b0a8:	20000710 	.word	0x20000710

0801b0ac <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b086      	sub	sp, #24
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	6039      	str	r1, [r7, #0]
 801b0b6:	80fb      	strh	r3, [r7, #6]
 801b0b8:	4613      	mov	r3, r2
 801b0ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b0c0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b0c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0c6:	b672      	cpsid	i
}
 801b0c8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b0ca:	88bb      	ldrh	r3, [r7, #4]
 801b0cc:	88f9      	ldrh	r1, [r7, #6]
 801b0ce:	683a      	ldr	r2, [r7, #0]
 801b0d0:	4806      	ldr	r0, [pc, #24]	; (801b0ec <SUBGRF_WriteRegisters+0x40>)
 801b0d2:	f7ed fb7d 	bl	80087d0 <HAL_SUBGHZ_WriteRegisters>
 801b0d6:	697b      	ldr	r3, [r7, #20]
 801b0d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0da:	693b      	ldr	r3, [r7, #16]
 801b0dc:	f383 8810 	msr	PRIMASK, r3
}
 801b0e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b0e2:	bf00      	nop
 801b0e4:	3718      	adds	r7, #24
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}
 801b0ea:	bf00      	nop
 801b0ec:	20000710 	.word	0x20000710

0801b0f0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b086      	sub	sp, #24
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	6039      	str	r1, [r7, #0]
 801b0fa:	80fb      	strh	r3, [r7, #6]
 801b0fc:	4613      	mov	r3, r2
 801b0fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b100:	f3ef 8310 	mrs	r3, PRIMASK
 801b104:	60fb      	str	r3, [r7, #12]
  return(result);
 801b106:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b10a:	b672      	cpsid	i
}
 801b10c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b10e:	88bb      	ldrh	r3, [r7, #4]
 801b110:	88f9      	ldrh	r1, [r7, #6]
 801b112:	683a      	ldr	r2, [r7, #0]
 801b114:	4806      	ldr	r0, [pc, #24]	; (801b130 <SUBGRF_ReadRegisters+0x40>)
 801b116:	f7ed fbba 	bl	800888e <HAL_SUBGHZ_ReadRegisters>
 801b11a:	697b      	ldr	r3, [r7, #20]
 801b11c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b11e:	693b      	ldr	r3, [r7, #16]
 801b120:	f383 8810 	msr	PRIMASK, r3
}
 801b124:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b126:	bf00      	nop
 801b128:	3718      	adds	r7, #24
 801b12a:	46bd      	mov	sp, r7
 801b12c:	bd80      	pop	{r7, pc}
 801b12e:	bf00      	nop
 801b130:	20000710 	.word	0x20000710

0801b134 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b086      	sub	sp, #24
 801b138:	af00      	add	r7, sp, #0
 801b13a:	4603      	mov	r3, r0
 801b13c:	6039      	str	r1, [r7, #0]
 801b13e:	71fb      	strb	r3, [r7, #7]
 801b140:	4613      	mov	r3, r2
 801b142:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b144:	f3ef 8310 	mrs	r3, PRIMASK
 801b148:	60fb      	str	r3, [r7, #12]
  return(result);
 801b14a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b14c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b14e:	b672      	cpsid	i
}
 801b150:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b152:	79bb      	ldrb	r3, [r7, #6]
 801b154:	b29b      	uxth	r3, r3
 801b156:	79f9      	ldrb	r1, [r7, #7]
 801b158:	683a      	ldr	r2, [r7, #0]
 801b15a:	4806      	ldr	r0, [pc, #24]	; (801b174 <SUBGRF_WriteBuffer+0x40>)
 801b15c:	f7ed fcab 	bl	8008ab6 <HAL_SUBGHZ_WriteBuffer>
 801b160:	697b      	ldr	r3, [r7, #20]
 801b162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b164:	693b      	ldr	r3, [r7, #16]
 801b166:	f383 8810 	msr	PRIMASK, r3
}
 801b16a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b16c:	bf00      	nop
 801b16e:	3718      	adds	r7, #24
 801b170:	46bd      	mov	sp, r7
 801b172:	bd80      	pop	{r7, pc}
 801b174:	20000710 	.word	0x20000710

0801b178 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b086      	sub	sp, #24
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	4603      	mov	r3, r0
 801b180:	6039      	str	r1, [r7, #0]
 801b182:	71fb      	strb	r3, [r7, #7]
 801b184:	4613      	mov	r3, r2
 801b186:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b188:	f3ef 8310 	mrs	r3, PRIMASK
 801b18c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b18e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b192:	b672      	cpsid	i
}
 801b194:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b196:	79bb      	ldrb	r3, [r7, #6]
 801b198:	b29b      	uxth	r3, r3
 801b19a:	79f9      	ldrb	r1, [r7, #7]
 801b19c:	683a      	ldr	r2, [r7, #0]
 801b19e:	4806      	ldr	r0, [pc, #24]	; (801b1b8 <SUBGRF_ReadBuffer+0x40>)
 801b1a0:	f7ed fcdc 	bl	8008b5c <HAL_SUBGHZ_ReadBuffer>
 801b1a4:	697b      	ldr	r3, [r7, #20]
 801b1a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1a8:	693b      	ldr	r3, [r7, #16]
 801b1aa:	f383 8810 	msr	PRIMASK, r3
}
 801b1ae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b1b0:	bf00      	nop
 801b1b2:	3718      	adds	r7, #24
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	20000710 	.word	0x20000710

0801b1bc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b1bc:	b580      	push	{r7, lr}
 801b1be:	b086      	sub	sp, #24
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	6039      	str	r1, [r7, #0]
 801b1c6:	71fb      	strb	r3, [r7, #7]
 801b1c8:	4613      	mov	r3, r2
 801b1ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1cc:	f3ef 8310 	mrs	r3, PRIMASK
 801b1d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b1d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b1d6:	b672      	cpsid	i
}
 801b1d8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b1da:	88bb      	ldrh	r3, [r7, #4]
 801b1dc:	79f9      	ldrb	r1, [r7, #7]
 801b1de:	683a      	ldr	r2, [r7, #0]
 801b1e0:	4806      	ldr	r0, [pc, #24]	; (801b1fc <SUBGRF_WriteCommand+0x40>)
 801b1e2:	f7ed fbb5 	bl	8008950 <HAL_SUBGHZ_ExecSetCmd>
 801b1e6:	697b      	ldr	r3, [r7, #20]
 801b1e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1ea:	693b      	ldr	r3, [r7, #16]
 801b1ec:	f383 8810 	msr	PRIMASK, r3
}
 801b1f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b1f2:	bf00      	nop
 801b1f4:	3718      	adds	r7, #24
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	bd80      	pop	{r7, pc}
 801b1fa:	bf00      	nop
 801b1fc:	20000710 	.word	0x20000710

0801b200 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b086      	sub	sp, #24
 801b204:	af00      	add	r7, sp, #0
 801b206:	4603      	mov	r3, r0
 801b208:	6039      	str	r1, [r7, #0]
 801b20a:	71fb      	strb	r3, [r7, #7]
 801b20c:	4613      	mov	r3, r2
 801b20e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b210:	f3ef 8310 	mrs	r3, PRIMASK
 801b214:	60fb      	str	r3, [r7, #12]
  return(result);
 801b216:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b218:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b21a:	b672      	cpsid	i
}
 801b21c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b21e:	88bb      	ldrh	r3, [r7, #4]
 801b220:	79f9      	ldrb	r1, [r7, #7]
 801b222:	683a      	ldr	r2, [r7, #0]
 801b224:	4806      	ldr	r0, [pc, #24]	; (801b240 <SUBGRF_ReadCommand+0x40>)
 801b226:	f7ed fbf2 	bl	8008a0e <HAL_SUBGHZ_ExecGetCmd>
 801b22a:	697b      	ldr	r3, [r7, #20]
 801b22c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b22e:	693b      	ldr	r3, [r7, #16]
 801b230:	f383 8810 	msr	PRIMASK, r3
}
 801b234:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b236:	bf00      	nop
 801b238:	3718      	adds	r7, #24
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd80      	pop	{r7, pc}
 801b23e:	bf00      	nop
 801b240:	20000710 	.word	0x20000710

0801b244 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b244:	b580      	push	{r7, lr}
 801b246:	b084      	sub	sp, #16
 801b248:	af00      	add	r7, sp, #0
 801b24a:	4603      	mov	r3, r0
 801b24c:	460a      	mov	r2, r1
 801b24e:	71fb      	strb	r3, [r7, #7]
 801b250:	4613      	mov	r3, r2
 801b252:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b254:	2301      	movs	r3, #1
 801b256:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b258:	79bb      	ldrb	r3, [r7, #6]
 801b25a:	2b01      	cmp	r3, #1
 801b25c:	d10d      	bne.n	801b27a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b25e:	79fb      	ldrb	r3, [r7, #7]
 801b260:	2b01      	cmp	r3, #1
 801b262:	d104      	bne.n	801b26e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b264:	2302      	movs	r3, #2
 801b266:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b268:	2004      	movs	r0, #4
 801b26a:	f000 f8df 	bl	801b42c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b26e:	79fb      	ldrb	r3, [r7, #7]
 801b270:	2b02      	cmp	r3, #2
 801b272:	d107      	bne.n	801b284 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b274:	2303      	movs	r3, #3
 801b276:	73fb      	strb	r3, [r7, #15]
 801b278:	e004      	b.n	801b284 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b27a:	79bb      	ldrb	r3, [r7, #6]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d101      	bne.n	801b284 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b280:	2301      	movs	r3, #1
 801b282:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b284:	7bfb      	ldrb	r3, [r7, #15]
 801b286:	4618      	mov	r0, r3
 801b288:	f7f1 f825 	bl	800c2d6 <RBI_ConfigRFSwitch>
}
 801b28c:	bf00      	nop
 801b28e:	3710      	adds	r7, #16
 801b290:	46bd      	mov	sp, r7
 801b292:	bd80      	pop	{r7, pc}

0801b294 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b294:	b580      	push	{r7, lr}
 801b296:	b084      	sub	sp, #16
 801b298:	af00      	add	r7, sp, #0
 801b29a:	4603      	mov	r3, r0
 801b29c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b29e:	2301      	movs	r3, #1
 801b2a0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b2a2:	f7f1 f826 	bl	800c2f2 <RBI_GetTxConfig>
 801b2a6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b2a8:	68bb      	ldr	r3, [r7, #8]
 801b2aa:	2b02      	cmp	r3, #2
 801b2ac:	d016      	beq.n	801b2dc <SUBGRF_SetRfTxPower+0x48>
 801b2ae:	68bb      	ldr	r3, [r7, #8]
 801b2b0:	2b02      	cmp	r3, #2
 801b2b2:	dc16      	bgt.n	801b2e2 <SUBGRF_SetRfTxPower+0x4e>
 801b2b4:	68bb      	ldr	r3, [r7, #8]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d003      	beq.n	801b2c2 <SUBGRF_SetRfTxPower+0x2e>
 801b2ba:	68bb      	ldr	r3, [r7, #8]
 801b2bc:	2b01      	cmp	r3, #1
 801b2be:	d00a      	beq.n	801b2d6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b2c0:	e00f      	b.n	801b2e2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b2c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2c6:	2b0f      	cmp	r3, #15
 801b2c8:	dd02      	ble.n	801b2d0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b2ca:	2302      	movs	r3, #2
 801b2cc:	73fb      	strb	r3, [r7, #15]
            break;
 801b2ce:	e009      	b.n	801b2e4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b2d0:	2301      	movs	r3, #1
 801b2d2:	73fb      	strb	r3, [r7, #15]
            break;
 801b2d4:	e006      	b.n	801b2e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b2d6:	2301      	movs	r3, #1
 801b2d8:	73fb      	strb	r3, [r7, #15]
            break;
 801b2da:	e003      	b.n	801b2e4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b2dc:	2302      	movs	r3, #2
 801b2de:	73fb      	strb	r3, [r7, #15]
            break;
 801b2e0:	e000      	b.n	801b2e4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b2e2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b2e4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b2e8:	7bfb      	ldrb	r3, [r7, #15]
 801b2ea:	2202      	movs	r2, #2
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f7ff fbcd 	bl	801aa8c <SUBGRF_SetTxParams>

    return paSelect;
 801b2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	3710      	adds	r7, #16
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	bd80      	pop	{r7, pc}

0801b2fc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b2fc:	b480      	push	{r7}
 801b2fe:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b300:	2301      	movs	r3, #1
}
 801b302:	4618      	mov	r0, r3
 801b304:	46bd      	mov	sp, r7
 801b306:	bc80      	pop	{r7}
 801b308:	4770      	bx	lr
	...

0801b30c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b082      	sub	sp, #8
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b314:	4b03      	ldr	r3, [pc, #12]	; (801b324 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	2001      	movs	r0, #1
 801b31a:	4798      	blx	r3
}
 801b31c:	bf00      	nop
 801b31e:	3708      	adds	r7, #8
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}
 801b324:	2000235c 	.word	0x2000235c

0801b328 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b082      	sub	sp, #8
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b330:	4b03      	ldr	r3, [pc, #12]	; (801b340 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	2002      	movs	r0, #2
 801b336:	4798      	blx	r3
}
 801b338:	bf00      	nop
 801b33a:	3708      	adds	r7, #8
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	2000235c 	.word	0x2000235c

0801b344 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b082      	sub	sp, #8
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b34c:	4b03      	ldr	r3, [pc, #12]	; (801b35c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	2040      	movs	r0, #64	; 0x40
 801b352:	4798      	blx	r3
}
 801b354:	bf00      	nop
 801b356:	3708      	adds	r7, #8
 801b358:	46bd      	mov	sp, r7
 801b35a:	bd80      	pop	{r7, pc}
 801b35c:	2000235c 	.word	0x2000235c

0801b360 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b360:	b580      	push	{r7, lr}
 801b362:	b082      	sub	sp, #8
 801b364:	af00      	add	r7, sp, #0
 801b366:	6078      	str	r0, [r7, #4]
 801b368:	460b      	mov	r3, r1
 801b36a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b36c:	78fb      	ldrb	r3, [r7, #3]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d002      	beq.n	801b378 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b372:	2b01      	cmp	r3, #1
 801b374:	d005      	beq.n	801b382 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b376:	e00a      	b.n	801b38e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b378:	4b07      	ldr	r3, [pc, #28]	; (801b398 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	2080      	movs	r0, #128	; 0x80
 801b37e:	4798      	blx	r3
            break;
 801b380:	e005      	b.n	801b38e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b382:	4b05      	ldr	r3, [pc, #20]	; (801b398 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b38a:	4798      	blx	r3
            break;
 801b38c:	bf00      	nop
    }
}
 801b38e:	bf00      	nop
 801b390:	3708      	adds	r7, #8
 801b392:	46bd      	mov	sp, r7
 801b394:	bd80      	pop	{r7, pc}
 801b396:	bf00      	nop
 801b398:	2000235c 	.word	0x2000235c

0801b39c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b082      	sub	sp, #8
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b3a4:	4b04      	ldr	r3, [pc, #16]	; (801b3b8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b3ac:	4798      	blx	r3
}
 801b3ae:	bf00      	nop
 801b3b0:	3708      	adds	r7, #8
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd80      	pop	{r7, pc}
 801b3b6:	bf00      	nop
 801b3b8:	2000235c 	.word	0x2000235c

0801b3bc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b082      	sub	sp, #8
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b3c4:	4b03      	ldr	r3, [pc, #12]	; (801b3d4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	2020      	movs	r0, #32
 801b3ca:	4798      	blx	r3
}
 801b3cc:	bf00      	nop
 801b3ce:	3708      	adds	r7, #8
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	2000235c 	.word	0x2000235c

0801b3d8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b082      	sub	sp, #8
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b3e0:	4b03      	ldr	r3, [pc, #12]	; (801b3f0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	2004      	movs	r0, #4
 801b3e6:	4798      	blx	r3
}
 801b3e8:	bf00      	nop
 801b3ea:	3708      	adds	r7, #8
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	bd80      	pop	{r7, pc}
 801b3f0:	2000235c 	.word	0x2000235c

0801b3f4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b082      	sub	sp, #8
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b3fc:	4b03      	ldr	r3, [pc, #12]	; (801b40c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	2008      	movs	r0, #8
 801b402:	4798      	blx	r3
}
 801b404:	bf00      	nop
 801b406:	3708      	adds	r7, #8
 801b408:	46bd      	mov	sp, r7
 801b40a:	bd80      	pop	{r7, pc}
 801b40c:	2000235c 	.word	0x2000235c

0801b410 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b082      	sub	sp, #8
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b418:	4b03      	ldr	r3, [pc, #12]	; (801b428 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	2010      	movs	r0, #16
 801b41e:	4798      	blx	r3
}
 801b420:	bf00      	nop
 801b422:	3708      	adds	r7, #8
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}
 801b428:	2000235c 	.word	0x2000235c

0801b42c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b42c:	b580      	push	{r7, lr}
 801b42e:	b084      	sub	sp, #16
 801b430:	af00      	add	r7, sp, #0
 801b432:	4603      	mov	r3, r0
 801b434:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b436:	f7f0 ff6a 	bl	800c30e <RBI_IsDCDC>
 801b43a:	4603      	mov	r3, r0
 801b43c:	2b01      	cmp	r3, #1
 801b43e:	d112      	bne.n	801b466 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b440:	f640 1023 	movw	r0, #2339	; 0x923
 801b444:	f7ff fe1e 	bl	801b084 <SUBGRF_ReadRegister>
 801b448:	4603      	mov	r3, r0
 801b44a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b44c:	7bfb      	ldrb	r3, [r7, #15]
 801b44e:	f023 0306 	bic.w	r3, r3, #6
 801b452:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b454:	7bfa      	ldrb	r2, [r7, #15]
 801b456:	79fb      	ldrb	r3, [r7, #7]
 801b458:	4313      	orrs	r3, r2
 801b45a:	b2db      	uxtb	r3, r3
 801b45c:	4619      	mov	r1, r3
 801b45e:	f640 1023 	movw	r0, #2339	; 0x923
 801b462:	f7ff fdfb 	bl	801b05c <SUBGRF_WriteRegister>
  }
}
 801b466:	bf00      	nop
 801b468:	3710      	adds	r7, #16
 801b46a:	46bd      	mov	sp, r7
 801b46c:	bd80      	pop	{r7, pc}
	...

0801b470 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b470:	b480      	push	{r7}
 801b472:	b085      	sub	sp, #20
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d101      	bne.n	801b482 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b47e:	231f      	movs	r3, #31
 801b480:	e016      	b.n	801b4b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b482:	2300      	movs	r3, #0
 801b484:	73fb      	strb	r3, [r7, #15]
 801b486:	e00f      	b.n	801b4a8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b488:	7bfb      	ldrb	r3, [r7, #15]
 801b48a:	4a0c      	ldr	r2, [pc, #48]	; (801b4bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b48c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b490:	687a      	ldr	r2, [r7, #4]
 801b492:	429a      	cmp	r2, r3
 801b494:	d205      	bcs.n	801b4a2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b496:	7bfb      	ldrb	r3, [r7, #15]
 801b498:	4a08      	ldr	r2, [pc, #32]	; (801b4bc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b49a:	00db      	lsls	r3, r3, #3
 801b49c:	4413      	add	r3, r2
 801b49e:	791b      	ldrb	r3, [r3, #4]
 801b4a0:	e006      	b.n	801b4b0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b4a2:	7bfb      	ldrb	r3, [r7, #15]
 801b4a4:	3301      	adds	r3, #1
 801b4a6:	73fb      	strb	r3, [r7, #15]
 801b4a8:	7bfb      	ldrb	r3, [r7, #15]
 801b4aa:	2b15      	cmp	r3, #21
 801b4ac:	d9ec      	bls.n	801b488 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b4ae:	e7fe      	b.n	801b4ae <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	3714      	adds	r7, #20
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bc80      	pop	{r7}
 801b4b8:	4770      	bx	lr
 801b4ba:	bf00      	nop
 801b4bc:	0801d9a8 	.word	0x0801d9a8

0801b4c0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b08a      	sub	sp, #40	; 0x28
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
 801b4c8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b4ca:	4b35      	ldr	r3, [pc, #212]	; (801b5a0 <SUBGRF_GetCFO+0xe0>)
 801b4cc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b4ce:	f640 0007 	movw	r0, #2055	; 0x807
 801b4d2:	f7ff fdd7 	bl	801b084 <SUBGRF_ReadRegister>
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b4da:	7ffb      	ldrb	r3, [r7, #31]
 801b4dc:	08db      	lsrs	r3, r3, #3
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	f003 0303 	and.w	r3, r3, #3
 801b4e4:	3328      	adds	r3, #40	; 0x28
 801b4e6:	443b      	add	r3, r7
 801b4e8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b4ec:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b4ee:	7ffb      	ldrb	r3, [r7, #31]
 801b4f0:	f003 0307 	and.w	r3, r3, #7
 801b4f4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b4f6:	7fba      	ldrb	r2, [r7, #30]
 801b4f8:	7f7b      	ldrb	r3, [r7, #29]
 801b4fa:	3b01      	subs	r3, #1
 801b4fc:	fa02 f303 	lsl.w	r3, r2, r3
 801b500:	461a      	mov	r2, r3
 801b502:	4b28      	ldr	r3, [pc, #160]	; (801b5a4 <SUBGRF_GetCFO+0xe4>)
 801b504:	fbb3 f3f2 	udiv	r3, r3, r2
 801b508:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b50a:	69ba      	ldr	r2, [r7, #24]
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b512:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b514:	2301      	movs	r3, #1
 801b516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b51e:	697a      	ldr	r2, [r7, #20]
 801b520:	fb02 f303 	mul.w	r3, r2, r3
 801b524:	2b07      	cmp	r3, #7
 801b526:	d802      	bhi.n	801b52e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b528:	2302      	movs	r3, #2
 801b52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801b52e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b532:	697a      	ldr	r2, [r7, #20]
 801b534:	fb02 f303 	mul.w	r3, r2, r3
 801b538:	2b03      	cmp	r3, #3
 801b53a:	d802      	bhi.n	801b542 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b53c:	2304      	movs	r3, #4
 801b53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b542:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b546:	69bb      	ldr	r3, [r7, #24]
 801b548:	fb02 f303 	mul.w	r3, r2, r3
 801b54c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b54e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801b552:	f7ff fd97 	bl	801b084 <SUBGRF_ReadRegister>
 801b556:	4603      	mov	r3, r0
 801b558:	021b      	lsls	r3, r3, #8
 801b55a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801b55e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b560:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801b564:	f7ff fd8e 	bl	801b084 <SUBGRF_ReadRegister>
 801b568:	4603      	mov	r3, r0
 801b56a:	461a      	mov	r2, r3
 801b56c:	6a3b      	ldr	r3, [r7, #32]
 801b56e:	4313      	orrs	r3, r2
 801b570:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b572:	6a3b      	ldr	r3, [r7, #32]
 801b574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d005      	beq.n	801b588 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b57c:	6a3b      	ldr	r3, [r7, #32]
 801b57e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b582:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b586:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b588:	693b      	ldr	r3, [r7, #16]
 801b58a:	095b      	lsrs	r3, r3, #5
 801b58c:	6a3a      	ldr	r2, [r7, #32]
 801b58e:	fb02 f303 	mul.w	r3, r2, r3
 801b592:	11da      	asrs	r2, r3, #7
 801b594:	683b      	ldr	r3, [r7, #0]
 801b596:	601a      	str	r2, [r3, #0]
}
 801b598:	bf00      	nop
 801b59a:	3728      	adds	r7, #40	; 0x28
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bd80      	pop	{r7, pc}
 801b5a0:	0c0a0804 	.word	0x0c0a0804
 801b5a4:	01e84800 	.word	0x01e84800

0801b5a8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b087      	sub	sp, #28
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	60b9      	str	r1, [r7, #8]
 801b5b2:	607a      	str	r2, [r7, #4]
 801b5b4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b5ba:	f04f 33ff 	mov.w	r3, #4294967295
 801b5be:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b5c0:	697b      	ldr	r3, [r7, #20]
}
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	371c      	adds	r7, #28
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	bc80      	pop	{r7}
 801b5ca:	4770      	bx	lr

0801b5cc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b5cc:	b480      	push	{r7}
 801b5ce:	b087      	sub	sp, #28
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	4603      	mov	r3, r0
 801b5d4:	60b9      	str	r1, [r7, #8]
 801b5d6:	607a      	str	r2, [r7, #4]
 801b5d8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b5de:	f04f 33ff 	mov.w	r3, #4294967295
 801b5e2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b5e4:	697b      	ldr	r3, [r7, #20]
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	371c      	adds	r7, #28
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	bc80      	pop	{r7}
 801b5ee:	4770      	bx	lr

0801b5f0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b5f0:	b480      	push	{r7}
 801b5f2:	b085      	sub	sp, #20
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	60f8      	str	r0, [r7, #12]
 801b5f8:	60b9      	str	r1, [r7, #8]
 801b5fa:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b5fc:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b600:	4618      	mov	r0, r3
 801b602:	3714      	adds	r7, #20
 801b604:	46bd      	mov	sp, r7
 801b606:	bc80      	pop	{r7}
 801b608:	4770      	bx	lr

0801b60a <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b60a:	b480      	push	{r7}
 801b60c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b60e:	bf00      	nop
 801b610:	46bd      	mov	sp, r7
 801b612:	bc80      	pop	{r7}
 801b614:	4770      	bx	lr

0801b616 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b616:	b480      	push	{r7}
 801b618:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b61a:	2300      	movs	r3, #0
#endif
}
 801b61c:	4618      	mov	r0, r3
 801b61e:	46bd      	mov	sp, r7
 801b620:	bc80      	pop	{r7}
 801b622:	4770      	bx	lr

0801b624 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b624:	b480      	push	{r7}
 801b626:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b628:	2300      	movs	r3, #0
#endif
}
 801b62a:	4618      	mov	r0, r3
 801b62c:	46bd      	mov	sp, r7
 801b62e:	bc80      	pop	{r7}
 801b630:	4770      	bx	lr

0801b632 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b632:	b480      	push	{r7}
 801b634:	b083      	sub	sp, #12
 801b636:	af00      	add	r7, sp, #0
 801b638:	4603      	mov	r3, r0
 801b63a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b63c:	bf00      	nop
 801b63e:	370c      	adds	r7, #12
 801b640:	46bd      	mov	sp, r7
 801b642:	bc80      	pop	{r7}
 801b644:	4770      	bx	lr

0801b646 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b646:	b480      	push	{r7}
 801b648:	b087      	sub	sp, #28
 801b64a:	af00      	add	r7, sp, #0
 801b64c:	60f8      	str	r0, [r7, #12]
 801b64e:	460b      	mov	r3, r1
 801b650:	607a      	str	r2, [r7, #4]
 801b652:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b654:	f04f 33ff 	mov.w	r3, #4294967295
 801b658:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b65a:	697b      	ldr	r3, [r7, #20]
}
 801b65c:	4618      	mov	r0, r3
 801b65e:	371c      	adds	r7, #28
 801b660:	46bd      	mov	sp, r7
 801b662:	bc80      	pop	{r7}
 801b664:	4770      	bx	lr

0801b666 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b666:	b480      	push	{r7}
 801b668:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801b66a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b66e:	4618      	mov	r0, r3
 801b670:	46bd      	mov	sp, r7
 801b672:	bc80      	pop	{r7}
 801b674:	4770      	bx	lr

0801b676 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801b676:	b480      	push	{r7}
 801b678:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801b67a:	bf00      	nop
 801b67c:	46bd      	mov	sp, r7
 801b67e:	bc80      	pop	{r7}
 801b680:	4770      	bx	lr

0801b682 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b682:	b480      	push	{r7}
 801b684:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801b686:	bf00      	nop
 801b688:	46bd      	mov	sp, r7
 801b68a:	bc80      	pop	{r7}
 801b68c:	4770      	bx	lr

0801b68e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801b68e:	b480      	push	{r7}
 801b690:	b083      	sub	sp, #12
 801b692:	af00      	add	r7, sp, #0
 801b694:	4603      	mov	r3, r0
 801b696:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801b698:	bf00      	nop
 801b69a:	370c      	adds	r7, #12
 801b69c:	46bd      	mov	sp, r7
 801b69e:	bc80      	pop	{r7}
 801b6a0:	4770      	bx	lr
	...

0801b6a4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b6a4:	b480      	push	{r7}
 801b6a6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b6a8:	4b04      	ldr	r3, [pc, #16]	; (801b6bc <UTIL_LPM_Init+0x18>)
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b6ae:	4b04      	ldr	r3, [pc, #16]	; (801b6c0 <UTIL_LPM_Init+0x1c>)
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b6b4:	bf00      	nop
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bc80      	pop	{r7}
 801b6ba:	4770      	bx	lr
 801b6bc:	20002360 	.word	0x20002360
 801b6c0:	20002364 	.word	0x20002364

0801b6c4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b6c4:	b480      	push	{r7}
 801b6c6:	b087      	sub	sp, #28
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
 801b6cc:	460b      	mov	r3, r1
 801b6ce:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6d0:	f3ef 8310 	mrs	r3, PRIMASK
 801b6d4:	613b      	str	r3, [r7, #16]
  return(result);
 801b6d6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b6d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6da:	b672      	cpsid	i
}
 801b6dc:	bf00      	nop
  
  switch( state )
 801b6de:	78fb      	ldrb	r3, [r7, #3]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d008      	beq.n	801b6f6 <UTIL_LPM_SetStopMode+0x32>
 801b6e4:	2b01      	cmp	r3, #1
 801b6e6:	d10e      	bne.n	801b706 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b6e8:	4b0d      	ldr	r3, [pc, #52]	; (801b720 <UTIL_LPM_SetStopMode+0x5c>)
 801b6ea:	681a      	ldr	r2, [r3, #0]
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	4313      	orrs	r3, r2
 801b6f0:	4a0b      	ldr	r2, [pc, #44]	; (801b720 <UTIL_LPM_SetStopMode+0x5c>)
 801b6f2:	6013      	str	r3, [r2, #0]
      break;
 801b6f4:	e008      	b.n	801b708 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	43da      	mvns	r2, r3
 801b6fa:	4b09      	ldr	r3, [pc, #36]	; (801b720 <UTIL_LPM_SetStopMode+0x5c>)
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	4013      	ands	r3, r2
 801b700:	4a07      	ldr	r2, [pc, #28]	; (801b720 <UTIL_LPM_SetStopMode+0x5c>)
 801b702:	6013      	str	r3, [r2, #0]
      break;
 801b704:	e000      	b.n	801b708 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b706:	bf00      	nop
 801b708:	697b      	ldr	r3, [r7, #20]
 801b70a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	f383 8810 	msr	PRIMASK, r3
}
 801b712:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b714:	bf00      	nop
 801b716:	371c      	adds	r7, #28
 801b718:	46bd      	mov	sp, r7
 801b71a:	bc80      	pop	{r7}
 801b71c:	4770      	bx	lr
 801b71e:	bf00      	nop
 801b720:	20002360 	.word	0x20002360

0801b724 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b724:	b480      	push	{r7}
 801b726:	b087      	sub	sp, #28
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
 801b72c:	460b      	mov	r3, r1
 801b72e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b730:	f3ef 8310 	mrs	r3, PRIMASK
 801b734:	613b      	str	r3, [r7, #16]
  return(result);
 801b736:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b73a:	b672      	cpsid	i
}
 801b73c:	bf00      	nop
  
  switch(state)
 801b73e:	78fb      	ldrb	r3, [r7, #3]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d008      	beq.n	801b756 <UTIL_LPM_SetOffMode+0x32>
 801b744:	2b01      	cmp	r3, #1
 801b746:	d10e      	bne.n	801b766 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b748:	4b0d      	ldr	r3, [pc, #52]	; (801b780 <UTIL_LPM_SetOffMode+0x5c>)
 801b74a:	681a      	ldr	r2, [r3, #0]
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	4313      	orrs	r3, r2
 801b750:	4a0b      	ldr	r2, [pc, #44]	; (801b780 <UTIL_LPM_SetOffMode+0x5c>)
 801b752:	6013      	str	r3, [r2, #0]
      break;
 801b754:	e008      	b.n	801b768 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	43da      	mvns	r2, r3
 801b75a:	4b09      	ldr	r3, [pc, #36]	; (801b780 <UTIL_LPM_SetOffMode+0x5c>)
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	4013      	ands	r3, r2
 801b760:	4a07      	ldr	r2, [pc, #28]	; (801b780 <UTIL_LPM_SetOffMode+0x5c>)
 801b762:	6013      	str	r3, [r2, #0]
      break;
 801b764:	e000      	b.n	801b768 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b766:	bf00      	nop
 801b768:	697b      	ldr	r3, [r7, #20]
 801b76a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	f383 8810 	msr	PRIMASK, r3
}
 801b772:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b774:	bf00      	nop
 801b776:	371c      	adds	r7, #28
 801b778:	46bd      	mov	sp, r7
 801b77a:	bc80      	pop	{r7}
 801b77c:	4770      	bx	lr
 801b77e:	bf00      	nop
 801b780:	20002364 	.word	0x20002364

0801b784 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b784:	b580      	push	{r7, lr}
 801b786:	b084      	sub	sp, #16
 801b788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b78a:	f3ef 8310 	mrs	r3, PRIMASK
 801b78e:	60bb      	str	r3, [r7, #8]
  return(result);
 801b790:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b792:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b794:	b672      	cpsid	i
}
 801b796:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b798:	4b12      	ldr	r3, [pc, #72]	; (801b7e4 <UTIL_LPM_EnterLowPower+0x60>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d006      	beq.n	801b7ae <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b7a0:	4b11      	ldr	r3, [pc, #68]	; (801b7e8 <UTIL_LPM_EnterLowPower+0x64>)
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b7a6:	4b10      	ldr	r3, [pc, #64]	; (801b7e8 <UTIL_LPM_EnterLowPower+0x64>)
 801b7a8:	685b      	ldr	r3, [r3, #4]
 801b7aa:	4798      	blx	r3
 801b7ac:	e010      	b.n	801b7d0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b7ae:	4b0f      	ldr	r3, [pc, #60]	; (801b7ec <UTIL_LPM_EnterLowPower+0x68>)
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d006      	beq.n	801b7c4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b7b6:	4b0c      	ldr	r3, [pc, #48]	; (801b7e8 <UTIL_LPM_EnterLowPower+0x64>)
 801b7b8:	689b      	ldr	r3, [r3, #8]
 801b7ba:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b7bc:	4b0a      	ldr	r3, [pc, #40]	; (801b7e8 <UTIL_LPM_EnterLowPower+0x64>)
 801b7be:	68db      	ldr	r3, [r3, #12]
 801b7c0:	4798      	blx	r3
 801b7c2:	e005      	b.n	801b7d0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b7c4:	4b08      	ldr	r3, [pc, #32]	; (801b7e8 <UTIL_LPM_EnterLowPower+0x64>)
 801b7c6:	691b      	ldr	r3, [r3, #16]
 801b7c8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b7ca:	4b07      	ldr	r3, [pc, #28]	; (801b7e8 <UTIL_LPM_EnterLowPower+0x64>)
 801b7cc:	695b      	ldr	r3, [r3, #20]
 801b7ce:	4798      	blx	r3
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	f383 8810 	msr	PRIMASK, r3
}
 801b7da:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b7dc:	bf00      	nop
 801b7de:	3710      	adds	r7, #16
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	bd80      	pop	{r7, pc}
 801b7e4:	20002360 	.word	0x20002360
 801b7e8:	0801d4a8 	.word	0x0801d4a8
 801b7ec:	20002364 	.word	0x20002364

0801b7f0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b7f0:	b480      	push	{r7}
 801b7f2:	b087      	sub	sp, #28
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	60f8      	str	r0, [r7, #12]
 801b7f8:	60b9      	str	r1, [r7, #8]
 801b7fa:	4613      	mov	r3, r2
 801b7fc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b806:	e007      	b.n	801b818 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b808:	693a      	ldr	r2, [r7, #16]
 801b80a:	1c53      	adds	r3, r2, #1
 801b80c:	613b      	str	r3, [r7, #16]
 801b80e:	697b      	ldr	r3, [r7, #20]
 801b810:	1c59      	adds	r1, r3, #1
 801b812:	6179      	str	r1, [r7, #20]
 801b814:	7812      	ldrb	r2, [r2, #0]
 801b816:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b818:	88fb      	ldrh	r3, [r7, #6]
 801b81a:	1e5a      	subs	r2, r3, #1
 801b81c:	80fa      	strh	r2, [r7, #6]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d1f2      	bne.n	801b808 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b822:	bf00      	nop
 801b824:	bf00      	nop
 801b826:	371c      	adds	r7, #28
 801b828:	46bd      	mov	sp, r7
 801b82a:	bc80      	pop	{r7}
 801b82c:	4770      	bx	lr

0801b82e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b82e:	b480      	push	{r7}
 801b830:	b085      	sub	sp, #20
 801b832:	af00      	add	r7, sp, #0
 801b834:	6078      	str	r0, [r7, #4]
 801b836:	460b      	mov	r3, r1
 801b838:	70fb      	strb	r3, [r7, #3]
 801b83a:	4613      	mov	r3, r2
 801b83c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b842:	e004      	b.n	801b84e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	1c5a      	adds	r2, r3, #1
 801b848:	60fa      	str	r2, [r7, #12]
 801b84a:	78fa      	ldrb	r2, [r7, #3]
 801b84c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b84e:	883b      	ldrh	r3, [r7, #0]
 801b850:	1e5a      	subs	r2, r3, #1
 801b852:	803a      	strh	r2, [r7, #0]
 801b854:	2b00      	cmp	r3, #0
 801b856:	d1f5      	bne.n	801b844 <UTIL_MEM_set_8+0x16>
  }
}
 801b858:	bf00      	nop
 801b85a:	bf00      	nop
 801b85c:	3714      	adds	r7, #20
 801b85e:	46bd      	mov	sp, r7
 801b860:	bc80      	pop	{r7}
 801b862:	4770      	bx	lr

0801b864 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b864:	b082      	sub	sp, #8
 801b866:	b480      	push	{r7}
 801b868:	b087      	sub	sp, #28
 801b86a:	af00      	add	r7, sp, #0
 801b86c:	60f8      	str	r0, [r7, #12]
 801b86e:	1d38      	adds	r0, r7, #4
 801b870:	e880 0006 	stmia.w	r0, {r1, r2}
 801b874:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b876:	2300      	movs	r3, #0
 801b878:	613b      	str	r3, [r7, #16]
 801b87a:	2300      	movs	r3, #0
 801b87c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b87e:	687a      	ldr	r2, [r7, #4]
 801b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b882:	4413      	add	r3, r2
 801b884:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b886:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b88a:	b29a      	uxth	r2, r3
 801b88c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b890:	b29b      	uxth	r3, r3
 801b892:	4413      	add	r3, r2
 801b894:	b29b      	uxth	r3, r3
 801b896:	b21b      	sxth	r3, r3
 801b898:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b89a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b89e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b8a2:	db0a      	blt.n	801b8ba <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b8a4:	693b      	ldr	r3, [r7, #16]
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b8aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b8ae:	b29b      	uxth	r3, r3
 801b8b0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801b8b4:	b29b      	uxth	r3, r3
 801b8b6:	b21b      	sxth	r3, r3
 801b8b8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	461a      	mov	r2, r3
 801b8be:	f107 0310 	add.w	r3, r7, #16
 801b8c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b8c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b8ca:	68f8      	ldr	r0, [r7, #12]
 801b8cc:	371c      	adds	r7, #28
 801b8ce:	46bd      	mov	sp, r7
 801b8d0:	bc80      	pop	{r7}
 801b8d2:	b002      	add	sp, #8
 801b8d4:	4770      	bx	lr

0801b8d6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b8d6:	b082      	sub	sp, #8
 801b8d8:	b480      	push	{r7}
 801b8da:	b087      	sub	sp, #28
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	60f8      	str	r0, [r7, #12]
 801b8e0:	1d38      	adds	r0, r7, #4
 801b8e2:	e880 0006 	stmia.w	r0, {r1, r2}
 801b8e6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	613b      	str	r3, [r7, #16]
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b8f0:	687a      	ldr	r2, [r7, #4]
 801b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f4:	1ad3      	subs	r3, r2, r3
 801b8f6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b8f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b8fc:	b29a      	uxth	r2, r3
 801b8fe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b902:	b29b      	uxth	r3, r3
 801b904:	1ad3      	subs	r3, r2, r3
 801b906:	b29b      	uxth	r3, r3
 801b908:	b21b      	sxth	r3, r3
 801b90a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b90c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b910:	2b00      	cmp	r3, #0
 801b912:	da0a      	bge.n	801b92a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b914:	693b      	ldr	r3, [r7, #16]
 801b916:	3b01      	subs	r3, #1
 801b918:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b91a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b91e:	b29b      	uxth	r3, r3
 801b920:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801b924:	b29b      	uxth	r3, r3
 801b926:	b21b      	sxth	r3, r3
 801b928:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	461a      	mov	r2, r3
 801b92e:	f107 0310 	add.w	r3, r7, #16
 801b932:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b936:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b93a:	68f8      	ldr	r0, [r7, #12]
 801b93c:	371c      	adds	r7, #28
 801b93e:	46bd      	mov	sp, r7
 801b940:	bc80      	pop	{r7}
 801b942:	b002      	add	sp, #8
 801b944:	4770      	bx	lr
	...

0801b948 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	b088      	sub	sp, #32
 801b94c:	af02      	add	r7, sp, #8
 801b94e:	463b      	mov	r3, r7
 801b950:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b954:	2300      	movs	r3, #0
 801b956:	60bb      	str	r3, [r7, #8]
 801b958:	2300      	movs	r3, #0
 801b95a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b95c:	4b10      	ldr	r3, [pc, #64]	; (801b9a0 <SysTimeSet+0x58>)
 801b95e:	691b      	ldr	r3, [r3, #16]
 801b960:	f107 0208 	add.w	r2, r7, #8
 801b964:	3204      	adds	r2, #4
 801b966:	4610      	mov	r0, r2
 801b968:	4798      	blx	r3
 801b96a:	4603      	mov	r3, r0
 801b96c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b96e:	f107 0010 	add.w	r0, r7, #16
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	9300      	str	r3, [sp, #0]
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	463a      	mov	r2, r7
 801b97a:	ca06      	ldmia	r2, {r1, r2}
 801b97c:	f7ff ffab 	bl	801b8d6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b980:	4b07      	ldr	r3, [pc, #28]	; (801b9a0 <SysTimeSet+0x58>)
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	693a      	ldr	r2, [r7, #16]
 801b986:	4610      	mov	r0, r2
 801b988:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b98a:	4b05      	ldr	r3, [pc, #20]	; (801b9a0 <SysTimeSet+0x58>)
 801b98c:	689b      	ldr	r3, [r3, #8]
 801b98e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b992:	4610      	mov	r0, r2
 801b994:	4798      	blx	r3
}
 801b996:	bf00      	nop
 801b998:	3718      	adds	r7, #24
 801b99a:	46bd      	mov	sp, r7
 801b99c:	bd80      	pop	{r7, pc}
 801b99e:	bf00      	nop
 801b9a0:	0801d58c 	.word	0x0801d58c

0801b9a4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b08a      	sub	sp, #40	; 0x28
 801b9a8:	af02      	add	r7, sp, #8
 801b9aa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	61bb      	str	r3, [r7, #24]
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	613b      	str	r3, [r7, #16]
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b9bc:	4b14      	ldr	r3, [pc, #80]	; (801ba10 <SysTimeGet+0x6c>)
 801b9be:	691b      	ldr	r3, [r3, #16]
 801b9c0:	f107 0218 	add.w	r2, r7, #24
 801b9c4:	3204      	adds	r2, #4
 801b9c6:	4610      	mov	r0, r2
 801b9c8:	4798      	blx	r3
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b9ce:	4b10      	ldr	r3, [pc, #64]	; (801ba10 <SysTimeGet+0x6c>)
 801b9d0:	68db      	ldr	r3, [r3, #12]
 801b9d2:	4798      	blx	r3
 801b9d4:	4603      	mov	r3, r0
 801b9d6:	b21b      	sxth	r3, r3
 801b9d8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b9da:	4b0d      	ldr	r3, [pc, #52]	; (801ba10 <SysTimeGet+0x6c>)
 801b9dc:	685b      	ldr	r3, [r3, #4]
 801b9de:	4798      	blx	r3
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b9e4:	f107 0010 	add.w	r0, r7, #16
 801b9e8:	69fb      	ldr	r3, [r7, #28]
 801b9ea:	9300      	str	r3, [sp, #0]
 801b9ec:	69bb      	ldr	r3, [r7, #24]
 801b9ee:	f107 0208 	add.w	r2, r7, #8
 801b9f2:	ca06      	ldmia	r2, {r1, r2}
 801b9f4:	f7ff ff36 	bl	801b864 <SysTimeAdd>

  return sysTime;
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	461a      	mov	r2, r3
 801b9fc:	f107 0310 	add.w	r3, r7, #16
 801ba00:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ba04:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ba08:	6878      	ldr	r0, [r7, #4]
 801ba0a:	3720      	adds	r7, #32
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bd80      	pop	{r7, pc}
 801ba10:	0801d58c 	.word	0x0801d58c

0801ba14 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b084      	sub	sp, #16
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	60bb      	str	r3, [r7, #8]
 801ba20:	2300      	movs	r3, #0
 801ba22:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ba24:	4b0a      	ldr	r3, [pc, #40]	; (801ba50 <SysTimeGetMcuTime+0x3c>)
 801ba26:	691b      	ldr	r3, [r3, #16]
 801ba28:	f107 0208 	add.w	r2, r7, #8
 801ba2c:	3204      	adds	r2, #4
 801ba2e:	4610      	mov	r0, r2
 801ba30:	4798      	blx	r3
 801ba32:	4603      	mov	r3, r0
 801ba34:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	461a      	mov	r2, r3
 801ba3a:	f107 0308 	add.w	r3, r7, #8
 801ba3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ba42:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ba46:	6878      	ldr	r0, [r7, #4]
 801ba48:	3710      	adds	r7, #16
 801ba4a:	46bd      	mov	sp, r7
 801ba4c:	bd80      	pop	{r7, pc}
 801ba4e:	bf00      	nop
 801ba50:	0801d58c 	.word	0x0801d58c

0801ba54 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b088      	sub	sp, #32
 801ba58:	af02      	add	r7, sp, #8
 801ba5a:	463b      	mov	r3, r7
 801ba5c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ba60:	4b0f      	ldr	r3, [pc, #60]	; (801baa0 <SysTimeToMs+0x4c>)
 801ba62:	68db      	ldr	r3, [r3, #12]
 801ba64:	4798      	blx	r3
 801ba66:	4603      	mov	r3, r0
 801ba68:	b21b      	sxth	r3, r3
 801ba6a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ba6c:	4b0c      	ldr	r3, [pc, #48]	; (801baa0 <SysTimeToMs+0x4c>)
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	4798      	blx	r3
 801ba72:	4603      	mov	r3, r0
 801ba74:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801ba76:	f107 0008 	add.w	r0, r7, #8
 801ba7a:	697b      	ldr	r3, [r7, #20]
 801ba7c:	9300      	str	r3, [sp, #0]
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	463a      	mov	r2, r7
 801ba82:	ca06      	ldmia	r2, {r1, r2}
 801ba84:	f7ff ff27 	bl	801b8d6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801ba88:	68bb      	ldr	r3, [r7, #8]
 801ba8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ba8e:	fb02 f303 	mul.w	r3, r2, r3
 801ba92:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801ba96:	4413      	add	r3, r2
}
 801ba98:	4618      	mov	r0, r3
 801ba9a:	3718      	adds	r7, #24
 801ba9c:	46bd      	mov	sp, r7
 801ba9e:	bd80      	pop	{r7, pc}
 801baa0:	0801d58c 	.word	0x0801d58c

0801baa4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b08a      	sub	sp, #40	; 0x28
 801baa8:	af02      	add	r7, sp, #8
 801baaa:	6078      	str	r0, [r7, #4]
 801baac:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801baae:	683b      	ldr	r3, [r7, #0]
 801bab0:	4a19      	ldr	r2, [pc, #100]	; (801bb18 <SysTimeFromMs+0x74>)
 801bab2:	fba2 2303 	umull	r2, r3, r2, r3
 801bab6:	099b      	lsrs	r3, r3, #6
 801bab8:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801baba:	69fb      	ldr	r3, [r7, #28]
 801babc:	617b      	str	r3, [r7, #20]
 801babe:	683b      	ldr	r3, [r7, #0]
 801bac0:	b29a      	uxth	r2, r3
 801bac2:	69fb      	ldr	r3, [r7, #28]
 801bac4:	b29b      	uxth	r3, r3
 801bac6:	4619      	mov	r1, r3
 801bac8:	0149      	lsls	r1, r1, #5
 801baca:	1ac9      	subs	r1, r1, r3
 801bacc:	0089      	lsls	r1, r1, #2
 801bace:	440b      	add	r3, r1
 801bad0:	00db      	lsls	r3, r3, #3
 801bad2:	b29b      	uxth	r3, r3
 801bad4:	1ad3      	subs	r3, r2, r3
 801bad6:	b29b      	uxth	r3, r3
 801bad8:	b21b      	sxth	r3, r3
 801bada:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801badc:	f107 030c 	add.w	r3, r7, #12
 801bae0:	2200      	movs	r2, #0
 801bae2:	601a      	str	r2, [r3, #0]
 801bae4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bae6:	4b0d      	ldr	r3, [pc, #52]	; (801bb1c <SysTimeFromMs+0x78>)
 801bae8:	68db      	ldr	r3, [r3, #12]
 801baea:	4798      	blx	r3
 801baec:	4603      	mov	r3, r0
 801baee:	b21b      	sxth	r3, r3
 801baf0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801baf2:	4b0a      	ldr	r3, [pc, #40]	; (801bb1c <SysTimeFromMs+0x78>)
 801baf4:	685b      	ldr	r3, [r3, #4]
 801baf6:	4798      	blx	r3
 801baf8:	4603      	mov	r3, r0
 801bafa:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801bafc:	6878      	ldr	r0, [r7, #4]
 801bafe:	693b      	ldr	r3, [r7, #16]
 801bb00:	9300      	str	r3, [sp, #0]
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	f107 0214 	add.w	r2, r7, #20
 801bb08:	ca06      	ldmia	r2, {r1, r2}
 801bb0a:	f7ff feab 	bl	801b864 <SysTimeAdd>
}
 801bb0e:	6878      	ldr	r0, [r7, #4]
 801bb10:	3720      	adds	r7, #32
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	10624dd3 	.word	0x10624dd3
 801bb1c:	0801d58c 	.word	0x0801d58c

0801bb20 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801bb20:	b480      	push	{r7}
 801bb22:	b085      	sub	sp, #20
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
  int i = 0;
 801bb28:	2300      	movs	r3, #0
 801bb2a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801bb2c:	e00e      	b.n	801bb4c <ee_skip_atoi+0x2c>
 801bb2e:	68fa      	ldr	r2, [r7, #12]
 801bb30:	4613      	mov	r3, r2
 801bb32:	009b      	lsls	r3, r3, #2
 801bb34:	4413      	add	r3, r2
 801bb36:	005b      	lsls	r3, r3, #1
 801bb38:	4618      	mov	r0, r3
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	1c59      	adds	r1, r3, #1
 801bb40:	687a      	ldr	r2, [r7, #4]
 801bb42:	6011      	str	r1, [r2, #0]
 801bb44:	781b      	ldrb	r3, [r3, #0]
 801bb46:	4403      	add	r3, r0
 801bb48:	3b30      	subs	r3, #48	; 0x30
 801bb4a:	60fb      	str	r3, [r7, #12]
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	2b2f      	cmp	r3, #47	; 0x2f
 801bb54:	d904      	bls.n	801bb60 <ee_skip_atoi+0x40>
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	781b      	ldrb	r3, [r3, #0]
 801bb5c:	2b39      	cmp	r3, #57	; 0x39
 801bb5e:	d9e6      	bls.n	801bb2e <ee_skip_atoi+0xe>
  return i;
 801bb60:	68fb      	ldr	r3, [r7, #12]
}
 801bb62:	4618      	mov	r0, r3
 801bb64:	3714      	adds	r7, #20
 801bb66:	46bd      	mov	sp, r7
 801bb68:	bc80      	pop	{r7}
 801bb6a:	4770      	bx	lr

0801bb6c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bb6c:	b480      	push	{r7}
 801bb6e:	b099      	sub	sp, #100	; 0x64
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	60f8      	str	r0, [r7, #12]
 801bb74:	60b9      	str	r1, [r7, #8]
 801bb76:	607a      	str	r2, [r7, #4]
 801bb78:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bb7a:	4b71      	ldr	r3, [pc, #452]	; (801bd40 <ee_number+0x1d4>)
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bb80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bb82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d002      	beq.n	801bb90 <ee_number+0x24>
 801bb8a:	4b6e      	ldr	r3, [pc, #440]	; (801bd44 <ee_number+0x1d8>)
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bb90:	683b      	ldr	r3, [r7, #0]
 801bb92:	2b01      	cmp	r3, #1
 801bb94:	dd02      	ble.n	801bb9c <ee_number+0x30>
 801bb96:	683b      	ldr	r3, [r7, #0]
 801bb98:	2b24      	cmp	r3, #36	; 0x24
 801bb9a:	dd01      	ble.n	801bba0 <ee_number+0x34>
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	e0ca      	b.n	801bd36 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bba2:	f003 0301 	and.w	r3, r3, #1
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d001      	beq.n	801bbae <ee_number+0x42>
 801bbaa:	2330      	movs	r3, #48	; 0x30
 801bbac:	e000      	b.n	801bbb0 <ee_number+0x44>
 801bbae:	2320      	movs	r3, #32
 801bbb0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801bbba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bbbc:	f003 0302 	and.w	r3, r3, #2
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d00b      	beq.n	801bbdc <ee_number+0x70>
  {
    if (num < 0)
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	da08      	bge.n	801bbdc <ee_number+0x70>
    {
      sign = '-';
 801bbca:	232d      	movs	r3, #45	; 0x2d
 801bbcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	425b      	negs	r3, r3
 801bbd4:	607b      	str	r3, [r7, #4]
      size--;
 801bbd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bbd8:	3b01      	subs	r3, #1
 801bbda:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bbdc:	2300      	movs	r3, #0
 801bbde:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d11e      	bne.n	801bc24 <ee_number+0xb8>
    tmp[i++] = '0';
 801bbe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bbe8:	1c5a      	adds	r2, r3, #1
 801bbea:	657a      	str	r2, [r7, #84]	; 0x54
 801bbec:	3360      	adds	r3, #96	; 0x60
 801bbee:	443b      	add	r3, r7
 801bbf0:	2230      	movs	r2, #48	; 0x30
 801bbf2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bbf6:	e018      	b.n	801bc2a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	683a      	ldr	r2, [r7, #0]
 801bbfc:	fbb3 f1f2 	udiv	r1, r3, r2
 801bc00:	fb01 f202 	mul.w	r2, r1, r2
 801bc04:	1a9b      	subs	r3, r3, r2
 801bc06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bc08:	441a      	add	r2, r3
 801bc0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc0c:	1c59      	adds	r1, r3, #1
 801bc0e:	6579      	str	r1, [r7, #84]	; 0x54
 801bc10:	7812      	ldrb	r2, [r2, #0]
 801bc12:	3360      	adds	r3, #96	; 0x60
 801bc14:	443b      	add	r3, r7
 801bc16:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bc1a:	687a      	ldr	r2, [r7, #4]
 801bc1c:	683b      	ldr	r3, [r7, #0]
 801bc1e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bc22:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d1e6      	bne.n	801bbf8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bc2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bc2e:	429a      	cmp	r2, r3
 801bc30:	dd01      	ble.n	801bc36 <ee_number+0xca>
 801bc32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc34:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801bc36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bc38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bc3a:	1ad3      	subs	r3, r2, r3
 801bc3c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bc3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bc40:	f003 0301 	and.w	r3, r3, #1
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d112      	bne.n	801bc6e <ee_number+0x102>
 801bc48:	e00c      	b.n	801bc64 <ee_number+0xf8>
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	1c5a      	adds	r2, r3, #1
 801bc4e:	60fa      	str	r2, [r7, #12]
 801bc50:	2220      	movs	r2, #32
 801bc52:	701a      	strb	r2, [r3, #0]
 801bc54:	68bb      	ldr	r3, [r7, #8]
 801bc56:	3b01      	subs	r3, #1
 801bc58:	60bb      	str	r3, [r7, #8]
 801bc5a:	68bb      	ldr	r3, [r7, #8]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d101      	bne.n	801bc64 <ee_number+0xf8>
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	e068      	b.n	801bd36 <ee_number+0x1ca>
 801bc64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bc66:	1e5a      	subs	r2, r3, #1
 801bc68:	66ba      	str	r2, [r7, #104]	; 0x68
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	dced      	bgt.n	801bc4a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801bc6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d01b      	beq.n	801bcae <ee_number+0x142>
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	1c5a      	adds	r2, r3, #1
 801bc7a:	60fa      	str	r2, [r7, #12]
 801bc7c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801bc80:	701a      	strb	r2, [r3, #0]
 801bc82:	68bb      	ldr	r3, [r7, #8]
 801bc84:	3b01      	subs	r3, #1
 801bc86:	60bb      	str	r3, [r7, #8]
 801bc88:	68bb      	ldr	r3, [r7, #8]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d10f      	bne.n	801bcae <ee_number+0x142>
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	e051      	b.n	801bd36 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	1c5a      	adds	r2, r3, #1
 801bc96:	60fa      	str	r2, [r7, #12]
 801bc98:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801bc9c:	701a      	strb	r2, [r3, #0]
 801bc9e:	68bb      	ldr	r3, [r7, #8]
 801bca0:	3b01      	subs	r3, #1
 801bca2:	60bb      	str	r3, [r7, #8]
 801bca4:	68bb      	ldr	r3, [r7, #8]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d101      	bne.n	801bcae <ee_number+0x142>
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	e043      	b.n	801bd36 <ee_number+0x1ca>
 801bcae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bcb0:	1e5a      	subs	r2, r3, #1
 801bcb2:	66ba      	str	r2, [r7, #104]	; 0x68
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	dcec      	bgt.n	801bc92 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801bcb8:	e00c      	b.n	801bcd4 <ee_number+0x168>
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	1c5a      	adds	r2, r3, #1
 801bcbe:	60fa      	str	r2, [r7, #12]
 801bcc0:	2230      	movs	r2, #48	; 0x30
 801bcc2:	701a      	strb	r2, [r3, #0]
 801bcc4:	68bb      	ldr	r3, [r7, #8]
 801bcc6:	3b01      	subs	r3, #1
 801bcc8:	60bb      	str	r3, [r7, #8]
 801bcca:	68bb      	ldr	r3, [r7, #8]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d101      	bne.n	801bcd4 <ee_number+0x168>
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	e030      	b.n	801bd36 <ee_number+0x1ca>
 801bcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bcd6:	1e5a      	subs	r2, r3, #1
 801bcd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bcda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bcdc:	429a      	cmp	r2, r3
 801bcde:	dbec      	blt.n	801bcba <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801bce0:	e010      	b.n	801bd04 <ee_number+0x198>
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	1c5a      	adds	r2, r3, #1
 801bce6:	60fa      	str	r2, [r7, #12]
 801bce8:	f107 0110 	add.w	r1, r7, #16
 801bcec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bcee:	440a      	add	r2, r1
 801bcf0:	7812      	ldrb	r2, [r2, #0]
 801bcf2:	701a      	strb	r2, [r3, #0]
 801bcf4:	68bb      	ldr	r3, [r7, #8]
 801bcf6:	3b01      	subs	r3, #1
 801bcf8:	60bb      	str	r3, [r7, #8]
 801bcfa:	68bb      	ldr	r3, [r7, #8]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d101      	bne.n	801bd04 <ee_number+0x198>
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	e018      	b.n	801bd36 <ee_number+0x1ca>
 801bd04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd06:	1e5a      	subs	r2, r3, #1
 801bd08:	657a      	str	r2, [r7, #84]	; 0x54
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	dce9      	bgt.n	801bce2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801bd0e:	e00c      	b.n	801bd2a <ee_number+0x1be>
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	1c5a      	adds	r2, r3, #1
 801bd14:	60fa      	str	r2, [r7, #12]
 801bd16:	2220      	movs	r2, #32
 801bd18:	701a      	strb	r2, [r3, #0]
 801bd1a:	68bb      	ldr	r3, [r7, #8]
 801bd1c:	3b01      	subs	r3, #1
 801bd1e:	60bb      	str	r3, [r7, #8]
 801bd20:	68bb      	ldr	r3, [r7, #8]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d101      	bne.n	801bd2a <ee_number+0x1be>
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	e005      	b.n	801bd36 <ee_number+0x1ca>
 801bd2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bd2c:	1e5a      	subs	r2, r3, #1
 801bd2e:	66ba      	str	r2, [r7, #104]	; 0x68
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	dced      	bgt.n	801bd10 <ee_number+0x1a4>

  return str;
 801bd34:	68fb      	ldr	r3, [r7, #12]
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	3764      	adds	r7, #100	; 0x64
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	bc80      	pop	{r7}
 801bd3e:	4770      	bx	lr
 801bd40:	20000144 	.word	0x20000144
 801bd44:	20000148 	.word	0x20000148

0801bd48 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801bd48:	b580      	push	{r7, lr}
 801bd4a:	b092      	sub	sp, #72	; 0x48
 801bd4c:	af04      	add	r7, sp, #16
 801bd4e:	60f8      	str	r0, [r7, #12]
 801bd50:	60b9      	str	r1, [r7, #8]
 801bd52:	607a      	str	r2, [r7, #4]
 801bd54:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801bd56:	68bb      	ldr	r3, [r7, #8]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	dc01      	bgt.n	801bd60 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	e142      	b.n	801bfe6 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd64:	e12a      	b.n	801bfbc <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801bd66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	1ad2      	subs	r2, r2, r3
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	3b01      	subs	r3, #1
 801bd70:	429a      	cmp	r2, r3
 801bd72:	f280 8131 	bge.w	801bfd8 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	781b      	ldrb	r3, [r3, #0]
 801bd7a:	2b25      	cmp	r3, #37	; 0x25
 801bd7c:	d006      	beq.n	801bd8c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801bd7e:	687a      	ldr	r2, [r7, #4]
 801bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd82:	1c59      	adds	r1, r3, #1
 801bd84:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bd86:	7812      	ldrb	r2, [r2, #0]
 801bd88:	701a      	strb	r2, [r3, #0]
      continue;
 801bd8a:	e114      	b.n	801bfb6 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801bd8c:	2300      	movs	r3, #0
 801bd8e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	3301      	adds	r3, #1
 801bd94:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	781b      	ldrb	r3, [r3, #0]
 801bd9a:	2b30      	cmp	r3, #48	; 0x30
 801bd9c:	d103      	bne.n	801bda6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801bd9e:	6a3b      	ldr	r3, [r7, #32]
 801bda0:	f043 0301 	orr.w	r3, r3, #1
 801bda4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801bda6:	f04f 33ff 	mov.w	r3, #4294967295
 801bdaa:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	781b      	ldrb	r3, [r3, #0]
 801bdb0:	2b2f      	cmp	r3, #47	; 0x2f
 801bdb2:	d908      	bls.n	801bdc6 <tiny_vsnprintf_like+0x7e>
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	781b      	ldrb	r3, [r3, #0]
 801bdb8:	2b39      	cmp	r3, #57	; 0x39
 801bdba:	d804      	bhi.n	801bdc6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801bdbc:	1d3b      	adds	r3, r7, #4
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	f7ff feae 	bl	801bb20 <ee_skip_atoi>
 801bdc4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801bdc6:	f04f 33ff 	mov.w	r3, #4294967295
 801bdca:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801bdcc:	f04f 33ff 	mov.w	r3, #4294967295
 801bdd0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801bdd2:	230a      	movs	r3, #10
 801bdd4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	781b      	ldrb	r3, [r3, #0]
 801bdda:	3b58      	subs	r3, #88	; 0x58
 801bddc:	2b20      	cmp	r3, #32
 801bdde:	f200 8094 	bhi.w	801bf0a <tiny_vsnprintf_like+0x1c2>
 801bde2:	a201      	add	r2, pc, #4	; (adr r2, 801bde8 <tiny_vsnprintf_like+0xa0>)
 801bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bde8:	0801bef3 	.word	0x0801bef3
 801bdec:	0801bf0b 	.word	0x0801bf0b
 801bdf0:	0801bf0b 	.word	0x0801bf0b
 801bdf4:	0801bf0b 	.word	0x0801bf0b
 801bdf8:	0801bf0b 	.word	0x0801bf0b
 801bdfc:	0801bf0b 	.word	0x0801bf0b
 801be00:	0801bf0b 	.word	0x0801bf0b
 801be04:	0801bf0b 	.word	0x0801bf0b
 801be08:	0801bf0b 	.word	0x0801bf0b
 801be0c:	0801bf0b 	.word	0x0801bf0b
 801be10:	0801bf0b 	.word	0x0801bf0b
 801be14:	0801be77 	.word	0x0801be77
 801be18:	0801bf01 	.word	0x0801bf01
 801be1c:	0801bf0b 	.word	0x0801bf0b
 801be20:	0801bf0b 	.word	0x0801bf0b
 801be24:	0801bf0b 	.word	0x0801bf0b
 801be28:	0801bf0b 	.word	0x0801bf0b
 801be2c:	0801bf01 	.word	0x0801bf01
 801be30:	0801bf0b 	.word	0x0801bf0b
 801be34:	0801bf0b 	.word	0x0801bf0b
 801be38:	0801bf0b 	.word	0x0801bf0b
 801be3c:	0801bf0b 	.word	0x0801bf0b
 801be40:	0801bf0b 	.word	0x0801bf0b
 801be44:	0801bf0b 	.word	0x0801bf0b
 801be48:	0801bf0b 	.word	0x0801bf0b
 801be4c:	0801bf0b 	.word	0x0801bf0b
 801be50:	0801bf0b 	.word	0x0801bf0b
 801be54:	0801be97 	.word	0x0801be97
 801be58:	0801bf0b 	.word	0x0801bf0b
 801be5c:	0801bf57 	.word	0x0801bf57
 801be60:	0801bf0b 	.word	0x0801bf0b
 801be64:	0801bf0b 	.word	0x0801bf0b
 801be68:	0801befb 	.word	0x0801befb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801be6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be6e:	1c5a      	adds	r2, r3, #1
 801be70:	62fa      	str	r2, [r7, #44]	; 0x2c
 801be72:	2220      	movs	r2, #32
 801be74:	701a      	strb	r2, [r3, #0]
 801be76:	69fb      	ldr	r3, [r7, #28]
 801be78:	3b01      	subs	r3, #1
 801be7a:	61fb      	str	r3, [r7, #28]
 801be7c:	69fb      	ldr	r3, [r7, #28]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	dcf4      	bgt.n	801be6c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801be82:	683b      	ldr	r3, [r7, #0]
 801be84:	1d1a      	adds	r2, r3, #4
 801be86:	603a      	str	r2, [r7, #0]
 801be88:	6819      	ldr	r1, [r3, #0]
 801be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be8c:	1c5a      	adds	r2, r3, #1
 801be8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801be90:	b2ca      	uxtb	r2, r1
 801be92:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801be94:	e08f      	b.n	801bfb6 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801be96:	683b      	ldr	r3, [r7, #0]
 801be98:	1d1a      	adds	r2, r3, #4
 801be9a:	603a      	str	r2, [r7, #0]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d101      	bne.n	801beaa <tiny_vsnprintf_like+0x162>
 801bea6:	4b52      	ldr	r3, [pc, #328]	; (801bff0 <tiny_vsnprintf_like+0x2a8>)
 801bea8:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801beaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801beac:	f7e4 f964 	bl	8000178 <strlen>
 801beb0:	4603      	mov	r3, r0
 801beb2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801beb4:	e004      	b.n	801bec0 <tiny_vsnprintf_like+0x178>
 801beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beb8:	1c5a      	adds	r2, r3, #1
 801beba:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bebc:	2220      	movs	r2, #32
 801bebe:	701a      	strb	r2, [r3, #0]
 801bec0:	69fb      	ldr	r3, [r7, #28]
 801bec2:	1e5a      	subs	r2, r3, #1
 801bec4:	61fa      	str	r2, [r7, #28]
 801bec6:	693a      	ldr	r2, [r7, #16]
 801bec8:	429a      	cmp	r2, r3
 801beca:	dbf4      	blt.n	801beb6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801becc:	2300      	movs	r3, #0
 801bece:	62bb      	str	r3, [r7, #40]	; 0x28
 801bed0:	e00a      	b.n	801bee8 <tiny_vsnprintf_like+0x1a0>
 801bed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bed4:	1c53      	adds	r3, r2, #1
 801bed6:	627b      	str	r3, [r7, #36]	; 0x24
 801bed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beda:	1c59      	adds	r1, r3, #1
 801bedc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bede:	7812      	ldrb	r2, [r2, #0]
 801bee0:	701a      	strb	r2, [r3, #0]
 801bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bee4:	3301      	adds	r3, #1
 801bee6:	62bb      	str	r3, [r7, #40]	; 0x28
 801bee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801beea:	693b      	ldr	r3, [r7, #16]
 801beec:	429a      	cmp	r2, r3
 801beee:	dbf0      	blt.n	801bed2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801bef0:	e061      	b.n	801bfb6 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801bef2:	6a3b      	ldr	r3, [r7, #32]
 801bef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bef8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801befa:	2310      	movs	r3, #16
 801befc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801befe:	e02d      	b.n	801bf5c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801bf00:	6a3b      	ldr	r3, [r7, #32]
 801bf02:	f043 0302 	orr.w	r3, r3, #2
 801bf06:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801bf08:	e025      	b.n	801bf56 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	781b      	ldrb	r3, [r3, #0]
 801bf0e:	2b25      	cmp	r3, #37	; 0x25
 801bf10:	d004      	beq.n	801bf1c <tiny_vsnprintf_like+0x1d4>
 801bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf14:	1c5a      	adds	r2, r3, #1
 801bf16:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bf18:	2225      	movs	r2, #37	; 0x25
 801bf1a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801bf1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	1ad2      	subs	r2, r2, r3
 801bf22:	68bb      	ldr	r3, [r7, #8]
 801bf24:	3b01      	subs	r3, #1
 801bf26:	429a      	cmp	r2, r3
 801bf28:	da17      	bge.n	801bf5a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	781b      	ldrb	r3, [r3, #0]
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d006      	beq.n	801bf40 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801bf32:	687a      	ldr	r2, [r7, #4]
 801bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf36:	1c59      	adds	r1, r3, #1
 801bf38:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bf3a:	7812      	ldrb	r2, [r2, #0]
 801bf3c:	701a      	strb	r2, [r3, #0]
 801bf3e:	e002      	b.n	801bf46 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	3b01      	subs	r3, #1
 801bf44:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801bf46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	1ad2      	subs	r2, r2, r3
 801bf4c:	68bb      	ldr	r3, [r7, #8]
 801bf4e:	3b01      	subs	r3, #1
 801bf50:	429a      	cmp	r2, r3
 801bf52:	db2f      	blt.n	801bfb4 <tiny_vsnprintf_like+0x26c>
 801bf54:	e002      	b.n	801bf5c <tiny_vsnprintf_like+0x214>
        break;
 801bf56:	bf00      	nop
 801bf58:	e000      	b.n	801bf5c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801bf5a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801bf5c:	697b      	ldr	r3, [r7, #20]
 801bf5e:	2b6c      	cmp	r3, #108	; 0x6c
 801bf60:	d105      	bne.n	801bf6e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801bf62:	683b      	ldr	r3, [r7, #0]
 801bf64:	1d1a      	adds	r2, r3, #4
 801bf66:	603a      	str	r2, [r7, #0]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	637b      	str	r3, [r7, #52]	; 0x34
 801bf6c:	e00f      	b.n	801bf8e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801bf6e:	6a3b      	ldr	r3, [r7, #32]
 801bf70:	f003 0302 	and.w	r3, r3, #2
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d005      	beq.n	801bf84 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801bf78:	683b      	ldr	r3, [r7, #0]
 801bf7a:	1d1a      	adds	r2, r3, #4
 801bf7c:	603a      	str	r2, [r7, #0]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	637b      	str	r3, [r7, #52]	; 0x34
 801bf82:	e004      	b.n	801bf8e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	1d1a      	adds	r2, r3, #4
 801bf88:	603a      	str	r2, [r7, #0]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801bf8e:	68bb      	ldr	r3, [r7, #8]
 801bf90:	1e5a      	subs	r2, r3, #1
 801bf92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	1acb      	subs	r3, r1, r3
 801bf98:	1ad1      	subs	r1, r2, r3
 801bf9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bf9c:	6a3b      	ldr	r3, [r7, #32]
 801bf9e:	9302      	str	r3, [sp, #8]
 801bfa0:	69bb      	ldr	r3, [r7, #24]
 801bfa2:	9301      	str	r3, [sp, #4]
 801bfa4:	69fb      	ldr	r3, [r7, #28]
 801bfa6:	9300      	str	r3, [sp, #0]
 801bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bfac:	f7ff fdde 	bl	801bb6c <ee_number>
 801bfb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 801bfb2:	e000      	b.n	801bfb6 <tiny_vsnprintf_like+0x26e>
        continue;
 801bfb4:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	3301      	adds	r3, #1
 801bfba:	607b      	str	r3, [r7, #4]
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	781b      	ldrb	r3, [r3, #0]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	f47f aed0 	bne.w	801bd66 <tiny_vsnprintf_like+0x1e>
 801bfc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	1ad2      	subs	r2, r2, r3
 801bfcc:	68bb      	ldr	r3, [r7, #8]
 801bfce:	3b01      	subs	r3, #1
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	f6bf aec8 	bge.w	801bd66 <tiny_vsnprintf_like+0x1e>
 801bfd6:	e000      	b.n	801bfda <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801bfd8:	bf00      	nop
  }

  *str = '\0';
 801bfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfdc:	2200      	movs	r2, #0
 801bfde:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801bfe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	1ad3      	subs	r3, r2, r3
}
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	3738      	adds	r7, #56	; 0x38
 801bfea:	46bd      	mov	sp, r7
 801bfec:	bd80      	pop	{r7, pc}
 801bfee:	bf00      	nop
 801bff0:	0801d4a0 	.word	0x0801d4a0

0801bff4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b090      	sub	sp, #64	; 0x40
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801bffc:	4b73      	ldr	r3, [pc, #460]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c002:	4b72      	ldr	r3, [pc, #456]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801c004:	681a      	ldr	r2, [r3, #0]
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	4013      	ands	r3, r2
 801c00a:	4a70      	ldr	r2, [pc, #448]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801c00c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c00e:	4b70      	ldr	r3, [pc, #448]	; (801c1d0 <UTIL_SEQ_Run+0x1dc>)
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c014:	4b6f      	ldr	r3, [pc, #444]	; (801c1d4 <UTIL_SEQ_Run+0x1e0>)
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c01a:	4b6f      	ldr	r3, [pc, #444]	; (801c1d8 <UTIL_SEQ_Run+0x1e4>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801c020:	4b6e      	ldr	r3, [pc, #440]	; (801c1dc <UTIL_SEQ_Run+0x1e8>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c026:	e08d      	b.n	801c144 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c028:	2300      	movs	r3, #0
 801c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c02c:	e002      	b.n	801c034 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c030:	3301      	adds	r3, #1
 801c032:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c034:	4a6a      	ldr	r2, [pc, #424]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c038:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c03e:	401a      	ands	r2, r3
 801c040:	4b62      	ldr	r3, [pc, #392]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	4013      	ands	r3, r2
 801c046:	2b00      	cmp	r3, #0
 801c048:	d0f1      	beq.n	801c02e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c04a:	4a65      	ldr	r2, [pc, #404]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c04e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c054:	401a      	ands	r2, r3
 801c056:	4b5d      	ldr	r3, [pc, #372]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	4013      	ands	r3, r2
 801c05c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c05e:	4a60      	ldr	r2, [pc, #384]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c062:	00db      	lsls	r3, r3, #3
 801c064:	4413      	add	r3, r2
 801c066:	685a      	ldr	r2, [r3, #4]
 801c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c06a:	4013      	ands	r3, r2
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d106      	bne.n	801c07e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c070:	4a5b      	ldr	r2, [pc, #364]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c074:	00db      	lsls	r3, r3, #3
 801c076:	4413      	add	r3, r2
 801c078:	f04f 32ff 	mov.w	r2, #4294967295
 801c07c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c07e:	4a58      	ldr	r2, [pc, #352]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c082:	00db      	lsls	r3, r3, #3
 801c084:	4413      	add	r3, r2
 801c086:	685a      	ldr	r2, [r3, #4]
 801c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c08a:	4013      	ands	r3, r2
 801c08c:	4618      	mov	r0, r3
 801c08e:	f000 f907 	bl	801c2a0 <SEQ_BitPosition>
 801c092:	4603      	mov	r3, r0
 801c094:	461a      	mov	r2, r3
 801c096:	4b53      	ldr	r3, [pc, #332]	; (801c1e4 <UTIL_SEQ_Run+0x1f0>)
 801c098:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c09a:	4a51      	ldr	r2, [pc, #324]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c09e:	00db      	lsls	r3, r3, #3
 801c0a0:	4413      	add	r3, r2
 801c0a2:	685a      	ldr	r2, [r3, #4]
 801c0a4:	4b4f      	ldr	r3, [pc, #316]	; (801c1e4 <UTIL_SEQ_Run+0x1f0>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	2101      	movs	r1, #1
 801c0aa:	fa01 f303 	lsl.w	r3, r1, r3
 801c0ae:	43db      	mvns	r3, r3
 801c0b0:	401a      	ands	r2, r3
 801c0b2:	494b      	ldr	r1, [pc, #300]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0b6:	00db      	lsls	r3, r3, #3
 801c0b8:	440b      	add	r3, r1
 801c0ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0bc:	f3ef 8310 	mrs	r3, PRIMASK
 801c0c0:	61bb      	str	r3, [r7, #24]
  return(result);
 801c0c2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c0c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0c6:	b672      	cpsid	i
}
 801c0c8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c0ca:	4b46      	ldr	r3, [pc, #280]	; (801c1e4 <UTIL_SEQ_Run+0x1f0>)
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	2201      	movs	r2, #1
 801c0d0:	fa02 f303 	lsl.w	r3, r2, r3
 801c0d4:	43da      	mvns	r2, r3
 801c0d6:	4b3e      	ldr	r3, [pc, #248]	; (801c1d0 <UTIL_SEQ_Run+0x1dc>)
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	4013      	ands	r3, r2
 801c0dc:	4a3c      	ldr	r2, [pc, #240]	; (801c1d0 <UTIL_SEQ_Run+0x1dc>)
 801c0de:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c0e0:	2301      	movs	r3, #1
 801c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c0e4:	e013      	b.n	801c10e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0e8:	3b01      	subs	r3, #1
 801c0ea:	4a3d      	ldr	r2, [pc, #244]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c0ec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c0f0:	4b3c      	ldr	r3, [pc, #240]	; (801c1e4 <UTIL_SEQ_Run+0x1f0>)
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	2201      	movs	r2, #1
 801c0f6:	fa02 f303 	lsl.w	r3, r2, r3
 801c0fa:	43da      	mvns	r2, r3
 801c0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0fe:	3b01      	subs	r3, #1
 801c100:	400a      	ands	r2, r1
 801c102:	4937      	ldr	r1, [pc, #220]	; (801c1e0 <UTIL_SEQ_Run+0x1ec>)
 801c104:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c10a:	3b01      	subs	r3, #1
 801c10c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c110:	2b00      	cmp	r3, #0
 801c112:	d1e8      	bne.n	801c0e6 <UTIL_SEQ_Run+0xf2>
 801c114:	6a3b      	ldr	r3, [r7, #32]
 801c116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	f383 8810 	msr	PRIMASK, r3
}
 801c11e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c120:	4b30      	ldr	r3, [pc, #192]	; (801c1e4 <UTIL_SEQ_Run+0x1f0>)
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	4a30      	ldr	r2, [pc, #192]	; (801c1e8 <UTIL_SEQ_Run+0x1f4>)
 801c126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c12a:	4798      	blx	r3

    local_taskset = TaskSet;
 801c12c:	4b28      	ldr	r3, [pc, #160]	; (801c1d0 <UTIL_SEQ_Run+0x1dc>)
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801c132:	4b28      	ldr	r3, [pc, #160]	; (801c1d4 <UTIL_SEQ_Run+0x1e0>)
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801c138:	4b27      	ldr	r3, [pc, #156]	; (801c1d8 <UTIL_SEQ_Run+0x1e4>)
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801c13e:	4b27      	ldr	r3, [pc, #156]	; (801c1dc <UTIL_SEQ_Run+0x1e8>)
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c148:	401a      	ands	r2, r3
 801c14a:	4b20      	ldr	r3, [pc, #128]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	4013      	ands	r3, r2
 801c150:	2b00      	cmp	r3, #0
 801c152:	d005      	beq.n	801c160 <UTIL_SEQ_Run+0x16c>
 801c154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c158:	4013      	ands	r3, r2
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	f43f af64 	beq.w	801c028 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c160:	4b20      	ldr	r3, [pc, #128]	; (801c1e4 <UTIL_SEQ_Run+0x1f0>)
 801c162:	f04f 32ff 	mov.w	r2, #4294967295
 801c166:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c168:	f000 f88e 	bl	801c288 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c16c:	f3ef 8310 	mrs	r3, PRIMASK
 801c170:	613b      	str	r3, [r7, #16]
  return(result);
 801c172:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c176:	b672      	cpsid	i
}
 801c178:	bf00      	nop
  local_taskset = TaskSet;
 801c17a:	4b15      	ldr	r3, [pc, #84]	; (801c1d0 <UTIL_SEQ_Run+0x1dc>)
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c180:	4b14      	ldr	r3, [pc, #80]	; (801c1d4 <UTIL_SEQ_Run+0x1e0>)
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c186:	4b14      	ldr	r3, [pc, #80]	; (801c1d8 <UTIL_SEQ_Run+0x1e4>)
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c18c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c190:	401a      	ands	r2, r3
 801c192:	4b0e      	ldr	r3, [pc, #56]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	4013      	ands	r3, r2
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d107      	bne.n	801c1ac <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c19c:	4b0f      	ldr	r3, [pc, #60]	; (801c1dc <UTIL_SEQ_Run+0x1e8>)
 801c19e:	681a      	ldr	r2, [r3, #0]
 801c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1a2:	4013      	ands	r3, r2
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d101      	bne.n	801c1ac <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c1a8:	f7e6 f882 	bl	80022b0 <UTIL_SEQ_Idle>
 801c1ac:	69fb      	ldr	r3, [r7, #28]
 801c1ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	f383 8810 	msr	PRIMASK, r3
}
 801c1b6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c1b8:	f000 f86c 	bl	801c294 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c1bc:	4a03      	ldr	r2, [pc, #12]	; (801c1cc <UTIL_SEQ_Run+0x1d8>)
 801c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1c0:	6013      	str	r3, [r2, #0]

  return;
 801c1c2:	bf00      	nop
}
 801c1c4:	3740      	adds	r7, #64	; 0x40
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	20000150 	.word	0x20000150
 801c1d0:	20002368 	.word	0x20002368
 801c1d4:	2000236c 	.word	0x2000236c
 801c1d8:	2000014c 	.word	0x2000014c
 801c1dc:	20002370 	.word	0x20002370
 801c1e0:	20002388 	.word	0x20002388
 801c1e4:	20002374 	.word	0x20002374
 801c1e8:	20002378 	.word	0x20002378

0801c1ec <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b088      	sub	sp, #32
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	60f8      	str	r0, [r7, #12]
 801c1f4:	60b9      	str	r1, [r7, #8]
 801c1f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1f8:	f3ef 8310 	mrs	r3, PRIMASK
 801c1fc:	617b      	str	r3, [r7, #20]
  return(result);
 801c1fe:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c202:	b672      	cpsid	i
}
 801c204:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c206:	68f8      	ldr	r0, [r7, #12]
 801c208:	f000 f84a 	bl	801c2a0 <SEQ_BitPosition>
 801c20c:	4603      	mov	r3, r0
 801c20e:	4619      	mov	r1, r3
 801c210:	4a06      	ldr	r2, [pc, #24]	; (801c22c <UTIL_SEQ_RegTask+0x40>)
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c218:	69fb      	ldr	r3, [r7, #28]
 801c21a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c21c:	69bb      	ldr	r3, [r7, #24]
 801c21e:	f383 8810 	msr	PRIMASK, r3
}
 801c222:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c224:	bf00      	nop
}
 801c226:	3720      	adds	r7, #32
 801c228:	46bd      	mov	sp, r7
 801c22a:	bd80      	pop	{r7, pc}
 801c22c:	20002378 	.word	0x20002378

0801c230 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c230:	b480      	push	{r7}
 801c232:	b087      	sub	sp, #28
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
 801c238:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c23a:	f3ef 8310 	mrs	r3, PRIMASK
 801c23e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c240:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c244:	b672      	cpsid	i
}
 801c246:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c248:	4b0d      	ldr	r3, [pc, #52]	; (801c280 <UTIL_SEQ_SetTask+0x50>)
 801c24a:	681a      	ldr	r2, [r3, #0]
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	4313      	orrs	r3, r2
 801c250:	4a0b      	ldr	r2, [pc, #44]	; (801c280 <UTIL_SEQ_SetTask+0x50>)
 801c252:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c254:	4a0b      	ldr	r2, [pc, #44]	; (801c284 <UTIL_SEQ_SetTask+0x54>)
 801c256:	683b      	ldr	r3, [r7, #0]
 801c258:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	431a      	orrs	r2, r3
 801c260:	4908      	ldr	r1, [pc, #32]	; (801c284 <UTIL_SEQ_SetTask+0x54>)
 801c262:	683b      	ldr	r3, [r7, #0]
 801c264:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c268:	697b      	ldr	r3, [r7, #20]
 801c26a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c26c:	693b      	ldr	r3, [r7, #16]
 801c26e:	f383 8810 	msr	PRIMASK, r3
}
 801c272:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c274:	bf00      	nop
}
 801c276:	371c      	adds	r7, #28
 801c278:	46bd      	mov	sp, r7
 801c27a:	bc80      	pop	{r7}
 801c27c:	4770      	bx	lr
 801c27e:	bf00      	nop
 801c280:	20002368 	.word	0x20002368
 801c284:	20002388 	.word	0x20002388

0801c288 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c288:	b480      	push	{r7}
 801c28a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c28c:	bf00      	nop
}
 801c28e:	46bd      	mov	sp, r7
 801c290:	bc80      	pop	{r7}
 801c292:	4770      	bx	lr

0801c294 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c294:	b480      	push	{r7}
 801c296:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c298:	bf00      	nop
}
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bc80      	pop	{r7}
 801c29e:	4770      	bx	lr

0801c2a0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c2a0:	b480      	push	{r7}
 801c2a2:	b085      	sub	sp, #20
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c2a8:	2300      	movs	r3, #0
 801c2aa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	0c1b      	lsrs	r3, r3, #16
 801c2b4:	041b      	lsls	r3, r3, #16
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d104      	bne.n	801c2c4 <SEQ_BitPosition+0x24>
 801c2ba:	2310      	movs	r3, #16
 801c2bc:	73fb      	strb	r3, [r7, #15]
 801c2be:	68bb      	ldr	r3, [r7, #8]
 801c2c0:	041b      	lsls	r3, r3, #16
 801c2c2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c2c4:	68bb      	ldr	r3, [r7, #8]
 801c2c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d105      	bne.n	801c2da <SEQ_BitPosition+0x3a>
 801c2ce:	7bfb      	ldrb	r3, [r7, #15]
 801c2d0:	3308      	adds	r3, #8
 801c2d2:	73fb      	strb	r3, [r7, #15]
 801c2d4:	68bb      	ldr	r3, [r7, #8]
 801c2d6:	021b      	lsls	r3, r3, #8
 801c2d8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c2da:	68bb      	ldr	r3, [r7, #8]
 801c2dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d105      	bne.n	801c2f0 <SEQ_BitPosition+0x50>
 801c2e4:	7bfb      	ldrb	r3, [r7, #15]
 801c2e6:	3304      	adds	r3, #4
 801c2e8:	73fb      	strb	r3, [r7, #15]
 801c2ea:	68bb      	ldr	r3, [r7, #8]
 801c2ec:	011b      	lsls	r3, r3, #4
 801c2ee:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c2f0:	68bb      	ldr	r3, [r7, #8]
 801c2f2:	0f1b      	lsrs	r3, r3, #28
 801c2f4:	4a06      	ldr	r2, [pc, #24]	; (801c310 <SEQ_BitPosition+0x70>)
 801c2f6:	5cd2      	ldrb	r2, [r2, r3]
 801c2f8:	7bfb      	ldrb	r3, [r7, #15]
 801c2fa:	4413      	add	r3, r2
 801c2fc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c2fe:	7bfb      	ldrb	r3, [r7, #15]
 801c300:	f1c3 031f 	rsb	r3, r3, #31
 801c304:	b2db      	uxtb	r3, r3
}
 801c306:	4618      	mov	r0, r3
 801c308:	3714      	adds	r7, #20
 801c30a:	46bd      	mov	sp, r7
 801c30c:	bc80      	pop	{r7}
 801c30e:	4770      	bx	lr
 801c310:	0801da58 	.word	0x0801da58

0801c314 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c314:	b580      	push	{r7, lr}
 801c316:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c318:	4b04      	ldr	r3, [pc, #16]	; (801c32c <UTIL_TIMER_Init+0x18>)
 801c31a:	2200      	movs	r2, #0
 801c31c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c31e:	4b04      	ldr	r3, [pc, #16]	; (801c330 <UTIL_TIMER_Init+0x1c>)
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	4798      	blx	r3
 801c324:	4603      	mov	r3, r0
}
 801c326:	4618      	mov	r0, r3
 801c328:	bd80      	pop	{r7, pc}
 801c32a:	bf00      	nop
 801c32c:	20002390 	.word	0x20002390
 801c330:	0801d560 	.word	0x0801d560

0801c334 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b084      	sub	sp, #16
 801c338:	af00      	add	r7, sp, #0
 801c33a:	60f8      	str	r0, [r7, #12]
 801c33c:	60b9      	str	r1, [r7, #8]
 801c33e:	603b      	str	r3, [r7, #0]
 801c340:	4613      	mov	r3, r2
 801c342:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d023      	beq.n	801c392 <UTIL_TIMER_Create+0x5e>
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d020      	beq.n	801c392 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	2200      	movs	r2, #0
 801c354:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c356:	4b11      	ldr	r3, [pc, #68]	; (801c39c <UTIL_TIMER_Create+0x68>)
 801c358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c35a:	68b8      	ldr	r0, [r7, #8]
 801c35c:	4798      	blx	r3
 801c35e:	4602      	mov	r2, r0
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	2200      	movs	r2, #0
 801c368:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	2200      	movs	r2, #0
 801c36e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	2200      	movs	r2, #0
 801c374:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	683a      	ldr	r2, [r7, #0]
 801c37a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	69ba      	ldr	r2, [r7, #24]
 801c380:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	79fa      	ldrb	r2, [r7, #7]
 801c386:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	2200      	movs	r2, #0
 801c38c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c38e:	2300      	movs	r3, #0
 801c390:	e000      	b.n	801c394 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c392:	2301      	movs	r3, #1
  }
}
 801c394:	4618      	mov	r0, r3
 801c396:	3710      	adds	r7, #16
 801c398:	46bd      	mov	sp, r7
 801c39a:	bd80      	pop	{r7, pc}
 801c39c:	0801d560 	.word	0x0801d560

0801c3a0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b08a      	sub	sp, #40	; 0x28
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d056      	beq.n	801c462 <UTIL_TIMER_Start+0xc2>
 801c3b4:	6878      	ldr	r0, [r7, #4]
 801c3b6:	f000 f9a9 	bl	801c70c <TimerExists>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	f083 0301 	eor.w	r3, r3, #1
 801c3c0:	b2db      	uxtb	r3, r3
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d04d      	beq.n	801c462 <UTIL_TIMER_Start+0xc2>
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	7a5b      	ldrb	r3, [r3, #9]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d149      	bne.n	801c462 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3ce:	f3ef 8310 	mrs	r3, PRIMASK
 801c3d2:	613b      	str	r3, [r7, #16]
  return(result);
 801c3d4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c3d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3d8:	b672      	cpsid	i
}
 801c3da:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	685b      	ldr	r3, [r3, #4]
 801c3e0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c3e2:	4b24      	ldr	r3, [pc, #144]	; (801c474 <UTIL_TIMER_Start+0xd4>)
 801c3e4:	6a1b      	ldr	r3, [r3, #32]
 801c3e6:	4798      	blx	r3
 801c3e8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c3ea:	6a3a      	ldr	r2, [r7, #32]
 801c3ec:	69bb      	ldr	r3, [r7, #24]
 801c3ee:	429a      	cmp	r2, r3
 801c3f0:	d201      	bcs.n	801c3f6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c3f2:	69bb      	ldr	r3, [r7, #24]
 801c3f4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	6a3a      	ldr	r2, [r7, #32]
 801c3fa:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	2200      	movs	r2, #0
 801c400:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	2201      	movs	r2, #1
 801c406:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	2200      	movs	r2, #0
 801c40c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c40e:	4b1a      	ldr	r3, [pc, #104]	; (801c478 <UTIL_TIMER_Start+0xd8>)
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d106      	bne.n	801c424 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c416:	4b17      	ldr	r3, [pc, #92]	; (801c474 <UTIL_TIMER_Start+0xd4>)
 801c418:	691b      	ldr	r3, [r3, #16]
 801c41a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c41c:	6878      	ldr	r0, [r7, #4]
 801c41e:	f000 f9eb 	bl	801c7f8 <TimerInsertNewHeadTimer>
 801c422:	e017      	b.n	801c454 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c424:	4b13      	ldr	r3, [pc, #76]	; (801c474 <UTIL_TIMER_Start+0xd4>)
 801c426:	699b      	ldr	r3, [r3, #24]
 801c428:	4798      	blx	r3
 801c42a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681a      	ldr	r2, [r3, #0]
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	441a      	add	r2, r3
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	681a      	ldr	r2, [r3, #0]
 801c43c:	4b0e      	ldr	r3, [pc, #56]	; (801c478 <UTIL_TIMER_Start+0xd8>)
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	429a      	cmp	r2, r3
 801c444:	d203      	bcs.n	801c44e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c446:	6878      	ldr	r0, [r7, #4]
 801c448:	f000 f9d6 	bl	801c7f8 <TimerInsertNewHeadTimer>
 801c44c:	e002      	b.n	801c454 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c44e:	6878      	ldr	r0, [r7, #4]
 801c450:	f000 f9a2 	bl	801c798 <TimerInsertTimer>
 801c454:	69fb      	ldr	r3, [r7, #28]
 801c456:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	f383 8810 	msr	PRIMASK, r3
}
 801c45e:	bf00      	nop
  {
 801c460:	e002      	b.n	801c468 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c462:	2301      	movs	r3, #1
 801c464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801c468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c46c:	4618      	mov	r0, r3
 801c46e:	3728      	adds	r7, #40	; 0x28
 801c470:	46bd      	mov	sp, r7
 801c472:	bd80      	pop	{r7, pc}
 801c474:	0801d560 	.word	0x0801d560
 801c478:	20002390 	.word	0x20002390

0801c47c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c47c:	b580      	push	{r7, lr}
 801c47e:	b088      	sub	sp, #32
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c484:	2300      	movs	r3, #0
 801c486:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d05b      	beq.n	801c546 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c48e:	f3ef 8310 	mrs	r3, PRIMASK
 801c492:	60fb      	str	r3, [r7, #12]
  return(result);
 801c494:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c498:	b672      	cpsid	i
}
 801c49a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c49c:	4b2d      	ldr	r3, [pc, #180]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c4a2:	4b2c      	ldr	r3, [pc, #176]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	2201      	movs	r2, #1
 801c4ac:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c4ae:	4b29      	ldr	r3, [pc, #164]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d041      	beq.n	801c53a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	2200      	movs	r2, #0
 801c4ba:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c4bc:	4b25      	ldr	r3, [pc, #148]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	687a      	ldr	r2, [r7, #4]
 801c4c2:	429a      	cmp	r2, r3
 801c4c4:	d134      	bne.n	801c530 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c4c6:	4b23      	ldr	r3, [pc, #140]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c4ce:	4b21      	ldr	r3, [pc, #132]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	695b      	ldr	r3, [r3, #20]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d00a      	beq.n	801c4ee <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c4d8:	4b1e      	ldr	r3, [pc, #120]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	695b      	ldr	r3, [r3, #20]
 801c4de:	4a1d      	ldr	r2, [pc, #116]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4e0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c4e2:	4b1c      	ldr	r3, [pc, #112]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	4618      	mov	r0, r3
 801c4e8:	f000 f92c 	bl	801c744 <TimerSetTimeout>
 801c4ec:	e023      	b.n	801c536 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c4ee:	4b1a      	ldr	r3, [pc, #104]	; (801c558 <UTIL_TIMER_Stop+0xdc>)
 801c4f0:	68db      	ldr	r3, [r3, #12]
 801c4f2:	4798      	blx	r3
            TimerListHead = NULL;
 801c4f4:	4b17      	ldr	r3, [pc, #92]	; (801c554 <UTIL_TIMER_Stop+0xd8>)
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	601a      	str	r2, [r3, #0]
 801c4fa:	e01c      	b.n	801c536 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c4fc:	697a      	ldr	r2, [r7, #20]
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	429a      	cmp	r2, r3
 801c502:	d110      	bne.n	801c526 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c504:	697b      	ldr	r3, [r7, #20]
 801c506:	695b      	ldr	r3, [r3, #20]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d006      	beq.n	801c51a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c50c:	697b      	ldr	r3, [r7, #20]
 801c50e:	695b      	ldr	r3, [r3, #20]
 801c510:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c512:	69bb      	ldr	r3, [r7, #24]
 801c514:	697a      	ldr	r2, [r7, #20]
 801c516:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c518:	e00d      	b.n	801c536 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c51a:	2300      	movs	r3, #0
 801c51c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	697a      	ldr	r2, [r7, #20]
 801c522:	615a      	str	r2, [r3, #20]
            break;
 801c524:	e007      	b.n	801c536 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c526:	697b      	ldr	r3, [r7, #20]
 801c528:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c52a:	697b      	ldr	r3, [r7, #20]
 801c52c:	695b      	ldr	r3, [r3, #20]
 801c52e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c530:	697b      	ldr	r3, [r7, #20]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d1e2      	bne.n	801c4fc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c536:	2300      	movs	r3, #0
 801c538:	77fb      	strb	r3, [r7, #31]
 801c53a:	693b      	ldr	r3, [r7, #16]
 801c53c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c53e:	68bb      	ldr	r3, [r7, #8]
 801c540:	f383 8810 	msr	PRIMASK, r3
}
 801c544:	e001      	b.n	801c54a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c546:	2301      	movs	r3, #1
 801c548:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c54a:	7ffb      	ldrb	r3, [r7, #31]
}
 801c54c:	4618      	mov	r0, r3
 801c54e:	3720      	adds	r7, #32
 801c550:	46bd      	mov	sp, r7
 801c552:	bd80      	pop	{r7, pc}
 801c554:	20002390 	.word	0x20002390
 801c558:	0801d560 	.word	0x0801d560

0801c55c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b084      	sub	sp, #16
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
 801c564:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c566:	2300      	movs	r3, #0
 801c568:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d102      	bne.n	801c576 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c570:	2301      	movs	r3, #1
 801c572:	73fb      	strb	r3, [r7, #15]
 801c574:	e014      	b.n	801c5a0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c576:	4b0d      	ldr	r3, [pc, #52]	; (801c5ac <UTIL_TIMER_SetPeriod+0x50>)
 801c578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c57a:	6838      	ldr	r0, [r7, #0]
 801c57c:	4798      	blx	r3
 801c57e:	4602      	mov	r2, r0
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c584:	6878      	ldr	r0, [r7, #4]
 801c586:	f000 f8c1 	bl	801c70c <TimerExists>
 801c58a:	4603      	mov	r3, r0
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d007      	beq.n	801c5a0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c590:	6878      	ldr	r0, [r7, #4]
 801c592:	f7ff ff73 	bl	801c47c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c596:	6878      	ldr	r0, [r7, #4]
 801c598:	f7ff ff02 	bl	801c3a0 <UTIL_TIMER_Start>
 801c59c:	4603      	mov	r3, r0
 801c59e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	3710      	adds	r7, #16
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	bd80      	pop	{r7, pc}
 801c5aa:	bf00      	nop
 801c5ac:	0801d560 	.word	0x0801d560

0801c5b0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c5b0:	b590      	push	{r4, r7, lr}
 801c5b2:	b089      	sub	sp, #36	; 0x24
 801c5b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5b6:	f3ef 8310 	mrs	r3, PRIMASK
 801c5ba:	60bb      	str	r3, [r7, #8]
  return(result);
 801c5bc:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c5be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5c0:	b672      	cpsid	i
}
 801c5c2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c5c4:	4b38      	ldr	r3, [pc, #224]	; (801c6a8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c5c6:	695b      	ldr	r3, [r3, #20]
 801c5c8:	4798      	blx	r3
 801c5ca:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c5cc:	4b36      	ldr	r3, [pc, #216]	; (801c6a8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c5ce:	691b      	ldr	r3, [r3, #16]
 801c5d0:	4798      	blx	r3
 801c5d2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c5d4:	693a      	ldr	r2, [r7, #16]
 801c5d6:	697b      	ldr	r3, [r7, #20]
 801c5d8:	1ad3      	subs	r3, r2, r3
 801c5da:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c5dc:	4b33      	ldr	r3, [pc, #204]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d037      	beq.n	801c654 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c5e4:	4b31      	ldr	r3, [pc, #196]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c5ea:	69fb      	ldr	r3, [r7, #28]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	68fa      	ldr	r2, [r7, #12]
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	d206      	bcs.n	801c602 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c5f4:	69fb      	ldr	r3, [r7, #28]
 801c5f6:	681a      	ldr	r2, [r3, #0]
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	1ad2      	subs	r2, r2, r3
 801c5fc:	69fb      	ldr	r3, [r7, #28]
 801c5fe:	601a      	str	r2, [r3, #0]
 801c600:	e002      	b.n	801c608 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c602:	69fb      	ldr	r3, [r7, #28]
 801c604:	2200      	movs	r2, #0
 801c606:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c608:	69fb      	ldr	r3, [r7, #28]
 801c60a:	695b      	ldr	r3, [r3, #20]
 801c60c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c60e:	69fb      	ldr	r3, [r7, #28]
 801c610:	2b00      	cmp	r3, #0
 801c612:	d1ea      	bne.n	801c5ea <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c614:	e01e      	b.n	801c654 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c616:	4b25      	ldr	r3, [pc, #148]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c61c:	4b23      	ldr	r3, [pc, #140]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	695b      	ldr	r3, [r3, #20]
 801c622:	4a22      	ldr	r2, [pc, #136]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c624:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c626:	69fb      	ldr	r3, [r7, #28]
 801c628:	2200      	movs	r2, #0
 801c62a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c62c:	69fb      	ldr	r3, [r7, #28]
 801c62e:	2200      	movs	r2, #0
 801c630:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c632:	69fb      	ldr	r3, [r7, #28]
 801c634:	68db      	ldr	r3, [r3, #12]
 801c636:	69fa      	ldr	r2, [r7, #28]
 801c638:	6912      	ldr	r2, [r2, #16]
 801c63a:	4610      	mov	r0, r2
 801c63c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c63e:	69fb      	ldr	r3, [r7, #28]
 801c640:	7adb      	ldrb	r3, [r3, #11]
 801c642:	2b01      	cmp	r3, #1
 801c644:	d106      	bne.n	801c654 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c646:	69fb      	ldr	r3, [r7, #28]
 801c648:	7a9b      	ldrb	r3, [r3, #10]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d102      	bne.n	801c654 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c64e:	69f8      	ldr	r0, [r7, #28]
 801c650:	f7ff fea6 	bl	801c3a0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c654:	4b15      	ldr	r3, [pc, #84]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d00d      	beq.n	801c678 <UTIL_TIMER_IRQ_Handler+0xc8>
 801c65c:	4b13      	ldr	r3, [pc, #76]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d0d7      	beq.n	801c616 <UTIL_TIMER_IRQ_Handler+0x66>
 801c666:	4b11      	ldr	r3, [pc, #68]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	681c      	ldr	r4, [r3, #0]
 801c66c:	4b0e      	ldr	r3, [pc, #56]	; (801c6a8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c66e:	699b      	ldr	r3, [r3, #24]
 801c670:	4798      	blx	r3
 801c672:	4603      	mov	r3, r0
 801c674:	429c      	cmp	r4, r3
 801c676:	d3ce      	bcc.n	801c616 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c678:	4b0c      	ldr	r3, [pc, #48]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d009      	beq.n	801c694 <UTIL_TIMER_IRQ_Handler+0xe4>
 801c680:	4b0a      	ldr	r3, [pc, #40]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	7a1b      	ldrb	r3, [r3, #8]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d104      	bne.n	801c694 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c68a:	4b08      	ldr	r3, [pc, #32]	; (801c6ac <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	4618      	mov	r0, r3
 801c690:	f000 f858 	bl	801c744 <TimerSetTimeout>
 801c694:	69bb      	ldr	r3, [r7, #24]
 801c696:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	f383 8810 	msr	PRIMASK, r3
}
 801c69e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c6a0:	bf00      	nop
 801c6a2:	3724      	adds	r7, #36	; 0x24
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	bd90      	pop	{r4, r7, pc}
 801c6a8:	0801d560 	.word	0x0801d560
 801c6ac:	20002390 	.word	0x20002390

0801c6b0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b082      	sub	sp, #8
 801c6b4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c6b6:	4b06      	ldr	r3, [pc, #24]	; (801c6d0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c6b8:	69db      	ldr	r3, [r3, #28]
 801c6ba:	4798      	blx	r3
 801c6bc:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c6be:	4b04      	ldr	r3, [pc, #16]	; (801c6d0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6c2:	6878      	ldr	r0, [r7, #4]
 801c6c4:	4798      	blx	r3
 801c6c6:	4603      	mov	r3, r0
}
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	3708      	adds	r7, #8
 801c6cc:	46bd      	mov	sp, r7
 801c6ce:	bd80      	pop	{r7, pc}
 801c6d0:	0801d560 	.word	0x0801d560

0801c6d4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b084      	sub	sp, #16
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c6dc:	4b0a      	ldr	r3, [pc, #40]	; (801c708 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c6de:	69db      	ldr	r3, [r3, #28]
 801c6e0:	4798      	blx	r3
 801c6e2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c6e4:	4b08      	ldr	r3, [pc, #32]	; (801c708 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6e8:	6878      	ldr	r0, [r7, #4]
 801c6ea:	4798      	blx	r3
 801c6ec:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c6ee:	4b06      	ldr	r3, [pc, #24]	; (801c708 <UTIL_TIMER_GetElapsedTime+0x34>)
 801c6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6f2:	68f9      	ldr	r1, [r7, #12]
 801c6f4:	68ba      	ldr	r2, [r7, #8]
 801c6f6:	1a8a      	subs	r2, r1, r2
 801c6f8:	4610      	mov	r0, r2
 801c6fa:	4798      	blx	r3
 801c6fc:	4603      	mov	r3, r0
}
 801c6fe:	4618      	mov	r0, r3
 801c700:	3710      	adds	r7, #16
 801c702:	46bd      	mov	sp, r7
 801c704:	bd80      	pop	{r7, pc}
 801c706:	bf00      	nop
 801c708:	0801d560 	.word	0x0801d560

0801c70c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c70c:	b480      	push	{r7}
 801c70e:	b085      	sub	sp, #20
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c714:	4b0a      	ldr	r3, [pc, #40]	; (801c740 <TimerExists+0x34>)
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c71a:	e008      	b.n	801c72e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c71c:	68fa      	ldr	r2, [r7, #12]
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	429a      	cmp	r2, r3
 801c722:	d101      	bne.n	801c728 <TimerExists+0x1c>
    {
      return true;
 801c724:	2301      	movs	r3, #1
 801c726:	e006      	b.n	801c736 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	695b      	ldr	r3, [r3, #20]
 801c72c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d1f3      	bne.n	801c71c <TimerExists+0x10>
  }
  return false;
 801c734:	2300      	movs	r3, #0
}
 801c736:	4618      	mov	r0, r3
 801c738:	3714      	adds	r7, #20
 801c73a:	46bd      	mov	sp, r7
 801c73c:	bc80      	pop	{r7}
 801c73e:	4770      	bx	lr
 801c740:	20002390 	.word	0x20002390

0801c744 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c744:	b590      	push	{r4, r7, lr}
 801c746:	b085      	sub	sp, #20
 801c748:	af00      	add	r7, sp, #0
 801c74a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c74c:	4b11      	ldr	r3, [pc, #68]	; (801c794 <TimerSetTimeout+0x50>)
 801c74e:	6a1b      	ldr	r3, [r3, #32]
 801c750:	4798      	blx	r3
 801c752:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	2201      	movs	r2, #1
 801c758:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	681c      	ldr	r4, [r3, #0]
 801c75e:	4b0d      	ldr	r3, [pc, #52]	; (801c794 <TimerSetTimeout+0x50>)
 801c760:	699b      	ldr	r3, [r3, #24]
 801c762:	4798      	blx	r3
 801c764:	4602      	mov	r2, r0
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	4413      	add	r3, r2
 801c76a:	429c      	cmp	r4, r3
 801c76c:	d207      	bcs.n	801c77e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c76e:	4b09      	ldr	r3, [pc, #36]	; (801c794 <TimerSetTimeout+0x50>)
 801c770:	699b      	ldr	r3, [r3, #24]
 801c772:	4798      	blx	r3
 801c774:	4602      	mov	r2, r0
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	441a      	add	r2, r3
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c77e:	4b05      	ldr	r3, [pc, #20]	; (801c794 <TimerSetTimeout+0x50>)
 801c780:	689b      	ldr	r3, [r3, #8]
 801c782:	687a      	ldr	r2, [r7, #4]
 801c784:	6812      	ldr	r2, [r2, #0]
 801c786:	4610      	mov	r0, r2
 801c788:	4798      	blx	r3
}
 801c78a:	bf00      	nop
 801c78c:	3714      	adds	r7, #20
 801c78e:	46bd      	mov	sp, r7
 801c790:	bd90      	pop	{r4, r7, pc}
 801c792:	bf00      	nop
 801c794:	0801d560 	.word	0x0801d560

0801c798 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c798:	b480      	push	{r7}
 801c79a:	b085      	sub	sp, #20
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c7a0:	4b14      	ldr	r3, [pc, #80]	; (801c7f4 <TimerInsertTimer+0x5c>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c7a6:	4b13      	ldr	r3, [pc, #76]	; (801c7f4 <TimerInsertTimer+0x5c>)
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	695b      	ldr	r3, [r3, #20]
 801c7ac:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c7ae:	e012      	b.n	801c7d6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	681a      	ldr	r2, [r3, #0]
 801c7b4:	68bb      	ldr	r3, [r7, #8]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	429a      	cmp	r2, r3
 801c7ba:	d905      	bls.n	801c7c8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801c7bc:	68bb      	ldr	r3, [r7, #8]
 801c7be:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c7c0:	68bb      	ldr	r3, [r7, #8]
 801c7c2:	695b      	ldr	r3, [r3, #20]
 801c7c4:	60bb      	str	r3, [r7, #8]
 801c7c6:	e006      	b.n	801c7d6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	687a      	ldr	r2, [r7, #4]
 801c7cc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	68ba      	ldr	r2, [r7, #8]
 801c7d2:	615a      	str	r2, [r3, #20]
        return;
 801c7d4:	e009      	b.n	801c7ea <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	695b      	ldr	r3, [r3, #20]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d1e8      	bne.n	801c7b0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	687a      	ldr	r2, [r7, #4]
 801c7e2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	615a      	str	r2, [r3, #20]
}
 801c7ea:	3714      	adds	r7, #20
 801c7ec:	46bd      	mov	sp, r7
 801c7ee:	bc80      	pop	{r7}
 801c7f0:	4770      	bx	lr
 801c7f2:	bf00      	nop
 801c7f4:	20002390 	.word	0x20002390

0801c7f8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b084      	sub	sp, #16
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c800:	4b0b      	ldr	r3, [pc, #44]	; (801c830 <TimerInsertNewHeadTimer+0x38>)
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d002      	beq.n	801c812 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	2200      	movs	r2, #0
 801c810:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	68fa      	ldr	r2, [r7, #12]
 801c816:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c818:	4a05      	ldr	r2, [pc, #20]	; (801c830 <TimerInsertNewHeadTimer+0x38>)
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c81e:	4b04      	ldr	r3, [pc, #16]	; (801c830 <TimerInsertNewHeadTimer+0x38>)
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	4618      	mov	r0, r3
 801c824:	f7ff ff8e 	bl	801c744 <TimerSetTimeout>
}
 801c828:	bf00      	nop
 801c82a:	3710      	adds	r7, #16
 801c82c:	46bd      	mov	sp, r7
 801c82e:	bd80      	pop	{r7, pc}
 801c830:	20002390 	.word	0x20002390

0801c834 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c834:	b580      	push	{r7, lr}
 801c836:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c838:	2218      	movs	r2, #24
 801c83a:	2100      	movs	r1, #0
 801c83c:	4807      	ldr	r0, [pc, #28]	; (801c85c <UTIL_ADV_TRACE_Init+0x28>)
 801c83e:	f7fe fff6 	bl	801b82e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c846:	2100      	movs	r1, #0
 801c848:	4805      	ldr	r0, [pc, #20]	; (801c860 <UTIL_ADV_TRACE_Init+0x2c>)
 801c84a:	f7fe fff0 	bl	801b82e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c84e:	4b05      	ldr	r3, [pc, #20]	; (801c864 <UTIL_ADV_TRACE_Init+0x30>)
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	4805      	ldr	r0, [pc, #20]	; (801c868 <UTIL_ADV_TRACE_Init+0x34>)
 801c854:	4798      	blx	r3
 801c856:	4603      	mov	r3, r0
}
 801c858:	4618      	mov	r0, r3
 801c85a:	bd80      	pop	{r7, pc}
 801c85c:	20002394 	.word	0x20002394
 801c860:	200023ac 	.word	0x200023ac
 801c864:	0801d5a0 	.word	0x0801d5a0
 801c868:	0801cad5 	.word	0x0801cad5

0801c86c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c86c:	b480      	push	{r7}
 801c86e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c870:	4b06      	ldr	r3, [pc, #24]	; (801c88c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c872:	8a5a      	ldrh	r2, [r3, #18]
 801c874:	4b05      	ldr	r3, [pc, #20]	; (801c88c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c876:	8a1b      	ldrh	r3, [r3, #16]
 801c878:	429a      	cmp	r2, r3
 801c87a:	d101      	bne.n	801c880 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c87c:	2301      	movs	r3, #1
 801c87e:	e000      	b.n	801c882 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c880:	2300      	movs	r3, #0
}
 801c882:	4618      	mov	r0, r3
 801c884:	46bd      	mov	sp, r7
 801c886:	bc80      	pop	{r7}
 801c888:	4770      	bx	lr
 801c88a:	bf00      	nop
 801c88c:	20002394 	.word	0x20002394

0801c890 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c890:	b408      	push	{r3}
 801c892:	b580      	push	{r7, lr}
 801c894:	b08d      	sub	sp, #52	; 0x34
 801c896:	af00      	add	r7, sp, #0
 801c898:	60f8      	str	r0, [r7, #12]
 801c89a:	60b9      	str	r1, [r7, #8]
 801c89c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c89e:	2300      	movs	r3, #0
 801c8a0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c8a6:	4b37      	ldr	r3, [pc, #220]	; (801c984 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c8a8:	7a1b      	ldrb	r3, [r3, #8]
 801c8aa:	461a      	mov	r2, r3
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	4293      	cmp	r3, r2
 801c8b0:	d902      	bls.n	801c8b8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c8b2:	f06f 0304 	mvn.w	r3, #4
 801c8b6:	e05e      	b.n	801c976 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c8b8:	4b32      	ldr	r3, [pc, #200]	; (801c984 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c8ba:	68da      	ldr	r2, [r3, #12]
 801c8bc:	68bb      	ldr	r3, [r7, #8]
 801c8be:	4013      	ands	r3, r2
 801c8c0:	68ba      	ldr	r2, [r7, #8]
 801c8c2:	429a      	cmp	r2, r3
 801c8c4:	d002      	beq.n	801c8cc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c8c6:	f06f 0305 	mvn.w	r3, #5
 801c8ca:	e054      	b.n	801c976 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c8cc:	4b2d      	ldr	r3, [pc, #180]	; (801c984 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c8ce:	685b      	ldr	r3, [r3, #4]
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d00a      	beq.n	801c8ea <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d007      	beq.n	801c8ea <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c8da:	4b2a      	ldr	r3, [pc, #168]	; (801c984 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	f107 0116 	add.w	r1, r7, #22
 801c8e2:	f107 0218 	add.w	r2, r7, #24
 801c8e6:	4610      	mov	r0, r2
 801c8e8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c8ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c8ee:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c8f8:	4823      	ldr	r0, [pc, #140]	; (801c988 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c8fa:	f7ff fa25 	bl	801bd48 <tiny_vsnprintf_like>
 801c8fe:	4603      	mov	r3, r0
 801c900:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c902:	f000 f9f1 	bl	801cce8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c906:	8afa      	ldrh	r2, [r7, #22]
 801c908:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c90a:	4413      	add	r3, r2
 801c90c:	b29b      	uxth	r3, r3
 801c90e:	f107 0214 	add.w	r2, r7, #20
 801c912:	4611      	mov	r1, r2
 801c914:	4618      	mov	r0, r3
 801c916:	f000 f969 	bl	801cbec <TRACE_AllocateBufer>
 801c91a:	4603      	mov	r3, r0
 801c91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c920:	d025      	beq.n	801c96e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c922:	2300      	movs	r3, #0
 801c924:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c926:	e00e      	b.n	801c946 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c928:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c92a:	8aba      	ldrh	r2, [r7, #20]
 801c92c:	3330      	adds	r3, #48	; 0x30
 801c92e:	443b      	add	r3, r7
 801c930:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c934:	4b15      	ldr	r3, [pc, #84]	; (801c98c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c936:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c938:	8abb      	ldrh	r3, [r7, #20]
 801c93a:	3301      	adds	r3, #1
 801c93c:	b29b      	uxth	r3, r3
 801c93e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c940:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c942:	3301      	adds	r3, #1
 801c944:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c946:	8afb      	ldrh	r3, [r7, #22]
 801c948:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c94a:	429a      	cmp	r2, r3
 801c94c:	d3ec      	bcc.n	801c928 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c94e:	8abb      	ldrh	r3, [r7, #20]
 801c950:	461a      	mov	r2, r3
 801c952:	4b0e      	ldr	r3, [pc, #56]	; (801c98c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c954:	18d0      	adds	r0, r2, r3
 801c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c95a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c95e:	f7ff f9f3 	bl	801bd48 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c962:	f000 f9df 	bl	801cd24 <TRACE_UnLock>

    return TRACE_Send();
 801c966:	f000 f831 	bl	801c9cc <TRACE_Send>
 801c96a:	4603      	mov	r3, r0
 801c96c:	e003      	b.n	801c976 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c96e:	f000 f9d9 	bl	801cd24 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c972:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c976:	4618      	mov	r0, r3
 801c978:	3734      	adds	r7, #52	; 0x34
 801c97a:	46bd      	mov	sp, r7
 801c97c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c980:	b001      	add	sp, #4
 801c982:	4770      	bx	lr
 801c984:	20002394 	.word	0x20002394
 801c988:	200027ac 	.word	0x200027ac
 801c98c:	200023ac 	.word	0x200023ac

0801c990 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c990:	b480      	push	{r7}
 801c992:	b083      	sub	sp, #12
 801c994:	af00      	add	r7, sp, #0
 801c996:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c998:	4a03      	ldr	r2, [pc, #12]	; (801c9a8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	6053      	str	r3, [r2, #4]
}
 801c99e:	bf00      	nop
 801c9a0:	370c      	adds	r7, #12
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bc80      	pop	{r7}
 801c9a6:	4770      	bx	lr
 801c9a8:	20002394 	.word	0x20002394

0801c9ac <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c9ac:	b480      	push	{r7}
 801c9ae:	b083      	sub	sp, #12
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	4603      	mov	r3, r0
 801c9b4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c9b6:	4a04      	ldr	r2, [pc, #16]	; (801c9c8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c9b8:	79fb      	ldrb	r3, [r7, #7]
 801c9ba:	7213      	strb	r3, [r2, #8]
}
 801c9bc:	bf00      	nop
 801c9be:	370c      	adds	r7, #12
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bc80      	pop	{r7}
 801c9c4:	4770      	bx	lr
 801c9c6:	bf00      	nop
 801c9c8:	20002394 	.word	0x20002394

0801c9cc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c9cc:	b580      	push	{r7, lr}
 801c9ce:	b088      	sub	sp, #32
 801c9d0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9da:	f3ef 8310 	mrs	r3, PRIMASK
 801c9de:	613b      	str	r3, [r7, #16]
  return(result);
 801c9e0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c9e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9e4:	b672      	cpsid	i
}
 801c9e6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c9e8:	f000 f9ba 	bl	801cd60 <TRACE_IsLocked>
 801c9ec:	4603      	mov	r3, r0
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d15d      	bne.n	801caae <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c9f2:	f000 f979 	bl	801cce8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c9f6:	4b34      	ldr	r3, [pc, #208]	; (801cac8 <TRACE_Send+0xfc>)
 801c9f8:	8a1a      	ldrh	r2, [r3, #16]
 801c9fa:	4b33      	ldr	r3, [pc, #204]	; (801cac8 <TRACE_Send+0xfc>)
 801c9fc:	8a5b      	ldrh	r3, [r3, #18]
 801c9fe:	429a      	cmp	r2, r3
 801ca00:	d04d      	beq.n	801ca9e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ca02:	4b31      	ldr	r3, [pc, #196]	; (801cac8 <TRACE_Send+0xfc>)
 801ca04:	789b      	ldrb	r3, [r3, #2]
 801ca06:	2b01      	cmp	r3, #1
 801ca08:	d117      	bne.n	801ca3a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ca0a:	4b2f      	ldr	r3, [pc, #188]	; (801cac8 <TRACE_Send+0xfc>)
 801ca0c:	881a      	ldrh	r2, [r3, #0]
 801ca0e:	4b2e      	ldr	r3, [pc, #184]	; (801cac8 <TRACE_Send+0xfc>)
 801ca10:	8a1b      	ldrh	r3, [r3, #16]
 801ca12:	1ad3      	subs	r3, r2, r3
 801ca14:	b29a      	uxth	r2, r3
 801ca16:	4b2c      	ldr	r3, [pc, #176]	; (801cac8 <TRACE_Send+0xfc>)
 801ca18:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ca1a:	4b2b      	ldr	r3, [pc, #172]	; (801cac8 <TRACE_Send+0xfc>)
 801ca1c:	2202      	movs	r2, #2
 801ca1e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ca20:	4b29      	ldr	r3, [pc, #164]	; (801cac8 <TRACE_Send+0xfc>)
 801ca22:	2200      	movs	r2, #0
 801ca24:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ca26:	4b28      	ldr	r3, [pc, #160]	; (801cac8 <TRACE_Send+0xfc>)
 801ca28:	8a9b      	ldrh	r3, [r3, #20]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d105      	bne.n	801ca3a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ca2e:	4b26      	ldr	r3, [pc, #152]	; (801cac8 <TRACE_Send+0xfc>)
 801ca30:	2200      	movs	r2, #0
 801ca32:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ca34:	4b24      	ldr	r3, [pc, #144]	; (801cac8 <TRACE_Send+0xfc>)
 801ca36:	2200      	movs	r2, #0
 801ca38:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ca3a:	4b23      	ldr	r3, [pc, #140]	; (801cac8 <TRACE_Send+0xfc>)
 801ca3c:	789b      	ldrb	r3, [r3, #2]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d115      	bne.n	801ca6e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ca42:	4b21      	ldr	r3, [pc, #132]	; (801cac8 <TRACE_Send+0xfc>)
 801ca44:	8a5a      	ldrh	r2, [r3, #18]
 801ca46:	4b20      	ldr	r3, [pc, #128]	; (801cac8 <TRACE_Send+0xfc>)
 801ca48:	8a1b      	ldrh	r3, [r3, #16]
 801ca4a:	429a      	cmp	r2, r3
 801ca4c:	d908      	bls.n	801ca60 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ca4e:	4b1e      	ldr	r3, [pc, #120]	; (801cac8 <TRACE_Send+0xfc>)
 801ca50:	8a5a      	ldrh	r2, [r3, #18]
 801ca52:	4b1d      	ldr	r3, [pc, #116]	; (801cac8 <TRACE_Send+0xfc>)
 801ca54:	8a1b      	ldrh	r3, [r3, #16]
 801ca56:	1ad3      	subs	r3, r2, r3
 801ca58:	b29a      	uxth	r2, r3
 801ca5a:	4b1b      	ldr	r3, [pc, #108]	; (801cac8 <TRACE_Send+0xfc>)
 801ca5c:	829a      	strh	r2, [r3, #20]
 801ca5e:	e006      	b.n	801ca6e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ca60:	4b19      	ldr	r3, [pc, #100]	; (801cac8 <TRACE_Send+0xfc>)
 801ca62:	8a1b      	ldrh	r3, [r3, #16]
 801ca64:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ca68:	b29a      	uxth	r2, r3
 801ca6a:	4b17      	ldr	r3, [pc, #92]	; (801cac8 <TRACE_Send+0xfc>)
 801ca6c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ca6e:	4b16      	ldr	r3, [pc, #88]	; (801cac8 <TRACE_Send+0xfc>)
 801ca70:	8a1b      	ldrh	r3, [r3, #16]
 801ca72:	461a      	mov	r2, r3
 801ca74:	4b15      	ldr	r3, [pc, #84]	; (801cacc <TRACE_Send+0x100>)
 801ca76:	4413      	add	r3, r2
 801ca78:	61bb      	str	r3, [r7, #24]
 801ca7a:	697b      	ldr	r3, [r7, #20]
 801ca7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	f383 8810 	msr	PRIMASK, r3
}
 801ca84:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ca86:	f7e5 fd15 	bl	80024b4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ca8a:	4b11      	ldr	r3, [pc, #68]	; (801cad0 <TRACE_Send+0x104>)
 801ca8c:	68db      	ldr	r3, [r3, #12]
 801ca8e:	4a0e      	ldr	r2, [pc, #56]	; (801cac8 <TRACE_Send+0xfc>)
 801ca90:	8a92      	ldrh	r2, [r2, #20]
 801ca92:	4611      	mov	r1, r2
 801ca94:	69b8      	ldr	r0, [r7, #24]
 801ca96:	4798      	blx	r3
 801ca98:	4603      	mov	r3, r0
 801ca9a:	77fb      	strb	r3, [r7, #31]
 801ca9c:	e00d      	b.n	801caba <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ca9e:	f000 f941 	bl	801cd24 <TRACE_UnLock>
 801caa2:	697b      	ldr	r3, [r7, #20]
 801caa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801caa6:	68bb      	ldr	r3, [r7, #8]
 801caa8:	f383 8810 	msr	PRIMASK, r3
}
 801caac:	e005      	b.n	801caba <TRACE_Send+0xee>
 801caae:	697b      	ldr	r3, [r7, #20]
 801cab0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	f383 8810 	msr	PRIMASK, r3
}
 801cab8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801caba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cabe:	4618      	mov	r0, r3
 801cac0:	3720      	adds	r7, #32
 801cac2:	46bd      	mov	sp, r7
 801cac4:	bd80      	pop	{r7, pc}
 801cac6:	bf00      	nop
 801cac8:	20002394 	.word	0x20002394
 801cacc:	200023ac 	.word	0x200023ac
 801cad0:	0801d5a0 	.word	0x0801d5a0

0801cad4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b088      	sub	sp, #32
 801cad8:	af00      	add	r7, sp, #0
 801cada:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801cadc:	2300      	movs	r3, #0
 801cade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cae0:	f3ef 8310 	mrs	r3, PRIMASK
 801cae4:	617b      	str	r3, [r7, #20]
  return(result);
 801cae6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cae8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801caea:	b672      	cpsid	i
}
 801caec:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801caee:	4b3c      	ldr	r3, [pc, #240]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801caf0:	789b      	ldrb	r3, [r3, #2]
 801caf2:	2b02      	cmp	r3, #2
 801caf4:	d106      	bne.n	801cb04 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801caf6:	4b3a      	ldr	r3, [pc, #232]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801caf8:	2200      	movs	r2, #0
 801cafa:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cafc:	4b38      	ldr	r3, [pc, #224]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cafe:	2200      	movs	r2, #0
 801cb00:	821a      	strh	r2, [r3, #16]
 801cb02:	e00a      	b.n	801cb1a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cb04:	4b36      	ldr	r3, [pc, #216]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb06:	8a1a      	ldrh	r2, [r3, #16]
 801cb08:	4b35      	ldr	r3, [pc, #212]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb0a:	8a9b      	ldrh	r3, [r3, #20]
 801cb0c:	4413      	add	r3, r2
 801cb0e:	b29b      	uxth	r3, r3
 801cb10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cb14:	b29a      	uxth	r2, r3
 801cb16:	4b32      	ldr	r3, [pc, #200]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb18:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801cb1a:	4b31      	ldr	r3, [pc, #196]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb1c:	8a1a      	ldrh	r2, [r3, #16]
 801cb1e:	4b30      	ldr	r3, [pc, #192]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb20:	8a5b      	ldrh	r3, [r3, #18]
 801cb22:	429a      	cmp	r2, r3
 801cb24:	d04d      	beq.n	801cbc2 <TRACE_TxCpltCallback+0xee>
 801cb26:	4b2e      	ldr	r3, [pc, #184]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb28:	8adb      	ldrh	r3, [r3, #22]
 801cb2a:	2b01      	cmp	r3, #1
 801cb2c:	d149      	bne.n	801cbc2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cb2e:	4b2c      	ldr	r3, [pc, #176]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb30:	789b      	ldrb	r3, [r3, #2]
 801cb32:	2b01      	cmp	r3, #1
 801cb34:	d117      	bne.n	801cb66 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801cb36:	4b2a      	ldr	r3, [pc, #168]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb38:	881a      	ldrh	r2, [r3, #0]
 801cb3a:	4b29      	ldr	r3, [pc, #164]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb3c:	8a1b      	ldrh	r3, [r3, #16]
 801cb3e:	1ad3      	subs	r3, r2, r3
 801cb40:	b29a      	uxth	r2, r3
 801cb42:	4b27      	ldr	r3, [pc, #156]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb44:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cb46:	4b26      	ldr	r3, [pc, #152]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb48:	2202      	movs	r2, #2
 801cb4a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cb4c:	4b24      	ldr	r3, [pc, #144]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb4e:	2200      	movs	r2, #0
 801cb50:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cb52:	4b23      	ldr	r3, [pc, #140]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb54:	8a9b      	ldrh	r3, [r3, #20]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d105      	bne.n	801cb66 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cb5a:	4b21      	ldr	r3, [pc, #132]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb5c:	2200      	movs	r2, #0
 801cb5e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cb60:	4b1f      	ldr	r3, [pc, #124]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb62:	2200      	movs	r2, #0
 801cb64:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cb66:	4b1e      	ldr	r3, [pc, #120]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb68:	789b      	ldrb	r3, [r3, #2]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d115      	bne.n	801cb9a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cb6e:	4b1c      	ldr	r3, [pc, #112]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb70:	8a5a      	ldrh	r2, [r3, #18]
 801cb72:	4b1b      	ldr	r3, [pc, #108]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb74:	8a1b      	ldrh	r3, [r3, #16]
 801cb76:	429a      	cmp	r2, r3
 801cb78:	d908      	bls.n	801cb8c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cb7a:	4b19      	ldr	r3, [pc, #100]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb7c:	8a5a      	ldrh	r2, [r3, #18]
 801cb7e:	4b18      	ldr	r3, [pc, #96]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb80:	8a1b      	ldrh	r3, [r3, #16]
 801cb82:	1ad3      	subs	r3, r2, r3
 801cb84:	b29a      	uxth	r2, r3
 801cb86:	4b16      	ldr	r3, [pc, #88]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb88:	829a      	strh	r2, [r3, #20]
 801cb8a:	e006      	b.n	801cb9a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cb8c:	4b14      	ldr	r3, [pc, #80]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb8e:	8a1b      	ldrh	r3, [r3, #16]
 801cb90:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cb94:	b29a      	uxth	r2, r3
 801cb96:	4b12      	ldr	r3, [pc, #72]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb98:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cb9a:	4b11      	ldr	r3, [pc, #68]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cb9c:	8a1b      	ldrh	r3, [r3, #16]
 801cb9e:	461a      	mov	r2, r3
 801cba0:	4b10      	ldr	r3, [pc, #64]	; (801cbe4 <TRACE_TxCpltCallback+0x110>)
 801cba2:	4413      	add	r3, r2
 801cba4:	61fb      	str	r3, [r7, #28]
 801cba6:	69bb      	ldr	r3, [r7, #24]
 801cba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbaa:	693b      	ldr	r3, [r7, #16]
 801cbac:	f383 8810 	msr	PRIMASK, r3
}
 801cbb0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cbb2:	4b0d      	ldr	r3, [pc, #52]	; (801cbe8 <TRACE_TxCpltCallback+0x114>)
 801cbb4:	68db      	ldr	r3, [r3, #12]
 801cbb6:	4a0a      	ldr	r2, [pc, #40]	; (801cbe0 <TRACE_TxCpltCallback+0x10c>)
 801cbb8:	8a92      	ldrh	r2, [r2, #20]
 801cbba:	4611      	mov	r1, r2
 801cbbc:	69f8      	ldr	r0, [r7, #28]
 801cbbe:	4798      	blx	r3
 801cbc0:	e00a      	b.n	801cbd8 <TRACE_TxCpltCallback+0x104>
 801cbc2:	69bb      	ldr	r3, [r7, #24]
 801cbc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	f383 8810 	msr	PRIMASK, r3
}
 801cbcc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cbce:	f7e5 fc79 	bl	80024c4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cbd2:	f000 f8a7 	bl	801cd24 <TRACE_UnLock>
  }
}
 801cbd6:	bf00      	nop
 801cbd8:	bf00      	nop
 801cbda:	3720      	adds	r7, #32
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}
 801cbe0:	20002394 	.word	0x20002394
 801cbe4:	200023ac 	.word	0x200023ac
 801cbe8:	0801d5a0 	.word	0x0801d5a0

0801cbec <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cbec:	b480      	push	{r7}
 801cbee:	b087      	sub	sp, #28
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	6039      	str	r1, [r7, #0]
 801cbf6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cbf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cbfc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbfe:	f3ef 8310 	mrs	r3, PRIMASK
 801cc02:	60fb      	str	r3, [r7, #12]
  return(result);
 801cc04:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cc06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc08:	b672      	cpsid	i
}
 801cc0a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cc0c:	4b35      	ldr	r3, [pc, #212]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc0e:	8a5a      	ldrh	r2, [r3, #18]
 801cc10:	4b34      	ldr	r3, [pc, #208]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc12:	8a1b      	ldrh	r3, [r3, #16]
 801cc14:	429a      	cmp	r2, r3
 801cc16:	d11b      	bne.n	801cc50 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cc18:	4b32      	ldr	r3, [pc, #200]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc1a:	8a5b      	ldrh	r3, [r3, #18]
 801cc1c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cc20:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cc22:	88fa      	ldrh	r2, [r7, #6]
 801cc24:	8afb      	ldrh	r3, [r7, #22]
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d33a      	bcc.n	801cca0 <TRACE_AllocateBufer+0xb4>
 801cc2a:	4b2e      	ldr	r3, [pc, #184]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc2c:	8a1b      	ldrh	r3, [r3, #16]
 801cc2e:	88fa      	ldrh	r2, [r7, #6]
 801cc30:	429a      	cmp	r2, r3
 801cc32:	d235      	bcs.n	801cca0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cc34:	4b2b      	ldr	r3, [pc, #172]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc36:	2201      	movs	r2, #1
 801cc38:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cc3a:	4b2a      	ldr	r3, [pc, #168]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc3c:	8a5a      	ldrh	r2, [r3, #18]
 801cc3e:	4b29      	ldr	r3, [pc, #164]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc40:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cc42:	4b28      	ldr	r3, [pc, #160]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc44:	8a1b      	ldrh	r3, [r3, #16]
 801cc46:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cc48:	4b26      	ldr	r3, [pc, #152]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	825a      	strh	r2, [r3, #18]
 801cc4e:	e027      	b.n	801cca0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cc50:	4b24      	ldr	r3, [pc, #144]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc52:	8a5a      	ldrh	r2, [r3, #18]
 801cc54:	4b23      	ldr	r3, [pc, #140]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc56:	8a1b      	ldrh	r3, [r3, #16]
 801cc58:	429a      	cmp	r2, r3
 801cc5a:	d91b      	bls.n	801cc94 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cc5c:	4b21      	ldr	r3, [pc, #132]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc5e:	8a5b      	ldrh	r3, [r3, #18]
 801cc60:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cc64:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801cc66:	88fa      	ldrh	r2, [r7, #6]
 801cc68:	8afb      	ldrh	r3, [r7, #22]
 801cc6a:	429a      	cmp	r2, r3
 801cc6c:	d318      	bcc.n	801cca0 <TRACE_AllocateBufer+0xb4>
 801cc6e:	4b1d      	ldr	r3, [pc, #116]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc70:	8a1b      	ldrh	r3, [r3, #16]
 801cc72:	88fa      	ldrh	r2, [r7, #6]
 801cc74:	429a      	cmp	r2, r3
 801cc76:	d213      	bcs.n	801cca0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cc78:	4b1a      	ldr	r3, [pc, #104]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc7a:	2201      	movs	r2, #1
 801cc7c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cc7e:	4b19      	ldr	r3, [pc, #100]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc80:	8a5a      	ldrh	r2, [r3, #18]
 801cc82:	4b18      	ldr	r3, [pc, #96]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc84:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cc86:	4b17      	ldr	r3, [pc, #92]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc88:	8a1b      	ldrh	r3, [r3, #16]
 801cc8a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cc8c:	4b15      	ldr	r3, [pc, #84]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc8e:	2200      	movs	r2, #0
 801cc90:	825a      	strh	r2, [r3, #18]
 801cc92:	e005      	b.n	801cca0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801cc94:	4b13      	ldr	r3, [pc, #76]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc96:	8a1a      	ldrh	r2, [r3, #16]
 801cc98:	4b12      	ldr	r3, [pc, #72]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801cc9a:	8a5b      	ldrh	r3, [r3, #18]
 801cc9c:	1ad3      	subs	r3, r2, r3
 801cc9e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801cca0:	8afa      	ldrh	r2, [r7, #22]
 801cca2:	88fb      	ldrh	r3, [r7, #6]
 801cca4:	429a      	cmp	r2, r3
 801cca6:	d90f      	bls.n	801ccc8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801cca8:	4b0e      	ldr	r3, [pc, #56]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801ccaa:	8a5a      	ldrh	r2, [r3, #18]
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ccb0:	4b0c      	ldr	r3, [pc, #48]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801ccb2:	8a5a      	ldrh	r2, [r3, #18]
 801ccb4:	88fb      	ldrh	r3, [r7, #6]
 801ccb6:	4413      	add	r3, r2
 801ccb8:	b29b      	uxth	r3, r3
 801ccba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ccbe:	b29a      	uxth	r2, r3
 801ccc0:	4b08      	ldr	r3, [pc, #32]	; (801cce4 <TRACE_AllocateBufer+0xf8>)
 801ccc2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	82bb      	strh	r3, [r7, #20]
 801ccc8:	693b      	ldr	r3, [r7, #16]
 801ccca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cccc:	68bb      	ldr	r3, [r7, #8]
 801ccce:	f383 8810 	msr	PRIMASK, r3
}
 801ccd2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ccd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ccd8:	4618      	mov	r0, r3
 801ccda:	371c      	adds	r7, #28
 801ccdc:	46bd      	mov	sp, r7
 801ccde:	bc80      	pop	{r7}
 801cce0:	4770      	bx	lr
 801cce2:	bf00      	nop
 801cce4:	20002394 	.word	0x20002394

0801cce8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801cce8:	b480      	push	{r7}
 801ccea:	b085      	sub	sp, #20
 801ccec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccee:	f3ef 8310 	mrs	r3, PRIMASK
 801ccf2:	607b      	str	r3, [r7, #4]
  return(result);
 801ccf4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ccf6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccf8:	b672      	cpsid	i
}
 801ccfa:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ccfc:	4b08      	ldr	r3, [pc, #32]	; (801cd20 <TRACE_Lock+0x38>)
 801ccfe:	8adb      	ldrh	r3, [r3, #22]
 801cd00:	3301      	adds	r3, #1
 801cd02:	b29a      	uxth	r2, r3
 801cd04:	4b06      	ldr	r3, [pc, #24]	; (801cd20 <TRACE_Lock+0x38>)
 801cd06:	82da      	strh	r2, [r3, #22]
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	f383 8810 	msr	PRIMASK, r3
}
 801cd12:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cd14:	bf00      	nop
 801cd16:	3714      	adds	r7, #20
 801cd18:	46bd      	mov	sp, r7
 801cd1a:	bc80      	pop	{r7}
 801cd1c:	4770      	bx	lr
 801cd1e:	bf00      	nop
 801cd20:	20002394 	.word	0x20002394

0801cd24 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801cd24:	b480      	push	{r7}
 801cd26:	b085      	sub	sp, #20
 801cd28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd2a:	f3ef 8310 	mrs	r3, PRIMASK
 801cd2e:	607b      	str	r3, [r7, #4]
  return(result);
 801cd30:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cd32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd34:	b672      	cpsid	i
}
 801cd36:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801cd38:	4b08      	ldr	r3, [pc, #32]	; (801cd5c <TRACE_UnLock+0x38>)
 801cd3a:	8adb      	ldrh	r3, [r3, #22]
 801cd3c:	3b01      	subs	r3, #1
 801cd3e:	b29a      	uxth	r2, r3
 801cd40:	4b06      	ldr	r3, [pc, #24]	; (801cd5c <TRACE_UnLock+0x38>)
 801cd42:	82da      	strh	r2, [r3, #22]
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd48:	68bb      	ldr	r3, [r7, #8]
 801cd4a:	f383 8810 	msr	PRIMASK, r3
}
 801cd4e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cd50:	bf00      	nop
 801cd52:	3714      	adds	r7, #20
 801cd54:	46bd      	mov	sp, r7
 801cd56:	bc80      	pop	{r7}
 801cd58:	4770      	bx	lr
 801cd5a:	bf00      	nop
 801cd5c:	20002394 	.word	0x20002394

0801cd60 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801cd60:	b480      	push	{r7}
 801cd62:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801cd64:	4b05      	ldr	r3, [pc, #20]	; (801cd7c <TRACE_IsLocked+0x1c>)
 801cd66:	8adb      	ldrh	r3, [r3, #22]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	bf14      	ite	ne
 801cd6c:	2301      	movne	r3, #1
 801cd6e:	2300      	moveq	r3, #0
 801cd70:	b2db      	uxtb	r3, r3
}
 801cd72:	4618      	mov	r0, r3
 801cd74:	46bd      	mov	sp, r7
 801cd76:	bc80      	pop	{r7}
 801cd78:	4770      	bx	lr
 801cd7a:	bf00      	nop
 801cd7c:	20002394 	.word	0x20002394

0801cd80 <__libc_init_array>:
 801cd80:	b570      	push	{r4, r5, r6, lr}
 801cd82:	4d0d      	ldr	r5, [pc, #52]	; (801cdb8 <__libc_init_array+0x38>)
 801cd84:	4c0d      	ldr	r4, [pc, #52]	; (801cdbc <__libc_init_array+0x3c>)
 801cd86:	1b64      	subs	r4, r4, r5
 801cd88:	10a4      	asrs	r4, r4, #2
 801cd8a:	2600      	movs	r6, #0
 801cd8c:	42a6      	cmp	r6, r4
 801cd8e:	d109      	bne.n	801cda4 <__libc_init_array+0x24>
 801cd90:	4d0b      	ldr	r5, [pc, #44]	; (801cdc0 <__libc_init_array+0x40>)
 801cd92:	4c0c      	ldr	r4, [pc, #48]	; (801cdc4 <__libc_init_array+0x44>)
 801cd94:	f000 f918 	bl	801cfc8 <_init>
 801cd98:	1b64      	subs	r4, r4, r5
 801cd9a:	10a4      	asrs	r4, r4, #2
 801cd9c:	2600      	movs	r6, #0
 801cd9e:	42a6      	cmp	r6, r4
 801cda0:	d105      	bne.n	801cdae <__libc_init_array+0x2e>
 801cda2:	bd70      	pop	{r4, r5, r6, pc}
 801cda4:	f855 3b04 	ldr.w	r3, [r5], #4
 801cda8:	4798      	blx	r3
 801cdaa:	3601      	adds	r6, #1
 801cdac:	e7ee      	b.n	801cd8c <__libc_init_array+0xc>
 801cdae:	f855 3b04 	ldr.w	r3, [r5], #4
 801cdb2:	4798      	blx	r3
 801cdb4:	3601      	adds	r6, #1
 801cdb6:	e7f2      	b.n	801cd9e <__libc_init_array+0x1e>
 801cdb8:	0801db34 	.word	0x0801db34
 801cdbc:	0801db34 	.word	0x0801db34
 801cdc0:	0801db34 	.word	0x0801db34
 801cdc4:	0801db3c 	.word	0x0801db3c

0801cdc8 <memcpy>:
 801cdc8:	440a      	add	r2, r1
 801cdca:	4291      	cmp	r1, r2
 801cdcc:	f100 33ff 	add.w	r3, r0, #4294967295
 801cdd0:	d100      	bne.n	801cdd4 <memcpy+0xc>
 801cdd2:	4770      	bx	lr
 801cdd4:	b510      	push	{r4, lr}
 801cdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cdda:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cdde:	4291      	cmp	r1, r2
 801cde0:	d1f9      	bne.n	801cdd6 <memcpy+0xe>
 801cde2:	bd10      	pop	{r4, pc}

0801cde4 <memset>:
 801cde4:	4402      	add	r2, r0
 801cde6:	4603      	mov	r3, r0
 801cde8:	4293      	cmp	r3, r2
 801cdea:	d100      	bne.n	801cdee <memset+0xa>
 801cdec:	4770      	bx	lr
 801cdee:	f803 1b01 	strb.w	r1, [r3], #1
 801cdf2:	e7f9      	b.n	801cde8 <memset+0x4>

0801cdf4 <register_fini>:
 801cdf4:	4b02      	ldr	r3, [pc, #8]	; (801ce00 <register_fini+0xc>)
 801cdf6:	b113      	cbz	r3, 801cdfe <register_fini+0xa>
 801cdf8:	4802      	ldr	r0, [pc, #8]	; (801ce04 <register_fini+0x10>)
 801cdfa:	f000 b805 	b.w	801ce08 <atexit>
 801cdfe:	4770      	bx	lr
 801ce00:	00000000 	.word	0x00000000
 801ce04:	0801ce15 	.word	0x0801ce15

0801ce08 <atexit>:
 801ce08:	2300      	movs	r3, #0
 801ce0a:	4601      	mov	r1, r0
 801ce0c:	461a      	mov	r2, r3
 801ce0e:	4618      	mov	r0, r3
 801ce10:	f000 b816 	b.w	801ce40 <__register_exitproc>

0801ce14 <__libc_fini_array>:
 801ce14:	b538      	push	{r3, r4, r5, lr}
 801ce16:	4d07      	ldr	r5, [pc, #28]	; (801ce34 <__libc_fini_array+0x20>)
 801ce18:	4c07      	ldr	r4, [pc, #28]	; (801ce38 <__libc_fini_array+0x24>)
 801ce1a:	1b64      	subs	r4, r4, r5
 801ce1c:	10a4      	asrs	r4, r4, #2
 801ce1e:	b91c      	cbnz	r4, 801ce28 <__libc_fini_array+0x14>
 801ce20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce24:	f000 b8d6 	b.w	801cfd4 <_fini>
 801ce28:	3c01      	subs	r4, #1
 801ce2a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801ce2e:	4798      	blx	r3
 801ce30:	e7f5      	b.n	801ce1e <__libc_fini_array+0xa>
 801ce32:	bf00      	nop
 801ce34:	0801db3c 	.word	0x0801db3c
 801ce38:	0801db40 	.word	0x0801db40

0801ce3c <__retarget_lock_acquire_recursive>:
 801ce3c:	4770      	bx	lr

0801ce3e <__retarget_lock_release_recursive>:
 801ce3e:	4770      	bx	lr

0801ce40 <__register_exitproc>:
 801ce40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce44:	f8df a074 	ldr.w	sl, [pc, #116]	; 801cebc <__register_exitproc+0x7c>
 801ce48:	4606      	mov	r6, r0
 801ce4a:	f8da 0000 	ldr.w	r0, [sl]
 801ce4e:	4698      	mov	r8, r3
 801ce50:	460f      	mov	r7, r1
 801ce52:	4691      	mov	r9, r2
 801ce54:	f7ff fff2 	bl	801ce3c <__retarget_lock_acquire_recursive>
 801ce58:	4b19      	ldr	r3, [pc, #100]	; (801cec0 <__register_exitproc+0x80>)
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801ce60:	b91c      	cbnz	r4, 801ce6a <__register_exitproc+0x2a>
 801ce62:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801ce66:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801ce6a:	6865      	ldr	r5, [r4, #4]
 801ce6c:	f8da 0000 	ldr.w	r0, [sl]
 801ce70:	2d1f      	cmp	r5, #31
 801ce72:	dd05      	ble.n	801ce80 <__register_exitproc+0x40>
 801ce74:	f7ff ffe3 	bl	801ce3e <__retarget_lock_release_recursive>
 801ce78:	f04f 30ff 	mov.w	r0, #4294967295
 801ce7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce80:	b19e      	cbz	r6, 801ceaa <__register_exitproc+0x6a>
 801ce82:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801ce86:	2201      	movs	r2, #1
 801ce88:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801ce8c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801ce90:	40aa      	lsls	r2, r5
 801ce92:	4313      	orrs	r3, r2
 801ce94:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801ce98:	2e02      	cmp	r6, #2
 801ce9a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801ce9e:	bf02      	ittt	eq
 801cea0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801cea4:	4313      	orreq	r3, r2
 801cea6:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801ceaa:	1c6b      	adds	r3, r5, #1
 801ceac:	3502      	adds	r5, #2
 801ceae:	6063      	str	r3, [r4, #4]
 801ceb0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801ceb4:	f7ff ffc3 	bl	801ce3e <__retarget_lock_release_recursive>
 801ceb8:	2000      	movs	r0, #0
 801ceba:	e7df      	b.n	801ce7c <__register_exitproc+0x3c>
 801cebc:	20000580 	.word	0x20000580
 801cec0:	0801da68 	.word	0x0801da68
 801cec4:	00000000 	.word	0x00000000

0801cec8 <floor>:
 801cec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cecc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ced0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ced4:	2e13      	cmp	r6, #19
 801ced6:	4602      	mov	r2, r0
 801ced8:	460b      	mov	r3, r1
 801ceda:	4607      	mov	r7, r0
 801cedc:	460c      	mov	r4, r1
 801cede:	4605      	mov	r5, r0
 801cee0:	dc33      	bgt.n	801cf4a <floor+0x82>
 801cee2:	2e00      	cmp	r6, #0
 801cee4:	da14      	bge.n	801cf10 <floor+0x48>
 801cee6:	a334      	add	r3, pc, #208	; (adr r3, 801cfb8 <floor+0xf0>)
 801cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceec:	f7e3 f952 	bl	8000194 <__adddf3>
 801cef0:	2200      	movs	r2, #0
 801cef2:	2300      	movs	r3, #0
 801cef4:	f7e3 fd94 	bl	8000a20 <__aeabi_dcmpgt>
 801cef8:	b138      	cbz	r0, 801cf0a <floor+0x42>
 801cefa:	2c00      	cmp	r4, #0
 801cefc:	da58      	bge.n	801cfb0 <floor+0xe8>
 801cefe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801cf02:	431d      	orrs	r5, r3
 801cf04:	d001      	beq.n	801cf0a <floor+0x42>
 801cf06:	4c2e      	ldr	r4, [pc, #184]	; (801cfc0 <floor+0xf8>)
 801cf08:	2500      	movs	r5, #0
 801cf0a:	4623      	mov	r3, r4
 801cf0c:	462f      	mov	r7, r5
 801cf0e:	e025      	b.n	801cf5c <floor+0x94>
 801cf10:	4a2c      	ldr	r2, [pc, #176]	; (801cfc4 <floor+0xfc>)
 801cf12:	fa42 f806 	asr.w	r8, r2, r6
 801cf16:	ea01 0208 	and.w	r2, r1, r8
 801cf1a:	4302      	orrs	r2, r0
 801cf1c:	d01e      	beq.n	801cf5c <floor+0x94>
 801cf1e:	a326      	add	r3, pc, #152	; (adr r3, 801cfb8 <floor+0xf0>)
 801cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf24:	f7e3 f936 	bl	8000194 <__adddf3>
 801cf28:	2200      	movs	r2, #0
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	f7e3 fd78 	bl	8000a20 <__aeabi_dcmpgt>
 801cf30:	2800      	cmp	r0, #0
 801cf32:	d0ea      	beq.n	801cf0a <floor+0x42>
 801cf34:	2c00      	cmp	r4, #0
 801cf36:	bfbe      	ittt	lt
 801cf38:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801cf3c:	fa43 f606 	asrlt.w	r6, r3, r6
 801cf40:	19a4      	addlt	r4, r4, r6
 801cf42:	ea24 0408 	bic.w	r4, r4, r8
 801cf46:	2500      	movs	r5, #0
 801cf48:	e7df      	b.n	801cf0a <floor+0x42>
 801cf4a:	2e33      	cmp	r6, #51	; 0x33
 801cf4c:	dd0a      	ble.n	801cf64 <floor+0x9c>
 801cf4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cf52:	d103      	bne.n	801cf5c <floor+0x94>
 801cf54:	f7e3 f91e 	bl	8000194 <__adddf3>
 801cf58:	4607      	mov	r7, r0
 801cf5a:	460b      	mov	r3, r1
 801cf5c:	4638      	mov	r0, r7
 801cf5e:	4619      	mov	r1, r3
 801cf60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf64:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801cf68:	f04f 32ff 	mov.w	r2, #4294967295
 801cf6c:	fa22 f808 	lsr.w	r8, r2, r8
 801cf70:	ea18 0f00 	tst.w	r8, r0
 801cf74:	d0f2      	beq.n	801cf5c <floor+0x94>
 801cf76:	a310      	add	r3, pc, #64	; (adr r3, 801cfb8 <floor+0xf0>)
 801cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf7c:	f7e3 f90a 	bl	8000194 <__adddf3>
 801cf80:	2200      	movs	r2, #0
 801cf82:	2300      	movs	r3, #0
 801cf84:	f7e3 fd4c 	bl	8000a20 <__aeabi_dcmpgt>
 801cf88:	2800      	cmp	r0, #0
 801cf8a:	d0be      	beq.n	801cf0a <floor+0x42>
 801cf8c:	2c00      	cmp	r4, #0
 801cf8e:	da02      	bge.n	801cf96 <floor+0xce>
 801cf90:	2e14      	cmp	r6, #20
 801cf92:	d103      	bne.n	801cf9c <floor+0xd4>
 801cf94:	3401      	adds	r4, #1
 801cf96:	ea25 0508 	bic.w	r5, r5, r8
 801cf9a:	e7b6      	b.n	801cf0a <floor+0x42>
 801cf9c:	2301      	movs	r3, #1
 801cf9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801cfa2:	fa03 f606 	lsl.w	r6, r3, r6
 801cfa6:	4435      	add	r5, r6
 801cfa8:	42bd      	cmp	r5, r7
 801cfaa:	bf38      	it	cc
 801cfac:	18e4      	addcc	r4, r4, r3
 801cfae:	e7f2      	b.n	801cf96 <floor+0xce>
 801cfb0:	2500      	movs	r5, #0
 801cfb2:	462c      	mov	r4, r5
 801cfb4:	e7a9      	b.n	801cf0a <floor+0x42>
 801cfb6:	bf00      	nop
 801cfb8:	8800759c 	.word	0x8800759c
 801cfbc:	7e37e43c 	.word	0x7e37e43c
 801cfc0:	bff00000 	.word	0xbff00000
 801cfc4:	000fffff 	.word	0x000fffff

0801cfc8 <_init>:
 801cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfca:	bf00      	nop
 801cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfce:	bc08      	pop	{r3}
 801cfd0:	469e      	mov	lr, r3
 801cfd2:	4770      	bx	lr

0801cfd4 <_fini>:
 801cfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfd6:	bf00      	nop
 801cfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfda:	bc08      	pop	{r3}
 801cfdc:	469e      	mov	lr, r3
 801cfde:	4770      	bx	lr
